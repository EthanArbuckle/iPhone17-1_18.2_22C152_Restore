kaldi::Fbank *kaldi::Fbank::Fbank(kaldi::Fbank *this, const kaldi::FbankOptions *a2)
{
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  int v8;
  void *v9;
  int v10;
  std::__shared_weak_count *v11;
  float v12;
  int v13;

  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = &unk_1F0A472F8;
  v4 = *(_OWORD *)((char *)a2 + 8);
  *(void *)((char *)this + 37) = *(void *)((char *)a2 + 21);
  *(_OWORD *)((char *)this + 24) = v4;
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 2, *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 2);
    *((void *)this + 8) = *((void *)a2 + 6);
    *((_OWORD *)this + 3) = v5;
  }
  *((void *)this + 9) = *((void *)a2 + 7);
  v6 = *((_OWORD *)a2 + 4);
  v7 = *((_OWORD *)a2 + 5);
  v8 = *((_DWORD *)a2 + 24);
  *((void *)this + 17) = 0;
  *((void *)this + 16) = (char *)this + 136;
  *((_DWORD *)this + 28) = v8;
  *((_OWORD *)this + 5) = v6;
  *((_OWORD *)this + 6) = v7;
  *((void *)this + 18) = 0;
  kaldi::FeatureWindowFunction::FeatureWindowFunction((kaldi::Fbank *)((char *)this + 152), (const kaldi::FbankOptions *)((char *)a2 + 8));
  *((void *)this + 22) = 0;
  if (*((unsigned char *)a2 + 99))
  {
    v9 = operator new(0x90uLL);
    v9[1] = 0;
    v9[2] = 0;
    v10 = (int)*((float *)a2 + 3);
    *v9 = &unk_1F0A5E768;
    v9[3] = 850045863;
    *((_OWORD *)v9 + 2) = 0u;
    *((_OWORD *)v9 + 3) = 0u;
    *((_OWORD *)v9 + 4) = 0u;
    *((_OWORD *)v9 + 5) = 0u;
    *((_OWORD *)v9 + 6) = 0u;
    *((_DWORD *)v9 + 28) = v10;
    v9[16] = 0;
    v9[17] = 0;
    v9[15] = 0;
    v11 = (std::__shared_weak_count *)*((void *)this + 1);
    *(void *)this = v9 + 3;
    *((void *)this + 1) = v9;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  v12 = *((float *)a2 + 23);
  if (v12 > 0.0) {
    *((float *)this + 30) = logf(v12);
  }
  v13 = kaldi::FrameExtractionOptions::PaddedWindowSize((const kaldi::FbankOptions *)((char *)a2 + 8));
  if ((v13 & (v13 - 1)) == 0) {
    operator new();
  }
  kaldi::Fbank::GetMelBanks(this, 1.0);
  return this;
}

void sub_1B23BC808(_Unwind_Exception *exception_object)
{
  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::Fbank::GetMelBanks(kaldi::Fbank *this, float a2)
{
  v2 = (char **)*((void *)this + 17);
  if (!v2) {
    goto LABEL_8;
  }
  v3 = (float *)((char *)this + 136);
  do
  {
    v4 = v2 + 1;
    if (*((float *)v2 + 8) >= a2)
    {
      v4 = v2;
      v3 = (float *)v2;
    }
    v2 = (char **)*v4;
  }
  while (*v4);
  if (v3 == (float *)((char *)this + 136) || v3[8] > a2) {
LABEL_8:
  }
    operator new();
  return *((void *)v3 + 5);
}

void sub_1B23BC960(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A0C409C5A7551);
  _Unwind_Resume(a1);
}

void kaldi::Fbank::~Fbank(kaldi::Fbank *this)
{
  v2 = (char *)this + 128;
  v3 = (char *)*((void *)this + 16);
  v4 = (char *)this + 136;
  if (v3 != (char *)this + 136)
  {
    do
    {
      uint64_t v5 = *((void *)v3 + 5);
      if (v5)
      {
        v12 = (void **)(v5 + 24);
        std::vector<std::pair<int,kaldi::Vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v12);
        kaldi::Vector<float>::Destroy(v5);
        MEMORY[0x1B3EA8670](v5, 0x10A0C409C5A7551);
      }
      v6 = (char *)*((void *)v3 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (char *)*((void *)v3 + 2);
          BOOL v8 = *(void *)v7 == (void)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v4);
  }
  uint64_t v9 = *((void *)this + 22);
  if (v9)
  {
    uint64_t v10 = kaldi::SplitRadixComplexFft<float>::~SplitRadixComplexFft(v9);
    MEMORY[0x1B3EA8670](v10, 0x1090C40943DB512);
  }
  kaldi::Vector<float>::Destroy((uint64_t)this + 152);
  std::__tree<int>::destroy((uint64_t)v2, *((void **)this + 17));
  *((void *)this + 2) = &unk_1F0A472F8;
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  v11 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void kaldi::Fbank::Compute(kaldi::Fbank *a1, uint64_t a2, int32x2_t *a3, void **a4, float a5, uint64_t a6, int a7)
{
  uint64_t MelBanks = kaldi::Fbank::GetMelBanks(a1, a5);
  kaldi::Fbank::ComputeInternal((uint64_t)a1, a2, MelBanks, a3, a4, a7);
}

void kaldi::Fbank::ComputeInternal(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4, void **a5, int a6)
{
  v34 = (float *)(a1 + 24);
  uint64_t v10 = kaldi::NumFrames(*(_DWORD *)(a2 + 8), a1 + 24);
  if (v10)
  {
    int v11 = v10;
    kaldi::Matrix<float>::Resize(a4, v10, *(_DWORD *)(a1 + 80) + *(unsigned __int8 *)(a1 + 104), 0, 0);
    if (a5) {
      kaldi::ExtractWaveformRemainder(a2, v34, a5);
    }
    v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    memset(v47, 0, sizeof(v47));
    v44 = 0;
    v45 = 0;
    uint64_t v46 = 0;
    std::vector<float>::vector(__p, v11);
    if (v11 >= 1)
    {
      int v12 = 0;
      uint64_t v13 = 0;
      int v14 = *(unsigned __int8 *)(a1 + 104);
      do
      {
        float v42 = 1.0;
        if ((v14 || *(unsigned char *)(a1 + 115)) && *(unsigned char *)(a1 + 112)) {
          v15 = &v42;
        }
        else {
          v15 = 0;
        }
        kaldi::ExtractWindow((uint64_t *)a2, v13, (uint64_t)v34, (float **)(a1 + 152), (void **)&v48, v15);
        if (*(unsigned char *)(a1 + 104) || *(unsigned char *)(a1 + 115))
        {
          if (!*(unsigned char *)(a1 + 112))
          {
            float v16 = kaldi::VecVec<float>((uint64_t)&v48, (const float **)&v48);
            if (v16 < 1.1755e-38) {
              float v16 = 1.1755e-38;
            }
            float v42 = v16;
          }
          float v17 = v42;
          if (!*(unsigned char *)(a1 + 115)) {
            goto LABEL_20;
          }
          *((float *)__p[0] + v13) = v42;
        }
        float v17 = v42;
LABEL_20:
        float v18 = logf(v17);
        if ((LODWORD(v18) & 0x7FFFFFFFu) >= 0x7F800000)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v38);
          kaldi::VectorBase<float>::Write((uint64_t)&v48, &v38, 0);
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v51);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)"Non-finite log energy found for frame ", 38);
          v28 = (void *)std::ostream::operator<<();
          v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)". Waveform is: ", 15);
          std::stringbuf::str();
          if ((v37 & 0x80u) == 0) {
            v30 = v36;
          }
          else {
            v30 = (void **)v36[0];
          }
          if ((v37 & 0x80u) == 0) {
            uint64_t v31 = v37;
          }
          else {
            uint64_t v31 = (uint64_t)v36[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
          if ((char)v37 < 0) {
            operator delete(v36[0]);
          }
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v51);
        }
        uint64_t v19 = *(void *)(a1 + 176);
        if (v19) {
          kaldi::SplitRadixRealFft<float>::Compute(v19, v48, 1, (float **)&v44);
        }
        else {
          kaldi::RealFft<float>((uint64_t)&v48, 1);
        }
        kaldi::ComputePowerSpectrum((uint64_t)&v48);
        int v53 = 0;
        uint64_t v54 = 0;
        v51 = v48;
        int v52 = (int)v49 / 2 + 1;
        kaldi::MelBanks::Compute(a3, &v51, (uint64_t)v47);
        if (*(unsigned char *)(a1 + 114))
        {
          kaldi::VectorBase<float>::ApplyFloor((uint64_t)v47, 1.1755e-38);
          kaldi::VectorBase<float>::ApplyLog((uint64_t)v47);
        }
        int32x2_t v20 = *a4;
        __int32 v21 = a4[2].i32[0];
        kaldi::MatrixBase<float>::NumCols((uint64_t)a4);
        v22 = (float *)(*(void *)&v20 + 4 * v21 * (int)v13);
        uint64_t v23 = *(unsigned __int8 *)(a1 + 104);
        int v24 = *(_DWORD *)(a1 + 80);
        int v40 = 0;
        uint64_t v41 = 0;
        v38 = &v22[v23];
        int v39 = v24;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v38, v47);
        int v14 = *(unsigned __int8 *)(a1 + 104);
        if (*(unsigned char *)(a1 + 104))
        {
          if (*(float *)(a1 + 108) > 0.0 && v18 < *(float *)(a1 + 120)) {
            float v18 = *(float *)(a1 + 120);
          }
          float *v22 = v18;
          if (*(unsigned char *)(a1 + 113))
          {
            uint64_t v25 = *(unsigned int *)(a1 + 80);
            if ((int)v25 >= 1)
            {
              for (uint64_t i = 0; i != v25; ++i)
              {
                v27 = (_DWORD *)(*(void *)&v20 + 4 * v21 * v12 + 4 * i);
                _DWORD *v27 = v27[1];
              }
            }
            v22[(int)v25] = v18;
          }
        }
        ++v13;
        ++v12;
      }
      while (v13 != v11);
    }
    if (*(unsigned char *)(a1 + 115)) {
      kaldi::SnrTracker::add_frame_energy(*(void *)a1, (char **)__p);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v44)
    {
      v45 = v44;
      operator delete(v44);
    }
    kaldi::Vector<float>::Destroy((uint64_t)v47);
    kaldi::Vector<float>::Destroy((uint64_t)&v48);
  }
  else
  {
    if (!a6)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)"No frames fit in file (#samples is ", 35);
      v32 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v32, ")");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v51);
    }
    kaldi::Matrix<float>::Resize(a4, 0, 0, 0, 0);
  }
}

void sub_1B23BCFB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::ostringstream::~ostringstream((uint64_t)va);
  JUMPOUT(0x1B23BCFE4);
}

void sub_1B23BCFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,char a59)
{
  if (__p) {
    operator delete(__p);
  }
  if (a53) {
    operator delete(a53);
  }
  kaldi::Vector<float>::Destroy((uint64_t)&a56);
  kaldi::Vector<float>::Destroy((uint64_t)&a59);
  _Unwind_Resume(a1);
}

double quasar::corrective_reranking::TokenClassification::TokenClassification(quasar::corrective_reranking::TokenClassification *this)
{
  *((void *)this + 6) = 0;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_DWORD *)this + 14) = 4;
  return result;
}

std::string *quasar::corrective_reranking::TokenClassification::TokenClassification(std::string *this, long long *a2, uint64_t a3, std::string::size_type *a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(this[1].__r_.__value_.__r.__words, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  this[2].__r_.__value_.__r.__words[0] = *a4;
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = 4;
  return this;
}

void sub_1B23BD0CC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::rescoring::GenerateTransformedFeatureValues(int *a1, uint64_t a2, unsigned __int8 ***a3, uint64_t **a4)
{
  uint64_t v225 = *MEMORY[0x1E4F143B8];
  v4 = *a3;
  v176 = (char **)a3[1];
  if (*a3 != (unsigned __int8 **)v176)
  {
    uint64_t v5 = a4;
    uint64_t v6 = a2;
    long long v7 = a1;
    BOOL v8 = (unsigned int *)((char *)a1 + *(unsigned __int16 *)((char *)a1 - *a1 + 6));
    unint64_t v9 = *(unsigned int *)((char *)v8 + *v8);
    v178 = (unsigned int *)(a2 + 20);
    v180 = (unsigned int *)(a2 + 16);
    if (v9 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = *(unsigned int *)((char *)v8 + *v8);
    }
    float v11 = (float)v9;
    uint64_t v185 = *(unsigned int *)((char *)v8 + *v8);
    while (1)
    {
      kaldi::Matrix<float>::Matrix((uint64_t)&v186);
      int v12 = (char *)v4[3];
      if (v4[4] != (unsigned __int8 *)v12) {
        break;
      }
LABEL_257:
      quasar::lm::InsertOrDie<std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>(v5, (uint64_t)v4, (uint64_t)&v186);
      kaldi::Matrix<float>::~Matrix((uint64_t)&v186);
      v4 += 9;
      if (v4 == (unsigned __int8 **)v176) {
        return 1;
      }
    }
    unint64_t v13 = 0;
    v181 = v4;
    while (1)
    {
      unint64_t v183 = v13;
      uint64_t v184 = v12[v13];
      unsigned int v182 = v184 - 5;
      if (!v13 && v182 >= 3) {
        break;
      }
LABEL_24:
      if (quasar::gLogLevel >= 6)
      {
        long long v223 = 0u;
        long long v224 = 0u;
        long long v221 = 0u;
        long long v222 = 0u;
        long long v219 = 0u;
        long long v220 = 0u;
        long long v217 = 0u;
        long long v218 = 0u;
        long long v215 = 0u;
        long long v216 = 0u;
        long long v213 = 0u;
        long long v214 = 0u;
        long long v211 = 0u;
        long long v212 = 0u;
        long long v209 = 0u;
        long long v210 = 0u;
        long long v208 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v208);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v208, (uint64_t)"Applying transformation ", 24);
        uint64_t v23 = "";
        if (v184 <= 0x11) {
          uint64_t v23 = quasar::rescoring::EnumNamesFeatureTransformation(void)::names[v184];
        }
        size_t v24 = strlen(v23);
        uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" ", 1);
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"for feature ", 12);
        quasar::rescoring::EnumNameFeatureTypes<std::vector<quasar::rescoring::FeatureType>>(v4);
        if ((v206 & 0x80u) == 0) {
          v28 = __p;
        }
        else {
          v28 = (void **)__p[0];
        }
        if ((v206 & 0x80u) == 0) {
          uint64_t v29 = v206;
        }
        else {
          uint64_t v29 = (uint64_t)__p[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
        if ((char)v206 < 0) {
          operator delete(__p[0]);
        }
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v208);
      }
      if (v182 <= 2)
      {
        if (v184 == 7)
        {
          int v66 = (char)**v4;
          v67 = v180;
          if (v66 == 20 || ((v66 - 11) >= 4 ? (BOOL v68 = v66 == 20) : (BOOL v68 = 1), v67 = v178, v68))
          {
            int v69 = *v67;
            kaldi::Matrix<float>::Matrix((uint64_t)&v208, v9, *v67, 0, 0);
            uint64_t v165 = v69;
            if (v69) {
              goto LABEL_105;
            }
          }
          else
          {
            kaldi::Matrix<float>::Matrix((uint64_t)&v208, v9, 1, 0, 0);
            uint64_t v165 = 1;
LABEL_105:
            uint64_t v70 = 0;
            uint64_t v71 = v185;
            do
            {
              if (v71)
              {
                unint64_t v72 = 0;
                do
                {
                  float AtomicFeatureValue = quasar::rescoring::Featurizer::GetAtomicFeatureValue(v6, v7, (uint64_t)v5, v72, v66 | (unint64_t)(v70 << 32));
                  *(float *)(v208 + 4 * (int)v209 * (int)v72++ + 4 * (int)v70) = AtomicFeatureValue;
                }
                while (v10 != v72);
                uint64_t v71 = v185;
              }
              ++v70;
            }
            while (v70 != v165);
          }
          int v74 = (char)(*v181)[1];
          v75 = v180;
          if (v74 == 20 || ((v74 - 11) >= 4 ? (BOOL v76 = v74 == 20) : (BOOL v76 = 1), v75 = v178, v76))
          {
            int v77 = *v75;
            kaldi::Matrix<float>::Matrix((uint64_t)__p, v185, *v75, 0, 0);
            uint64_t v168 = v77;
            if (v77) {
              goto LABEL_118;
            }
          }
          else
          {
            kaldi::Matrix<float>::Matrix((uint64_t)__p, v185, 1, 0, 0);
            uint64_t v168 = 1;
LABEL_118:
            uint64_t v78 = 0;
            uint64_t v79 = v185;
            do
            {
              if (v79)
              {
                unint64_t v80 = 0;
                do
                {
                  float v81 = quasar::rescoring::Featurizer::GetAtomicFeatureValue(v6, v7, (uint64_t)v5, v80, v74 | (unint64_t)(v78 << 32));
                  *((float *)__p[0] + v205 * (int)v80++ + (int)v78) = v81;
                }
                while (v10 != v80);
                uint64_t v79 = v185;
              }
              ++v78;
            }
            while (v78 != v168);
          }
          int v82 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v208);
          int v83 = kaldi::MatrixBase<float>::NumCols((uint64_t)__p);
          kaldi::Matrix<float>::Resize((int32x2_t *)&v186, v185, (v83 * v82), 0, 0);
          if (v185)
          {
            for (uint64_t i = 0; i != v185; ++i)
            {
              unint64_t v85 = 0;
              uint64_t v86 = 0;
              while (v85 < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)&v208))
              {
                uint64_t v87 = v6;
                uint64_t v88 = 0;
                for (unint64_t j = 0; j < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)__p); ++j)
                {
                  if (*(float *)((char *)__p[0] + 4 * v205 * (int)i + (v88 >> 30)) == 0.0) {
                    int v90 = 2143289344;
                  }
                  else {
                    int v90 = *(_DWORD *)(v208 + 4 * (int)v209 * (int)i + 4 * (int)v85);
                  }
                  *(_DWORD *)((char *)&v186[v188 * (int)i] + (((v86 << 32) + v88) >> 30)) = v90;
                  v88 += 0x100000000;
                }
                ++v85;
                v86 += j;
                uint64_t v6 = v87;
              }
            }
          }
          kaldi::Matrix<float>::~Matrix((uint64_t)__p);
          kaldi::Matrix<float>::~Matrix((uint64_t)&v208);
          long long v7 = a1;
          v4 = v181;
          goto LABEL_256;
        }
        if (v184 != 6)
        {
          if (v184 != 5)
          {
            long long v223 = 0u;
            long long v224 = 0u;
            long long v221 = 0u;
            long long v222 = 0u;
            long long v219 = 0u;
            long long v220 = 0u;
            long long v217 = 0u;
            long long v218 = 0u;
            long long v215 = 0u;
            long long v216 = 0u;
            long long v213 = 0u;
            long long v214 = 0u;
            long long v211 = 0u;
            long long v212 = 0u;
            long long v209 = 0u;
            long long v210 = 0u;
            long long v208 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v208);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v208, (uint64_t)"Not implemented", 15);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v208);
          }
          int v30 = (char)**v4;
          uint64_t v31 = v180;
          if (v30 == 20 || ((v30 - 11) >= 4 ? (v32 = v30 == 20) : (v32 = 1), uint64_t v31 = v178, v32))
          {
            int v33 = *v31;
            kaldi::Matrix<float>::Matrix((uint64_t)&v208, v9, *v31, 0, 0);
            uint64_t v166 = v33;
            if (v33) {
              goto LABEL_47;
            }
          }
          else
          {
            kaldi::Matrix<float>::Matrix((uint64_t)&v208, v9, 1, 0, 0);
            uint64_t v166 = 1;
LABEL_47:
            uint64_t v34 = 0;
            uint64_t v35 = v185;
            do
            {
              if (v35)
              {
                unint64_t v36 = 0;
                do
                {
                  float v37 = quasar::rescoring::Featurizer::GetAtomicFeatureValue(v6, v7, (uint64_t)v5, v36, v30 | (unint64_t)(v34 << 32));
                  *(float *)(v208 + 4 * (int)v209 * (int)v36++ + 4 * (int)v34) = v37;
                }
                while (v10 != v36);
                uint64_t v35 = v185;
              }
              ++v34;
            }
            while (v34 != v166);
          }
          int v38 = (char)(*v181)[1];
          int v39 = v180;
          if (v38 == 20 || ((v38 - 11) >= 4 ? (v40 = v38 == 20) : (v40 = 1), int v39 = v178, v40))
          {
            int v41 = *v39;
            kaldi::Matrix<float>::Matrix((uint64_t)__p, v185, *v39, 0, 0);
            uint64_t v169 = v41;
            if (v41) {
              goto LABEL_60;
            }
          }
          else
          {
            kaldi::Matrix<float>::Matrix((uint64_t)__p, v185, 1, 0, 0);
            uint64_t v169 = 1;
LABEL_60:
            uint64_t v42 = 0;
            uint64_t v43 = v185;
            do
            {
              if (v43)
              {
                unint64_t v44 = 0;
                do
                {
                  float v45 = quasar::rescoring::Featurizer::GetAtomicFeatureValue(v6, v7, (uint64_t)v5, v44, v38 | (unint64_t)(v42 << 32));
                  *((float *)__p[0] + v205 * (int)v44++ + (int)v42) = v45;
                }
                while (v10 != v44);
                uint64_t v43 = v185;
              }
              ++v42;
            }
            while (v42 != v169);
          }
          quasar::rescoring::ComputeSpearmanCorrelation((uint64_t)&v208, (uint64_t)__p);
          float v47 = v46;
          kaldi::Matrix<float>::~Matrix((uint64_t)__p);
          kaldi::Matrix<float>::~Matrix((uint64_t)&v208);
          kaldi::Matrix<float>::Resize((int32x2_t *)&v186, 1, 4, 0, 0);
          v4 = v181;
          if ((LODWORD(v47) & 0x7FFFFFFFu) >= 0x7F800000)
          {
            v186[3] = 1065353216;
          }
          else if (v47 <= 0.000001)
          {
            if (v47 >= -0.000001) {
              v186[2] = 1065353216;
            }
            else {
              v186[1] = 1065353216;
            }
          }
          else
          {
            _DWORD *v186 = 1065353216;
          }
          goto LABEL_256;
        }
        int v48 = (char)**v4;
        uint64_t v49 = v180;
        if (v48 == 20 || ((v48 - 11) >= 4 ? (v50 = v48 == 20) : (v50 = 1), uint64_t v49 = v178, v50))
        {
          int v51 = *v49;
          kaldi::Matrix<float>::Matrix((uint64_t)&v208, v9, *v49, 0, 0);
          uint64_t v164 = v51;
          if (v51) {
            goto LABEL_78;
          }
        }
        else
        {
          kaldi::Matrix<float>::Matrix((uint64_t)&v208, v9, 1, 0, 0);
          uint64_t v164 = 1;
LABEL_78:
          uint64_t v52 = 0;
          uint64_t v53 = v185;
          do
          {
            if (v53)
            {
              unint64_t v54 = 0;
              do
              {
                float v55 = quasar::rescoring::Featurizer::GetAtomicFeatureValue(v6, v7, (uint64_t)v5, v54, v48 | (unint64_t)(v52 << 32));
                *(float *)(v208 + 4 * (int)v209 * (int)v54++ + 4 * (int)v52) = v55;
              }
              while (v10 != v54);
              uint64_t v53 = v185;
            }
            ++v52;
          }
          while (v52 != v164);
        }
        int v56 = (char)(*v181)[1];
        v57 = v180;
        if (v56 == 20 || ((v56 - 11) >= 4 ? (BOOL v58 = v56 == 20) : (BOOL v58 = 1), v57 = v178, v58))
        {
          int v59 = *v57;
          kaldi::Matrix<float>::Matrix((uint64_t)__p, v185, *v57, 0, 0);
          uint64_t v167 = v59;
          if (v59) {
            goto LABEL_91;
          }
        }
        else
        {
          kaldi::Matrix<float>::Matrix((uint64_t)__p, v185, 1, 0, 0);
          uint64_t v167 = 1;
LABEL_91:
          uint64_t v60 = 0;
          uint64_t v61 = v185;
          do
          {
            if (v61)
            {
              unint64_t v62 = 0;
              do
              {
                float v63 = quasar::rescoring::Featurizer::GetAtomicFeatureValue(v6, v7, (uint64_t)v5, v62, v56 | (unint64_t)(v60 << 32));
                *((float *)__p[0] + v205 * (int)v62++ + (int)v60) = v63;
              }
              while (v10 != v62);
              uint64_t v61 = v185;
            }
            ++v60;
          }
          while (v60 != v167);
        }
        quasar::rescoring::ComputeSpearmanCorrelation((uint64_t)&v208, (uint64_t)__p);
        int v65 = v64;
        kaldi::Matrix<float>::~Matrix((uint64_t)__p);
        kaldi::Matrix<float>::~Matrix((uint64_t)&v208);
        kaldi::Matrix<float>::Resize((int32x2_t *)&v186, 1, 1, 1, 0);
        v4 = v181;
        _DWORD *v186 = v65;
        goto LABEL_256;
      }
      switch((int)v184)
      {
        case 1:
          kaldi::MatrixBase<float>::Scale((uint64_t)&v186, -1.0);
          break;
        case 2:
          for (unint64_t k = 0; k < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)&v186); ++k)
          {
            float v131 = kaldi::MatrixBase<float>::MinByCol((uint64_t)&v186, k, 1);
            float v132 = kaldi::MatrixBase<float>::MaxByCol((uint64_t)&v186, k, 1);
            if (v185)
            {
              int v133 = 0;
              uint64_t v134 = 0;
              float v135 = v132 - v131;
              int v136 = v188;
              uint64_t v137 = (uint64_t)&v186[(int)k];
              do
              {
                if (v135 <= 0.000001) {
                  *(_DWORD *)(v137 + 4 * v133) = 0;
                }
                else {
                  *(float *)(v137 + 4 * v133) = fmaxf(fminf((float)(*(float *)(v137 + 4 * v133) - v131) / v135, 1.0), 0.0);
                }
                ++v134;
                v133 += v136;
              }
              while (v185 != v134);
            }
          }
          break;
        case 4:
          int v91 = v187;
          if (v187)
          {
            int64_t v92 = 0;
            do
            {
              *(float *)&v186[v188 * (int)v92 + (v92 >> 32)] = 1.0 - *(float *)&v186[v188 * (int)v92 + (v92 >> 32)];
              int v93 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v186) - 1;
              if (v93 == HIDWORD(v92)) {
                unsigned int v94 = v92 + 1;
              }
              else {
                unsigned int v94 = v92;
              }
              if (v93 == HIDWORD(v92)) {
                unint64_t v95 = 0;
              }
              else {
                unint64_t v95 = (v92 & 0xFFFFFFFF00000000) + 0x100000000;
              }
              unint64_t v96 = HIDWORD(v95);
              int64_t v92 = v95 & 0xFFFFFFFF00000000 | v94;
              if (v96) {
                BOOL v97 = 0;
              }
              else {
                BOOL v97 = v91 == v94;
              }
            }
            while (!v97);
          }
          break;
        case 8:
          for (unint64_t m = 0; m < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)&v186); ++m)
          {
            if (v185)
            {
              int v139 = 0;
              uint64_t v140 = 0;
              float v141 = 0.0;
              float v142 = 0.0;
              do
              {
                float v143 = *(float *)&v186[(int)m + v139];
                float v142 = v142 + v143;
                float v141 = v141 + (float)(v143 * v143);
                ++v140;
                v139 += v188;
              }
              while (v185 != v140);
              int v144 = 0;
              uint64_t v145 = 0;
              float v146 = v142 / v11;
              float v147 = sqrtf((float)(v141 / v11) - (float)(v146 * v146));
              int v148 = v188;
              uint64_t v149 = (uint64_t)&v186[(int)m];
              do
              {
                if (v147 <= 0.000001) {
                  *(_DWORD *)(v149 + 4 * v144) = 0;
                }
                else {
                  *(float *)(v149 + 4 * v144) = (float)(*(float *)(v149 + 4 * v144) - v146) / v147;
                }
                ++v145;
                v144 += v148;
              }
              while (v185 != v145);
            }
          }
          break;
        case 9:
          int v150 = v187;
          if (v187)
          {
            int64_t v151 = 0;
            do
            {
              *(float *)&v186[v188 * (int)v151 + (v151 >> 32)] = fminf(*(float *)&v186[v188 * (int)v151 + (v151 >> 32)], 0.0);
              int v152 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v186) - 1;
              if (v152 == HIDWORD(v151)) {
                unsigned int v153 = v151 + 1;
              }
              else {
                unsigned int v153 = v151;
              }
              if (v152 == HIDWORD(v151)) {
                unint64_t v154 = 0;
              }
              else {
                unint64_t v154 = (v151 & 0xFFFFFFFF00000000) + 0x100000000;
              }
              unint64_t v155 = HIDWORD(v154);
              int64_t v151 = v154 & 0xFFFFFFFF00000000 | v153;
              if (v155) {
                BOOL v156 = 0;
              }
              else {
                BOOL v156 = v150 == v153;
              }
            }
            while (!v156);
          }
          break;
        case 10:
          int v98 = v187;
          if (v187)
          {
            int64_t v99 = 0;
            do
            {
              *(float *)&v186[v188 * (int)v99 + (v99 >> 32)] = fmaxf(*(float *)&v186[v188 * (int)v99 + (v99 >> 32)], 0.0);
              int v100 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v186) - 1;
              if (v100 == HIDWORD(v99)) {
                unsigned int v101 = v99 + 1;
              }
              else {
                unsigned int v101 = v99;
              }
              if (v100 == HIDWORD(v99)) {
                unint64_t v102 = 0;
              }
              else {
                unint64_t v102 = (v99 & 0xFFFFFFFF00000000) + 0x100000000;
              }
              unint64_t v103 = HIDWORD(v102);
              int64_t v99 = v102 & 0xFFFFFFFF00000000 | v101;
              if (v103) {
                BOOL v104 = 0;
              }
              else {
                BOOL v104 = v98 == v101;
              }
            }
            while (!v104);
          }
          break;
        default:
          if (v184 > 0xF) {
            goto LABEL_247;
          }
          if (((1 << v184) & 0xB808) != 0)
          {
            if (v184 == 15)
            {
              v105 = (char *)v4[6];
              if (v13 >= (v4[7] - (unsigned __int8 *)v105) >> 3 || !*(void *)&v105[8 * v13])
              {
                long long v223 = 0u;
                long long v224 = 0u;
                long long v221 = 0u;
                long long v222 = 0u;
                long long v219 = 0u;
                long long v220 = 0u;
                long long v217 = 0u;
                long long v218 = 0u;
                long long v215 = 0u;
                long long v216 = 0u;
                long long v213 = 0u;
                long long v214 = 0u;
                long long v211 = 0u;
                long long v212 = 0u;
                long long v209 = 0u;
                long long v210 = 0u;
                long long v208 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v208);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v208, (uint64_t)"IS_LESS_THAN_THRESHOLD feature transformation requires argument.", 64);
                quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v208);
              }
            }
            unint64_t v106 = 0;
            int v107 = v184;
LABEL_172:
            if (v106 >= (int)kaldi::MatrixBase<float>::NumCols((uint64_t)&v186)) {
              break;
            }
            if (v107 > 11)
            {
              uint64_t v108 = v185;
              if (v107 == 12)
              {
                int32x2_t v126 = (int32x2_t)v186;
                int v127 = v186[(int)v106];
                v111 = &v195;
                v195 = &unk_1F0A64580;
                int v196 = v127;
                v197 = &v195;
                if (!v185) {
                  goto LABEL_200;
                }
                for (uint64_t n = 0; n != v185; ++n)
                {
                  unsigned int v129 = std::function<BOOL ()(float)>::operator()((uint64_t)&v195, *(float *)(*(void *)&v126 + 4 * v188 * (int)n + 4 * (int)v106));
                  int32x2_t v126 = (int32x2_t)v186;
                  *(float *)&v186[v188 * (int)n + (int)v106] = (float)v129;
                }
                v111 = &v195;
              }
              else
              {
                if (v107 != 13) {
                  goto LABEL_186;
                }
                int32x2_t v114 = (int32x2_t)v186;
                int v115 = v186[(int)v106];
                v111 = &v192;
                v192 = &unk_1F0A64600;
                int v193 = v115;
                v194 = &v192;
                if (!v185) {
                  goto LABEL_200;
                }
                for (iuint64_t i = 0; ii != v185; ++ii)
                {
                  unsigned int v117 = std::function<BOOL ()(float)>::operator()((uint64_t)&v192, *(float *)(*(void *)&v114 + 4 * v188 * (int)ii + 4 * (int)v106));
                  int32x2_t v114 = (int32x2_t)v186;
                  *(float *)&v186[v188 * (int)ii + (int)v106] = (float)v117;
                }
                v111 = &v192;
              }
            }
            else
            {
              uint64_t v108 = v185;
              if (v107 == 3)
              {
                float v122 = kaldi::MatrixBase<float>::MinByCol((uint64_t)&v186, v106, 1);
                v111 = &v201;
                v201 = &unk_1F0A64480;
                float v202 = v122;
                v203 = &v201;
                if (!v185) {
                  goto LABEL_200;
                }
                uint64_t v123 = 0;
                int32x2_t v124 = (int32x2_t)v186;
                do
                {
                  unsigned int v125 = std::function<BOOL ()(float)>::operator()((uint64_t)&v201, *(float *)(*(void *)&v124 + 4 * v188 * (int)v123 + 4 * (int)v106));
                  int32x2_t v124 = (int32x2_t)v186;
                  *(float *)&v186[v188 * (int)v123++ + (int)v106] = (float)v125;
                }
                while (v185 != v123);
                v111 = &v201;
              }
              else
              {
                if (v107 == 11)
                {
                  int32x2_t v109 = (int32x2_t)v186;
                  int v110 = v186[(int)v106];
                  v111 = &v198;
                  v198 = &unk_1F0A64500;
                  int v199 = v110;
                  v200 = &v198;
                  if (v185)
                  {
                    for (junint64_t j = 0; jj != v185; ++jj)
                    {
                      unsigned int v113 = std::function<BOOL ()(float)>::operator()((uint64_t)&v198, *(float *)(*(void *)&v109 + 4 * v188 * (int)jj + 4 * (int)v106));
                      int32x2_t v109 = (int32x2_t)v186;
                      *(float *)&v186[v188 * (int)jj + (int)v106] = (float)v113;
                    }
                    v111 = &v198;
                    goto LABEL_199;
                  }
LABEL_200:
                  std::__function::__value_func<BOOL ()(float)>::~__value_func[abi:ne180100](v111);
LABEL_201:
                  ++v106;
                  goto LABEL_172;
                }
LABEL_186:
                if (v107 != 15) {
                  goto LABEL_201;
                }
                int v118 = **(_DWORD **)&v4[6][8 * v183];
                v111 = &v189;
                v189 = &unk_1F0A64680;
                int v190 = v118;
                v191 = &v189;
                if (!v108) {
                  goto LABEL_200;
                }
                uint64_t v119 = 0;
                int32x2_t v120 = (int32x2_t)v186;
                do
                {
                  unsigned int v121 = std::function<BOOL ()(float)>::operator()((uint64_t)&v189, *(float *)(*(void *)&v120 + 4 * v188 * (int)v119 + 4 * (int)v106));
                  int32x2_t v120 = (int32x2_t)v186;
                  *(float *)&v186[v188 * (int)v119++ + (int)v106] = (float)v121;
                }
                while (v108 != v119);
                v111 = &v189;
              }
            }
LABEL_199:
            int v107 = v184;
            goto LABEL_200;
          }
          if (v184 == 14)
          {
            for (kunint64_t k = 0; kk < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)&v186); ++kk)
            {
              if (v185)
              {
                int v159 = 0;
                uint64_t v160 = 0;
                v161 = (float *)&v186[(int)kk];
                float v162 = *v161;
                int v163 = v188;
                do
                {
                  v161[v159] = v162 - v161[v159];
                  ++v160;
                  v159 += v163;
                }
                while (v185 != v160);
              }
            }
          }
          else
          {
LABEL_247:
            if ((v184 & 0xFE) != 0x10)
            {
              long long v223 = 0u;
              long long v224 = 0u;
              long long v221 = 0u;
              long long v222 = 0u;
              long long v219 = 0u;
              long long v220 = 0u;
              long long v217 = 0u;
              long long v218 = 0u;
              long long v215 = 0u;
              long long v216 = 0u;
              long long v213 = 0u;
              long long v214 = 0u;
              long long v211 = 0u;
              long long v212 = 0u;
              long long v209 = 0u;
              long long v210 = 0u;
              long long v208 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v208);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v208, (uint64_t)"Not implemented", 15);
              quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v208);
            }
            uint64_t v207 = 0;
            if (v184 == 17)
            {
              v170 = &unk_1F0A64790;
            }
            else
            {
              if (v184 != 16)
              {
                long long v223 = 0u;
                long long v224 = 0u;
                long long v221 = 0u;
                long long v222 = 0u;
                long long v219 = 0u;
                long long v220 = 0u;
                long long v217 = 0u;
                long long v218 = 0u;
                long long v215 = 0u;
                long long v216 = 0u;
                long long v213 = 0u;
                long long v214 = 0u;
                long long v211 = 0u;
                long long v212 = 0u;
                long long v209 = 0u;
                long long v210 = 0u;
                long long v208 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v208);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v208, (uint64_t)"Aggregator not implemented", 26);
                quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v208);
              }
              v170 = &unk_1F0A64700;
            }
            *(void *)&long long v208 = v170;
            *((void *)&v208 + 1) = &v186;
            *((void *)&v209 + 1) = &v208;
            std::__function::__value_func<BOOL ()(unsigned long)>::swap[abi:ne180100](&v208, __p);
            std::__function::__value_func<BOOL ()(unsigned long)>::~__value_func[abi:ne180100](&v208);
            uint64_t v171 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v186);
            kaldi::Matrix<float>::Matrix((uint64_t)&v208, 1, v171, 0, 0);
            uint64_t v172 = 0;
            for (munint64_t m = 0; mm < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)&v186); ++mm)
            {
              unsigned int v174 = std::function<BOOL ()(unsigned long)>::operator()((uint64_t)__p, mm);
              *(float *)(v208 + (v172 >> 30)) = (float)v174;
              v172 += 0x100000000;
            }
            kaldi::Matrix<float>::operator=((int32x2_t *)&v186, (uint64_t)&v208);
            kaldi::Matrix<float>::~Matrix((uint64_t)&v208);
            std::__function::__value_func<BOOL ()(unsigned long)>::~__value_func[abi:ne180100](__p);
          }
          break;
      }
LABEL_256:
      unint64_t v13 = v183 + 1;
      int v12 = (char *)v4[3];
      uint64_t v5 = a4;
      unint64_t v9 = v185;
      if (v183 + 1 >= v4[4] - (unsigned __int8 *)v12) {
        goto LABEL_257;
      }
    }
    int v14 = (char)**v4;
    v15 = v180;
    if (v14 == 20 || ((v14 - 11) >= 4 ? (BOOL v16 = v14 == 20) : (BOOL v16 = 1), v15 = v178, v16))
    {
      int v17 = *v15;
      kaldi::Matrix<float>::Matrix((uint64_t)&v208, v9, *v15, 0, 0);
      uint64_t v157 = v17;
      if (!v17)
      {
LABEL_23:
        kaldi::Matrix<float>::operator=((int32x2_t *)&v186, (uint64_t)&v208);
        v4 = v181;
        kaldi::Matrix<float>::~Matrix((uint64_t)&v208);
        unint64_t v9 = v185;
        unint64_t v13 = 0;
        goto LABEL_24;
      }
    }
    else
    {
      kaldi::Matrix<float>::Matrix((uint64_t)&v208, v9, 1, 0, 0);
      uint64_t v157 = 1;
    }
    uint64_t v18 = 0;
    uint64_t v19 = v185;
    do
    {
      if (v19)
      {
        unint64_t v20 = 0;
        do
        {
          float v21 = quasar::rescoring::Featurizer::GetAtomicFeatureValue(v6, v7, (uint64_t)v5, v20, v14 | (unint64_t)(v18 << 32));
          *(float *)(v208 + 4 * (int)v209 * (int)v20++ + 4 * (int)v18) = v21;
        }
        while (v10 != v20);
        uint64_t v19 = v185;
      }
      ++v18;
    }
    while (v18 != v157);
    goto LABEL_23;
  }
  return 1;
}

void sub_1B23BE544()
{
}

void sub_1B23BE54C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B23BE68CLL);
}

void sub_1B23BE59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,char a54)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a54);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_1B23BE604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B23BE60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

void sub_1B23BE668()
{
}

void sub_1B23BE670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

void quasar::rescoring::ComputeSpearmanCorrelation(uint64_t a1, uint64_t a2)
{
  int v4 = kaldi::MatrixBase<float>::NumRows(a1);
  if (v4 != kaldi::MatrixBase<float>::NumRows(a2))
  {
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    *(_OWORD *)unint64_t v36 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v36, "Unable to compute Spearman correlation between two variables of different dimensions.");
LABEL_46:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v36);
  }
  if ((int)kaldi::MatrixBase<float>::NumCols(a1) > 1 || (int)kaldi::MatrixBase<float>::NumCols(a2) >= 2)
  {
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    *(_OWORD *)unint64_t v36 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v36, "Unable to compute Spearman correlation between more than two variables.");
    goto LABEL_46;
  }
  if (kaldi::MatrixBase<float>::NumRows(a1))
  {
    int v5 = kaldi::MatrixBase<float>::NumRows(a1);
    quasar::rescoring::ComputeRanks(a1, 1, (uint64_t *)v36);
    quasar::rescoring::ComputeRanks(a2, 1, (uint64_t *)&__p);
    uint64_t v6 = v5;
    if (v5)
    {
      long long v7 = (unint64_t *)v36[0];
      unint64_t v8 = v5 - 1;
      if (v8 >= (v35 - (unsigned char *)__p) >> 3) {
        unint64_t v9 = (v35 - (unsigned char *)__p) >> 3;
      }
      else {
        unint64_t v9 = v5 - 1;
      }
      if (v9 >= ((char *)v36[1] - (char *)v36[0]) >> 3) {
        int64_t v10 = ((char *)v36[1] - (char *)v36[0]) >> 3;
      }
      else {
        int64_t v10 = v9;
      }
      BOOL v12 = ((char *)v36[1] - (char *)v36[0]) >> 3 <= v9 || (v35 - (unsigned char *)__p) >> 3 == v10;
      float v13 = 0.0;
      int v14 = (unint64_t *)__p;
      uint64_t v15 = v5;
      float v16 = 0.0;
      do
      {
        if (v12) {
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        }
        unint64_t v17 = *v7++;
        float v16 = v16 + (float)v17;
        unint64_t v18 = *v14++;
        float v13 = v13 + (float)v18;
        --v15;
      }
      while (v15);
      float v19 = v16 / (float)(unint64_t)v5;
      unint64_t v20 = (unint64_t *)v36[0];
      if (v8 >= (v35 - (unsigned char *)__p) >> 3) {
        unint64_t v8 = (v35 - (unsigned char *)__p) >> 3;
      }
      if (v8 >= ((char *)v36[1] - (char *)v36[0]) >> 3) {
        int64_t v21 = ((char *)v36[1] - (char *)v36[0]) >> 3;
      }
      else {
        int64_t v21 = v8;
      }
      BOOL v23 = ((char *)v36[1] - (char *)v36[0]) >> 3 <= v8 || (v35 - (unsigned char *)__p) >> 3 == v21;
      float v24 = 0.0;
      uint64_t v25 = (unint64_t *)__p;
      float v26 = 0.0;
      float v27 = 0.0;
      float v28 = v13 / (float)(unint64_t)v5;
      do
      {
        if (v23) {
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        }
        unint64_t v29 = *v20++;
        float v30 = (float)v29;
        unint64_t v31 = *v25++;
        float v32 = v30 - v19;
        float v33 = (float)v31 - v28;
        float v27 = v27 + (float)(v32 * v33);
        float v26 = v26 + (float)(v32 * v32);
        float v24 = v24 + (float)(v33 * v33);
        --v6;
      }
      while (v6);
    }
    if (__p)
    {
      uint64_t v35 = __p;
      operator delete(__p);
    }
    if (v36[0])
    {
      v36[1] = v36[0];
      operator delete(v36[0]);
    }
  }
}

void sub_1B23BE9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  if (v12) {
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t std::function<BOOL ()(unsigned long)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void quasar::rescoring::GetDefaultTransformedFeatureDescs(quasar::rescoring *this)
{
  v116[33] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = operator new(2uLL);
  *uint64_t v1 = 5121;
  uint64_t v2 = operator new(2uLL);
  _WORD *v2 = 775;
  memset(v59, 0, sizeof(v59));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v59, v1, (uint64_t)(v1 + 1), 2uLL);
  memset(v60, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v60, v2, (uint64_t)(v2 + 1), 2uLL);
  memset(&v60[3], 0, 24);
  v3 = operator new(2uLL);
  _WORD *v3 = 5126;
  uint64_t v4 = operator new(2uLL);
  _WORD *v4 = 775;
  memset(v61, 0, sizeof(v61));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v61, v3, (uint64_t)(v3 + 1), 2uLL);
  memset(v62, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v62, v4, (uint64_t)(v4 + 1), 2uLL);
  memset(&v62[3], 0, 24);
  int v5 = operator new(2uLL);
  *int v5 = 5122;
  uint64_t v6 = operator new(2uLL);
  _WORD *v6 = 775;
  memset(v63, 0, sizeof(v63));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v63, v5, (uint64_t)(v5 + 1), 2uLL);
  memset(v64, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v64, v6, (uint64_t)(v6 + 1), 2uLL);
  memset(&v64[3], 0, 24);
  long long v7 = operator new(2uLL);
  _WORD *v7 = 5121;
  unint64_t v8 = operator new(3uLL);
  *(_WORD *)unint64_t v8 = 775;
  v8[2] = 4;
  memset(v65, 0, sizeof(v65));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v65, v7, (uint64_t)(v7 + 1), 2uLL);
  memset(v66, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v66, v8, (uint64_t)(v8 + 3), 3uLL);
  memset(&v66[3], 0, 24);
  unint64_t v9 = operator new(2uLL);
  *unint64_t v9 = 5126;
  int64_t v10 = operator new(3uLL);
  *(_WORD *)int64_t v10 = 775;
  v10[2] = 4;
  memset(v67, 0, sizeof(v67));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v67, v9, (uint64_t)(v9 + 1), 2uLL);
  memset(v68, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v68, v10, (uint64_t)(v10 + 3), 3uLL);
  memset(&v68[3], 0, 24);
  float v11 = operator new(2uLL);
  _WORD *v11 = 5122;
  BOOL v12 = operator new(3uLL);
  *(_WORD *)BOOL v12 = 775;
  v12[2] = 4;
  memset(v69, 0, sizeof(v69));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v69, v11, (uint64_t)(v11 + 1), 2uLL);
  memset(v70, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v70, v12, (uint64_t)(v12 + 3), 3uLL);
  memset(&v70[3], 0, 24);
  float v13 = operator new(1uLL);
  *float v13 = 2;
  int v14 = operator new(1uLL);
  *int v14 = 2;
  memset(v71, 0, sizeof(v71));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v71, v13, (uint64_t)(v13 + 1), 1uLL);
  memset(v72, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v72, v14, (uint64_t)(v14 + 1), 1uLL);
  memset(&v72[3], 0, 24);
  uint64_t v15 = operator new(1uLL);
  unsigned char *v15 = 6;
  float v16 = operator new(1uLL);
  *float v16 = 2;
  memset(v73, 0, sizeof(v73));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v73, v15, (uint64_t)(v15 + 1), 1uLL);
  memset(v74, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v74, v16, (uint64_t)(v16 + 1), 1uLL);
  memset(&v74[3], 0, 24);
  unint64_t v17 = operator new(1uLL);
  *unint64_t v17 = 7;
  unint64_t v18 = operator new(2uLL);
  *unint64_t v18 = 513;
  memset(v75, 0, sizeof(v75));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v75, v17, (uint64_t)(v17 + 1), 1uLL);
  memset(v76, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v76, v18, (uint64_t)(v18 + 1), 2uLL);
  memset(&v76[3], 0, 24);
  float v19 = operator new(2uLL);
  *float v19 = 4368;
  unint64_t v20 = operator new(1uLL);
  *unint64_t v20 = 5;
  memset(v77, 0, sizeof(v77));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v77, v19, (uint64_t)(v19 + 1), 2uLL);
  memset(v78, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v78, v20, (uint64_t)(v20 + 1), 1uLL);
  memset(&v78[3], 0, 24);
  int64_t v21 = operator new(2uLL);
  *int64_t v21 = 4368;
  v22 = operator new(1uLL);
  unsigned char *v22 = 6;
  memset(v79, 0, sizeof(v79));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v79, v21, (uint64_t)(v21 + 1), 2uLL);
  memset(v80, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v80, v22, (uint64_t)(v22 + 1), 1uLL);
  memset(&v80[3], 0, 24);
  BOOL v23 = operator new(1uLL);
  *BOOL v23 = 7;
  float v24 = operator new(2uLL);
  *float v24 = 2568;
  memset(v81, 0, sizeof(v81));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v81, v23, (uint64_t)(v23 + 1), 1uLL);
  memset(v82, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v82, v24, (uint64_t)(v24 + 1), 2uLL);
  memset(&v82[3], 0, 24);
  uint64_t v25 = operator new(1uLL);
  *uint64_t v25 = 7;
  float v26 = operator new(2uLL);
  _WORD *v26 = 2312;
  memset(v83, 0, sizeof(v83));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v83, v25, (uint64_t)(v25 + 1), 1uLL);
  memset(v84, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v84, v26, (uint64_t)(v26 + 1), 2uLL);
  memset(&v84[3], 0, 24);
  float v27 = operator new(1uLL);
  unsigned char *v27 = 11;
  float v28 = operator new(2uLL);
  _WORD *v28 = 2568;
  memset(v85, 0, sizeof(v85));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v85, v27, (uint64_t)(v27 + 1), 1uLL);
  memset(v86, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v86, v28, (uint64_t)(v28 + 1), 2uLL);
  memset(&v86[3], 0, 24);
  unint64_t v29 = operator new(1uLL);
  unsigned char *v29 = 11;
  float v30 = operator new(2uLL);
  *float v30 = 2312;
  memset(v87, 0, sizeof(v87));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v87, v29, (uint64_t)(v29 + 1), 1uLL);
  memset(v88, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v88, v30, (uint64_t)(v30 + 1), 2uLL);
  memset(&v88[3], 0, 24);
  unint64_t v31 = operator new(1uLL);
  *unint64_t v31 = 17;
  float v32 = operator new(2uLL);
  _WORD *v32 = 2568;
  memset(v89, 0, sizeof(v89));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v89, v31, (uint64_t)(v31 + 1), 1uLL);
  memset(v90, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v90, v32, (uint64_t)(v32 + 1), 2uLL);
  memset(&v90[3], 0, 24);
  float v33 = operator new(1uLL);
  *float v33 = 17;
  uint64_t v34 = operator new(2uLL);
  _WORD *v34 = 2312;
  memset(v91, 0, sizeof(v91));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v91, v33, (uint64_t)(v33 + 1), 1uLL);
  memset(v92, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v92, v34, (uint64_t)(v34 + 1), 2uLL);
  memset(&v92[3], 0, 24);
  uint64_t v35 = operator new(1uLL);
  *uint64_t v35 = 7;
  unint64_t v36 = operator new(1uLL);
  *unint64_t v36 = 11;
  memset(v93, 0, sizeof(v93));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v93, v35, (uint64_t)(v35 + 1), 1uLL);
  memset(v94, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v94, v36, (uint64_t)(v36 + 1), 1uLL);
  memset(&v94[3], 0, 24);
  long long v37 = operator new(1uLL);
  *long long v37 = 7;
  long long v38 = operator new(1uLL);
  unsigned char *v38 = 12;
  memset(v95, 0, sizeof(v95));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v95, v37, (uint64_t)(v37 + 1), 1uLL);
  memset(v96, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v96, v38, (uint64_t)(v38 + 1), 1uLL);
  memset(&v96[3], 0, 24);
  long long v39 = operator new(1uLL);
  *long long v39 = 7;
  long long v40 = operator new(1uLL);
  *long long v40 = 13;
  memset(v97, 0, sizeof(v97));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v97, v39, (uint64_t)(v39 + 1), 1uLL);
  memset(v98, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v98, v40, (uint64_t)(v40 + 1), 1uLL);
  memset(&v98[3], 0, 24);
  long long v41 = operator new(1uLL);
  *long long v41 = 17;
  long long v42 = operator new(1uLL);
  *long long v42 = 11;
  memset(v99, 0, sizeof(v99));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v99, v41, (uint64_t)(v41 + 1), 1uLL);
  memset(v100, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v100, v42, (uint64_t)(v42 + 1), 1uLL);
  memset(&v100[3], 0, 24);
  long long v43 = operator new(1uLL);
  *long long v43 = 17;
  long long v44 = operator new(1uLL);
  unsigned char *v44 = 12;
  memset(v101, 0, sizeof(v101));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v101, v43, (uint64_t)(v43 + 1), 1uLL);
  memset(v102, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v102, v44, (uint64_t)(v44 + 1), 1uLL);
  memset(&v102[3], 0, 24);
  long long v45 = operator new(1uLL);
  unsigned char *v45 = 17;
  long long v46 = operator new(1uLL);
  *long long v46 = 13;
  memset(v103, 0, sizeof(v103));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v103, v45, (uint64_t)(v45 + 1), 1uLL);
  memset(v104, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v104, v46, (uint64_t)(v46 + 1), 1uLL);
  memset(&v104[3], 0, 24);
  long long v47 = operator new(1uLL);
  *long long v47 = 17;
  long long v48 = operator new(2uLL);
  _WORD *v48 = 2574;
  memset(v105, 0, sizeof(v105));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v105, v47, (uint64_t)(v47 + 1), 1uLL);
  memset(v106, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v106, v48, (uint64_t)(v48 + 1), 2uLL);
  memset(&v106[3], 0, 24);
  long long v49 = operator new(1uLL);
  *long long v49 = 17;
  long long v50 = operator new(2uLL);
  *long long v50 = 2318;
  memset(v107, 0, sizeof(v107));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v107, v49, (uint64_t)(v49 + 1), 1uLL);
  memset(v108, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v108, v50, (uint64_t)(v50 + 1), 2uLL);
  memset(&v108[3], 0, 24);
  long long v51 = operator new(1uLL);
  unsigned char *v51 = 7;
  long long v52 = operator new(2uLL);
  *long long v52 = 2574;
  memset(v109, 0, sizeof(v109));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v109, v51, (uint64_t)(v51 + 1), 1uLL);
  memset(v110, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v110, v52, (uint64_t)(v52 + 1), 2uLL);
  memset(&v110[3], 0, 24);
  uint64_t v53 = operator new(1uLL);
  *uint64_t v53 = 7;
  unint64_t v54 = operator new(2uLL);
  *unint64_t v54 = 2318;
  memset(v111, 0, sizeof(v111));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v111, v53, (uint64_t)(v53 + 1), 1uLL);
  memset(v112, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v112, v54, (uint64_t)(v54 + 1), 2uLL);
  memset(&v112[3], 0, 24);
  float v55 = operator new(1uLL);
  *float v55 = 8;
  int v56 = operator new(2uLL);
  *int v56 = 2574;
  memset(v113, 0, sizeof(v113));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v113, v55, (uint64_t)(v55 + 1), 1uLL);
  memset(v114, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v114, v56, (uint64_t)(v56 + 1), 2uLL);
  memset(&v114[3], 0, 24);
  v57 = operator new(1uLL);
  unsigned char *v57 = 8;
  BOOL v58 = operator new(2uLL);
  *BOOL v58 = 2318;
  memset(v115, 0, sizeof(v115));
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v115, v57, (uint64_t)(v57 + 1), 1uLL);
  memset(v116, 0, 24);
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v116, v58, (uint64_t)(v58 + 1), 2uLL);
  memset(&v116[3], 0, 24);
  *(unsigned char *)operator new(1uLL) = 11;
  *(_WORD *)operator new(2uLL) = 3841;
  operator new();
}

void sub_1B23BFFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _Unwind_Exception *exception_objecta, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,uint64_t a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void *a39,void *a40,void *a41,void *a42,void *a43,void *a44,void *a45,void *a46,void *a47,void *a48,void *a49,void *a50,void *a51,void *a52,void *a53,void *a54,void *a55,void *a56,void *a57,void *a58,void *a59,void *a60,void *a61,void *a62,void *a63)
{
  *(void *)(v76 + 8) = v73;
  std::vector<quasar::rescoring::TransformedFeatureDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x230]);
  for (uint64_t i = 2232; i != -72; i -= 72)
    quasar::rescoring::TransformedFeatureDesc::~TransformedFeatureDesc((quasar::rescoring::TransformedFeatureDesc *)((char *)&STACK[0x290] + i));
  STACK[0x230] = (unint64_t)&a70;
  std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x230]);
  uint64_t v78 = 24;
  while (1)
  {
    uint64_t v79 = *(unint64_t *)((char *)&STACK[0x240] + v78);
    *(unint64_t *)((char *)&STACK[0x240] + v78) = 0;
    if (v79) {
      MEMORY[0x1B3EA8670](v79, 0x1000C4052888210);
    }
    v78 -= 8;
    if (v78 == -8)
    {
      operator delete(v72);
      operator delete(v74);
      STACK[0x240] = (unint64_t)&STACK[0x200];
      std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
      uint64_t v80 = 16;
      while (1)
      {
        uint64_t v81 = *(unint64_t *)((char *)&STACK[0x260] + v80);
        *(unint64_t *)((char *)&STACK[0x260] + v80) = 0;
        if (v81) {
          MEMORY[0x1B3EA8670](v81, 0x1000C4052888210);
        }
        v80 -= 8;
        if (v80 == -8)
        {
          operator delete(v75);
          operator delete(v70);
          STACK[0x240] = (unint64_t)&STACK[0x218];
          std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
          uint64_t v82 = 8;
          while (1)
          {
            uint64_t v83 = *(unint64_t *)((char *)&STACK[0x280] + v82);
            *(unint64_t *)((char *)&STACK[0x280] + v82) = 0;
            if (v83) {
              MEMORY[0x1B3EA8670](v83, 0x1000C4052888210);
            }
            v82 -= 8;
            if (v82 == -8)
            {
              operator delete(__p);
              operator delete(a69);
              operator delete(v71);
              operator delete(a10);
              operator delete(a11);
              operator delete(a12);
              operator delete(a13);
              operator delete(a14);
              operator delete(a15);
              operator delete(a16);
              operator delete(a17);
              operator delete(a18);
              operator delete(a19);
              operator delete(a20);
              operator delete(a21);
              operator delete(a22);
              operator delete(a23);
              operator delete(a24);
              operator delete(a25);
              operator delete(a27);
              operator delete(a28);
              operator delete(a29);
              operator delete(a30);
              operator delete(a31);
              operator delete(a32);
              operator delete(a33);
              operator delete(a34);
              operator delete(a35);
              operator delete(a36);
              operator delete(a37);
              operator delete(a38);
              operator delete(a39);
              operator delete(a40);
              operator delete(a41);
              operator delete(a42);
              operator delete(a43);
              operator delete(a44);
              operator delete(a45);
              operator delete(a46);
              operator delete(a47);
              operator delete(a48);
              operator delete(a49);
              operator delete(a50);
              operator delete(a51);
              operator delete(a52);
              operator delete(a53);
              operator delete(a54);
              operator delete(a55);
              operator delete(a56);
              operator delete(a57);
              operator delete(a58);
              operator delete(a59);
              operator delete(a66);
              operator delete(a67);
              operator delete(a60);
              operator delete(a61);
              operator delete(a62);
              operator delete(a63);
              operator delete(a64);
              operator delete(a65);
              _Unwind_Resume(a1);
            }
          }
        }
      }
    }
  }
}

void sub_1B23C03F8()
{
  STACK[0x208] = v0;
  std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
  JUMPOUT(0x1B23C014CLL);
}

void sub_1B23C0418()
{
  unint64_t v0 = STACK[0x260];
  STACK[0x268] = 0;
  STACK[0x260] = 0;
  if (v0) {
    MEMORY[0x1B3EA8670](v0, 0x1000C4052888210);
  }
  JUMPOUT(0x1B23C0180);
}

void sub_1B23C0448()
{
}

void sub_1B23C0454()
{
}

void sub_1B23C0494()
{
  STACK[0x220] = v0;
  std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
  JUMPOUT(0x1B23C01A0);
}

void sub_1B23C04B4()
{
  unint64_t v0 = STACK[0x280];
  STACK[0x288] = 0;
  STACK[0x280] = 0;
  if (v0) {
    MEMORY[0x1B3EA8670](v0, 0x1000C4052888210);
  }
  JUMPOUT(0x1B23C01D4);
}

void sub_1B23C04E4()
{
}

void sub_1B23C04F0()
{
}

void sub_1B23C0518()
{
}

void sub_1B23C0524()
{
}

void sub_1B23C054C()
{
}

void sub_1B23C0558()
{
}

void sub_1B23C0580()
{
}

void sub_1B23C058C()
{
}

void sub_1B23C05B4()
{
}

void sub_1B23C05C0()
{
}

void sub_1B23C05E8()
{
}

void sub_1B23C05F4()
{
}

void sub_1B23C061C()
{
}

void sub_1B23C0628()
{
}

void sub_1B23C0650()
{
}

void sub_1B23C065C()
{
}

void sub_1B23C0684()
{
}

void sub_1B23C0690()
{
}

void sub_1B23C06B8()
{
}

void sub_1B23C06C4()
{
}

void sub_1B23C06EC()
{
}

void sub_1B23C06F8()
{
}

void sub_1B23C0720()
{
}

void sub_1B23C072C()
{
}

void sub_1B23C0754()
{
}

void sub_1B23C0760()
{
}

void sub_1B23C0788()
{
}

void sub_1B23C0794()
{
}

void sub_1B23C07BC()
{
}

void sub_1B23C07C8()
{
}

void sub_1B23C07F0()
{
}

void sub_1B23C07FC()
{
}

void sub_1B23C0824()
{
}

void sub_1B23C0830()
{
}

void sub_1B23C0858()
{
}

void sub_1B23C0864()
{
}

void sub_1B23C088C()
{
}

void sub_1B23C0898()
{
}

void sub_1B23C08C0()
{
}

void sub_1B23C08CC()
{
}

void sub_1B23C08F4()
{
}

void sub_1B23C0900()
{
}

void sub_1B23C0928()
{
}

void sub_1B23C0934()
{
}

void sub_1B23C095C()
{
}

void sub_1B23C0968()
{
}

void sub_1B23C0990()
{
}

void sub_1B23C099C()
{
}

void sub_1B23C09C4()
{
}

void sub_1B23C09D0()
{
}

void sub_1B23C09F8()
{
}

void sub_1B23C0A04()
{
}

void sub_1B23C0A2C()
{
}

void sub_1B23C0A38()
{
}

void sub_1B23C0A60()
{
}

void sub_1B23C0A6C()
{
}

void sub_1B23C0A94()
{
}

void sub_1B23C0AA0()
{
}

void sub_1B23C0AAC()
{
  unint64_t v0 = (void *)STACK[0x290];
  if (STACK[0x290])
  {
    STACK[0x298] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x1B23C03B0);
}

void sub_1B23C0AD4()
{
  operator delete(v0);
  JUMPOUT(0x1B23C03F0);
}

void quasar::rescoring::ComputeRanks(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  unint64_t v17 = 0;
  uint64_t v18 = 0;
  float v16 = 0;
  unint64_t v19 = (int)kaldi::MatrixBase<float>::NumRows(a1);
  unint64_t v20 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<boost::iterators::counting_iterator<unsigned long,boost::use_default,boost::use_default>,boost::iterators::counting_iterator<unsigned long,boost::use_default,boost::use_default>>((char *)&v16, (uint64_t *)&v20, (uint64_t *)&v19, v19);
  unint64_t v6 = 126 - 2 * __clz(v17 - v16);
  unint64_t v20 = (uint64_t *)a1;
  if (v17 == v16) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  std::__introsort<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *,false>((unint64_t)v16, v17, &v20, v7, 1);
  std::vector<unsigned long>::vector(a3, v17 - v16);
  unint64_t v8 = v16;
  if (v17 == v16)
  {
    if (!v16) {
      return;
    }
  }
  else
  {
    int v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    unint64_t v12 = v17 - v16;
    uint64_t v13 = *(void *)a1;
    int v14 = *(_DWORD *)(a1 + 16);
    uint64_t v15 = *a3;
    if (v12 <= 1) {
      unint64_t v12 = 1;
    }
    do
    {
      if (v10 && (!a2 || *(float *)(v13 + 4 * (v9 - v14)) != *(float *)(v13 + 4 * v9))) {
        ++v11;
      }
      *(void *)(v15 + 8 * v8[v10++]) = v11;
      v9 += v14;
    }
    while (v12 != v10);
  }
  unint64_t v17 = v8;
  operator delete(v8);
}

void sub_1B23C0C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<BOOL ()(float)>::operator()(uint64_t a1, float a2)
{
  float v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, float *))(*(void *)v2 + 48))(v2, &v4);
}

void std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_2,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_2>,BOOL ()(float)>::~__func()
{
}

_DWORD *std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_2,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_2>,BOOL ()(float)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  *(void *)double result = &unk_1F0A64480;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_2,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_2>,BOOL ()(float)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A64480;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_2,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_2>,BOOL ()(float)>::operator()(uint64_t a1, float *a2)
{
  return vabds_f32(*a2, *(float *)(a1 + 8)) < 0.000001;
}

uint64_t std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_2,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_2>,BOOL ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_2,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_2>,BOOL ()(float)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(float)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_3,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_3>,BOOL ()(float)>::~__func()
{
}

_DWORD *std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_3,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_3>,BOOL ()(float)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  *(void *)double result = &unk_1F0A64500;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_3,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_3>,BOOL ()(float)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A64500;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_3,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_3>,BOOL ()(float)>::operator()(uint64_t a1, float *a2)
{
  return vabds_f32(*a2, *(float *)(a1 + 8)) < 0.000001;
}

uint64_t std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_3,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_3>,BOOL ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_3,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_3>,BOOL ()(float)>::target_type()
{
}

void std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_4,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_4>,BOOL ()(float)>::~__func()
{
}

_DWORD *std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_4,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_4>,BOOL ()(float)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  *(void *)double result = &unk_1F0A64580;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_4,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_4>,BOOL ()(float)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A64580;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_4,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_4>,BOOL ()(float)>::operator()(uint64_t a1, float *a2)
{
  return *(float *)(a1 + 8) < *a2;
}

uint64_t std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_4,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_4>,BOOL ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_4,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_4>,BOOL ()(float)>::target_type()
{
}

void std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_5,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_5>,BOOL ()(float)>::~__func()
{
}

_DWORD *std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_5,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_5>,BOOL ()(float)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  *(void *)double result = &unk_1F0A64600;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_5,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_5>,BOOL ()(float)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A64600;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_5,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_5>,BOOL ()(float)>::operator()(uint64_t a1, float *a2)
{
  return *(float *)(a1 + 8) > *a2;
}

uint64_t std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_5,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_5>,BOOL ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_5,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_5>,BOOL ()(float)>::target_type()
{
}

void std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_6,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_6>,BOOL ()(float)>::~__func()
{
}

_DWORD *std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_6,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_6>,BOOL ()(float)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  *(void *)double result = &unk_1F0A64680;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_6,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_6>,BOOL ()(float)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A64680;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_6,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_6>,BOOL ()(float)>::operator()(uint64_t a1, float *a2)
{
  return *(float *)(a1 + 8) > *a2;
}

uint64_t std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_6,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_6>,BOOL ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_6,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_6>,BOOL ()(float)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(unsigned long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_7,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_7>,BOOL ()(unsigned long)>::~__func()
{
}

void *std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_7,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_7>,BOOL ()(unsigned long)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F0A64700;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_7,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_7>,BOOL ()(unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A64700;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_7,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_7>,BOOL ()(unsigned long)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (!kaldi::MatrixBase<float>::NumRows(*(void *)(a1 + 8))) {
    return 0;
  }
  unint64_t v4 = 0;
  uint64_t v5 = (int)v3;
  do
  {
    uint64_t v6 = *(void *)(a1 + 8);
    float v7 = fabsf(*(float *)(*(void *)v6 + 4 * *(_DWORD *)(v6 + 16) * (int)v4 + 4 * v5));
    BOOL v8 = v7 >= 0.000001;
    if (v7 >= 0.000001) {
      break;
    }
    ++v4;
  }
  while (v4 < (int)kaldi::MatrixBase<float>::NumRows(v6));
  return v8;
}

uint64_t std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_7,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_7>,BOOL ()(unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_7,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_7>,BOOL ()(unsigned long)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(unsigned long)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B23C1640(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_8,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_8>,BOOL ()(unsigned long)>::~__func()
{
}

void *std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_8,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_8>,BOOL ()(unsigned long)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F0A64790;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_8,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_8>,BOOL ()(unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A64790;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_8,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_8>,BOOL ()(unsigned long)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (!kaldi::MatrixBase<float>::NumRows(*(void *)(a1 + 8))) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = (int)v3;
  do
  {
    uint64_t v6 = *(void *)(a1 + 8);
    float v7 = fabsf(*(float *)(*(void *)v6 + 4 * *(_DWORD *)(v6 + 16) * (int)v4 + 4 * v5));
    BOOL v8 = v7 >= 0.000001;
    if (v7 < 0.000001) {
      break;
    }
    ++v4;
  }
  while (v4 < (int)kaldi::MatrixBase<float>::NumRows(v6));
  return v8;
}

uint64_t std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_8,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_8>,BOOL ()(unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_8,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<quasar::rescoring::TransformedFeatureDesc> const&,std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>> *)::$_8>,BOOL ()(unsigned long)>::target_type()
{
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::rescoring::FeatureTransformationArgumentT>,quasar::rescoring::FeatureTransformationArgumentT const*,quasar::rescoring::FeatureTransformationArgumentT const*,quasar::rescoring::FeatureTransformationArgumentT*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  unint64_t v4 = a4;
  int v9 = a4;
  uint64_t v10 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  char v8 = 0;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      if (*v5) {
        operator new();
      }
      void *v4 = 0;
      ++v5;
      uint64_t v10 = ++v4;
    }
    while (v5 != a3);
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::rescoring::FeatureTransformationArgumentT>,quasar::rescoring::FeatureTransformationArgumentT*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

void sub_1B23C1878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::rescoring::TransformedFeatureDesc>,quasar::rescoring::TransformedFeatureDesc const*,quasar::rescoring::TransformedFeatureDesc const*,quasar::rescoring::TransformedFeatureDesc*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v11 = a4;
  unint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    int v7 = a1;
    do
    {
      std::allocator<quasar::rescoring::TransformedFeatureDesc>::construct[abi:ne180100]<quasar::rescoring::TransformedFeatureDesc,quasar::rescoring::TransformedFeatureDesc const&>(v7, v4, v6);
      v6 += 72;
      unint64_t v4 = v12 + 9;
      v12 += 9;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::rescoring::TransformedFeatureDesc>,quasar::rescoring::TransformedFeatureDesc*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B23C1924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::allocator<quasar::rescoring::TransformedFeatureDesc>::construct[abi:ne180100]<quasar::rescoring::TransformedFeatureDesc,quasar::rescoring::TransformedFeatureDesc const&>(int a1, void *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(a2, *(const void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 8) - *(void *)a3);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(a2 + 3, *(const void **)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 32) - *(void *)(a3 + 24));
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  return std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformationArgumentT*,quasar::rescoring::FeatureTransformationArgumentT*>(a2 + 6, *(void **)(a3 + 48), *(void **)(a3 + 56), (uint64_t)(*(void *)(a3 + 56) - *(void *)(a3 + 48)) >> 3);
}

void sub_1B23C19B4(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::rescoring::TransformedFeatureDesc>,quasar::rescoring::TransformedFeatureDesc*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::rescoring::TransformedFeatureDesc>,quasar::rescoring::TransformedFeatureDesc*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::rescoring::TransformedFeatureDesc>,quasar::rescoring::TransformedFeatureDesc*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 72;
      std::allocator<quasar::rescoring::TransformedFeatureDesc>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

char *std::vector<unsigned long>::__init_with_size[abi:ne180100]<boost::iterators::counting_iterator<unsigned long,boost::use_default,boost::use_default>,boost::iterators::counting_iterator<unsigned long,boost::use_default,boost::use_default>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *a2;
    uint64_t v8 = *a3;
    for (uint64_t i = (void *)*((void *)v6 + 1); v8 != v7; ++v7)
      *i++ = v7;
    *((void *)v6 + 1) = i;
  }
  return result;
}

void sub_1B23C1AD8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *,false>(unint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t v11 = (uint64_t *)result;
  while (2)
  {
    unint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v47 = *(a2 - 1);
                uint64_t v48 = *v12;
                if (*(float *)(**a3 + 4 * *((_DWORD *)*a3 + 4) * (int)v47) < *(float *)(**a3
                                                                                         + 4
                                                                                         * (int)(*((_DWORD *)*a3 + 4)
                                                                                               * *v12)))
                {
                  *unint64_t v12 = v47;
                  *(a2 - 1) = v48;
                }
                break;
              case 3uLL:
                double result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(v12, v12 + 1, a2 - 1, a3);
                break;
              case 4uLL:
                double result = (unint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(v12, v12 + 1, v12 + 2, a2 - 1, a3);
                break;
              case 5uLL:
                long long v49 = v12 + 1;
                long long v50 = v12 + 2;
                long long v51 = v12 + 3;
                double result = (unint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(v12, v12 + 1, v12 + 2, v12 + 3, a3);
                uint64_t v52 = *(a2 - 1);
                uint64_t v53 = v12[3];
                uint64_t v54 = **a3;
                int v55 = *((_DWORD *)*a3 + 4);
                if (*(float *)(v54 + 4 * v55 * (int)v52) < *(float *)(v54 + 4 * v55 * (int)v53))
                {
                  uint64_t *v51 = v52;
                  *(a2 - 1) = v53;
                  uint64_t v56 = *v51;
                  uint64_t v57 = *v50;
                  float v58 = *(float *)(v54 + 4 * (int)(v55 * *v51));
                  if (v58 < *(float *)(v54 + 4 * (int)(v55 * *v50)))
                  {
                    *long long v50 = v56;
                    uint64_t *v51 = v57;
                    uint64_t v59 = *v49;
                    if (v58 < *(float *)(v54 + 4 * (int)(v55 * *v49)))
                    {
                      v12[1] = v56;
                      v12[2] = v59;
                      uint64_t v60 = *v12;
                      if (v58 < *(float *)(v54 + 4 * (int)(v55 * *v12)))
                      {
                        *unint64_t v12 = v56;
                        v12[1] = v60;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 191)
          {
            if (a5)
            {
              if (v12 != a2)
              {
                uint64_t v61 = v12 + 1;
                if (v12 + 1 != a2)
                {
                  uint64_t v62 = 0;
                  uint64_t v63 = **a3;
                  int v64 = *((_DWORD *)*a3 + 4);
                  int v65 = v12;
                  do
                  {
                    uint64_t v67 = *v65;
                    uint64_t v66 = v65[1];
                    int v65 = v61;
                    float v68 = *(float *)(v63 + 4 * v64 * (int)v66);
                    if (v68 < *(float *)(v63 + 4 * v64 * (int)v67))
                    {
                      uint64_t v69 = v62;
                      while (1)
                      {
                        *(uint64_t *)((char *)v12 + v69 + 8) = v67;
                        if (!v69) {
                          break;
                        }
                        uint64_t v67 = *(uint64_t *)((char *)v12 + v69 - 8);
                        v69 -= 8;
                        if (v68 >= *(float *)(v63 + 4 * v64 * (int)v67))
                        {
                          uint64_t v70 = (uint64_t *)((char *)v12 + v69 + 8);
                          goto LABEL_80;
                        }
                      }
                      uint64_t v70 = v12;
LABEL_80:
                      *uint64_t v70 = v66;
                    }
                    uint64_t v61 = v65 + 1;
                    v62 += 8;
                  }
                  while (v65 + 1 != a2);
                }
              }
            }
            else if (v12 != a2)
            {
              unint64_t v103 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v104 = **a3;
                int v105 = *((_DWORD *)*a3 + 4);
                do
                {
                  uint64_t v107 = *v11;
                  uint64_t v106 = v11[1];
                  uint64_t v11 = v103;
                  float v108 = *(float *)(v104 + 4 * v105 * (int)v106);
                  if (v108 < *(float *)(v104 + 4 * v105 * (int)v107))
                  {
                    do
                    {
                      *unint64_t v103 = v107;
                      uint64_t v107 = *(v103 - 2);
                      --v103;
                    }
                    while (v108 < *(float *)(v104 + 4 * v105 * (int)v107));
                    *unint64_t v103 = v106;
                  }
                  unint64_t v103 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v71 = (v14 - 2) >> 1;
              unint64_t v72 = *a3;
              int64_t v73 = v71;
              do
              {
                int64_t v74 = v73;
                if (v71 >= v73)
                {
                  uint64_t v75 = (2 * v73) | 1;
                  uint64_t v76 = &v12[v75];
                  if (2 * v74 + 2 < (uint64_t)v14)
                  {
                    uint64_t v77 = *v72;
                    int v78 = *((_DWORD *)v72 + 4);
                    if (*(float *)(*v72 + 4 * v78 * *(_DWORD *)v76) < *(float *)(*v72
                                                                                  + 4 * v78 * *((_DWORD *)v76 + 2)))
                    {
                      ++v76;
                      uint64_t v75 = 2 * v74 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v77 = *v72;
                    int v78 = *((_DWORD *)v72 + 4);
                  }
                  uint64_t v79 = &v12[v74];
                  uint64_t v80 = *v76;
                  uint64_t v81 = *v79;
                  double result = v78 * *v79;
                  float v82 = *(float *)(v77 + 4 * (int)result);
                  if (*(float *)(v77 + 4 * (int)(v78 * *v76)) >= v82)
                  {
                    do
                    {
                      double result = (unint64_t)v76;
                      *uint64_t v79 = v80;
                      if (v71 < v75) {
                        break;
                      }
                      uint64_t v83 = 2 * v75;
                      uint64_t v75 = (2 * v75) | 1;
                      uint64_t v76 = &v12[v75];
                      uint64_t v84 = v83 + 2;
                      if (v84 < (uint64_t)v14
                        && *(float *)(v77 + 4 * v78 * *(_DWORD *)v76) < *(float *)(v77
                                                                                   + 4 * v78 * *((_DWORD *)v76 + 2)))
                      {
                        ++v76;
                        uint64_t v75 = v84;
                      }
                      uint64_t v80 = *v76;
                      uint64_t v79 = (uint64_t *)result;
                    }
                    while (*(float *)(v77 + 4 * (int)(v78 * *v76)) >= v82);
                    *(void *)double result = v81;
                  }
                }
                int64_t v73 = v74 - 1;
              }
              while (v74);
              uint64_t v85 = (unint64_t)v13 >> 3;
              do
              {
                uint64_t v86 = 0;
                uint64_t v87 = *v12;
                uint64_t v88 = *a3;
                v89 = v12;
                do
                {
                  int v90 = v89;
                  v89 += v86 + 1;
                  uint64_t v91 = 2 * v86;
                  uint64_t v86 = (2 * v86) | 1;
                  uint64_t v92 = v91 + 2;
                  if (v92 < v85)
                  {
                    double result = *((unsigned int *)v89 + 2);
                    if (*(float *)(*v88 + 4 * *((_DWORD *)v88 + 4) * *(_DWORD *)v89) < *(float *)(*v88 + 4 * *((_DWORD *)v88 + 4) * (int)result))
                    {
                      ++v89;
                      uint64_t v86 = v92;
                    }
                  }
                  *int v90 = *v89;
                }
                while (v86 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
                if (v89 == --a2)
                {
                  uint64_t *v89 = v87;
                }
                else
                {
                  uint64_t *v89 = *a2;
                  *a2 = v87;
                  uint64_t v93 = (char *)v89 - (char *)v12 + 8;
                  if (v93 >= 9)
                  {
                    unint64_t v94 = (((unint64_t)v93 >> 3) - 2) >> 1;
                    unint64_t v95 = &v12[v94];
                    uint64_t v96 = *v95;
                    uint64_t v97 = *v89;
                    uint64_t v98 = *v88;
                    int v99 = *((_DWORD *)v88 + 4);
                    float v100 = *(float *)(v98 + 4 * (int)(v99 * *v89));
                    if (*(float *)(v98 + 4 * (int)(v99 * *v95)) < v100)
                    {
                      do
                      {
                        unsigned int v101 = v95;
                        uint64_t *v89 = v96;
                        if (!v94) {
                          break;
                        }
                        unint64_t v94 = (v94 - 1) >> 1;
                        unint64_t v95 = &v12[v94];
                        uint64_t v96 = *v95;
                        v89 = v101;
                      }
                      while (*(float *)(v98 + 4 * (int)(v99 * *v95)) < v100);
                      *unsigned int v101 = v97;
                    }
                  }
                }
              }
              while (v85-- > 2);
            }
            return result;
          }
          unint64_t v15 = v14 >> 1;
          float v16 = &v12[v14 >> 1];
          if ((unint64_t)v13 >= 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(v11, &v11[v14 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(v11 + 1, v16 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(v11 + 2, &v11[v15 + 1], a2 - 3, a3);
            double result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(v16 - 1, v16, &v11[v15 + 1], a3);
            uint64_t v17 = *v11;
            uint64_t *v11 = *v16;
            *float v16 = v17;
          }
          else
          {
            double result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(&v11[v14 >> 1], v11, a2 - 1, a3);
          }
          --a4;
          uint64_t v18 = *v11;
          unint64_t v19 = *a3;
          if (a5) {
            break;
          }
          uint64_t v20 = *v19;
          int v21 = *((_DWORD *)v19 + 4);
          int v22 = v21 * v18;
          float v23 = *(float *)(v20 + 4 * v21 * (int)v18);
          if (*(float *)(v20 + 4 * v21 * *((_DWORD *)v11 - 2)) < v23) {
            goto LABEL_13;
          }
          if (v23 >= *(float *)(v20 + 4 * v21 * *((_DWORD *)a2 - 2)))
          {
            long long v39 = v11 + 1;
            do
            {
              unint64_t v12 = v39;
              if (v39 >= a2) {
                break;
              }
              ++v39;
            }
            while (v23 >= *(float *)(v20 + 4 * v21 * *(_DWORD *)v12));
          }
          else
          {
            unint64_t v12 = v11;
            do
              int v38 = *((_DWORD *)v12++ + 2);
            while (v23 >= *(float *)(v20 + 4 * v21 * v38));
          }
          long long v40 = a2;
          if (v12 < a2)
          {
            long long v40 = a2;
            do
              int v41 = *((_DWORD *)v40-- - 2);
            while (v23 < *(float *)(v20 + 4 * v21 * v41));
          }
          if (v12 < v40)
          {
            uint64_t v42 = *v12;
            uint64_t v43 = *v40;
            do
            {
              *unint64_t v12 = v43;
              *long long v40 = v42;
              do
              {
                uint64_t v44 = v12[1];
                ++v12;
                uint64_t v42 = v44;
              }
              while (v23 >= *(float *)(v20 + 4 * v21 * (int)v44));
              do
              {
                uint64_t v45 = *--v40;
                uint64_t v43 = v45;
              }
              while (v23 < *(float *)(v20 + 4 * v21 * (int)v45));
            }
            while (v12 < v40);
          }
          long long v46 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            uint64_t *v11 = *v46;
          }
          a5 = 0;
          *long long v46 = v18;
        }
        uint64_t v20 = *v19;
        int v21 = *((_DWORD *)v19 + 4);
        int v22 = v21 * v18;
LABEL_13:
        uint64_t v24 = 0;
        float v25 = *(float *)(v20 + 4 * v22);
        do
          uint64_t v26 = v11[++v24];
        while (*(float *)(v20 + 4 * v21 * (int)v26) < v25);
        float v27 = &v11[v24];
        float v28 = a2;
        if (v24 == 1)
        {
          float v28 = a2;
          do
          {
            if (v27 >= v28) {
              break;
            }
            int v30 = *((_DWORD *)v28-- - 2);
          }
          while (*(float *)(v20 + 4 * v21 * v30) >= v25);
        }
        else
        {
          do
            int v29 = *((_DWORD *)v28-- - 2);
          while (*(float *)(v20 + 4 * v21 * v29) >= v25);
        }
        if (v27 >= v28)
        {
          unint64_t v36 = v27 - 1;
        }
        else
        {
          uint64_t v31 = *v28;
          float v32 = &v11[v24];
          float v33 = v28;
          do
          {
            uint64_t *v32 = v31;
            *float v33 = v26;
            do
            {
              uint64_t v34 = v32[1];
              ++v32;
              uint64_t v26 = v34;
            }
            while (*(float *)(v20 + 4 * v21 * (int)v34) < v25);
            do
            {
              uint64_t v35 = *--v33;
              uint64_t v31 = v35;
            }
            while (*(float *)(v20 + 4 * v21 * (int)v35) >= v25);
          }
          while (v32 < v33);
          unint64_t v36 = v32 - 1;
        }
        if (v36 != v11) {
          uint64_t *v11 = *v36;
        }
        *unint64_t v36 = v18;
        if (v27 >= v28) {
          break;
        }
LABEL_34:
        double result = std::__introsort<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *,false>(v11, v36, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v12 = v36 + 1;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(v11, v36, a3);
      unint64_t v12 = v36 + 1;
      double result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(v36 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v37) {
        goto LABEL_34;
      }
    }
    a2 = v36;
    if (!v37) {
      continue;
    }
    return result;
  }
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t **a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  uint64_t v6 = **a4;
  int v7 = *((_DWORD *)*a4 + 4);
  float v8 = *(float *)(v6 + 4 * (int)(v7 * *a2));
  float v9 = *(float *)(v6 + 4 * (int)(v7 * *result));
  uint64_t v10 = *a3;
  float v11 = *(float *)(v6 + 4 * (int)(v7 * *a3));
  if (v8 >= v9)
  {
    if (v11 < v8)
    {
      *a2 = v10;
      *a3 = v4;
      uint64_t v12 = *result;
      if (*(float *)(v6 + 4 * (int)(v7 * *a2)) < *(float *)(v6 + 4 * (int)(v7 * *result)))
      {
        *double result = *a2;
        *a2 = v12;
      }
    }
  }
  else
  {
    if (v11 >= v8)
    {
      *double result = v4;
      *a2 = v5;
      if (*(float *)(v6 + 4 * (int)(v7 * *a3)) >= v9) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *double result = v10;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(float *)(**a3 + 4 * *((_DWORD *)*a3 + 4) * (int)v8) < *(float *)(**a3
                                                                              + 4 * (int)(*((_DWORD *)*a3 + 4) * *a1)))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      int v22 = a1 + 1;
      float v23 = a1 + 2;
      uint64_t v24 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      uint64_t v25 = *(a2 - 1);
      uint64_t v26 = a1[3];
      uint64_t v27 = **a3;
      int v28 = *((_DWORD *)*a3 + 4);
      if (*(float *)(v27 + 4 * v28 * (int)v25) < *(float *)(v27 + 4 * v28 * (int)v26))
      {
        *uint64_t v24 = v25;
        *(a2 - 1) = v26;
        uint64_t v29 = *v24;
        uint64_t v30 = *v23;
        float v31 = *(float *)(v27 + 4 * (int)(v28 * *v24));
        if (v31 < *(float *)(v27 + 4 * (int)(v28 * *v23)))
        {
          *float v23 = v29;
          *uint64_t v24 = v30;
          uint64_t v32 = *v22;
          if (v31 < *(float *)(v27 + 4 * (int)(v28 * *v22)))
          {
            a1[1] = v29;
            a1[2] = v32;
            uint64_t v33 = *a1;
            if (v31 < *(float *)(v27 + 4 * (int)(v28 * *a1)))
            {
              *a1 = v29;
              a1[1] = v33;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a3);
      float v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = **a3;
      int v14 = *((_DWORD *)*a3 + 4);
      uint64_t v15 = 24;
      break;
  }
  while (1)
  {
    uint64_t v16 = *v11;
    uint64_t v17 = *v10;
    float v18 = *(float *)(v13 + 4 * (int)(v14 * *v11));
    if (v18 < *(float *)(v13 + 4 * (int)(v14 * *v10)))
    {
      uint64_t v19 = v15;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v19) = v17;
        uint64_t v20 = v19 - 8;
        if (v19 == 8) {
          break;
        }
        uint64_t v17 = *(uint64_t *)((char *)a1 + v19 - 16);
        v19 -= 8;
        if (v18 >= *(float *)(v13 + 4 * v14 * (int)v17))
        {
          int v21 = (uint64_t *)((char *)a1 + v20);
          goto LABEL_13;
        }
      }
      int v21 = a1;
LABEL_13:
      *int v21 = v16;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v15 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(a1, a2, a3, a5);
  uint64_t v11 = *a3;
  uint64_t v12 = **a5;
  int v13 = *((_DWORD *)*a5 + 4);
  if (*(float *)(v12 + 4 * (int)(v13 * *a4)) < *(float *)(v12 + 4 * (int)(v13 * *a3)))
  {
    *a3 = *a4;
    *a4 = v11;
    uint64_t v14 = *a2;
    if (*(float *)(v12 + 4 * (int)(v13 * *a3)) < *(float *)(v12 + 4 * (int)(v13 * *a2)))
    {
      *a2 = *a3;
      *a3 = v14;
      uint64_t v15 = *a1;
      if (*(float *)(v12 + 4 * (int)(v13 * *a2)) < *(float *)(v12 + 4 * (int)(v13 * *a1)))
      {
        *a1 = *a2;
        *a2 = v15;
      }
    }
  }
  return result;
}

void quasar::QuasarG2PFactory::g2pModelExist(quasar::QuasarG2PFactory *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v6, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "g2p");
  uint64_t Ptree = quasar::SystemConfig::getPtree((uint64_t)this, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "model-file");
  quasar::PTree::getString(Ptree, (uint64_t)__p);
}

void sub_1B23C295C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, long long a10, long long a11, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25)
{
  switch(a2)
  {
    case 4:
      uint64_t v27 = __cxa_begin_catch(a1);
      if (quasar::gLogLevel >= 2)
      {
        int v28 = v27;
        a24 = 0u;
        a25 = 0u;
        a22 = 0u;
        a23 = 0u;
        a20 = 0u;
        a21 = 0u;
        a18 = 0u;
        a19 = 0u;
        a16 = 0u;
        a17 = 0u;
        a14 = 0u;
        a15 = 0u;
        a12 = 0u;
        a13 = 0u;
        a10 = 0u;
        a11 = 0u;
        __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"PTree::JsonParseError, Error reading JSON config file: ", 55);
        uint64_t v30 = (const char *)(*(uint64_t (**)(void *))(*(void *)v28 + 16))(v28);
        size_t v31 = strlen(v30);
        uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v32);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
      }
      break;
    case 3:
      uint64_t v33 = __cxa_begin_catch(a1);
      if (quasar::gLogLevel >= 2)
      {
        uint64_t v34 = v33;
        a24 = 0u;
        a25 = 0u;
        a22 = 0u;
        a23 = 0u;
        a20 = 0u;
        a21 = 0u;
        a18 = 0u;
        a19 = 0u;
        a16 = 0u;
        a17 = 0u;
        a14 = 0u;
        a15 = 0u;
        a12 = 0u;
        a13 = 0u;
        a10 = 0u;
        a11 = 0u;
        __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"PTree::Error, Error reading JSON config file: ", 46);
        unint64_t v36 = (const char *)(*(uint64_t (**)(void *))(*(void *)v34 + 16))(v34);
        size_t v37 = strlen(v36);
        int v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v38);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
      }
      break;
    case 2:
      __cxa_begin_catch(a1);
      __cxa_end_catch();
      goto LABEL_19;
    default:
      if (a2 != 1)
      {
        if (*(char *)(v25 - 33) < 0) {
          operator delete(*(void **)(v25 - 56));
        }
        _Unwind_Resume(a1);
      }
      long long v39 = __cxa_begin_catch(a1);
      if (quasar::gLogLevel >= 2)
      {
        long long v40 = v39;
        a24 = 0u;
        a25 = 0u;
        a22 = 0u;
        a23 = 0u;
        a20 = 0u;
        a21 = 0u;
        a18 = 0u;
        a19 = 0u;
        a16 = 0u;
        a17 = 0u;
        a14 = 0u;
        a15 = 0u;
        a12 = 0u;
        a13 = 0u;
        a10 = 0u;
        a11 = 0u;
        __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        int v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error reading JSON config file: ", 32);
        uint64_t v42 = (const char *)(*(uint64_t (**)(void *))(*(void *)v40 + 16))(v40);
        size_t v43 = strlen(v42);
        uint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v44);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
      }
      break;
  }
  __cxa_end_catch();
LABEL_19:
  JUMPOUT(0x1B23C2928);
}

void sub_1B23C2C38()
{
}

void sub_1B23C2C5C()
{
}

void sub_1B23C2C7C()
{
}

void quasar::QuasarG2PFactory::createQuasarG2P(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v10 = a5;
  std::string::basic_string[abi:ne180100]<0>(__p, "g2p");
  uint64_t Ptree = quasar::SystemConfig::getPtree(a4, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v9, "engine-type");
  quasar::PTree::getStringOptional(Ptree, (uint64_t)v9);
}

void sub_1B23C2FD0()
{
}

void sub_1B23C2FDC(_Unwind_Exception *exception_object)
{
  if (v1 < 0) {
    operator delete(*(void **)(v2 - 96));
  }
  _Unwind_Resume(exception_object);
}

void sub_1B23C2FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15 && a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 - 97) < 0) {
    operator delete(*(void **)(v15 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_1B23C3020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    JUMPOUT(0x1B23C3030);
  }
  JUMPOUT(0x1B23C3034);
}

void std::make_unique[abi:ne180100]<quasar::PhonetisaurusG2P,std::shared_ptr<quasar::PronCache<std::string,std::vector<std::string>>> &,std::shared_ptr<quasar::LmeDataFactory> &,std::string const&,quasar::SystemConfig &,int const&>()
{
}

void sub_1B23C3188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,std::__shared_weak_count *a29)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  uint64_t v32 = *(std::__shared_weak_count **)(v30 - 72);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  MEMORY[0x1B3EA8670](v29, 0x10B3C4062A477AELL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<quasar::PDecG2P,std::shared_ptr<quasar::PronCache<std::string,std::vector<std::string>>> &,std::shared_ptr<quasar::LmeDataFactory> &,std::string const&,quasar::SystemConfig &,int const&>()
{
}

void sub_1B23C32E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  MEMORY[0x1B3EA8670](v12, 0x10B3C4068F2B42ELL);
  _Unwind_Resume(a1);
}

void quasar::QuasarG2PFactory::isPronGuesserWordpiece(quasar::QuasarG2PFactory *this, const quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)quasar::G2WP_ROOT);
  quasar::SystemConfig::getPtreeOptional((uint64_t)this, (uint64_t)__p);
}

void sub_1B23C3380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::QuasarG2PFactory::createPronGuesser(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v8 = a5;
  if (a6)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)quasar::JIT_G2WP_ROOT);
    quasar::SystemConfig::getPtreeOptional(a4, (uint64_t)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)quasar::G2WP_ROOT);
  quasar::SystemConfig::getPtreeOptional(a4, (uint64_t)__p);
}

void sub_1B23C35C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

void std::make_unique[abi:ne180100]<quasar::G2WP,std::shared_ptr<quasar::PronCache<std::string,std::vector<std::string>>> &,std::shared_ptr<quasar::LmeDataFactory> &,std::string const&,quasar::SystemConfig &,int const&,char const*&>()
{
}

void sub_1B23C3718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  MEMORY[0x1B3EA8670](v19, 0x10B3C40EA3A4DEDLL);
  _Unwind_Resume(a1);
}

void quasar::QuasarG2PFactory::createP2WP(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v8 = a6;
  uint64_t Ptree = quasar::SystemConfig::getPtree(a4, a5);
  std::string::basic_string[abi:ne180100]<0>(v7, "engine-type");
  quasar::PTree::getStringOptional(Ptree, (uint64_t)v7);
}

void sub_1B23C39EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if ((*(unsigned char *)(v15 - 73) & 0x80) != 0) {
    operator delete(*(void **)(v15 - 96));
  }
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<quasar::PhonetisaurusP2WP,std::shared_ptr<quasar::PronCache<std::string,std::vector<std::string>>> &,std::shared_ptr<quasar::LmeDataFactory> &,std::string const&,quasar::SystemConfig &,int const&,std::string const&>()
{
}

void sub_1B23C3B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  MEMORY[0x1B3EA8670](v12, 0x10B3C4062A477AELL);
  _Unwind_Resume(a1);
}

void quasar::QuasarG2PFactory::createG2Embedding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v8 = a5;
  if (a6)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)quasar::JIT_G2EMB_ROOT);
    quasar::SystemConfig::getPtreeOptional(a4, (uint64_t)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)quasar::G2EMB_ROOT);
  quasar::SystemConfig::getPtreeOptional(a4, (uint64_t)__p);
}

void sub_1B23C3D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void std::make_unique[abi:ne180100]<quasar::G2Embedding,std::shared_ptr<quasar::PronCache<std::string,std::vector<std::string>>> &,std::shared_ptr<quasar::LmeDataFactory> &,std::string const&,quasar::SystemConfig &,int const&,char const*&>()
{
}

void sub_1B23C3EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  MEMORY[0x1B3EA8670](v19, 0x10B3C40BADFA094);
  _Unwind_Resume(a1);
}

void sub_1B23C4494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

id getSpeakerCodeFilePath(NSString *a1)
{
  char v1 = a1;
  uint64_t v3 = EARHelpers::createDirectoryInLibrary((EARHelpers *)@"/Assistant/SpeakerCode", v2);
  uint64_t v4 = v3;
  if (v3)
  {
    char v5 = [v3 stringByAppendingPathComponent:v1];
  }
  else
  {
    char v5 = 0;
  }

  return v5;
}

void sub_1B23C45D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B23C4B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void quasar::Location::known(quasar::Location *this, double a2, double a3)
{
  if (a2 < -90.0 || a2 > 90.0 || a3 < -180.0 || a3 > 180.0)
  {
    memset(v4, 0, sizeof(v4));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Coordinates out of bounds latitude=", 35);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" longitude=", 11);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
  }
}

double quasar::Location::knownOrFallback(uint64_t a1, double result, double a3)
{
  if (result < -90.0 || result > 90.0 || a3 < -180.0 || a3 > 180.0) {
    return *(double *)a1;
  }
  return result;
}

void quasar::Location::makeAny(quasar::Location *this, double a2, double a3)
{
  if ((a2 != 360.0 || a3 != 360.0) && (a2 != 1000.0 || a3 != 1000.0)) {
    quasar::Location::known(this, a2, a3);
  }
}

BOOL quasar::Location::isUnknown(quasar::Location *this)
{
  double v1 = *((double *)this + 1);
  if (*(double *)this == 1000.0 && v1 == 1000.0) {
    return 1;
  }
  if (v1 == 360.0) {
    return *(double *)this == 360.0;
  }
  return 0;
}

BOOL quasar::Location::isUndefined(quasar::Location *this)
{
  return *((double *)this + 1) == 1000.0 && *(double *)this == 1000.0;
}

BOOL quasar::Location::isDenied(quasar::Location *this)
{
  return *((double *)this + 1) == 360.0 && *(double *)this == 360.0;
}

BOOL quasar::Location::isKnown(quasar::Location *this)
{
  double v1 = *((double *)this + 1);
  if (*(double *)this == 1000.0 && v1 == 1000.0) {
    return 0;
  }
  if (v1 == 360.0) {
    return *(double *)this != 360.0;
  }
  return 1;
}

long double quasar::Location::getDistanceKm(quasar::Location *this, const quasar::Location *a2)
{
  double v2 = *(double *)this;
  double v3 = *((double *)this + 1);
  if (*(double *)this == 1000.0 && v3 == 1000.0
    || v2 == 360.0 && v3 == 360.0
    || (v4 = *(double *)a2, double v5 = *((double *)a2 + 1), *(double *)a2 == 1000.0) && v5 == 1000.0
    || v4 == 360.0 && v5 == 360.0)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This or other location undefined, can't computer distance");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v11[0] = *((double *)this + 1);
  v11[1] = v2;
  v10[0] = v5;
  v10[1] = v4;
  double v6 = boost::geometry::strategy::distance::comparable::haversine<double,void>::apply<boost::geometry::model::point<double,2ul,boost::geometry::cs::spherical_equatorial<boost::geometry::degree>>,boost::geometry::model::point<double,2ul,boost::geometry::cs::spherical_equatorial<boost::geometry::degree>>>(v11, v10);
  long double v7 = asin(sqrt(v6));
  return (v7 + v7) * 6366.54904;
}

void sub_1B23C4F44(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double quasar::Location::getLatitude(quasar::Location *this)
{
  return *(double *)this;
}

double quasar::Location::fromSharedFuture(std::__assoc_sub_state **a1)
{
  double v1 = *a1;
  double v2 = 1000.0;
  if (*a1)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
    if (!std::__assoc_sub_state::wait_until<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>((uint64_t)v1, &rep))
    {
      std::__assoc_state<quasar::Location>::copy(*a1);
      return *(double *)v4;
    }
  }
  return v2;
}

uint64_t quasar::Location::toString(quasar::Location *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v4);
  quasar::operator<<(v5, (double *)this);
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E4FBA408];
  uint64_t v2 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v5[0] = v2;
  v5[1] = MEMORY[0x1E4FBA470] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v7);
}

void sub_1B23C5144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *quasar::operator<<(void *a1, double *a2)
{
  double v3 = a2[1];
  if (*a2 == 360.0 && v3 == 360.0)
  {
    double v4 = "lat=DENIED lon=DENIED";
    uint64_t v5 = 21;
  }
  else
  {
    if (*a2 != 1000.0 || v3 != 1000.0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"lat=", 4);
      char v6 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" lon=", 5);
      std::ostream::operator<<();
      return a1;
    }
    double v4 = "lat=UNDEFINED lon=UNDEFINED";
    uint64_t v5 = 27;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v4, v5);
  return a1;
}

void *quasar::Location::statusAsString@<X0>(quasar::Location *this@<X0>, void *a2@<X8>)
{
  double v2 = *(double *)this;
  double v3 = *((double *)this + 1);
  BOOL v4 = v3 == 360.0 && v2 == 360.0;
  uint64_t v5 = "KNOWN";
  if (v4) {
    uint64_t v5 = "DENIED";
  }
  if (v3 == 1000.0 && v2 == 1000.0) {
    uint64_t v7 = "UNDEFINED";
  }
  else {
    uint64_t v7 = (char *)v5;
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v7);
}

long double boost::geometry::strategy::distance::comparable::haversine<double,void>::apply<boost::geometry::model::point<double,2ul,boost::geometry::cs::spherical_equatorial<boost::geometry::degree>>,boost::geometry::model::point<double,2ul,boost::geometry::cs::spherical_equatorial<boost::geometry::degree>>>(double *a1, double *a2)
{
  double v2 = *a1;
  double v3 = &OBJC_IVAR____EARSpeechRecognizer__shouldGenerateVoiceCommandCandidates;
  {
    uint64_t v30 = a2;
    uint64_t v34 = a1;
    double v3 = &OBJC_IVAR____EARSpeechRecognizer__shouldGenerateVoiceCommandCandidates;
    int v21 = v20;
    a2 = v30;
    a1 = v34;
    if (v21)
    {
      boost::geometry::math::d2r<double>(void)::conversion_coefficient = 0x3F91DF46A2529D39;
      double v3 = &OBJC_IVAR____EARSpeechRecognizer__shouldGenerateVoiceCommandCandidates;
      a2 = v30;
      a1 = v34;
    }
  }
  double v4 = *((double *)v3 + 258);
  double v5 = a1[1];
  {
    size_t v31 = a2;
    double v35 = v4;
    double v4 = v35;
    double v3 = &OBJC_IVAR____EARSpeechRecognizer__shouldGenerateVoiceCommandCandidates;
    a2 = v31;
    if (v22)
    {
      boost::geometry::math::d2r<double>(void)::conversion_coefficient = 0x3F91DF46A2529D39;
      double v4 = v35;
      double v3 = &OBJC_IVAR____EARSpeechRecognizer__shouldGenerateVoiceCommandCandidates;
      a2 = v31;
    }
  }
  double v6 = *((double *)v3 + 258);
  double v7 = *a2;
  {
    uint64_t v32 = a2;
    double v36 = v4;
    double v26 = v7;
    double v28 = v6;
    double v7 = v26;
    double v6 = v28;
    double v4 = v36;
    double v3 = &OBJC_IVAR____EARSpeechRecognizer__shouldGenerateVoiceCommandCandidates;
    a2 = v32;
    if (v23)
    {
      boost::geometry::math::d2r<double>(void)::conversion_coefficient = 0x3F91DF46A2529D39;
      double v7 = v26;
      double v6 = v28;
      double v4 = v36;
      double v3 = &OBJC_IVAR____EARSpeechRecognizer__shouldGenerateVoiceCommandCandidates;
      a2 = v32;
    }
  }
  double v8 = *((double *)v3 + 258);
  double v9 = a2[1];
  {
    double v33 = v9;
    double v37 = v4;
    double v27 = v7;
    double v29 = v6;
    double v25 = v8;
    double v8 = v25;
    double v7 = v27;
    double v6 = v29;
    double v9 = v33;
    double v4 = v37;
    double v3 = &OBJC_IVAR____EARSpeechRecognizer__shouldGenerateVoiceCommandCandidates;
    if (v24)
    {
      boost::geometry::math::d2r<double>(void)::conversion_coefficient = 0x3F91DF46A2529D39;
      double v8 = v25;
      double v7 = v27;
      double v6 = v29;
      double v9 = v33;
      double v4 = v37;
      double v3 = &OBJC_IVAR____EARSpeechRecognizer__shouldGenerateVoiceCommandCandidates;
    }
  }
  double v10 = v7 * v8;
  long double v11 = v5 * v6;
  double v12 = v2 * v4;
  long double v13 = v9 * *((double *)v3 + 258);
  long double v14 = sin((v13 - v11) * 0.5);
  long double v15 = v14 * v14;
  double v16 = cos(v11);
  long double v17 = v16 * cos(v13);
  long double v18 = sin((v10 - v12) * 0.5);
  return v15 + v17 * (v18 * v18);
}

uint64_t std::__assoc_sub_state::wait_until<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>(uint64_t a1, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a2)
{
  v13.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  v13.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  unsigned int v4 = *(_DWORD *)(a1 + 136);
  if ((v4 & 8) != 0)
  {
    uint64_t v11 = 2;
    goto LABEL_25;
  }
  if ((v4 & 4) != 0)
  {
    uint64_t v11 = ((v4 >> 2) & 1) == 0;
    goto LABEL_25;
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < *a2)
  {
    if (std::chrono::steady_clock::now().__d_.__rep_ < *a2)
    {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5 = *a2;
      v6.__d_.__rep_ = v5 - std::chrono::steady_clock::now().__d_.__rep_;
      if (v6.__d_.__rep_ >= 1)
      {
        std::chrono::steady_clock::now();
        v7.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v7.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v8 = 0;
          goto LABEL_14;
        }
        if (v7.__d_.__rep_ < 1)
        {
          if ((unint64_t)v7.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
            goto LABEL_13;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v8 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v7.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v8 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_14;
          }
LABEL_13:
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v8 = 1000 * v7.__d_.__rep_;
LABEL_14:
          if (v8 > (v6.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v9.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_17;
          }
        }
        v9.__d_.__rep_ = v8 + v6.__d_.__rep_;
LABEL_17:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 88), &v13, v9);
        std::chrono::steady_clock::now();
      }
      std::chrono::steady_clock::now();
    }
    unsigned int v10 = *(_DWORD *)(a1 + 136);
    if ((v10 & 4) != 0) {
      goto LABEL_24;
    }
  }
  unsigned int v10 = *(_DWORD *)(a1 + 136);
LABEL_24:
  uint64_t v11 = ((v10 >> 2) & 1) == 0;
  if (v13.__owns_) {
LABEL_25:
  }
    std::mutex::unlock(v13.__m_);
  return v11;
}

void std::__assoc_state<quasar::Location>::copy(std::__assoc_sub_state *a1)
{
  __lk.__m_ = &a1->__mut_;
  __lk.__owns_ = 1;
  std::mutex::lock(&a1->__mut_);
  std::__assoc_sub_state::__sub_wait(a1, &__lk);
  ptr = a1->__exception_.__ptr_;
  v5.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v5);
  if (ptr)
  {
    std::exception_ptr::exception_ptr(&v4, &a1->__exception_);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else if (__lk.__owns_)
  {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_1B23C56C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  if (a12) {
    std::mutex::unlock(a11);
  }
  _Unwind_Resume(a1);
}

uint64_t TState::addTrans(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = a2 + 8 * a3;
  *(void *)(v3 + 16) = result;
  uint64_t v4 = result + 8 * a3;
  uint64_t v6 = *(void *)(v4 + 16);
  std::exception_ptr v5 = (void *)(v4 + 16);
  *(void *)(v3 + 32) = v6;
  if (*v5) {
    *(void *)(*v5 + 8 * a3 + 48) = a2;
  }
  *std::exception_ptr v5 = a2;
  return result;
}

uint64_t TState::deleteTrans(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = a2 + 8 * a3;
  uint64_t v6 = *(void *)(v3 + 32);
  uint64_t v4 = (void *)(v3 + 32);
  uint64_t v5 = v6;
  uint64_t v7 = v4[2];
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v8 = (void *)(result + 8 * a3 + 16);
  if (v7) {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v8 = (void *)(v7 + 8 * a3 + 32);
  }
  *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v8 = v5;
  if (v5) {
    *(void *)(v5 + 8 * a3 + 48) = v7;
  }
  *(void *)(a2 + 8 * a3 + 16) = 0;
  void v4[2] = 0;
  void *v4 = 0;
  return result;
}

uint64_t TState::getTransCount(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 8 * a2 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    ++result;
    uint64_t v2 = *(void *)(v2 + 8 * a2 + 32);
  }
  while (v2);
  return result;
}

void TFsa::TFsa(TFsa *this)
{
  TAllocator::TAllocator(this, 2048);
  v1[3] = 0u;
  *(_OWORD *)((char *)v1 + 104) = 0u;
  v1[4] = 0u;
  v1[5] = 0u;
  *(_OWORD *)((char *)v1 + 120) = 0u;
  *(_OWORD *)((char *)v1 + 136) = 0u;
  *(_OWORD *)((char *)v1 + 152) = 0u;
  *(_OWORD *)((char *)v1 + 168) = 0u;
  *(_OWORD *)((char *)v1 + 184) = 0u;
  TFsa::clear((TFsa *)v1);
}

void sub_1B23C5808(_Unwind_Exception *a1)
{
  uint64_t v5 = 0;
  while (1)
  {
    uint64_t v6 = *(void **)((char *)v1 + v5 + 176);
    if (v6)
    {
      *(void *)((char *)v1 + v5 + 184) = v6;
      operator delete(v6);
    }
    v5 -= 24;
    if (v5 == -48)
    {
      uint64_t v7 = (void *)*((void *)v1 + 16);
      if (v7)
      {
        *((void *)v1 + 17) = v7;
        operator delete(v7);
      }
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v8 = *v3;
      if (*v3)
      {
        *((void *)v1 + 14) = v8;
        operator delete(v8);
      }
      std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v9 = (void *)*((void *)v1 + 9);
      if (v9)
      {
        *((void *)v1 + 10) = v9;
        operator delete(v9);
      }
      unsigned int v10 = *v2;
      if (*v2)
      {
        *((void *)v1 + 7) = v10;
        operator delete(v10);
      }
      TAllocator::clear(v1);
      _Unwind_Resume(a1);
    }
  }
}

void *TFsa::clear(TFsa *this)
{
  uint64_t result = TAllocator::clear(this);
  *((void *)this + 14) = *((void *)this + 13);
  *((void *)this + 7) = *((void *)this + 6);
  *((void *)this + 20) = *((void *)this + 19);
  *((void *)this + 23) = *((void *)this + 22);
  *((void *)this + 10) = *((void *)this + 9);
  *((void *)this + 17) = *((void *)this + 16);
  *((void *)this + 12) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 25) = 0;
  return result;
}

void TFsa::~TFsa(TFsa *this)
{
  for (uint64_t i = 0; i != -48; i -= 24)
  {
    uint64_t v3 = *(void **)((char *)this + i + 176);
    if (v3)
    {
      *(void *)((char *)this + i + 184) = v3;
      operator delete(v3);
    }
  }
  uint64_t v4 = (void *)*((void *)this + 16);
  if (v4)
  {
    *((void *)this + 17) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 13);
  if (v5)
  {
    *((void *)this + 14) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 9);
  if (v6)
  {
    *((void *)this + 10) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 6);
  if (v7)
  {
    *((void *)this + 7) = v7;
    operator delete(v7);
  }
  TAllocator::clear(this);
}

void *TFsa::newState(TAllocator *this, uint64_t a2)
{
  uint64_t v4 = *((void *)this + 10);
  if (*((void *)this + 9) == v4)
  {
    uint64_t v5 = (void *)TAllocator::allocate(this, 48);
    uint64_t v6 = (char **)((char *)this + 48);
    *uint64_t v5 = (uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 3;
    v5[1] = a2;
    v5[2] = 0;
    v5[3] = 0;
    v5[4] = -1;
    v5[5] = -1;
    uint64_t v7 = (void *)*((void *)this + 7);
    unint64_t v8 = *((void *)this + 8);
    if ((unint64_t)v7 >= v8)
    {
      uint64_t v10 = ((char *)v7 - *v6) >> 3;
      if ((unint64_t)(v10 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = v8 - (void)*v6;
      uint64_t v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
        uint64_t v12 = v10 + 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13) {
        long double v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 64, v13);
      }
      else {
        long double v14 = 0;
      }
      long double v15 = &v14[8 * v10];
      double v16 = &v14[8 * v13];
      *(void *)long double v15 = v5;
      std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v9 = v15 + 8;
      long double v18 = (char *)*((void *)this + 6);
      long double v17 = (char *)*((void *)this + 7);
      if (v17 != v18)
      {
        do
        {
          uint64_t v19 = *((void *)v17 - 1);
          v17 -= 8;
          *((void *)v15 - 1) = v19;
          v15 -= 8;
        }
        while (v17 != v18);
        long double v17 = *v6;
      }
      *((void *)this + 6) = v15;
      *((void *)this + 7) = v9;
      *((void *)this + 8) = v16;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      void *v7 = v5;
      std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v9 = v7 + 1;
    }
    *((void *)this + 7) = v9;
  }
  else
  {
    uint64_t v5 = *(void **)(v4 - 8);
    *((void *)this + 10) = v4 - 8;
    *(void *)(*((void *)this + 6) + 8 * *v5) = v5;
    v5[1] = a2;
  }
  ++*((void *)this + 5);
  return v5;
}

void TFsa::deleteState(void *a1, void *a2)
{
  uint64_t v4 = a2[4];
  if (v4 != -1)
  {
    *(void *)(a1[19] + 8 * v4) = 0;
    a2[4] = -1;
    --a1[25];
  }
  uint64_t v5 = a2[5];
  if (v5 != -1)
  {
    *(void *)(a1[22] + 8 * v5) = 0;
    a2[5] = -1;
    --a1[26];
  }
  TFsa::deleteAllTrans(a1, (uint64_t)a2);
  unint64_t v6 = a1[11];
  uint64_t v7 = (void *)a1[10];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = a1[9];
    uint64_t v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v6 - v9;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13) {
      long double v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 11), v13);
    }
    else {
      long double v14 = 0;
    }
    long double v15 = &v14[8 * v10];
    double v16 = &v14[8 * v13];
    *(void *)long double v15 = a2;
    unint64_t v8 = v15 + 8;
    long double v18 = (char *)a1[9];
    long double v17 = (char *)a1[10];
    if (v17 != v18)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      long double v17 = (char *)a1[9];
    }
    a1[9] = v15;
    a1[10] = v8;
    a1[11] = v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    void *v7 = a2;
    unint64_t v8 = v7 + 1;
  }
  a1[10] = v8;
  uint64_t v20 = a1[5];
  *(void *)(a1[6] + 8 * *a2) = 0;
  a1[5] = v20 - 1;
}

void TFsa::deleteAllTrans(void *a1, uint64_t a2)
{
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = *(void **)(a2 + 16))
    TFsa::deleteTrans(a1, i);
  while (1)
  {
    uint64_t v5 = *(void **)(a2 + 24);
    if (!v5) {
      break;
    }
    TFsa::deleteTrans(a1, v5);
  }
}

uint64_t TFsa::newTrans(TAllocator *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *((void *)this + 17);
  if (*((void *)this + 16) == v8)
  {
    uint64_t v9 = TAllocator::allocate(this, 64);
    uint64_t v10 = (char **)((char *)this + 104);
    uint64_t v11 = (uint64_t)(*((void *)this + 14) - *((void *)this + 13)) >> 3;
    *(void *)uint64_t v9 = a4;
    *(void *)(v9 + 8) = v11;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    uint64_t v12 = (uint64_t *)*((void *)this + 14);
    unint64_t v13 = *((void *)this + 15);
    if ((unint64_t)v12 >= v13)
    {
      uint64_t v15 = ((char *)v12 - *v10) >> 3;
      if ((unint64_t)(v15 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v16 = v13 - (void)*v10;
      uint64_t v17 = v16 >> 2;
      if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
        uint64_t v17 = v15 + 1;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18) {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 120, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v20 = (uint64_t *)&v19[8 * v15];
      int v21 = &v19[8 * v18];
      *uint64_t v20 = v9;
      long double v14 = v20 + 1;
      int v23 = (char *)*((void *)this + 13);
      int v22 = (char *)*((void *)this + 14);
      if (v22 != v23)
      {
        do
        {
          uint64_t v24 = *((void *)v22 - 1);
          v22 -= 8;
          *--uint64_t v20 = v24;
        }
        while (v22 != v23);
        int v22 = *v10;
      }
      *((void *)this + 13) = v20;
      *((void *)this + 14) = v14;
      *((void *)this + 15) = v21;
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      *uint64_t v12 = v9;
      long double v14 = v12 + 1;
    }
    *((void *)this + 14) = v14;
  }
  else
  {
    uint64_t v9 = *(void *)(v8 - 8);
    *((void *)this + 17) = v8 - 8;
    *(void *)(*((void *)this + 13) + 8 * *(void *)(v9 + 8)) = v9;
    *(void *)uint64_t v9 = a4;
  }
  *(void *)(v9 + 24) = a2;
  *(void *)(v9 + 40) = *(void *)(a2 + 24);
  uint64_t v25 = *(void *)(a2 + 24);
  if (v25) {
    *(void *)(v25 + 56) = v9;
  }
  *(void *)(a2 + 24) = v9;
  *(void *)(v9 + 16) = a3;
  *(void *)(v9 + 32) = *(void *)(a3 + 16);
  uint64_t v26 = *(void *)(a3 + 16);
  if (v26) {
    *(void *)(v26 + 48) = v9;
  }
  *(void *)(a3 + 16) = v9;
  ++*((void *)this + 12);
  return v9;
}

void TFsa::deleteTrans(void *a1, void *a2)
{
  uint64_t v4 = a2[7];
  uint64_t v5 = a2[5];
  unint64_t v6 = (void *)(a2[3] + 24);
  if (v4) {
    unint64_t v6 = (void *)(v4 + 40);
  }
  void *v6 = v5;
  if (v5) {
    *(void *)(v5 + 56) = v4;
  }
  a2[3] = 0;
  a2[7] = 0;
  a2[5] = 0;
  uint64_t v7 = a2[6];
  uint64_t v8 = a2[4];
  uint64_t v9 = (void *)(a2[2] + 16);
  if (v7) {
    uint64_t v9 = (void *)(v7 + 32);
  }
  *uint64_t v9 = v8;
  if (v8) {
    *(void *)(v8 + 48) = v7;
  }
  a2[2] = 0;
  a2[6] = 0;
  a2[4] = 0;
  uint64_t v10 = (uint64_t)(a1 + 18);
  unint64_t v11 = a1[18];
  uint64_t v12 = (void *)a1[17];
  if ((unint64_t)v12 >= v11)
  {
    uint64_t v14 = a1[16];
    uint64_t v15 = ((uint64_t)v12 - v14) >> 3;
    if ((unint64_t)(v15 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = v11 - v14;
    uint64_t v17 = v16 >> 2;
    if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
      uint64_t v17 = v15 + 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v17;
    }
    if (v18) {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v10, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = &v19[8 * v15];
    int v21 = &v19[8 * v18];
    *(void *)uint64_t v20 = a2;
    unint64_t v13 = v20 + 8;
    int v23 = (char *)a1[16];
    int v22 = (char *)a1[17];
    if (v22 != v23)
    {
      do
      {
        uint64_t v24 = *((void *)v22 - 1);
        v22 -= 8;
        *((void *)v20 - 1) = v24;
        v20 -= 8;
      }
      while (v22 != v23);
      int v22 = (char *)a1[16];
    }
    a1[16] = v20;
    a1[17] = v13;
    a1[18] = v21;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    *uint64_t v12 = a2;
    unint64_t v13 = v12 + 1;
  }
  a1[17] = v13;
  uint64_t v25 = a1[12];
  *(void *)(a1[13] + 8 * a2[1]) = 0;
  a1[12] = v25 - 1;
}

void TFsa::addExtremity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = a2 + 8 * a3;
  uint64_t v5 = *(void *)(v3 + 32);
  uint64_t v4 = (uint64_t *)(v3 + 32);
  if (v5 == -1)
  {
    uint64_t v8 = a3;
    uint64_t v9 = a1 + 24 * a3;
    uint64_t v12 = *(void *)(v9 + 152);
    unint64_t v11 = (void **)(v9 + 152);
    uint64_t v10 = v12;
    unint64_t v13 = v11 + 1;
    uint64_t v14 = v11[1];
    uint64_t v15 = ((uint64_t)v14 - v12) >> 3;
    uint64_t *v4 = v15;
    unint64_t v16 = (unint64_t)v11[2];
    if ((unint64_t)v14 >= v16)
    {
      if ((unint64_t)(v15 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v18 = v16 - v10;
      uint64_t v19 = v18 >> 2;
      if (v18 >> 2 <= (unint64_t)(v15 + 1)) {
        uint64_t v19 = v15 + 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v19;
      }
      if (v20) {
        int v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v11 + 2), v20);
      }
      else {
        int v21 = 0;
      }
      int v22 = &v21[8 * v15];
      int v23 = &v21[8 * v20];
      *(void *)int v22 = a2;
      uint64_t v17 = v22 + 8;
      uint64_t v24 = (char *)*v13;
      uint64_t v25 = (char *)*v11;
      if (*v13 != *v11)
      {
        do
        {
          uint64_t v26 = *((void *)v24 - 1);
          v24 -= 8;
          *((void *)v22 - 1) = v26;
          v22 -= 8;
        }
        while (v24 != v25);
        uint64_t v24 = (char *)*v11;
      }
      void *v11 = v22;
      *unint64_t v13 = v17;
      double v11[2] = v23;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      *uint64_t v14 = a2;
      uint64_t v17 = v14 + 1;
    }
    *unint64_t v13 = v17;
    ++*(void *)(a1 + 8 * v8 + 200);
  }
}

void *TFsa::nfaToDfa(uint64_t a1, TFsa *a2, uint64_t a3)
{
  TAllocator::TAllocator((TAllocator *)v14, 2048);
  v13[0] = (uint64_t)a2;
  v13[1] = a1;
  v13[2] = a3;
  TFsa::clear(a2);
  v20[0] = 0;
  v20[1] = 0;
  uint64_t v19 = (uint64_t *)v20;
  uint64_t v7 = *(uint64_t ***)(a1 + 152);
  unint64_t v6 = *(uint64_t ***)(a1 + 160);
  if (v7 != v6)
  {
    while (!*v7)
    {
      if (++v7 == v6) {
        goto LABEL_11;
      }
    }
  }
  if (v7 != v6)
  {
    uint64_t v8 = *v7;
LABEL_7:
    uint64_t v17 = v8;
    std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__emplace_unique_key_args<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node * const&>(&v19, (unint64_t *)&v17, (uint64_t *)&v17);
    uint64_t v9 = v7 + 1;
    while (v9 != v6)
    {
      uint64_t v10 = *v9++;
      uint64_t v8 = v10;
      if (v10)
      {
        uint64_t v7 = v9 - 1;
        goto LABEL_7;
      }
    }
  }
LABEL_11:
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v17 = (uint64_t *)v18;
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v15 = (uint64_t *)v16;
  TFsa::addExtremity(v13[0], (uint64_t)v11, 0);
  TAllocator::clear((TAllocator *)v14);
  std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::destroy(v16[0]);
  std::__tree<int>::destroy((uint64_t)&v17, v18[0]);
  std::__tree<int>::destroy((uint64_t)&v19, v20[0]);
  return TAllocator::clear((TAllocator *)v14);
}

void sub_1B23C61CC(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v2 - 56, *(void **)(v2 - 48));
  TAllocator::clear(v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::epsilonClosure(uint64_t a1, uint64_t **a2)
{
  if (a2 != (uint64_t **)a1) {
    std::__tree<TState const*>::__assign_multi<std::__tree_const_iterator<TState const*,std::__tree_node<TState const*,void *> *,long>>(a2, *(void **)a1, (void *)(a1 + 8));
  }
  std::set<TState const*>::set[abi:ne180100]((uint64_t *)&v18, a1);
  if (v20)
  {
    uint64_t v4 = a2 + 1;
    do
    {
      v17[0] = 0;
      v17[1] = 0;
      unint64_t v16 = (uint64_t *)v17;
      std::__tree<int>::destroy((uint64_t)&v18, v19);
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v18 = (uint64_t *)&v19;
      uint64_t v5 = v16;
      if (v16 != (uint64_t *)v17)
      {
        do
        {
          unint64_t v6 = v5[4];
          unint64_t v15 = v6;
          uint64_t v7 = *v4;
          if (!*v4) {
            goto LABEL_17;
          }
          uint64_t v8 = a2 + 1;
          do
          {
            unint64_t v9 = v7[4];
            BOOL v10 = v9 >= v6;
            if (v9 >= v6) {
              unint64_t v11 = (uint64_t **)v7;
            }
            else {
              unint64_t v11 = (uint64_t **)(v7 + 1);
            }
            if (v10) {
              uint64_t v8 = (uint64_t **)v7;
            }
            uint64_t v7 = *v11;
          }
          while (*v11);
          if (v8 == v4 || v6 < (unint64_t)v8[4])
          {
LABEL_17:
            std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__emplace_unique_key_args<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node * const&>(a2, &v15, (uint64_t *)&v15);
            std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__emplace_unique_key_args<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node * const&>(&v18, &v15, (uint64_t *)&v15);
          }
          uint64_t v12 = (uint64_t *)v5[1];
          if (v12)
          {
            do
            {
              unint64_t v13 = v12;
              uint64_t v12 = (uint64_t *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              unint64_t v13 = (uint64_t *)v5[2];
              BOOL v14 = *v13 == (void)v5;
              uint64_t v5 = v13;
            }
            while (!v14);
          }
          uint64_t v5 = v13;
        }
        while (v13 != (uint64_t *)v17);
      }
      std::__tree<int>::destroy((uint64_t)&v16, v17[0]);
    }
    while (v20);
  }
  std::__tree<int>::destroy((uint64_t)&v18, v19);
}

void sub_1B23C6390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12, uint64_t a13, char a14, void *a15)
{
}

uint64_t *anonymous namespace'::TNfaToDfa::nfaToDfaRec(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  unint64_t v6 = a2[2] + 1;
  if (v6 >> 61) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = 8 * v6;
  }
  uint64_t v8 = TAllocator::allocate((TAllocator *)(a1 + 24), v7);
  unint64_t v9 = (unint64_t *)v8;
  BOOL v10 = (void *)*a2;
  unint64_t v11 = a2 + 1;
  if ((uint64_t *)*a2 == a2 + 1)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      *(void *)(v8 + 8 * v12) = v10[4];
      unint64_t v13 = (uint64_t *)v10[1];
      if (v13)
      {
        do
        {
          BOOL v14 = v13;
          unint64_t v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          BOOL v14 = (uint64_t *)v10[2];
          BOOL v15 = *v14 == (void)v10;
          BOOL v10 = v14;
        }
        while (!v15);
      }
      ++v12;
      BOOL v10 = v14;
    }
    while (v14 != v11);
  }
  *(void *)(v8 + 8 * v12) = 0;
  uint64_t v17 = a3 + 1;
  unint64_t v16 = a3[1];
  if (!v16) {
    goto LABEL_29;
  }
  uint64_t v18 = a3 + 1;
  do
  {
    uint64_t v19 = (unint64_t *)v16[4];
    uint64_t v20 = (unint64_t *)v8;
    do
    {
      unint64_t v21 = *v19;
      unint64_t v22 = *v20;
      if (!(*v19 | *v20))
      {
        uint64_t v18 = (uint64_t **)v16;
        goto LABEL_23;
      }
      ++v20;
      ++v19;
    }
    while (v21 == v22);
    if (v21 < v22) {
      ++v16;
    }
    else {
      uint64_t v18 = (uint64_t **)v16;
    }
LABEL_23:
    unint64_t v16 = (uint64_t *)*v16;
  }
  while (v16);
  if (v18 == v17)
  {
LABEL_29:
    int v65 = 0;
    uint64_t v66 = 0;
    int v64 = (uint64_t *)&v65;
    double v27 = (void *)*a2;
    if ((uint64_t *)*a2 == v11)
    {
      char v28 = 0;
    }
    else
    {
      char v28 = 0;
      do
      {
        uint64_t v29 = v27[4];
        BOOL v30 = *(void *)(v29 + 40) != -1;
        size_t v31 = *(uint64_t **)(v29 + 8);
        if (v31)
        {
          uint64_t v62 = v31;
          std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__emplace_unique_key_args<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node * const&>(&v64, (unint64_t *)&v62, (uint64_t *)&v62);
        }
        uint64_t v32 = (uint64_t *)v27[1];
        if (v32)
        {
          do
          {
            double v33 = v32;
            uint64_t v32 = (uint64_t *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            double v33 = (uint64_t *)v27[2];
            BOOL v15 = *v33 == (void)v27;
            double v27 = v33;
          }
          while (!v15);
        }
        v28 |= v30;
        double v27 = v33;
      }
      while (v33 != v11);
      if (v66)
      {
        if (v66 == 1)
        {
          uint64_t v34 = v64[4];
LABEL_45:
          double v35 = TFsa::newState(*(TAllocator **)a1, v34);
          if (v28) {
            TFsa::addExtremity(*(void *)a1, (uint64_t)v35, 1u);
          }
          std::__tree<int>::destroy((uint64_t)&v64, v65);
          double v36 = *v17;
          if (*v17)
          {
LABEL_48:
            while (2)
            {
              double v37 = (uint64_t **)v36;
              int v38 = (unint64_t *)v36[4];
              long long v39 = v9;
              long long v40 = v38;
              do
              {
                unint64_t v41 = *v39;
                unint64_t v42 = *v40;
                if (!(*v39 | *v40))
                {
                  size_t v43 = v9;
LABEL_55:
                  while (1)
                  {
                    unint64_t v44 = *v38;
                    unint64_t v45 = *v43;
                    if (!(*v38 | *v43)) {
                      break;
                    }
                    ++v43;
                    ++v38;
                    if (v44 != v45)
                    {
                      if (v44 < v45)
                      {
                        uint64_t v17 = v37 + 1;
                        double v36 = v37[1];
                        if (v36) {
                          goto LABEL_48;
                        }
                        goto LABEL_63;
                      }
                      break;
                    }
                  }
                  if (v37) {
                    goto LABEL_66;
                  }
                  goto LABEL_63;
                }
                ++v40;
                ++v39;
              }
              while (v41 == v42);
              size_t v43 = v9;
              if (v41 >= v42) {
                goto LABEL_55;
              }
              double v36 = *v37;
              uint64_t v17 = v37;
              if (*v37) {
                continue;
              }
              break;
            }
          }
          else
          {
            double v37 = a3 + 1;
          }
LABEL_63:
          long long v46 = (uint64_t *)v37;
          double v37 = (uint64_t **)operator new(0x30uLL);
          v37[4] = (uint64_t *)v9;
          v37[5] = 0;
          *double v37 = 0;
          v37[1] = 0;
          v37[2] = v46;
          *uint64_t v17 = (uint64_t *)v37;
          uint64_t v47 = (uint64_t *)**a3;
          uint64_t v48 = (uint64_t *)v37;
          if (v47)
          {
            *a3 = v47;
            uint64_t v48 = *v17;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a3[1], v48);
          a3[2] = (uint64_t *)((char *)a3[2] + 1);
LABEL_66:
          v37[5] = v35;
          int v65 = 0;
          uint64_t v66 = 0;
          int v64 = (uint64_t *)&v65;
          long long v49 = (void *)*a2;
          if ((uint64_t *)*a2 != v11)
          {
            do
            {
              for (uint64_t i = *(void *)(v49[4] + 24); i; uint64_t i = *(void *)(i + 40))
              {
                if (*(void *)i != -1)
                {
                  uint64_t v62 = *(uint64_t **)i;
                  std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__emplace_unique_key_args<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node * const&>(&v64, (unint64_t *)&v62, (uint64_t *)&v62);
                }
              }
              long long v51 = (uint64_t *)v49[1];
              if (v51)
              {
                do
                {
                  uint64_t v52 = v51;
                  long long v51 = (uint64_t *)*v51;
                }
                while (v51);
              }
              else
              {
                do
                {
                  uint64_t v52 = (uint64_t *)v49[2];
                  BOOL v15 = *v52 == (void)v49;
                  long long v49 = v52;
                }
                while (!v15);
              }
              long long v49 = v52;
            }
            while (v52 != v11);
            uint64_t v53 = v64;
            if (v64 != (uint64_t *)&v65)
            {
              do
              {
                uint64_t v54 = v53[4];
                v63[0] = 0;
                v63[1] = 0;
                uint64_t v62 = (uint64_t *)v63;
                v61[0] = 0;
                v61[1] = 0;
                uint64_t v60 = (uint64_t *)v61;
                *(void *)TFsa::newTrans(*(TAllocator **)a1, (uint64_t)v35, v55, 0) = v53[4];
                std::__tree<int>::destroy((uint64_t)&v60, v61[0]);
                std::__tree<int>::destroy((uint64_t)&v62, v63[0]);
                uint64_t v56 = (uint64_t *)v53[1];
                if (v56)
                {
                  do
                  {
                    uint64_t v57 = v56;
                    uint64_t v56 = (uint64_t *)*v56;
                  }
                  while (v56);
                }
                else
                {
                  do
                  {
                    uint64_t v57 = (uint64_t *)v53[2];
                    BOOL v15 = *v57 == (void)v53;
                    uint64_t v53 = v57;
                  }
                  while (!v15);
                }
                uint64_t v53 = v57;
              }
              while (v57 != (uint64_t *)&v65);
            }
          }
          std::__tree<int>::destroy((uint64_t)&v64, v65);
          return v35;
        }
        uint64_t v59 = *(void *)(a1 + 16);
        if (v59)
        {
          uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t **))(*(void *)v59 + 16))(v59, &v64);
          goto LABEL_45;
        }
      }
    }
    uint64_t v34 = 0;
    goto LABEL_45;
  }
  int v23 = v18[4];
  uint64_t v24 = (unint64_t *)v8;
  while (1)
  {
    unint64_t v25 = *v24;
    unint64_t v26 = *v23;
    if (!(*v24 | *v23)) {
      return v18[5];
    }
    ++v23;
    ++v24;
    if (v25 != v26)
    {
      if (v25 < v26) {
        goto LABEL_29;
      }
      return v18[5];
    }
  }
}

void sub_1B23C6878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
}

uint64_t *anonymous namespace'::move(uint64_t *result, uint64_t a2, uint64_t **a3)
{
  uint64_t v3 = result + 1;
  uint64_t v4 = (void *)*result;
  if ((uint64_t *)*result != result + 1)
  {
    do
    {
      for (uint64_t i = *(void **)(v4[4] + 24); i; uint64_t i = (void *)i[5])
      {
        if (*i == a2)
        {
          uint64_t v11 = i[2];
          uint64_t result = std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__emplace_unique_key_args<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node * const&>(a3, (unint64_t *)&v11, &v11);
        }
      }
      uint64_t v8 = (uint64_t *)v4[1];
      if (v8)
      {
        do
        {
          unint64_t v9 = v8;
          uint64_t v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          unint64_t v9 = (uint64_t *)v4[2];
          BOOL v10 = *v9 == (void)v4;
          uint64_t v4 = v9;
        }
        while (!v10);
      }
      uint64_t v4 = v9;
    }
    while (v9 != v3);
  }
  return result;
}

uint64_t **std::__tree<TState const*>::__assign_multi<std::__tree_const_iterator<TState const*,std::__tree_node<TState const*,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    unint64_t v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    void v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    BOOL v14 = result;
    BOOL v15 = v8;
    unint64_t v16 = v8;
    if (v8)
    {
      BOOL v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        unint64_t v9 = a2;
        do
        {
          v8[4] = v9[4];
          std::__tree<TState const*>::__node_insert_multi(v5, v8);
          uint64_t v8 = v15;
          unint64_t v16 = v15;
          if (v15) {
            BOOL v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          BOOL v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              BOOL v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              unint64_t v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          unint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<TState const*>::__emplace_multi<TState const* const&>(v5, a2 + 4);
      uint64_t v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          unint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          unint64_t v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1B23C6AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<TState const*>::__node_insert_multi(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (a2[4] >= (unint64_t)v4[4]) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v3, v5, a2);
  return a2;
}

uint64_t *std::__tree<TState const*>::__emplace_multi<TState const* const&>(uint64_t **a1, unint64_t *a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x28uLL);
  unint64_t v5 = *a2;
  v4[4] = *a2;
  unint64_t v6 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        unint64_t v6 = (uint64_t **)v7;
        if (v5 >= v7[4]) {
          break;
        }
        uint64_t v7 = (uint64_t *)*v7;
        uint64_t v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      uint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7);
    uint64_t v8 = v6 + 1;
  }
  else
  {
    uint64_t v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t *std::set<TState const*>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<TState const*>::insert[abi:ne180100]<std::__tree_const_iterator<TState const*,std::__tree_node<TState const*,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1B23C6C3C(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<TState const*>::insert[abi:ne180100]<std::__tree_const_iterator<TState const*,std::__tree_node<TState const*,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<TState const*>::__emplace_hint_unique_key_args<TState const*,TState const* const&>(v5, v6, v4 + 4, v4 + 4);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<TState const*>::__emplace_hint_unique_key_args<TState const*,TState const* const&>(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  unint64_t v6 = (uint64_t **)std::__tree<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::__find_equal<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    uint64_t v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void quasar::PhonetisaurusG2P::PhonetisaurusG2P(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = a3[1];
  v9[0] = *a3;
  v9[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  quasar::QuasarG2PBase::QuasarG2PBase(a1, v10, v9, a4, a5, a6, a7);
}

{
  quasar::PhonetisaurusG2P::PhonetisaurusG2P(a1, a2, a3, a4, a5, a6, a7);
}

void sub_1B23C71F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v18 + 423) < 0) {
    operator delete(*v19);
  }
  unint64_t v21 = *(std::__shared_weak_count **)(v18 + 376);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  unint64_t v22 = *(std::__shared_weak_count **)(v18 + 360);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  quasar::QuasarG2PBase::~QuasarG2PBase((void **)v18);
  _Unwind_Resume(a1);
}

void sub_1B23C7220()
{
  uint64_t v1 = *(std::__shared_weak_count **)(v0 - 80);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  uint64_t v2 = *(std::__shared_weak_count **)(v0 - 64);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  JUMPOUT(0x1B23C7290);
}

void sub_1B23C724C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 423) < 0) {
    operator delete(*v2);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 376);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unint64_t v5 = *(std::__shared_weak_count **)(v1 + 360);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  quasar::QuasarG2PBase::~QuasarG2PBase((void **)v1);
  _Unwind_Resume(a1);
}

void sub_1B23C7254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)va);
  JUMPOUT(0x1B23C7260);
}

void quasar::PhonetisaurusG2P::doG2P(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3)
  {
    quasar::QuasarG2PBase::chopTokenIntoUTF8Units((quasar::QuasarG2PBase *)a1, &v22);
    if (v22.__r_.__value_.__r.__words[0] != v22.__r_.__value_.__l.__size_)
    {
      long long v20 = 0uLL;
      uint64_t v21 = 0;
      memset(v19, 0, sizeof(v19));
      if (a1[98] >= 1)
      {
        memset(&v18, 0, sizeof(v18));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, (long long *)v22.__r_.__value_.__l.__data_, (long long *)v22.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22.__r_.__value_.__l.__size_ - v22.__r_.__value_.__r.__words[0]) >> 3));
        Phonetisaurus::phoneticize();
      }
      *(void *)&v5[0] = v19;
      std::vector<WordPron>::__destroy_vector::operator()[abi:ne180100]((void ***)v5);
      *(void *)&v5[0] = &v20;
      std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v5);
    }
    *(void *)&v5[0] = &v22;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v5);
  }
  else if (quasar::gLogLevel >= 4)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    *(_OWORD *)unint64_t v6 = 0u;
    long long v7 = 0u;
    memset(v5, 0, sizeof(v5));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Empty token received", 20);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v5);
  }
}

void sub_1B23C79AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  a63 = a18;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  _Unwind_Resume(a1);
}

void quasar::PhonetisaurusG2P::batchDoG2P()
{
  memset(v0, 0, sizeof(v0));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v0);
}

uint64_t quasar::PhonetisaurusG2P::getG2PVersion(quasar::PhonetisaurusG2P *this)
{
  return 2;
}

void *std::allocate_shared[abi:ne180100]<Phonetisaurus,std::allocator<Phonetisaurus>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,BOOL &,float &,float &,float &,int &,void>@<X0>(void *a1@<X1>, unsigned __int8 *a2@<X2>, float *a3@<X3>, float *a4@<X4>, float *a5@<X5>, unsigned int *a6@<X6>, void *a7@<X8>)
{
  long long v14 = operator new(0x118uLL);
  uint64_t result = std::__shared_ptr_emplace<Phonetisaurus>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,BOOL &,float &,float &,float &,int &,std::allocator<Phonetisaurus>,0>(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_1B23C7C08(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<Phonetisaurus>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,BOOL &,float &,float &,float &,int &,std::allocator<Phonetisaurus>,0>(void *a1, void *a2, unsigned __int8 *a3, float *a4, float *a5, float *a6, unsigned int *a7)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5DD20;
  Phonetisaurus::Phonetisaurus(a1 + 3, *a2, *a3, *a7, *a4, *a5, *a6);
  return a1;
}

void sub_1B23C7C7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Phonetisaurus>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DD20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phonetisaurus>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DD20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<Phonetisaurus>::__on_zero_shared(uint64_t a1)
{
}

void Phonetisaurus::~Phonetisaurus(Phonetisaurus *this)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)this + 28);
  std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy((uint64_t)this + 192, *((char **)this + 25));
  std::__tree<int>::destroy((uint64_t)this + 168, *((void **)this + 22));
  uint64_t v2 = (void *)*((void *)this + 17);
  if (v2)
  {
    *((void *)this + 18) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void std::vector<WordPron>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        unint64_t v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string,float>(uint64_t *a1, int *a2, uint64_t a3, int *a4)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v10 = 0x666666666666666;
  }
  else {
    unint64_t v10 = v6;
  }
  std::string v18 = a1 + 2;
  if (v10) {
    long long v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 2), v10);
  }
  else {
    long long v11 = 0;
  }
  long long v14 = v11;
  long long v15 = &v11[40 * v5];
  long long v17 = &v11[40 * v10];
  std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string,float>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  long long v16 = v15 + 40;
  std::vector<quasar::PronChoice>::__swap_out_circular_buffer(a1, &v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_1B23C7F3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string,float>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5)
{
  int v6 = *a3;
  long long v8 = *(std::string::value_type **)a4;
  std::string::size_type v7 = *(void *)(a4 + 8);
  *(_DWORD *)long long v11 = *(_DWORD *)(a4 + 16);
  *(_DWORD *)&v11[3] = *(_DWORD *)(a4 + 19);
  int v9 = *(char *)(a4 + 23);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  int v10 = *a5;
  *(_DWORD *)a2 = v6;
  if (v9 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a2 + 8), v8, v7);
    *(_DWORD *)(a2 + 32) = v10;
    operator delete(v8);
  }
  else
  {
    *(void *)(a2 + 8) = v8;
    *(void *)(a2 + 16) = v7;
    *(_DWORD *)(a2 + 24) = *(_DWORD *)v11;
    *(_DWORD *)(a2 + 27) = *(_DWORD *)&v11[3];
    *(unsigned char *)(a2 + 31) = v9;
    *(_DWORD *)(a2 + 32) = v10;
  }
}

void sub_1B23C8004(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::ptt::RecognizePronunciationsBatch(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  quasar::StopWatch::StopWatch((quasar::StopWatch *)v12, (clockid_t)a2);
  uint64_t v8 = *a2;
  long long v15 = 0;
  int v9 = operator new(0x28uLL);
  *int v9 = &unk_1F0A64810;
  v9[1] = a1;
  uint64_t v9[2] = a3;
  void v9[3] = a4;
  v9[4] = v12;
  long long v15 = v9;
  uint64_t v10 = quasar::RecognitionResultIterator::iterateWithCallback(v8, (uint64_t)v14);
  std::__function::__value_func<BOOL ()(quasar::RecognitionResultIterator::Record const&)>::~__value_func[abi:ne180100](v14);
  long long v13 = (void **)v12;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v13);
  return v10;
}

void sub_1B23C80EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  std::__function::__value_func<BOOL ()(quasar::RecognitionResultIterator::Record const&)>::~__value_func[abi:ne180100]((void *)(v10 - 72));
  *(void *)(v10 - 80) = &a10;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 80));
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::ptt::RecognizePronunciationsBatch(quasar::ptt::PronunciationRecognizer &,std::unique_ptr<quasar::RecognitionResultIterator>,std::function<void ()(quasar::ptt::RecognizePronunciationResult const&)>,std::unique_ptr<kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>>)::$_0,std::allocator<quasar::ptt::RecognizePronunciationsBatch(quasar::ptt::PronunciationRecognizer &,std::unique_ptr<quasar::RecognitionResultIterator>,std::function<void ()(quasar::ptt::RecognizePronunciationResult const&)>,std::unique_ptr<kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>>)::$_0>,BOOL ()(quasar::RecognitionResultIterator::Record const&)>::~__func()
{
}

__n128 std::__function::__func<quasar::ptt::RecognizePronunciationsBatch(quasar::ptt::PronunciationRecognizer &,std::unique_ptr<quasar::RecognitionResultIterator>,std::function<void ()(quasar::ptt::RecognizePronunciationResult const&)>,std::unique_ptr<kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>>)::$_0,std::allocator<quasar::ptt::RecognizePronunciationsBatch(quasar::ptt::PronunciationRecognizer &,std::unique_ptr<quasar::RecognitionResultIterator>,std::function<void ()(quasar::ptt::RecognizePronunciationResult const&)>,std::unique_ptr<kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>>)::$_0>,BOOL ()(quasar::RecognitionResultIterator::Record const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F0A64810;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<quasar::ptt::RecognizePronunciationsBatch(quasar::ptt::PronunciationRecognizer &,std::unique_ptr<quasar::RecognitionResultIterator>,std::function<void ()(quasar::ptt::RecognizePronunciationResult const&)>,std::unique_ptr<kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>>)::$_0,std::allocator<quasar::ptt::RecognizePronunciationsBatch(quasar::ptt::PronunciationRecognizer &,std::unique_ptr<quasar::RecognitionResultIterator>,std::function<void ()(quasar::ptt::RecognizePronunciationResult const&)>,std::unique_ptr<kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>>)::$_0>,BOOL ()(quasar::RecognitionResultIterator::Record const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A64810;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::ptt::RecognizePronunciationsBatch(quasar::ptt::PronunciationRecognizer &,std::unique_ptr<quasar::RecognitionResultIterator>,std::function<void ()(quasar::ptt::RecognizePronunciationResult const&)>,std::unique_ptr<kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>>)::$_0,std::allocator<quasar::ptt::RecognizePronunciationsBatch(quasar::ptt::PronunciationRecognizer &,std::unique_ptr<quasar::RecognitionResultIterator>,std::function<void ()(quasar::ptt::RecognizePronunciationResult const&)>,std::unique_ptr<kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>>)::$_0>,BOOL ()(quasar::RecognitionResultIterator::Record const&)>::operator()(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __str = *(std::string *)a2;
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Processing ", 11);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    std::string::size_type v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_str, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)".", 1);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v32);
  }
  memset(v29, 0, sizeof(v29));
  int v30 = 6;
  memset(v31, 0, 24);
  std::string::operator=(v29, &__str);
  uint64_t v8 = **(void ***)(a1 + 24);
  if (!v8)
  {
    quasar::ptt::ExtractPronunciation((uint64_t **)(a2 + 24), 1, &v32);
    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)&v29[1]);
    *(_OWORD *)&v29[1].__r_.__value_.__l.__data_ = v32;
    v29[1].__r_.__value_.__r.__words[2] = v33;
    *(void *)&long long v33 = 0;
    long long v32 = 0uLL;
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
LABEL_26:
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
    goto LABEL_32;
  }
  if ((kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::HasKey(v8, a2) & 1) == 0)
  {
    if (quasar::gLogLevel >= 2)
    {
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"utt2prn specified, but no pronunciation for utterance ", 54);
      int v13 = *(char *)(a2 + 23);
      if (v13 >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = *(void *)a2;
      }
      if (v13 >= 0) {
        uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v15 = *(void *)(a2 + 8);
      }
      uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"; using empty pronunciation.",
        28);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v32);
    }
    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)&v29[1]);
    memset(&v29[1], 0, sizeof(std::string));
    *(void *)&long long v33 = 0;
    long long v32 = 0uLL;
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
    goto LABEL_26;
  }
  int v9 = **(void ***)(a1 + 24);
  kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::CheckImpl(v9);
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t))(*(void *)*v9 + 16))(*v9, a2);
  if (*(char *)(v10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)v10, *(void *)(v10 + 8));
  }
  else
  {
    long long v11 = *(_OWORD *)v10;
    v28.__r_.__value_.__r.__words[2] = *(void *)(v10 + 16);
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v11;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, " ");
  quasar::splitAndTrimNoEmpty(&v28, (char *)__p, &v32);
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)&v29[1]);
  *(_OWORD *)&v29[1].__r_.__value_.__l.__data_ = v32;
  v29[1].__r_.__value_.__r.__words[2] = v33;
  *(void *)&long long v33 = 0;
  long long v32 = 0uLL;
  long long v50 = (void **)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v50);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
LABEL_32:
  uint64_t v18 = *(void *)(a1 + 32);
  double v19 = *(double *)(v18 + 72);
  if (*(_DWORD *)(v18 + 24))
  {
    double v19 = v19 + kaldi::Timer::GetSeconds((kaldi::Timer *)5, v17) - *(double *)(v18 + 32);
    uint64_t v18 = *(void *)(a1 + 32);
  }
  quasar::StopWatch::resume((quasar::StopWatch *)v18, v17);
  int v30 = quasar::ptt::PronunciationRecognizer::run(*(void *)(a1 + 8), (uint64_t *)&v29[1], (uint64_t)v31, 0);
  quasar::StopWatch::pause(*(quasar::StopWatch **)(a1 + 32), v20);
  uint64_t v22 = *(void *)(a1 + 32);
  double v23 = *(double *)(v22 + 72);
  if (*(_DWORD *)(v22 + 24)) {
    double v23 = v23 + kaldi::Timer::GetSeconds((kaldi::Timer *)5, v21) - *(double *)(v22 + 32);
  }
  *(double *)&v31[3] = v23 - v19;
  uint64_t v24 = *(void *)(*(void *)(a1 + 16) + 24);
  if (!v24) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v24 + 48))(v24, v29);
  *(void *)&long long v32 = v31;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  *(void *)&long long v32 = &v29[1];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if (SHIBYTE(v29[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_1B23C85D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t *a38)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  a38 = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v38 - 73) < 0) {
    operator delete(*(void **)(v38 - 96));
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::ptt::RecognizePronunciationsBatch(quasar::ptt::PronunciationRecognizer &,std::unique_ptr<quasar::RecognitionResultIterator>,std::function<void ()(quasar::ptt::RecognizePronunciationResult const&)>,std::unique_ptr<kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>>)::$_0,std::allocator<quasar::ptt::RecognizePronunciationsBatch(quasar::ptt::PronunciationRecognizer &,std::unique_ptr<quasar::RecognitionResultIterator>,std::function<void ()(quasar::ptt::RecognizePronunciationResult const&)>,std::unique_ptr<kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>>)::$_0>,BOOL ()(quasar::RecognitionResultIterator::Record const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::ptt::RecognizePronunciationsBatch(quasar::ptt::PronunciationRecognizer &,std::unique_ptr<quasar::RecognitionResultIterator>,std::function<void ()(quasar::ptt::RecognizePronunciationResult const&)>,std::unique_ptr<kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>>)::$_0,std::allocator<quasar::ptt::RecognizePronunciationsBatch(quasar::ptt::PronunciationRecognizer &,std::unique_ptr<quasar::RecognitionResultIterator>,std::function<void ()(quasar::ptt::RecognizePronunciationResult const&)>,std::unique_ptr<kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>>)::$_0>,BOOL ()(quasar::RecognitionResultIterator::Record const&)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(quasar::RecognitionResultIterator::Record const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t quasar::NullBlock::minConfigVersion(quasar::NullBlock *this)
{
  return 170;
}

void quasar::NullBlock::~NullBlock(char **this)
{
  quasar::ProcessingBlock::~ProcessingBlock(this);
  JUMPOUT(0x1B3EA8670);
}

const char *quasar::NullBlock::blockType(quasar::NullBlock *this)
{
  return "NullBlock";
}

void TaggedNgram::TaggedNgram(TaggedNgram *this, TaggedVocab *a2, int a3)
{
  Ngram::Ngram(this, a2, a3);
  void *v4 = &unk_1F0A33100;
  v4[24] = a2;
}

void TaggedNgram::wordProbBO(TaggedNgram *this, uint64_t a2, const unsigned int *a3, int a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = a2 & 0xFFFFF;
  if (a4)
  {
    for (uint64_t i = 0; i != a4; ++i)
      v14[i] = a3[i] & 0xFFFFF;
    v14[a4] = -1;
    if (!Ngram::findProb(this, a2 & 0xFFFFF, v14))
    {
      Ngram::findBOW(this, v14);
      v14[a4 - 1] = a3[a4 - 1] | 0xFFFFF;
      if (Ngram::findProb(this, v6, v14))
      {
        if ((*(unsigned int (**)(TaggedNgram *))(*(void *)this + 264))(this)
          && !*((unsigned char *)this + 8)
          && (Debug::debugAll > 1 || *((_DWORD *)this + 3) >= 2u))
        {
          uint64_t v12 = (void *)(*(uint64_t (**)(TaggedNgram *))(*(void *)this + 24))(this);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"[", 1);
          int v13 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"+Tgram]", 7);
        }
      }
      else
      {
        Ngram::findBOW(this, v14);
        (*(void (**)(TaggedNgram *, uint64_t, const unsigned int *, void))(*(void *)this + 520))(this, a2, a3, (a4 - 1));
      }
      return;
    }
  }
  else
  {
    v14[0] = -1;
    if (!Ngram::findProb(this, a2 & 0xFFFFF, v14)) {
      return;
    }
  }
  if ((*(unsigned int (**)(TaggedNgram *))(*(void *)this + 264))(this)
    && !*((unsigned char *)this + 8)
    && (Debug::debugAll > 1 || *((_DWORD *)this + 3) >= 2u))
  {
    uint64_t v10 = (void *)(*(uint64_t (**)(TaggedNgram *))(*(void *)this + 24))(this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"[", 1);
    long long v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"gram]", 5);
  }
}

uint64_t TaggedNgram::recomputeBOWs(TaggedNgram *this)
{
  int v2 = *((_DWORD *)this + 44);
  *(_DWORD *)&v34[8] = 0;
  int v35 = 0;
  int v33 = 0;
  *(void *)long long v34 = (v2 + 1);
  if (v2 != -1) {
    Array<unsigned int>::alloc();
  }
  uint64_t v3 = 0;
  uint64_t v29 = (char *)this + 152;
  double v4 = -0.000003;
  unint64_t v5 = (void *)MEMORY[0x1E4FBA240];
  unsigned int v6 = (std::locale::id *)MEMORY[0x1E4FBA258];
  do
  {
    TrieIter2<unsigned int,BOnode>::TrieIter2(v32, v29, *(void *)&v34[4] - 4 * v33, v3, 0);
    while (1)
    {
      uint64_t v7 = TrieIter2<unsigned int,BOnode>::next((uint64_t)v32);
      uint64_t v8 = v7 ? (float *)(v7 + 8) : 0;
      if (!v7) {
        break;
      }
      LHashIter<unsigned int,float>::LHashIter(v31, v7 + 16, 0);
      unsigned int v30 = 0;
      double v9 = 1.0;
      double v10 = 1.0;
      while (1)
      {
        long long v11 = (float *)LHashIter<unsigned int,float>::next((uint64_t)v31, &v30);
        if (!v11) {
          break;
        }
        double v12 = 0.0;
        if (*v11 != -INFINITY) {
          double v12 = exp(*v11 * 2.30258509);
        }
        double v9 = v9 - v12;
        if (v3)
        {
          float v13 = (*(float (**)(TaggedNgram *, void, uint64_t, void))(*(void *)this + 520))(this, v30, *(void *)&v34[4] - 4 * v33, (v3 - 1));
          double v14 = 0.0;
          if (v13 != -INFINITY) {
            double v14 = exp(v13 * 2.30258509);
          }
          double v10 = v10 - v14;
        }
      }
      if (v9 > v4 && v9 < 0.0) {
        double v9 = 0.0;
      }
      if (v10 < 0.0 && v10 > v4)
      {
        if (v9 < 0.0)
        {
LABEL_32:
          clockid_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"BOW numerator for context \"", 27);
          (*(void (**)(void))(**((void **)this + 24) + 328))(*((void *)this + 24));
          clockid_t v21 = operator<<(v20, (_DWORD *)(*(void *)&v34[4] - 4 * v33));
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\" is ", 5);
          uint64_t v22 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" < 0\n", 5);
          goto LABEL_36;
        }
LABEL_33:
        float v19 = 0.0;
        if (v9 > 0.000003)
        {
          double v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"BOW denominator for context \"", 29);
          (*(void (**)(void))(**((void **)this + 24) + 328))(*((void *)this + 24));
          uint64_t v24 = operator<<(v23, (_DWORD *)(*(void *)&v34[4] - 4 * v33));
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\" is ", 5);
          unint64_t v25 = (void *)std::ostream::operator<<();
          unint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" <= 0", 5);
          std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
          char v27 = std::locale::use_facet(&v36, v6);
          ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
          std::locale::~locale(&v36);
          std::ostream::put();
          std::ostream::flush();
          goto LABEL_36;
        }
LABEL_35:
        *uint64_t v8 = v19;
        goto LABEL_36;
      }
      if (v9 < 0.0) {
        goto LABEL_32;
      }
      if (v10 <= 0.0) {
        goto LABEL_33;
      }
      if (v3)
      {
        float v17 = log10(v9);
        float v18 = log10(v10);
        float v19 = v17 - v18;
        goto LABEL_35;
      }
      (*(void (**)(TaggedNgram *, uint64_t, double))(*(void *)this + 504))(this, *(void *)&v34[4] - 4 * v33, v9);
LABEL_36:
      LHashIter<unsigned int,double>::~LHashIter((uint64_t)v31);
    }
    TrieIter2<unsigned int,unsigned int>::~TrieIter2(v32);
    uint64_t v3 = (v3 + 1);
  }
  while (v3 < *((_DWORD *)this + 44));
  uint64_t result = *(void *)&v34[4];
  if (*(void *)&v34[4]) {
    return MEMORY[0x1B3EA8630](*(void *)&v34[4], 0x1000C8052888210);
  }
  return result;
}

void sub_1B23C8FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::locale a29)
{
  if (a27) {
    MEMORY[0x1B3EA8630](a27, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

void TaggedNgram::~TaggedNgram(TaggedNgram *this)
{
  *(void *)this = &unk_1F0A346B0;
  Trie<unsigned int,BOnode>::~Trie((char *)this + 152);
  LM::~LM(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A346B0;
  Trie<unsigned int,BOnode>::~Trie((char *)this + 152);
  LM::~LM(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::ptt::ConvertPathsToResultChoices(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  std::vector<std::vector<quasar::Token>>::reserve(a4, (a2[1] - *a2) >> 4);
  uint64_t v8 = *a2;
  for (uint64_t i = a2[1]; v8 != i; v8 += 16)
  {
    quasar::ptt::ConvertPathToResultChoice(a1, v8, a3, v10);
    std::vector<std::vector<quasar::Token>>::emplace_back<std::vector<quasar::Token>>(a4, (uint64_t)v10);
    long long v11 = (void **)v10;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v11);
  }
}

void sub_1B23C9180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void quasar::ptt::ConvertPathToResultChoice(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = a2;
  v21[4] = *MEMORY[0x1E4F143B8];
  __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v14 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  double v9 = operator new(0x30uLL);
  *double v9 = &unk_1F0A648A0;
  v9[1] = a1;
  uint64_t v9[2] = &__p;
  void v9[3] = &v14;
  v9[4] = a4;
  v9[5] = a3;
  v21[3] = v9;
  LOBYTE(v5) = quasar::IterLinearFst<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>(v5, v8, (uint64_t)v21);
  std::__function::__value_func<BOOL ()(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)>::~__value_func[abi:ne180100](v21);
  uint64_t v11 = *a4;
  uint64_t v10 = a4[1];
  if ((v5 & 1) == 0)
  {
    uint64_t v12 = *a4;
    if (v10 != v11)
    {
      do
        quasar::Token::~Token((void **)(v10 - 224));
      while (v10 != v11);
      uint64_t v12 = *a4;
    }
    a4[1] = v11;
    uint64_t v10 = v11;
    uint64_t v11 = v12;
  }
  if (v11 != v10)
  {
    float v20 = *((float *)&v14 + 1);
    LODWORD(v21[0]) = v14;
    int v19 = 0;
    float v18 = 0.0;
    if (*(float *)&v14 != 0.0 || v20 != v18)
    {
      float v13 = *(float *)&v14 + *(float *)(v10 - 16);
      *(float *)(v10 - 20) = *((float *)&v14 + 1) + *(float *)(v10 - 20);
      *(float *)(v10 - 16) = v13;
    }
  }
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
}

void sub_1B23C9358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void quasar::ptt::ConvertPathsToCompactLattice()
{
}

void sub_1B23C942C(_Unwind_Exception *a1)
{
  void *v2 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::IterLinearFst<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, a2, v13);
  for (uint64_t i = a2; ; uint64_t i = *(unsigned int *)(v8 + 16))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v12, a1, i);
    float v18 = *((float *)&v12 + 1);
    LODWORD(v11[0]) = v12;
    int v17 = 2139095040;
    float v16 = INFINITY;
    v7.n128_u32[0] = v12;
    if (*(float *)&v12 != INFINITY) {
      break;
    }
    v7.n128_f32[0] = v18;
    if (v18 != v16) {
      break;
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a1 + 40))(a1, i, v18) != 1)
    {
      if (quasar::gLogLevel >= 1) {
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    if (i != a2) {
      fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Reinit(v13, a1, i);
    }
    if (v13[0]) {
      uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v13[0] + 32))(v13[0]);
    }
    else {
      uint64_t v8 = v13[1] + 20 * v15;
    }
    if ((std::function<BOOL ()(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)>::operator()(a3, (uint64_t)&v12, v8) & 1) == 0)goto LABEL_17; {
  }
    }
  if ((*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)a1 + 40))(a1, i, v7))
  {
    if (quasar::gLogLevel >= 1)
    {
LABEL_16:
      memset(v11, 0, sizeof(v11));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"FST is not linear.", 18);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v11);
    }
LABEL_17:
    uint64_t v9 = 0;
    goto LABEL_18;
  }
  uint64_t v9 = std::function<BOOL ()(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)>::operator()(a3, (uint64_t)&v12, 0);
LABEL_18:
  if (v13[0])
  {
    (*(void (**)(void))(*(void *)v13[0] + 8))(v13[0]);
  }
  else if (v14)
  {
    --*v14;
  }
  return v9;
}

void sub_1B23C978C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  uint64_t v11 = *(void *)(v9 - 120);
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  else
  {
    uint64_t v12 = *(_DWORD **)(v9 - 96);
    if (v12) {
      --*v12;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::function<BOOL ()(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, a2, &v5);
}

void std::__function::__func<quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&,quasar::ptt::PronunciationRecognizer::ConfidenceParams const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1},std::allocator<quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&,quasar::ptt::PronunciationRecognizer::ConfidenceParams const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1}>,BOOL ()(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)>::~__func()
{
}

__n128 std::__function::__func<quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&,quasar::ptt::PronunciationRecognizer::ConfidenceParams const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1},std::allocator<quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&,quasar::ptt::PronunciationRecognizer::ConfidenceParams const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1}>,BOOL ()(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x30uLL);
  *(void *)int v2 = &unk_1F0A648A0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&,quasar::ptt::PronunciationRecognizer::ConfidenceParams const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1},std::allocator<quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&,quasar::ptt::PronunciationRecognizer::ConfidenceParams const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1}>,BOOL ()(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A648A0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&,quasar::ptt::PronunciationRecognizer::ConfidenceParams const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1},std::allocator<quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&,quasar::ptt::PronunciationRecognizer::ConfidenceParams const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1}>,BOOL ()(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)>::operator()(uint64_t a1, float32x2_t *a2, float32x2_t **a3)
{
  return quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&,quasar::ptt::PronunciationRecognizer::ConfidenceParams const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1}::operator()(a1 + 8, a2, *a3);
}

uint64_t std::__function::__func<quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&,quasar::ptt::PronunciationRecognizer::ConfidenceParams const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1},std::allocator<quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&,quasar::ptt::PronunciationRecognizer::ConfidenceParams const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1}>,BOOL ()(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&,quasar::ptt::PronunciationRecognizer::ConfidenceParams const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1},std::allocator<quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&,quasar::ptt::PronunciationRecognizer::ConfidenceParams const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1}>,BOOL ()(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)>::target_type()
{
}

uint64_t quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&,quasar::ptt::PronunciationRecognizer::ConfidenceParams const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1}::operator()(uint64_t a1, float32x2_t *a2, float32x2_t *a3)
{
  long long v3 = *(float32x2_t **)(a1 + 16);
  if (a3)
  {
    float32x2_t *v3 = vadd_f32(*v3, a3[1]);
    __int32 v6 = a3->i32[0];
    if (a3->i32[0])
    {
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v8 = *(__int32 **)(v7 + 8);
      unint64_t v9 = *(void *)(v7 + 16);
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v11 = *(__int32 **)v7;
        uint64_t v12 = ((uint64_t)v8 - *(void *)v7) >> 2;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = v9 - (void)v11;
        if (v14 >> 1 > v13) {
          unint64_t v13 = v14 >> 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          float v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v7 + 16, v15);
          uint64_t v11 = *(__int32 **)v7;
          uint64_t v8 = *(__int32 **)(v7 + 8);
          __int32 v6 = a3->i32[0];
        }
        else
        {
          float v16 = 0;
        }
        int v17 = (__int32 *)&v16[4 * v12];
        float v18 = &v16[4 * v15];
        *int v17 = v6;
        uint64_t v10 = v17 + 1;
        while (v8 != v11)
        {
          __int32 v19 = *--v8;
          *--int v17 = v19;
        }
        *(void *)uint64_t v7 = v17;
        *(void *)(v7 + 8) = v10;
        *(void *)(v7 + 16) = v18;
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *uint64_t v8 = v6;
        uint64_t v10 = v8 + 1;
      }
      *(void *)(v7 + 8) = v10;
    }
    if (a3->i32[1])
    {
      quasar::Token::Token((quasar::Token *)__p);
      quasar::QsrTextSymbolTable::Find(*(quasar::QsrTextSymbolTable **)a1, &v24);
      if (SHIBYTE(v27) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)__p = v24;
      uint64_t v27 = v25;
      __int32 v28 = a3->i32[1];
      float v20 = *(uint64_t **)(a1 + 24);
      int32x2_t v40 = vrev64_s32(**(int32x2_t **)(a1 + 16));
      int v29 = **(_DWORD **)(a1 + 32);
      unint64_t v21 = v20[1];
      if (v21 >= v20[2])
      {
        uint64_t v22 = std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token&>(v20, (const quasar::Token *)__p);
      }
      else
      {
        quasar::Token::Token((std::string *)v20[1], (const quasar::Token *)__p);
        uint64_t v22 = v21 + 224;
        v20[1] = v21 + 224;
      }
      v20[1] = v22;
      *(void *)(*(void *)(a1 + 8) + 8) = **(void **)(a1 + 8);
      **(void **)(a1 + 16) = 0;
      if (v39 < 0) {
        operator delete(v38);
      }
      if (v37 < 0) {
        operator delete(v36);
      }
      *(void *)&long long v24 = &v35;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
      if (v34 < 0) {
        operator delete(v33);
      }
      *(void *)&long long v24 = &v32;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
      if (v31 < 0) {
        operator delete(v30);
      }
      if (SHIBYTE(v27) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    float32x2_t *v3 = vadd_f32(*v3, *a2);
  }
  return 1;
}

void sub_1B23C9BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  quasar::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *kaldi::nnet1::NormalizeComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a3, a2, 111);
  uint64_t v5 = *(unsigned int *)(a2 + 20);
  v8[2] = 0;
  uint64_t v9 = 0;
  v8[0] = &unk_1F0A517C0;
  v8[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v8, v5, 0);
  uint64_t v9 = *(void *)(a3 + 32);
  float v6 = 1.0 / (double)*(int *)(a2 + 16);
  kaldi::CuVectorBase<float>::AddDiagMat2((uint64_t)v8, a2, 111, v6, 0.0);
  kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v8, 1.3553e-20);
  kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v8, -0.5);
  kaldi::CuMatrixBase<float>::MulRowsVec(a3, (uint64_t)v8);
  return kaldi::CuVector<float>::~CuVector(v8);
}

void sub_1B23C9D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *kaldi::nnet1::NormalizeComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(unsigned int *)(a2 + 20);
  v16[2] = 0;
  uint64_t v17 = 0;
  v16[0] = &unk_1F0A517C0;
  v16[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v16, v8, 0);
  uint64_t v17 = *(void *)(a5 + 32);
  uint64_t v9 = v17;
  float v10 = 1.0 / (double)*(int *)(a2 + 16);
  kaldi::CuVectorBase<float>::AddDiagMat2((uint64_t)v16, a2, 111, v10, 0.0);
  kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v16, 1.3553e-20);
  kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v16, -0.5);
  kaldi::CuMatrixBase<float>::AddDiagVecMat(a5, (uint64_t)v16, a4, 111, 1.0, 0.0);
  kaldi::CuVectorBase<float>::ReplaceValue((uint64_t)v16, 8589900000.0, 0.0);
  kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v16, 3.0);
  uint64_t v11 = *(unsigned int *)(a5 + 20);
  v14[2] = 0;
  uint64_t v15 = 0;
  v14[0] = &unk_1F0A517C0;
  v14[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v14, v11, 0);
  uint64_t v15 = v9;
  kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)v14, a4, 111, a2, 112, 1.0, 0.0);
  kaldi::CuVectorBase<float>::MulElements((uint64_t)v14, (uint64_t)v16);
  float v12 = -1.0 / (double)*(int *)(a2 + 16);
  kaldi::CuMatrixBase<float>::AddDiagVecMat(a5, (uint64_t)v14, a2, 111, v12, 1.0);
  kaldi::CuVector<float>::~CuVector(v14);
  return kaldi::CuVector<float>::~CuVector(v16);
}

void sub_1B23C9ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::NormalizeComponent::~NormalizeComponent(kaldi::nnet1::NormalizeComponent *this)
{
  kaldi::nnet1::Component::~Component(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::NormalizeComponent::Copy(kaldi::nnet1::NormalizeComponent *this)
{
}

uint64_t kaldi::nnet1::NormalizeComponent::GetType(kaldi::nnet1::NormalizeComponent *this)
{
  return 1034;
}

void quasar::PDecG2P::PDecG2P(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = a2[1];
  v15[0] = *a2;
  v15[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = a3[1];
  v14[0] = *a3;
  v14[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "g2p");
  std::string::basic_string[abi:ne180100]<0>(&v13, "");
  quasar::QuasarG2PBase::QuasarG2PBase(a1, v15, v14, a4, a5, a6, (uint64_t)__p);
}

void sub_1B23CA690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19 && a18 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 - 129) < 0) {
    operator delete(*(void **)(v21 - 152));
  }
  uint64_t v23 = *(void *)(v19 + 384);
  *(void *)(v19 + 384) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = *v20;
  *float v20 = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 48))(v24);
  }
  quasar::QuasarG2PBase::~QuasarG2PBase((void **)v19);
  _Unwind_Resume(a1);
}

void quasar::PDecG2P::doG2P(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (!v3)
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      long long v35 = 0u;
      memset(v36, 0, sizeof(v36));
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v26 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Empty token received", 20);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v26);
    }
    return;
  }
  quasar::QuasarG2PBase::chopTokenIntoUTF8Units((quasar::QuasarG2PBase *)a1, &v48);
  long long v45 = 0;
  long long v46 = 0;
  unint64_t v47 = 0;
  std::string::size_type size = v48.__r_.__value_.__l.__size_;
  std::string::size_type v5 = v48.__r_.__value_.__r.__words[0];
  if (v48.__r_.__value_.__r.__words[0] == v48.__r_.__value_.__l.__size_) {
    goto LABEL_50;
  }
  uint64_t v7 = 0;
  char v8 = 0;
  do
  {
    int v9 = *(char *)(v5 + 23);
    if (v9 < 0)
    {
      std::string::size_type v12 = *(void *)(v5 + 8);
      if (v12 != 1)
      {
        BOOL v11 = 0;
        if ((unint64_t)v7 >= v47) {
          goto LABEL_21;
        }
        goto LABEL_23;
      }
      uint64_t v10 = *(const std::string::value_type **)v5;
    }
    else
    {
      uint64_t v10 = (const std::string::value_type *)v5;
      if (v9 != 1)
      {
        BOOL v11 = 0;
        if ((unint64_t)v7 >= v47) {
          goto LABEL_21;
        }
LABEL_20:
        long long v14 = *(_OWORD *)v5;
        v7->__r_.__value_.__r.__words[2] = *(void *)(v5 + 16);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v14;
LABEL_24:
        ++v7;
        goto LABEL_25;
      }
    }
    int v13 = *(unsigned __int8 *)v10;
    BOOL v11 = v13 == 124;
    if (v13 != 124) {
      goto LABEL_18;
    }
    if (v8)
    {
      char v8 = 1;
      goto LABEL_26;
    }
    if (v45 != (long long *)v7)
    {
LABEL_18:
      if ((unint64_t)v7 >= v47)
      {
LABEL_21:
        uint64_t v7 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v45, (long long *)v5);
LABEL_25:
        long long v46 = v7;
        char v8 = v11;
        goto LABEL_26;
      }
      if ((v9 & 0x80000000) == 0) {
        goto LABEL_20;
      }
      std::string::size_type v12 = *(void *)(v5 + 8);
LABEL_23:
      std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v5, v12);
      goto LABEL_24;
    }
    char v8 = 0;
LABEL_26:
    v5 += 24;
  }
  while (v5 != size);
  uint64_t v15 = v45;
  if (v45 != (long long *)v7)
  {
    p_data = (void **)&v7[-1].__r_.__value_.__l.__data_;
    int v17 = SHIBYTE(v7[-1].__r_.__value_.__r.__words[2]);
    if (v17 < 0)
    {
      if (v7[-1].__r_.__value_.__l.__size_ != 1 || *(unsigned char *)*p_data != 124) {
        goto LABEL_40;
      }
      operator delete(*p_data);
      uint64_t v15 = v45;
    }
    else if (v17 != 1 || *(unsigned char *)p_data != 124)
    {
      goto LABEL_40;
    }
    long long v46 = --v7;
LABEL_40:
    if (v15 != (long long *)v7)
    {
      float v18 = *(float *)(a1 + 364);
      int v19 = (int)(float)(v18 * (float)(0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v15) >> 3)));
      if (v19 <= 1) {
        int v20 = 1;
      }
      else {
        int v20 = v19;
      }
      int v21 = *(_DWORD *)(a1 + 360);
      uint64_t v22 = *(void *)(a1 + 384);
      if (v18 == 0.0 || v20 >= v21)
      {
        *(_DWORD *)(v22 + 5188) = v21;
      }
      else
      {
        *(_DWORD *)(v22 + 5188) = v20;
        if (quasar::gLogLevel >= 5)
        {
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          long long v37 = 0u;
          long long v35 = 0u;
          memset(v36, 0, sizeof(v36));
          long long v33 = 0u;
          long long v34 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          long long v26 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Reducing maximum sequence length from ", 38);
          uint64_t v23 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" to ", 4);
          uint64_t v24 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" because of max-seq-length-veto-factor", 38);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v26);
        }
      }
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      kaldi::quasar::DecodeOptions<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DecodeOptions((uint64_t)&v26, *(_DWORD *)(a1 + 352), *(_DWORD *)(a1 + 368), *(float *)(a1 + 372));
      uint64_t v25 = *(void *)(a1 + 384);
      *((void *)&v37 + 1) = *(void *)(a1 + 376);
      v36[6] = 1;
      v36[5] = *(_DWORD *)(a1 + 356);
      *(void *)&v36[3] = 0;
      kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeTokenized<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v25, &v45, (uint64_t)&v26);
    }
  }
LABEL_50:
  *(void *)&long long v26 = &v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  *(void *)&long long v26 = &v48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
}

void sub_1B23CB010(_Unwind_Exception *a1)
{
  STACK[0x2A0] = v2 - 160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A0]);
  STACK[0x2A0] = v2 - 136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A0]);
  STACK[0x2A0] = v1;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A0]);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeTokenized<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, long long **a2, uint64_t a3)
{
  memset(__p, 0, sizeof(__p));
  memset(&v5, 0, sizeof(v5));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Symbolize(a1, (uint64_t *)&v5, (uint64_t)__p, 0);
  uint64_t v7 = &v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeSymbolized<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, (uint64_t)__p, a3);
}

void sub_1B23CB208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void quasar::PDecG2P::batchDoG2P()
{
  memset(v0, 0, sizeof(v0));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v0);
}

void quasar::PDecG2P::~PDecG2P(quasar::PDecG2P *this)
{
  quasar::PDecG2P::~PDecG2P(this);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F0A590F0;
  uint64_t v2 = *((void *)this + 48);
  *((void *)this + 48) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 47);
  *((void *)this + 47) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 48))(v3);
  }
  quasar::QuasarG2PBase::~QuasarG2PBase((void **)this);
}

uint64_t quasar::PDecG2P::getG2PVersion(quasar::PDecG2P *this)
{
  return 3;
}

uint64_t quasar::PDecG2P::getG2PModelInputSymbolTable(quasar::PDecG2P *this)
{
  return kaldi::quasar::TorchEncoderDecoder::InputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(*((void *)this + 48)
                                                                                                 + 136));
}

uint64_t kaldi::quasar::DecodeOptions<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DecodeOptions(uint64_t a1, int a2, int a3, float a4)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = a2;
  *(void *)(a1 + 164) = 0x4F0000004F000000;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 172) = 0;
  *(void *)(a1 + 184) = 1;
  *(_DWORD *)(a1 + 192) = 1;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = a3;
  *(void *)(a1 + 220) = 0x40A000003F800000;
  *(float *)(a1 + 228) = a4;
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 252) = 0;
  *(_DWORD *)(a1 + 260) = 0;
  *(void *)(a1 + 236) = 0;
  *(void *)(a1 + 244) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 264), "");
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 304) = 0x10000;
  *(unsigned char *)(a1 + 308) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(void *)(a1 + 316) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 328) = 0;
  return a1;
}

void sub_1B23CB484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 240);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 159) < 0) {
    operator delete(*(void **)(v10 + 136));
  }
  if (*(char *)(v10 + 135) < 0) {
    operator delete(*(void **)(v10 + 112));
  }
  if (*(char *)(v10 + 111) < 0) {
    operator delete(*(void **)(v10 + 88));
  }
  if (*(char *)(v10 + 87) < 0) {
    operator delete(*(void **)(v10 + 64));
  }
  if (*(char *)(v10 + 63) < 0) {
    operator delete(*(void **)(v10 + 40));
  }
  if (*(char *)(v10 + 39) < 0) {
    operator delete(*v11);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeSymbolized<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = &v8;
  if (*(unsigned char *)(a3 + 308))
  {
    kaldi::quasar::TorchEncoderDecoder::GetTiming(*(const void ***)(a1 + 136), (uint64_t)&v4);
    std::__tree<std::string>::destroy((uint64_t)&v7, v8);
    uint64_t v3 = (char *)v5;
    uint64_t v7 = v4;
    char v8 = (char *)v5;
    uint64_t v9 = v6;
    if (v6)
    {
      *(void *)(v5 + 16) = &v8;
      double v4 = (char **)&v5;
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v3 = 0;
    }
    else
    {
      uint64_t v7 = &v8;
    }
    std::__tree<std::string>::destroy((uint64_t)&v4, v3);
  }
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst();
}

void sub_1B23CB93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a11);
  a9 = (void **)(v11 - 192);
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100](&a9);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~ImplToFst((void *)(v11 - 168));
  std::__tree<std::string>::destroy(v11 - 152, *(char **)(v11 - 144));
  _Unwind_Resume(a1);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeCore<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, int **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (double *)(a1 + 4856);
  uint64_t v8 = a1 + 5680;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v34, v7, v8, &__p);
  if (SHIBYTE(v30) < 0) {
    operator delete((void *)__p);
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    long long v31 = 0;
    long long v32 = 0;
    uint64_t v33 = 0;
    kaldi::JoinVectorToString<int>(a2, ",", (uint64_t)&v31);
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Input : ", 8);
      if (v33 >= 0) {
        uint64_t v10 = (void **)&v31;
      }
      else {
        uint64_t v10 = v31;
      }
      if (v33 >= 0) {
        uint64_t v11 = HIBYTE(v33);
      }
      else {
        uint64_t v11 = (uint64_t)v32;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    if (SHIBYTE(v33) < 0) {
      operator delete(v31);
    }
  }
  float v12 = (float)(int)(((unint64_t)((char *)a2[1] - (char *)*a2) >> 2)
                   - (*(_DWORD *)(a3 + 236)
                    + *(_DWORD *)(a1 + 5204)));
  int v13 = (int)(float)(*(float *)(a1 + 5200) * v12);
  if (v13 <= 1) {
    int v13 = 1;
  }
  int v25 = v13;
  int v14 = *(_DWORD *)(a1 + 5188);
  float v15 = *(float *)(a1 + 5192);
  if (v15 != -1.0)
  {
    int v16 = (int)(float)(v15 * v12);
    if (*(_DWORD *)(a1 + 5196) > v16) {
      int v16 = *(_DWORD *)(a1 + 5196);
    }
    if (v16 < v14) {
      int v14 = v16;
    }
  }
  int v17 = (kaldi::quasar::TorchEncoderDecoder **)(a1 + 136);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SelectModel((void **)(a1 + 136), a3 + 136, a3 + 88, &v27);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (*(_DWORD *)(a3 + 160))
  {
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Beam decoding", 13);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Init<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, a3, a4);
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Read<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, a3, (uint64_t)a2, 0);
    float v19 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Write<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, a3, v14, 1);
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Greedy decoding", 15);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    kaldi::quasar::TorchEncoderDecoder::Start(*v17, *(clockid_t *)(a3 + 312), a3 + 112);
    uint64_t v20 = *(void *)(a1 + 136);
    int v21 = *(_DWORD *)(a3 + 288);
    int v22 = *(_DWORD *)(a3 + 292);
    long long __p = 0uLL;
    uint64_t v30 = 0;
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SuppressedIds(a1, a3 + 64, a3 + 88, (uint64_t *)(a3 + 328), (uint64_t)&v31);
    kaldi::quasar::TorchEncoderDecoder::ConstrainSoftmax(v20, a3 + 264, v21, v22, a2, (int **)&__p, &v31);
    std::__tree<int>::destroy((uint64_t)&v31, v32);
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    (*(void (**)(uint64_t))(*(void *)a4 + 224))(a4);
    long long __p = 0uLL;
    uint64_t v30 = 0;
    float v19 = kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::TorchEncoderDecoder>(*v17, (uint64_t *)a2, (uint64_t)&__p, a3 + 112, a4, v25, v14);
    kaldi::quasar::TorchEncoderDecoder::Finish(*v17, v23);
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v34, v18);
  return v19;
}

void sub_1B23CBD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v19 - 152), v21);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::LatticeToNbest<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>()
{
}

void sub_1B23CCAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a29);
  std::__tree<int>::destroy((uint64_t)&STACK[0x310], (void *)STACK[0x318]);
  a29 = (uint64_t)&STACK[0x328];
  std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~ImplToFst((void *)(v29 - 240));
  long long v31 = *(void **)(v29 - 216);
  if (v31)
  {
    *(void *)(v29 - 208) = v31;
    operator delete(v31);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~ImplToFst((void *)(v29 - 160));
  _Unwind_Resume(a1);
}

double kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Init<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v19, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"entered Init with #ActiveHyps: ", 31);
    uint64_t v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" at decoding-position: ", 23);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v19);
  }
  *(void *)(a1 + 5712) = a3;
  kaldi::quasar::TorchEncoderDecoder::Start(*(void **)(a1 + 136), *(clockid_t *)(a2 + 312), a2 + 112);
  (*(void (**)(void))(**(void **)(a1 + 5712) + 224))(*(void *)(a1 + 5712));
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 200))(a3);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 5712) + 176))(*(void *)(a1 + 5712), v7);
  *(_DWORD *)(a1 + 5720) = -1;
  *(int32x2_t *)(a1 + 5728) = vdup_n_s32(0x7F800000u);
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 5736), 0, 0, 0);
  int v8 = *(_DWORD *)(a2 + 184);
  *(void *)(a1 + 5760) = 0x3F8000004F000000;
  if (v8 == 1) {
    *(float *)(a1 + 5764) = 1.0 - *(float *)(a2 + 180);
  }
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::NbestCompare((uint64_t)&v19, *(_DWORD *)(a2 + 216), *(float *)(a2 + 220), *(float *)(a2 + 224));
  *(void *)(a1 + 5768) = v19;
  *(_DWORD *)(a1 + 5776) = v20;
  *(void *)(a1 + 5792) = *(void *)(a1 + 5784);
  std::vector<kaldi::Matrix<float>>::resize((uint64_t *)(a1 + 4952), 1uLL);
  kaldi::Matrix<float>::Resize(*(int32x2_t **)(a1 + 4952), 0, 0, 0, 0);
  uint64_t v9 = *(void **)(a1 + 5136);
  uint64_t v10 = *(void **)(a1 + 5128);
  if (v9 != v10)
  {
    uint64_t v11 = v9 - 6;
    float v12 = v9 - 6;
    int v13 = v9 - 6;
    do
    {
      uint64_t v14 = *v13;
      v13 -= 6;
      (*(void (**)(void *))(v14 + 16))(v12);
      v11 -= 6;
      BOOL v15 = v12 == v10;
      float v12 = v13;
    }
    while (!v15);
  }
  *(void *)(a1 + 5136) = v10;
  uint64_t v16 = *(void *)(a1 + 5160);
  uint64_t v17 = *(void *)(a1 + 5152);
  while (v16 != v17)
    uint64_t v16 = kaldi::Matrix<float>::~Matrix(v16 - 40);
  *(void *)(a1 + 5160) = v17;
  double result = 0.0;
  *(void *)(a1 + 5832) = 0;
  *(void *)(a1 + 5872) = *(void *)(a1 + 5864);
  return result;
}

void sub_1B23CCE9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Read<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v32, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"entered Read to process #tokens: ", 33);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v32);
  }
  int v8 = (uint64_t *)(a1 + 4952);
  uint64_t v9 = *(void *)(a1 + 4952);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 4960) - v9) >> 3) <= a4)
  {
    std::vector<kaldi::Matrix<float>>::resize((uint64_t *)(a1 + 4952), a4 + 1);
    uint64_t v9 = *v8;
  }
  long long v33 = 0u;
  long long v34 = 0u;
  int32x2_t v32 = (int32x2_t)&unk_1F0A51768;
  char v35 = 0;
  int v10 = kaldi::MatrixBase<float>::NumRows(v9 + 40 * a4);
  kaldi::Matrix<float>::Resize((int32x2_t *)(*v8 + 40 * a4), v10 + ((*(void *)(a3 + 8) - *(void *)a3) >> 2), 1, 2, 0);
  uint64_t v11 = *(int **)a3;
  uint64_t v12 = *v8;
  uint64_t v13 = *(void *)(a3 + 8) - *(void *)a3;
  if (v13)
  {
    uint64_t v14 = v13 >> 2;
    BOOL v15 = (uint64_t *)(v12 + 40 * a4);
    int v16 = *((_DWORD *)v15 + 2);
    uint64_t v17 = *v15;
    uint64_t v18 = *((int *)v15 + 4);
    uint64_t v19 = v10;
    if ((unint64_t)(v13 >> 2) <= 1) {
      uint64_t v14 = 1;
    }
    int v20 = (float *)(v17 + 4 * (int)v18 * (uint64_t)v10);
    uint64_t v21 = 4 * v18;
    do
    {
      int v22 = *v11++;
      *int v20 = (float)v22;
      int v20 = (float *)((char *)v20 + v21);
      ++v19;
      --v14;
    }
    while (v14);
  }
  else
  {
    int v16 = *(_DWORD *)(v12 + 40 * a4 + 8);
  }
  kaldi::SubMatrix<float>::SubMatrix((uint64_t)&__p, v12 + 40 * a4, v10, (unint64_t)v13 >> 2, 0, v16);
  kaldi::CuMatrix<float>::operator=(&v32, (int *)&__p);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
  uint64_t v23 = *(void *)(a1 + 136);
  if (!v10)
  {
    int v24 = *(_DWORD *)(a2 + 288);
    int v25 = *(_DWORD *)(a2 + 292);
    long long __p = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SuppressedIds(a1, a2 + 64, a2 + 88, (uint64_t *)(a2 + 328), (uint64_t)v28);
    kaldi::quasar::TorchEncoderDecoder::ConstrainSoftmax(v23, a2 + 264, v24, v25, (int **)a3, (int **)&__p, v28);
    std::__tree<int>::destroy((uint64_t)v28, (void *)v28[1]);
    if (__p)
    {
      uint64_t v30 = __p;
      operator delete(__p);
    }
    kaldi::quasar::TorchEncoderDecoder::ResetHistoryState(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136), 1);
    uint64_t v26 = *(void *)(a1 + 136);
    if (*(_DWORD *)(a2 + 300)) {
      kaldi::quasar::TorchEncoderDecoder::EncFeedforward(v26, (uint64_t)&v32, a4);
    }
    else {
      kaldi::quasar::TorchEncoderDecoder::StartFeedforward(v26, (uint64_t)&v32, a4, 0);
    }
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::AddInitialHypToCurrent<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2);
  }
  kaldi::quasar::TorchEncoderDecoder::EncFeedforward(*(void *)(a1 + 136), (uint64_t)&v32, a4);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v32);
}

void sub_1B23CD170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a16);
  _Unwind_Resume(a1);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Write<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"entered Write with #ActiveHyps: ", 32);
    uint64_t v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" at decoding-position: ", 23);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
  }
  v293 = 0;
  __src = 0;
  uint64_t v294 = 0;
  v290 = 0;
  v289 = 0;
  v291 = 0;
  v287 = 0;
  v286 = 0;
  uint64_t v288 = 0;
  std::priority_queue<float>::push((uint64_t)&v286, &kaldi::quasar::kMaxCost);
  if (*(float *)(a2 + 320) != 0.0)
  {
    uint64_t v9 = *(void *)(a1 + 136);
    if (!*(unsigned char *)(v9 + 3922) || !*(unsigned char *)(v9 + 3923))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Decoder repetition detection requires an alignment model with shifted alignments!", 81);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
  }
  BOOL v240 = (*(void *)(a2 + 200) || *(void *)(a2 + 208)) && (*(_DWORD *)(a2 + 184) - 1) < 2;
  uint64_t v241 = a2;
  if (a3 >= 1)
  {
    v246 = (unsigned __int8 *)(a1 + 5238);
    int v10 = *(_DWORD *)(a2 + 188);
    uint64_t v11 = *(int *)(a1 + 5836);
    int64_t v230 = v11 + a3;
    v234 = (int32x2_t *)(a1 + 4976);
    uint64_t v232 = 0;
    v233 = (int32x2_t *)(a1 + 5024);
    uint64_t v12 = (int32x2_t *)(a1 + 5072);
    double v13 = 1.0;
    uint64_t v14 = 0x4F0000004F000000;
    float v227 = 2147500000.0;
    uint64_t v15 = 0x4F0000004F000000;
    int v229 = v10;
    v228 = (char *)(a1 + 5784);
    v231 = (void *)(a1 + 5808);
    while (1)
    {
      uint64_t v16 = *(void *)(a1 + 5784);
      uint64_t v17 = *(void *)(a1 + 5792);
      if (v16 == v17) {
        goto LABEL_300;
      }
      if ((v10 != 1) | v232 & 1)
      {
        if (v10 == 2)
        {
          if (*(float *)v286 < v227) {
            goto LABEL_300;
          }
        }
        else if (v10 || SHIDWORD(v232) >= *(_DWORD *)(a2 + 160))
        {
          goto LABEL_300;
        }
      }
      if (*(float *)(a2 + 320) != 0.0 && *(unsigned char *)(*(void *)v16 + 200)) {
        goto LABEL_300;
      }
      uint64_t v18 = v289;
      uint64_t v19 = v290;
      if (v290 != v289)
      {
        do
        {
          end = v19[-2].__end_;
          if (end)
          {
            v19[-2].__end_cap_.__value_ = end;
            operator delete(end);
          }
          uint64_t v19 = (std::vector<int> *)((char *)v19 - 56);
        }
        while (v19 != v18);
        uint64_t v17 = *(void *)(a1 + 5792);
        uint64_t v16 = *(void *)(a1 + 5784);
      }
      v290 = v18;
      *(_OWORD *)v283 = 0u;
      long long v284 = 0u;
      int v285 = 1065353216;
      uint64_t v236 = v11;
      if (v17 != v16)
      {
        unint64_t v21 = 0;
        do
        {
          *(_DWORD *)long long __p = 0;
          *(_DWORD *)long long __p = **(_DWORD **)(v16 + 8 * v21);
          v253 = (void **)__p;
          int v22 = std::__hash_table<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v283, (int *)__p, (uint64_t)&std::piecewise_construct, (_DWORD **)&v253);
          uint64_t v23 = v22;
          int v24 = (unint64_t *)v22[4];
          uint64_t v25 = (uint64_t)(v22 + 5);
          unint64_t v26 = v22[5];
          if ((unint64_t)v24 >= v26)
          {
            long long v28 = (unint64_t *)v22[3];
            uint64_t v29 = v24 - v28;
            if ((unint64_t)(v29 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v30 = v26 - (void)v28;
            unint64_t v31 = (uint64_t)(v26 - (void)v28) >> 2;
            if (v31 <= v29 + 1) {
              unint64_t v31 = v29 + 1;
            }
            if (v30 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v32 = v31;
            }
            if (v32)
            {
              long long v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v25, v32);
              long long v28 = (unint64_t *)v23[3];
              int v24 = (unint64_t *)v23[4];
            }
            else
            {
              long long v33 = 0;
            }
            long long v34 = (unint64_t *)&v33[8 * v29];
            unint64_t *v34 = v21;
            uint64_t v27 = v34 + 1;
            while (v24 != v28)
            {
              unint64_t v35 = *--v24;
              *--long long v34 = v35;
            }
            v23[3] = v34;
            v23[4] = v27;
            v23[5] = &v33[8 * v32];
            if (v28) {
              operator delete(v28);
            }
          }
          else
          {
            *int v24 = v21;
            uint64_t v27 = v24 + 1;
          }
          v23[4] = v27;
          ++v21;
          uint64_t v16 = *(void *)(a1 + 5784);
        }
        while (v21 < (*(void *)(a1 + 5792) - v16) >> 3);
        std::locale v36 = (void *)v284;
LABEL_45:
        v238 = v36;
        if (v36)
        {
          if (kaldi::g_kaldi_verbose_level >= 5)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"input_batch_idx: ", 17);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
          }
          kaldi::CuMatrix<float>::Resize(v234, (v238[4] - v238[3]) >> 3, 1, 0, 0);
          long long v37 = (void *)v238[3];
          long long v38 = (void *)v238[4];
          if (v37 != v38)
          {
            uint64_t v39 = 0;
            do
            {
              if (kaldi::g_kaldi_verbose_level >= 5)
              {
                kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"hyp_idx: ", 9);
                std::ostream::operator<<();
                kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
              }
              uint64_t v40 = *(void *)(*(void *)(a1 + 5784) + 8 * *v37);
              if (v11 >= 1 && *(_DWORD *)(v40 + 40) == *(_DWORD *)(a1 + 5180))
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Final word in hyp list", 22);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
              }
              uint64_t v41 = *(void *)(v40 + 56);
              uint64_t v42 = *(void *)(v40 + 64);
              uint64_t v43 = v42 - v41;
              if (v42 != v41)
              {
                uint64_t v44 = 0;
                unint64_t v45 = v43 >> 2;
                if (v45 <= 1) {
                  unint64_t v45 = 1;
                }
                uint64_t v46 = *(void *)(a1 + 4984) + 4 * *(_DWORD *)(a1 + 5000) * (int)v39;
                do
                {
                  *(float *)(v46 + 4 * v44) = (float)*(int *)(v41 + 4 * v44);
                  ++v44;
                }
                while (v45 != v44);
              }
              kaldi::quasar::TorchEncoderDecoder::SetHistoryState(*(void *)(a1 + 136), (uint64_t *)(v40 + 8), v39, (v238[4] - v238[3]) >> 3);
              uint64_t v39 = (v39 + 1);
              ++v37;
            }
            while (v37 != v38);
          }
          kaldi::quasar::TorchEncoderDecoder::Feedforward(*(void *)(a1 + 136), v234, v233, 0);
          uint64_t v242 = *(unsigned int *)(a1 + 5040);
          kaldi::Matrix<float>::Resize(v12, (v238[4] - v238[3]) >> 3, v242, 0, 0);
          kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)v233, (int *)v12, 111);
          unint64_t v47 = (void *)v238[3];
          v237 = (void *)v238[4];
          if (v47 == v237) {
            goto LABEL_191;
          }
          uint64_t v48 = 0;
          while (1)
          {
            long long v49 = *(int **)(*(void *)(a1 + 5784) + 8 * *v47);
            kaldi::quasar::TorchEncoderDecoder::GetHistoryState(*(void *)(a1 + 136), (uint64_t *)v49 + 1, v48);
            ++*(_DWORD *)(a1 + 5216);
            v262[0] = 0;
            v262[1] = 0;
            *(void *)&long long v263 = 0;
            kaldi::quasar::TorchEncoderDecoder::GetCurrentAlignment(*(void *)(a1 + 136), v262, v48);
            long long v50 = (uint64_t *)(v49 + 52);
            unint64_t v51 = *((void *)v49 + 27);
            if (v51 >= *((void *)v49 + 28))
            {
              uint64_t v52 = std::vector<kaldi::Vector<float>>::__push_back_slow_path<kaldi::Vector<float> const&>(v50, (uint64_t)v262);
            }
            else
            {
              std::vector<kaldi::Vector<float>>::__construct_one_at_end[abi:ne180100]<kaldi::Vector<float> const&>((uint64_t)v50, (uint64_t)v262);
              uint64_t v52 = v51 + 24;
            }
            *((void *)v49 + 27) = v52;
            v281 = 0;
            v280 = 0;
            unint64_t v282 = 0;
            int BestAlignment = kaldi::quasar::TorchEncoderDecoder::GetBestAlignment(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136), v48);
            v278 = 0;
            v277 = 0;
            uint64_t v279 = 0;
            kaldi::quasar::TorchEncoderDecoder::GetAlignmentProbabilities(*(void **)(a1 + 136), (uint64_t)&v277, v48);
            if (kaldi::quasar::TorchEncoderDecoder::Reverse(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136))) {
              int BestAlignment = kaldi::MatrixBase<float>::NumRows(*(void *)(a1 + 4952) + 40 * *v49) + ~BestAlignment;
            }
            if (*(float *)(a2 + 320) != 0.0)
            {
              v253 = (void **)(v49 + 10);
              uint64_t v53 = (std::vector<unsigned int> *)std::__hash_table<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v49 + 20), v49 + 10, (uint64_t)&std::piecewise_construct, (_DWORD **)&v253);
              uint64_t v54 = v53 + 1;
              unint64_t v55 = (unint64_t)((char *)v53[1].__end_ - (char *)v53[1].__begin_) >> 2;
              if (BestAlignment + 1 > (int)v55) {
                LODWORD(v55) = BestAlignment + 1;
              }
              std::vector<int>::resize(v53 + 1, (int)v55);
              if ((int)v54->__begin_[BestAlignment] >= 1)
              {
                v253 = (void **)(v49 + 10);
                uint64_t v56 = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v49 + 40), v49 + 10, (uint64_t)&std::piecewise_construct, (_DWORD **)&v253);
                ++*((_DWORD *)v56 + 5);
              }
              v253 = (void **)(v49 + 10);
              uint64_t v57 = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v49 + 30), v49 + 10, (uint64_t)&std::piecewise_construct, (_DWORD **)&v253);
              ++*((_DWORD *)v57 + 5);
              ++v54->__begin_[BestAlignment];
            }
            if (*(unsigned char *)(a1 + 5673))
            {
              memset(&__p[8], 0, 32);
              *(void *)long long __p = &unk_1F0A51768;
              LOBYTE(v296) = 0;
              unint64_t v58 = *(void *)(a1 + 5136);
              uint64_t v59 = *(void *)(a1 + 5128);
              if (v58 >= *(void *)(a1 + 5144))
              {
                uint64_t v60 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float> const&>((uint64_t *)(a1 + 5128), (uint64_t)__p);
              }
              else
              {
                kaldi::CuMatrix<float>::CuMatrix(*(void *)(a1 + 5136), __p, 111);
                uint64_t v60 = v58 + 48;
                *(void *)(a1 + 5136) = v58 + 48;
              }
              *(void *)(a1 + 5136) = v60;
              double v61 = kaldi::SubMatrix<float>::SubMatrix((uint64_t)v275, a1 + 5072, v48, 1, 0, *(_DWORD *)(a1 + 5080));
              kaldi::Matrix<float>::Matrix(&v253, v275, 111, v61);
              unint64_t v62 = *(void *)(a1 + 5160);
              if (v62 >= *(void *)(a1 + 5168))
              {
                uint64_t v63 = std::vector<kaldi::Matrix<float>>::__push_back_slow_path<kaldi::Matrix<float>>((uint64_t *)(a1 + 5152), (uint64_t)&v253);
              }
              else
              {
                kaldi::Matrix<float>::Matrix(*(void *)(a1 + 5160), &v253);
                uint64_t v63 = v62 + 40;
                *(void *)(a1 + 5160) = v62 + 40;
              }
              unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - v59) >> 4);
              *(void *)(a1 + 5160) = v63;
              kaldi::Matrix<float>::~Matrix((uint64_t)&v253);
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)v275);
              kaldi::quasar::TorchEncoderDecoder::CopyDecoderHiddenState(*(void *)(a1 + 136), (int32x2_t *)(*(void *)(a1 + 5128) + 48 * (int)v64));
              kaldi::CuMatrix<float>::~CuMatrix((uint64_t)__p);
              int BestAlignment = v64;
            }
            if (*(_DWORD *)(a2 + 184) != 2) {
              break;
            }
            uint64_t v65 = *(void *)(a2 + 208);
            uint64_t v66 = v49[9];
            unint64_t v257 = 0;
            (*(void (**)(uint64_t, uint64_t, void ***))(*(void *)v65 + 136))(v65, v66, &v253);
            int v67 = -1;
            while (1)
            {
              if (!v253)
              {
                if (v257 >= (unint64_t)v255) {
                  goto LABEL_155;
                }
LABEL_90:
                uint64_t v68 = (*((_DWORD *)v254 + 4 * v257) - 1);
LABEL_91:
                int v67 = *((_DWORD *)v254 + 4 * v257 + 3);
                goto LABEL_92;
              }
              if ((*((unsigned int (**)(void **))*v253 + 3))(v253)) {
                break;
              }
              if (!v253) {
                goto LABEL_90;
              }
              uint64_t v68 = (*(_DWORD *)(*((uint64_t (**)(void))*v253 + 4))() - 1);
              if (!v253) {
                goto LABEL_91;
              }
              int v67 = *(_DWORD *)((*((uint64_t (**)(void **))*v253 + 4))(v253) + 12);
              if (v253)
              {
                uint64_t v69 = (char *)(*((uint64_t (**)(void **))*v253 + 4))(v253);
                goto LABEL_93;
              }
LABEL_92:
              uint64_t v69 = (char *)v254 + 16 * v257;
LABEL_93:
              int v70 = *((_DWORD *)v69 + 2);
              int VocabWordIdx = kaldi::quasar::TorchEncoderDecoder::GetVocabWordIdx(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136), v68);
              *(_DWORD *)long long __p = *(_DWORD *)(*(void *)(a1 + 5072)
                                         + 4 * *(_DWORD *)(a1 + 5088) * (int)v48
                                         + 4 * (int)v68);
              memset(&__p[8], 0, 24);
              *(_DWORD *)&__p[32] = VocabWordIdx;
              *(_DWORD *)&__p[36] = v67;
              LODWORD(v296) = v70;
              unint64_t v72 = v281;
              if ((unint64_t)v281 >= v282)
              {
                int64_t v74 = (uint64_t *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement const&>((uint64_t *)&v280, (uint64_t)__p);
              }
              else
              {
                *(void *)v281 = *(void *)__p;
                *((void *)v72 + 2) = 0;
                *((void *)v72 + 3) = 0;
                *((void *)v72 + 1) = 0;
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)v72 + 1, *(const void **)&__p[8], *(uint64_t *)&__p[16], (uint64_t)(*(void *)&__p[16] - *(void *)&__p[8]) >> 2);
                uint64_t v73 = *(void *)&__p[32];
                *((_DWORD *)v72 + 10) = v296;
                *((void *)v72 + 4) = v73;
                int64_t v74 = (uint64_t *)(v72 + 48);
              }
              v281 = (char *)v74;
              if (*(void *)&__p[8])
              {
                *(void *)&__p[16] = *(void *)&__p[8];
                operator delete(*(void **)&__p[8]);
              }
              if (v253) {
                (*((void (**)(void **))*v253 + 5))(v253);
              }
              else {
                ++v257;
              }
            }
            if (v253)
            {
              (*((void (**)(void))*v253 + 1))();
              goto LABEL_157;
            }
LABEL_155:
            if (v256) {
              --*v256;
            }
LABEL_157:
            *(_DWORD *)long long __p = (*(float (**)(void, void))(**(void **)(a2 + 208) + 32))(*(void *)(a2 + 208), v49[9]);
            LODWORD(v253) = 2139095040;
            if (*(float *)__p != INFINITY)
            {
              float v104 = (*(float (**)(void, void))(**(void **)(a2 + 208) + 32))(*(void *)(a2 + 208), v49[9]);
              int SoftmaxEosId = kaldi::quasar::TorchEncoderDecoder::GetSoftmaxEosId(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
              int v106 = *(_DWORD *)(a1 + 5180);
              *(_DWORD *)long long __p = *(_DWORD *)(*(void *)(a1 + 5072)
                                         + 4 * *(_DWORD *)(a1 + 5088) * (int)v48
                                         + 4 * SoftmaxEosId);
              memset(&__p[8], 0, 24);
              *(_DWORD *)&__p[32] = v106;
              *(_DWORD *)&__p[36] = v67;
              *(float *)&long long v296 = v104;
              uint64_t v107 = v281;
              if ((unint64_t)v281 >= v282)
              {
                int32x2_t v109 = (uint64_t *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement const&>((uint64_t *)&v280, (uint64_t)__p);
              }
              else
              {
                *(void *)v281 = *(void *)__p;
                *((void *)v107 + 2) = 0;
                *((void *)v107 + 3) = 0;
                *((void *)v107 + 1) = 0;
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)v107 + 1, *(const void **)&__p[8], *(uint64_t *)&__p[16], (uint64_t)(*(void *)&__p[16] - *(void *)&__p[8]) >> 2);
                uint64_t v108 = *(void *)&__p[32];
                *((_DWORD *)v107 + 10) = v296;
                *((void *)v107 + 4) = v108;
                int32x2_t v109 = (uint64_t *)(v107 + 48);
              }
              v281 = (char *)v109;
              if (*(void *)&__p[8])
              {
                *(void *)&__p[16] = *(void *)&__p[8];
                operator delete(*(void **)&__p[8]);
              }
            }
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>((uint64_t)v280, (uint64_t)v281, (uint64_t)&v253, 0xAAAAAAAAAAAAAAABLL * ((v281 - v280) >> 4));
LABEL_164:
            int v110 = v281;
            v111 = v280;
            if (*(unsigned char *)(a1 + 5239))
            {
              a2 = v241;
            }
            else
            {
              unint64_t v112 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v281 - v280) >> 4));
              if (v281 == v280) {
                uint64_t v113 = 0;
              }
              else {
                uint64_t v113 = v112;
              }
              std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *,false>((std::vector<int> *)v280, (uint64_t *)v281, (uint64_t)&v253, v113, 1);
              a2 = v241;
              std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::erase((uint64_t)&v280, (uint64_t)&v280[48 * *(int *)(v241 + 160)], (uint64_t)v281);
              int v110 = v281;
              v111 = v280;
            }
            if (v110 == v111 && kaldi::g_kaldi_verbose_level >= -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Nothing left in heap", 20);
              kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            }
            if (*(_DWORD *)(a2 + 184) != 5)
            {
              v116 = (float *)v280;
              unsigned int v117 = v281;
              goto LABEL_187;
            }
            uint64_t v114 = *(void *)(a1 + 5840);
            unint64_t v115 = *(int *)(a1 + 5836);
            v116 = (float *)v280;
            unsigned int v117 = v281;
            if (v115 >= (*(void *)(a1 + 5848) - v114) >> 2)
            {
LABEL_187:
              while (v116 != (float *)v117)
              {
                float v118 = *(float *)(a1 + 5764);
                int v119 = *v246;
                float v120 = *v116;
                float v121 = logf(*v116);
                if (!v119) {
                  float v121 = v120;
                }
                float v122 = -(float)(v118 * v121);
                float v123 = *(float *)(a2 + 180) * v116[10];
                int v124 = *((_DWORD *)v116 + 8);
                *(float *)long long __p = v123 + (float)(v122 + (float)(*((float *)v49 + 11) + *((float *)v49 + 12)));
                *(float *)&__p[4] = v122;
                *(float *)&__p[8] = v123;
                *(_DWORD *)&__p[12] = BestAlignment;
                memset(&__p[16], 0, 24);
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[16], v277, (uint64_t)v278, (v278 - (unsigned char *)v277) >> 2);
                LODWORD(v296) = v124;
                *((float *)&v296 + 1) = v116[9];
                *((void *)&v296 + 1) = *v47;
                unsigned int v125 = v290;
                if (v290 >= v291)
                {
                  int32x2_t v126 = (std::vector<int> *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement const&>((uint64_t *)&v289, (uint64_t)__p);
                }
                else
                {
                  *(_OWORD *)&v290->__begin_ = *(_OWORD *)__p;
                  v125[1].__begin_ = 0;
                  v125[1].__end_ = 0;
                  v125->__end_cap_.__value_ = 0;
                  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v125->__end_cap_.__value_, *(const void **)&__p[16], *(uint64_t *)&__p[24], (uint64_t)(*(void *)&__p[24] - *(void *)&__p[16]) >> 2);
                  *(_OWORD *)&v125[1].__end_cap_.__value_ = v296;
                  int32x2_t v126 = (std::vector<int> *)((char *)v125 + 56);
                }
                v290 = v126;
                if (*(void *)&__p[16])
                {
                  *(void *)&__p[24] = *(void *)&__p[16];
                  operator delete(*(void **)&__p[16]);
                }
                v116 += 12;
              }
            }
            else if (v281 != v280)
            {
              if (*((_DWORD *)v280 + 8) != *(_DWORD *)(v114 + 4 * v115)) {
                *(void *)(a1 + 5848) = v114;
              }
              goto LABEL_187;
            }
            if (v277)
            {
              v278 = v277;
              operator delete(v277);
            }
            *(void *)long long __p = &v280;
            std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            kaldi::Vector<float>::Destroy((uint64_t)v262);
            uint64_t v48 = (v48 + 1);
            if (++v47 == v237)
            {
LABEL_191:
              std::locale v36 = (void *)*v238;
              uint64_t v11 = v236;
              uint64_t v12 = (int32x2_t *)(a1 + 5072);
              goto LABEL_45;
            }
          }
          int v75 = kaldi::MatrixBase<float>::NumRows(*(void *)(a1 + 4952) + 40 * *v49);
          if (!v242) {
            goto LABEL_164;
          }
          uint64_t v76 = 0;
          LODWORD(v77) = (int)(float)(*(float *)(a1 + 5200)
                                    * (float)(v75 - (*(_DWORD *)(a1 + 5204) + *(_DWORD *)(v241 + 236))));
          if ((int)v77 <= 1) {
            uint64_t v77 = 1;
          }
          else {
            uint64_t v77 = v77;
          }
          if (v236 >= v77) {
            char v78 = a4;
          }
          else {
            char v78 = 0;
          }
          while (1)
          {
            float v79 = *(float *)(*(void *)(a1 + 5072) + 4 * (int)v48 * *(_DWORD *)(a1 + 5088) + 4 * v76);
            int v80 = kaldi::quasar::TorchEncoderDecoder::GetVocabWordIdx(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136), v76);
            int v81 = v80;
            if (v80 == *(_DWORD *)(a1 + 5180)) {
              char v82 = v78;
            }
            else {
              char v82 = 1;
            }
            if ((v82 & 1) == 0)
            {
              if (!*v47)
              {
                float v84 = *(float *)(a1 + 5764);
                int v85 = *v246;
                float v86 = logf(v79);
                if (!v85) {
                  float v86 = v79;
                }
                *(float *)(a1 + 5760) = -(float)(v84 * v86);
                *(_DWORD *)(a1 + 5720) = v49[8];
              }
              if (kaldi::g_kaldi_verbose_level >= 5)
              {
                kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Skipping target eos symbol", 26);
                kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
              }
              goto LABEL_151;
            }
            if (v80 == *(_DWORD *)(a1 + 5184)
              && (kaldi::quasar::TorchEncoderDecoder::HasBpeModel(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136)) & 1) != 0)
            {
              goto LABEL_151;
            }
            if (v240)
            {
              if (v81 != *(_DWORD *)(a1 + 5180))
              {
                if (((*(uint64_t (**)(void, void, void, unsigned char *))(**(void **)(v241 + 200) + 32))(*(void *)(v241 + 200), v49[9], (v81 + 1), __p) & 1) == 0)
                {
                  int v88 = *(_DWORD *)(a1 + 5184);
                  if (v88 < 0
                    || ((*(uint64_t (**)(void, void, void, unsigned char *))(**(void **)(v241 + 200) + 32))(*(void *)(v241 + 200), v49[9], (v88 + 1), __p) & 1) == 0)
                  {
                    goto LABEL_151;
                  }
                }
                int v87 = *(_DWORD *)&__p[12];
                float v83 = *(float *)&__p[8];
                goto LABEL_130;
              }
              *(_DWORD *)long long __p = (*(float (**)(void, void))(**(void **)(v241 + 200) + 16))(*(void *)(v241 + 200), v49[9]);
              LODWORD(v253) = 2139095040;
              if (*(float *)__p == INFINITY) {
                goto LABEL_151;
              }
              float v83 = (*(float (**)(void, void))(**(void **)(v241 + 200) + 16))(*(void *)(v241 + 200), v49[9]);
            }
            else
            {
              float v83 = 0.0;
            }
            int v87 = -1;
LABEL_130:
            if (*(_DWORD *)(v241 + 184) == 5)
            {
              uint64_t v89 = *(void *)(a1 + 5840);
              unint64_t v90 = *(int *)(a1 + 5836);
              if (v90 < (*(void *)(a1 + 5848) - v89) >> 2)
              {
                float v91 = *(float *)(v241 + 180);
                float v92 = (v13 - v91) * v79;
                if (*(_DWORD *)(v89 + 4 * v90) != v81) {
                  float v91 = -0.0;
                }
                float v79 = v91 + v92;
              }
            }
            if (*(unsigned char *)(a1 + 5239))
            {
              uint64_t v93 = v281;
              unint64_t v94 = 0xAAAAAAAAAAAAAAABLL * ((v281 - v280) >> 4);
              unint64_t v95 = *(int *)(v241 + 160);
              if (v94 == v95 && v79 > *(float *)v280)
              {
                std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *>>((uint64_t)v280, (uint64_t)v281, (uint64_t)&v253, v94);
                uint64_t v96 = v281;
                uint64_t v97 = (void *)*((void *)v281 - 5);
                if (v97)
                {
                  *((void *)v281 - 4) = v97;
                  operator delete(v97);
                }
                uint64_t v93 = v96 - 48;
                v281 = v93;
                unint64_t v95 = *(int *)(v241 + 160);
                unint64_t v94 = 0xAAAAAAAAAAAAAAABLL * ((v93 - v280) >> 4);
              }
              if (v94 >= v95) {
                goto LABEL_151;
              }
              *(float *)long long __p = v79;
              memset(&__p[8], 0, 24);
              *(_DWORD *)&__p[32] = v81;
              *(_DWORD *)&__p[36] = v87;
              *(float *)&long long v296 = v83;
              if ((unint64_t)v93 >= v282)
              {
                int v99 = (uint64_t *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement const&>((uint64_t *)&v280, (uint64_t)__p);
              }
              else
              {
                *(void *)uint64_t v93 = *(void *)__p;
                *((void *)v93 + 2) = 0;
                *((void *)v93 + 3) = 0;
                *((void *)v93 + 1) = 0;
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)v93 + 1, *(const void **)&__p[8], *(uint64_t *)&__p[16], (uint64_t)(*(void *)&__p[16] - *(void *)&__p[8]) >> 2);
                uint64_t v98 = *(void *)&__p[32];
                *((_DWORD *)v93 + 10) = v296;
                *((void *)v93 + 4) = v98;
                int v99 = (uint64_t *)(v93 + 48);
              }
              v281 = (char *)v99;
              std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>((uint64_t)v280, (uint64_t)v99, (uint64_t)&v253, 0xAAAAAAAAAAAAAAABLL * (((char *)v99 - v280) >> 4));
              unint64_t v103 = *(void **)&__p[8];
              if (!*(void *)&__p[8]) {
                goto LABEL_151;
              }
LABEL_150:
              *(void *)&__p[16] = v103;
              operator delete(v103);
              goto LABEL_151;
            }
            *(float *)long long __p = v79;
            memset(&__p[8], 0, 24);
            *(_DWORD *)&__p[32] = v81;
            *(_DWORD *)&__p[36] = v87;
            *(float *)&long long v296 = v83;
            float v100 = v281;
            if ((unint64_t)v281 >= v282)
            {
              unint64_t v102 = (uint64_t *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>((uint64_t *)&v280, (uint64_t)__p);
              unint64_t v103 = *(void **)&__p[8];
              v281 = (char *)v102;
              if (!*(void *)&__p[8]) {
                goto LABEL_151;
              }
              goto LABEL_150;
            }
            *(void *)v281 = *(void *)__p;
            *((void *)v100 + 1) = 0;
            *((void *)v100 + 2) = 0;
            *((void *)v100 + 3) = 0;
            *(_OWORD *)(v100 + 8) = *(_OWORD *)&__p[8];
            *((void *)v100 + 3) = *(void *)&__p[24];
            memset(&__p[8], 0, 24);
            int v101 = v296;
            *((void *)v100 + 4) = *(void *)&__p[32];
            *((_DWORD *)v100 + 10) = v101;
            v281 = v100 + 48;
LABEL_151:
            if (v242 == ++v76) {
              goto LABEL_164;
            }
          }
        }
      }
      if (v11 == v230 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Beam decoder hit maximum sequence length", 40);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
      }
      if (v290 == v289)
      {
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Pruned all hyps, nothing left to expand", 39);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        }
      }
      else
      {
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *,false>(v289, (unint64_t)v290, (uint64_t)&v253, 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((char *)v290 - (char *)v289) >> 3)), 1);
        LODWORD(v14) = v289->__begin_;
        int v127 = *(_DWORD *)(a1 + 5768);
        if (v127 == 2)
        {
          float v129 = *(float *)(a1 + 5776);
          float v130 = *(float *)(a1 + 5772);
          float v131 = powf(v129 + (float)(unint64_t)(v11 + 1), v130);
          float v128 = v131 / powf(v129 + 1.0, v130);
        }
        else
        {
          float v128 = (float)(unint64_t)(v11 + 2);
          if (v127 != 1) {
            float v128 = 1.0;
          }
        }
        float v227 = *(float *)&v14 / v128;
      }
      memset(v275, 0, sizeof(v275));
      int v276 = 1065353216;
      BOOL v132 = *(float *)(a2 + 164) < 2147500000.0 || *(float *)(a2 + 168) < 2147500000.0;
      BOOL v245 = v132;
      int64_t v133 = v11 + 1;
      if (*(int *)(a2 + 160) >= 1) {
        break;
      }
LABEL_287:
      if (kaldi::g_kaldi_verbose_level > 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"At output position ", 19);
        v201 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v201, (uint64_t)", # surviving hypotheses: ", 26);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
      }
      float v202 = *(uint64_t **)(a1 + 5784);
      v203 = *(uint64_t **)(a1 + 5792);
      while (v202 != v203)
      {
        if (*v202)
        {
          uint64_t v204 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Hyp::~Hyp(*v202);
          MEMORY[0x1B3EA8670](v204, 0x10B0C406F3D429DLL);
        }
        ++v202;
      }
      int v205 = __src;
      if (v228 == (char *)&__src)
      {
        int v10 = v229;
      }
      else
      {
        std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(v228, (char *)__src, (uint64_t)v293, ((unsigned char *)v293 - (unsigned char *)__src) >> 3);
        int v10 = v229;
        int v205 = __src;
      }
      v293 = v205;
      ++*(_DWORD *)(a1 + 5836);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v275);
      std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)v283);
      uint64_t v11 = v133;
      if (v133 >= v230) {
        goto LABEL_300;
      }
    }
    unint64_t v134 = 0;
    float v135 = (float)(unint64_t)v133;
    float v239 = (float)(unint64_t)(v11 + 2);
    int64_t v243 = v11 + 1;
    while (1)
    {
      int v136 = v289;
      if (0x6DB6DB6DB6DB6DB7 * (((char *)v290 - (char *)v289) >> 3) <= v134) {
        goto LABEL_287;
      }
      char v137 = !v245;
      if (!v134) {
        char v137 = 1;
      }
      if ((v137 & 1) == 0)
      {
        float v138 = *((float *)&v289->__begin_ + 14 * v134);
        if ((float)(*(float *)&v14 + *(float *)(a2 + 164)) < v138
          || (float)(*(float *)&v14 * (float)(*(float *)(a2 + 168) + 1.0)) < v138)
        {
          goto LABEL_287;
        }
      }
      int v139 = (char *)v289 + 56 * v134;
      uint64_t v140 = *(int **)(*(void *)(a1 + 5784) + 8 * *((void *)v139 + 6));
      float v141 = v139 + 40;
      if (*((_DWORD *)v139 + 10) != *(_DWORD *)(a1 + 5180))
      {
        unint64_t v143 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 4960) - *(void *)(a1 + 4952)) >> 3);
        if (v143 > 1)
        {
          int v145 = v140[8];
          BOOL v146 = __OFSUB__(v145, 1);
          unint64_t v147 = (v145 - 1);
          if (((v147 & 0x80000000) != 0) != v146) {
            unint64_t v148 = 0;
          }
          else {
            unint64_t v148 = v147 / v143;
          }
          v262[0] = 0;
          v262[0] = (void *)(*(int *)v141 + (v148 << 32));
          uint64_t v157 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v275, (unint64_t *)v262);
          uint64_t v158 = *(void *)(a1 + 4960);
          uint64_t v159 = *(void *)(a1 + 4952);
          if (v157)
          {
            v253 = v262;
            uint64_t v160 = std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v275, (unint64_t *)v262, (uint64_t)&std::piecewise_construct, &v253);
            unint64_t v161 = v158 - v159;
          }
          else
          {
            if (v158 == v159)
            {
              unint64_t v164 = 0xCCCCCCCCCCCCCCCDLL * ((v158 - v159) >> 3);
              int v165 = -1;
            }
            else
            {
              unint64_t v162 = 0;
              do
              {
                int v163 = (*(uint64_t (**)(void))(**(void **)(a1 + 5712) + 200))(*(void *)(a1 + 5712));
                ++v162;
                unint64_t v164 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 4960) - *(void *)(a1 + 4952)) >> 3);
              }
              while (v162 < v164);
              int v165 = v163;
            }
            float v192 = *(float *)v139;
            v253 = v262;
            int v193 = (float *)std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v275, (unint64_t *)v262, (uint64_t)&std::piecewise_construct, &v253);
            v193[6] = v192;
            *((_DWORD *)v193 + 7) = (v165 - 1) / v164;
            uint64_t v194 = *(void *)(a1 + 4960);
            uint64_t v195 = *(void *)(a1 + 4952);
            v253 = v262;
            uint64_t v160 = std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v275, (unint64_t *)v262, (uint64_t)&std::piecewise_construct, &v253);
            unint64_t v161 = v194 - v195;
          }
          int v144 = *v140 - 858993459 * (v161 >> 3) * *((_DWORD *)v160 + 7) + 1;
          if (kaldi::g_kaldi_verbose_level >= 5)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"using lattice state:", 20);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
          }
        }
        else
        {
          int v144 = (*(uint64_t (**)(void))(**(void **)(a1 + 5712) + 200))(*(void *)(a1 + 5712));
        }
        v260 = 0;
        uint64_t v261 = 0;
        v259 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v259, *((const void **)&v136->__end_cap_.__value_ + 7 * v134), *((void *)&v136[1].__begin_ + 7 * v134), (uint64_t)(*((void *)&v136[1].__begin_ + 7 * v134) - *((void *)&v136->__end_cap_.__value_ + 7 * v134)) >> 2);
        *(_OWORD *)v262 = 0u;
        long long v263 = 0u;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v262[1], v259, (uint64_t)v260, (v260 - (unsigned char *)v259) >> 2);
        if (v259)
        {
          v260 = v259;
          operator delete(v259);
        }
        v262[0] = (void *)vrev64_s32(*(int32x2_t *)((char *)&v136->__begin_ + 56 * v134 + 4));
        if (*((_DWORD *)&v136->__end_ + 14 * v134 + 1) < (signed int)(kaldi::MatrixBase<float>::NumRows(*(void *)(a1 + 4952) + 40 * *v140)
                                                                     + *(unsigned __int8 *)(*(void *)(a1 + 136)
                                                                                          + 3918)))
        {
          int v196 = *(_DWORD *)v141 + 1;
          LODWORD(v253) = *((_DWORD *)&v136->__end_ + 14 * v134 + 1);
          HIDWORD(v253) = v196;
          v254 = v262[0];
          v256 = 0;
          unint64_t v257 = 0;
          v255 = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v255, v262[1], v263, (uint64_t)(v263 - (unint64_t)v262[1]) >> 2);
          int v258 = v144;
          (*(void (**)(void, void, void ***))(**(void **)(a1 + 5712) + 208))(*(void *)(a1 + 5712), v140[8], &v253);
          std::vector<std::pair<int,int>>::resize((uint64_t)v231, v144 + 1);
          int v197 = *(_DWORD *)v141;
          v198 = (_DWORD *)(*v231 + 8 * v144);
          _DWORD *v198 = v140[8];
          v198[1] = v197;
          if (*(float *)(v241 + 320) != 0.0
            && std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)v140 + 20, (int *)v141))
          {
            v280 = v141;
            int v199 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v140 + 40), (int *)v141, (uint64_t)&std::piecewise_construct, (_DWORD **)&v280)+ 5);
            v280 = v141;
            if ((float)((float)v199
                       / (float)*((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v140 + 30), (int *)v141, (uint64_t)&std::piecewise_construct, (_DWORD **)&v280)+ 5)) > *(float *)(v241 + 316)&& kaldi::g_kaldi_verbose_level >= 1)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Repeating token in beam: ", 25);
              std::ostream::operator<<();
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
            }
          }
          operator new();
        }
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Adding invalid arc ", 19);
        long long v224 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v224, (uint64_t)" ", 1);
        uint64_t v225 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v225, (uint64_t)" ", 1);
        v226 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v226, (uint64_t)" ", 1);
        kaldi::MatrixBase<float>::NumRows(*(void *)(a1 + 4952) + 40 * *v140);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      LODWORD(v142) = (int)(float)(*(float *)(a1 + 5200)
                                 * (float)(int)(kaldi::MatrixBase<float>::NumRows(*(void *)(a1 + 4952) + 40 * *v140)
                                              - (*(_DWORD *)(a1 + 5204)
                                               + *(_DWORD *)(a2 + 236))));
      uint64_t v142 = (int)v142 <= 1 ? 1 : v142;
      if (v236 >= v142) {
        break;
      }
      *(int32x2_t *)(a1 + 5728) = vrev64_s32((int32x2_t)vadd_f32(*(float32x2_t *)(v140 + 11), *(float32x2_t *)((char *)&v136->__begin_ + 56 * v134 + 4)));
      *(_DWORD *)(a1 + 5720) = v140[8];
      *(_DWORD *)(a1 + 5760) = *(_DWORD *)v139;
      uint64_t v12 = (int32x2_t *)(a1 + 5072);
LABEL_286:
      if ((uint64_t)++v134 >= *(int *)(a2 + 160)) {
        goto LABEL_287;
      }
    }
    uint64_t v149 = v140[8];
    v254 = 0;
    v255 = 0;
    v256 = 0;
    if (*(unsigned char *)(a1 + 5704))
    {
      uint64_t v274 = 0;
      v272 = 0;
      v273 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v272, *((const void **)&v136->__end_cap_.__value_ + 7 * v134), *((void *)&v136[1].__begin_ + 7 * v134), (uint64_t)(*((void *)&v136[1].__begin_ + 7 * v134) - *((void *)&v136->__end_cap_.__value_ + 7 * v134)) >> 2);
      memset(__p, 0, 32);
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[8], v272, (uint64_t)v273, (v273 - (unsigned char *)v272) >> 2);
      v253 = *(void ***)__p;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v254, *(char **)&__p[8], *(uint64_t *)&__p[16], (uint64_t)(*(void *)&__p[16] - *(void *)&__p[8]) >> 2);
      if (*(void *)&__p[8])
      {
        *(void *)&__p[16] = *(void *)&__p[8];
        operator delete(*(void **)&__p[8]);
      }
      if (v272)
      {
        v273 = v272;
        operator delete(v272);
      }
      uint64_t v149 = (*(uint64_t (**)(void))(**(void **)(a1 + 5712) + 200))(*(void *)(a1 + 5712));
      int v150 = *(_DWORD *)v141 + 1;
      *(_DWORD *)long long __p = *((_DWORD *)&v136->__end_ + 14 * v134 + 1);
      *(_DWORD *)&__p[4] = v150;
      *(void *)&__p[8] = v253;
      memset(&__p[16], 0, 24);
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[16], v254, (uint64_t)v255, ((unsigned char *)v255 - (unsigned char *)v254) >> 2);
      LODWORD(v296) = v149;
      (*(void (**)(void, void, unsigned char *))(**(void **)(a1 + 5712) + 208))(*(void *)(a1 + 5712), v140[8], __p);
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v254, 0, 0, 0);
      if (*(void *)&__p[16])
      {
        *(void *)&__p[24] = *(void *)&__p[16];
        operator delete(*(void **)&__p[16]);
      }
    }
    int64_t v151 = (char *)v136 + 56 * v134;
    unsigned int v152 = *((_DWORD *)v151 + 1);
    unsigned int v153 = *((_DWORD *)v151 + 2);
    v253 = (void **)__PAIR64__(v152, v153);
    unint64_t v154 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 4960) - *(void *)(a1 + 4952)) >> 3);
    if (v154 > 1)
    {
      unint64_t v156 = ((int)v149 - 1) / v154;
      v280 = 0;
      v280 = (char *)(*(int *)v141 + (v156 << 32));
      uint64_t v12 = (int32x2_t *)(a1 + 5072);
      if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v275, (unint64_t *)&v280))
      {
        if (kaldi::g_kaldi_verbose_level >= 5)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"dropping worse identical hyp; score-diff: ",
            42);
          v262[0] = &v280;
          std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v275, (unint64_t *)&v280, (uint64_t)&std::piecewise_construct, (void **)v262);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
        }
      }
      else
      {
        uint64_t v166 = *(void *)(a1 + 5712);
        v264 = v253;
        v266 = 0;
        uint64_t v267 = 0;
        v265 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v265, v254, (uint64_t)v255, ((unsigned char *)v255 - (unsigned char *)v254) >> 2);
        (*(void (**)(uint64_t, uint64_t, void ***))(*(void *)v166 + 184))(v166, v149, &v264);
        if (v265)
        {
          v266 = v265;
          operator delete(v265);
        }
        int v167 = *(_DWORD *)v139;
        v262[0] = &v280;
        uint64_t v168 = std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v275, (unint64_t *)&v280, (uint64_t)&std::piecewise_construct, (void **)v262);
        *((_DWORD *)v168 + 6) = v167;
        *((_DWORD *)v168 + 7) = v156;
      }
    }
    else
    {
      uint64_t v155 = *(void *)(a1 + 5712);
      v268[0] = v153;
      v268[1] = v152;
      v270 = 0;
      uint64_t v271 = 0;
      v269 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v269, v254, (uint64_t)v255, ((unsigned char *)v255 - (unsigned char *)v254) >> 2);
      (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)v155 + 184))(v155, v149, v268);
      uint64_t v12 = (int32x2_t *)(a1 + 5072);
      if (v269)
      {
        v270 = v269;
        operator delete(v269);
      }
    }
    float v169 = *(float *)v139;
    if (*(float *)v139 <= *(float *)&v15)
    {
      *(_DWORD *)(a1 + 5832) = v149;
      *(float *)&uint64_t v15 = v169;
    }
    int v170 = *(_DWORD *)(a1 + 5768);
    if (v170 == 2)
    {
      float v172 = *(float *)(a1 + 5776);
      float v173 = *(float *)(a1 + 5772);
      uint64_t v174 = v14;
      uint64_t v175 = v15;
      float v176 = v135;
      float v177 = powf(v172 + v135, v173);
      float v171 = v177 / powf(v172 + 1.0, v173);
      float v135 = v176;
      uint64_t v15 = v175;
      uint64_t v14 = v174;
      double v13 = 1.0;
      int64_t v133 = v243;
    }
    else
    {
      float v171 = 1.0;
      int64_t v133 = v243;
      if (v170 == 1) {
        float v171 = v239;
      }
    }
    *(float *)long long __p = v169 / v171;
    std::priority_queue<float>::push((uint64_t)&v286, __p);
    v178 = v287;
    v179 = v286;
    uint64_t v180 = (v287 - (unsigned char *)v286) >> 2;
    if (v180 <= (unint64_t)*(int *)(a2 + 192))
    {
LABEL_268:
      if (v254)
      {
        v255 = v254;
        operator delete(v254);
      }
      LOBYTE(v232) = (v134 == 0) | v232;
      ++HIDWORD(v232);
      goto LABEL_286;
    }
    if (v287 - (unsigned char *)v286 >= 5)
    {
      uint64_t v181 = 0;
      float v182 = *(float *)v286;
      unint64_t v183 = (float *)v286;
      do
      {
        uint64_t v184 = v183;
        v183 += v181 + 1;
        uint64_t v185 = 2 * v181;
        uint64_t v181 = (2 * v181) | 1;
        uint64_t v186 = v185 + 2;
        if (v186 < v180 && *v183 < v183[1])
        {
          ++v183;
          uint64_t v181 = v186;
        }
        *uint64_t v184 = *v183;
      }
      while (v181 <= (uint64_t)((unint64_t)(v180 - 2) >> 1));
      int v187 = (float *)(v178 - 4);
      if (v183 != (float *)(v178 - 4))
      {
        *unint64_t v183 = *v187;
        *int v187 = v182;
        uint64_t v188 = (char *)v183 - v179 + 4;
        if (v188 < 5) {
          goto LABEL_267;
        }
        unint64_t v189 = (((unint64_t)v188 >> 2) - 2) >> 1;
        int v190 = (float *)&v179[4 * v189];
        float v191 = *v190;
        float v182 = *v183;
        if (*v190 >= *v183) {
          goto LABEL_267;
        }
        do
        {
          *unint64_t v183 = v191;
          unint64_t v183 = v190;
          if (!v189) {
            break;
          }
          unint64_t v189 = (v189 - 1) >> 1;
          int v190 = (float *)&v179[4 * v189];
          float v191 = *v190;
        }
        while (*v190 < v182);
      }
      *unint64_t v183 = v182;
    }
LABEL_267:
    v287 = v178 - 4;
    goto LABEL_268;
  }
  HIDWORD(v232) = 0;
  LODWORD(v15) = 1325400064;
LABEL_300:
  if (a4)
  {
    if (!HIDWORD(v232) && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"No hyps finished, setting ", 26);
      unsigned __int8 v206 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v206, (uint64_t)" partial hyps to final", 22);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    }
    uint64_t v207 = *(uint64_t **)(a1 + 5784);
    long long v208 = *(uint64_t **)(a1 + 5792);
    if (v207 != v208)
    {
      while (1)
      {
        if (HIDWORD(v232))
        {
          uint64_t v209 = *v207;
          if (!*v207) {
            goto LABEL_324;
          }
        }
        else
        {
          uint64_t v210 = (*(uint64_t (**)(void))(**(void **)(a1 + 5712) + 200))(*(void *)(a1 + 5712));
          uint64_t v211 = *v207;
          if (*(unsigned char *)(*v207 + 200))
          {
            float v212 = *(float *)(a2 + 320);
            if (v212 == 0.0) {
              int v213 = -3;
            }
            else {
              int v213 = -4;
            }
            if (v212 != 0.0 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Repetitions detected, beam search aborted.", 42);
              kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
              uint64_t v211 = *v207;
            }
          }
          else
          {
            int v213 = -3;
          }
          uint64_t v214 = *(void *)(a1 + 5712);
          uint64_t v215 = *(unsigned int *)(v211 + 32);
          *(_DWORD *)long long __p = v213;
          memset(&__p[4], 0, 36);
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[16], 0, 0, 0);
          LODWORD(v296) = v210;
          (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v214 + 208))(v214, v215, __p);
          a2 = v241;
          if (*(void *)&__p[16])
          {
            *(void *)&__p[24] = *(void *)&__p[16];
            operator delete(*(void **)&__p[16]);
          }
          uint64_t v216 = *(void *)(a1 + 5712);
          *(_OWORD *)v251 = 0u;
          long long v252 = 0u;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v251[1], 0, 0, 0);
          (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v216 + 184))(v216, v210, v251);
          if (v251[1])
          {
            *(void **)&long long v252 = v251[1];
            operator delete(v251[1]);
          }
          uint64_t v209 = *v207;
          float v217 = *(float *)(*v207 + 48);
          if ((float)(*(float *)(*v207 + 44) + v217) < *(float *)&v15) {
            *(float *)&uint64_t v15 = *(float *)(*v207 + 44) + v217;
          }
          ++*(_DWORD *)(a1 + 5212);
        }
        uint64_t v218 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Hyp::~Hyp(v209);
        MEMORY[0x1B3EA8670](v218, 0x10B0C406F3D429DLL);
LABEL_324:
        if (++v207 == v208)
        {
          uint64_t v207 = *(uint64_t **)(a1 + 5784);
          break;
        }
      }
    }
    *(void *)(a1 + 5792) = v207;
    *(_DWORD *)(a1 + 5836) = 0;
    if (!HIDWORD(v232) && *(_DWORD *)(a1 + 5720) != -1)
    {
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Setting longest vetoted translation as best ", 44);
        std::ostream::operator<<();
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
      }
      uint64_t v219 = (*(uint64_t (**)(void))(**(void **)(a1 + 5712) + 200))(*(void *)(a1 + 5712));
      uint64_t v220 = *(void *)(a1 + 5712);
      uint64_t v221 = *(unsigned int *)(a1 + 5720);
      memset(&__p[4], 0, 36);
      *(_DWORD *)long long __p = -2;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[16], 0, 0, 0);
      LODWORD(v296) = v219;
      (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v220 + 208))(v220, v221, __p);
      if (*(void *)&__p[16])
      {
        *(void *)&__p[24] = *(void *)&__p[16];
        operator delete(*(void **)&__p[16]);
      }
      uint64_t v222 = *(void *)(a1 + 5712);
      uint64_t v247 = *(void *)(a1 + 5728);
      v249 = 0;
      uint64_t v250 = 0;
      v248 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v248, *(const void **)(a1 + 5736), *(void *)(a1 + 5744), (uint64_t)(*(void *)(a1 + 5744) - *(void *)(a1 + 5736)) >> 2);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v222 + 184))(v222, v219, &v247);
      if (v248)
      {
        v249 = v248;
        operator delete(v248);
      }
      LODWORD(v15) = *(_DWORD *)(a1 + 5760);
      ++*(_DWORD *)(a1 + 5208);
    }
    kaldi::quasar::TorchEncoderDecoder::Finish(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136), v8);
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"# of cached states ", 19);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    if (*(_DWORD *)(a2 + 184) == 5)
    {
      *(void *)(a1 + 5848) = *(void *)(a1 + 5840);
      if (*(float *)(a2 + 180) > 0.0 && !*(unsigned char *)(a2 + 306)) {
        fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst();
      }
    }
  }
  if (v286)
  {
    v287 = v286;
    operator delete(v286);
  }
  *(void *)long long __p = &v289;
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (__src)
  {
    v293 = __src;
    operator delete(__src);
  }
  return *(float *)&v15;
}

void sub_1B23CFFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&a52);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x220]);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x300]);
  unint64_t v62 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v62;
    operator delete(v62);
  }
  STACK[0x300] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  kaldi::Vector<float>::Destroy((uint64_t)&a61);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&STACK[0x280]);
  uint64_t v63 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v63;
    operator delete(v63);
  }
  STACK[0x300] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  unint64_t v64 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v64;
    operator delete(v64);
  }
  _Unwind_Resume(a1);
}

void sub_1B23D0068()
{
}

void sub_1B23D0070()
{
}

void sub_1B23D00A4()
{
}

void sub_1B23D00AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&STACK[0x300]);
  unint64_t v62 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v62;
    operator delete(v62);
  }
  STACK[0x300] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  kaldi::Vector<float>::Destroy((uint64_t)&a61);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&STACK[0x280]);
  uint64_t v63 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v63;
    operator delete(v63);
  }
  STACK[0x300] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  unint64_t v64 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v64;
    operator delete(v64);
  }
  _Unwind_Resume(a1);
}

void sub_1B23D00C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,_DWORD *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  unint64_t v62 = (void *)STACK[0x308];
  if (STACK[0x308])
  {
    STACK[0x310] = (unint64_t)v62;
    operator delete(v62);
  }
  if (a52)
  {
    (*(void (**)(uint64_t))(*(void *)a52 + 8))(a52);
  }
  else if (a55)
  {
    --*a55;
  }
  uint64_t v63 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v63;
    operator delete(v63);
  }
  STACK[0x300] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  kaldi::Vector<float>::Destroy((uint64_t)&a61);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&STACK[0x280]);
  unint64_t v64 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v64;
    operator delete(v64);
  }
  STACK[0x300] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  uint64_t v65 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v65;
    operator delete(v65);
  }
  _Unwind_Resume(a1);
}

void sub_1B23D00E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  if (STACK[0x310])
  {
    STACK[0x318] = STACK[0x310];
    JUMPOUT(0x1B23D0104);
  }
  unint64_t v62 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v62;
    operator delete(v62);
  }
  STACK[0x300] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x300]);
  kaldi::Vector<float>::Destroy(&a61);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table(&STACK[0x280]);
  uint64_t v63 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v63;
    operator delete(v63);
  }
  STACK[0x300] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x300]);
  unint64_t v64 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v64;
    operator delete(v64);
  }
  _Unwind_Resume(a1);
}

void sub_1B23D0118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  unint64_t v62 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v62;
    operator delete(v62);
  }
  STACK[0x300] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  kaldi::Vector<float>::Destroy((uint64_t)&a61);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&STACK[0x280]);
  uint64_t v63 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v63;
    operator delete(v63);
  }
  STACK[0x300] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  unint64_t v64 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v64;
    operator delete(v64);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string,float &>(uint64_t *a1, int *a2, uint64_t a3, int *a4)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v10 = 0x666666666666666;
  }
  else {
    unint64_t v10 = v6;
  }
  uint64_t v18 = a1 + 2;
  if (v10) {
    uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 2), v10);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v14 = v11;
  uint64_t v15 = &v11[40 * v5];
  uint64_t v17 = &v11[40 * v10];
  std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string,float &>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  uint64_t v16 = v15 + 40;
  std::vector<quasar::PronChoice>::__swap_out_circular_buffer(a1, &v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_1B23D02E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string,float &>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5)
{
  int v6 = *a3;
  clockid_t v8 = *(std::string::value_type **)a4;
  std::string::size_type v7 = *(void *)(a4 + 8);
  *(_DWORD *)uint64_t v11 = *(_DWORD *)(a4 + 16);
  *(_DWORD *)&v11[3] = *(_DWORD *)(a4 + 19);
  int v9 = *(char *)(a4 + 23);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  int v10 = *a5;
  *(_DWORD *)a2 = v6;
  if (v9 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a2 + 8), v8, v7);
    *(_DWORD *)(a2 + 32) = v10;
    operator delete(v8);
  }
  else
  {
    *(void *)(a2 + 8) = v8;
    *(void *)(a2 + 16) = v7;
    *(_DWORD *)(a2 + 24) = *(_DWORD *)v11;
    *(_DWORD *)(a2 + 27) = *(_DWORD *)&v11[3];
    *(unsigned char *)(a2 + 31) = v9;
    *(_DWORD *)(a2 + 32) = v10;
  }
}

void sub_1B23D03B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::ptt::PronunciationRecognizer::RequestContext::RequestContext(uint64_t result, void *a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a2[1];
  *(void *)double result = *a2;
  *(void *)(result + 8) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(result + 16) = a3;
  *(_DWORD *)(result + 20) = a4;
  *(void *)(result + 24) = a5;
  *(void *)(result + 32) = a6;
  return result;
}

void quasar::ptt::PronunciationRecognizer::PronunciationRecognizer(uint64_t a1, const quasar::SystemConfig *a2, long long *a3)
{
  uint64_t v5 = quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)a1, a2, 1, 1);
  uint64_t v6 = (_OWORD *)(v5 + 1544);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 1544), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *(void *)(v5 + 1560) = *((void *)a3 + 2);
    _OWORD *v6 = v7;
  }
  *(void *)(a1 + 1568) = 0;
  quasar::ptt::PronunciationRecognizer::Params::Params((quasar::ptt::PronunciationRecognizer::Params *)(a1 + 1576));
  quasar::ptt::Decoder::Params::Params((quasar::ptt::Decoder::Params *)(a1 + 1760));
  *(_OWORD *)(a1 + 1892) = 0u;
  *(_OWORD *)(a1 + 1908) = 0u;
  *(_OWORD *)(a1 + 1860) = 0u;
  *(_OWORD *)(a1 + 1876) = 0u;
  *(_OWORD *)(a1 + 1828) = 0u;
  *(_OWORD *)(a1 + 1844) = 0u;
  *(_OWORD *)(a1 + 1796) = 0u;
  *(_OWORD *)(a1 + 1812) = 0u;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_OWORD *)(a1 + 1960) = 0u;
  if (*(char *)(a1 + 1567) >= 0) {
    size_t v8 = *(unsigned __int8 *)(a1 + 1567);
  }
  else {
    size_t v8 = *(void *)(a1 + 1552);
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v8 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v8)
  {
    if (*(char *)(a1 + 1567) >= 0) {
      int v10 = v6;
    }
    else {
      int v10 = *(const void **)(a1 + 1544);
    }
    memmove(p_p, v10, v8);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v8) = 46;
  uint64_t v11 = std::string::append(&__p, "am-force-alignment");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  *(void *)(a1 + 1992) = *((void *)&v11->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 1976) = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 2000) = 0;
  quasar::ptt::PronunciationRecognizer::registerAndParseParams((quasar::ptt::PronunciationRecognizer *)a1);
}

{
  quasar::ptt::PronunciationRecognizer::PronunciationRecognizer(a1, a2, a3);
}

void sub_1B23D0568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  quasar::SystemConfig::~SystemConfig(v14);
  _Unwind_Resume(a1);
}

void sub_1B23D0684()
{
}

void quasar::ptt::PronunciationRecognizer::registerAndParseParams(quasar::ptt::PronunciationRecognizer *this)
{
  quasar::SystemConfig::getPrefix(this, &v13);
  if (*((char *)this + 1567) >= 0) {
    size_t v2 = *((unsigned __int8 *)this + 1567);
  }
  else {
    size_t v2 = *((void *)this + 194);
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v2 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v2)
  {
    if (*((char *)this + 1567) >= 0) {
      double v4 = (char *)this + 1544;
    }
    else {
      double v4 = (char *)*((void *)this + 193);
    }
    memmove(p_p, v4, v2);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v2) = 46;
  quasar::SystemConfig::setPrefix((std::string *)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  quasar::ptt::PronunciationRecognizer::Params::registerParams((quasar::ptt::PronunciationRecognizer *)((char *)this + 1576), this);
  quasar::ptt::Decoder::Params::registerParams((quasar::ptt::PronunciationRecognizer *)((char *)this + 1760), this);
  quasar::QsrTextSymbolTable::Register((quasar::ptt::PronunciationRecognizer *)((char *)this + 1808), this, 170, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(&v10, "Root to use to configure forced alignment. If not specified, will look at .");
  uint64_t v5 = std::string::append(&v10, "am-force-alignment");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  long long v7 = std::string::append(&v11, " at the current level.");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v11, "am-force-alignment-root");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v9 = &__p;
  }
  else {
    int v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, (char *)v9);
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)&v11.__r_.__value_.__l.__data_, (uint64_t)this + 1976, (uint64_t)&v10, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  quasar::SystemConfig::readPtreeAtPrefix(this);
}

void sub_1B23D0B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 - 49) < 0) {
    operator delete(*(void **)(v28 - 72));
  }
  _Unwind_Resume(exception_object);
}

void quasar::ptt::PronunciationRecognizer::loadModelsAndInitializeDecoder(float *a1)
{
  quasar::SystemConfig::getModelLoader((quasar::SystemConfig *)a1);
  quasar::ptt::UnigramPhoneticConfusion::loadFromPhonomapFst((quasar::ptt::UnigramPhoneticConfusion *)(a1 + 394), v2, a1[435]);
}

void sub_1B23D1168(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  unint64_t v26 = *(std::__shared_weak_count **)(v25 - 184);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterministicOnDemandFstCreator((void **)(v25 - 176));
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  JUMPOUT(0x1B23D1298);
}

void sub_1B23D122C()
{
  if (!*(void *)(v0 - 168)) {
    JUMPOUT(0x1B23D1298);
  }
  JUMPOUT(0x1B23D1224);
}

void sub_1B23D123C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v25 = *(std::__shared_weak_count **)(v24 - 120);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B23D1298);
}

void sub_1B23D1260(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v25 - 153) < 0) {
    JUMPOUT(0x1B23D1288);
  }
  JUMPOUT(0x1B23D1298);
}

void sub_1B23D1294(_Unwind_Exception *a1)
{
  std::unique_ptr<quasar::ptt::UnigramPhoneticConfusion>::reset[abi:ne180100]((void **)(v1 - 72), 0);
  _Unwind_Resume(a1);
}

void quasar::QsrTextSymbolTable::~QsrTextSymbolTable(quasar::QsrTextSymbolTable *this)
{
  size_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void quasar::ptt::PronunciationRecognizer::Params::~Params(quasar::ptt::PronunciationRecognizer::Params *this)
{
  *((void *)this + 16) = &unk_1F0A51998;
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  *((void *)this + 12) = &unk_1F0A51998;
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  *((void *)this + 8) = &unk_1F0A51998;
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  *((void *)this + 4) = &unk_1F0A51998;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  *(void *)this = &unk_1F0A51998;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t quasar::ptt::PronunciationRecognizer::run(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  memset(&v30, 0, sizeof(v30));
  std::vector<int>::reserve(&v30, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      unsigned int v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 1800) + 96))(*(void *)(a1 + 1800), v8);
      unsigned int v11 = v10;
      if (v10 == -1)
      {
        memset(v29, 0, sizeof(v29));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
        uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Unable to resolve phone '", 25);
        int v25 = *(char *)(v8 + 23);
        if (v25 >= 0) {
          uint64_t v26 = v8;
        }
        else {
          uint64_t v26 = *(void *)v8;
        }
        if (v25 >= 0) {
          uint64_t v27 = *(unsigned __int8 *)(v8 + 23);
        }
        else {
          uint64_t v27 = *(void *)(v8 + 8);
        }
        uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"'.", 2);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v29);
      }
      std::vector<unsigned int>::pointer end = v30.__end_;
      if (v30.__end_ >= v30.__end_cap_.__value_)
      {
        begiuint64_t n = v30.__begin_;
        int64_t v15 = v30.__end_ - v30.__begin_;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        int64_t v17 = (char *)v30.__end_cap_.__value_ - (char *)v30.__begin_;
        if (((char *)v30.__end_cap_.__value_ - (char *)v30.__begin_) >> 1 > v16) {
          unint64_t v16 = v17 >> 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v30.__end_cap_, v18);
          begiuint64_t n = v30.__begin_;
          std::vector<unsigned int>::pointer end = v30.__end_;
        }
        else
        {
          uint64_t v19 = 0;
        }
        int v20 = (unsigned int *)&v19[4 * v15];
        *int v20 = v11;
        std::string v13 = v20 + 1;
        while (end != begin)
        {
          unsigned int v21 = *--end;
          *--int v20 = v21;
        }
        v30.__begin_ = v20;
        v30.__end_ = v13;
        v30.__end_cap_.__value_ = (unsigned int *)&v19[4 * v18];
        if (begin) {
          operator delete(begin);
        }
      }
      else
      {
        *v30.__end_ = v10;
        std::string v13 = end + 1;
      }
      v30.__end_ = v13;
      v8 += 24;
    }
    while (v8 != v9);
  }
  uint64_t v22 = quasar::ptt::PronunciationRecognizer::run(a1, &v30, a3, a4);
  if (v30.__begin_)
  {
    v30.__end_ = v30.__begin_;
    operator delete(v30.__begin_);
  }
  return v22;
}

void sub_1B23D1680(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(void *)(v1 - 104) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ptt::PronunciationRecognizer::run(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v39[4] = *(void ***)MEMORY[0x1E4F143B8];
  unint64_t v5 = (uint64_t)(a2[1] - *a2) >> 2;
  if (v5 >= *(int *)(a1 + 1748))
  {
    unint64_t v9 = *(unsigned int *)(a1 + 1752);
    if ((int)v9 >= 1 && v5 > v9)
    {
      if (quasar::gLogLevel >= 4)
      {
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v22 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Input exceeds maximum phone sequence length: ", 45);
        std::string v13 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" > ", 3);
        uint64_t v14 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"; skipping generation.",
          22);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v22);
      }
      return 4;
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      if ((*(uint64_t (**)(void, void *, void, uint64_t *, void))(**(void **)(a1 + 1968) + 16))(*(void *)(a1 + 1968), a2, *(int *)(a1 + 1736), &v19, *(void *)(a1 + 1568)))
      {
        if (v19 == v20)
        {
          uint64_t v8 = 2;
        }
        else
        {
          if (*(void *)(a1 + 2000))
          {
            if (a4) {
              quasar::ptt::ConvertPathsToCompactLattice();
            }
            long long v37 = 0u;
            long long v38 = 0u;
            long long v35 = 0u;
            long long v36 = 0u;
            long long v33 = 0u;
            long long v34 = 0u;
            long long v31 = 0u;
            long long v32 = 0u;
            long long v29 = 0u;
            long long v30 = 0u;
            long long v27 = 0u;
            long long v28 = 0u;
            long long v25 = 0u;
            long long v26 = 0u;
            long long v23 = 0u;
            long long v24 = 0u;
            long long v22 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Unable to run AM fusion decoder without request context.", 56);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v22);
          }
          quasar::ptt::ConvertPathsToResultChoices(a1 + 1808, &v19, a1 + 1796, (uint64_t *)&v22);
          std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)a3);
          *(_OWORD *)a3 = v22;
          *(void *)(a3 + 16) = v23;
          *(void *)&long long v23 = 0;
          long long v22 = 0uLL;
          v39[0] = (void **)&v22;
          std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](v39);
          if (*(unsigned char *)(a1 + 1744))
          {
            int64_t v15 = *(uint64_t **)(a3 + 8);
            unint64_t v16 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v15 - *(void *)a3) >> 3));
            if (v15 == *(uint64_t **)a3) {
              uint64_t v17 = 0;
            }
            else {
              uint64_t v17 = v16;
            }
            std::__introsort<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*,false>(*(uint64_t **)a3, v15, v17, 1);
          }
          uint64_t v8 = 0;
        }
      }
      else
      {
        uint64_t v8 = 1;
      }
      *(void *)&long long v22 = &v19;
      std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
    }
  }
  else
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v22 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Input exceeds minimum phone sequence length: ", 45);
      long long v6 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" < ", 3);
      long long v7 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"; skipping generation.",
        22);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v22);
    }
    return 3;
  }
  return v8;
}

void sub_1B23D1CC8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1B23D1CD8()
{
  if (v1) {
    (*(void (**)())(*(void *)v1 + 8))();
  }
  kaldi::LatticeScoreCache::~LatticeScoreCache((kaldi::LatticeScoreCache *)&v2);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(&v3);
  if (v0) {
    (*(void (**)())(*(void *)v0 + 8))();
  }
  unint64_t v5 = &v4;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  JUMPOUT(0x1B23D1E14);
}

void sub_1B23D1CE4()
{
}

void sub_1B23D1D44(_Unwind_Exception *a1)
{
}

void sub_1B23D1D4C()
{
  std::__function::__value_func<void ()(quasar::NBestToken<1ul> const&,quasar::Token *)>::~__value_func[abi:ne180100]((void *)(v0 - 128));
  JUMPOUT(0x1B23D1D70);
}

void sub_1B23D1E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void quasar::CreateResultChoice<1ul>(uint64_t *a1@<X0>, quasar::QsrTextSymbolTable *a2@<X1>, uint64_t a3@<X2>, kaldi::SilencePhoneSet *a4@<X3>, kaldi::WordBoundaryInfo *a5@<X4>, kaldi::TransitionModel *a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  v87[19] = *MEMORY[0x1E4F143B8];
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<quasar::Token>::reserve(a9, 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3));
  float v79 = 0;
  int v80 = 0;
  int v81 = 0;
  std::string v13 = (char *)operator new(8uLL);
  std::string __p = v13;
  *(void *)std::string v13 = 0;
  uint64_t v77 = v13 + 8;
  char v78 = v13 + 8;
  std::vector<long long>::reserve(&__p, 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3));
  uint64_t v14 = *a1;
  uint64_t v60 = a1[1];
  if (*a1 != v60)
  {
    int32x2_t v15 = vdup_n_s32(a7);
    do
    {
      unint64_t v16 = a9[1];
      if (v16 >= a9[2])
      {
        uint64_t v17 = std::vector<quasar::Token>::__emplace_back_slow_path<>(a9);
        unint64_t v18 = a9;
      }
      else
      {
        quasar::Token::Token((quasar::Token *)a9[1]);
        uint64_t v17 = v16 + 224;
        unint64_t v18 = a9;
        a9[1] = v17;
      }
      v18[1] = v17;
      quasar::QsrTextSymbolTable::Find(a2, &v70);
      uint64_t v19 = (void **)(v17 - 224);
      if (*(char *)(v17 - 201) < 0) {
        operator delete(*v19);
      }
      long long v20 = v70;
      *(void *)(v17 - 208) = *(void *)&v71[0];
      *(_OWORD *)uint64_t v19 = v20;
      *(_DWORD *)(v17 - 200) = *(_DWORD *)v14;
      uint64_t v21 = *(void *)(v14 + 16);
      uint64_t v22 = *(void *)(v14 + 24) - v21;
      uint64_t v23 = v22 >> 2;
      if (v22)
      {
        unint64_t v24 = 0;
        do
        {
          int v25 = *(_DWORD *)(v21 + 4 * v24);
          unsigned int v26 = kaldi::TransitionModel::TransitionIdToPhone(a6, v25);
          BOOL isSilencePhone = kaldi::SilencePhoneSet::isSilencePhone(a4, v26);
          if (!isSilencePhone) {
            LODWORD(v23) = v24;
          }
          if (!isSilencePhone && kaldi::TransitionModel::IsFinal(a6, v25))
          {
            if ((kaldi::WordBoundaryInfo::TypeOfPhone(a5, v26) & 0xFFFFFFFE) == 2)
            {
              uint64_t v28 = ((v80 - (unsigned char *)v79) >> 2) + 1;
              long long v29 = v77;
              if (v77 >= v78)
              {
                long long v31 = (char *)__p;
                uint64_t v32 = (v77 - (unsigned char *)__p) >> 3;
                unint64_t v33 = v32 + 1;
                if ((unint64_t)(v32 + 1) >> 61) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v34 = v78 - (unsigned char *)__p;
                if ((v78 - (unsigned char *)__p) >> 2 > v33) {
                  unint64_t v33 = v34 >> 2;
                }
                if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v35 = v33;
                }
                if (v35)
                {
                  long long v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v78, v35);
                  long long v31 = (char *)__p;
                  long long v29 = v77;
                }
                else
                {
                  long long v36 = 0;
                }
                long long v37 = (uint64_t *)&v36[8 * v32];
                *long long v37 = v28;
                long long v30 = (char *)(v37 + 1);
                while (v29 != v31)
                {
                  uint64_t v38 = *((void *)v29 - 1);
                  v29 -= 8;
                  *--long long v37 = v38;
                }
                std::string __p = v37;
                uint64_t v77 = v30;
                char v78 = &v36[8 * v35];
                if (v31) {
                  operator delete(v31);
                }
              }
              else
              {
                *(void *)uint64_t v77 = v28;
                long long v30 = v29 + 8;
              }
              uint64_t v77 = v30;
            }
            uint64_t v39 = v80;
            if (v80 >= v81)
            {
              uint64_t v41 = (char *)v79;
              uint64_t v42 = (v80 - (unsigned char *)v79) >> 2;
              unint64_t v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v44 = v81 - (unsigned char *)v79;
              if ((v81 - (unsigned char *)v79) >> 1 > v43) {
                unint64_t v43 = v44 >> 1;
              }
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v45 = v43;
              }
              if (v45)
              {
                uint64_t v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v81, v45);
                uint64_t v41 = (char *)v79;
                uint64_t v39 = v80;
              }
              else
              {
                uint64_t v46 = 0;
              }
              unint64_t v47 = (unsigned int *)&v46[4 * v42];
              *unint64_t v47 = v26;
              uint64_t v40 = (char *)(v47 + 1);
              while (v39 != v41)
              {
                unsigned int v48 = *((_DWORD *)v39 - 1);
                v39 -= 4;
                *--unint64_t v47 = v48;
              }
              float v79 = v47;
              int v80 = v40;
              int v81 = &v46[4 * v45];
              if (v41) {
                operator delete(v41);
              }
            }
            else
            {
              *(_DWORD *)int v80 = v26;
              uint64_t v40 = v39 + 4;
            }
            int v80 = v40;
          }
          ++v24;
          uint64_t v21 = *(void *)(v14 + 16);
        }
        while (v24 < (*(void *)(v14 + 24) - v21) >> 2);
      }
      int32x2_t v49 = vmovn_s64(*(int64x2_t *)(v14 + 40));
      *(_DWORD *)(v17 - 188) = a7 + a7 * (*(_OWORD *)(v14 + 40) + v23);
      *(int32x2_t *)(v17 - 196) = vmul_s32(v15, v49);
      std::function<void ()(quasar::NBestToken<1ul> const&,quasar::Token *)>::operator()(a8, v14, v17 - 224);
      v14 += 88;
    }
    while (v14 != v60);
  }
  if (0x6DB6DB6DB6DB6DB7 * ((a9[1] - *a9) >> 5) + 1 == (v77 - (unsigned char *)__p) >> 3)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v70);
    uint64_t v64 = *MEMORY[0x1E4FBA408];
    uint64_t v65 = *(void *)(MEMORY[0x1E4FBA408] + 64);
    uint64_t v68 = *(kaldi::WordBoundaryInfo **)(MEMORY[0x1E4FBA408] + 72);
    if (a9[1] != *a9)
    {
      uint64_t v50 = 0;
      do
      {
        unint64_t v51 = __p;
        unint64_t v52 = *((void *)__p + v50);
        unint64_t v53 = v50 + 1;
        while (v52 < v51[v53])
        {
          (*(void (**)(std::string *__return_ptr, uint64_t, void))(*(void *)a3 + 88))(&v69, a3, *((int *)v79 + v52));
          kaldi::quasar::Lexicon::BasifyPhone(&v69);
          uint64_t v54 = (char *)v71 + *(void *)(*(void *)&v71[0] - 24);
          if ((v54[32] & 5) == 0)
          {
            (*(void (**)(long long *__return_ptr))(**((void **)v54 + 5) + 32))(&v82);
            if (v87[0] >= 1) {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" ", 1);
            }
          }
          if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v55 = &v69;
          }
          else {
            unint64_t v55 = (std::string *)v69.__r_.__value_.__r.__words[0];
          }
          if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v69.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v55, size);
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v69.__r_.__value_.__l.__data_);
          }
          ++v52;
          unint64_t v51 = __p;
        }
        std::stringbuf::str();
        uint64_t v57 = *a9 + 224 * v50;
        uint64_t v58 = v57 + 48;
        if (*(char *)(v57 + 71) < 0) {
          operator delete(*(void **)v58);
        }
        long long v59 = v82;
        *(void *)(v58 + 16) = v83;
        *(_OWORD *)uint64_t v58 = v59;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v82);
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::swap[abi:ne180100]((uint64_t *)&v82, &v70);
        *(void *)&long long v82 = v64;
        *(void *)((char *)&v82 + *(void *)(v64 - 24)) = v65;
        float v83 = v68;
        uint64_t v84 = MEMORY[0x1E4FBA470] + 16;
        if (v86 < 0) {
          operator delete(v85);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1B3EA8520](v87);
        ++v50;
      }
      while (v53 < 0x6DB6DB6DB6DB6DB7 * ((a9[1] - *a9) >> 5));
    }
    *(void *)&long long v70 = v64;
    *(void *)((char *)&v71[-1] + *(void *)(v64 - 24)) = v65;
    *(void *)&v71[0] = v68;
    *((void *)&v71[0] + 1) = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v73) < 0) {
      operator delete(*((void **)&v72 + 1));
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1B3EA8520](v75);
  }
  else if (quasar::gLogLevel >= 2)
  {
    long long v74 = 0u;
    memset(v75, 0, 144);
    long long v72 = 0u;
    long long v73 = 0u;
    memset(v71, 0, sizeof(v71));
    long long v70 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v70);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"Unable to generate phone sequence for result choice due to mismatched alignment.", 80);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v70);
  }
  if (__p)
  {
    uint64_t v77 = (char *)__p;
    operator delete(__p);
  }
  if (v79)
  {
    int v80 = (char *)v79;
    operator delete(v79);
  }
}

void sub_1B23D26D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59,void *a60,uint64_t a61)
{
  if (__p)
  {
    a58 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a60)
  {
    a61 = (uint64_t)a60;
    operator delete(a60);
  }
  a21 = a16;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

void quasar::ptt::PronunciationRecognizer::run(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, long long *a4@<X8>)
{
  long long v9 = 0uLL;
  uint64_t v10 = 0;
  unsigned int v5 = quasar::ptt::PronunciationRecognizer::run(a1, a2, (uint64_t)&v9, a3);
  if (v5)
  {
    if (quasar::gLogLevel >= 4)
    {
      memset(v8, 0, sizeof(v8));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"PTT failed due to result code ", 30);
      long long v7 = quasar::ptt::operator<<(v6, v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)".", 1);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v8);
    }
  }
  else
  {
    *a4 = v9;
    *((void *)a4 + 2) = v10;
    a4 = &v9;
  }
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)&v8[0] = &v9;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)v8);
}

void sub_1B23D28C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = (void **)(v9 - 64);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *quasar::ptt::operator<<(void *a1, unsigned int a2)
{
  uint64_t v3 = quasar::ptt::RecognitionResultCodeToString(a2);
  size_t v4 = strlen(v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
  return a1;
}

void quasar::ptt::PronunciationRecognizer::Params::registerParams(quasar::ptt::PronunciationRecognizer::Params *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "phonetic-confusion-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Path to Phonetic Confusion model component.");
  quasar::SystemConfig::Register<quasar::filesystem::Path>((uint64_t)a2, (const void **)v6, (uint64_t)this, (uint64_t)__p, 1, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "phonetic-syms-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Path to phone symbol table.");
  quasar::SystemConfig::Register<quasar::filesystem::Path>((uint64_t)a2, (const void **)v6, (uint64_t)this + 32, (uint64_t)__p, 1, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "lg-fst-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Path to LG FST.");
  quasar::SystemConfig::Register<quasar::filesystem::Path>((uint64_t)a2, (const void **)v6, (uint64_t)this + 64, (uint64_t)__p, 1, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "inv-g-fst-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Path to G negated FST.");
  quasar::SystemConfig::Register<quasar::filesystem::Path>((uint64_t)a2, (const void **)v6, (uint64_t)this + 96, (uint64_t)__p, 1, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "big-g-fst-file-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "Path to Big G FST.");
  quasar::SystemConfig::Register<quasar::filesystem::Path>((uint64_t)a2, (const void **)v6, (uint64_t)this + 128, (uint64_t)__p, 1, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "nbest-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum size of output n-best list.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 160, (uint64_t)__p, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "phonetic-confusion-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scale factor for phonetic confusion component log-proabilities.");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 164, (uint64_t)__p, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "min-phone-sequence-length");
  std::string::basic_string[abi:ne180100]<0>(__p, "Minimum phone sequence length for which to generate alternatives (defaults to 1).");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 172, (uint64_t)__p, 0, 273, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-phone-sequence-length");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum phone sequence length for which to generate alternatives (ignored if zero or lower).");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 176, (uint64_t)__p, 0, 273, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B23D2D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ptt::PronunciationRecognizer::ConfidenceParams::registerParams(quasar::ptt::PronunciationRecognizer::ConfidenceParams *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "fixed-value");
  std::string::basic_string[abi:ne180100]<0>(__p, "Fixed value to use as a replacement for confidence.");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this, (uint64_t)__p, 1, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B23D2E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

quasar::ptt::PronunciationRecognizer::Params *quasar::ptt::PronunciationRecognizer::Params::Params(quasar::ptt::PronunciationRecognizer::Params *this)
{
  uint64_t v2 = quasar::filesystem::Path::Path(this);
  quasar::filesystem::Path::Path(v2 + 4);
  quasar::filesystem::Path::Path((void *)this + 8);
  quasar::filesystem::Path::Path((void *)this + 12);
  quasar::filesystem::Path::Path((void *)this + 16);
  *((void *)this + 20) = 0x3F8000000000000ALL;
  *((unsigned char *)this + 168) = 1;
  *(void *)((char *)this + 172) = 0xFFFFFFFF00000001;
  *((unsigned char *)this + 180) = 0;
  return this;
}

void sub_1B23D2EEC(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 96) = &unk_1F0A51998;
  if (*(char *)(v1 + 127) < 0) {
    operator delete(*(void **)(v1 + 104));
  }
  *(void *)(v1 + 64) = &unk_1F0A51998;
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*(void **)(v1 + 72));
  }
  *(void *)(v1 + 32) = &unk_1F0A51998;
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*(void **)(v1 + 40));
  }
  *(void *)uint64_t v1 = &unk_1F0A51998;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::Register<quasar::filesystem::Path>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  quasar::SystemConfig::Register(a1, a2, a3);
  quasar::SystemConfig::Version::Version(&v20, a6, a7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  uint64_t v21 = __p;
  int32x2_t v15 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1464), (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v21);
  v15[7] = v20;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  quasar::SystemConfig::Version::Version(&v20, a8, a9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  uint64_t v21 = __p;
  unint64_t v16 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1488), (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v21);
  v16[7] = v20;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!a5) {
      return;
    }
  }
  else if (!a5)
  {
    return;
  }
  __p[0] = (void *)(a1 + 816);
  uint64_t v17 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1512), (const void **)(a1 + 816), (uint64_t)&std::piecewise_construct, (long long **)__p)+ 7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v17, (const void **)__p, (uint64_t)__p);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B23D3144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *quasar::ptt::RecognitionResultCodeToString(unsigned int a1)
{
  if (a1 >= 7)
  {
    memset(v2, 0, sizeof(v2));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Unknown failure reason ", 23);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v2);
  }
  return (&off_1E6000368)[a1];
}

uint64_t std::function<void ()(quasar::NBestToken<1ul> const&,quasar::Token *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, a2, &v5);
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x124924924924924) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v2) >> 5);
  if (2 * v6 > v4) {
    unint64_t v4 = 2 * v6;
  }
  if (v6 >= 0x92492492492492) {
    unint64_t v7 = 0x124924924924924;
  }
  else {
    unint64_t v7 = v4;
  }
  int32x2_t v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>(v5, v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unsigned int v11 = v8;
  long long v12 = (quasar::Token *)&v8[224 * v3];
  uint64_t v14 = &v8[224 * v7];
  quasar::Token::Token(v12);
  std::string v13 = (char *)v12 + 224;
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v11);
  return v9;
}

void sub_1B23D3358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_0,std::allocator<quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_0>,void ()(quasar::NBestToken<1ul> const&,quasar::Token*)>::~__func()
{
}

void *std::__function::__func<quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_0,std::allocator<quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_0>,void ()(quasar::NBestToken<1ul> const&,quasar::Token*)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F0A1D0E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_0,std::allocator<quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_0>,void ()(quasar::NBestToken<1ul> const&,quasar::Token*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A1D0E8;
  a2[1] = v2;
  return result;
}

float std::__function::__func<quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_0,std::allocator<quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_0>,void ()(quasar::NBestToken<1ul> const&,quasar::Token*)>::operator()(uint64_t a1, int32x2_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *(int32x2_t *)(v3 + 204) = vrev64_s32(a2[7]);
  *(_DWORD *)(v3 + 216) = a2[1].i32[1];
  unint64_t v4 = *(float **)(a1 + 8);
  float result = *v4;
  *(float *)(v3 + 40) = *v4;
  return result;
}

uint64_t std::__function::__func<quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_0,std::allocator<quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_0>,void ()(quasar::NBestToken<1ul> const&,quasar::Token*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_0,std::allocator<quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_0>,void ()(quasar::NBestToken<1ul> const&,quasar::Token*)>::target_type()
{
}

void *std::__function::__value_func<void ()(quasar::NBestToken<1ul> const&,quasar::Token *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v9 = a2 - 3;
    long long v72 = a2 - 6;
    long long v73 = a2;
    uint64_t v10 = a2 - 9;
    unsigned int v11 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          long long v12 = v73;
          uint64_t v13 = (char *)v73 - (char *)v11;
          uint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (v73 - v11);
          if (!(!v5 & v4))
          {
            switch(v14)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(v9, a1))
                {
                  uint64_t v36 = *a1;
                  *a1 = *(v73 - 3);
                  *(v73 - 3) = v36;
                  uint64_t v37 = a1[1];
                  a1[1] = *(v73 - 2);
                  *(v73 - 2) = v37;
                  uint64_t v38 = a1[2];
                  a1[2] = *(v73 - 1);
                  *(v73 - 1) = v38;
                }
                break;
              case 3:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(a1, a1 + 3, v9);
                break;
              case 4:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(a1, a1 + 3, a1 + 6, v9);
                break;
              case 5:
                std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*,0>(a1, a1 + 3, a1 + 6, a1 + 9, v9);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 575)
          {
            if (a4)
            {
              if (a1 != v73)
              {
                uint64_t v39 = a1 + 3;
                if (a1 + 3 != v73)
                {
                  uint64_t v40 = 0;
                  uint64_t v41 = a1;
                  do
                  {
                    uint64_t v42 = v39;
                    if (quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(v39, v41))
                    {
                      long long v77 = *(_OWORD *)v42;
                      uint64_t v78 = v41[5];
                      *uint64_t v42 = 0;
                      v42[1] = 0;
                      v42[2] = 0;
                      uint64_t v43 = v40;
                      while (1)
                      {
                        uint64_t v44 = (char *)a1 + v43;
                        std::vector<quasar::Token>::__vdeallocate((void **)((char *)a1 + v43 + 24));
                        *(_OWORD *)(v44 + 24) = *(_OWORD *)v44;
                        *((void *)v44 + 5) = *((void *)v44 + 2);
                        *((void *)v44 + 1) = 0;
                        *((void *)v44 + 2) = 0;
                        *(void *)uint64_t v44 = 0;
                        if (!v43) {
                          break;
                        }
                        v43 -= 24;
                        if (!quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()((uint64_t *)&v77, (uint64_t *)v44 - 3))
                        {
                          uint64_t v45 = (uint64_t)a1 + v43 + 24;
                          goto LABEL_67;
                        }
                      }
                      uint64_t v45 = (uint64_t)a1;
LABEL_67:
                      std::vector<quasar::Token>::__vdeallocate((void **)v45);
                      *(_OWORD *)uint64_t v45 = v77;
                      *(void *)(v45 + 16) = v78;
                      long long v77 = 0uLL;
                      uint64_t v78 = 0;
                      *(void *)&long long v74 = &v77;
                      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
                    }
                    uint64_t v39 = v42 + 3;
                    v40 += 24;
                    uint64_t v41 = v42;
                  }
                  while (v42 + 3 != v73);
                }
              }
            }
            else if (a1 != v73)
            {
              int v67 = a1 + 3;
              if (a1 + 3 != v73)
              {
                uint64_t v68 = a1 + 5;
                do
                {
                  std::string v69 = v67;
                  if (quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(v67, a1))
                  {
                    long long v77 = *(_OWORD *)v69;
                    uint64_t v78 = a1[5];
                    *std::string v69 = 0;
                    v69[1] = 0;
                    v69[2] = 0;
                    long long v70 = (void **)v68;
                    do
                    {
                      std::vector<quasar::Token>::__vdeallocate(v70 - 2);
                      *((_OWORD *)v70 - 1) = *(_OWORD *)(v70 - 5);
                      *long long v70 = *(v70 - 3);
                      *(v70 - 4) = 0;
                      *(v70 - 3) = 0;
                      *(v70 - 5) = 0;
                      BOOL v71 = quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()((uint64_t *)&v77, (uint64_t *)v70 - 8);
                      v70 -= 3;
                    }
                    while (v71);
                    std::vector<quasar::Token>::__vdeallocate(v70 - 2);
                    *((_OWORD *)v70 - 1) = v77;
                    *long long v70 = (void *)v78;
                    long long v77 = 0uLL;
                    uint64_t v78 = 0;
                    *(void *)&long long v74 = &v77;
                    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
                  }
                  int v67 = v69 + 3;
                  v68 += 3;
                  a1 = v69;
                }
                while (v69 + 3 != v73);
              }
            }
            return;
          }
          if (!a3)
          {
            if (a1 != v73)
            {
              int64_t v46 = (unint64_t)(v14 - 2) >> 1;
              int64_t v47 = v46;
              do
              {
                int64_t v48 = v47;
                if (v46 >= v47)
                {
                  uint64_t v49 = (2 * v47) | 1;
                  uint64_t v50 = &a1[3 * v49];
                  if (2 * v47 + 2 < v14
                    && quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(&a1[3 * v49], v50 + 3))
                  {
                    v50 += 3;
                    uint64_t v49 = 2 * v48 + 2;
                  }
                  unint64_t v51 = &a1[3 * v48];
                  if (!quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(v50, v51))
                  {
                    long long v77 = *(_OWORD *)v51;
                    uint64_t v78 = a1[3 * v48 + 2];
                    uint64_t *v51 = 0;
                    v51[1] = 0;
                    v51[2] = 0;
                    do
                    {
                      unint64_t v52 = v50;
                      std::vector<quasar::Token>::__vdeallocate((void **)v51);
                      *(_OWORD *)unint64_t v51 = *(_OWORD *)v50;
                      v51[2] = v50[2];
                      *uint64_t v50 = 0;
                      v50[1] = 0;
                      v50[2] = 0;
                      if (v46 < v49) {
                        break;
                      }
                      uint64_t v53 = (2 * v49) | 1;
                      uint64_t v50 = &a1[3 * v53];
                      uint64_t v49 = 2 * v49 + 2;
                      if (v49 < v14)
                      {
                        if (quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(&a1[3 * v53], v50 + 3))
                        {
                          v50 += 3;
                        }
                        else
                        {
                          uint64_t v49 = v53;
                        }
                      }
                      else
                      {
                        uint64_t v49 = v53;
                      }
                      unint64_t v51 = v52;
                    }
                    while (!quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(v50, (uint64_t *)&v77));
                    std::vector<quasar::Token>::__vdeallocate((void **)v52);
                    *(_OWORD *)unint64_t v52 = v77;
                    v52[2] = v78;
                    long long v77 = 0uLL;
                    uint64_t v78 = 0;
                    *(void *)&long long v74 = &v77;
                    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
                  }
                }
                int64_t v47 = v48 - 1;
              }
              while (v48);
              int64_t v54 = v13 / 0x18uLL;
              unint64_t v55 = v73;
              do
              {
                uint64_t v56 = 0;
                uint64_t v57 = v55;
                long long v74 = *(_OWORD *)a1;
                uint64_t v75 = a1[2];
                *a1 = 0;
                a1[1] = 0;
                a1[2] = 0;
                uint64_t v58 = (uint64_t)a1;
                do
                {
                  uint64_t v59 = v58 + 24 * v56 + 24;
                  uint64_t v60 = (2 * v56) | 1;
                  uint64_t v61 = 2 * v56 + 2;
                  if (v61 < v54
                    && quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()((uint64_t *)(v58 + 24 * v56 + 24), (uint64_t *)(v58 + 24 * v56 + 48)))
                  {
                    v59 += 24;
                    uint64_t v60 = v61;
                  }
                  std::vector<quasar::Token>::__vdeallocate((void **)v58);
                  *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
                  *(void *)(v58 + 16) = *(void *)(v59 + 16);
                  *(void *)uint64_t v59 = 0;
                  *(void *)(v59 + 8) = 0;
                  *(void *)(v59 + 16) = 0;
                  uint64_t v58 = v59;
                  uint64_t v56 = v60;
                }
                while (v60 <= (uint64_t)((unint64_t)(v54 - 2) >> 1));
                unint64_t v55 = v57 - 3;
                std::vector<quasar::Token>::__vdeallocate((void **)v59);
                if ((uint64_t *)v59 == v57 - 3)
                {
                  *(_OWORD *)uint64_t v59 = v74;
                  *(void *)(v59 + 16) = v75;
                  long long v74 = 0uLL;
                  uint64_t v75 = 0;
                }
                else
                {
                  *(_OWORD *)uint64_t v59 = *(_OWORD *)(v57 - 3);
                  *(void *)(v59 + 16) = *(v57 - 1);
                  *unint64_t v55 = 0;
                  *(v57 - 2) = 0;
                  *(v57 - 1) = 0;
                  std::vector<quasar::Token>::__vdeallocate((void **)v57 - 3);
                  *(_OWORD *)(v57 - 3) = v74;
                  *(v57 - 1) = v75;
                  long long v74 = 0uLL;
                  uint64_t v75 = 0;
                  uint64_t v62 = v59 - (void)a1 + 24;
                  if (v62 >= 25)
                  {
                    unint64_t v63 = (v62 / 0x18uLL - 2) >> 1;
                    uint64_t v64 = &a1[3 * v63];
                    if (quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(v64, (uint64_t *)v59))
                    {
                      long long v77 = *(_OWORD *)v59;
                      uint64_t v78 = *(void *)(v59 + 16);
                      *(void *)uint64_t v59 = 0;
                      *(void *)(v59 + 8) = 0;
                      *(void *)(v59 + 16) = 0;
                      do
                      {
                        uint64_t v65 = v64;
                        std::vector<quasar::Token>::__vdeallocate((void **)v59);
                        *(_OWORD *)uint64_t v59 = *(_OWORD *)v64;
                        *(void *)(v59 + 16) = v64[2];
                        *uint64_t v64 = 0;
                        v64[1] = 0;
                        v64[2] = 0;
                        if (!v63) {
                          break;
                        }
                        unint64_t v63 = (v63 - 1) >> 1;
                        uint64_t v64 = &a1[3 * v63];
                        uint64_t v59 = (uint64_t)v65;
                      }
                      while (quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(v64, (uint64_t *)&v77));
                      std::vector<quasar::Token>::__vdeallocate((void **)v65);
                      *(_OWORD *)uint64_t v65 = v77;
                      v65[2] = v78;
                      long long v77 = 0uLL;
                      uint64_t v78 = 0;
                      uint64_t v76 = (void **)&v77;
                      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v76);
                    }
                  }
                }
                *(void *)&long long v77 = &v74;
                std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
              }
              while (v54-- > 2);
            }
            return;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          unint64_t v16 = &a1[3 * ((unint64_t)v14 >> 1)];
          if ((unint64_t)v13 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(v16, a1, v9);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(a1, v16, v9);
            uint64_t v17 = 3 * v15;
            unint64_t v18 = &a1[v17];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(a1 + 3, v18 - 3, v72);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(a1 + 6, &a1[v17 + 3], v10);
            long long v12 = v73;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(v18 - 3, v16, &a1[v17 + 3]);
            long long v19 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(_OWORD *)unint64_t v16 = v19;
            uint64_t v20 = a1[2];
            a1[2] = v18[2];
            v18[2] = v20;
          }
          --a3;
          if ((a4 & 1) != 0
            || quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(a1 - 3, a1))
          {
            break;
          }
          long long v77 = *(_OWORD *)a1;
          uint64_t v78 = a1[2];
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          if (quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()((uint64_t *)&v77, v9))
          {
            unsigned int v11 = a1;
            do
              v11 += 3;
            while (!quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()((uint64_t *)&v77, v11));
          }
          else
          {
            long long v30 = a1 + 3;
            do
            {
              unsigned int v11 = v30;
              if (v30 >= v12) {
                break;
              }
              BOOL v31 = quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()((uint64_t *)&v77, v30);
              long long v30 = v11 + 3;
            }
            while (!v31);
          }
          uint64_t v32 = v12;
          if (v11 < v12)
          {
            uint64_t v32 = v12;
            do
              v32 -= 3;
            while (quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()((uint64_t *)&v77, v32));
          }
          while (v11 < v32)
          {
            uint64_t v33 = *v11;
            uint64_t *v11 = *v32;
            uint64_t *v32 = v33;
            uint64_t v34 = v11[1];
            v11[1] = v32[1];
            v32[1] = v34;
            uint64_t v35 = v11[2];
            double v11[2] = v32[2];
            v32[2] = v35;
            do
              v11 += 3;
            while (!quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()((uint64_t *)&v77, v11));
            do
              v32 -= 3;
            while (quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()((uint64_t *)&v77, v32));
          }
          if (v11 - 3 != a1)
          {
            std::vector<quasar::Token>::__vdeallocate((void **)a1);
            *(_OWORD *)a1 = *(_OWORD *)(v11 - 3);
            a1[2] = *(v11 - 1);
            *(v11 - 3) = 0;
            *(v11 - 2) = 0;
            *(v11 - 1) = 0;
          }
          std::vector<quasar::Token>::__vdeallocate((void **)v11 - 3);
          *(_OWORD *)(v11 - 3) = v77;
          *(v11 - 1) = v78;
          long long v77 = 0uLL;
          uint64_t v78 = 0;
          *(void *)&long long v74 = &v77;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          a4 = 0;
        }
        uint64_t v21 = 0;
        long long v77 = *(_OWORD *)a1;
        uint64_t v78 = a1[2];
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
        do
        {
          BOOL v22 = quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(&a1[v21 + 3], (uint64_t *)&v77);
          v21 += 3;
        }
        while (v22);
        uint64_t v23 = &a1[v21];
        unint64_t v24 = v12;
        if (v21 == 3)
        {
          unint64_t v24 = v12;
          do
          {
            if (v23 >= v24) {
              break;
            }
            v24 -= 3;
          }
          while (!quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(v24, (uint64_t *)&v77));
        }
        else
        {
          do
            v24 -= 3;
          while (!quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(v24, (uint64_t *)&v77));
        }
        unsigned int v11 = &a1[v21];
        if (v23 < v24)
        {
          int v25 = v24;
          do
          {
            uint64_t v26 = *v11;
            uint64_t *v11 = *v25;
            *int v25 = v26;
            uint64_t v27 = v11[1];
            v11[1] = v25[1];
            v25[1] = v27;
            uint64_t v28 = v11[2];
            double v11[2] = v25[2];
            v25[2] = v28;
            do
              v11 += 3;
            while (quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(v11, (uint64_t *)&v77));
            do
              v25 -= 3;
            while (!quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(v25, (uint64_t *)&v77));
          }
          while (v11 < v25);
        }
        if (v11 - 3 != a1)
        {
          std::vector<quasar::Token>::__vdeallocate((void **)a1);
          *(_OWORD *)a1 = *(_OWORD *)(v11 - 3);
          a1[2] = *(v11 - 1);
          *(v11 - 3) = 0;
          *(v11 - 2) = 0;
          *(v11 - 1) = 0;
        }
        std::vector<quasar::Token>::__vdeallocate((void **)v11 - 3);
        *(_OWORD *)(v11 - 3) = v77;
        *(v11 - 1) = v78;
        long long v77 = 0uLL;
        uint64_t v78 = 0;
        *(void *)&long long v74 = &v77;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
        if (v23 >= v24) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*,false>(a1, v11 - 3, a3, a4 & 1);
        a4 = 0;
      }
      char v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(a1, v11 - 3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(v11, v73))break; {
      if ((v29 & 1) == 0)
      }
        goto LABEL_30;
    }
    a2 = v11 - 3;
    if ((v29 & 1) == 0) {
      continue;
    }
    break;
  }
}

void sub_1B23D3ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  a11 = (void **)&a15;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

BOOL quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  v12[0] = &unk_1F0A64920;
  uint64_t v13 = v12;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  float v5 = 0.0;
  float v6 = 0.0;
  if (*a1 != v4)
  {
    unint64_t v7 = v12;
    while (1)
    {
      float v6 = v6 + (*(float (**)(void *, uint64_t))(*v7 + 48))(v7, v3);
      v3 += 224;
      if (v3 == v4) {
        break;
      }
      unint64_t v7 = v13;
      if (!v13) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
  }
  std::__function::__value_func<float ()(quasar::Token const&)>::~__value_func[abi:ne180100](v12);
  v12[0] = &unk_1F0A64920;
  uint64_t v13 = v12;
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  if (v9 != v8)
  {
    uint64_t v10 = v12;
    float v5 = 0.0;
    while (1)
    {
      float v5 = v5 + (*(float (**)(void *, uint64_t))(*v10 + 48))(v10, v9);
      v9 += 224;
      if (v9 == v8) {
        break;
      }
      uint64_t v10 = v13;
      if (!v13) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
  }
  std::__function::__value_func<float ()(quasar::Token const&)>::~__value_func[abi:ne180100](v12);
  return v6 < v5;
}

void sub_1B23D40EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<float ()(quasar::Token const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(a1, a2, a3, a4);
  BOOL result = quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(a5, a4);
  if (result)
  {
    uint64_t v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    uint64_t v12 = a4[1];
    a4[1] = a5[1];
    a5[1] = v12;
    uint64_t v13 = a4[2];
    a4[2] = a5[2];
    a5[2] = v13;
    BOOL result = quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(a4, a3);
    if (result)
    {
      uint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t v15 = a3[1];
      a3[1] = a4[1];
      a4[1] = v15;
      uint64_t v16 = a3[2];
      a3[2] = a4[2];
      a4[2] = v16;
      BOOL result = quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(a3, a2);
      if (result)
      {
        uint64_t v17 = *a2;
        *a2 = *a3;
        *a3 = v17;
        uint64_t v18 = a2[1];
        a2[1] = a3[1];
        a3[1] = v18;
        uint64_t v19 = a2[2];
        a2[2] = a3[2];
        a3[2] = v19;
        BOOL result = quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(a2, a1);
        if (result)
        {
          uint64_t v20 = *a1;
          *a1 = *a2;
          *a2 = v20;
          uint64_t v21 = a1[1];
          a1[1] = a2[1];
          a2[1] = v21;
          uint64_t v22 = a1[2];
          a1[2] = a2[2];
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  BOOL v6 = quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(a2, a1);
  BOOL result = quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(a3, a2);
  if (v6)
  {
    uint64_t v9 = a1 + 2;
    uint64_t v8 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v8;
      uint64_t v10 = a1[1];
      a1[1] = a3[1];
    }
    else
    {
      *a1 = *a2;
      *a2 = v8;
      uint64_t v17 = a1[1];
      a1[1] = a2[1];
      a2[1] = v17;
      uint64_t v9 = a2 + 2;
      uint64_t v18 = a1[2];
      a1[2] = a2[2];
      a2[2] = v18;
      BOOL result = quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(a3, a2);
      if (!result) {
        return result;
      }
      uint64_t v19 = *a2;
      *a2 = *a3;
      *a3 = v19;
      uint64_t v10 = a2[1];
      a2[1] = a3[1];
    }
    a3[1] = v10;
    uint64_t v14 = a3 + 2;
    goto LABEL_10;
  }
  if (result)
  {
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    uint64_t v12 = a2[1];
    a2[1] = a3[1];
    a3[1] = v12;
    uint64_t v14 = a2 + 2;
    uint64_t v13 = a2[2];
    a2[2] = a3[2];
    a3[2] = v13;
    BOOL result = quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(a2, a1);
    if (result)
    {
      uint64_t v15 = *a1;
      *a1 = *a2;
      *a2 = v15;
      uint64_t v16 = a1[1];
      a1[1] = a2[1];
      a2[1] = v16;
      uint64_t v9 = a1 + 2;
LABEL_10:
      uint64_t v20 = *v9;
      *uint64_t v9 = *v14;
      *uint64_t v14 = v20;
    }
  }
  return result;
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(uint64_t *a1, uint64_t *a2)
{
  BOOL v4 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      if (quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(a2 - 3, a1))
      {
        uint64_t v5 = *a1;
        *a1 = *(a2 - 3);
        *(a2 - 3) = v5;
        uint64_t v6 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v6;
        uint64_t v7 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return v4;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(a1, a1 + 3, a2 - 3);
      return v4;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(a1, a1 + 3, a1 + 6, a2 - 3);
      return v4;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*,0>(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return v4;
    default:
      uint64_t v8 = a1 + 6;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(a1, a1 + 3, a1 + 6);
      uint64_t v9 = a1 + 9;
      if (a1 + 9 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (!quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(v9, v8))
  {
LABEL_14:
    uint64_t v8 = v9;
    v10 += 24;
    v9 += 3;
    if (v9 == a2) {
      return 1;
    }
  }
  long long v16 = *(_OWORD *)v9;
  uint64_t v17 = v9[2];
  v9[1] = 0;
  uint64_t v9[2] = 0;
  *uint64_t v9 = 0;
  uint64_t v12 = v10;
  while (1)
  {
    uint64_t v13 = (char *)a1 + v12;
    std::vector<quasar::Token>::__vdeallocate((void **)((char *)a1 + v12 + 72));
    *(_OWORD *)(v13 + 72) = *((_OWORD *)v13 + 3);
    *((void *)v13 + 11) = *((void *)v13 + 8);
    *((void *)v13 + 7) = 0;
    *((void *)v13 + 8) = 0;
    *((void *)v13 + 6) = 0;
    if (v12 == -48) {
      break;
    }
    v12 -= 24;
    if (!quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()((uint64_t *)&v16, (uint64_t *)v13 + 3))
    {
      uint64_t v14 = (uint64_t)a1 + v12 + 72;
      goto LABEL_12;
    }
  }
  uint64_t v14 = (uint64_t)a1;
LABEL_12:
  std::vector<quasar::Token>::__vdeallocate((void **)v14);
  *(_OWORD *)uint64_t v14 = v16;
  *(void *)(v14 + 16) = v17;
  uint64_t v17 = 0;
  long long v16 = 0uLL;
  if (++v11 != 8)
  {
    uint64_t v18 = (void **)&v16;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v18);
    goto LABEL_14;
  }
  BOOL v4 = v9 + 3 == a2;
  uint64_t v18 = (void **)&v16;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v18);
  return v4;
}

void sub_1B23D45E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::ptt::GetResultChoiceCost(std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1},std::allocator<quasar::ptt::GetResultChoiceCost(std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1}>,float ()(quasar::Token const&)>::~__func()
{
}

void *std::__function::__func<quasar::ptt::GetResultChoiceCost(std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1},std::allocator<quasar::ptt::GetResultChoiceCost(std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1}>,float ()(quasar::Token const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F0A64920;
  return result;
}

void std::__function::__func<quasar::ptt::GetResultChoiceCost(std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1},std::allocator<quasar::ptt::GetResultChoiceCost(std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1}>,float ()(quasar::Token const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A64920;
}

float std::__function::__func<quasar::ptt::GetResultChoiceCost(std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1},std::allocator<quasar::ptt::GetResultChoiceCost(std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1}>,float ()(quasar::Token const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 208) + *(float *)(a2 + 204);
}

uint64_t std::__function::__func<quasar::ptt::GetResultChoiceCost(std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1},std::allocator<quasar::ptt::GetResultChoiceCost(std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1}>,float ()(quasar::Token const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::ptt::GetResultChoiceCost(std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1},std::allocator<quasar::ptt::GetResultChoiceCost(std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1}>,float ()(quasar::Token const&)>::target_type()
{
}

BOOL std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(a1, a2, a3);
  BOOL result = quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(a4, a3);
  if (result)
  {
    uint64_t v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    uint64_t v11 = a3[2];
    a3[2] = a4[2];
    a4[2] = v11;
    BOOL result = quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(a3, a2);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t v13 = a2[1];
      a2[1] = a3[1];
      a3[1] = v13;
      uint64_t v14 = a2[2];
      a2[2] = a3[2];
      a3[2] = v14;
      BOOL result = quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1::operator()(a2, a1);
      if (result)
      {
        uint64_t v15 = *a1;
        *a1 = *a2;
        *a2 = v15;
        uint64_t v16 = a1[1];
        a1[1] = a2[1];
        a2[1] = v16;
        uint64_t v17 = a1[2];
        a1[2] = a2[2];
        a2[2] = v17;
      }
    }
  }
  return result;
}

void **std::unique_ptr<quasar::ptt::UnigramPhoneticConfusion>::reset[abi:ne180100](void **result, void *a2)
{
  uint64_t v2 = *result;
  *BOOL result = a2;
  if (v2)
  {
    void *v2 = &unk_1F0A58D20;
    kaldi::Matrix<float>::~Matrix((uint64_t)(v2 + 1));
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void sub_1B23D4920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1B23D4A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1B23D4B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1B23D4C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::string __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<quasar::PhonesetMapping,std::allocator<quasar::PhonesetMapping>,std::string,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  BOOL v4 = (std::string *)operator new(0x30uLL);
  BOOL result = std::__shared_ptr_emplace<quasar::PhonesetMapping>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<quasar::PhonesetMapping>,0>(v4, a1);
  *a2 = v4 + 1;
  a2[1] = v4;
  return result;
}

void sub_1B23D4D30(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::PhonesetMapping>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<quasar::PhonesetMapping>,0>(std::string *a1, long long *a2)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A60020;
  quasar::PhonesetMapping::PhonesetMapping(a1 + 1, a2);
  return a1;
}

void sub_1B23D4D8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::PhonesetMapping>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60020;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::PhonesetMapping>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60020;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::PhonesetMapping>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

void quasar::PhoneticMatchAlignmentSpan::toPTree(quasar **this@<X0>, int a2@<W1>, quasar::PTree *a3@<X8>)
{
  quasar::PTree::PTree(a3);
  if (a2)
  {
    quasar::PTree::PTree((quasar::PTree *)v11);
    quasar::phraseToPtree(this, (quasar::PTree *)v11);
    std::string::basic_string[abi:ne180100]<0>(__p, "input");
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)__p, (uint64_t)v11, 1);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    quasar::PTree::PTree((quasar::PTree *)__p);
    quasar::phraseToPtree(this + 3, (quasar::PTree *)__p);
    std::string::basic_string[abi:ne180100]<0>(v8, "rawOutput");
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)v8, (uint64_t)__p, 1);
    if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8[0].__r_.__value_.__l.__data_);
    }
    quasar::PTree::PTree((quasar::PTree *)v8);
    quasar::phraseToPtree(this + 6, (quasar::PTree *)v8);
    std::string::basic_string[abi:ne180100]<0>(v6, "output");
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)v6, (uint64_t)v8, 1);
    if (v7 < 0) {
      operator delete(v6[0]);
    }
    quasar::PTree::~PTree((quasar::PTree *)v8);
    quasar::PTree::~PTree((quasar::PTree *)__p);
    quasar::PTree::~PTree((quasar::PTree *)v11);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "input");
    quasar::tokens2Str((uint64_t *)this, v8);
    quasar::PTree::PTree(v11, v8);
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)__p, (uint64_t)v11, 1);
    quasar::PTree::~PTree((quasar::PTree *)v11);
    if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8[0].__r_.__value_.__l.__data_);
    }
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "rawOutput");
    quasar::tokens2Str((uint64_t *)this + 3, v8);
    quasar::PTree::PTree(v11, v8);
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)__p, (uint64_t)v11, 1);
    quasar::PTree::~PTree((quasar::PTree *)v11);
    if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8[0].__r_.__value_.__l.__data_);
    }
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "output");
    quasar::tokens2Str((uint64_t *)this + 6, v8);
    quasar::PTree::PTree(v11, v8);
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)__p, (uint64_t)v11, 1);
    quasar::PTree::~PTree((quasar::PTree *)v11);
    if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8[0].__r_.__value_.__l.__data_);
    }
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1B23D5090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  quasar::PTree::~PTree((quasar::PTree *)(v33 - 96));
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  quasar::PTree::~PTree(v32);
  _Unwind_Resume(a1);
}

void quasar::PhoneticMatchAlignmentSpan::clear(quasar::PhoneticMatchAlignmentSpan *this)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = *(void *)this;
  while (v2 != v3)
    quasar::Token::~Token((void **)(v2 - 224));
  *((void *)this + 1) = v3;
  uint64_t v5 = *((void *)this + 3);
  for (uint64_t i = *((void *)this + 4); i != v5; quasar::Token::~Token((void **)(i - 224)))
    ;
  *((void *)this + 4) = v5;
  uint64_t v7 = *((void *)this + 6);
  for (uint64_t j = *((void *)this + 7); j != v7; quasar::Token::~Token((void **)(j - 224)))
    ;
  *((void *)this + 7) = v7;
}

BOOL quasar::PhoneticMatchAlignmentSpan::empty(quasar::PhoneticMatchAlignmentSpan *this)
{
  return *(void *)this == *((void *)this + 1)
      && *((void *)this + 3) == *((void *)this + 4)
      && *((void *)this + 6) == *((void *)this + 7);
}

uint64_t quasar::PhoneticMatchAlignmentSpan::numWildcardWordMatches(void *a1, unsigned __int8 **a2)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  if (v2 == v3) {
    return 0;
  }
  char v5 = *((unsigned char *)a2 + 23);
  if (v5 >= 0) {
    uint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v6 = a2[1];
  }
  if (v5 >= 0) {
    uint64_t v7 = (unsigned __int8 *)a2;
  }
  else {
    uint64_t v7 = *a2;
  }
  while (1)
  {
    uint64_t v8 = *(unsigned __int8 *)(v2 + 71);
    if (*(char *)(v2 + 71) < 0)
    {
      if (!*(void *)(v2 + 56)) {
        goto LABEL_23;
      }
    }
    else if (!*(unsigned char *)(v2 + 71))
    {
      goto LABEL_23;
    }
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = (unsigned __int8 *)*(unsigned __int8 *)(v2 + 71);
    }
    else {
      uint64_t v9 = *(unsigned __int8 **)(v2 + 56);
    }
    if (v9 != v6) {
      goto LABEL_23;
    }
    if ((v8 & 0x80) != 0) {
      break;
    }
    if (!*(unsigned char *)(v2 + 71)) {
      return -1227133513 * ((a1[1] - *a1) >> 5);
    }
    uint64_t v10 = 0;
    while (*(unsigned __int8 *)(v2 + v10 + 48) == v7[v10])
    {
      if (v8 == ++v10) {
        return -1227133513 * ((a1[1] - *a1) >> 5);
      }
    }
LABEL_23:
    v2 += 224;
    if (v2 == v3) {
      return 0;
    }
  }
  if (memcmp(*(const void **)(v2 + 48), v7, *(void *)(v2 + 56))) {
    goto LABEL_23;
  }
  return -1227133513 * ((a1[1] - *a1) >> 5);
}

uint64_t quasar::isBadLmeReplacement(uint64_t *a1, uint64_t *a2, void *a3)
{
  quasar::tokens2Str(a1, &v16);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    uint64_t v7 = 0;
    do
    {
      if (*(char *)(v5 + 71) < 0)
      {
        if (*(void *)(v5 + 56))
        {
LABEL_7:
          if ((unint64_t)v7 >= v15)
          {
            uint64_t v7 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v13, (long long *)v5);
          }
          else
          {
            if (*(char *)(v5 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v5, *(void *)(v5 + 8));
            }
            else
            {
              long long v8 = *(_OWORD *)v5;
              v7->__r_.__value_.__r.__words[2] = *(void *)(v5 + 16);
              *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
            }
            ++v7;
          }
          uint64_t v14 = v7;
        }
      }
      else if (*(unsigned char *)(v5 + 71))
      {
        goto LABEL_7;
      }
      v5 += 224;
    }
    while (v5 != v6);
  }
  __p[0] = " ";
  __p[1] = (void *)1;
  quasar::join<std::vector<std::string>>(&v13, (uint64_t *)__p);
  if (*a3 != a3[1])
  {
    std::string::basic_string[abi:ne180100]<0>(__p, " ");
    quasar::split((uint64_t)&v16, (uint64_t *)__p, 0, (unint64_t)v11);
  }
  if (v12 < 0) {
    operator delete((void *)v11[3]);
  }
  __p[0] = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1B23D5804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 217) < 0) {
    operator delete(*(void **)(v54 - 240));
  }
  if (*(char *)(v54 - 185) < 0) {
    operator delete(*(void **)(v54 - 208));
  }
  std::string __p = (void *)(v54 - 184);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v54 - 137) < 0) {
    operator delete(*(void **)(v54 - 160));
  }
  std::string __p = (void *)(v54 - 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v54 - 89) < 0) {
    operator delete(*(void **)(v54 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::PhoneticMatchAlignmentSpan::processRawOutput(uint64_t *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = a1;
  memset(v99, 0, 24);
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v99, *a1, a1[1], 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5));
  uint64_t v8 = v7[3];
  memset(v98, 0, sizeof(v98));
  uint64_t v78 = v7 + 3;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v98, v8, v7[4], 0x6DB6DB6DB6DB6DB7 * ((v7[4] - v8) >> 5));
  int isBadLmeReplacement = quasar::isBadLmeReplacement(v99, v98, a2);
  *(void *)&long long v81 = v98;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
  *(void *)&long long v81 = v99;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
  uint64_t v11 = *v7;
  uint64_t v10 = v7[1];
  if (*v7 == v10) {
    goto LABEL_16;
  }
  int v12 = 0;
  do
  {
    for (uint64_t i = *(uint64_t ***)(a4 + 16); i; uint64_t i = (uint64_t **)*i)
      v12 |= quasar::URegularExpressionWrapper::isMatch((URegularExpression **)i[2], v11);
    v11 += 224;
  }
  while (v11 != v10);
  if ((v12 & 1) == 0)
  {
LABEL_16:
    int v12 = 0;
LABEL_17:
    int v17 = 1;
    goto LABEL_18;
  }
  uint64_t v14 = v7[3];
  uint64_t v15 = v7[4];
  if (v14 == v15)
  {
LABEL_124:
    if (quasar::gLogLevel >= 4)
    {
      long long v96 = 0u;
      long long v97 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v81 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
      int v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"LME placeholder replacement pmOutput=\"", 38);
      quasar::tokens2Str(v78, &v80);
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v68 = &v80;
      }
      else {
        uint64_t v68 = (std::string *)v80.__r_.__value_.__r.__words[0];
      }
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v80.__r_.__value_.__l.__size_;
      }
      long long v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v68, size);
      BOOL v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"\" with pmInput=\"", 16);
      quasar::tokens2Str(v7, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v73 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v73 = __p.__r_.__value_.__l.__size_;
      }
      long long v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)p_p, v73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"\"", 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v81);
    }
    goto LABEL_17;
  }
  char v16 = 1;
  do
  {
    if ((*(char *)(v14 + 71) & 0x80000000) == 0)
    {
      if (*(unsigned char *)(v14 + 71)) {
        goto LABEL_12;
      }
LABEL_11:
      char v16 = 0;
      goto LABEL_12;
    }
    if (!*(void *)(v14 + 56)) {
      goto LABEL_11;
    }
LABEL_12:
    v14 += 224;
  }
  while (v14 != v15);
  if (v16) {
    goto LABEL_124;
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v96 = 0u;
    long long v97 = 0u;
    long long v94 = 0u;
    long long v95 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v81 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
    uint64_t v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"Bad LME placeholder replacement pmOutput=\"", 42);
    quasar::tokens2Str(v78, &v80);
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v60 = &v80;
    }
    else {
      uint64_t v60 = (std::string *)v80.__r_.__value_.__r.__words[0];
    }
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v61 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v61 = v80.__r_.__value_.__l.__size_;
    }
    uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
    unint64_t v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"\" with pmInput=\"", 16);
    quasar::tokens2Str(v7, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v64 = &__p;
    }
    else {
      uint64_t v64 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v65 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v65 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, v65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"\"", 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v80.__r_.__value_.__l.__data_);
    }
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v81);
  }
  int v17 = 0;
LABEL_18:
  uint64_t v18 = v7[3];
  uint64_t v19 = v7[4];
  if (v18 == v19)
  {
    int v20 = 0;
    goto LABEL_63;
  }
  int v75 = v17;
  int v76 = isBadLmeReplacement;
  long long v77 = v7;
  int v20 = 0;
  char v21 = 0;
  int v22 = *((char *)a3 + 23);
  uint64_t v23 = a3[1];
  if (v22 >= 0) {
    uint64_t v24 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    uint64_t v24 = a3[1];
  }
  if (v22 < 0) {
    a3 = (void *)*a3;
  }
  uint64_t v25 = v18;
  while (2)
  {
    uint64_t v26 = *(unsigned __int8 *)(v25 + 23);
    if ((v26 & 0x80u) == 0) {
      uint64_t v27 = *(unsigned __int8 *)(v25 + 23);
    }
    else {
      uint64_t v27 = *(void *)(v25 + 8);
    }
    if (v27 == v24)
    {
      if ((v26 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v25, a3, *(void *)(v25 + 8))) {
          goto LABEL_40;
        }
      }
      else if (*(unsigned char *)(v25 + 23))
      {
        uint64_t v28 = 0;
        while (*(unsigned __int8 *)(v25 + v28) == *((unsigned __int8 *)a3 + v28))
        {
          if (v26 == ++v28) {
            goto LABEL_36;
          }
        }
        goto LABEL_40;
      }
LABEL_36:
      if (v22 < 0)
      {
        if (!v23) {
          goto LABEL_40;
        }
      }
      else if (!v22)
      {
        goto LABEL_40;
      }
      int v20 = 1;
    }
    else
    {
LABEL_40:
      char v21 = 1;
    }
    v25 += 224;
    if (v25 != v19) {
      continue;
    }
    break;
  }
  char v29 = v20 & v21;
  uint64_t v7 = v77;
  int v17 = v75;
  int isBadLmeReplacement = v76;
  if (v29)
  {
    std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)(v77 + 6), *v77, v77[1], 0x6DB6DB6DB6DB6DB7 * ((v77[1] - *v77) >> 5));
    if (quasar::gLogLevel >= 4)
    {
      long long v96 = 0u;
      long long v97 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v81 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
      long long v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"Mixture of wildcards and non-wildcards in replacement of input='", 64);
      quasar::tokens2Str(v77, &v80);
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v31 = &v80;
      }
      else {
        BOOL v31 = (std::string *)v80.__r_.__value_.__r.__words[0];
      }
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v32 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v32 = v80.__r_.__value_.__l.__size_;
      }
      uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
      uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"' with rawOutput='", 18);
      quasar::tokens2Str(v78, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v35 = &__p;
      }
      else {
        uint64_t v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"' is invalid", 12);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v81);
    }
    return 0;
  }
LABEL_63:
  if ((v20 | v12))
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v96 = 0u;
      long long v97 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v81 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
      uint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"Wildcards/placeholders found not replacing input='", 50);
      quasar::tokens2Str(v7, &v80);
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v40 = &v80;
      }
      else {
        uint64_t v40 = (std::string *)v80.__r_.__value_.__r.__words[0];
      }
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v41 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v41 = v80.__r_.__value_.__l.__size_;
      }
      uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
      uint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"' with rawOutput='", 18);
      quasar::tokens2Str(v78, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v44 = &__p;
      }
      else {
        uint64_t v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v45 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v45 = __p.__r_.__value_.__l.__size_;
      }
      int64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v44, v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"'", 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v81);
    }
    uint64_t v47 = (uint64_t)(v7 + 6);
    uint64_t v48 = *v7;
    uint64_t v49 = v7[1];
    unint64_t v50 = 0x6DB6DB6DB6DB6DB7 * ((v49 - *v7) >> 5);
  }
  else
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v96 = 0u;
      long long v97 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v81 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
      unint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"No wildcards/placeholders found replacing input='", 49);
      quasar::tokens2Str(v7, &v80);
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v52 = &v80;
      }
      else {
        unint64_t v52 = (std::string *)v80.__r_.__value_.__r.__words[0];
      }
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v53 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v53 = v80.__r_.__value_.__l.__size_;
      }
      uint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
      unint64_t v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"' with rawOutput='", 18);
      quasar::tokens2Str(v78, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v56 = &__p;
      }
      else {
        uint64_t v56 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v57 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v57 = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"'", 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v81);
      uint64_t v18 = v7[3];
      uint64_t v19 = v7[4];
    }
    uint64_t v47 = (uint64_t)(v7 + 6);
    unint64_t v50 = 0x6DB6DB6DB6DB6DB7 * ((v19 - v18) >> 5);
    uint64_t v48 = v18;
    uint64_t v49 = v19;
  }
  std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v47, v48, v49, v50);
  return v17 & (isBadLmeReplacement ^ 1u);
}

void sub_1B23D6104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a25);
  _Unwind_Resume(a1);
}

std::string *quasar::PhoneticMatchResult::inputToks@<X0>(std::string *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (const quasar::Token **)this->__r_.__value_.__r.__words[2];
  std::string::pointer data = this[1].__r_.__value_.__l.__data_;
  if (v2 != (const quasar::Token **)data)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = *v2;
      uint64_t v7 = v2[1];
      while (v6 != v7)
      {
        if ((unint64_t)v5 >= a2[2])
        {
          this = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a2, v6);
          uint64_t v5 = this;
        }
        else
        {
          this = quasar::Token::Token(v5, v6);
          uint64_t v5 = (std::string *)((char *)v5 + 224);
          a2[1] = (uint64_t)v5;
        }
        a2[1] = (uint64_t)v5;
        uint64_t v6 = (const quasar::Token *)((char *)v6 + 224);
      }
      v2 += 9;
    }
    while (v2 != (const quasar::Token **)data);
  }
  return this;
}

void sub_1B23D6274(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::string *quasar::PhoneticMatchResult::outputToks@<X0>(std::string *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::string::size_type v2 = this->__r_.__value_.__r.__words[2];
  std::string::pointer data = this[1].__r_.__value_.__l.__data_;
  if ((std::string::pointer)v2 != data)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(const quasar::Token **)(v2 + 48);
      uint64_t v7 = *(const quasar::Token **)(v2 + 56);
      while (v6 != v7)
      {
        if ((unint64_t)v5 >= a2[2])
        {
          this = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a2, v6);
          uint64_t v5 = this;
        }
        else
        {
          this = quasar::Token::Token(v5, v6);
          uint64_t v5 = (std::string *)((char *)v5 + 224);
          a2[1] = (uint64_t)v5;
        }
        a2[1] = (uint64_t)v5;
        uint64_t v6 = (const quasar::Token *)((char *)v6 + 224);
      }
      v2 += 72;
    }
    while ((std::string::pointer)v2 != data);
  }
  return this;
}

void sub_1B23D6340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::PhoneticMatchResult::toJSONString(quasar::PhoneticMatchResult *this, int a2)
{
  quasar::PTree::PTree((quasar::PTree *)v26);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v25);
  quasar::PTree::PTree((quasar::PTree *)v24);
  BOOL v4 = (quasar **)*((void *)this + 2);
  uint64_t v5 = (quasar **)*((void *)this + 3);
  while (v4 != v5)
  {
    quasar::PhoneticMatchAlignmentSpan::toPTree(v4, a2, (quasar::PTree *)&v18);
    quasar::PTree::addChild((quasar::PTree *)v24, (const quasar::PTree *)&v18);
    quasar::PTree::~PTree((quasar::PTree *)&v18);
    v4 += 9;
  }
  uint64_t v6 = (quasar *)std::string::basic_string[abi:ne180100]<0>(__p, "overallScore");
  float v7 = *((float *)this + 3);
  LODWORD(v18) = quasar::getType(v6, v7);
  std::to_string(&v19, v7);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  char v23 = 1;
  quasar::PTree::putChild((uint64_t)v26, (uint64_t)__p, (uint64_t)&v18, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = (quasar *)std::string::basic_string[abi:ne180100]<0>(__p, "matchCost");
  float v9 = *(float *)this;
  LODWORD(v18) = quasar::getType(v8, *(float *)this);
  std::to_string(&v19, v9);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  char v23 = 1;
  quasar::PTree::putChild((uint64_t)v26, (uint64_t)__p, (uint64_t)&v18, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = (quasar *)std::string::basic_string[abi:ne180100]<0>(__p, "graphCost");
  float v11 = *((float *)this + 1);
  LODWORD(v18) = quasar::getType(v10, v11);
  std::to_string(&v19, v11);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  char v23 = 1;
  quasar::PTree::putChild((uint64_t)v26, (uint64_t)__p, (uint64_t)&v18, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "numInputPhones");
  unsigned int v12 = *((_DWORD *)this + 16);
  LODWORD(v18) = quasar::getType((quasar *)v12);
  std::to_string(&v19, v12);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  char v23 = 1;
  quasar::PTree::putChild((uint64_t)v26, (uint64_t)__p, (uint64_t)&v18, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "isScoreHigh");
  int v13 = *((unsigned __int8 *)this + 68);
  LODWORD(v18) = quasar::getType((quasar *)*((unsigned __int8 *)this + 68));
  std::to_string(&v19, v13);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  char v23 = 1;
  quasar::PTree::putChild((uint64_t)v26, (uint64_t)__p, (uint64_t)&v18, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "isPartial");
  int v14 = *((unsigned __int8 *)this + 69);
  LODWORD(v18) = quasar::getType((quasar *)*((unsigned __int8 *)this + 69));
  std::to_string(&v19, v14);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  char v23 = 1;
  quasar::PTree::putChild((uint64_t)v26, (uint64_t)__p, (uint64_t)&v18, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "isValid");
  int v15 = *((unsigned __int8 *)this + 70);
  LODWORD(v18) = quasar::getType((quasar *)*((unsigned __int8 *)this + 70));
  std::to_string(&v19, v15);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  char v23 = 1;
  quasar::PTree::putChild((uint64_t)v26, (uint64_t)__p, (uint64_t)&v18, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "decoderName");
  quasar::PTree::PTree(&v18, (char *)this + 40);
  quasar::PTree::putChild((uint64_t)v26, (uint64_t)__p, (uint64_t)&v18, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v18, "spans");
  quasar::PTree::putChild((uint64_t)v26, (uint64_t)&v18, (uint64_t)v24, 1);
  if (v19.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(v18);
  }
  quasar::PTree::writeJson();
}

void sub_1B23D68AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  quasar::PTree::~PTree((quasar::PTree *)&a26);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a34);
  quasar::PTree::~PTree((quasar::PTree *)(v34 - 128));
  _Unwind_Resume(a1);
}

uint64_t quasar::PhoneticMatchResult::numWildcardWordMatches(uint64_t a1, unsigned __int8 **a2)
{
  std::string::size_type v2 = *(void **)(a1 + 16);
  uint64_t v3 = *(void **)(a1 + 24);
  if (v2 == v3) {
    return 0;
  }
  LODWORD(v5) = 0;
  do
  {
    uint64_t v5 = quasar::PhoneticMatchAlignmentSpan::numWildcardWordMatches(v2, a2) + v5;
    v2 += 9;
  }
  while (v2 != v3);
  return v5;
}

void quasar::PhoneticMatchResult::computeScores(quasar::PhoneticMatchResult *this, int a2, int a3, float **a4, int a5, float a6, float a7, float a8, float a9, float a10, float a11)
{
  float v16 = a6 * a9;
  *((_DWORD *)this + 16) = a2;
  float v17 = *(float *)this;
  if (a3)
  {
    float v17 = v17 / (float)a2;
    float v18 = (float)(v16 + a7) / (float)a2;
  }
  else
  {
    float v18 = v16 + a7;
  }
  *((float *)this + 1) = v17;
  *((float *)this + 2) = v18;
  *((float *)this + 3) = (float)(v18 - v17) + a10;
  quasar::PhoneticMatchResult::inputToks((std::string *)this, (uint64_t *)&v37);
  std::string v19 = v37;
  if (v37 == v38)
  {
    uint64_t v40 = &v37;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
    float v22 = 0.0;
  }
  else
  {
    int v20 = 0;
    float v21 = 0.0;
    do
    {
      float v21 = v21 + (float)(v19[10] / 1000.0);
      ++v20;
      v19 += 56;
    }
    while (v19 != v38);
    uint64_t v40 = &v37;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
    float v22 = v21 / (float)v20;
  }
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  std::vector<float>::resize((uint64_t)&v37, 3uLL);
  char v23 = v37;
  *uint64_t v37 = *((float *)this + 3);
  v23[1] = v22;
  float v24 = 0.9999;
  if (v22 <= 0.9999) {
    float v24 = v22;
  }
  if (v22 < 0.0001) {
    float v24 = 0.0001;
  }
  float v25 = log(1.0 / v24 + -1.0);
  v23[2] = -v25;
  if (a5)
  {
    if (v38 != v23)
    {
      unint64_t v26 = v38 - v23;
      uint64_t v27 = *a4;
      if (v26 <= 1) {
        unint64_t v26 = 1;
      }
      uint64_t v28 = v23;
      do
      {
        float v29 = *v28++;
        float v30 = v29;
        float v31 = *v27++;
        a11 = a11 + (float)(v30 * v31);
        --v26;
      }
      while (v26);
    }
    float v32 = expf(a11);
    float v22 = v32 / (v32 + 1.0);
  }
  uint64_t v33 = *((void *)this + 2);
  for (uint64_t i = *((void *)this + 3); v33 != i; v33 += 72)
  {
    uint64_t v35 = *(void *)(v33 + 24);
    uint64_t v36 = *(void *)(v33 + 32);
    while (v35 != v36)
    {
      *(float *)(v35 + 40) = (float)(int)(float)(v22 * 1000.0);
      v35 += 224;
    }
  }
  *((unsigned char *)this + 68) = *((float *)this + 3) > a8;
  uint64_t v38 = v23;
  operator delete(v23);
}

void sub_1B23D6C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::PhoneticMatchResult::processRawOutput(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v5 = *(uint64_t **)(a1 + 16);
  uint64_t v6 = *(uint64_t **)(a1 + 24);
  if (v5 == v6)
  {
    uint64_t v10 = 1;
  }
  else
  {
    LODWORD(v10) = 1;
    do
    {
      uint64_t v10 = quasar::PhoneticMatchAlignmentSpan::processRawOutput(v5, a2, a3, a4) & v10;
      v5 += 9;
    }
    while (v5 != v6);
  }
  *(unsigned char *)(a1 + 70) = v10;
  return v10;
}

void quasar::PhoneticMatchResult::preItnOutputToks(std::string *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = quasar::PhoneticMatchResult::outputToks(this, (uint64_t *)&v24);
  BOOL v4 = v24;
  for (uint64_t i = v25; v4 != i; v4 = (const quasar::Token *)((char *)v4 + 224))
  {
    memset(&__str, 0, sizeof(__str));
    v21[0] = 0;
    v21[1] = 0;
    uint64_t v22 = 0;
    int v6 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v3);
    std::string::basic_string[abi:ne180100]<0>(__p, "~w01");
    uint64_t v3 = (std::string *)quasar::QsrText::splitOnUserDefinedSymbol(v6, (uint64_t)v4, __p, (uint64_t)&__str, (uint64_t)v21);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      quasar::Token::Token(__p, v4);
      std::string::operator=(__p, &__str);
      unint64_t v8 = a2[1];
      if (v8 >= a2[2])
      {
        uint64_t v9 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a2, (const quasar::Token *)__p);
      }
      else
      {
        quasar::Token::Token((std::string *)a2[1], (const quasar::Token *)__p);
        uint64_t v9 = v8 + 224;
        a2[1] = v8 + 224;
      }
      a2[1] = v9;
      if (v20 < 0) {
        operator delete(v19);
      }
      if (v18 < 0) {
        operator delete(v17);
      }
      unint64_t v26 = (void **)&v16;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v26);
      if (v15 < 0) {
        operator delete(v14);
      }
      unint64_t v26 = (void **)&v13;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v26);
      if (v12 < 0) {
        operator delete(v11);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v22) < 0) {
      operator delete(v21[0]);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B23D6E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void quasar::PhoneticMatchResult::getItnOverrides(std::string *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  memset(&v64, 0, sizeof(v64));
  uint64_t v5 = quasar::PhoneticMatchResult::outputToks(a1, &v62);
  uint64_t v6 = v62;
  uint64_t v7 = v63;
  if (v62 != v63)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v59 = 0;
      size_t v60 = 0;
      uint64_t v61 = 0;
      uint64_t v56 = 0;
      std::string::size_type v57 = 0;
      uint64_t v58 = 0;
      int v9 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v5);
      std::string::basic_string[abi:ne180100]<0>(__p, "~w01");
      uint64_t v5 = (std::string *)quasar::QsrText::splitOnUserDefinedSymbol(v9, v6, (std::string *)__p, (uint64_t)&v59, (uint64_t)&v56);
      if (SBYTE7(v38) < 0)
      {
        operator delete(__p[0]);
        if (!v8)
        {
LABEL_21:
          uint64_t v5 = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a2, (unsigned __int8 *)&v59);
          unint64_t v8 = v5;
          goto LABEL_67;
        }
      }
      else if (!v8)
      {
        goto LABEL_21;
      }
      uint64_t v10 = HIBYTE(v61);
      if (v61 >= 0) {
        size_t v11 = HIBYTE(v61);
      }
      else {
        size_t v11 = v60;
      }
      std::string::pointer data = (std::string::pointer)v8[2].__r_.__value_.__s.__data_[15];
      int v13 = (char)data;
      if ((char)data < 0) {
        std::string::pointer data = v8[2].__r_.__value_.__l.__data_;
      }
      if ((std::string::pointer)v11 != data) {
        goto LABEL_23;
      }
      if (v13 >= 0) {
        int v14 = &v8[1].__r_.__value_.__s.__data_[16];
      }
      else {
        int v14 = (std::string::value_type *)v8[1].__r_.__value_.__r.__words[2];
      }
      if (v61 < 0)
      {
        uint64_t v5 = (std::string *)memcmp(v59, v14, v60);
        if (v5) {
          goto LABEL_23;
        }
      }
      else if (HIBYTE(v61))
      {
        char v15 = &v59;
        while (*(unsigned __int8 *)v15 == *v14)
        {
          char v15 = (void **)((char *)v15 + 1);
          ++v14;
          if (!--v10) {
            goto LABEL_38;
          }
        }
LABEL_23:
        std::string::size_type v16 = HIBYTE(v58);
        char v17 = HIBYTE(v58);
        std::string::size_type v18 = v57;
        if (v58 >= 0) {
          std::string::size_type v19 = HIBYTE(v58);
        }
        else {
          std::string::size_type v19 = v57;
        }
        if (v19)
        {
          std::string::size_type size = HIBYTE(v64.__r_.__value_.__r.__words[2]);
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v64.__r_.__value_.__l.__size_;
          }
          if (size)
          {
            std::string::append(&v64, " ");
            std::string::size_type v16 = HIBYTE(v58);
            std::string::size_type v18 = v57;
            char v17 = HIBYTE(v58);
          }
          if (v17 >= 0) {
            float v21 = (const std::string::value_type *)&v56;
          }
          else {
            float v21 = v56;
          }
          if (v17 >= 0) {
            std::string::size_type v22 = v16;
          }
          else {
            std::string::size_type v22 = v18;
          }
          uint64_t v5 = std::string::append(&v64, v21, v22);
        }
        goto LABEL_67;
      }
LABEL_38:
      long long v54 = 0uLL;
      uint64_t v55 = 0;
      uint64_t v23 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v5);
      quasar::QsrText::decodeQsrText(v23, (uint64_t)&v64, (uint64_t)&v54);
      quasar::ItnOverride::ItnOverride((std::string *)__p, (long long *)&v8->__r_.__value_.__r.__words[2], (long long *)&v8[1].__r_.__value_.__r.__words[2], &v54);
      std::vector<quasar::ItnOverride>::push_back[abi:ne180100](a3, (long long *)__p);
      if (SBYTE7(v41) < 0) {
        operator delete(v40[0]);
      }
      if (SHIBYTE(v39) < 0) {
        operator delete(*((void **)&v38 + 1));
      }
      if (SBYTE7(v38) < 0) {
        operator delete(__p[0]);
      }
      if (quasar::gLogLevel >= 4)
      {
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        *(_OWORD *)uint64_t v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        float v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ITN Override: ", 14);
        int v25 = v8[1].__r_.__value_.__s.__data_[15];
        if (v25 >= 0) {
          uint64_t v26 = (uint64_t)&v8->__r_.__value_.__r.__words[2];
        }
        else {
          uint64_t v26 = v8->__r_.__value_.__r.__words[2];
        }
        if (v25 >= 0) {
          uint64_t v27 = v8[1].__r_.__value_.__s.__data_[15];
        }
        else {
          uint64_t v27 = (uint64_t)v8[1].__r_.__value_.__l.__data_;
        }
        uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
        float v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" ", 1);
        int v30 = v8[2].__r_.__value_.__s.__data_[15];
        if (v30 >= 0) {
          uint64_t v31 = (uint64_t)&v8[1].__r_.__value_.__r.__words[2];
        }
        else {
          uint64_t v31 = v8[1].__r_.__value_.__r.__words[2];
        }
        if (v30 >= 0) {
          uint64_t v32 = v8[2].__r_.__value_.__s.__data_[15];
        }
        else {
          uint64_t v32 = (uint64_t)v8[2].__r_.__value_.__l.__data_;
        }
        uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
        uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" ", 1);
        if (v55 >= 0) {
          uint64_t v35 = &v54;
        }
        else {
          uint64_t v35 = (long long *)v54;
        }
        if (v55 >= 0) {
          uint64_t v36 = HIBYTE(v55);
        }
        else {
          uint64_t v36 = *((void *)&v54 + 1);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
      uint64_t v5 = (std::string *)MEMORY[0x1B3EA7B20](&v64, "");
      if (SHIBYTE(v55) < 0) {
        operator delete((void *)v54);
      }
      unint64_t v8 = 0;
LABEL_67:
      if (SHIBYTE(v58) < 0) {
        operator delete(v56);
      }
      if (SHIBYTE(v61) < 0) {
        operator delete(v59);
      }
      v6 += 224;
    }
    while (v6 != v7);
  }
  __p[0] = &v62;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
}

void sub_1B23D7274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void **std::vector<quasar::ItnOverride>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  BOOL result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    unint64_t v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x38E38E38E38E38ELL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x1C71C71C71C71C7) {
      unint64_t v15 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v15 = v13;
    }
    v21[4] = result;
    if (v15) {
      std::string::size_type v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>((uint64_t)result, v15);
    }
    else {
      std::string::size_type v16 = 0;
    }
    char v17 = &v16[72 * v12];
    v21[0] = v16;
    v21[1] = v17;
    v21[3] = &v16[72 * v15];
    long long v18 = *a2;
    *((void *)v17 + 2) = *((void *)a2 + 2);
    *(_OWORD *)char v17 = v18;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v19 = *(long long *)((char *)a2 + 24);
    *((void *)v17 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v17 + 24) = v19;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    long long v20 = a2[3];
    *((void *)v17 + 8) = *((void *)a2 + 8);
    *((_OWORD *)v17 + 3) = v20;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    v21[2] = v17 + 72;
    std::vector<quasar::ItnOverride>::__swap_out_circular_buffer(a1, v21);
    uint64_t v11 = a1[1];
    BOOL result = std::__split_buffer<std::tuple<std::string,std::string,std::string>>::~__split_buffer(v21);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    long long v10 = a2[3];
    *(void *)(v7 + 64) = *((void *)a2 + 8);
    *(_OWORD *)(v7 + 48) = v10;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    *((void *)a2 + 6) = 0;
    uint64_t v11 = v7 + 72;
    a1[1] = v7 + 72;
  }
  a1[1] = v11;
  return result;
}

void sub_1B23D74D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::tuple<std::string,std::string,std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void quasar::PhoneticMatchResult::cleanupPartialSpans(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 != v3 && v2 - v3 != 72)
  {
    unint64_t v5 = 0;
    int v6 = 0;
    unint64_t v7 = "Moving token '";
    do
    {
      uint64_t v8 = (uint64_t)v7;
      unint64_t v9 = v5;
      int v10 = quasar::PhoneticMatchAlignmentSpan::numWildcardWordMatches((void *)(v3 + 72 * v5), a2);
      unint64_t v5 = (v6 + 1);
      int v11 = quasar::PhoneticMatchAlignmentSpan::numWildcardWordMatches((void *)(v3 + 72 * v5), a2);
      BOOL v12 = v10 >= 1 && v11 <= 0;
      if (!v12 || (uint64_t v13 = v3 + 72 * v9, v15 = *(void *)(v13 + 24), v14 = *(void *)(v13 + 32), v15 == v14))
      {
        unint64_t v7 = (const char *)v8;
      }
      else
      {
        unint64_t v7 = (const char *)v8;
        do
        {
          if (*(char *)(v14 - 153) < 0)
          {
            if (*(void *)(v14 - 168)) {
              break;
            }
          }
          else if (*(unsigned char *)(v14 - 153))
          {
            break;
          }
          if (quasar::gLogLevel >= 5)
          {
            long long v72 = 0u;
            long long v73 = 0u;
            long long v70 = 0u;
            long long v71 = 0u;
            long long v68 = 0u;
            long long v69 = 0u;
            long long v66 = 0u;
            long long v67 = 0u;
            long long v64 = 0u;
            long long v65 = 0u;
            long long v62 = 0u;
            long long v63 = 0u;
            long long v60 = 0u;
            long long v61 = 0u;
            long long v58 = 0u;
            long long v59 = 0u;
            long long v57 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v57);
            std::string::size_type v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, v8, 14);
            uint64_t v17 = *(void *)(*(void *)(a1 + 16) + 72 * v9 + 32);
            uint64_t v20 = *(void *)(v17 - 224);
            uint64_t v18 = v17 - 224;
            uint64_t v19 = v20;
            int v21 = *(char *)(v18 + 23);
            if (v21 >= 0) {
              uint64_t v22 = v18;
            }
            else {
              uint64_t v22 = v19;
            }
            if (v21 >= 0) {
              uint64_t v23 = *(unsigned __int8 *)(v18 + 23);
            }
            else {
              uint64_t v23 = *(void *)(v18 + 8);
            }
            float v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v22, v23);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"' to following span", 19);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v57);
            uint64_t v3 = *(void *)(a1 + 16);
          }
          std::vector<quasar::Token>::insert((uint64_t *)(v3 + 72 * v5 + 24), *(std::string **)(v3 + 72 * v5 + 24), (quasar::Token *)(*(void *)(v3 + 72 * v9 + 32) - 224));
          uint64_t v25 = *(void *)(a1 + 16) + 72 * v9;
          quasar::Token::~Token((void **)(*(void *)(v25 + 32) - 224));
          *(void *)(v25 + 32) = v26;
          uint64_t v3 = *(void *)(a1 + 16);
          uint64_t v27 = v3 + 72 * v9;
          uint64_t v28 = *(void *)(v27 + 24);
          uint64_t v14 = *(void *)(v27 + 32);
        }
        while (v28 != v14);
        uint64_t v2 = *(void *)(a1 + 24);
      }
      unint64_t v29 = 0x8E38E38E38E38E39 * ((v2 - v3) >> 3);
      int v6 = v5;
    }
    while (v29 - 1 > v5);
    if (v29 - 3 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v30 = 1;
      do
      {
        int v31 = quasar::PhoneticMatchAlignmentSpan::numWildcardWordMatches((void *)(v3 + 72 * v30), a2);
        unsigned int v32 = v30 - 1;
        int v33 = quasar::PhoneticMatchAlignmentSpan::numWildcardWordMatches((void *)(v3 + 72 * (v30 - 1)), a2);
        if (v31 >= 1 && v33 <= 0)
        {
          uint64_t v35 = v3 + 72 * v30;
          uint64_t v36 = *(void *)(v35 + 24);
          if (v36 != *(void *)(v35 + 32))
          {
            do
            {
              if (*(char *)(v36 + 71) < 0)
              {
                if (*(void *)(v36 + 56)) {
                  break;
                }
              }
              else if (*(unsigned char *)(v36 + 71))
              {
                break;
              }
              if (quasar::gLogLevel >= 5)
              {
                long long v72 = 0u;
                long long v73 = 0u;
                long long v70 = 0u;
                long long v71 = 0u;
                long long v68 = 0u;
                long long v69 = 0u;
                long long v66 = 0u;
                long long v67 = 0u;
                long long v64 = 0u;
                long long v65 = 0u;
                long long v62 = 0u;
                long long v63 = 0u;
                long long v60 = 0u;
                long long v61 = 0u;
                long long v58 = 0u;
                long long v59 = 0u;
                long long v57 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v57);
                uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"Moving token '", 14);
                uint64_t v38 = *(void *)(*(void *)(a1 + 16) + 72 * v30 + 24);
                int v39 = *(char *)(v38 + 23);
                if (v39 >= 0) {
                  uint64_t v40 = *(void *)(*(void *)(a1 + 16) + 72 * v30 + 24);
                }
                else {
                  uint64_t v40 = *(void *)v38;
                }
                if (v39 >= 0) {
                  uint64_t v41 = *(unsigned __int8 *)(v38 + 23);
                }
                else {
                  uint64_t v41 = *(void *)(v38 + 8);
                }
                long long v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v40, v41);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"' to preceeding span", 20);
                quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v57);
                uint64_t v3 = *(void *)(a1 + 16);
              }
              long long v43 = *(const quasar::Token **)(v3 + 72 * v30 + 24);
              uint64_t v44 = v3 + 72 * v32;
              long long v47 = *(std::string **)(v44 + 32);
              unint64_t v45 = *(void *)(v44 + 40);
              long long v46 = (uint64_t *)(v44 + 32);
              if ((unint64_t)v47 >= v45)
              {
                p_std::string::size_type size = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)(v3 + 72 * v32 + 24), v43);
              }
              else
              {
                quasar::Token::Token(v47, v43);
                p_std::string::size_type size = (uint64_t)&v47[9].__r_.__value_.__l.__size_;
                *long long v46 = (uint64_t)&v47[9].__r_.__value_.__l.__size_;
              }
              *long long v46 = p_size;
              uint64_t v49 = *(void *)(a1 + 16) + 72 * v30;
              long long v51 = *(long long **)(v49 + 32);
              long long v50 = (uint64_t *)(v49 + 32);
              std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>((long long *)(*(v50 - 1) + 224), v51, *(v50 - 1));
              uint64_t v53 = v52;
              for (uint64_t i = *v50; i != v53; quasar::Token::~Token((void **)(i - 224)))
                ;
              *long long v50 = v53;
              uint64_t v3 = *(void *)(a1 + 16);
              uint64_t v55 = v3 + 72 * v30;
              uint64_t v36 = *(void *)(v55 + 24);
            }
            while (v36 != *(void *)(v55 + 32));
            uint64_t v2 = *(void *)(a1 + 24);
          }
        }
        unint64_t v30 = (v30 + 1);
      }
      while (-1 - 0x71C71C71C71C71C7 * ((v2 - v3) >> 3) > v30);
    }
  }
}

void sub_1B23D78C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11 = v12;
  _Unwind_Resume(exception_object);
}

long long *std::vector<quasar::Token>::insert(uint64_t *a1, std::string *this, quasar::Token *a3)
{
  BOOL v4 = (long long *)this;
  int v6 = (std::string *)a1[1];
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v7 = a1[2];
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v9 = *a1;
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v6 - *a1) >> 5) + 1;
    if (v10 > 0x124924924924924) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = (uint64_t)this - v9;
    uint64_t v12 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)this - v9) >> 5);
    unint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - v9) >> 5);
    if (2 * v13 > v10) {
      unint64_t v10 = 2 * v13;
    }
    if (v13 >= 0x92492492492492) {
      unint64_t v14 = 0x124924924924924;
    }
    else {
      unint64_t v14 = v10;
    }
    uint64_t v41 = a1 + 2;
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), v14);
    }
    else {
      uint64_t v15 = 0;
    }
    std::string::size_type v16 = (std::string *)&v15[224 * v12];
    uint64_t v37 = v15;
    uint64_t v38 = v16;
    int v39 = v16;
    uint64_t v40 = &v15[224 * v14];
    if (v12 == v14)
    {
      if (v11 < 1)
      {
        if ((long long *)v9 == v4) {
          unint64_t v19 = 1;
        }
        else {
          unint64_t v19 = 2 * v12;
        }
        v42[4] = v8;
        uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>(v8, v19);
        uint64_t v22 = v20;
        uint64_t v23 = (std::string *)&v20[224 * (v19 >> 2)];
        float v24 = &v20[224 * v21];
        uint64_t v25 = v38;
        uint64_t v26 = v38;
        uint64_t v27 = v23;
        if (v39 != v38)
        {
          uint64_t v36 = &v20[224 * v21];
          uint64_t v28 = ((char *)v39 - (char *)v38) / 224;
          uint64_t v35 = (std::string *)((char *)v23 + 224 * v28);
          uint64_t v29 = 224 * v28;
          uint64_t v30 = (uint64_t)&v20[224 * (v19 >> 2)];
          int v31 = (long long *)v38;
          do
          {
            std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,quasar::Token>(v8, v30, v31);
            v30 += 224;
            v31 += 14;
            v29 -= 224;
          }
          while (v29);
          uint64_t v26 = v39;
          uint64_t v27 = v35;
          float v24 = v36;
        }
        unsigned int v32 = v37;
        int v33 = v40;
        uint64_t v37 = v22;
        uint64_t v38 = v23;
        v42[0] = v32;
        v42[1] = v25;
        int v39 = v27;
        uint64_t v40 = v24;
        v42[2] = v26;
        v42[3] = v33;
        std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)v42);
        std::string::size_type v16 = v39;
      }
      else
      {
        if (v12 >= -1) {
          uint64_t v17 = v12 + 1;
        }
        else {
          uint64_t v17 = v12 + 2;
        }
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>((long long *)v16, (long long *)v16, (uint64_t)v16 - 224 * (v17 >> 1));
        std::string::size_type v16 = v18;
        uint64_t v38 = (std::string *)((char *)v38 - 224 * (v17 >> 1));
        int v39 = v18;
      }
    }
    quasar::Token::Token(v16, a3);
    int v39 = (std::string *)((char *)v39 + 224);
    BOOL v4 = (long long *)std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v37, v4);
    std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v37);
  }
  else if (this == v6)
  {
    quasar::Token::Token(this, a3);
    a1[1] = (uint64_t)(v4 + 14);
  }
  else
  {
    std::vector<quasar::Token>::__move_range((uint64_t)a1, (long long *)this, (unint64_t)v6, (uint64_t)&this[9].__r_.__value_.__l.__size_);
    if (v4 <= (long long *)a3) {
      a3 = (quasar::Token *)((char *)a3 + 224 * (a1[1] > (unint64_t)a3));
    }
    quasar::Token::operator=((uint64_t)v4, (uint64_t)a3);
  }
  return v4;
}

void sub_1B23D7BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v14 + 8) = v13;
  _Unwind_Resume(exception_object);
}

std::string *quasar::ItnOverride::ItnOverride(std::string *this, long long *a2, long long *a3, long long *a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v8;
  }
  uint64_t v9 = this + 2;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v10 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return this;
}

void sub_1B23D7C78(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::ItnOverride>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::ItnOverride>,std::reverse_iterator<quasar::ItnOverride*>,std::reverse_iterator<quasar::ItnOverride*>,std::reverse_iterator<quasar::ItnOverride*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::ItnOverride>,std::reverse_iterator<quasar::ItnOverride*>,std::reverse_iterator<quasar::ItnOverride*>,std::reverse_iterator<quasar::ItnOverride*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  uint64_t v14[2] = &v17;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 72);
      *(void *)(v9 - 56) = *(void *)(a3 - 56);
      *(_OWORD *)(v9 - 72) = v10;
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 72) = 0;
      long long v11 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v11;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      long long v12 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v12;
      v9 -= 72;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    *((void *)&v17 + 1) = v9;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ItnOverride>,std::reverse_iterator<quasar::ItnOverride*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ItnOverride>,std::reverse_iterator<quasar::ItnOverride*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,std::string,std::string>>,std::reverse_iterator<std::tuple<std::string,std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t kaldi::Gcd<int>(uint64_t result, int a2)
{
  if (result && a2)
  {
    while (1)
    {
      LODWORD(result) = (int)result % a2;
      if (!result) {
        break;
      }
      a2 %= (int)result;
      if (!a2) {
        goto LABEL_11;
      }
    }
    LODWORD(result) = a2;
  }
  else
  {
    if (!(a2 | result))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Undefined GCD since m = 0, uint64_t n = 0.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
    }
    if (!result) {
      LODWORD(result) = a2;
    }
  }
LABEL_11:
  if ((int)result >= 0) {
    return result;
  }
  else {
    return -(int)result;
  }
}

float kaldi::VecVec<float>(uint64_t a1, uint64_t a2)
{
  return kaldi::VecVec<float>(a1 + 8, (const float **)(a2 + 8));
}

void *kaldi::CuVector<float>::~CuVector(void *a1)
{
  *a1 = &unk_1F0A517C0;
  uint64_t v3 = a1 + 1;
  uint64_t v2 = (void *)a1[1];
  if (v2) {
    free(v2);
  }
  void *v3 = 0;
  v3[1] = 0;
  return a1;
}

{
  void *v2;
  void *v3;

  *a1 = &unk_1F0A517C0;
  uint64_t v3 = a1 + 1;
  uint64_t v2 = (void *)a1[1];
  if (v2) {
    free(v2);
  }
  void *v3 = 0;
  v3[1] = 0;
  return a1;
}

void *kaldi::CuVector<double>::~CuVector(void *a1)
{
  *a1 = &unk_1F0A51798;
  uint64_t v3 = a1 + 1;
  uint64_t v2 = (void *)a1[1];
  if (v2) {
    free(v2);
  }
  void *v3 = 0;
  v3[1] = 0;
  return a1;
}

float kaldi::VecVec<float,signed char>(uint64_t a1, uint64_t a2)
{
  return kaldi::VecVec<signed char>((float32x4_t **)(a1 + 8), a2);
}

float kaldi::VecVec<float,short>(uint64_t a1, uint64_t a2)
{
  return kaldi::VecVec<short>((_OWORD **)(a1 + 8), a2);
}

void *kaldi::CuVectorBase<float>::CopyFromVec<float>(void *result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8)) {
    return kaldi::VectorBase<float>::CopyFromVec((uint64_t)result + 8, (const void **)a2);
  }
  return result;
}

void kaldi::CuVectorBase<float>::CopyFromVec<double>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v6 = &unk_1F0A51798;
    uint64_t v9 = v5;
    kaldi::CuVector<double>::Resize((uint64_t)&v6, v3, 1);
    if (*(_DWORD *)(a2 + 8))
    {
      kaldi::VectorBase<double>::CopyFromVec((uint64_t)&v7, (const void **)a2);
      if (v8) {
        kaldi::VectorBase<float>::CopyFromVec<double>(a1 + 8, (double **)&v7);
      }
    }
    uint64_t v6 = &unk_1F0A51798;
    if (v7) {
      free(v7);
    }
  }
}

void sub_1B23D8050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {
    free(a10);
  }
  _Unwind_Resume(exception_object);
}

const void **kaldi::CuVectorBase<float>::CopyToVec<float>(const void **result, uint64_t a2)
{
  if (*((_DWORD *)result + 4)) {
    return (const void **)kaldi::VectorBase<float>::CopyFromVec(a2, result + 1);
  }
  return result;
}

void kaldi::CuVectorBase<float>::AddVec(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t v6 = a1 + 8;
  if (a4 != 1.0) {
    kaldi::VectorBase<float>::Scale(a1 + 8, a4);
  }
  kaldi::VectorBase<float>::AddVec<float>(v6, (const float **)(a2 + 8), a3);
}

void *kaldi::CuVectorBase<float>::CopyFromVec(void *result, uint64_t a2)
{
  uint64_t v2 = *(int *)(a2 + 16);
  if (v2)
  {
    uint64_t result = (void *)result[1];
    if (result) {
      return memcpy(result, *(const void **)(a2 + 8), 4 * v2);
    }
  }
  return result;
}

float kaldi::CuVectorBase<float>::ReverseCopyFromVec(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 16)) {
    return kaldi::VectorBase<float>::ReverseCopyFromVec(a1 + 8, (uint64_t *)(a2 + 8));
  }
  return result;
}

void *kaldi::CuVectorBase<float>::CopyRowsFromMat(uint64_t a1, uint64_t a2)
{
  return kaldi::VectorBase<float>::CopyRowsFromMat((void **)(a1 + 8), a2 + 8);
}

void kaldi::CuVectorBase<float>::SetZero(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16))
  {
    if (*(void *)(a1 + 8)) {
      kaldi::VectorBase<float>::SetZero(a1 + 8);
    }
  }
}

uint64_t kaldi::CuVectorBase<float>::Set(uint64_t a1, float a2)
{
  return kaldi::VectorBase<float>::Set(a1 + 8, a2);
}

uint64_t kaldi::CuVectorBase<float>::Add(uint64_t a1, float a2)
{
  return kaldi::VectorBase<float>::Add(a1 + 8, a2);
}

void kaldi::CuVectorBase<float>::Scale(uint64_t a1, float a2)
{
}

void kaldi::CuVectorBase<float>::AddRowSumMat(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t v8 = *(unsigned int *)(a2 + 20);
  memset(v9, 0, sizeof(v9));
  kaldi::Vector<float>::Resize(v9, v8, 1);
  kaldi::VectorBase<float>::Set((uint64_t)v9, 1.0);
  kaldi::VectorBase<float>::AddMatVec(a1 + 8, (const float **)(a2 + 8), CblasTrans, (uint64_t)v9, a3, a4);
  kaldi::Vector<float>::Destroy((uint64_t)v9);
}

void sub_1B23D81EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::CuVectorBase<float>::AddColSumMat(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t v8 = *(unsigned int *)(a2 + 16);
  memset(v9, 0, sizeof(v9));
  kaldi::Vector<float>::Resize(v9, v8, 1);
  kaldi::VectorBase<float>::Set((uint64_t)v9, 1.0);
  kaldi::VectorBase<float>::AddMatVec(a1 + 8, (const float **)(a2 + 8), CblasNoTrans, (uint64_t)v9, a3, a4);
  kaldi::Vector<float>::Destroy((uint64_t)v9);
}

void sub_1B23D828C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CuVectorBase<float>::InvertElements(uint64_t a1)
{
  return kaldi::VectorBase<float>::InvertElements(a1 + 8);
}

float kaldi::CuVectorBase<float>::ApplySoftMax(uint64_t a1)
{
  return kaldi::VectorBase<float>::ApplySoftMax(a1 + 8);
}

void kaldi::CuVectorBase<float>::ApplyExp(uint64_t a1)
{
}

void kaldi::CuVectorBase<float>::ApplyLog(uint64_t a1)
{
}

uint64_t kaldi::CuVectorBase<float>::ApplyFloor(uint64_t a1, float a2)
{
  return kaldi::VectorBase<float>::ApplyFloor(a1 + 8, a2);
}

uint64_t kaldi::CuVectorBase<float>::ApplyCeiling(uint64_t a1, float a2)
{
  return kaldi::VectorBase<float>::ApplyCeiling(a1 + 8, a2);
}

void kaldi::CuVectorBase<float>::ApplyMaxNorm(uint64_t a1, float a2)
{
  kaldi::CuVector<float>::CuVector(&v6, a1);
  BOOL v4 = (float **)(a1 + 8);
  kaldi::VectorBase<float>::MulElements((uint64_t)v7, v4);
  float v5 = sqrtf(COERCE_FLOAT(COERCE_UNSIGNED_INT64(kaldi::VectorBase<float>::Sum((uint64_t)v7))));
  if (v5 > a2) {
    kaldi::VectorBase<float>::Scale((uint64_t)v4, a2 / v5);
  }
  uint64_t v6 = &unk_1F0A517C0;
  if (v7[0]) {
    free(v7[0]);
  }
}

void sub_1B23D837C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {
    free(a10);
  }
  _Unwind_Resume(exception_object);
}

float kaldi::CuVectorBase<float>::MulElements(uint64_t a1, uint64_t a2)
{
  return kaldi::VectorBase<float>::MulElements(a1 + 8, (float **)(a2 + 8));
}

double kaldi::CuVectorBase<float>::Sum(uint64_t a1)
{
  return kaldi::VectorBase<float>::Sum(a1 + 8);
}

void kaldi::CuVectorBase<float>::ApplyPow(uint64_t a1, float a2)
{
}

uint64_t kaldi::CuVectorBase<float>::CountZeros(uint64_t a1)
{
  return kaldi::VectorBase<float>::CountZeros(a1 + 8);
}

uint64_t kaldi::CuVectorBase<float>::SetRandn(uint64_t result)
{
  if (*(_DWORD *)(result + 16))
  {
    long long v4 = 0u;
    long long v5 = 0u;
    memset(v1, 0, sizeof(v1));
    int v2 = 0;
    uint64_t v3 = &unk_1F0A51768;
    char v6 = 0;
    uint64_t v7 = 0;
    kaldi::CuRand<float>::RandGaussian((uint64_t)v1, result);
    return kaldi::CuRand<float>::~CuRand((uint64_t)v1);
  }
  return result;
}

void sub_1B23D8458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::CuVectorBase<float>::Tanh(uint64_t a1, uint64_t a2)
{
}

void kaldi::CuVectorBase<float>::Sigmoid(uint64_t a1, uint64_t a2)
{
}

void kaldi::CuVectorBase<float>::ApplyTanh(uint64_t a1)
{
}

float kaldi::CuVectorBase<float>::CopyColFromMat(uint64_t a1, uint64_t a2, int a3)
{
  return kaldi::VectorBase<float>::CopyColFromMat<float>((uint64_t *)(a1 + 8), a2 + 8, a3);
}

void kaldi::CuVectorBase<float>::AddMatVec(uint64_t a1, uint64_t a2, CBLAS_TRANSPOSE a3, uint64_t a4, float a5, float a6)
{
}

void kaldi::CuVectorBase<float>::AddVecVec(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
}

void kaldi::CuVectorBase<float>::AddDiagMat2(uint64_t a1, uint64_t a2, int a3, float a4, float a5)
{
}

void kaldi::CuVectorBase<float>::AddDiagMatMat(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, float a6, float a7)
{
}

uint64_t kaldi::CuVectorBase<float>::ReplaceValue(uint64_t a1, float a2, float a3)
{
  return kaldi::VectorBase<float>::ReplaceValue(a1 + 8, a2, a3);
}

float kaldi::CuVectorBase<float>::DivElements(uint64_t a1, uint64_t a2)
{
  return kaldi::VectorBase<float>::DivElements(a1 + 8, (float **)(a2 + 8));
}

uint64_t kaldi::CuVectorBase<float>::ElementsEqual(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(result + 16);
  if (v3) {
    BOOL v4 = (int)v3 < 1;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    long long v5 = *(int **)(a2 + 8);
    char v6 = *(int **)(a3 + 8);
    uint64_t v7 = *(float **)(result + 8);
    do
    {
      int v9 = *v5++;
      int v8 = v9;
      int v10 = *v6++;
      if (v8 == v10) {
        float v11 = 1.0;
      }
      else {
        float v11 = 0.0;
      }
      *v7++ = v11;
      --v3;
    }
    while (v3);
  }
  return result;
}

void kaldi::CuVectorBase<float>::Write(uint64_t a1, void *a2, int a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  memset(v7, 0, sizeof(v7));
  kaldi::Vector<float>::Resize(v7, v6, 1);
  if (*(_DWORD *)(a1 + 16)) {
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)v7, (const void **)(a1 + 8));
  }
  kaldi::VectorBase<float>::Write((uint64_t)v7, a2, a3);
  kaldi::Vector<float>::Destroy((uint64_t)v7);
}

void sub_1B23D85C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::CuVector<float>::Resize(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 3) {
    a3 = *(_DWORD *)(a1 + 16) >= (int)a2;
  }
  if (*(_DWORD *)(a1 + 20) >= (int)a2)
  {
    *(_DWORD *)(a1 + 16) = a2;
    if (a2 && !a3 && *(void *)(a1 + 8))
    {
      uint64_t v9 = a1 + 8;
      kaldi::VectorBase<float>::SetZero(v9);
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 16))
    {
      uint64_t v6 = (void *)(a1 + 8);
      long long v5 = *(void **)(a1 + 8);
      if (v5) {
        free(v5);
      }
      void *v6 = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a2)
    {
      int v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      kaldi::Vector<float>::Resize(&v10, a2, 0);
      uint64_t v7 = v10;
      int v10 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = v7;
      uint64_t v8 = v11;
      uint64_t v11 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v8;
      kaldi::Vector<float>::Destroy((uint64_t)&v10);
    }
  }
}

void *kaldi::CuVector<float>::CuVector(void *a1, uint64_t a2)
{
  a1[1] = 0;
  BOOL v4 = (void **)(a1 + 1);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = &unk_1F0A517C0;
  a1[3] = *(void *)(a2 + 24);
  kaldi::CuVector<float>::Resize((uint64_t)a1, *(unsigned int *)(a2 + 16), 1);
  uint64_t v5 = *(int *)(a2 + 16);
  if (v5 && *v4) {
    memcpy(*v4, *(const void **)(a2 + 8), 4 * v5);
  }
  return a1;
}

void *kaldi::CuVector<float>::CuVector(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A517C0;
  a1[3] = a3;
  kaldi::CuVector<float>::Resize((uint64_t)a1, *(unsigned int *)(a2 + 8), 1);
  if (*(_DWORD *)(a2 + 8)) {
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)(a1 + 1), (const void **)a2);
  }
  return a1;
}

void kaldi::CuVector<float>::~CuVector(void *a1)
{
  *a1 = &unk_1F0A517C0;
  int v2 = a1 + 1;
  uint64_t v1 = (void *)a1[1];
  if (v1) {
    free(v1);
  }
  void *v2 = 0;
  v2[1] = 0;
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::CuVector<float>::operator=(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 24)) {
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
  }
  kaldi::CuVector<float>::Resize(a1, *(unsigned int *)(a2 + 16), 1);
  uint64_t v4 = *(int *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = *(void **)(a1 + 8);
    if (v5) {
      memcpy(v5, *(const void **)(a2 + 8), 4 * v4);
    }
  }
  return a1;
}

double kaldi::CuVector<float>::Read(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  kaldi::Vector<float>::Read((uint64_t)&v7, a2, a3, 0);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4) {
    free(v4);
  }
  *(void *)(a1 + 8) = v7;
  uint64_t v5 = v8;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  *(void *)(a1 + 16) = v5;
  kaldi::Vector<float>::Destroy((uint64_t)&v7);
  return result;
}

void sub_1B23D895C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::CuVector<double>::Resize(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 3) {
    a3 = *(_DWORD *)(a1 + 16) >= (int)a2;
  }
  if (*(_DWORD *)(a1 + 20) >= (int)a2)
  {
    *(_DWORD *)(a1 + 16) = a2;
    if (a2 && !a3 && *(void *)(a1 + 8))
    {
      uint64_t v9 = a1 + 8;
      kaldi::VectorBase<double>::SetZero(v9);
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 16))
    {
      uint64_t v6 = (void *)(a1 + 8);
      uint64_t v5 = *(void **)(a1 + 8);
      if (v5) {
        free(v5);
      }
      void *v6 = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a2)
    {
      int v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      kaldi::Vector<double>::Resize(&v10, a2, 0);
      uint64_t v7 = v10;
      int v10 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = v7;
      uint64_t v8 = v11;
      uint64_t v11 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v8;
      kaldi::Vector<float>::Destroy((uint64_t)&v10);
    }
  }
}

void kaldi::CuVector<double>::~CuVector(void *a1)
{
  *a1 = &unk_1F0A51798;
  int v2 = a1 + 1;
  uint64_t v1 = (void *)a1[1];
  if (v1) {
    free(v1);
  }
  void *v2 = 0;
  v2[1] = 0;
  JUMPOUT(0x1B3EA8670);
}

double kaldi::CuVector<double>::Read(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  kaldi::Vector<double>::Read((uint64_t)&v7, a2, a3, 0);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4) {
    free(v4);
  }
  *(void *)(a1 + 8) = v7;
  uint64_t v5 = v8;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  *(void *)(a1 + 16) = v5;
  kaldi::Vector<float>::Destroy((uint64_t)&v7);
  return result;
}

void sub_1B23D8B48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::CuVectorBase<float>::AddMatVec<signed char>()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::CuVectorBase<float>::AddMatVec<short>()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::CuVectorBase<float>::AddMatVec<signed char>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, float a6)
{
}

void kaldi::CuVectorBase<float>::AddMatVec<short>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, float a6)
{
}

void kaldi::MinimumBayesRisk::MbrDecode(kaldi::MinimumBayesRisk *this)
{
  uint64_t v2 = 0;
  uint64_t v3 = (std::vector<unsigned int> *)((char *)this + 88);
  uint64_t v4 = (char **)((char *)this + 256);
  uint64_t v5 = (void **)((char *)this + 280);
  uint64_t v53 = (char *)this + 272;
  uint64_t v52 = (char *)this + 296;
  while (1)
  {
    kaldi::MinimumBayesRisk::NormalizeEps((uint64_t)this, v3);
    kaldi::MinimumBayesRisk::AccStats(this);
    *((void *)this + 33) = *((void *)this + 32);
    *((void *)this + 36) = *((void *)this + 35);
    begiuint64_t n = (std::vector<unsigned int>::pointer)*((void *)this + 11);
    if (*((std::vector<unsigned int>::pointer *)this + 12) == begin)
    {
      double v8 = 0.0;
    }
    else
    {
      unint64_t v7 = 0;
      double v8 = 0.0;
      do
      {
        if (*(unsigned char *)this)
        {
          uint64_t v9 = (uint64_t *)(*((void *)this + 15) + 24 * v7);
          unsigned int v10 = begin[v7];
          uint64_t v11 = *v9;
          uint64_t v12 = v9[1] - *v9;
          if (v12)
          {
            unint64_t v13 = v12 >> 3;
            if (v13 <= 1) {
              unint64_t v13 = 1;
            }
            uint64_t v14 = (float *)(v11 + 4);
            double v15 = 0.0;
            do
            {
              if (*((_DWORD *)v14 - 1) == v10) {
                double v15 = *v14;
              }
              v14 += 2;
              --v13;
            }
            while (v13);
          }
          else
          {
            double v15 = 0.0;
          }
          unsigned int v16 = *(_DWORD *)v11;
          double v8 = v8 + v15 - *(float *)(v11 + 4);
          int v17 = *((_DWORD *)this + 2);
          if (v16 == v17 || v10 == v17 || v10 == v16)
          {
            unsigned int v16 = begin[v7];
          }
          else
          {
            if (kaldi::g_kaldi_verbose_level >= 2)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v54, 2);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"Changing word ", 14);
              uint64_t v20 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" to ", 4);
              std::ostream::operator<<();
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v54);
              begiuint64_t n = v3->__begin_;
            }
            begin[v7] = v16;
          }
        }
        else
        {
          unsigned int v16 = begin[v7];
        }
        if (v16 != *((_DWORD *)this + 2))
        {
          uint64_t v21 = *((void *)this + 29);
          uint64_t v23 = (void *)*((void *)this + 33);
          unint64_t v22 = *((void *)this + 34);
          if ((unint64_t)v23 >= v22)
          {
            uint64_t v25 = ((char *)v23 - *v4) >> 3;
            if ((unint64_t)(v25 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v26 = v22 - (void)*v4;
            uint64_t v27 = v26 >> 2;
            if (v26 >> 2 <= (unint64_t)(v25 + 1)) {
              uint64_t v27 = v25 + 1;
            }
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v28 = v27;
            }
            if (v28) {
              uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v53, v28);
            }
            else {
              uint64_t v29 = 0;
            }
            uint64_t v30 = &v29[8 * v25];
            *(void *)uint64_t v30 = *(void *)(v21 + 8 * v7);
            float v24 = v30 + 8;
            unsigned int v32 = (char *)*((void *)this + 32);
            int v31 = (char *)*((void *)this + 33);
            if (v31 != v32)
            {
              do
              {
                uint64_t v33 = *((void *)v31 - 1);
                v31 -= 8;
                *((void *)v30 - 1) = v33;
                v30 -= 8;
              }
              while (v31 != v32);
              int v31 = *v4;
            }
            *((void *)this + 32) = v30;
            *((void *)this + 33) = v24;
            *((void *)this + 34) = &v29[8 * v28];
            if (v31) {
              operator delete(v31);
            }
          }
          else
          {
            *uint64_t v23 = *(void *)(v21 + 8 * v7);
            float v24 = v23 + 1;
          }
          *((void *)this + 33) = v24;
          uint64_t v34 = (uint64_t *)(*((void *)this + 15) + 24 * v7);
          uint64_t v35 = *v34;
          uint64_t v36 = v34[1] - *v34;
          if (v36)
          {
            uint64_t v37 = v36 >> 3;
            if ((unint64_t)(v36 >> 3) <= 1) {
              uint64_t v37 = 1;
            }
            uint64_t v38 = (int *)(v35 + 4);
            int v39 = 0;
            do
            {
              if (*(v38 - 1) == v3->__begin_[v7]) {
                int v39 = *v38;
              }
              v38 += 2;
              --v37;
            }
            while (v37);
          }
          else
          {
            int v39 = 0;
          }
          uint64_t v41 = (char *)*((void *)this + 36);
          unint64_t v40 = *((void *)this + 37);
          if ((unint64_t)v41 >= v40)
          {
            long long v43 = (char *)*v5;
            uint64_t v44 = (v41 - (unsigned char *)*v5) >> 2;
            unint64_t v45 = v44 + 1;
            if ((unint64_t)(v44 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v46 = v40 - (void)v43;
            if (v46 >> 1 > v45) {
              unint64_t v45 = v46 >> 1;
            }
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v47 = v45;
            }
            if (v47)
            {
              long long v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v52, v47);
              long long v43 = (char *)*((void *)this + 35);
              uint64_t v41 = (char *)*((void *)this + 36);
            }
            else
            {
              long long v48 = 0;
            }
            uint64_t v49 = &v48[4 * v44];
            *(_DWORD *)uint64_t v49 = v39;
            long long v42 = v49 + 4;
            while (v41 != v43)
            {
              int v50 = *((_DWORD *)v41 - 1);
              v41 -= 4;
              *((_DWORD *)v49 - 1) = v50;
              v49 -= 4;
            }
            *((void *)this + 35) = v49;
            *((void *)this + 36) = v42;
            *((void *)this + 37) = &v48[4 * v47];
            if (v43) {
              operator delete(v43);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v41 = v39;
            long long v42 = v41 + 4;
          }
          *((void *)this + 36) = v42;
          begiuint64_t n = (std::vector<unsigned int>::pointer)*((void *)this + 11);
        }
        ++v7;
      }
      while (v7 < (uint64_t)(*((void *)this + 12) - (void)begin) >> 2);
    }
    if (kaldi::g_kaldi_verbose_level > 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v54, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"Iter = ", 7);
      long long v51 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)", delta-Q = ", 12);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v54);
    }
    if (v8 == 0.0) {
      break;
    }
    if (++v2 == 102)
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v54);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"Iterating too many times in MbrDecode; stopping.",
          48);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v54);
      }
      break;
    }
  }
  kaldi::MinimumBayesRisk::RemoveEps((uint64_t)this, (uint64_t)v3);
  kaldi::MinimumBayesRisk::RemoveEpsGamma(this);
  kaldi::MinimumBayesRisk::RemoveEpsGammaArcs(this);
}

void sub_1B23D9068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::MinimumBayesRisk::NormalizeEps(uint64_t a1, std::vector<unsigned int> *a2)
{
  kaldi::MinimumBayesRisk::RemoveEps(a1, (uint64_t)a2);
  std::vector<int>::resize(a2, (((char *)a2->__end_ - (char *)a2->__begin_) >> 1) | 1);
  begiuint64_t n = a2->__begin_;
  unint64_t v5 = (char *)a2->__end_ - (char *)a2->__begin_;
  if ((int)(v5 >> 2) >= 2)
  {
    unint64_t v6 = v5 >> 3;
    unint64_t v7 = ((v5 >> 3) & 0x7FFFFFFF) + 1;
    int v8 = 2 * v6 - 1;
    do
    {
      begin[v8] = begin[(v7 - 2)];
      begin[v8 + 1] = *(_DWORD *)(a1 + 8);
      --v7;
      v8 -= 2;
    }
    while (v7 > 1);
  }
  *begiuint64_t n = *(_DWORD *)(a1 + 8);
}

void kaldi::MinimumBayesRisk::AccStats(kaldi::MinimumBayesRisk *this)
{
  uint64_t v1 = this;
  uint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 3);
  unint64_t v3 = *((void *)this + 12) - *((void *)this + 11);
  memset(v245, 0, sizeof(v245));
  kaldi::Vector<double>::Resize(v245, v2, 0);
  unint64_t v185 = v3 >> 2;
  unsigned int v4 = (v3 >> 2) + 1;
  kaldi::Matrix<double>::Matrix((uint64_t)v243, v2, v4, 0, 0);
  memset(v242, 0, sizeof(v242));
  kaldi::Vector<double>::Resize((void **)v242, v4, 0);
  kaldi::Matrix<double>::Matrix((uint64_t)v240, v2, v4, 0, 0);
  memset(v239, 0, sizeof(v239));
  kaldi::Vector<double>::Resize(v239, v4, 0);
  std::vector<char>::vector(&v238, (int)v4);
  std::vector<std::map<int,double>>::vector(v237, (int)v4);
  std::vector<std::map<int,std::set<int>>>::vector(v236, (int)v4);
  std::vector<std::map<int,kaldi::MinimumBayesRisk::Arc>>::vector(v235, (int)v4);
  memset(v234, 0, sizeof(v234));
  kaldi::Vector<double>::Resize(v234, v4, 0);
  memset(v233, 0, sizeof(v233));
  kaldi::Vector<double>::Resize(v233, v4, 0);
  double v5 = kaldi::MinimumBayesRisk::EditDistance((uint64_t)v1, (int)v2 - 1, v3 >> 2, (uint64_t *)v245, v243, v242);
  double v6 = *((double *)v1 + 14);
  if (v6 != 0.0)
  {
    int v7 = kaldi::g_kaldi_verbose_level;
    BOOL v8 = v5 <= v6 || kaldi::g_kaldi_verbose_level < -1;
    if (v8) {
      goto LABEL_8;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v221);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v221, (uint64_t)"Edit distance increased: ", 25);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" > ", 3);
    std::ostream::operator<<();
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v221);
  }
  int v7 = kaldi::g_kaldi_verbose_level;
LABEL_8:
  uint64_t v179 = (v3 >> 2) + 1;
  *((double *)v1 + 14) = v5;
  if (v7 >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v221, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v221, (uint64_t)"L = ", 4);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v221);
  }
  *(void *)(v240[0] + 8 * v241 * ((int)v2 - 1) + 8 * (int)v185) = 0x3FF0000000000000;
  uint64_t v178 = v3;
  uint64_t v10 = (v3 >> 2);
  int v11 = v3 >> 2;
  unint64_t v189 = v1;
  if ((int)v2 <= 2) {
    goto LABEL_77;
  }
  uint64_t v12 = (int)v2;
  uint64_t v13 = *((void *)v1 + 5);
  uint64_t v14 = v179 - 1;
  int v190 = v185 - 1;
  uint64_t v15 = 8 * v10;
  uint64_t v192 = 8 * v12 - 8;
  while (2)
  {
    uint64_t v16 = v12 - 1;
    uint64_t v17 = *(void *)(v13 + 24 * (v12 - 1));
    if (*(void *)(v13 + 24 * (v12 - 1) + 8) == v17) {
      goto LABEL_75;
    }
    uint64_t v180 = v12;
    uint64_t v18 = 0;
    do
    {
      uint64_t v186 = v18;
      int v19 = *(_DWORD *)(v17 + 4 * v18);
      uint64_t v20 = *((void *)v1 + 2) + 72 * v19;
      long long v21 = *(_OWORD *)v20;
      LODWORD(v214) = *(_DWORD *)(v20 + 16);
      long long v213 = v21;
      uint64_t v215 = *(unsigned char **)(v20 + 24);
      uint64_t v216 = *(void *)(v20 + 32);
      uint64_t v218 = 0;
      uint64_t v219 = 0;
      float v217 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v217, *(const void **)(v20 + 40), *(void *)(v20 + 48), (uint64_t)(*(void *)(v20 + 48) - *(void *)(v20 + 40)) >> 2);
      int v220 = *(_DWORD *)(v20 + 64);
      uint64_t v22 = *(int *)(v20 + 4);
      int v23 = *(_DWORD *)v20;
      float v24 = *(float *)(v20 + 12);
      if (*(_DWORD *)v20 == *((_DWORD *)v1 + 2)) {
        double v25 = 0.0;
      }
      else {
        double v25 = 1.0;
      }
      uint64_t v26 = v242[0];
      *v242[0] = *(double *)(v243[0] + 8 * v244 * (int)v22) + v25 + 0.00000999999975;
      if (v11 >= 1)
      {
        uint64_t v27 = 0;
        do
        {
          int v28 = *(_DWORD *)(*((void *)v1 + 11) + 4 * v27);
          uint64_t v29 = (double *)(v243[0] + 8 * v244 * (int)v22 + 8 * v27);
          if (v23 == v28) {
            double v30 = 0.0;
          }
          else {
            double v30 = 1.0;
          }
          double v31 = v29[1];
          double v32 = v30 + *v29;
          int v33 = *((_DWORD *)v1 + 2);
          if (v23 == v33) {
            double v34 = 0.0;
          }
          else {
            double v34 = 1.0;
          }
          double v35 = v31 + v34 + 0.00000999999975;
          if (v33 == v28) {
            double v36 = 0.0;
          }
          else {
            double v36 = 1.0;
          }
          double v37 = v36 + v26[v27];
          if (v35 <= v37) {
            char v38 = 2;
          }
          else {
            char v38 = 3;
          }
          if (v35 <= v37) {
            double v39 = v35;
          }
          else {
            double v39 = v36 + v26[v27];
          }
          if (v32 <= v37) {
            char v40 = 1;
          }
          else {
            char v40 = 3;
          }
          if (v32 <= v37) {
            double v37 = v32;
          }
          if (v32 > v35)
          {
            double v41 = v39;
          }
          else
          {
            char v38 = v40;
            double v41 = v37;
          }
          v238.__begin_[v27 + 1] = v38;
          uint64_t v26 = v242[0];
          v242[0][++v27] = v41;
        }
        while (v14 != v27);
      }
      kaldi::VectorBase<double>::SetZero((uint64_t)v239);
      long long v42 = (double *)v239[0];
      double v43 = v24;
      if (v11 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = 8 * (2 * v10 + v185);
        do
        {
          long double v46 = exp(*((double *)v245[0] + v22) + v43 - *((double *)v245[0] + v16));
          uint64_t v47 = v240[0];
          int v48 = v241;
          double v49 = v42[(unint64_t)v15 / 8 + v44] + v46 * *(double *)(v240[0] + v192 * v241 + v15 + 8 * v44);
          v42[(unint64_t)v15 / 8 + v44] = v49;
          int v50 = v238.__begin_[v10 + v44];
          switch(v50)
          {
            case 1:
              *(double *)(v47 + 8 * v48 * (int)v22 + 8 * (v190 + v44)) = v49
                                                                                         + *(double *)(v47 + 8 * v48 * (int)v22 + 8 * (v190 + v44));
              double v62 = v42[(unint64_t)v15 / 8 + v44];
              uint64_t v63 = v236[0];
              LODWORD(v194[0]) = v23;
              int v246 = v19;
              if (v62 != 0.0)
              {
                LODWORD(v221) = v23;
                *(double *)&long long v222 = v62;
                long long v64 = std::__tree<std::__value_type<int,double>,std::__map_value_compare<int,std::__value_type<int,double>,std::less<int>,true>,std::allocator<std::__value_type<int,double>>>::__emplace_unique_key_args<int,std::pair<int const,double> const&>((uint64_t **)(v237[0] + v45), (int *)&v221, &v221);
                if (!v65) {
                  *((double *)v64 + 5) = v62 + *((double *)v64 + 5);
                }
                int v199 = v194;
                long long v66 = std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v63 + v45), (int *)v194, (uint64_t)&std::piecewise_construct, (_DWORD **)&v199);
                std::__tree<int>::__emplace_unique_key_args<int,int const&>(v66 + 5, &v246, &v246);
                long long v42 = (double *)v239[0];
              }
              float v67 = v42[(unint64_t)v15 / 8 + v44];
              *(float *)&uint64_t v214 = v67;
              long long v205 = v213;
              float v206 = v67;
              uint64_t v207 = v215;
              uint64_t v208 = v216;
              uint64_t v210 = 0;
              uint64_t v211 = 0;
              uint64_t v209 = 0;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v209, v217, (uint64_t)v218, (v218 - (unsigned char *)v217) >> 2);
              int v212 = v220;
              if (v206 != 0.0)
              {
                uint64_t v68 = v235[0];
                LODWORD(v221) = v23;
                long long v222 = v205;
                *(float *)&long long v223 = v206;
                long long v224 = v207;
                uint64_t v225 = v208;
                float v227 = 0;
                uint64_t v228 = 0;
                std::string __p = 0;
                std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v209, (uint64_t)v210, (v210 - (unsigned char *)v209) >> 2);
                int v229 = v212;
                long long v69 = std::__tree<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::__map_value_compare<int,std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::less<int>,true>,std::allocator<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>>>::__emplace_unique_key_args<int,std::pair<int const,kaldi::MinimumBayesRisk::Arc> const&>(v68 + v45, (int *)&v221, (uint64_t)&v221);
                if (!v70)
                {
                  long long v71 = v69;
                  if (*((float *)v69 + 14) < v206)
                  {
                    long long v72 = v205;
                    v69[9] = v208;
                    *(_OWORD *)(v69 + 5) = v72;
                    *((float *)v69 + 14) = v206;
                    v69[8] = (uint64_t)v207;
                    if (v69 + 9 != &v208) {
                      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v69 + 80, (char *)v209, (uint64_t)v210, (v210 - (unsigned char *)v209) >> 2);
                    }
                    *((_DWORD *)v71 + 26) = v212;
                  }
                }
                if (__p)
                {
                  float v227 = __p;
                  operator delete(__p);
                }
              }
              if (v209)
              {
                uint64_t v210 = v209;
                operator delete(v209);
              }
              uint64_t v1 = v189;
              uint64_t v73 = *((void *)v189 + 8);
              long long v42 = (double *)v239[0];
              long long v74 = (char *)v239[0] + v15;
              *(double *)((char *)v234[0] + 8 * v44 + v15) = *(double *)((char *)v234[0] + 8 * v44 + v15)
                                                           + (double)*(int *)(v73 + 4 * v22)
                                                           * *(double *)((char *)v239[0] + 8 * v44 + v15);
              double v75 = (double)*(int *)(v73 + 4 * v16);
              long long v60 = (char *)v233[0] + v15;
              double v61 = *(double *)((char *)v233[0] + 8 * v44 + v15) + v75 * *(double *)&v74[8 * v44];
              break;
            case 2:
              long long v60 = (char *)(v47 + 8 * v48 * (int)v22 + v15);
              double v61 = v49 + *(double *)&v60[8 * v44];
              break;
            case 3:
              v42[(v190 + v44)] = v49 + v42[(v190 + v44)];
              int v51 = *((_DWORD *)v1 + 2);
              uint64_t v52 = v1;
              uint64_t v53 = v236[0];
              LODWORD(v194[0]) = v51;
              int v246 = v19;
              if (v49 != 0.0)
              {
                LODWORD(v221) = v51;
                *(double *)&long long v222 = v49;
                long long v54 = std::__tree<std::__value_type<int,double>,std::__map_value_compare<int,std::__value_type<int,double>,std::less<int>,true>,std::allocator<std::__value_type<int,double>>>::__emplace_unique_key_args<int,std::pair<int const,double> const&>((uint64_t **)(v237[0] + v45), (int *)&v221, &v221);
                if (!v55) {
                  *((double *)v54 + 5) = v49 + *((double *)v54 + 5);
                }
                int v199 = v194;
                uint64_t v56 = std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v53 + v45), (int *)v194, (uint64_t)&std::piecewise_construct, (_DWORD **)&v199);
                std::__tree<int>::__emplace_unique_key_args<int,int const&>(v56 + 5, &v246, &v246);
                long long v42 = (double *)v239[0];
                uint64_t v52 = v189;
              }
              double v57 = v42[(unint64_t)v15 / 8 + v44];
              float v58 = v57;
              *(float *)&uint64_t v214 = v58;
              double v59 = (double)*(int *)(*((void *)v52 + 8) + 4 * v16);
              *(double *)((char *)v234[0] + 8 * v44 + v15) = *(double *)((char *)v234[0] + 8 * v44 + v15) + v59 * v57;
              *(double *)((char *)v233[0] + 8 * v44 + v15) = *(double *)((char *)v233[0] + 8 * v44 + v15)
                                                           + v59 * v42[(unint64_t)v15 / 8 + v44];
              uint64_t v1 = v52;
              goto LABEL_70;
            default:
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v221);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v221, (uint64_t)"Invalid b_arc value", 19);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v221);
          }
          *(double *)&v60[8 * v44] = v61;
LABEL_70:
          --v44;
          v45 -= 24;
        }
        while ((unint64_t)(v10 + v44 + 1) > 1);
      }
      long double v76 = exp(*((double *)v245[0] + v22) + v43 - *((double *)v245[0] + v16));
      uint64_t v77 = v240[0];
      int v78 = v241;
      double v79 = *v42 + v76 * *(double *)(v240[0] + 8 * v16 * v241);
      *long long v42 = v79;
      *(double *)(v77 + 8 * v78 * (int)v22) = v79 + *(double *)(v77 + 8 * v78 * (int)v22);
      if (v217)
      {
        uint64_t v218 = v217;
        operator delete(v217);
      }
      int v11 = v185;
      uint64_t v18 = v186 + 1;
      uint64_t v13 = *((void *)v1 + 5);
      uint64_t v17 = *(void *)(v13 + 24 * v16);
      uint64_t v14 = v179 - 1;
    }
    while (v186 + 1 < (unint64_t)((*(void *)(v13 + 24 * v16 + 8) - v17) >> 2));
    uint64_t v12 = v180;
LABEL_75:
    v192 -= 8;
    BOOL v8 = v12 <= 3;
    uint64_t v12 = v16;
    if (!v8) {
      continue;
    }
    break;
  }
LABEL_77:
  kaldi::VectorBase<double>::SetZero((uint64_t)v239);
  if (v11 < 1) {
    goto LABEL_100;
  }
  std::string v80 = (double *)v239[0];
  uint64_t v81 = 8 * (2 * v10 + v11);
  do
  {
    double v82 = *(double *)(v240[0] + 8 * v241 + 8 * v10) + v80[v10];
    v80[v10] = v82;
    uint64_t v83 = v10 - 1;
    v80[(v10 - 1)] = v82 + v80[(v10 - 1)];
    if (v82 != 0.0)
    {
      LODWORD(v221) = *((_DWORD *)v1 + 2);
      *(double *)&long long v222 = v82;
      long long v84 = std::__tree<std::__value_type<int,double>,std::__map_value_compare<int,std::__value_type<int,double>,std::less<int>,true>,std::allocator<std::__value_type<int,double>>>::__emplace_unique_key_args<int,std::pair<int const,double> const&>((uint64_t **)(v237[0] + v81), (int *)&v221, &v221);
      if (!v85) {
        *((double *)v84 + 5) = v82 + *((double *)v84 + 5);
      }
      std::string v80 = (double *)v239[0];
    }
    double v86 = (double)*(int *)(*((void *)v1 + 8) + 4);
    *((double *)v234[0] + v10) = *((double *)v234[0] + v10) + v86 * v80[v10];
    *((double *)v233[0] + v10) = *((double *)v233[0] + v10) + v86 * v80[v10];
    v81 -= 24;
    --v10;
  }
  while ((unint64_t)(v83 + 1) > 1);
  if ((int)v185 < 1)
  {
LABEL_100:
    char v100 = 1;
    uint64_t v88 = v178;
  }
  else
  {
    uint64_t v87 = 1;
    uint64_t v88 = v178;
    do
    {
      long long v89 = (void *)(v237[0] + 24 * v87);
      long long v92 = (void *)*v89;
      long long v90 = v89 + 1;
      long long v91 = v92;
      double v93 = 0.0;
      if (v92 != v90)
      {
        do
        {
          long long v94 = (void *)v91[1];
          long long v95 = v91;
          if (v94)
          {
            do
            {
              long long v96 = v94;
              long long v94 = (void *)*v94;
            }
            while (v94);
          }
          else
          {
            do
            {
              long long v96 = (void *)v95[2];
              BOOL v97 = *v96 == (void)v95;
              long long v95 = v96;
            }
            while (!v97);
          }
          double v93 = v93 + *((double *)v91 + 5);
          long long v91 = v96;
        }
        while (v96 != v90);
      }
      if (fabs(v93 + -1.0) > 0.1 && kaldi::g_kaldi_verbose_level > -2)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v221);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v221, (uint64_t)"sum of gamma[", 13);
        int v99 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)",s] is ", 7);
        std::ostream::operator<<();
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v221);
      }
      ++v87;
    }
    while (v87 != v179);
    char v100 = 0;
    uint64_t v1 = v189;
  }
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)v1 + 15);
  float v191 = (void *)((char *)v1 + 120);
  std::vector<std::vector<std::pair<int,float>>>::resize((uint64_t *)v1 + 15, (int)(v88 >> 2));
  uint64_t v101 = *((void *)v1 + 18);
  uint64_t v188 = (uint64_t *)((char *)v1 + 144);
  uint64_t v102 = *((void *)v1 + 19);
  if (v102 != v101)
  {
    do
    {
      uint64_t v103 = v102 - 24;
      std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(v102 - 24, *(void **)(v102 - 16));
      uint64_t v102 = v103;
    }
    while (v103 != v101);
  }
  *((void *)v1 + 19) = v101;
  std::vector<std::map<int,std::set<int>>>::resize(v188, (int)(v88 >> 2));
  float v104 = (_DWORD *)*((void *)v1 + 21);
  int v187 = (uint64_t *)((char *)v1 + 168);
  int v105 = (_DWORD *)*((void *)v1 + 22);
  while (v105 != v104)
  {
    v105 -= 6;
    uint64_t v221 = v105;
    std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v221);
  }
  *((void *)v1 + 22) = v104;
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::resize(v187, (int)(v88 >> 2));
  if ((v100 & 1) == 0)
  {
    unint64_t v183 = (_DWORD *)*MEMORY[0x1E4FBA408];
    uint64_t v184 = (uint64_t)v1 + 192;
    uint64_t v181 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    float v182 = *(_DWORD **)(MEMORY[0x1E4FBA408] + 64);
    uint64_t v106 = 1;
    do
    {
      uint64_t v107 = (double **)(v237[0] + 24 * v106);
      uint64_t v108 = *v107;
      uint64_t v193 = v106;
      if (*v107 != (double *)(v107 + 1))
      {
        uint64_t v109 = v106 - 1;
        do
        {
          int v110 = (unint64_t **)(*v191 + 24 * v109);
          *(float *)&unsigned int v111 = v108[5];
          unint64_t v112 = *((unsigned int *)v108 + 8) | ((unint64_t)v111 << 32);
          uint64_t v114 = (void **)(v110 + 1);
          uint64_t v113 = v110[1];
          v116 = v110 + 2;
          unint64_t v115 = (unint64_t)v110[2];
          if ((unint64_t)v113 >= v115)
          {
            uint64_t v118 = v113 - *v110;
            if ((unint64_t)(v118 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v119 = v115 - (void)*v110;
            uint64_t v120 = v119 >> 2;
            if (v119 >> 2 <= (unint64_t)(v118 + 1)) {
              uint64_t v120 = v118 + 1;
            }
            if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v121 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v121 = v120;
            }
            if (v121) {
              float v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v116, v121);
            }
            else {
              float v122 = 0;
            }
            float v123 = (unint64_t *)&v122[8 * v118];
            *float v123 = v112;
            unsigned int v117 = v123 + 1;
            int v124 = (char *)*v114;
            unsigned int v125 = *v110;
            if (*v114 != *v110)
            {
              do
              {
                unint64_t v126 = *((void *)v124 - 1);
                v124 -= 8;
                *--float v123 = v126;
              }
              while (v124 != (char *)v125);
              int v124 = (char *)*v110;
            }
            *int v110 = v123;
            *uint64_t v114 = v117;
            void *v116 = &v122[8 * v121];
            if (v124) {
              operator delete(v124);
            }
            uint64_t v106 = v193;
          }
          else
          {
            *uint64_t v113 = v112;
            unsigned int v117 = v113 + 1;
          }
          *uint64_t v114 = v117;
          int v127 = (double *)*((void *)v108 + 1);
          if (v127)
          {
            do
            {
              float v128 = v127;
              int v127 = *(double **)v127;
            }
            while (v127);
          }
          else
          {
            do
            {
              float v128 = (double *)*((void *)v108 + 2);
              BOOL v97 = *(void *)v128 == (void)v108;
              uint64_t v108 = v128;
            }
            while (!v97);
          }
          uint64_t v108 = v128;
        }
        while (v128 != (double *)(v237[0] + 24 * v106 + 8));
      }
      float v129 = (void *)(v236[0] + 24 * v106);
      BOOL v132 = (int *)*v129;
      float v130 = (int *)(v129 + 1);
      float v131 = v132;
      if (v132 != v130)
      {
        do
        {
          int64_t v133 = (uint64_t **)(*v188 + 24 * (v193 - 1));
          uint64_t v221 = v131 + 8;
          unint64_t v134 = std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v133, v131 + 8, (uint64_t)&std::piecewise_construct, &v221);
          std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t *)v134 + 5, *((int **)v131 + 5), v131 + 12);
          float v135 = (int *)*((void *)v131 + 1);
          if (v135)
          {
            do
            {
              int v136 = v135;
              float v135 = *(int **)v135;
            }
            while (v135);
          }
          else
          {
            do
            {
              int v136 = (int *)*((void *)v131 + 2);
              BOOL v97 = *(void *)v136 == (void)v131;
              float v131 = v136;
            }
            while (!v97);
          }
          float v131 = v136;
        }
        while (v136 != v130);
      }
      char v137 = (void *)(v235[0] + 24 * v193);
      float v138 = (void *)*v137;
      uint64_t v139 = v193 - 1;
      uint64_t v1 = v189;
      if ((void *)*v137 != v137 + 1)
      {
        do
        {
          uint64_t v140 = *v187;
          long long v213 = *((_OWORD *)v138 + 4);
          uint64_t v215 = 0;
          uint64_t v216 = 0;
          uint64_t v214 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v214, (const void *)v138[10], v138[11], (uint64_t)(v138[11] - v138[10]) >> 2);
          LODWORD(v217) = *((_DWORD *)v138 + 26);
          LODWORD(v221) = *((_DWORD *)v138 + 8);
          long long v222 = v213;
          long long v223 = 0;
          long long v224 = 0;
          uint64_t v225 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v223, v214, (uint64_t)v215, (v215 - (unsigned char *)v214) >> 2);
          LODWORD(__p) = v217;
          uint64_t v141 = v140 + 24 * v139;
          unint64_t v144 = *(void *)(v141 + 8);
          unint64_t v142 = *(void *)(v141 + 16);
          unint64_t v143 = (uint64_t *)(v141 + 8);
          if (v144 >= v142)
          {
            uint64_t v145 = std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__push_back_slow_path<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>((uint64_t *)(v140 + 24 * v139), (uint64_t)&v221);
          }
          else
          {
            *(_DWORD *)unint64_t v144 = v221;
            *(_OWORD *)(v144 + 8) = v222;
            *(void *)(v144 + 32) = 0;
            *(void *)(v144 + 40) = 0;
            *(void *)(v144 + 24) = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(v144 + 24), v223, (uint64_t)v224, (v224 - (unsigned char *)v223) >> 2);
            *(_DWORD *)(v144 + 48) = __p;
            uint64_t v145 = v144 + 56;
            *unint64_t v143 = v144 + 56;
          }
          *unint64_t v143 = v145;
          uint64_t v1 = v189;
          if (v223)
          {
            long long v224 = v223;
            operator delete(v223);
          }
          if (v214)
          {
            uint64_t v215 = v214;
            operator delete(v214);
          }
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v221);
          long long v213 = *((_OWORD *)v138 + 4);
          uint64_t v215 = 0;
          uint64_t v216 = 0;
          uint64_t v214 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v214, (const void *)v138[10], v138[11], (uint64_t)(v138[11] - v138[10]) >> 2);
          LODWORD(v217) = *((_DWORD *)v138 + 26);
          BOOL v146 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v146, (uint64_t)"_", 1);
          int v199 = (unint64_t *)v138[8];
          uint64_t v200 = v138[9];
          float v202 = 0;
          uint64_t v203 = 0;
          v201 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v201, (const void *)v138[10], v138[11], (uint64_t)(v138[11] - v138[10]) >> 2);
          int v204 = *((_DWORD *)v138 + 26);
          unint64_t v147 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, (uint64_t)"_", 1);
          v194[0] = v138[8];
          v194[1] = v138[9];
          int v196 = 0;
          uint64_t v197 = 0;
          uint64_t v195 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v195, (const void *)v138[10], v138[11], (uint64_t)(v138[11] - v138[10]) >> 2);
          int v198 = *((_DWORD *)v138 + 26);
          std::ostream::operator<<();
          if (v195)
          {
            int v196 = v195;
            operator delete(v195);
          }
          if (v201)
          {
            float v202 = v201;
            operator delete(v201);
          }
          if (v214)
          {
            uint64_t v215 = v214;
            operator delete(v214);
          }
          v194[0] = 0;
          long long v213 = *((_OWORD *)v138 + 4);
          uint64_t v215 = 0;
          uint64_t v216 = 0;
          uint64_t v214 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v214, (const void *)v138[10], v138[11], (uint64_t)(v138[11] - v138[10]) >> 2);
          LODWORD(v217) = *((_DWORD *)v138 + 26);
          uint64_t v148 = 0x100000000;
          if (!__CFADD__(HIDWORD(v213), DWORD2(v213))) {
            uint64_t v148 = 0;
          }
          uint64_t v149 = v148 | (HIDWORD(v213) + DWORD2(v213));
          int v150 = (int *)v214;
          if (v215 != v214)
          {
            unint64_t v151 = (v215 - (unsigned char *)v214) >> 2;
            if (v151 <= 1) {
              unint64_t v151 = 1;
            }
            uint64_t v152 = 6967;
            do
            {
              uint64_t v153 = *v150++;
              v149 += v152 * v153;
              v152 *= 7499;
              --v151;
            }
            while (v151);
          }
          std::stringbuf::str();
          uint64_t v154 = HIBYTE(v201);
          if (SHIBYTE(v201) < 0) {
            uint64_t v154 = v200;
          }
          uint64_t v155 = &v199;
          if (SHIBYTE(v201) < 0) {
            uint64_t v155 = (void **)v199;
          }
          for (uint64_t i = 0; v154; --v154)
          {
            uint64_t v157 = *(char *)v155;
            uint64_t v155 = (void **)((char *)v155 + 1);
            uint64_t i = v157 + 7853 * i;
          }
          if (SHIBYTE(v201) < 0) {
            operator delete(v199);
          }
          if (v214)
          {
            uint64_t v215 = v214;
            operator delete(v214);
          }
          v194[0] = i + v149;
          int v199 = v194;
          *((_WORD *)std::__hash_table<std::__hash_value_type<unsigned long,short>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,short>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,short>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,short>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v184, v194, (uint64_t)&std::piecewise_construct, &v199)+ 12) = 1;
          uint64_t v221 = v183;
          *(_DWORD **)((char *)&v221 + *((void *)v183 - 3)) = v182;
          *((void *)&v222 + 1) = v181;
          long long v223 = (void *)(MEMORY[0x1E4FBA470] + 16);
          if (v231 < 0) {
            operator delete(v230);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1B3EA8520](&v232);
          uint64_t v158 = (void *)v138[1];
          if (v158)
          {
            do
            {
              uint64_t v159 = v158;
              uint64_t v158 = (void *)*v158;
            }
            while (v158);
          }
          else
          {
            do
            {
              uint64_t v159 = (void *)v138[2];
              BOOL v97 = *v159 == (void)v138;
              float v138 = v159;
            }
            while (!v97);
          }
          float v138 = v159;
        }
        while (v159 != (void *)(v235[0] + 24 * v193 + 8));
      }
      uint64_t v160 = (uint64_t *)(*v191 + 24 * v139);
      uint64_t v161 = *v160;
      unint64_t v162 = (float *)v160[1];
      unint64_t v163 = 126 - 2 * __clz(((uint64_t)v162 - *v160) >> 3);
      if (v162 == (float *)v161) {
        uint64_t v164 = 0;
      }
      else {
        uint64_t v164 = v163;
      }
      std::__introsort<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *,false>(v161, v162, (uint64_t)&v221, v164, 1);
      uint64_t v106 = v193 + 1;
    }
    while (v193 + 1 != v179);
  }
  uint64_t v166 = *((void *)v1 + 29);
  int v165 = (void *)((char *)v1 + 232);
  v165[1] = v166;
  std::vector<std::pair<int,int>>::resize((uint64_t)v165, (int)(v88 >> 2));
  if ((v100 & 1) == 0)
  {
    unint64_t v167 = 1;
    do
    {
      float v168 = *((double *)v234[0] + v167);
      float v169 = (float *)(*v165 + 8 * (v167 - 1));
      *float v169 = v168;
      float v170 = *((double *)v233[0] + v167);
      v169[1] = v170;
      if (v168 > v170 && kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v221);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v221, (uint64_t)"Times out of order", 18);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v221);
      }
      if (v167 >= 2)
      {
        uint64_t v172 = *v165 + 8 * (v167 - 2);
        float v174 = *(float *)(v172 + 4);
        float v173 = (float *)(v172 + 4);
        float v175 = v174;
        float v176 = (float *)(*v165 + 8 * (v167 - 1));
        if (v174 > *v176)
        {
          float v177 = (float)(v175 + *v176) * 0.5;
          *float v176 = v177;
          *float v173 = v177;
        }
      }
      ++v167;
    }
    while (v167 != v179);
  }
  kaldi::Vector<float>::Destroy((uint64_t)v233);
  kaldi::Vector<float>::Destroy((uint64_t)v234);
  uint64_t v221 = v235;
  std::vector<std::map<int,kaldi::MinimumBayesRisk::Arc>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v221);
  uint64_t v221 = v236;
  std::vector<std::map<int,std::set<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v221);
  uint64_t v221 = v237;
  std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v221);
  if (v238.__begin_)
  {
    v238.__end_ = v238.__begin_;
    operator delete(v238.__begin_);
  }
  kaldi::Vector<float>::Destroy((uint64_t)v239);
  kaldi::Matrix<float>::~Matrix((uint64_t)v240);
  kaldi::Vector<float>::Destroy((uint64_t)v242);
  kaldi::Matrix<float>::~Matrix((uint64_t)v243);
  kaldi::Vector<float>::Destroy((uint64_t)v245);
}

void sub_1B23DA6DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x1B23DA714);
}

void sub_1B23DA70C(_Unwind_Exception *a1)
{
  if (v4)
  {
    double v5 = v4;
    operator delete(v4);
  }
  kaldi::Vector<float>::Destroy(&v6);
  kaldi::Vector<float>::Destroy(&v7);
  v3[0] = &v8;
  std::vector<std::map<int,kaldi::MinimumBayesRisk::Arc>>::__destroy_vector::operator()[abi:ne180100](v3);
  v3[0] = &v9;
  std::vector<std::map<int,std::set<int>>>::__destroy_vector::operator()[abi:ne180100](v3);
  v3[0] = &v10;
  std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100](v3);
  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }
  kaldi::Vector<float>::Destroy(&v13);
  kaldi::Matrix<float>::~Matrix(&v14);
  kaldi::Vector<float>::Destroy(v1 - 232);
  kaldi::Matrix<float>::~Matrix(v1 - 208);
  kaldi::Vector<float>::Destroy(v1 - 168);
  _Unwind_Resume(a1);
}

uint64_t kaldi::MinimumBayesRisk::RemoveEps(uint64_t result, uint64_t a2)
{
  unint64_t v3 = *(_DWORD **)a2;
  uint64_t v2 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v2)
  {
    int v4 = *(_DWORD *)(result + 8);
    while (*v3 != v4)
    {
      if (++v3 == v2) {
        return result;
      }
    }
    if (v3 != v2)
    {
      for (uint64_t i = v3 + 1; i != v2; ++i)
      {
        if (*i != v4) {
          *v3++ = *i;
        }
      }
    }
    if (v3 != v2) {
      *(void *)(a2 + 8) = v3;
    }
  }
  return result;
}

void kaldi::MinimumBayesRisk::RemoveEpsGamma(kaldi::MinimumBayesRisk *this)
{
  int v33 = 0;
  double v34 = 0;
  unint64_t v35 = 0;
  double v30 = 0;
  double v31 = 0;
  unint64_t v32 = 0;
  uint64_t v2 = *((void *)this + 15);
  unint64_t v3 = (uint64_t *)((char *)this + 120);
  if (*((void *)this + 16) != v2)
  {
    unint64_t v4 = 0;
    do
    {
      std::string __p = 0;
      int v28 = 0;
      unint64_t v29 = 0;
      v26[0] = 0;
      v26[1] = 0;
      double v25 = (uint64_t *)v26;
      uint64_t v5 = *(void *)(v2 + 24 * v4);
      if (*(void *)(v2 + 24 * v4 + 8) != v5)
      {
        unint64_t v6 = 0;
        do
        {
          uint64_t v7 = (_DWORD *)(v5 + 8 * v6);
          if (*v7 != *((_DWORD *)this + 2))
          {
            uint64_t v8 = v28;
            if ((unint64_t)v28 >= v29)
            {
              int64_t v10 = (v28 - (unsigned char *)__p) >> 3;
              if ((unint64_t)(v10 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v11 = (uint64_t)(v29 - (void)__p) >> 2;
              if (v11 <= v10 + 1) {
                unint64_t v11 = v10 + 1;
              }
              if (v29 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v12 = v11;
              }
              if (v12) {
                uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v29, v12);
              }
              else {
                uint64_t v13 = 0;
              }
              uint64_t v14 = (uint64_t *)&v13[8 * v10];
              *uint64_t v14 = *(void *)v7;
              uint64_t v9 = v14 + 1;
              uint64_t v16 = (uint64_t *)__p;
              uint64_t v15 = (uint64_t *)v28;
              if (v28 != __p)
              {
                do
                {
                  uint64_t v17 = *--v15;
                  *--uint64_t v14 = v17;
                }
                while (v15 != v16);
                uint64_t v15 = (uint64_t *)__p;
              }
              std::string __p = v14;
              int v28 = (char *)v9;
              unint64_t v29 = (unint64_t)&v13[8 * v12];
              if (v15) {
                operator delete(v15);
              }
            }
            else
            {
              *(void *)int v28 = *(void *)v7;
              uint64_t v9 = (uint64_t *)(v8 + 8);
            }
            int v28 = (char *)v9;
            uint64_t v18 = (uint64_t **)(*((void *)this + 18) + 24 * v4);
            double v36 = v7;
            int v19 = std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v18, v7, (uint64_t)&std::piecewise_construct, &v36);
            double v36 = v7;
            uint64_t v20 = std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v25, v7, (uint64_t)&std::piecewise_construct, &v36);
            std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t *)v20 + 5, (int *)v19[5], (int *)v19 + 12);
            uint64_t v2 = *v3;
          }
          ++v6;
          uint64_t v5 = *(void *)(v2 + 24 * v4);
        }
        while (v6 < (*(void *)(v2 + 24 * v4 + 8) - v5) >> 3);
        if (v28 != __p)
        {
          long long v21 = v34;
          if ((unint64_t)v34 >= v35)
          {
            uint64_t v22 = (uint64_t **)std::vector<std::vector<std::pair<int,float>>>::__push_back_slow_path<std::vector<std::pair<int,float>> const&>((uint64_t *)&v33, (uint64_t **)&__p);
          }
          else
          {
            uint64_t *v34 = 0;
            v21[1] = 0;
            v21[2] = 0;
            std::vector<std::pair<int,float>>::__init_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>((char *)v21, (uint64_t *)__p, (uint64_t *)v28, (v28 - (unsigned char *)__p) >> 3);
            uint64_t v22 = v21 + 3;
          }
          double v34 = v22;
          int v23 = v31;
          if ((unint64_t)v31 >= v32)
          {
            float v24 = (uint64_t *)std::vector<std::map<int,std::set<int>>>::__push_back_slow_path<std::map<int,std::set<int>> const&>((uint64_t *)&v30, (uint64_t)&v25);
          }
          else
          {
            std::map<int,std::set<int>>::map[abi:ne180100](v31, (uint64_t)&v25);
            float v24 = v23 + 3;
          }
          double v31 = v24;
        }
      }
      std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy((uint64_t)&v25, v26[0]);
      if (__p)
      {
        int v28 = (char *)__p;
        operator delete(__p);
      }
      ++v4;
      uint64_t v2 = *((void *)this + 15);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 16) - v2) >> 3) > v4);
  }
  if (v3 != (uint64_t *)&v33) {
    std::vector<std::vector<std::pair<int,float>>>::__assign_with_size[abi:ne180100]<std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*>(v3, v33, v34, 0xAAAAAAAAAAAAAAABLL * (v34 - v33));
  }
  if ((void ***)((char *)this + 144) != &v30) {
    std::vector<std::map<int,std::set<int>>>::__assign_with_size[abi:ne180100]<std::map<int,std::set<int>>*,std::map<int,std::set<int>>*>((uint64_t)this + 144, (uint64_t)v30, (uint64_t **)v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
  }
  std::string __p = &v30;
  std::vector<std::map<int,std::set<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  double v30 = (void **)&v33;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v30);
}

void sub_1B23DAB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char **__p, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  std::string __p = &a15;
  std::vector<std::map<int,std::set<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a15 = &a18;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void kaldi::MinimumBayesRisk::RemoveEpsGammaArcs(kaldi::MinimumBayesRisk *this)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  unint64_t v17 = 0;
  uint64_t v1 = (uint64_t *)*((void *)this + 21);
  uint64_t v2 = (uint64_t **)((char *)this + 168);
  if (*((uint64_t **)this + 22) != v1)
  {
    unint64_t v4 = 0;
    do
    {
      unint64_t v12 = 0;
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      uint64_t v5 = v1[3 * v4];
      if (v1[3 * v4 + 1] != v5)
      {
        uint64_t v6 = 0;
        uint64_t v7 = 0;
        unint64_t v8 = 0;
        do
        {
          uint64_t v9 = v5 + v6;
          if (*(_DWORD *)(v5 + v6) != *((_DWORD *)this + 2))
          {
            if ((unint64_t)v7 >= v14)
            {
              uint64_t v7 = (void **)std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__push_back_slow_path<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const&>((uint64_t *)&v12, v9);
            }
            else
            {
              std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::pair[abi:ne180100]((uint64_t)v7, v9);
              v7 += 7;
            }
            uint64_t v13 = v7;
            uint64_t v1 = *v2;
          }
          ++v8;
          uint64_t v5 = v1[3 * v4];
          v6 += 56;
        }
        while (0x6DB6DB6DB6DB6DB7 * ((v1[3 * v4 + 1] - v5) >> 3) > v8);
        if (v7 != v12)
        {
          int64_t v10 = v16;
          if ((unint64_t)v16 >= v17)
          {
            unint64_t v11 = (uint64_t *)std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__push_back_slow_path<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> const&>((uint64_t *)&v15, (uint64_t *)&v12);
          }
          else
          {
            *uint64_t v16 = 0;
            v10[1] = 0;
            uint64_t v10[2] = 0;
            std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__init_with_size[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(v10, (uint64_t)v12, (uint64_t)v13, 0x6DB6DB6DB6DB6DB7 * (v13 - v12));
            unint64_t v11 = v10 + 3;
          }
          uint64_t v16 = v11;
        }
      }
      uint64_t v18 = &v12;
      std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
      ++v4;
      uint64_t v1 = (uint64_t *)*((void *)this + 21);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 22) - (void)v1) >> 3) > v4);
  }
  if (v2 != &v15) {
    std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__assign_with_size[abi:ne180100]<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>((uint64_t)v2, v15, v16, 0xAAAAAAAAAAAAAAABLL * (v16 - v15));
  }
  unint64_t v12 = (void **)&v15;
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100](&v12);
}

void sub_1B23DADB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

double kaldi::MinimumBayesRisk::EditDistance(uint64_t a1, int a2, int a3, uint64_t *a4, uint64_t *a5, double **a6)
{
  uint64_t v6 = *a4;
  *(void *)(*a4 + 8) = 0;
  uint64_t v49 = *((int *)a5 + 4);
  uint64_t v50 = *a5;
  *(void *)(*a5 + 8 * v49) = 0;
  if (a3 >= 1)
  {
    uint64_t v7 = 0;
    int v8 = *(_DWORD *)(a1 + 8);
    uint64_t v9 = *(void *)(a1 + 88);
    double v10 = 0.0;
    do
    {
      if (v8 == *(_DWORD *)(v9 + 4 * v7)) {
        double v11 = 0.0;
      }
      else {
        double v11 = 1.0;
      }
      double v10 = v10 + v11;
      *(double *)(v50 + 8 * v49 + 8 + 8 * v7++) = v10;
    }
    while ((a3 + 1) - 1 != v7);
  }
  if (a2 > 1)
  {
    uint64_t v57 = (a3 + 1);
    uint64_t v47 = (a2 + 1);
    uint64_t v48 = *(void *)(a1 + 40);
    uint64_t v12 = 2;
    uint64_t v13 = v50 + 16 * v49;
    do
    {
      unint64_t v14 = (int **)(v48 + 24 * v12);
      uint64_t v15 = *v14;
      uint64_t v16 = (char *)v14[1] - (char *)*v14;
      if (v16)
      {
        unint64_t v17 = v16 >> 2;
        uint64_t v18 = *(void *)(a1 + 16);
        if (v17 <= 1) {
          uint64_t v19 = 1;
        }
        else {
          uint64_t v19 = v17;
        }
        double v20 = -INFINITY;
        uint64_t v52 = v15;
        uint64_t v55 = v19;
        do
        {
          int v21 = *v15++;
          uint64_t v22 = v18 + 72 * v21;
          double v23 = *(double *)(v6 + 8 * *(int *)(v22 + 4)) + *(float *)(v22 + 12);
          double v24 = v20 - v23;
          if (v20 >= v23)
          {
            double v25 = v23 - v20;
          }
          else
          {
            double v20 = *(double *)(v6 + 8 * *(int *)(v22 + 4)) + *(float *)(v22 + 12);
            double v25 = v24;
          }
          if (v25 >= -36.0436534)
          {
            long double v26 = exp(v25);
            double v20 = v20 + log1p(v26);
          }
          --v19;
        }
        while (v19);
        uint64_t v56 = 0;
        uint64_t v27 = v12;
        *(double *)(v6 + 8 * v12) = v20;
        uint64_t v51 = *(void *)(a1 + 16);
        int v28 = *a6;
        do
        {
          if ((a3 & 0x80000000) == 0)
          {
            uint64_t v29 = 0;
            uint64_t v30 = 0;
            uint64_t v31 = 72 * v52[v56];
            int v32 = *(_DWORD *)(v51 + v31);
            uint64_t v33 = *(int *)(v51 + v31 + 4);
            double v34 = (double *)(v50 + 8 * (int)v33 * (int)v49);
            unint64_t v35 = *a6;
            double v36 = *(float *)(v51 + v31 + 12);
            do
            {
              if (v30)
              {
                int v37 = *(_DWORD *)(*(void *)(a1 + 88) + 4 * v30 - 4);
                if (v32 == v37) {
                  double v38 = 0.0;
                }
                else {
                  double v38 = 1.0;
                }
                double v39 = v38 + v34[v29 - 1];
                int v40 = *(_DWORD *)(a1 + 8);
                if (v32 == v40) {
                  double v41 = 0.0;
                }
                else {
                  double v41 = 1.0;
                }
                double v42 = v34[v29] + v41 + 0.00000999999975;
                if (v40 == v37) {
                  double v43 = 0.0;
                }
                else {
                  double v43 = 1.0;
                }
                if (v43 + v35[v29 - 1] < v42) {
                  double v42 = v43 + v35[v29 - 1];
                }
                if (v42 < v39) {
                  double v39 = v42;
                }
                v35[v29] = v39;
              }
              else
              {
                if (v32 == *(_DWORD *)(a1 + 8)) {
                  double v44 = 0.0;
                }
                else {
                  double v44 = 1.0;
                }
                *unint64_t v35 = *v34 + v44 + 0.00000999999975;
              }
              *(long double *)(v13 + 8 * v30) = *(double *)(v13 + 8 * v30)
                                              + exp(*(double *)(v6 + 8 * v33) + v36 - *(double *)(v6 + 8 * v27))
                                              * v28[v30];
              ++v30;
              ++v29;
            }
            while (v57 != v30);
          }
          ++v56;
        }
        while (v56 != v55);
      }
      else
      {
        uint64_t v27 = v12;
        *(void *)(v6 + 8 * v12) = 0xFFF0000000000000;
      }
      uint64_t v12 = v27 + 1;
      v13 += 8 * v49;
    }
    while (v27 + 1 != v47);
  }
  return *(double *)(v50 + 8 * (int)v49 * a2 + 8 * a3);
}

void std::vector<std::map<int,std::set<int>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::map<int,std::set<int>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      do
      {
        uint64_t v8 = v3 - 24;
        std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(v3 - 24, *(void **)(v3 - 16));
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      uint64_t v8 = v3;
      std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void kaldi::MinimumBayesRisk::MinimumBayesRisk(uint64_t a1, uint64_t a2, char a3, int a4, int a5)
{
  v96[4] = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a1 = a3;
  *(_DWORD *)(a1 + 4) = a4;
  *(_DWORD *)(a1 + 8) = a5;
  *(_OWORD *)(a1 + 16) = 0u;
  long long v72 = (uint64_t *)(a1 + 16);
  *(_OWORD *)(a1 + 64) = 0u;
  unint64_t v6 = (std::vector<int> *)(a1 + 64);
  *(_OWORD *)(a1 + 120) = 0u;
  long long v69 = (uint64_t *)(a1 + 40);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  uint64_t v7 = *(_DWORD **)(a2 + 8);
  ++v7[14];
  long long v94 = &unk_1F0A46010;
  long long v95 = v7;
  uint64_t v68 = v6;
  uint64_t v8 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v7 + 32))(v7, 0x3FFFFFFF0007);
  uint64_t v9 = v8;
  unint64_t v10 = *((void *)v95 + 9) - *((void *)v95 + 8);
  if ((int)(v10 >> 3) >= 1)
  {
    uint64_t v71 = v8;
    uint64_t v11 = 0;
    uint64_t v12 = (v10 >> 3);
    int v13 = 1;
    do
    {
      long long v90 = &unk_1F0A3E980;
      unint64_t v93 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck((uint64_t)&v94);
      uint64_t v91 = *(void *)(*((void *)v95 + 8) + 8 * v11);
      long long v92 = v95 + 2;
      unint64_t v14 = v93;
      uint64_t v15 = *(void *)(v91 + 48);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v91 + 56) - v15) >> 4);
      while (v14 < v16)
      {
        unint64_t v17 = (uint64_t *)(v15 + 48 * v14);
        uint64_t v84 = *v17;
        uint64_t v85 = v17[1];
        uint64_t v87 = 0;
        uint64_t v88 = 0;
        double v86 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v86, (const void *)v17[2], v17[3], (v17[3] - v17[2]) >> 2);
        int v89 = *(_DWORD *)(v15 + 48 * v14 + 40);
        if (v84 != HIDWORD(v84))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"arc.ilabel == arc.olabel", 24);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v73);
        }
        HIDWORD(v84) = v13;
        fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::SetValue((uint64_t)&v90, (float *)&v84);
        if (v86)
        {
          uint64_t v87 = v86;
          operator delete(v86);
        }
        unint64_t v14 = ++v93;
        uint64_t v15 = *(void *)(v91 + 48);
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v91 + 56) - v15) >> 4);
        ++v13;
      }
      ++v11;
    }
    while (v11 != v12);
    unint64_t v6 = v68;
    uint64_t v9 = v71;
  }
  v96[3] = 0;
  fst::CreateSuperFinal<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t)&v94, (uint64_t)v96);
  std::__function::__value_func<void ()(int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&)>::~__value_func[abi:ne180100](v96);
  if ((v9 & 0x4000000000) == 0) {
    fst::TopSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>();
  }
  kaldi::CompactLatticeStateTimes(&v94, v6);
  unint64_t v18 = *(void *)(a1 + 80);
  uint64_t v19 = *(_DWORD **)(a1 + 72);
  if ((unint64_t)v19 >= v18)
  {
    begiuint64_t n = v6->__begin_;
    uint64_t v22 = v19 - v6->__begin_;
    unint64_t v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v24 = v18 - (void)begin;
    if (v24 >> 1 > v23) {
      unint64_t v23 = v24 >> 1;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25)
    {
      long double v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 80, v25);
      begiuint64_t n = *(std::vector<int>::pointer *)(a1 + 64);
      uint64_t v19 = *(_DWORD **)(a1 + 72);
    }
    else
    {
      long double v26 = 0;
    }
    uint64_t v27 = &v26[4 * v22];
    int v28 = &v26[4 * v25];
    *(_DWORD *)uint64_t v27 = 0;
    double v20 = v27 + 4;
    while (v19 != begin)
    {
      int v29 = *--v19;
      *((_DWORD *)v27 - 1) = v29;
      v27 -= 4;
    }
    *(void *)(a1 + 64) = v27;
    *(void *)(a1 + 72) = v20;
    *(void *)(a1 + 80) = v28;
    if (begin) {
      operator delete(begin);
    }
  }
  else
  {
    *uint64_t v19 = 0;
    double v20 = v19 + 1;
  }
  *(void *)(a1 + 72) = v20;
  uint64_t v30 = *(void *)(a1 + 64);
  if ((_DWORD *)((char *)v20 - v30) != (_DWORD *)4) {
    memmove((void *)(v30 + 4), (const void *)v30, (size_t)v20 - v30 - 4);
  }
  unint64_t v31 = *((void *)v95 + 9) - *((void *)v95 + 8);
  std::vector<std::vector<int>>::resize(v69, (uint64_t)((v31 << 29) + 0x100000000) >> 32);
  uint64_t v81 = 0;
  double v82 = 0;
  uint64_t v83 = 0;
  if ((int)(v31 >> 3) >= 1)
  {
    uint64_t v70 = (v31 >> 3) + 1;
    uint64_t v32 = 1;
    do
    {
      long long v90 = &unk_1F0A3E980;
      unint64_t v93 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck((uint64_t)&v94);
      uint64_t v91 = *(void *)(*((void *)v95 + 8) + 8 * v32 - 8);
      long long v92 = v95 + 2;
      unint64_t v33 = v93;
      uint64_t v34 = *(void *)(v91 + 48);
      for (uint64_t i = *(void *)(v91 + 56) - v34; v33 < 0xAAAAAAAAAAAAAAABLL * (i >> 4); uint64_t i = *(void *)(v91 + 56) - v34)
      {
        double v36 = (uint64_t *)(v34 + 48 * v33);
        uint64_t v84 = *v36;
        uint64_t v85 = v36[1];
        uint64_t v87 = 0;
        uint64_t v88 = 0;
        double v86 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v86, (const void *)v36[2], v36[3], (v36[3] - v36[2]) >> 2);
        int v89 = *(_DWORD *)(v34 + 48 * v33 + 40);
        int v37 = HIDWORD(v84) - 1;
        double v38 = v82;
        if (v82 >= v83)
        {
          int v40 = v81;
          uint64_t v41 = v82 - v81;
          unint64_t v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v43 = (char *)v83 - (char *)v81;
          if (((char *)v83 - (char *)v81) >> 1 > v42) {
            unint64_t v42 = v43 >> 1;
          }
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v42;
          }
          if (v44)
          {
            uint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v83, v44);
            int v40 = v81;
            double v38 = v82;
          }
          else
          {
            uint64_t v45 = 0;
          }
          long double v46 = (int *)&v45[4 * v41];
          *long double v46 = v37;
          double v39 = v46 + 1;
          while (v38 != v40)
          {
            int v47 = *--v38;
            *--long double v46 = v47;
          }
          uint64_t v81 = v46;
          double v82 = v39;
          uint64_t v83 = (int *)&v45[4 * v44];
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *double v82 = v37;
          double v39 = v38 + 1;
        }
        double v82 = v39;
        HIDWORD(v84) = v84;
        std::string __p = 0;
        int v78 = 0;
        uint64_t v79 = 0;
        LODWORD(v73[0]) = v84;
        if ((int)v84 > *(_DWORD *)(a1 + 8)) {
          *(_DWORD *)(a1 + 8) = v84;
        }
        HIDWORD(v73[0]) = v32;
        LODWORD(v73[1]) = v89 + 1;
        *((float *)&v73[1] + 1) = -(float)(*(float *)&v85 + *((float *)&v85 + 1));
        uint64_t v75 = v84;
        uint64_t v76 = v85;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&__p, v86, (uint64_t)v87, (v87 - v86) >> 2);
        int v80 = v89;
        uint64_t v48 = *(void *)(a1 + 40) + 24 * SLODWORD(v73[1]);
        int v49 = 954437177 * ((*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3);
        uint64_t v51 = (_DWORD **)(v48 + 8);
        uint64_t v50 = *(_DWORD **)(v48 + 8);
        uint64_t v53 = (void *)(v48 + 16);
        unint64_t v52 = *(void *)(v48 + 16);
        if ((unint64_t)v50 >= v52)
        {
          uint64_t v55 = *(_DWORD **)v48;
          uint64_t v56 = ((uint64_t)v50 - *(void *)v48) >> 2;
          unint64_t v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v58 = v52 - (void)v55;
          if (v58 >> 1 > v57) {
            unint64_t v57 = v58 >> 1;
          }
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v59 = v57;
          }
          if (v59)
          {
            long long v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v53, v59);
            uint64_t v50 = *v51;
            uint64_t v55 = *(_DWORD **)v48;
          }
          else
          {
            long long v60 = 0;
          }
          double v61 = &v60[4 * v56];
          *(_DWORD *)double v61 = v49;
          long long v54 = v61 + 4;
          while (v50 != v55)
          {
            int v62 = *--v50;
            *((_DWORD *)v61 - 1) = v62;
            v61 -= 4;
          }
          *(void *)uint64_t v48 = v61;
          void *v51 = v54;
          *uint64_t v53 = &v60[4 * v59];
          if (v55) {
            operator delete(v55);
          }
        }
        else
        {
          *uint64_t v50 = v49;
          long long v54 = v50 + 1;
        }
        void *v51 = v54;
        unint64_t v63 = *(void *)(a1 + 24);
        if (v63 >= *(void *)(a1 + 32))
        {
          uint64_t v65 = std::vector<kaldi::MinimumBayesRisk::Arc>::__push_back_slow_path<kaldi::MinimumBayesRisk::Arc const&>(v72, (long long *)v73);
        }
        else
        {
          long long v64 = *(_OWORD *)v73;
          *(_DWORD *)(v63 + 16) = v74;
          *(_OWORD *)unint64_t v63 = v64;
          *(void *)(v63 + 24) = v75;
          *(void *)(v63 + 32) = v76;
          *(void *)(v63 + 48) = 0;
          *(void *)(v63 + 56) = 0;
          *(void *)(v63 + 40) = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(v63 + 40), __p, (uint64_t)v78, (v78 - (unsigned char *)__p) >> 2);
          *(_DWORD *)(v63 + 64) = v80;
          uint64_t v65 = v63 + 72;
          *(void *)(a1 + 24) = v63 + 72;
        }
        *(void *)(a1 + 24) = v65;
        fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::SetValue((uint64_t)&v90, (float *)&v84);
        if (__p)
        {
          int v78 = __p;
          operator delete(__p);
        }
        if (v86)
        {
          uint64_t v87 = v86;
          operator delete(v86);
        }
        unint64_t v33 = ++v93;
        uint64_t v34 = *(void *)(v91 + 48);
      }
      ++v32;
    }
    while (v32 != v70);
  }
  int v67 = *(_DWORD *)(a1 + 4);
  int v66 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v66 + 1;
  if (v66 + 1 == v67) {
    *(_DWORD *)(a1 + 8) = v66 + 2;
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v73, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"MBR Sausage Alignment Epsilon Symbol is ", 40);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v73);
  }
  fst::RemoveAlignmentsFromCompactLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)&v94);
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst();
}

void sub_1B23DBF60(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B23DC040);
}

void fst::RemoveAlignmentsFromCompactLattice<fst::LatticeWeightTpl<float>,int>(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  if (v2 >= 1)
  {
    int v3 = v2;
    uint64_t v4 = 0;
    do
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 296))(a1, v4, &v21);
      while (!(*(unsigned int (**)(uint64_t))(*(void *)v21 + 24))(v21))
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 32))(v21);
        uint64_t v15 = *(void *)v5;
        unint64_t v16 = *(void **)(v5 + 8);
        unint64_t v18 = 0;
        uint64_t v19 = 0;
        unint64_t v17 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v17, *(const void **)(v5 + 16), *(void *)(v5 + 24), (uint64_t)(*(void *)(v5 + 24) - *(void *)(v5 + 16)) >> 2);
        int v20 = *(_DWORD *)(v5 + 40);
        uint64_t v11 = v16;
        int v13 = 0;
        uint64_t v14 = 0;
        std::string __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, 0, 0, 0);
        unint64_t v16 = v11;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v17, (char *)__p, (uint64_t)v13, (v13 - (unsigned char *)__p) >> 2);
        if (__p)
        {
          int v13 = __p;
          operator delete(__p);
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v21 + 88))(v21, &v15);
        if (v17)
        {
          unint64_t v18 = v17;
          operator delete(v17);
        }
        (*(void (**)(uint64_t))(*(void *)v21 + 40))(v21);
      }
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v15, a1, v4);
      LODWORD(v21) = HIDWORD(v15);
      LODWORD(v11) = v15;
      int v23 = 2139095040;
      float v22 = INFINITY;
      if (*(float *)&v15 != INFINITY || *(float *)&v21 != v22 || (unint64_t v6 = v16, v17 != v16))
      {
        uint64_t v7 = v15;
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        uint64_t v8 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v8, 0, 0, 0);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 184))(a1, v4, &v7);
        if (v8)
        {
          uint64_t v9 = v8;
          operator delete(v8);
        }
        unint64_t v6 = v16;
      }
      if (v6)
      {
        unint64_t v17 = v6;
        operator delete(v6);
      }
      uint64_t v4 = (v4 + 1);
    }
    while (v4 != v3);
  }
}

void sub_1B23DC37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::MinimumBayesRisk::TestSausageConsistency(void *a1, uint64_t a2)
{
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  unint64_t v32 = 0;
  unint64_t v3 = *(void *)(*(void *)(a2 + 8) + 72) - *(void *)(*(void *)(a2 + 8) + 64);
  if ((int)(v3 >> 3) >= 1)
  {
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = (v3 >> 3);
    do
    {
      uint64_t v8 = *(void *)(*(void *)(*(void *)(a2 + 8) + 64) + 8 * v6);
      uint64_t v10 = *(void *)(v8 + 48);
      uint64_t v9 = *(void *)(v8 + 56);
      if (v9 == v10) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = *(void *)(v8 + 48);
      }
      if (v9 != v10)
      {
        if ((unint64_t)((v9 - v10) / 48) <= 1) {
          uint64_t v12 = 1;
        }
        else {
          uint64_t v12 = (v9 - v10) / 48;
        }
        do
        {
          if (v5 >= v32)
          {
            unint64_t v5 = std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__emplace_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>(&v30, v11);
          }
          else
          {
            std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__construct_one_at_end[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>((uint64_t)&v30, v11);
            v5 += 48;
          }
          unint64_t v31 = v5;
          v11 += 48;
          --v12;
        }
        while (v12);
      }
      ++v6;
    }
    while (v6 != v7);
  }
  uint64_t v14 = a1[15];
  uint64_t v13 = a1[16];
  if (v13 - v14 != a1[19] - a1[18])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"sausage_stats.size() == sausage_origins.size()", 46);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
  if (v13 != v14)
  {
    unint64_t v15 = 0;
    do
    {
      unint64_t v16 = (int **)(v14 + 24 * v15);
      unint64_t v17 = *v16;
      unint64_t v18 = v16[1];
      if (*v16 != v18)
      {
        do
        {
          if (*v17 >= 1)
          {
            uint64_t v19 = a1[18];
            if (0xAAAAAAAAAAAAAAABLL * ((a1[19] - v19) >> 3) <= v15) {
              std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
            }
            int v20 = std::map<int,std::set<int>>::at(v19 + 24 * v15, v17);
            uint64_t v23 = *v20;
            uint64_t v21 = v20 + 1;
            float v22 = (void *)v23;
            if ((uint64_t *)v23 != v21)
            {
              do
              {
                unint64_t v24 = *((int *)v22 + 7);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - v30) >> 4) <= v24) {
                  std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                }
                if (*(_DWORD *)(v30 + 48 * (int)v24 + 4) != *v17)
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"arc.olabel == word_id", 21);
                  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
                }
                unint64_t v25 = (uint64_t *)v22[1];
                if (v25)
                {
                  do
                  {
                    long double v26 = v25;
                    unint64_t v25 = (uint64_t *)*v25;
                  }
                  while (v25);
                }
                else
                {
                  do
                  {
                    long double v26 = (uint64_t *)v22[2];
                    BOOL v27 = *v26 == (void)v22;
                    float v22 = v26;
                  }
                  while (!v27);
                }
                float v22 = v26;
              }
              while (v26 != v21);
            }
          }
          v17 += 2;
        }
        while (v17 != v18);
        uint64_t v14 = a1[15];
        uint64_t v13 = a1[16];
      }
      ++v15;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v13 - v14) >> 3) > v15);
  }
  v29[0] = (void **)&v30;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](v29);
  return 1;
}

uint64_t **std::__tree<std::__value_type<int,double>,std::__map_value_compare<int,std::__value_type<int,double>,std::less<int>,true>,std::allocator<std::__value_type<int,double>>>::__emplace_unique_key_args<int,std::pair<int const,double> const&>(uint64_t **a1, int *a2, _OWORD *a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v10 + 2) = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::__tree<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::__map_value_compare<int,std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::less<int>,true>,std::allocator<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>>>::__emplace_unique_key_args<int,std::pair<int const,kaldi::MinimumBayesRisk::Arc> const&>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v5 = (uint64_t **)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    int v6 = *a2;
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v4;
        int v8 = *((_DWORD *)v4 + 8);
        if (v6 >= v8) {
          break;
        }
        uint64_t v4 = *v7;
        unint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }
      if (v8 >= v6) {
        break;
      }
      uint64_t v4 = v7[1];
      if (!v4)
      {
        unint64_t v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::__map_value_compare<int,std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::less<int>,true>,std::allocator<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>>>::__construct_node<std::pair<int const,kaldi::MinimumBayesRisk::Arc> const&>(a1, a3, (uint64_t)&v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v7, v5, v10);
    return v10;
  }
  return (uint64_t *)v7;
}

uint64_t std::__tree<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::__map_value_compare<int,std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::less<int>,true>,std::allocator<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>>>::__construct_node<std::pair<int const,kaldi::MinimumBayesRisk::Arc> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x70uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<int const,kaldi::MinimumBayesRisk::Arc>::pair[abi:ne180100]((uint64_t)v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B23DC8E0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::pair<int const,kaldi::MinimumBayesRisk::Arc>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 48), *(const void **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 2);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return a1;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (void *)__p[10];
    if (v3)
    {
      __p[11] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::set<int>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::__tree<int>::destroy((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t std::vector<std::map<int,std::set<int>>>::__push_back_slow_path<std::map<int,std::set<int>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = (uint64_t *)&v10[24 * v4];
  unint64_t v16 = &v10[24 * v9];
  std::map<int,std::set<int>>::map[abi:ne180100](v14, a2);
  unint64_t v15 = v14 + 3;
  std::vector<std::map<int,std::set<int>>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::map<int,std::set<int>>>::~__split_buffer(&v13);
  return v11;
}

void sub_1B23DCB20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::map<int,std::set<int>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::map<int,std::set<int>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<int,std::set<int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,std::set<int>>,std::__tree_node<std::__value_type<int,std::set<int>>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1B23DCB74(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<int,std::set<int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,std::set<int>>,std::__tree_node<std::__value_type<int,std::set<int>>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    int v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__emplace_hint_unique_key_args<int,std::pair<int const,std::set<int>> const&>(v5, v6, v4 + 8, v4 + 8);
      uint64_t v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint64_t v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          unint64_t v4 = v8;
        }
        while (!v9);
      }
      unint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__emplace_hint_unique_key_args<int,std::pair<int const,std::set<int>> const&>(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  int v6 = (uint64_t **)std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::__find_equal<quasar::LmeDataFactoryBase::LmeType>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__construct_node<std::pair<int const,std::set<int>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__construct_node<std::pair<int const,std::set<int>> const&>@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x40uLL);
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *a2;
  uint64_t result = std::set<int>::set[abi:ne180100]((uint64_t *)v6 + 5, (uint64_t)(a2 + 2));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B23DCD0C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::set<int>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::map<int,std::set<int>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<int,std::set<int>>>,std::reverse_iterator<std::map<int,std::set<int>>*>,std::reverse_iterator<std::map<int,std::set<int>>*>,std::reverse_iterator<std::map<int,std::set<int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<int,std::set<int>>>,std::reverse_iterator<std::map<int,std::set<int>>*>,std::reverse_iterator<std::map<int,std::set<int>>*>,std::reverse_iterator<std::map<int,std::set<int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = *(void *)(v8 - 24);
      v8 -= 24;
      *(void *)(v7 - 24) = v9;
      uint64_t v10 = (void *)(a3 - 16);
      uint64_t v11 = *(void *)(a3 - 16);
      *(void *)(v7 - 16) = v11;
      uint64_t v12 = v7 - 16;
      uint64_t v13 = *(void *)(a3 - 8);
      *(void *)(v7 - 8) = v13;
      if (v13)
      {
        *(void *)(v11 + 16) = v12;
        *(void *)(a3 - 24) = v10;
        *uint64_t v10 = 0;
        *(void *)(a3 - 8) = 0;
      }
      else
      {
        *(void *)(v7 - 24) = v12;
      }
      uint64_t v7 = *((void *)&v19 + 1) - 24;
      *((void *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,std::set<int>>>,std::reverse_iterator<std::map<int,std::set<int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,std::set<int>>>,std::reverse_iterator<std::map<int,std::set<int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,std::set<int>>>,std::reverse_iterator<std::map<int,std::set<int>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,std::set<int>>>,std::reverse_iterator<std::map<int,std::set<int>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(v1, *(void **)(v1 + 8));
    v1 += 24;
  }
}

void **std::__split_buffer<std::map<int,std::set<int>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::map<int,std::set<int>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(i - 24, *(void **)(i - 16));
  }
}

void std::vector<std::map<int,std::set<int>>>::__assign_with_size[abi:ne180100]<std::map<int,std::set<int>>*,std::map<int,std::set<int>>*>(uint64_t a1, uint64_t a2, uint64_t **a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(uint64_t ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::map<int,std::set<int>>>::__vdeallocate((void **)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::map<int,std::set<int>>>,std::map<int,std::set<int>>*,std::map<int,std::set<int>>*,std::map<int,std::set<int>>*>(v8, a2, (uint64_t)a3, *(uint64_t **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = (uint64_t **)(a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::map<int,std::set<int>> *,std::map<int,std::set<int>> *,std::map<int,std::set<int>> *,0>(a2, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::map<int,std::set<int>>>,std::map<int,std::set<int>>*,std::map<int,std::set<int>>*,std::map<int,std::set<int>>*>(v8, (uint64_t)v13, (uint64_t)a3, *(uint64_t **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::map<int,std::set<int>> *,std::map<int,std::set<int>> *,std::map<int,std::set<int>> *,0>(a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      uint64_t v17 = v16 - 24;
      std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(v16 - 24, *(void **)(v16 - 16));
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B23DD0C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B23DD0CC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::map<int,std::set<int>>>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = v3 - 24;
        std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy((uint64_t)(v3 - 24), *((void **)v3 - 2));
        uint64_t v3 = v5;
      }
      while (v5 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::map<int,std::set<int>>>,std::map<int,std::set<int>>*,std::map<int,std::set<int>>*,std::map<int,std::set<int>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a4;
  unint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  std::string v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::map<int,std::set<int>>::map[abi:ne180100](v4, v6);
      v6 += 24;
      unint64_t v4 = v11 + 3;
      v11 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,std::set<int>>>,std::map<int,std::set<int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B23DD1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,std::set<int>>>,std::map<int,std::set<int>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,std::set<int>>>,std::map<int,std::set<int>>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,std::set<int>>>,std::map<int,std::set<int>>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    do
    {
      uint64_t v3 = v1 - 24;
      std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(v1 - 24, *(void **)(v1 - 16));
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t **std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::map<int,std::set<int>> *,std::map<int,std::set<int>> *,std::map<int,std::set<int>> *,0>(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  unint64_t v4 = (uint64_t **)a1;
  if ((uint64_t **)a1 != a2)
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    do
    {
      if (v4 != a3) {
        std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,std::set<int>>,std::__tree_node<std::__value_type<int,std::set<int>>,void *> *,long>>(a3, *v4, v6);
      }
      v4 += 3;
      a3 += 3;
      v6 += 3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t **std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,std::set<int>>,std::__tree_node<std::__value_type<int,std::set<int>>,void *> *,long>>(uint64_t **result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    void v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v14 = result;
    uint64_t v15 = v8;
    uint64_t v16 = v8;
    if (v8)
    {
      uint64_t v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        char v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          if (v8 != v9)
          {
            std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t **)v8 + 5, (int *)v9[5], (int *)v9 + 12);
            uint64_t v8 = v16;
          }
          std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__node_insert_multi(v5, (uint64_t)v8);
          uint64_t v8 = v15;
          uint64_t v16 = v15;
          if (v15) {
            uint64_t v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          unint64_t v10 = (uint64_t *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              unint64_t v10 = (uint64_t *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (uint64_t *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              char v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          char v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__emplace_multi<std::pair<int const,std::set<int>> const&>((uint64_t)v5, (_DWORD *)a2 + 8);
      uint64_t v12 = (uint64_t *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (uint64_t *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1B23DD44C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__emplace_multi<std::pair<int const,std::set<int>> const&>(uint64_t a1, _DWORD *a2)
{
  std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__construct_node<std::pair<int const,std::set<int>> const&>(a1, a2, (uint64_t)&v7);
  uint64_t v3 = (uint64_t **)(a1 + 8);
  unint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*((_DWORD *)v7 + 8) >= *((_DWORD *)v4 + 8)) {
          break;
        }
        unint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      unint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v3, v5, v7);
  return v7;
}

void *std::vector<std::map<int,double>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 24 * a2;
    uint64_t v6 = 24 * a2;
    uint64_t v7 = (void *)(v4 + 8);
    do
    {
      void *v7 = 0;
      v7[1] = 0;
      *(v7 - 1) = v7;
      v7 += 3;
      v6 -= 24;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_1B23DD5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<std::map<int,std::set<int>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 24 * a2;
    uint64_t v6 = 24 * a2;
    uint64_t v7 = (void *)(v4 + 8);
    do
    {
      void *v7 = 0;
      v7[1] = 0;
      *(v7 - 1) = v7;
      v7 += 3;
      v6 -= 24;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_1B23DD640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<std::map<int,kaldi::MinimumBayesRisk::Arc>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 24 * a2;
    uint64_t v6 = 24 * a2;
    uint64_t v7 = (void *)(v4 + 8);
    do
    {
      void *v7 = 0;
      v7[1] = 0;
      *(v7 - 1) = v7;
      v7 += 3;
      v6 -= 24;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_1B23DD6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::map<int,kaldi::MinimumBayesRisk::Arc>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 24;
        std::__tree<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::__map_value_compare<int,std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::less<int>,true>,std::allocator<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>>>::destroy((uint64_t)(v4 - 24), *((void **)v4 - 2));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::__map_value_compare<int,std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::less<int>,true>,std::allocator<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::__map_value_compare<int,std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::less<int>,true>,std::allocator<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::__map_value_compare<int,std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::less<int>,true>,std::allocator<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>>>::destroy(a1, a2[1]);
    uint64_t v4 = (void *)a2[10];
    if (v4)
    {
      a2[11] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void **std::vector<std::map<int,std::set<int>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = (uint64_t)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 24 * a2;
      uint64_t v14 = 24 * a2;
      uint64_t v15 = (void *)(v7 + 8);
      do
      {
        void *v15 = 0;
        v15[1] = 0;
        *(v15 - 1) = v15;
        v15 += 3;
        v14 -= 24;
      }
      while (v14);
    }
    else
    {
      uint64_t v13 = (uint64_t)*(result - 1);
    }
    a1[1] = v13;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v23 = result;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    long long v19 = v12;
    int v20 = &v12[24 * v8];
    float v22 = &v12[24 * v11];
    uint64_t v16 = &v20[24 * a2];
    uint64_t v17 = 24 * a2;
    long long v18 = v20 + 8;
    do
    {
      *long long v18 = 0;
      v18[1] = 0;
      *(v18 - 1) = v18;
      v18 += 3;
      v17 -= 24;
    }
    while (v17);
    uint64_t v21 = v16;
    std::vector<std::map<int,std::set<int>>>::__swap_out_circular_buffer(a1, &v19);
    return std::__split_buffer<std::map<int,std::set<int>>>::~__split_buffer(&v19);
  }
  return result;
}

void sub_1B23DD91C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::map<int,std::set<int>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    long long v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~__split_buffer(&v15);
  }
}

void sub_1B23DDA84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__push_back_slow_path<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  size_t v13 = v10;
  size_t v14 = &v10[56 * v4];
  uint64_t v16 = &v10[56 * v9];
  std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::pair[abi:ne180100]((uint64_t)v14, a2);
  uint64_t v15 = v14 + 56;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B23DDBA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *,false>(uint64_t result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = (float *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          float v25 = *(a2 - 1);
          float v26 = v11[1];
          if (v25 <= v26)
          {
            if (v25 < v26) {
              return result;
            }
            int v28 = *((_DWORD *)a2 - 2);
            float v27 = *v11;
            if (v28 <= *(_DWORD *)v11) {
              return result;
            }
          }
          else
          {
            float v27 = *v11;
            int v28 = *((_DWORD *)a2 - 2);
          }
          *(_DWORD *)uint64_t v11 = v28;
          *(a2 - 2) = v27;
          v11[1] = v25;
          *(a2 - 1) = v26;
          return result;
        case 3uLL:
          return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(v11, v11 + 2, a2 - 2);
        case 4uLL:
          return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(v11, v11 + 2, v11 + 4, a2 - 2);
        case 5uLL:
          return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *,std::pair<int,float> *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(v11, &v11[2 * (v15 >> 1)], a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(v11 + 2, v17 - 2, a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(v11 + 4, &v11[2 * v16 + 2], a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(v17 - 2, v17, &v11[2 * v16 + 2]);
      float v18 = *v11;
      float *v11 = *v17;
      *uint64_t v17 = v18;
      int v19 = *((_DWORD *)v11 + 1);
      v11[1] = v17[1];
      *((_DWORD *)v17 + 1) = v19;
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(&v11[2 * (v15 >> 1)], v11, a2 - 2);
      if (a5) {
        goto LABEL_16;
      }
    }
    float v20 = *(v11 - 1);
    float v21 = v11[1];
    if (v20 <= v21 && (v20 < v21 || *((_DWORD *)v11 - 2) <= *(_DWORD *)v11))
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,float> *,kaldi::MinimumBayesRisk::GammaCompare &>(v11, a2);
      uint64_t v11 = (float *)result;
      goto LABEL_21;
    }
LABEL_16:
    float v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,float> *,kaldi::MinimumBayesRisk::GammaCompare &>(v11, a2);
    if ((v23 & 1) == 0) {
      goto LABEL_19;
    }
    BOOL v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(v11, v22);
    uint64_t v11 = v22 + 2;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(v22 + 2, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v22;
      if (v24) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v24)
    {
LABEL_19:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *,false>(v10, v22, a3, -v13, a5 & 1);
      uint64_t v11 = v22 + 2;
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(v11, a2);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>((uint64_t)v11, (uint64_t)a2);
  }
}

float *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(float *result, float *a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v2 = result + 2;
  if (result + 2 == a2) {
    return result;
  }
  uint64_t v3 = 0;
  uint64_t v4 = result;
  do
  {
    char v5 = v4;
    uint64_t v4 = v2;
    float v6 = v5[3];
    float v7 = v5[1];
    if (v6 <= v7)
    {
      if (v6 < v7) {
        goto LABEL_20;
      }
      float v8 = *v2;
      int v9 = *(_DWORD *)v5;
      if (SLODWORD(v8) <= *(_DWORD *)v5) {
        goto LABEL_20;
      }
    }
    else
    {
      float v8 = *v2;
      int v9 = *(_DWORD *)v5;
    }
    *((_DWORD *)v5 + 2) = v9;
    v4[1] = v7;
    unint64_t v10 = result;
    if (v5 == result) {
      goto LABEL_19;
    }
    uint64_t v11 = v3;
    while (1)
    {
      uint64_t v12 = (uint64_t)result + v11;
      float v13 = *(float *)((char *)result + v11 - 4);
      if (v6 > v13)
      {
        int v14 = *(_DWORD *)(v12 - 8);
        goto LABEL_12;
      }
      if (v6 < v13)
      {
        unint64_t v10 = v5;
        goto LABEL_19;
      }
      int v14 = *(_DWORD *)(v12 - 8);
      if (SLODWORD(v8) <= v14) {
        break;
      }
LABEL_12:
      v5 -= 2;
      uint64_t v15 = (uint64_t)result + v11;
      *(_DWORD *)uint64_t v15 = v14;
      *(float *)(v15 + 4) = v13;
      v11 -= 8;
      if (!v11)
      {
        unint64_t v10 = result;
        goto LABEL_19;
      }
    }
    unint64_t v10 = (float *)((char *)result + v11);
LABEL_19:
    *unint64_t v10 = v8;
    v10[1] = v6;
LABEL_20:
    uint64_t v2 = v4 + 2;
    v3 += 8;
  }
  while (v4 + 2 != a2);
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    while (1)
    {
      if (result + 8 == a2) {
        return result;
      }
      uint64_t v3 = result;
      uint64_t v2 = (int *)(result + 8);
      result += 8;
      float v4 = *(float *)(v3 + 12);
      float v5 = *(float *)(v3 + 4);
      if (v4 <= v5)
      {
        if (v4 >= v5)
        {
          int v6 = *v2;
          if (v6 > *(_DWORD *)v3) {
            goto LABEL_7;
          }
        }
      }
      else
      {
        int v6 = *v2;
        do
        {
          do
          {
LABEL_7:
            uint64_t v7 = v3;
            *(_DWORD *)(v3 + 8) = *(_DWORD *)v3;
            *(float *)(v3 + 12) = v5;
            v3 -= 8;
            float v5 = *(float *)(v7 - 4);
          }
          while (v4 > v5);
        }
        while (v4 >= v5 && v6 > *(_DWORD *)(v7 - 8));
        *(_DWORD *)uint64_t v7 = v6;
        *(float *)(v7 + 4) = v4;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(float *a1, float *a2, float *a3)
{
  float v3 = a2[1];
  float v4 = a1[1];
  if (v3 <= v4 && (v3 < v4 || *(_DWORD *)a2 <= *(_DWORD *)a1))
  {
    float v9 = a3[1];
    if (v9 <= v3)
    {
      if (v9 < v3) {
        return 0;
      }
      float v11 = *a3;
      float v10 = *a2;
      if (*(_DWORD *)a3 <= *(_DWORD *)a2) {
        return 0;
      }
    }
    else
    {
      float v10 = *a2;
      float v11 = *a3;
    }
    *a2 = v11;
    *a3 = v10;
    a2[1] = v9;
    a3[1] = v3;
    float v12 = a2[1];
    float v13 = a1[1];
    if (v12 <= v13)
    {
      if (v12 < v13) {
        return 1;
      }
      float v15 = *a2;
      float v14 = *a1;
      if (*(_DWORD *)a2 <= *(_DWORD *)a1) {
        return 1;
      }
    }
    else
    {
      float v14 = *a1;
      float v15 = *a2;
    }
    *a1 = v15;
    *a2 = v14;
    a1[1] = v12;
    uint64_t result = 2;
    a2[1] = v13;
  }
  else
  {
    float v5 = a3[1];
    if (v5 > v3)
    {
      float v6 = *a3;
LABEL_6:
      float v7 = *a1;
      *a1 = v6;
      *a3 = v7;
      a1[1] = v5;
      a3[1] = v4;
      return 1;
    }
    float v16 = *a2;
    if (v5 >= v3)
    {
      float v6 = *a3;
      if (*(_DWORD *)a3 > SLODWORD(v16)) {
        goto LABEL_6;
      }
    }
    float v17 = *a1;
    *a1 = v16;
    *a2 = v17;
    a1[1] = v3;
    a2[1] = v4;
    float v18 = a3[1];
    if (v18 <= v4)
    {
      if (v18 < v4) {
        return 1;
      }
      float v19 = *a3;
      if (*(_DWORD *)a3 <= SLODWORD(v17)) {
        return 1;
      }
    }
    else
    {
      float v19 = *a3;
    }
    *a2 = v19;
    *a3 = v17;
    a2[1] = v18;
    uint64_t result = 2;
    a3[1] = v4;
  }
  return result;
}

float *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,float> *,kaldi::MinimumBayesRisk::GammaCompare &>(float *a1, float *a2)
{
  float v2 = *a1;
  float v3 = a1[1];
  float v4 = *(a2 - 1);
  if (v3 <= v4 && (v3 < v4 || SLODWORD(v2) <= *((_DWORD *)a2 - 2)))
  {
    for (uint64_t i = a1 + 2; i < a2; i += 2)
    {
      float v7 = i[1];
      if (v3 > v7 || v3 >= v7 && SLODWORD(v2) > *(_DWORD *)i) {
        break;
      }
    }
  }
  else
  {
    float v5 = a1[3];
    if (v3 <= v5)
    {
      float v8 = a1 + 5;
      do
      {
        if (v3 >= v5 && SLODWORD(v2) > *((_DWORD *)v8 - 3)) {
          break;
        }
        float v9 = *v8;
        v8 += 2;
        float v5 = v9;
      }
      while (v3 <= v9);
      uint64_t i = v8 - 3;
    }
    else
    {
      uint64_t i = a1 + 2;
    }
  }
  if (i < a2)
  {
    for (uint64_t j = a2 - 3; v3 > v4 || v3 >= v4 && SLODWORD(v2) > *((_DWORD *)j + 1); j -= 2)
    {
      float v11 = *j;
      float v4 = v11;
    }
    a2 = j + 1;
  }
  while (i < a2)
  {
    int v12 = *(_DWORD *)i;
    *uint64_t i = *a2;
    *(_DWORD *)a2 = v12;
    int v13 = *((_DWORD *)i + 1);
    i[1] = a2[1];
    *((_DWORD *)a2 + 1) = v13;
    float v14 = i[3];
    if (v3 <= v14)
    {
      float v15 = i + 5;
      do
      {
        if (v3 >= v14 && SLODWORD(v2) > *((_DWORD *)v15 - 3)) {
          break;
        }
        float v16 = *v15;
        v15 += 2;
        float v14 = v16;
      }
      while (v3 <= v16);
      uint64_t i = v15 - 3;
    }
    else
    {
      i += 2;
    }
    do
    {
      do
      {
        a2 -= 2;
        float v17 = a2[1];
      }
      while (v3 > v17);
    }
    while (v3 >= v17 && SLODWORD(v2) > *(_DWORD *)a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v2;
  *(i - 1) = v3;
  return i;
}

float *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,float> *,kaldi::MinimumBayesRisk::GammaCompare &>(float *a1, float *a2)
{
  uint64_t v2 = 0;
  float v3 = *a1;
  float v4 = a1[1];
  while (1)
  {
    float v5 = a1[v2 + 3];
    if (v5 <= v4 && (v5 < v4 || SLODWORD(a1[v2 + 2]) <= SLODWORD(v3))) {
      break;
    }
    v2 += 2;
  }
  unint64_t v6 = (unint64_t)&a1[v2 + 2];
  if (!(v2 * 4))
  {
    if (v6 >= (unint64_t)a2) {
      goto LABEL_17;
    }
    float v8 = a2 - 2;
    float v9 = *(a2 - 1);
    if (v9 > v4)
    {
LABEL_11:
      a2 = v8;
      goto LABEL_17;
    }
    float v21 = a2 - 3;
    while (1)
    {
      float v22 = v21 + 1;
      if (v9 >= v4)
      {
        if (*v22 > SLODWORD(v3) || v6 >= (unint64_t)v22)
        {
LABEL_43:
          a2 = v21 + 1;
          goto LABEL_17;
        }
      }
      else if (v6 >= (unint64_t)v22)
      {
        goto LABEL_11;
      }
      v8 -= 2;
      float v24 = *v21;
      v21 -= 2;
      float v9 = v24;
      if (v24 > v4) {
        goto LABEL_43;
      }
    }
  }
  float v7 = *(a2 - 1);
  if (v7 <= v4)
  {
    float v10 = a2 - 3;
    do
    {
      if (v7 >= v4 && *((_DWORD *)v10 + 1) > SLODWORD(v3)) {
        break;
      }
      float v11 = *v10;
      v10 -= 2;
      float v7 = v11;
    }
    while (v11 <= v4);
    a2 = v10 + 1;
  }
  else
  {
    a2 -= 2;
  }
LABEL_17:
  int v12 = (float *)v6;
  if (v6 < (unint64_t)a2)
  {
    int v13 = a2;
    do
    {
      float v14 = *v12;
      *int v12 = *v13;
      *int v13 = v14;
      int v15 = *((_DWORD *)v12 + 1);
      v12[1] = v13[1];
      *((_DWORD *)v13 + 1) = v15;
      do
      {
        do
        {
          v12 += 2;
          float v16 = v12[1];
        }
        while (v16 > v4);
      }
      while (v16 >= v4 && *(_DWORD *)v12 > SLODWORD(v3));
      float v17 = *(v13 - 1);
      if (v17 <= v4)
      {
        float v18 = v13 - 3;
        do
        {
          if (v17 >= v4 && *((_DWORD *)v18 + 1) > SLODWORD(v3)) {
            break;
          }
          float v19 = *v18;
          v18 -= 2;
          float v17 = v19;
        }
        while (v19 <= v4);
        int v13 = v18 + 1;
      }
      else
      {
        v13 -= 2;
      }
    }
    while (v12 < v13);
  }
  if (v12 - 2 != a1)
  {
    *a1 = *(v12 - 2);
    a1[1] = *(v12 - 1);
  }
  *(v12 - 2) = v3;
  *(v12 - 1) = v4;
  return v12 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(float *a1, float *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(a2 - 1);
      float v7 = a1[1];
      if (v6 > v7)
      {
        float v8 = *a1;
        int v9 = *((_DWORD *)a2 - 2);
LABEL_30:
        *(_DWORD *)a1 = v9;
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
        return result;
      }
      if (v6 >= v7)
      {
        int v9 = *((_DWORD *)a2 - 2);
        float v8 = *a1;
        if (v9 > *(_DWORD *)a1) {
          goto LABEL_30;
        }
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      float v10 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(a1, a1 + 2, a1 + 4);
      float v11 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
LABEL_6:
  float v14 = v11[1];
  float v15 = v10[1];
  if (v14 <= v15)
  {
    if (v14 < v15) {
      goto LABEL_21;
    }
    int v16 = *(_DWORD *)v11;
    float v17 = *v10;
    if (*(_DWORD *)v11 <= *(_DWORD *)v10) {
      goto LABEL_21;
    }
  }
  else
  {
    int v16 = *(_DWORD *)v11;
    float v17 = *v10;
  }
  float *v11 = v17;
  v11[1] = v15;
  uint64_t v18 = (uint64_t)a1;
  if (v10 == a1) {
    goto LABEL_20;
  }
  uint64_t v19 = v12;
  while (1)
  {
    float v20 = (char *)a1 + v19;
    float v21 = *(float *)((char *)a1 + v19 + 12);
    if (v14 <= v21)
    {
      if (v14 < v21)
      {
        uint64_t v18 = (uint64_t)v10;
        goto LABEL_20;
      }
      int v22 = *((_DWORD *)v20 + 2);
      if (v16 <= v22)
      {
        uint64_t v18 = (uint64_t)a1 + v19 + 16;
LABEL_20:
        *(_DWORD *)uint64_t v18 = v16;
        *(float *)(v18 + 4) = v14;
        if (++v13 == 8) {
          return v11 + 2 == a2;
        }
LABEL_21:
        float v10 = v11;
        v12 += 8;
        v11 += 2;
        if (v11 == a2) {
          return 1;
        }
        goto LABEL_6;
      }
    }
    else
    {
      int v22 = *((_DWORD *)v20 + 2);
    }
    v10 -= 2;
    *((_DWORD *)v20 + 4) = v22;
    *(float *)((char *)a1 + v19 + 20) = v21;
    v19 -= 8;
    if (v19 == -16)
    {
      uint64_t v18 = (uint64_t)a1;
      goto LABEL_20;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(float *a1, float *a2, float *a3, float *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(a1, a2, a3);
  float v9 = a4[1];
  float v10 = a3[1];
  if (v9 <= v10)
  {
    if (v9 < v10) {
      return result;
    }
    float v12 = *a4;
    float v11 = *a3;
    if (*(_DWORD *)a4 <= *(_DWORD *)a3) {
      return result;
    }
  }
  else
  {
    float v11 = *a3;
    float v12 = *a4;
  }
  *a3 = v12;
  *a4 = v11;
  a3[1] = v9;
  a4[1] = v10;
  float v13 = a3[1];
  float v14 = a2[1];
  if (v13 <= v14)
  {
    if (v13 < v14) {
      return result;
    }
    float v16 = *a3;
    float v15 = *a2;
    if (*(_DWORD *)a3 <= *(_DWORD *)a2) {
      return result;
    }
  }
  else
  {
    float v15 = *a2;
    float v16 = *a3;
  }
  *a2 = v16;
  *a3 = v15;
  a2[1] = v13;
  a3[1] = v14;
  float v17 = a2[1];
  float v18 = a1[1];
  if (v17 > v18)
  {
    float v19 = *a1;
    float v20 = *a2;
LABEL_15:
    *a1 = v20;
    *a2 = v19;
    a1[1] = v17;
    a2[1] = v18;
    return result;
  }
  if (v17 >= v18)
  {
    float v20 = *a2;
    float v19 = *a1;
    if (*(_DWORD *)a2 > *(_DWORD *)a1) {
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(float *a1, float *a2, float *a3, float *a4, float *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(a1, a2, a3, a4);
  float v11 = a5[1];
  float v12 = a4[1];
  if (v11 <= v12)
  {
    if (v11 < v12) {
      return result;
    }
    float v14 = *a5;
    float v13 = *a4;
    if (*(_DWORD *)a5 <= *(_DWORD *)a4) {
      return result;
    }
  }
  else
  {
    float v13 = *a4;
    float v14 = *a5;
  }
  *a4 = v14;
  *a5 = v13;
  a4[1] = v11;
  a5[1] = v12;
  float v15 = a4[1];
  float v16 = a3[1];
  if (v15 <= v16)
  {
    if (v15 < v16) {
      return result;
    }
    float v18 = *a4;
    float v17 = *a3;
    if (*(_DWORD *)a4 <= *(_DWORD *)a3) {
      return result;
    }
  }
  else
  {
    float v17 = *a3;
    float v18 = *a4;
  }
  *a3 = v18;
  *a4 = v17;
  a3[1] = v15;
  a4[1] = v16;
  float v19 = a3[1];
  float v20 = a2[1];
  if (v19 <= v20)
  {
    if (v19 < v20) {
      return result;
    }
    float v22 = *a3;
    float v21 = *a2;
    if (*(_DWORD *)a3 <= *(_DWORD *)a2) {
      return result;
    }
  }
  else
  {
    float v21 = *a2;
    float v22 = *a3;
  }
  *a2 = v22;
  *a3 = v21;
  a2[1] = v19;
  a3[1] = v20;
  float v23 = a2[1];
  float v24 = a1[1];
  if (v23 > v24)
  {
    float v25 = *a1;
    float v26 = *a2;
LABEL_9:
    *a1 = v26;
    *a2 = v25;
    a1[1] = v23;
    a2[1] = v24;
    return result;
  }
  if (v23 >= v24)
  {
    float v26 = *a2;
    float v25 = *a1;
    if (*(_DWORD *)a2 > *(_DWORD *)a1) {
      goto LABEL_9;
    }
  }
  return result;
}

float *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *,std::pair<int,float> *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      float v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    float v13 = a2;
    if (a2 != a3)
    {
      float v14 = a2;
      while (1)
      {
        float v15 = v14[1];
        float v16 = a1[1];
        if (v15 <= v16)
        {
          if (v15 < v16) {
            goto LABEL_12;
          }
          float v17 = *v14;
          float v18 = *a1;
          if (*(_DWORD *)v14 <= *(_DWORD *)a1) {
            goto LABEL_12;
          }
        }
        else
        {
          float v17 = *v14;
          float v18 = *a1;
        }
        *float v14 = v18;
        *a1 = v17;
        v14[1] = v16;
        a1[1] = v15;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>((uint64_t)a1, a4, v9, a1);
LABEL_12:
        v14 += 2;
        if (v14 == a3)
        {
          float v13 = a3;
          break;
        }
      }
    }
    if (v8 >= 9)
    {
      uint64_t v19 = (unint64_t)v8 >> 3;
      float v20 = a2 - 2;
      do
      {
        float v21 = *a1;
        int v22 = *((_DWORD *)a1 + 1);
        std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>((uint64_t)a1, a4, v19);
        if (v20 == v23)
        {
          *float v23 = v21;
          *((_DWORD *)v23 + 1) = v22;
        }
        else
        {
          *float v23 = *v20;
          v23[1] = v20[1];
          *float v20 = v21;
          *((_DWORD *)v20 + 1) = v22;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>((uint64_t)a1, (uint64_t)(v23 + 2), a4, ((char *)(v23 + 2) - (char *)a1) >> 3);
        }
        v20 -= 2;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (float *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        float v10 = v8[1];
        float v11 = v8[3];
        if (v10 > v11 || v10 >= v11 && *(_DWORD *)v8 > *((_DWORD *)v8 + 2))
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      float v12 = v8[1];
      float v13 = a4[1];
      if (v12 <= v13)
      {
        int v14 = *(_DWORD *)a4;
        float v15 = *v8;
        if (v12 < v13 || SLODWORD(v15) <= v14)
        {
          *a4 = v15;
          a4[1] = v12;
          if (v5 >= v7)
          {
            while (1)
            {
              uint64_t v18 = 2 * v7;
              uint64_t v7 = (2 * v7) | 1;
              float v17 = (float *)(result + 8 * v7);
              uint64_t v19 = v18 + 2;
              if (v19 < a3)
              {
                float v20 = v17[1];
                float v21 = v17[3];
                if (v20 > v21 || v20 >= v21 && *(_DWORD *)v17 > *((_DWORD *)v17 + 2))
                {
                  v17 += 2;
                  uint64_t v7 = v19;
                }
              }
              float v22 = v17[1];
              if (v22 > v13) {
                break;
              }
              float v23 = *v17;
              if (v22 >= v13 && SLODWORD(v23) > v14) {
                break;
              }
              *uint64_t v8 = v23;
              v8[1] = v22;
              uint64_t v8 = v17;
              if (v5 < v7) {
                goto LABEL_16;
              }
            }
          }
          float v17 = v8;
LABEL_16:
          *(_DWORD *)float v17 = v14;
          v17[1] = v13;
        }
      }
    }
  }
  return result;
}

float std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = a1;
    a1 += 8 * (v3 + 1);
    uint64_t v7 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v8 = v7 + 2;
    if (v8 < a3)
    {
      float v9 = *(float *)(a1 + 4);
      float v10 = *(float *)(a1 + 12);
      if (v9 > v10 || v9 >= v10 && *(_DWORD *)a1 > *(_DWORD *)(a1 + 8))
      {
        a1 += 8;
        uint64_t v3 = v8;
      }
    }
    *(_DWORD *)uint64_t v6 = *(_DWORD *)a1;
    float result = *(float *)(a1 + 4);
    *(float *)(v6 + 4) = result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (float *)(result + 8 * (v4 >> 1));
    float v7 = v6[1];
    float v8 = *(float *)(a2 - 4);
    if (v7 <= v8)
    {
      if (v7 < v8) {
        return result;
      }
      float v10 = *v6;
      int v9 = *(_DWORD *)(a2 - 8);
      if (*(_DWORD *)v6 <= v9) {
        return result;
      }
    }
    else
    {
      int v9 = *(_DWORD *)(a2 - 8);
      float v10 = *v6;
    }
    *(float *)(a2 - 8) = v10;
    *(float *)(a2 - 4) = v7;
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v12 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        float v11 = (float *)(result + 8 * v5);
        float v13 = v11[1];
        if (v13 <= v8)
        {
          if (v13 < v8) {
            break;
          }
          float v14 = *v11;
          if (*(_DWORD *)v11 <= v9) {
            break;
          }
        }
        else
        {
          float v14 = *v11;
        }
        float *v6 = v14;
        v6[1] = v13;
        uint64_t v6 = (float *)(result + 8 * v5);
        if (v12 <= 1) {
          goto LABEL_13;
        }
      }
    }
    float v11 = v6;
LABEL_13:
    *(_DWORD *)float v11 = v9;
    v11[1] = v8;
  }
  return result;
}

uint64_t std::vector<kaldi::MinimumBayesRisk::Arc>::__push_back_slow_path<kaldi::MinimumBayesRisk::Arc const&>(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v6 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v6 = v4;
  }
  float v14 = a1 + 2;
  if (v6) {
    float v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>((uint64_t)(a1 + 2), v6);
  }
  else {
    float v7 = 0;
  }
  float v10 = v7;
  float v11 = &v7[72 * v3];
  float v13 = &v7[72 * v6];
  std::allocator<kaldi::MinimumBayesRisk::Arc>::construct[abi:ne180100]<kaldi::MinimumBayesRisk::Arc,kaldi::MinimumBayesRisk::Arc const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  unint64_t v12 = v11 + 72;
  std::vector<kaldi::MinimumBayesRisk::Arc>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<kaldi::MinimumBayesRisk::Arc>::~__split_buffer((uint64_t)&v10);
  return v8;
}

void sub_1B23DEECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::MinimumBayesRisk::Arc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::allocator<kaldi::MinimumBayesRisk::Arc>::construct[abi:ne180100]<kaldi::MinimumBayesRisk::Arc,kaldi::MinimumBayesRisk::Arc const&>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v4 = *a3;
  *(_DWORD *)(a2 + 16) = *((_DWORD *)a3 + 4);
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 24) = *((void *)a3 + 3);
  *(void *)&long long v4 = *((void *)a3 + 4);
  *(void *)(a2 + 40) = 0;
  uint64_t v5 = a2 + 40;
  *(void *)(a2 + 32) = v4;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  float result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a2 + 40), *((const void **)a3 + 5), *((void *)a3 + 6), (uint64_t)(*((void *)a3 + 6) - *((void *)a3 + 5)) >> 2);
  *(_DWORD *)(v5 + 24) = *((_DWORD *)a3 + 16);
  return result;
}

uint64_t std::vector<kaldi::MinimumBayesRisk::Arc>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::MinimumBayesRisk::Arc>,std::reverse_iterator<kaldi::MinimumBayesRisk::Arc*>,std::reverse_iterator<kaldi::MinimumBayesRisk::Arc*>,std::reverse_iterator<kaldi::MinimumBayesRisk::Arc*>>((uint64_t)(a1 + 2), a1[1], (long long *)a1[1], *a1, (long long *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::MinimumBayesRisk::Arc>,std::reverse_iterator<kaldi::MinimumBayesRisk::Arc*>,std::reverse_iterator<kaldi::MinimumBayesRisk::Arc*>,std::reverse_iterator<kaldi::MinimumBayesRisk::Arc*>>(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    int v9 = a3;
    do
    {
      int v9 = (long long *)((char *)v9 - 72);
      std::allocator<kaldi::MinimumBayesRisk::Arc>::construct[abi:ne180100]<kaldi::MinimumBayesRisk::Arc,kaldi::MinimumBayesRisk::Arc const&>(a1, v7 - 72, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 72;
      *((void *)&v16 + 1) -= 72;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::MinimumBayesRisk::Arc>,std::reverse_iterator<kaldi::MinimumBayesRisk::Arc*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_1B23DF078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::MinimumBayesRisk::Arc>,std::reverse_iterator<kaldi::MinimumBayesRisk::Arc*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::MinimumBayesRisk::Arc>,std::reverse_iterator<kaldi::MinimumBayesRisk::Arc*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::MinimumBayesRisk::Arc>,std::reverse_iterator<kaldi::MinimumBayesRisk::Arc*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    unint64_t v3 = *(void **)(v1 + 40);
    if (v3)
    {
      *(void *)(v1 + 48) = v3;
      operator delete(v3);
    }
    v1 += 72;
  }
}

uint64_t std::__split_buffer<kaldi::MinimumBayesRisk::Arc>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<kaldi::MinimumBayesRisk::Arc>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 72;
    uint64_t v5 = *(void **)(v2 - 32);
    if (v5)
    {
      *(void *)(v2 - 24) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 72;
    }
  }
}

uint64_t std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__emplace_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    float v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  }
  else {
    float v10 = 0;
  }
  uint64_t v11 = &v10[12 * v4];
  v15[0] = v10;
  v15[1] = v11;
  long long v16 = v11;
  float v17 = (char *)&v10[12 * v9];
  void *v11 = *(void *)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  double v11[2] = 0;
  v11 += 2;
  *(v11 - 1) = v12;
  v11[1] = 0;
  double v11[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  v10[12 * v4 + 10] = *(_DWORD *)(a2 + 40);
  v16 += 6;
  std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B23DF2C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::addPathsFromOneBest@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X3>, uint64_t a4@<X8>)
{
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 176))(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)a1 + 184))(a1, v7, 0.0);
  uint64_t v10 = *a2;
  uint64_t v9 = a2[1];
  if (v9 != *a2)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v29 = v11;
      uint64_t v12 = (uint64_t *)(*(void *)(v10 + 24 * v11) + 24 * *(int *)(*a3 + 4 * v11));
      uint64_t v13 = *v12;
      if (*v12 != v12[1])
      {
        int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
        int v15 = v14;
        float v17 = *(_DWORD **)(a4 + 8);
        unint64_t v16 = *(void *)(a4 + 16);
        if ((unint64_t)v17 >= v16)
        {
          uint64_t v19 = *(_DWORD **)a4;
          uint64_t v20 = ((uint64_t)v17 - *(void *)a4) >> 2;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v22 = v16 - (void)v19;
          if (v22 >> 1 > v21) {
            unint64_t v21 = v22 >> 1;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v21;
          }
          if (v23)
          {
            float v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 16, v23);
            uint64_t v19 = *(_DWORD **)a4;
            float v17 = *(_DWORD **)(a4 + 8);
          }
          else
          {
            float v24 = 0;
          }
          float v25 = &v24[4 * v20];
          *(_DWORD *)float v25 = v15;
          uint64_t v18 = v25 + 4;
          while (v17 != v19)
          {
            int v26 = *--v17;
            *((_DWORD *)v25 - 1) = v26;
            v25 -= 4;
          }
          *(void *)a4 = v25;
          *(void *)(a4 + 8) = v18;
          *(void *)(a4 + 16) = &v24[4 * v23];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *float v17 = v14;
          uint64_t v18 = v17 + 1;
        }
        *(void *)(a4 + 8) = v18;
        uint64_t v30 = 0;
        int v31 = 0;
        int v32 = v15;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 208))(a1, v6, &v30);
        quasar::addPhoneSequence(a1, v13 + 48);
      }
      ++v11;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3) > v29 + 1);
  }
  return result;
}

void sub_1B23DF744(_Unwind_Exception *a1)
{
  kaldi::LatticeWordAligner::ComputationState::~ComputationState(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::addPathsFromAlternatives(uint64_t result, void *a2, uint64_t *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v6 = result;
    unint64_t v7 = 0;
    int v8 = -1;
    float v25 = a5;
    do
    {
      uint64_t v9 = (uint64_t *)(v5 + 24 * v7);
      uint64_t v10 = *v9;
      int v11 = -1227133513
          * ((*(void *)(v10 + 24 * *(int *)(*a5 + 4 * v7) + 8) - *(void *)(v10 + 24 * *(int *)(*a5 + 4 * v7))) >> 5);
      int v23 = v8
          - 1227133513
          * ((*(void *)(v10 + 24 * *(int *)(*a5 + 4 * v7) + 8) - *(void *)(v10 + 24 * *(int *)(*a5 + 4 * v7))) >> 5);
      if (0xAAAAAAAAAAAAAAABLL * ((v9[1] - *v9) >> 3) >= 2)
      {
        unint64_t v27 = v7;
        unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 200))(v6);
        uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 200))(v6);
        uint64_t v14 = *(unsigned int *)(*a2 + 4 * (v8 + 1));
        uint64_t v31 = 0;
        int v32 = 0;
        int v33 = v12;
        unsigned int v24 = v12;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v6 + 208))(v6, v14, &v31);
        unsigned int v26 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 200))(v6);
        if (v8 < v23)
        {
          int v15 = v8 + 2;
          uint64_t v16 = v26;
          do
          {
            uint64_t v17 = v13;
            if (v11 != 1) {
              uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 200))(v6);
            }
            LODWORD(v31) = 0;
            HIDWORD(v31) = v15;
            int v32 = 0;
            int v33 = v17;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v6 + 208))(v6, v16, &v31);
            ++v15;
            uint64_t v16 = v17;
            --v11;
          }
          while (v11);
        }
        int v18 = *(_DWORD *)(a2[3] + 4 * v23);
        uint64_t v31 = 0;
        int v32 = 0;
        int v33 = v18;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v6 + 208))(v6, v13, &v31);
        unint64_t v7 = v27;
        uint64_t v5 = *a3;
        uint64_t v19 = *(void *)(*a3 + 24 * v27);
        if (*(void *)(*a3 + 24 * v27 + 8) == v19)
        {
          a5 = v25;
        }
        else
        {
          unint64_t v20 = 0;
          a5 = v25;
          do
          {
            if (v20 != *(_DWORD *)(*a5 + 4 * v7))
            {
              unint64_t v21 = (void *)(v19 + 24 * v20);
              if (*v21 != v21[1])
              {
                quasar::copyAndTrim(*v21 + 48, &v30);
                std::string::basic_string[abi:ne180100]<0>(__p, " .");
                quasar::splitStringSimple((uint64_t)&v30, (uint64_t *)__p, (unint64_t)&v31);
              }
              uint64_t v31 = 0;
              int v32 = 0;
              int v33 = v26;
              uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t *))(*(void *)v6 + 208))(v6, v24, &v31);
              unint64_t v7 = v27;
              uint64_t v5 = *a3;
              a5 = v25;
            }
            ++v20;
            uint64_t v19 = *(void *)(v5 + 24 * v7);
          }
          while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v5 + 24 * v7 + 8) - v19) >> 3) > v20);
        }
      }
      ++v7;
      int v8 = v23;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a3[1] - v5) >> 3) > v7);
  }
  return result;
}

void sub_1B23DFBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  std::string __p = &a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::createSearchFst()
{
}

void sub_1B23DFCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::LatticeWordAligner::ComputationState::~ComputationState((kaldi::LatticeWordAligner::ComputationState *)&a9);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(v9);
  _Unwind_Resume(a1);
}

void quasar::getConfidenceScores(uint64_t a1@<X0>, int **a2@<X8>)
{
  uint64_t v3 = *(const void **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)a1 == v4)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else if (v4 - (void)v3 == 8)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t v5 = (int *)operator new(4uLL);
    *a2 = v5;
    *v5++ = 1000;
    a2[1] = v5;
    a2[2] = v5;
  }
  else
  {
    int v23 = 0;
    unsigned int v24 = 0;
    uint64_t v25 = 0;
    std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v23, v3, v4, (v4 - (uint64_t)v3) >> 3);
    v22[2] = 0;
    v22[0] = v23;
    v22[1] = ((unint64_t)((char *)v24 - (char *)v23) >> 3);
    kaldi::VectorBase<double>::ApplySoftMax((uint64_t)v22);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t v6 = v23;
    unint64_t v7 = v24;
    if (v23 != v24)
    {
      int v8 = 0;
      uint64_t v9 = a2 + 2;
      do
      {
        int v10 = vcvtpd_s64_f64(*v6 * 1000.0);
        if ((unint64_t)v8 >= *v9)
        {
          uint64_t v13 = *a2;
          uint64_t v14 = v8 - *a2;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = *v9 - (void)v13;
          if (v16 >> 1 > v15) {
            unint64_t v15 = v16 >> 1;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            int v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v17);
            uint64_t v13 = *a2;
            int v8 = a2[1];
          }
          else
          {
            int v18 = 0;
          }
          uint64_t v19 = (int *)&v18[4 * v14];
          if (v10 >= 1000) {
            int v20 = 0;
          }
          else {
            int v20 = 1000 - v10;
          }
          *uint64_t v19 = v20;
          unsigned int v12 = v19 + 1;
          while (v8 != v13)
          {
            int v21 = *--v8;
            *--uint64_t v19 = v21;
          }
          *a2 = v19;
          a2[1] = v12;
          a2[2] = (int *)&v18[4 * v17];
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          if (v10 >= 1000) {
            int v11 = 0;
          }
          else {
            int v11 = 1000 - v10;
          }
          *int v8 = v11;
          unsigned int v12 = v8 + 1;
        }
        a2[1] = v12;
        ++v6;
        int v8 = v12;
      }
      while (v6 != v7);
      uint64_t v6 = v23;
    }
    if (v6)
    {
      unsigned int v24 = v6;
      operator delete(v6);
    }
  }
}

void sub_1B23DFEB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::findPossibleKeywordLocations()
{
  long long v0 = 0uLL;
  uint64_t v1 = 0;
  quasar::createSearchFst();
}

void sub_1B23E0540(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 - 232);
  if (v3)
  {
    *(void *)(v1 - 224) = v3;
    operator delete(v3);
  }
  if (*(char *)(v1 - 185) < 0) {
    operator delete(*(void **)(v1 - 208));
  }
  uint64_t v5 = (void **)(v1 - 184);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v5);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)(v1 - 160));
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)(v1 - 144));
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)(v1 - 128));
  uint64_t v4 = *(void **)(v1 - 112);
  if (v4)
  {
    *(void *)(v1 - 104) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,float>>::erase(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,float> *,std::pair<std::string,float> *,std::pair<std::string,float> *>((uint64_t)&v9, a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        if (*(char *)(v7 - 9) < 0) {
          operator delete(*(void **)(v7 - 32));
        }
        v7 -= 32;
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

void quasar::stitchResult(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X8>, double a7@<D0>)
{
  double v57 = a7;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  *(void *)a6 = 0;
  uint64_t v13 = *(const quasar::Token **)a3;
  std::vector<quasar::Token>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>((uint64_t *)a6, 0, *(const quasar::Token **)a3, *(void *)a3 + 224 * a4, a4);
  int v56 = *((_DWORD *)v13 + 56 * a4 + 7);
  int v54 = *((_DWORD *)v13 + 56 * a5 + 9);
  int v55 = v54;
  std::string::basic_string[abi:ne180100]<0>(&v53, "");
  uint64_t v15 = *a1;
  uint64_t v14 = a1[1];
  while (v15 != v14)
  {
    uint64_t v16 = *(void *)(v15 + 24);
    if (*(void *)(v15 + 32) != v16)
    {
      uint64_t v19 = *(const std::string::value_type **)(v16 + 8);
      uint64_t v17 = v16 + 8;
      int v18 = v19;
      int v20 = *(char *)(v17 + 23);
      if (v20 >= 0) {
        int v21 = (const std::string::value_type *)v17;
      }
      else {
        int v21 = v18;
      }
      if (v20 >= 0) {
        std::string::size_type v22 = *(unsigned __int8 *)(v17 + 23);
      }
      else {
        std::string::size_type v22 = *(void *)(v17 + 8);
      }
      std::string::append(&v53, v21, v22);
    }
    v15 += 72;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  std::string::basic_string[abi:ne180100]<0>(&v50, " ");
  int v23 = (quasar::QsrText *)quasar::replaceAll((uint64_t)&v53, (uint64_t)__p, (char *)&v50);
  if (SHIBYTE(v52) < 0) {
    operator delete(v50);
  }
  if (SBYTE7(v33) < 0) {
    operator delete(__p[0]);
  }
  unsigned __int8 v49 = *((unsigned char *)v13 + 224 * a5 + 44);
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v24 = quasar::QsrText::SingletonInstance(v23);
  if (quasar::QsrText::encodeTokenQsrText(v24, a2, (uint64_t)&v50))
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"#Corrections: QsrText-encoded keyword: ", 39);
      if (v52 >= 0) {
        unsigned int v26 = &v50;
      }
      else {
        unsigned int v26 = (void **)v50;
      }
      if (v52 >= 0) {
        uint64_t v27 = HIBYTE(v52);
      }
      else {
        uint64_t v27 = v51;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    LOBYTE(__p[0]) = 0;
    int v28 = *(std::string **)(a6 + 8);
    if ((unint64_t)v28 >= *(void *)(a6 + 16))
    {
      p_std::string::size_type size = std::vector<quasar::Token>::__emplace_back_slow_path<std::string &,unsigned int &,unsigned int &,unsigned int &,double &,BOOL &,BOOL,std::string &>((uint64_t *)a6, (uint64_t)&v50, &v56, &v55, &v54, &v57, &v49, (unsigned __int8 *)__p, (long long *)&v53);
    }
    else
    {
      std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string &,unsigned int &,unsigned int &,unsigned int &,double &,BOOL &,BOOL,std::string &>(a6 + 16, v28, (uint64_t)&v50, &v56, &v55, &v54, &v57, &v49, (unsigned __int8 *)__p, (long long *)&v53);
      p_std::string::size_type size = (uint64_t)&v28[9].__r_.__value_.__l.__size_;
      *(void *)(a6 + 8) = (char *)v28 + 224;
    }
    *(void *)(a6 + 8) = p_size;
  }
  uint64_t v30 = *(void *)(a3 + 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v30 - *(void *)a3) >> 5) > (unint64_t)(a5 + 1))
  {
    uint64_t v31 = (const quasar::Token *)(*(void *)a3 + 224 * a5 + 224);
    std::vector<quasar::Token>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>((uint64_t *)a6, *(long long **)(a6 + 8), v31, v30, 0x6DB6DB6DB6DB6DB7 * ((v30 - (uint64_t)v31) >> 5));
  }
  if (SHIBYTE(v52) < 0) {
    operator delete(v50);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
}

void sub_1B23E091C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (*(char *)(v3 - 129) < 0) {
    operator delete(*(void **)(v3 - 152));
  }
  if (*(char *)(v3 - 105) < 0) {
    operator delete(*(void **)(v3 - 128));
  }
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::KeywordFinderConfig::registerParams(uint64_t a1, quasar::SystemConfig *this, const void **a3)
{
  quasar::SystemConfig::getPrefix(this, &v9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v9.__r_.__value_.__l.__data_, a3, (uint64_t)&__p);
  quasar::SystemConfig::setPrefix((std::string *)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "fst-phonomap-file");
  std::string::basic_string[abi:ne180100]<0>(v6, "Phonomap file as an fst. This must be input-arc sorted");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1, (uint64_t)v6, 1, 44, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "phonetic-syms-file");
  std::string::basic_string[abi:ne180100]<0>(v6, "Symbol table file representing the phone set.");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 24, (uint64_t)v6, 1, 44, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "default-n-best-size");
  std::string::basic_string[abi:ne180100]<0>(v6, "The default value for n-best size.");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 48, (uint64_t)v6, 1, 44, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  quasar::SystemConfig::setPrefix((std::string *)this, &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1B23E0B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::KeywordFinder::KeywordFinder(uint64_t a1, long long *a2)
{
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)a1 = 4;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)(a1 + 32));
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_OWORD *)(a1 + 1648) = 0u;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 1672), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(a1 + 1688) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 1672) = v4;
  }
  quasar::Sanitizer::Sanitizer(a1 + 1696, a2);
  return a1;
}

void sub_1B23E0CB8(_Unwind_Exception *a1)
{
  char v7 = *(std::__shared_weak_count **)(v3 + 1656);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  int v8 = *(std::__shared_weak_count **)(v3 + 1640);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::pair<std::string,std::string>::~pair(v4);
  quasar::SystemConfig::~SystemConfig(v2);
  std::__tree<int>::destroy(v1, *v5);
  _Unwind_Resume(a1);
}

uint64_t quasar::KeywordFinder::init(quasar::KeywordFinder *this)
{
  uint64_t v1 = (char *)this + 32;
  memset(v7, 0, sizeof(v7));
  *(_OWORD *)std::string __p = 0u;
  long long v5 = 0u;
  LODWORD(v6) = 1065353216;
  int JsonFile = quasar::SystemConfig::readJsonFile((uint64_t)this + 32, (uint64_t)this + 1672, v7, (uint64_t)__p, 0, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  __p[0] = v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (JsonFile != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "corrections.keyword-finder");
    quasar::SystemConfig::hasParam((uint64_t)v1, (uint64_t)__p);
  }
  return 0;
}

void sub_1B23E1010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void quasar::KeywordFinder::correctResultWithKeyword(int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X3>, std::string *a5@<X4>, int a6@<W6>, _OWORD *a7@<X8>)
{
  int v7 = a6;
  memset(v46, 0, 48);
  memset(v45, 0, sizeof(v45));
  if (a6 == -1) {
    int v7 = a1[416];
  }
  if (*a4 != a4[1])
  {
    uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    if (v10 && *a3 != a3[1] && v7)
    {
      quasar::getAlternativeSpelledProns(a3, a1, &v26);
      if (quasar::gLogLevel >= 4)
      {
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v28 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v28);
        int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"#Corrections: Keyword Finder original input utterance: ", 55);
        quasar::formatResultTokensSimple(a5, 0);
        if ((v25 & 0x80u) == 0) {
          unsigned int v12 = __p;
        }
        else {
          unsigned int v12 = (void **)__p[0];
        }
        if ((v25 & 0x80u) == 0) {
          uint64_t v13 = v25;
        }
        else {
          uint64_t v13 = (uint64_t)__p[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
        if ((char)v25 < 0) {
          operator delete(__p[0]);
        }
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v28);
        if (quasar::gLogLevel >= 4)
        {
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          long long v28 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v28);
          uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"#Corrections: Keyword: ", 23);
          int v15 = *(char *)(a2 + 23);
          uint64_t v16 = v15 >= 0 ? a2 : *(void *)a2;
          uint64_t v17 = v15 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v28);
          if (quasar::gLogLevel >= 4)
          {
            long long v43 = 0u;
            long long v44 = 0u;
            long long v41 = 0u;
            long long v42 = 0u;
            long long v39 = 0u;
            long long v40 = 0u;
            long long v37 = 0u;
            long long v38 = 0u;
            long long v35 = 0u;
            long long v36 = 0u;
            long long v33 = 0u;
            long long v34 = 0u;
            long long v31 = 0u;
            long long v32 = 0u;
            long long v29 = 0u;
            long long v30 = 0u;
            long long v28 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v28);
            int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"#Corrections: Keyword pronunciation: ", 37);
            int v19 = SHIBYTE(v26->__r_.__value_.__r.__words[2]);
            if (v19 >= 0) {
              int v20 = v26;
            }
            else {
              int v20 = (std::string *)v26->__r_.__value_.__r.__words[0];
            }
            if (v19 >= 0) {
              std::string::size_type size = HIBYTE(v26->__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v26->__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v20, size);
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v28);
          }
        }
      }
      std::vector<quasar::KeywordFinder::KeywordLoggingStats>::emplace_back<>(v46);
      uint64_t v22 = v46[1];
      std::string::operator=((std::string *)(v46[1] - 56), (const std::string *)a2);
      *(void *)(v22 - 32) = 0x3FF0000000000000;
      if ((std::string **)(v22 - 24) != &v26) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(v22 - 24), v26, v27, 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)v26) >> 3));
      }
      quasar::findPossibleKeywordLocations();
    }
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v43 = 0uLL;
    long long v44 = 0uLL;
    long long v41 = 0uLL;
    long long v42 = 0uLL;
    long long v39 = 0uLL;
    long long v40 = 0uLL;
    long long v37 = 0uLL;
    long long v38 = 0uLL;
    long long v35 = 0uLL;
    long long v36 = 0uLL;
    long long v33 = 0uLL;
    long long v34 = 0uLL;
    long long v31 = 0uLL;
    long long v32 = 0uLL;
    long long v29 = 0uLL;
    long long v30 = 0uLL;
    long long v28 = 0uLL;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"#Corrections: Keyword Finder returning due to null input (not necessarily an error).", 84);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v28);
  }
  a7[4] = 0u;
  a7[5] = 0u;
  a7[2] = 0u;
  a7[3] = 0u;
  *a7 = 0u;
  a7[1] = 0u;
  *(void *)&long long v28 = &v46[3];
  std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  *(void *)&long long v28 = v46;
  std::vector<quasar::KeywordFinder::KeywordLoggingStats>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  *(void *)&long long v28 = &v45[3];
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  *(void *)&long long v28 = v45;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
}

void sub_1B23E1958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, std::locale a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,uint64_t a41,char *a42)
{
  a42 = &a39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a42);
  quasar::KeywordFinder::KeywordFinderRetValue::~KeywordFinderRetValue((void **)(v42 - 192));
  _Unwind_Resume(a1);
}

void *std::vector<quasar::KeywordFinder::KeywordLoggingStats>::emplace_back<>(uint64_t *a1)
{
  unint64_t v4 = a1[2];
  uint64_t v2 = a1 + 2;
  unint64_t v3 = v4;
  long long v5 = (void *)*(v2 - 1);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v5 - *a1) >> 3);
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) > 0x492492492492492) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v3 - *a1) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x249249249249249) {
      unint64_t v10 = 0x492492492492492;
    }
    else {
      unint64_t v10 = v8;
    }
    v14[4] = v2;
    if (v10) {
      int v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>((uint64_t)v2, v10);
    }
    else {
      int v11 = 0;
    }
    unsigned int v12 = &v11[56 * v7];
    v14[0] = v11;
    v14[1] = v12;
    void v14[3] = &v11[56 * v10];
    *(void *)unsigned int v12 = 0;
    *((void *)v12 + 1) = 0;
    *((void *)v12 + 2) = 0;
    *((void *)v12 + 3) = 0xBFF0000000000000;
    *((void *)v12 + 5) = 0;
    *((void *)v12 + 6) = 0;
    *((void *)v12 + 4) = 0;
    uint64_t v14[2] = v12 + 56;
    std::vector<quasar::KeywordFinder::KeywordLoggingStats>::__swap_out_circular_buffer(a1, v14);
    long long v6 = (void *)a1[1];
    std::__split_buffer<quasar::KeywordFinder::KeywordLoggingStats>::~__split_buffer(v14);
  }
  else
  {
    *long long v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = 0xBFF0000000000000;
    _OWORD v5[5] = 0;
    v5[6] = 0;
    v5[4] = 0;
    long long v6 = v5 + 7;
    a1[1] = (uint64_t)(v5 + 7);
  }
  a1[1] = (uint64_t)v6;
  return v6 - 7;
}

void sub_1B23E1BFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::KeywordFinder::KeywordLoggingStats>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::emplace_back<>(uint64_t *a1)
{
  unint64_t v4 = a1[2];
  uint64_t v2 = (uint64_t)(a1 + 2);
  unint64_t v3 = v4;
  unint64_t v5 = *(void *)(v2 - 8);
  if (v5 >= v4)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x555555555555555) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *a1) >> 4);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v15 = 0x555555555555555;
    }
    else {
      unint64_t v15 = v13;
    }
    v21[4] = v2;
    uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v2, v15);
    uint64_t v17 = &v16[48 * v12];
    v21[0] = v16;
    v21[1] = v17;
    v21[3] = &v16[48 * v18];
    *((void *)v17 + 1) = 0;
    *((void *)v17 + 2) = 0;
    *(void *)uint64_t v17 = 0;
    *((void *)v17 + 3) = -1;
    __asm { FMOV            V0.2D, #-1.0 }
    *((_OWORD *)v17 + 2) = _Q0;
    v21[2] = v17 + 48;
    std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__swap_out_circular_buffer(a1, v21);
    uint64_t v11 = a1[1];
    std::__split_buffer<std::tuple<std::string,long long,long long,float>>::~__split_buffer((uint64_t)v21);
  }
  else
  {
    *(void *)unint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
    *(void *)(v5 + 24) = -1;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v5 + 32) = _Q0;
    uint64_t v11 = v5 + 48;
    a1[1] = v5 + 48;
  }
  a1[1] = v11;
  return v11 - 48;
}

void sub_1B23E1D24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::tuple<std::string,long long,long long,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *,false>(unint64_t a1, void **a2, uint64_t a3, char a4)
{
  uint64_t v402 = *MEMORY[0x1E4F143B8];
LABEL_2:
  v385 = (unsigned __int8 *)(a2 - 8);
  v388 = a2 - 4;
  v383 = (unsigned __int8 *)(a2 - 12);
  unint64_t v10 = (const void **)a1;
  v395 = (unsigned __int8 **)a2;
  while (1)
  {
    unint64_t v11 = (unint64_t)v10;
    uint64_t v12 = (char *)a2 - (char *)v10;
    unint64_t v13 = ((char *)a2 - (char *)v10) >> 5;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          char v180 = *((unsigned char *)a2 - 9);
          if (v180 >= 0) {
            size_t v181 = *((unsigned __int8 *)a2 - 9);
          }
          else {
            size_t v181 = (size_t)*(a2 - 3);
          }
          char v182 = *(unsigned char *)(v11 + 23);
          if (v182 >= 0) {
            size_t v183 = *(unsigned __int8 *)(v11 + 23);
          }
          else {
            size_t v183 = *(void *)(v11 + 8);
          }
          if (v182 >= 0) {
            uint64_t v184 = (unsigned __int8 *)v11;
          }
          else {
            uint64_t v184 = *(unsigned __int8 **)v11;
          }
          if (v181 != v183) {
            goto LABEL_765;
          }
          if ((*((unsigned char *)a2 - 9) & 0x80) != 0)
          {
            if (memcmp(*v388, v184, (size_t)*(a2 - 3))) {
              goto LABEL_765;
            }
          }
          else if (*((unsigned char *)a2 - 9))
          {
            unint64_t v185 = v184;
            uint64_t v186 = v388;
            uint64_t v187 = *((unsigned __int8 *)a2 - 9);
            while (*(unsigned __int8 *)v186 == *v185)
            {
              uint64_t v186 = (void **)((char *)v186 + 1);
              ++v185;
              if (!--v187) {
                goto LABEL_776;
              }
            }
LABEL_765:
            if (v180 >= 0) {
              v369 = v388;
            }
            else {
              v369 = *v388;
            }
            if (v183 >= v181) {
              size_t v370 = v181;
            }
            else {
              size_t v370 = v183;
            }
            int v371 = memcmp(v369, v184, v370);
            BOOL v372 = v181 < v183;
            if (v371) {
              BOOL v372 = v371 < 0;
            }
            if (!v372) {
              return;
            }
LABEL_774:
            long long v373 = *(_OWORD *)v11;
            v398 = *(unsigned __int8 **)(v11 + 16);
            *(_OWORD *)std::string __p = v373;
            long long v374 = *(_OWORD *)v388;
            *(void *)(v11 + 16) = v388[2];
            *(_OWORD *)unint64_t v11 = v374;
            long long v375 = *(_OWORD *)__p;
            v388[2] = v398;
            *(_OWORD *)v388 = v375;
            LODWORD(v375) = *(_DWORD *)(v11 + 24);
            *(_DWORD *)(v11 + 24) = *((_DWORD *)a2 - 2);
            *((_DWORD *)a2 - 2) = v375;
            return;
          }
LABEL_776:
          if (*((float *)a2 - 2) >= *(float *)(v11 + 24)) {
            return;
          }
          goto LABEL_774;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>((unsigned __int8 **)v11, (unsigned __int8 *)(v11 + 32), (unsigned __int8 *)v388);
          return;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>((long long *)v11, (unsigned __int8 *)(v11 + 32), (unsigned __int8 *)(v11 + 64), (unsigned __int8 *)v388);
          return;
        case 5uLL:
          std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *,0>((unsigned __int8 *)v11, (unsigned __int8 *)(v11 + 32), (unsigned __int8 *)(v11 + 64), (unsigned __int8 *)(v11 + 96), (unsigned __int8 *)v388);
          return;
        default:
          JUMPOUT(0);
      }
    }
    unint64_t v391 = v11;
    if (v12 <= 767) {
      break;
    }
    if (!a3)
    {
      if ((void **)v11 == a2) {
        return;
      }
      unint64_t v386 = v12;
      int64_t v219 = (v13 - 2) >> 1;
      int64_t v220 = v219;
      unint64_t v393 = v13;
      while (1)
      {
        int64_t v221 = v220;
        if (v219 < v220) {
          goto LABEL_587;
        }
        uint64_t v222 = (2 * v220) | 1;
        long long v223 = (unsigned __int8 *)(v11 + 32 * v222);
        uint64_t v224 = 2 * v220 + 2;
        int64_t v389 = v220;
        if (v224 >= (uint64_t)v13) {
          goto LABEL_494;
        }
        signed __int8 v225 = v223[23];
        if (v225 >= 0) {
          size_t v226 = v223[23];
        }
        else {
          size_t v226 = *((void *)v223 + 1);
        }
        int v227 = (char)v223[55];
        if (v227 >= 0) {
          size_t v228 = v223[55];
        }
        else {
          size_t v228 = *((void *)v223 + 5);
        }
        if (v227 >= 0) {
          int v229 = v223 + 32;
        }
        else {
          int v229 = (unsigned __int8 *)*((void *)v223 + 4);
        }
        if (v226 == v228)
        {
          if ((v223[23] & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v223, v229, *((void *)v223 + 1)))
            {
LABEL_589:
              int64_t v221 = v389;
              unint64_t v11 = v391;
              if (*(float *)(v391 + 32 * v222 + 24) < *((float *)v223 + 14)) {
                goto LABEL_493;
              }
              goto LABEL_494;
            }
          }
          else
          {
            if (!v223[23]) {
              goto LABEL_589;
            }
            int64_t v230 = v229;
            char v231 = v223;
            uint64_t v232 = v223[23];
            while (*v231 == *v230)
            {
              ++v231;
              ++v230;
              if (!--v232) {
                goto LABEL_589;
              }
            }
          }
        }
        if (v225 >= 0) {
          v233 = v223;
        }
        else {
          v233 = *(const void **)v223;
        }
        if (v228 >= v226) {
          size_t v234 = v226;
        }
        else {
          size_t v234 = v228;
        }
        int v235 = memcmp(v233, v229, v234);
        BOOL v236 = v226 < v228;
        if (v235) {
          BOOL v236 = v235 < 0;
        }
        int64_t v221 = v389;
        unint64_t v11 = v391;
        if (v236)
        {
LABEL_493:
          v223 += 32;
          uint64_t v222 = v224;
        }
LABEL_494:
        v237 = (unsigned __int8 **)(v11 + 32 * v221);
        signed __int8 v238 = v223[23];
        if (v238 >= 0) {
          size_t v239 = v223[23];
        }
        else {
          size_t v239 = *((void *)v223 + 1);
        }
        char v240 = *((unsigned char *)v237 + 23);
        if (v240 >= 0) {
          size_t v241 = *((unsigned __int8 *)v237 + 23);
        }
        else {
          size_t v241 = (size_t)v237[1];
        }
        if (v240 >= 0) {
          uint64_t v242 = (unsigned __int8 *)v237;
        }
        else {
          uint64_t v242 = *v237;
        }
        a2 = (void **)v395;
        if (v239 == v241)
        {
          if ((v223[23] & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v223, v242, *((void *)v223 + 1)))
            {
LABEL_521:
              int64_t v221 = v389;
              unint64_t v11 = v391;
              float v250 = *(float *)(v391 + 32 * v389 + 24);
              if (*((float *)v223 + 6) < v250) {
                goto LABEL_587;
              }
LABEL_522:
              long long v251 = *(_OWORD *)v237;
              v398 = v237[2];
              *(_OWORD *)std::string __p = v251;
              v237[1] = 0;
              v237[2] = 0;
              void *v237 = 0;
              float v399 = v250;
              while (2)
              {
                long long v252 = *(_OWORD *)v223;
                v237[2] = (unsigned __int8 *)*((void *)v223 + 2);
                *(_OWORD *)v237 = v252;
                v223[23] = 0;
                *long long v223 = 0;
                *((_DWORD *)v237 + 6) = *((_DWORD *)v223 + 6);
                if (v219 < v222)
                {
LABEL_584:
                  a2 = (void **)v395;
                  int64_t v221 = v389;
                  if ((char)v223[23] < 0) {
                    operator delete(*(void **)v223);
                  }
                  long long v280 = *(_OWORD *)__p;
                  *((void *)v223 + 2) = v398;
                  *(_OWORD *)long long v223 = v280;
                  *((float *)v223 + 6) = v399;
                  goto LABEL_587;
                }
                uint64_t v253 = (2 * v222) | 1;
                v254 = (unsigned __int8 *)(v11 + 32 * v253);
                if (2 * v222 + 2 >= (uint64_t)v13) {
                  goto LABEL_552;
                }
                int64_t v255 = v219;
                signed __int8 v256 = v254[23];
                if (v256 >= 0) {
                  size_t v257 = v254[23];
                }
                else {
                  size_t v257 = *((void *)v254 + 1);
                }
                int v258 = (char)v254[55];
                if (v258 >= 0) {
                  size_t v259 = v254[55];
                }
                else {
                  size_t v259 = *((void *)v254 + 5);
                }
                if (v258 >= 0) {
                  v260 = v254 + 32;
                }
                else {
                  v260 = (unsigned __int8 *)*((void *)v254 + 4);
                }
                if (v257 != v259) {
                  goto LABEL_542;
                }
                if ((v254[23] & 0x80) != 0)
                {
                  if (memcmp(*(const void **)v254, v260, *((void *)v254 + 1))) {
                    goto LABEL_542;
                  }
                }
                else if (v254[23])
                {
                  uint64_t v261 = v260;
                  v262 = v254;
                  uint64_t v263 = v254[23];
                  while (*v262 == *v261)
                  {
                    ++v262;
                    ++v261;
                    if (!--v263) {
                      goto LABEL_582;
                    }
                  }
LABEL_542:
                  if (v256 >= 0) {
                    v264 = v254;
                  }
                  else {
                    v264 = *(const void **)v254;
                  }
                  if (v259 >= v257) {
                    size_t v265 = v257;
                  }
                  else {
                    size_t v265 = v259;
                  }
                  int v266 = memcmp(v264, v260, v265);
                  BOOL v267 = v257 < v259;
                  if (v266) {
                    BOOL v267 = v266 < 0;
                  }
                  int64_t v219 = v255;
                  unint64_t v13 = v393;
                  if (v267)
                  {
LABEL_551:
                    v254 += 32;
                    uint64_t v253 = 2 * v222 + 2;
                  }
LABEL_552:
                  signed __int8 v268 = v254[23];
                  if (v268 >= 0) {
                    size_t v269 = v254[23];
                  }
                  else {
                    size_t v269 = *((void *)v254 + 1);
                  }
                  if (SHIBYTE(v398) >= 0) {
                    v270 = (void *)HIBYTE(v398);
                  }
                  else {
                    v270 = __p[1];
                  }
                  if (SHIBYTE(v398) >= 0) {
                    uint64_t v271 = __p;
                  }
                  else {
                    uint64_t v271 = (void **)__p[0];
                  }
                  if ((void *)v269 == v270)
                  {
                    if ((v254[23] & 0x80) == 0)
                    {
                      if (v254[23])
                      {
                        v272 = v271;
                        v273 = v254;
                        uint64_t v274 = v254[23];
                        while (*v273 == *(unsigned __int8 *)v272)
                        {
                          ++v273;
                          v272 = (void **)((char *)v272 + 1);
                          if (!--v274) {
                            goto LABEL_579;
                          }
                        }
                        goto LABEL_569;
                      }
LABEL_579:
                      unint64_t v11 = v391;
                      if (*((float *)v254 + 6) < v399) {
                        goto LABEL_584;
                      }
LABEL_580:
                      unsigned __int8 v279 = v223[23];
                      v237 = (unsigned __int8 **)v223;
                      long long v223 = v254;
                      uint64_t v222 = v253;
                      if ((v279 & 0x80) != 0) {
                        operator delete(*v237);
                      }
                      continue;
                    }
                    if (!memcmp(*(const void **)v254, v271, *((void *)v254 + 1))) {
                      goto LABEL_579;
                    }
                  }
LABEL_569:
                  if (v268 >= 0) {
                    v275 = v254;
                  }
                  else {
                    v275 = *(const void **)v254;
                  }
                  if ((unint64_t)v270 >= v269) {
                    size_t v276 = v269;
                  }
                  else {
                    size_t v276 = (size_t)v270;
                  }
                  int v277 = memcmp(v275, v271, v276);
                  BOOL v278 = v269 < (unint64_t)v270;
                  if (v277) {
                    BOOL v278 = v277 < 0;
                  }
                  unint64_t v11 = v391;
                  if (v278) {
                    goto LABEL_584;
                  }
                  goto LABEL_580;
                }
                break;
              }
LABEL_582:
              int64_t v219 = v255;
              unint64_t v13 = v393;
              if (*(float *)(v391 + 32 * v253 + 24) < *((float *)v254 + 14)) {
                goto LABEL_551;
              }
              goto LABEL_552;
            }
          }
          else
          {
            if (!v223[23]) {
              goto LABEL_521;
            }
            int64_t v243 = v242;
            int v244 = v223;
            uint64_t v245 = v223[23];
            while (*v244 == *v243)
            {
              ++v244;
              ++v243;
              if (!--v245) {
                goto LABEL_521;
              }
            }
          }
        }
        if (v238 >= 0) {
          int v246 = v223;
        }
        else {
          int v246 = *(const void **)v223;
        }
        if (v241 >= v239) {
          size_t v247 = v239;
        }
        else {
          size_t v247 = v241;
        }
        int v248 = memcmp(v246, v242, v247);
        BOOL v249 = v239 < v241;
        if (v248) {
          BOOL v249 = v248 < 0;
        }
        int64_t v221 = v389;
        unint64_t v11 = v391;
        if (!v249)
        {
          float v250 = *(float *)(v391 + 32 * v389 + 24);
          goto LABEL_522;
        }
LABEL_587:
        int64_t v220 = v221 - 1;
        if (!v221)
        {
          uint64_t v281 = v386 >> 5;
          __na = (void *)(v11 + 8);
          while (1)
          {
            unint64_t v282 = a2;
            uint64_t v283 = 0;
            v384 = v282;
            v387 = *(unsigned __int8 **)v11;
            *(void *)&long long v400 = *__na;
            *(void *)((char *)&v400 + 7) = *(void *)((char *)__na + 7);
            unsigned __int8 v390 = *(unsigned char *)(v11 + 23);
            *(void *)(v11 + 8) = 0;
            *(void *)(v11 + 16) = 0;
            *(void *)unint64_t v11 = 0;
            int v284 = *(_DWORD *)(v11 + 24);
            int64_t v285 = (unint64_t)(v281 - 2) >> 1;
            v286 = (unsigned __int8 *)v11;
            int64_t v394 = v285;
            uint64_t v396 = v281;
            do
            {
              uint64_t v287 = v283 + 1;
              uint64_t v288 = &v286[32 * v283 + 32];
              uint64_t v289 = 2 * v283;
              uint64_t v283 = (2 * v283) | 1;
              uint64_t v290 = v289 + 2;
              if (v289 + 2 >= v281) {
                goto LABEL_620;
              }
              signed __int8 v291 = v288[23];
              if (v291 >= 0) {
                size_t v292 = v288[23];
              }
              else {
                size_t v292 = *((void *)v288 + 1);
              }
              int v293 = (char)v288[55];
              if (v293 >= 0) {
                size_t v294 = v288[55];
              }
              else {
                size_t v294 = *((void *)v288 + 5);
              }
              if (v293 >= 0) {
                v295 = v288 + 32;
              }
              else {
                v295 = (unsigned __int8 *)*((void *)v288 + 4);
              }
              if (v292 == v294)
              {
                if ((v288[23] & 0x80) != 0)
                {
                  if (!memcmp(*(const void **)v288, v295, *((void *)v288 + 1)))
                  {
LABEL_624:
                    int64_t v285 = v394;
                    uint64_t v281 = v396;
                    if (*(float *)&v286[32 * v287 + 24] < *((float *)v288 + 14)) {
                      goto LABEL_619;
                    }
                    goto LABEL_620;
                  }
                }
                else
                {
                  if (!v288[23]) {
                    goto LABEL_624;
                  }
                  long long v296 = v295;
                  v297 = v288;
                  uint64_t v298 = v288[23];
                  while (*v297 == *v296)
                  {
                    ++v297;
                    ++v296;
                    if (!--v298) {
                      goto LABEL_624;
                    }
                  }
                }
              }
              if (v291 >= 0) {
                v299 = v288;
              }
              else {
                v299 = *(unsigned __int8 **)v288;
              }
              if (v294 >= v292) {
                size_t v300 = v292;
              }
              else {
                size_t v300 = v294;
              }
              int v301 = memcmp(v299, v295, v300);
              BOOL v302 = v292 < v294;
              if (v301) {
                BOOL v302 = v301 < 0;
              }
              int64_t v285 = v394;
              uint64_t v281 = v396;
              if (v302)
              {
LABEL_619:
                v288 += 32;
                uint64_t v283 = v290;
              }
LABEL_620:
              if ((char)v286[23] < 0) {
                operator delete(*(void **)v286);
              }
              long long v303 = *(_OWORD *)v288;
              *((void *)v286 + 2) = *((void *)v288 + 2);
              *(_OWORD *)v286 = v303;
              v288[23] = 0;
              *uint64_t v288 = 0;
              *((_DWORD *)v286 + 6) = *((_DWORD *)v288 + 6);
              v286 = v288;
            }
            while (v283 <= v285);
            a2 = v384 - 4;
            int v304 = (char)v288[23];
            if (v288 == (unsigned __int8 *)(v384 - 4))
            {
              if (v304 < 0) {
                operator delete(*(void **)v288);
              }
              *(void *)uint64_t v288 = v387;
              uint64_t v318 = *(void *)((char *)&v400 + 7);
              *((void *)v288 + 1) = v400;
              *(void *)(v288 + 15) = v318;
              v288[23] = v390;
              *((_DWORD *)v288 + 6) = v284;
              goto LABEL_697;
            }
            if (v304 < 0) {
              operator delete(*(void **)v288);
            }
            long long v305 = *(_OWORD *)a2;
            *((void *)v288 + 2) = *(v384 - 2);
            *(_OWORD *)uint64_t v288 = v305;
            *((unsigned char *)v384 - 9) = 0;
            *((unsigned char *)v384 - 32) = 0;
            *((_DWORD *)v288 + 6) = *((_DWORD *)v384 - 2);
            if (*((char *)v384 - 9) < 0) {
              operator delete(*a2);
            }
            *(v384 - 4) = v387;
            v306 = (void *)v400;
            *(void **)((char *)v384 - 17) = *(void **)((char *)&v400 + 7);
            *(v384 - 3) = v306;
            *((unsigned char *)v384 - 9) = v390;
            *((_DWORD *)v384 - 2) = v284;
            uint64_t v307 = (uint64_t)&v288[-v391 + 32];
            if (v307 < 33) {
              goto LABEL_697;
            }
            unint64_t v308 = (((unint64_t)v307 >> 5) - 2) >> 1;
            unint64_t v309 = v391 + 32 * v308;
            char v310 = *(unsigned char *)(v309 + 23);
            if (v310 >= 0) {
              size_t v311 = *(unsigned __int8 *)(v309 + 23);
            }
            else {
              size_t v311 = *(void *)(v309 + 8);
            }
            signed __int8 v312 = v288[23];
            if (v312 >= 0) {
              size_t v313 = v288[23];
            }
            else {
              size_t v313 = *((void *)v288 + 1);
            }
            if (v312 >= 0) {
              v314 = v288;
            }
            else {
              v314 = *(unsigned __int8 **)v288;
            }
            if (v311 != v313) {
              goto LABEL_652;
            }
            if ((*(unsigned char *)(v309 + 23) & 0x80) != 0)
            {
              if (memcmp(*(const void **)v309, v314, *(void *)(v309 + 8))) {
                goto LABEL_652;
              }
LABEL_662:
              float v323 = *((float *)v288 + 6);
              if (*(float *)(v391 + 32 * v308 + 24) >= v323) {
                goto LABEL_697;
              }
LABEL_663:
              long long v324 = *(_OWORD *)v288;
              v398 = (unsigned __int8 *)*((void *)v288 + 2);
              *(_OWORD *)std::string __p = v324;
              *((void *)v288 + 1) = 0;
              *((void *)v288 + 2) = 0;
              *(void *)uint64_t v288 = 0;
              float v399 = v323;
              if (SHIBYTE(v398) >= 0) {
                v325 = (void *)HIBYTE(v398);
              }
              else {
                v325 = __p[1];
              }
              if (SHIBYTE(v398) >= 0) {
                v326 = __p;
              }
              else {
                v326 = (void **)__p[0];
              }
              while (1)
              {
                v327 = (unsigned __int8 *)v309;
                if ((char)v288[23] < 0) {
                  operator delete(*(void **)v288);
                }
                long long v328 = *(_OWORD *)v309;
                *((void *)v288 + 2) = *(void *)(v309 + 16);
                *(_OWORD *)uint64_t v288 = v328;
                *(unsigned char *)(v309 + 23) = 0;
                *(unsigned char *)unint64_t v309 = 0;
                *((_DWORD *)v288 + 6) = *(_DWORD *)(v309 + 24);
                if (!v308)
                {
LABEL_694:
                  if ((char)v327[23] < 0) {
                    operator delete(*(void **)v327);
                  }
                  long long v338 = *(_OWORD *)__p;
                  *((void *)v327 + 2) = v398;
                  *(_OWORD *)v327 = v338;
                  *((float *)v327 + 6) = v399;
                  goto LABEL_697;
                }
                unint64_t v308 = (v308 - 1) >> 1;
                unint64_t v309 = v391 + 32 * v308;
                char v329 = *(unsigned char *)(v309 + 23);
                if (v329 >= 0) {
                  size_t v330 = *(unsigned __int8 *)(v309 + 23);
                }
                else {
                  size_t v330 = *(void *)(v309 + 8);
                }
                if ((void *)v330 == v325)
                {
                  if ((*(unsigned char *)(v309 + 23) & 0x80) != 0)
                  {
                    if (!memcmp(*(const void **)v309, v326, *(void *)(v309 + 8)))
                    {
LABEL_693:
                      uint64_t v288 = v327;
                      if (*(float *)(v391 + 32 * v308 + 24) >= v399) {
                        goto LABEL_694;
                      }
                      continue;
                    }
                  }
                  else
                  {
                    if (!*(unsigned char *)(v309 + 23)) {
                      goto LABEL_693;
                    }
                    v331 = v326;
                    v332 = (unsigned __int8 *)(v391 + 32 * v308);
                    uint64_t v333 = *(unsigned __int8 *)(v309 + 23);
                    while (*v332 == *(unsigned __int8 *)v331)
                    {
                      ++v332;
                      v331 = (void **)((char *)v331 + 1);
                      if (!--v333) {
                        goto LABEL_693;
                      }
                    }
                  }
                }
                if (v329 >= 0) {
                  v334 = (const void *)(v391 + 32 * v308);
                }
                else {
                  v334 = *(const void **)v309;
                }
                if ((unint64_t)v325 >= v330) {
                  size_t v335 = v330;
                }
                else {
                  size_t v335 = (size_t)v325;
                }
                int v336 = memcmp(v334, v326, v335);
                BOOL v337 = v330 < (unint64_t)v325;
                if (v336) {
                  BOOL v337 = v336 < 0;
                }
                uint64_t v288 = v327;
                if (!v337) {
                  goto LABEL_694;
                }
              }
            }
            if (!*(unsigned char *)(v309 + 23)) {
              goto LABEL_662;
            }
            v315 = v314;
            v316 = (unsigned __int8 *)(v391 + 32 * v308);
            uint64_t v317 = *(unsigned __int8 *)(v309 + 23);
            while (*v316 == *v315)
            {
              ++v316;
              ++v315;
              if (!--v317) {
                goto LABEL_662;
              }
            }
LABEL_652:
            if (v310 >= 0) {
              v319 = (const void *)(v391 + 32 * v308);
            }
            else {
              v319 = *(const void **)v309;
            }
            if (v313 >= v311) {
              size_t v320 = v311;
            }
            else {
              size_t v320 = v313;
            }
            int v321 = memcmp(v319, v314, v320);
            BOOL v322 = v311 < v313;
            if (v321) {
              BOOL v322 = v321 < 0;
            }
            if (v322)
            {
              float v323 = *((float *)v288 + 6);
              goto LABEL_663;
            }
LABEL_697:
            BOOL v339 = v281-- <= 2;
            unint64_t v11 = v391;
            if (v339) {
              return;
            }
          }
        }
      }
    }
    unint64_t v14 = v13 >> 1;
    unint64_t v15 = v11 + 32 * (v13 >> 1);
    if ((unint64_t)v12 > 0x1000)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>((unsigned __int8 **)v11, (unsigned __int8 *)(v11 + 32 * (v13 >> 1)), (unsigned __int8 *)v388);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>((unsigned __int8 **)(v11 + 32), (unsigned __int8 *)(v15 - 32), v385);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>((unsigned __int8 **)(v11 + 64), (unsigned __int8 *)(v11 + 32 + 32 * v14), v383);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>((unsigned __int8 **)(v15 - 32), (unsigned __int8 *)v15, (unsigned __int8 *)(v11 + 32 + 32 * v14));
      long long v16 = *(_OWORD *)v11;
      v398 = *(unsigned __int8 **)(v11 + 16);
      *(_OWORD *)std::string __p = v16;
      uint64_t v17 = *(void *)(v15 + 16);
      *(_OWORD *)unint64_t v11 = *(_OWORD *)v15;
      *(void *)(v11 + 16) = v17;
      long long v18 = *(_OWORD *)__p;
      *(void *)(v15 + 16) = v398;
      *(_OWORD *)unint64_t v15 = v18;
      LODWORD(v18) = *(_DWORD *)(v11 + 24);
      *(_DWORD *)(v11 + 24) = *(_DWORD *)(v15 + 24);
      *(_DWORD *)(v15 + 24) = v18;
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>((unsigned __int8 **)(v11 + 32 * (v13 >> 1)), (unsigned __int8 *)v11, (unsigned __int8 *)v388);
    }
    uint64_t v392 = a3 - 1;
    if (a4) {
      goto LABEL_39;
    }
    int v19 = (const void **)(v11 - 32);
    char v20 = *(unsigned char *)(v11 - 9);
    if (v20 >= 0) {
      size_t v21 = *(unsigned __int8 *)(v11 - 9);
    }
    else {
      size_t v21 = *(void *)(v11 - 24);
    }
    char v22 = *(unsigned char *)(v11 + 23);
    if (v22 >= 0) {
      size_t v23 = *(unsigned __int8 *)(v11 + 23);
    }
    else {
      size_t v23 = *(void *)(v11 + 8);
    }
    if (v22 >= 0) {
      uint64_t v24 = (unsigned __int8 *)v11;
    }
    else {
      uint64_t v24 = *(unsigned __int8 **)v11;
    }
    if (v21 != v23) {
      goto LABEL_28;
    }
    if ((*(unsigned char *)(v11 - 9) & 0x80) != 0)
    {
      if (memcmp(*v19, v24, *(void *)(v11 - 24))) {
        goto LABEL_28;
      }
    }
    else if (*(unsigned char *)(v11 - 9))
    {
      unsigned __int8 v25 = v24;
      unsigned int v26 = (unsigned __int8 *)(v11 - 32);
      uint64_t v27 = *(unsigned __int8 *)(v11 - 9);
      while (*v26 == *v25)
      {
        ++v26;
        ++v25;
        if (!--v27) {
          goto LABEL_38;
        }
      }
LABEL_28:
      if (v20 >= 0) {
        long long v28 = (const void *)(v11 - 32);
      }
      else {
        long long v28 = *v19;
      }
      if (v23 >= v21) {
        size_t v29 = v21;
      }
      else {
        size_t v29 = v23;
      }
      int v30 = memcmp(v28, v24, v29);
      BOOL v31 = v21 < v23;
      if (v30) {
        BOOL v31 = v30 < 0;
      }
      if (!v31)
      {
        float v32 = *(float *)(v11 + 24);
        goto LABEL_190;
      }
      goto LABEL_39;
    }
LABEL_38:
    float v32 = *(float *)(v11 + 24);
    if (*(float *)(v11 - 8) < v32)
    {
LABEL_39:
      long long v33 = *(_OWORD *)v11;
      v398 = *(unsigned __int8 **)(v11 + 16);
      *(_OWORD *)std::string __p = v33;
      *(void *)(v11 + 8) = 0;
      *(void *)(v11 + 16) = 0;
      *(void *)unint64_t v11 = 0;
      float v34 = *(float *)(v11 + 24);
      float v399 = v34;
      if (SHIBYTE(v398) >= 0) {
        long long v35 = (void *)HIBYTE(v398);
      }
      else {
        long long v35 = __p[1];
      }
      if (SHIBYTE(v398) >= 0) {
        long long v36 = __p;
      }
      else {
        long long v36 = (void **)__p[0];
      }
      long long v37 = (const void **)v11;
      do
      {
        while (1)
        {
          long long v38 = v37;
          v37 += 4;
          uint64_t v39 = *((unsigned __int8 *)v38 + 55);
          if ((v39 & 0x80u) == 0) {
            size_t v40 = *((unsigned __int8 *)v38 + 55);
          }
          else {
            size_t v40 = (size_t)v38[5];
          }
          if ((void *)v40 != v35) {
            goto LABEL_57;
          }
          if ((v39 & 0x80) == 0) {
            break;
          }
          if (memcmp(*v37, v36, (size_t)v38[5])) {
            goto LABEL_57;
          }
LABEL_67:
          if (*((float *)v38 + 14) >= v34) {
            goto LABEL_68;
          }
        }
        if (!*((unsigned char *)v38 + 55)) {
          goto LABEL_67;
        }
        uint64_t v41 = 0;
        while (*((unsigned __int8 *)v38 + v41 + 32) == *((unsigned __int8 *)v36 + v41))
        {
          if (v39 == ++v41) {
            goto LABEL_67;
          }
        }
LABEL_57:
        if ((v39 & 0x80u) == 0) {
          uint64_t v42 = v37;
        }
        else {
          uint64_t v42 = *v37;
        }
        if ((unint64_t)v35 >= v40) {
          size_t v43 = v40;
        }
        else {
          size_t v43 = (size_t)v35;
        }
        int v44 = memcmp(v42, v36, v43);
        BOOL v45 = v40 < (unint64_t)v35;
        if (v44) {
          BOOL v45 = v44 < 0;
        }
      }
      while (v45);
LABEL_68:
      long long v46 = a2;
      if (v38 != (const void **)v11)
      {
        while (1)
        {
          long long v47 = (const void **)(v46 - 4);
          uint64_t v48 = *((unsigned __int8 *)v46 - 9);
          if ((v48 & 0x80u) == 0) {
            size_t v49 = *((unsigned __int8 *)v46 - 9);
          }
          else {
            size_t v49 = (size_t)*(v46 - 3);
          }
          if ((void *)v49 != v35) {
            goto LABEL_80;
          }
          if ((v48 & 0x80) != 0)
          {
            if (!memcmp(*v47, v36, (size_t)*(v46 - 3))) {
              goto LABEL_90;
            }
LABEL_80:
            if ((v48 & 0x80u) == 0) {
              uint64_t v51 = v46 - 4;
            }
            else {
              uint64_t v51 = (void **)*v47;
            }
            if ((unint64_t)v35 >= v49) {
              size_t v52 = v49;
            }
            else {
              size_t v52 = (size_t)v35;
            }
            int v53 = memcmp(v51, v36, v52);
            BOOL v54 = v49 < (unint64_t)v35;
            if (v53) {
              BOOL v54 = v53 < 0;
            }
            v46 -= 4;
            if (v54) {
              goto LABEL_121;
            }
          }
          else
          {
            if (*((unsigned char *)v46 - 9))
            {
              uint64_t v50 = 0;
              while (*((unsigned __int8 *)v46 + v50 - 32) == *((unsigned __int8 *)v36 + v50))
              {
                if (v48 == ++v50) {
                  goto LABEL_90;
                }
              }
              goto LABEL_80;
            }
LABEL_90:
            float v55 = *((float *)v46 - 2);
            v46 -= 4;
            if (v55 < v34) {
              goto LABEL_121;
            }
          }
        }
      }
      long long v47 = (const void **)v395;
      if (v37 < (const void **)v395)
      {
        int v56 = v395;
        do
        {
          long long v47 = (const void **)(v56 - 4);
          uint64_t v57 = *((unsigned __int8 *)v56 - 9);
          if ((v57 & 0x80u) == 0) {
            size_t v58 = *((unsigned __int8 *)v56 - 9);
          }
          else {
            size_t v58 = (size_t)*(v56 - 3);
          }
          if ((void *)v58 != v35) {
            goto LABEL_105;
          }
          if ((v57 & 0x80) != 0)
          {
            if (memcmp(*v47, v36, (size_t)*(v56 - 3))) {
              goto LABEL_105;
            }
          }
          else if (*((unsigned char *)v56 - 9))
          {
            uint64_t v59 = 0;
            while (*((unsigned __int8 *)v56 + v59 - 32) == *((unsigned __int8 *)v36 + v59))
            {
              if (v57 == ++v59) {
                goto LABEL_116;
              }
            }
LABEL_105:
            if ((v57 & 0x80u) == 0) {
              long long v60 = v56 - 4;
            }
            else {
              long long v60 = (unsigned __int8 **)*v47;
            }
            if ((unint64_t)v35 >= v58) {
              size_t v61 = v58;
            }
            else {
              size_t v61 = (size_t)v35;
            }
            int v62 = memcmp(v60, v36, v61);
            BOOL v63 = v58 >= (unint64_t)v35;
            if (v62) {
              BOOL v63 = v62 >= 0;
            }
            BOOL v64 = !v63 || v37 >= v47;
            goto LABEL_119;
          }
LABEL_116:
          BOOL v64 = *((float *)v56 - 2) < v34 || v37 >= v47;
LABEL_119:
          v56 -= 4;
        }
        while (!v64);
      }
LABEL_121:
      unint64_t v10 = v37;
      if (v37 >= v47) {
        goto LABEL_176;
      }
      uint64_t v65 = v47;
      while (2)
      {
        long long v400 = *(_OWORD *)v10;
        long long v66 = v400;
        v401 = (unsigned __int8 *)v10[2];
        int v67 = v401;
        uint64_t v68 = v65[2];
        *(_OWORD *)unint64_t v10 = *(_OWORD *)v65;
        uint64_t v10[2] = v68;
        v65[2] = v67;
        *(_OWORD *)uint64_t v65 = v66;
        LODWORD(v66) = *((_DWORD *)v10 + 6);
        *((_DWORD *)v10 + 6) = *((_DWORD *)v65 + 6);
        *((_DWORD *)v65 + 6) = v66;
        if (SHIBYTE(v398) >= 0) {
          long long v69 = (void *)HIBYTE(v398);
        }
        else {
          long long v69 = __p[1];
        }
        if (SHIBYTE(v398) >= 0) {
          uint64_t v70 = __p;
        }
        else {
          uint64_t v70 = (void **)__p[0];
        }
        float v71 = v399;
        long long v72 = v10;
        while (2)
        {
          while (1)
          {
            unint64_t v10 = v72 + 4;
            uint64_t v73 = *((unsigned __int8 *)v72 + 55);
            uint64_t v74 = (v73 & 0x80u) == 0 ? (void *)*((unsigned __int8 *)v72 + 55) : (void *)v72[5];
            if (v74 != v69) {
              break;
            }
            if ((v73 & 0x80) != 0)
            {
              if (memcmp(*v10, v70, (size_t)v72[5])) {
                break;
              }
            }
            else if (*((unsigned char *)v72 + 55))
            {
              uint64_t v75 = 0;
              while (*((unsigned __int8 *)v72 + v75 + 32) == *((unsigned __int8 *)v70 + v75))
              {
                if (v73 == ++v75) {
                  goto LABEL_151;
                }
              }
              break;
            }
LABEL_151:
            float v80 = *((float *)v72 + 14);
            v72 += 4;
            if (v80 >= v71) {
              goto LABEL_152;
            }
          }
          if ((v73 & 0x80u) == 0) {
            uint64_t v76 = v72 + 4;
          }
          else {
            uint64_t v76 = *v10;
          }
          if (v69 >= v74) {
            size_t v77 = (size_t)v74;
          }
          else {
            size_t v77 = (size_t)v69;
          }
          int v78 = memcmp(v76, v70, v77);
          BOOL v79 = v74 < v69;
          if (v78) {
            BOOL v79 = v78 < 0;
          }
          v72 += 4;
          if (v79) {
            continue;
          }
          break;
        }
LABEL_152:
        uint64_t v81 = v65;
        while (2)
        {
          while (1)
          {
            uint64_t v65 = v81 - 4;
            uint64_t v82 = *((unsigned __int8 *)v81 - 9);
            uint64_t v83 = (v82 & 0x80u) == 0 ? (void *)*((unsigned __int8 *)v81 - 9) : (void *)*(v81 - 3);
            if (v83 != v69) {
              break;
            }
            if ((v82 & 0x80) != 0)
            {
              if (memcmp(*v65, v70, (size_t)*(v81 - 3))) {
                break;
              }
            }
            else if (*((unsigned char *)v81 - 9))
            {
              uint64_t v84 = 0;
              while (*((unsigned __int8 *)v81 + v84 - 32) == *((unsigned __int8 *)v70 + v84))
              {
                if (v82 == ++v84) {
                  goto LABEL_174;
                }
              }
              break;
            }
LABEL_174:
            float v89 = *((float *)v81 - 2);
            v81 -= 4;
            if (v89 < v71) {
              goto LABEL_175;
            }
          }
          if ((v82 & 0x80u) == 0) {
            uint64_t v85 = v81 - 4;
          }
          else {
            uint64_t v85 = (const void **)*v65;
          }
          if (v69 >= v83) {
            size_t v86 = (size_t)v83;
          }
          else {
            size_t v86 = (size_t)v69;
          }
          int v87 = memcmp(v85, v70, v86);
          BOOL v88 = v83 < v69;
          if (v87) {
            BOOL v88 = v87 < 0;
          }
          v81 -= 4;
          if (!v88) {
            continue;
          }
          break;
        }
LABEL_175:
        if (v10 < v65) {
          continue;
        }
        break;
      }
LABEL_176:
      long long v90 = (void **)(v10 - 4);
      a1 = v391;
      a3 = v392;
      if (v10 - 4 != (const void **)v391)
      {
        if (*(char *)(v391 + 23) < 0) {
          operator delete(*(void **)v391);
        }
        long long v91 = *(_OWORD *)v90;
        *(void *)(v391 + 16) = *(v10 - 2);
        *(_OWORD *)unint64_t v391 = v91;
        *((unsigned char *)v10 - 9) = 0;
        *((unsigned char *)v10 - 32) = 0;
        *(_DWORD *)(v391 + 24) = *((_DWORD *)v10 - 2);
      }
      if (*((char *)v10 - 9) < 0) {
        operator delete(*v90);
      }
      long long v92 = *(_OWORD *)__p;
      *(v10 - 2) = v398;
      *(_OWORD *)long long v90 = v92;
      HIBYTE(v398) = 0;
      LOBYTE(__p[0]) = 0;
      *((float *)v10 - 2) = v399;
      if (SHIBYTE(v398) < 0) {
        operator delete(__p[0]);
      }
      BOOL v4 = v37 >= v47;
      a2 = (void **)v395;
      if (!v4)
      {
LABEL_188:
        std::__introsort<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *,false>(v391, v10 - 4, v392, a4 & 1);
        goto LABEL_189;
      }
      BOOL v93 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>((unsigned __int8 **)v391, (unsigned __int8 **)v10 - 4);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>((unsigned __int8 **)v10, v395))
      {
        a2 = (void **)(v10 - 4);
        if (v93) {
          return;
        }
        goto LABEL_2;
      }
      if (!v93) {
        goto LABEL_188;
      }
    }
    else
    {
LABEL_190:
      long long v94 = *(_OWORD *)v11;
      v398 = *(unsigned __int8 **)(v11 + 16);
      *(_OWORD *)std::string __p = v94;
      *(void *)(v11 + 8) = 0;
      *(void *)(v11 + 16) = 0;
      *(void *)unint64_t v11 = 0;
      float v399 = v32;
      int v95 = SHIBYTE(v398);
      uint64_t v379 = HIBYTE(v398);
      __uint64_t n = __p[1];
      if (SHIBYTE(v398) >= 0) {
        long long v96 = (void *)HIBYTE(v398);
      }
      else {
        long long v96 = __p[1];
      }
      BOOL v97 = (void *)*((unsigned __int8 *)a2 - 9);
      uint64_t v98 = (unsigned __int8 **)*(a2 - 4);
      if ((char)v97 >= 0) {
        size_t v99 = *((unsigned __int8 *)a2 - 9);
      }
      else {
        size_t v99 = (size_t)*(a2 - 3);
      }
      if ((char)v97 >= 0) {
        char v100 = v388;
      }
      else {
        char v100 = (void **)*(a2 - 4);
      }
      v378 = *(a2 - 3);
      int v377 = SHIBYTE(v398);
      if (v96 != (void *)v99) {
        goto LABEL_207;
      }
      if ((HIBYTE(v398) & 0x80) != 0)
      {
        if (memcmp(__p[0], v100, (size_t)__p[1])) {
          goto LABEL_207;
        }
      }
      else if (HIBYTE(v398))
      {
        uint64_t v101 = __p;
        uint64_t v102 = v100;
        uint64_t v103 = HIBYTE(v398);
        while (*(unsigned __int8 *)v101 == *(unsigned __int8 *)v102)
        {
          uint64_t v101 = (void **)((char *)v101 + 1);
          uint64_t v102 = (void **)((char *)v102 + 1);
          if (!--v103) {
            goto LABEL_217;
          }
        }
LABEL_207:
        float v104 = __p[0];
        if (v95 >= 0) {
          int v105 = __p;
        }
        else {
          int v105 = (void **)__p[0];
        }
        if (v99 >= (unint64_t)v96) {
          size_t v106 = (size_t)v96;
        }
        else {
          size_t v106 = v99;
        }
        int v107 = memcmp(v105, v100, v106);
        BOOL v108 = (unint64_t)v96 < v99;
        if (v107) {
          BOOL v108 = v107 < 0;
        }
        if (v108)
        {
          uint64_t v109 = v104;
LABEL_221:
          unint64_t v110 = v11;
          uint64_t v111 = v379;
          while (1)
          {
            unint64_t v10 = (const void **)(v110 + 32);
            int v112 = *(char *)(v110 + 55);
            if (v112 >= 0) {
              size_t v113 = *(unsigned __int8 *)(v110 + 55);
            }
            else {
              size_t v113 = *(void *)(v110 + 40);
            }
            if (v112 >= 0) {
              uint64_t v114 = (unsigned __int8 *)(v110 + 32);
            }
            else {
              uint64_t v114 = *(unsigned __int8 **)(v110 + 32);
            }
            if (v96 != (void *)v113) {
              goto LABEL_236;
            }
            if ((v379 & 0x80) != 0)
            {
              if (!memcmp(v109, v114, (size_t)__n)) {
                goto LABEL_243;
              }
LABEL_236:
              if (v113 >= (unint64_t)v96) {
                size_t v118 = (size_t)v96;
              }
              else {
                size_t v118 = v113;
              }
              int v119 = memcmp(v105, v114, v118);
              BOOL v120 = (unint64_t)v96 < v113;
              if (v119) {
                BOOL v120 = v119 < 0;
              }
              v110 += 32;
              if (v120) {
                goto LABEL_275;
              }
            }
            else
            {
              if (v379)
              {
                unint64_t v115 = __p;
                v116 = v114;
                uint64_t v117 = v379;
                while (*(unsigned __int8 *)v115 == *v116)
                {
                  unint64_t v115 = (void **)((char *)v115 + 1);
                  ++v116;
                  if (!--v117) {
                    goto LABEL_243;
                  }
                }
                goto LABEL_236;
              }
LABEL_243:
              float v121 = *(float *)(v110 + 56);
              v110 += 32;
              if (v32 < v121) {
                goto LABEL_275;
              }
            }
          }
        }
        goto LABEL_245;
      }
LABEL_217:
      if (v32 < *((float *)a2 - 2))
      {
        uint64_t v109 = __p[0];
        if (v95 >= 0) {
          int v105 = __p;
        }
        else {
          int v105 = (void **)__p[0];
        }
        goto LABEL_221;
      }
LABEL_245:
      unint64_t v10 = (const void **)(v11 + 32);
      if (v11 + 32 < (unint64_t)v395)
      {
        __s1 = __p[0];
        if (v95 >= 0) {
          float v122 = __p;
        }
        else {
          float v122 = (void **)__p[0];
        }
        unint64_t v123 = v11;
        uint64_t v111 = v379;
        while (1)
        {
          int v124 = v10;
          char v125 = *(unsigned char *)(v123 + 55);
          if (v125 >= 0) {
            size_t v126 = *(unsigned __int8 *)(v123 + 55);
          }
          else {
            size_t v126 = *(void *)(v123 + 40);
          }
          if (v125 >= 0) {
            int v127 = v10;
          }
          else {
            int v127 = *(const void ***)(v123 + 32);
          }
          if (v96 == (void *)v126)
          {
            if ((v379 & 0x80) != 0)
            {
              if (!memcmp(__s1, v127, (size_t)__n))
              {
LABEL_271:
                if (v32 < *(float *)(v123 + 56)) {
                  goto LABEL_275;
                }
                goto LABEL_272;
              }
            }
            else
            {
              if (!v379) {
                goto LABEL_271;
              }
              float v128 = __p;
              float v129 = v127;
              uint64_t v130 = v379;
              while (*(unsigned __int8 *)v128 == *(unsigned __int8 *)v129)
              {
                float v128 = (void **)((char *)v128 + 1);
                float v129 = (const void **)((char *)v129 + 1);
                if (!--v130) {
                  goto LABEL_271;
                }
              }
            }
          }
          if (v126 >= (unint64_t)v96) {
            size_t v131 = (size_t)v96;
          }
          else {
            size_t v131 = v126;
          }
          int v132 = memcmp(v122, v127, v131);
          BOOL v133 = (unint64_t)v96 < v126;
          if (v132) {
            BOOL v133 = v132 < 0;
          }
          if (v133) {
            goto LABEL_275;
          }
LABEL_272:
          v10 += 4;
          unint64_t v123 = (unint64_t)v124;
          if (v124 + 4 >= (const void **)v395) {
            goto LABEL_275;
          }
        }
      }
      uint64_t v111 = v379;
LABEL_275:
      unint64_t v134 = v395;
      if (v10 < (const void **)v395)
      {
        float v135 = v395;
        v380 = __p[0];
        if (v377 >= 0) {
          int v136 = __p;
        }
        else {
          int v136 = (void **)__p[0];
        }
        char v137 = v378;
        while (1)
        {
          unint64_t v134 = v135 - 4;
          if ((char)v97 >= 0) {
            float v138 = v97;
          }
          else {
            float v138 = v137;
          }
          if ((char)v97 >= 0) {
            uint64_t v139 = v135 - 4;
          }
          else {
            uint64_t v139 = v98;
          }
          if (v96 == v138)
          {
            if ((v111 & 0x80) != 0)
            {
              if (!memcmp(v380, v139, (size_t)__n))
              {
LABEL_301:
                if (v32 >= *((float *)v135 - 2)) {
                  break;
                }
                goto LABEL_302;
              }
            }
            else
            {
              if (!v111) {
                goto LABEL_301;
              }
              uint64_t v140 = __p;
              uint64_t v141 = v139;
              uint64_t v142 = v111;
              while (*(unsigned __int8 *)v140 == *(unsigned __int8 *)v141)
              {
                uint64_t v140 = (void **)((char *)v140 + 1);
                uint64_t v141 = (unsigned __int8 **)((char *)v141 + 1);
                if (!--v142) {
                  goto LABEL_301;
                }
              }
            }
          }
          if (v138 >= v96) {
            size_t v143 = (size_t)v96;
          }
          else {
            size_t v143 = (size_t)v138;
          }
          int v144 = memcmp(v136, v139, v143);
          BOOL v145 = v96 < v138;
          if (v144) {
            BOOL v145 = v144 < 0;
          }
          if (!v145) {
            break;
          }
LABEL_302:
          BOOL v97 = (void *)*((unsigned __int8 *)v135 - 41);
          uint64_t v98 = (unsigned __int8 **)*(v135 - 8);
          char v137 = *(v135 - 7);
          v135 -= 4;
        }
      }
LABEL_355:
      if (v10 < (const void **)v134)
      {
        long long v146 = *(_OWORD *)v10;
        v401 = (unsigned __int8 *)v10[2];
        long long v400 = v146;
        long long v147 = *(_OWORD *)v134;
        uint64_t v10[2] = v134[2];
        *(_OWORD *)unint64_t v10 = v147;
        long long v148 = v400;
        v134[2] = v401;
        *(_OWORD *)unint64_t v134 = v148;
        LODWORD(v148) = *((_DWORD *)v10 + 6);
        *((_DWORD *)v10 + 6) = *((_DWORD *)v134 + 6);
        *((_DWORD *)v134 + 6) = v148;
        uint64_t v149 = HIBYTE(v398);
        unint64_t v151 = __p[0];
        int v150 = __p[1];
        if (SHIBYTE(v398) >= 0) {
          uint64_t v152 = (void *)HIBYTE(v398);
        }
        else {
          uint64_t v152 = __p[1];
        }
        if (SHIBYTE(v398) >= 0) {
          uint64_t v153 = __p;
        }
        else {
          uint64_t v153 = (void **)__p[0];
        }
        float v154 = v399;
        uint64_t v155 = v10;
        while (1)
        {
          unint64_t v10 = v155 + 4;
          int v156 = *((char *)v155 + 55);
          if (v156 >= 0) {
            size_t v157 = *((unsigned __int8 *)v155 + 55);
          }
          else {
            size_t v157 = (size_t)v155[5];
          }
          if (v156 >= 0) {
            uint64_t v158 = (unsigned __int8 *)(v155 + 4);
          }
          else {
            uint64_t v158 = (unsigned __int8 *)v155[4];
          }
          if (v152 != (void *)v157) {
            goto LABEL_324;
          }
          if ((v149 & 0x80) != 0)
          {
            if (!memcmp(v151, v158, (size_t)v150)) {
              goto LABEL_331;
            }
LABEL_324:
            if (v157 >= (unint64_t)v152) {
              size_t v162 = (size_t)v152;
            }
            else {
              size_t v162 = v157;
            }
            int v163 = memcmp(v153, v158, v162);
            BOOL v164 = (unint64_t)v152 < v157;
            if (v163) {
              BOOL v164 = v163 < 0;
            }
            v155 += 4;
            if (v164)
            {
LABEL_332:
              uint64_t v166 = v134;
              while (1)
              {
                unint64_t v134 = v166 - 4;
                int v167 = *((char *)v166 - 9);
                if (v167 >= 0) {
                  size_t v168 = *((unsigned __int8 *)v166 - 9);
                }
                else {
                  size_t v168 = (size_t)*(v166 - 3);
                }
                if (v167 >= 0) {
                  float v169 = v166 - 4;
                }
                else {
                  float v169 = (unsigned __int8 **)*(v166 - 4);
                }
                if (v152 != (void *)v168) {
                  goto LABEL_347;
                }
                if ((v149 & 0x80) != 0)
                {
                  if (!memcmp(v151, v169, (size_t)v150)) {
                    goto LABEL_354;
                  }
LABEL_347:
                  if (v168 >= (unint64_t)v152) {
                    size_t v173 = (size_t)v152;
                  }
                  else {
                    size_t v173 = v168;
                  }
                  int v174 = memcmp(v153, v169, v173);
                  BOOL v175 = (unint64_t)v152 < v168;
                  if (v174) {
                    BOOL v175 = v174 < 0;
                  }
                  v166 -= 4;
                  if (!v175) {
                    goto LABEL_355;
                  }
                }
                else
                {
                  if (v149)
                  {
                    float v170 = __p;
                    float v171 = v169;
                    uint64_t v172 = v149;
                    while (*(unsigned __int8 *)v170 == *(unsigned __int8 *)v171)
                    {
                      float v170 = (void **)((char *)v170 + 1);
                      float v171 = (unsigned __int8 **)((char *)v171 + 1);
                      if (!--v172) {
                        goto LABEL_354;
                      }
                    }
                    goto LABEL_347;
                  }
LABEL_354:
                  float v176 = *((float *)v166 - 2);
                  v166 -= 4;
                  if (v154 >= v176) {
                    goto LABEL_355;
                  }
                }
              }
            }
          }
          else
          {
            if (v149)
            {
              uint64_t v159 = __p;
              uint64_t v160 = v158;
              uint64_t v161 = v149;
              while (*(unsigned __int8 *)v159 == *v160)
              {
                uint64_t v159 = (void **)((char *)v159 + 1);
                ++v160;
                if (!--v161) {
                  goto LABEL_331;
                }
              }
              goto LABEL_324;
            }
LABEL_331:
            float v165 = *((float *)v155 + 14);
            v155 += 4;
            if (v154 < v165) {
              goto LABEL_332;
            }
          }
        }
      }
      float v177 = (void **)(v10 - 4);
      BOOL v4 = (unint64_t)(v10 - 4) >= v391;
      BOOL v5 = v10 - 4 == (const void **)v391;
      a2 = (void **)v395;
      if (v10 - 4 != (const void **)v391)
      {
        if (*(char *)(v391 + 23) < 0) {
          operator delete(*(void **)v391);
        }
        long long v178 = *(_OWORD *)v177;
        *(void *)(v391 + 16) = *(v10 - 2);
        *(_OWORD *)unint64_t v391 = v178;
        *((unsigned char *)v10 - 9) = 0;
        *((unsigned char *)v10 - 32) = 0;
        *(_DWORD *)(v391 + 24) = *((_DWORD *)v10 - 2);
      }
      if (*((char *)v10 - 9) < 0) {
        operator delete(*v177);
      }
      long long v179 = *(_OWORD *)__p;
      *(v10 - 2) = v398;
      *(_OWORD *)float v177 = v179;
      HIBYTE(v398) = 0;
      LOBYTE(__p[0]) = 0;
      *((float *)v10 - 2) = v399;
      a3 = v392;
      if (SHIBYTE(v398) < 0) {
        operator delete(__p[0]);
      }
LABEL_189:
      a4 = 0;
    }
  }
  if ((a4 & 1) == 0)
  {
    if ((void **)v11 == a2) {
      return;
    }
    while (1)
    {
LABEL_701:
      if ((void **)(v11 + 32) == a2) {
        return;
      }
      v340 = (unsigned __int8 **)v11;
      v11 += 32;
      uint64_t v341 = *((unsigned __int8 *)v340 + 55);
      if ((v341 & 0x80u) == 0) {
        size_t v342 = *((unsigned __int8 *)v340 + 55);
      }
      else {
        size_t v342 = (size_t)v340[5];
      }
      char v343 = *((unsigned char *)v340 + 23);
      if (v343 >= 0) {
        size_t v344 = *((unsigned __int8 *)v340 + 23);
      }
      else {
        size_t v344 = (size_t)v340[1];
      }
      if (v343 >= 0) {
        v345 = (unsigned __int8 *)v340;
      }
      else {
        v345 = *v340;
      }
      if (v342 == v344)
      {
        if ((v341 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v11, v345, (size_t)v340[5]))
          {
LABEL_729:
            if (*((float *)v340 + 14) >= *((float *)v340 + 6)) {
              continue;
            }
LABEL_730:
            long long v351 = *(_OWORD *)v11;
            v398 = *(unsigned __int8 **)(v11 + 16);
            *(_OWORD *)std::string __p = v351;
            *(void *)(v11 + 8) = 0;
            *(void *)(v11 + 16) = 0;
            *(void *)unint64_t v11 = 0;
            float v399 = *((float *)v340 + 14);
            uint64_t v352 = HIBYTE(v398);
            v354 = __p[0];
            v353 = __p[1];
            if (SHIBYTE(v398) >= 0) {
              v355 = (void *)HIBYTE(v398);
            }
            else {
              v355 = __p[1];
            }
            if (SHIBYTE(v398) >= 0) {
              v356 = __p;
            }
            else {
              v356 = (void **)__p[0];
            }
            unint64_t v357 = v11;
            while (1)
            {
              v358 = (float *)v340;
              if (*(char *)(v11 + 23) < 0) {
                operator delete(*(void **)v11);
              }
              *(_OWORD *)unint64_t v11 = *(_OWORD *)v340;
              *(void *)(v11 + 16) = v340[2];
              *((unsigned char *)v340 + 23) = 0;
              *(unsigned char *)v340 = 0;
              *(_DWORD *)(v11 + 24) = *((_DWORD *)v340 + 6);
              v340 -= 4;
              int v359 = *((char *)v358 - 9);
              if (v359 >= 0) {
                size_t v360 = *((unsigned __int8 *)v358 - 9);
              }
              else {
                size_t v360 = *((void *)v358 - 3);
              }
              if (v359 >= 0) {
                v361 = (unsigned __int8 **)(v358 - 8);
              }
              else {
                v361 = (unsigned __int8 **)*((void *)v358 - 4);
              }
              if (v355 == (void *)v360)
              {
                if ((v352 & 0x80) != 0)
                {
                  if (!memcmp(v354, v361, (size_t)v353))
                  {
LABEL_760:
                    unint64_t v11 = (unint64_t)v358;
                    if (v399 >= *(v358 - 2)) {
                      goto LABEL_761;
                    }
                    continue;
                  }
                }
                else
                {
                  if (!v352) {
                    goto LABEL_760;
                  }
                  v362 = __p;
                  v363 = v361;
                  uint64_t v364 = v352;
                  while (*(unsigned __int8 *)v362 == *(unsigned __int8 *)v363)
                  {
                    v362 = (void **)((char *)v362 + 1);
                    v363 = (unsigned __int8 **)((char *)v363 + 1);
                    if (!--v364) {
                      goto LABEL_760;
                    }
                  }
                }
              }
              if (v360 >= (unint64_t)v355) {
                size_t v365 = (size_t)v355;
              }
              else {
                size_t v365 = v360;
              }
              int v366 = memcmp(v356, v361, v365);
              BOOL v367 = (unint64_t)v355 < v360;
              if (v366) {
                BOOL v367 = v366 < 0;
              }
              unint64_t v11 = (unint64_t)v358;
              if (!v367)
              {
LABEL_761:
                if (*((char *)v358 + 23) < 0) {
                  operator delete(*(void **)v358);
                }
                long long v368 = *(_OWORD *)__p;
                *((void *)v358 + 2) = v398;
                *(_OWORD *)v358 = v368;
                v358[6] = v399;
                unint64_t v11 = v357;
                a2 = (void **)v395;
                goto LABEL_701;
              }
            }
          }
        }
        else
        {
          if (!*((unsigned char *)v340 + 55)) {
            goto LABEL_729;
          }
          uint64_t v346 = 0;
          while (*(unsigned __int8 *)(v11 + v346) == v345[v346])
          {
            if (v341 == ++v346) {
              goto LABEL_729;
            }
          }
        }
      }
      if ((v341 & 0x80u) == 0) {
        v347 = (unsigned __int8 *)v11;
      }
      else {
        v347 = *(unsigned __int8 **)v11;
      }
      if (v344 >= v342) {
        size_t v348 = v342;
      }
      else {
        size_t v348 = v344;
      }
      int v349 = memcmp(v347, v345, v348);
      BOOL v350 = v342 < v344;
      if (v349) {
        BOOL v350 = v349 < 0;
      }
      if (v350) {
        goto LABEL_730;
      }
    }
  }
  if ((void **)v11 == a2) {
    return;
  }
  unint64_t v188 = v11 + 32;
  if ((void **)(v11 + 32) == a2) {
    return;
  }
  unint64_t v189 = (unsigned __int8 **)v11;
  while (2)
  {
    int v190 = v189;
    unint64_t v189 = (unsigned __int8 **)v188;
    uint64_t v191 = *((unsigned __int8 *)v190 + 55);
    if ((v191 & 0x80u) == 0) {
      size_t v192 = *((unsigned __int8 *)v190 + 55);
    }
    else {
      size_t v192 = (size_t)v190[5];
    }
    char v193 = *((unsigned char *)v190 + 23);
    if (v193 >= 0) {
      size_t v194 = *((unsigned __int8 *)v190 + 23);
    }
    else {
      size_t v194 = (size_t)v190[1];
    }
    if (v193 >= 0) {
      uint64_t v195 = (unsigned __int8 *)v190;
    }
    else {
      uint64_t v195 = *v190;
    }
    if (v192 == v194)
    {
      if ((v191 & 0x80) != 0)
      {
        if (memcmp(*v189, v195, (size_t)v190[5])) {
          goto LABEL_413;
        }
      }
      else if (*((unsigned char *)v190 + 55))
      {
        uint64_t v196 = 0;
        while (*((unsigned __int8 *)v189 + v196) == v195[v196])
        {
          if (v191 == ++v196) {
            goto LABEL_423;
          }
        }
        goto LABEL_413;
      }
LABEL_423:
      if (*((float *)v190 + 14) >= *((float *)v190 + 6)) {
        goto LABEL_461;
      }
    }
    else
    {
LABEL_413:
      if ((v191 & 0x80u) == 0) {
        uint64_t v197 = (unsigned __int8 *)v189;
      }
      else {
        uint64_t v197 = *v189;
      }
      if (v194 >= v192) {
        size_t v198 = v192;
      }
      else {
        size_t v198 = v194;
      }
      int v199 = memcmp(v197, v195, v198);
      BOOL v200 = v192 < v194;
      if (v199) {
        BOOL v200 = v199 < 0;
      }
      if (!v200) {
        goto LABEL_461;
      }
    }
    long long v201 = *(_OWORD *)v189;
    v398 = v189[2];
    *(_OWORD *)std::string __p = v201;
    v189[1] = 0;
    v189[2] = 0;
    kaldi::MinimumBayesRisk *v189 = 0;
    float v399 = *((float *)v190 + 14);
    uint64_t v202 = HIBYTE(v398);
    int v204 = __p[0];
    uint64_t v203 = __p[1];
    if (SHIBYTE(v398) >= 0) {
      long long v205 = (void *)HIBYTE(v398);
    }
    else {
      long long v205 = __p[1];
    }
    if (SHIBYTE(v398) >= 0) {
      float v206 = __p;
    }
    else {
      float v206 = (void **)__p[0];
    }
    uint64_t v207 = (float *)v189;
    while (1)
    {
      uint64_t v208 = (float *)v190;
      if (*((char *)v207 + 23) < 0) {
        operator delete(*(void **)v207);
      }
      *(_OWORD *)uint64_t v207 = *(_OWORD *)v190;
      *((void *)v207 + 2) = v190[2];
      *((unsigned char *)v190 + 23) = 0;
      *(unsigned char *)int v190 = 0;
      v207[6] = *((float *)v190 + 6);
      if (v190 == (unsigned __int8 **)v11) {
        break;
      }
      v190 -= 4;
      int v209 = *((char *)v208 - 9);
      if (v209 >= 0) {
        size_t v210 = *((unsigned __int8 *)v208 - 9);
      }
      else {
        size_t v210 = *((void *)v208 - 3);
      }
      if (v209 >= 0) {
        uint64_t v211 = (unsigned __int8 **)(v208 - 8);
      }
      else {
        uint64_t v211 = (unsigned __int8 **)*((void *)v208 - 4);
      }
      if (v205 == (void *)v210)
      {
        if ((v202 & 0x80) != 0)
        {
          if (!memcmp(v204, v211, (size_t)v203))
          {
LABEL_455:
            uint64_t v207 = v208;
            unint64_t v11 = v391;
            if (v399 >= *(v208 - 2)) {
              goto LABEL_458;
            }
            continue;
          }
        }
        else
        {
          if (!v202) {
            goto LABEL_455;
          }
          int v212 = __p;
          long long v213 = v211;
          uint64_t v214 = v202;
          while (*(unsigned __int8 *)v212 == *(unsigned __int8 *)v213)
          {
            int v212 = (void **)((char *)v212 + 1);
            long long v213 = (unsigned __int8 **)((char *)v213 + 1);
            if (!--v214) {
              goto LABEL_455;
            }
          }
        }
      }
      if (v210 >= (unint64_t)v205) {
        size_t v215 = (size_t)v205;
      }
      else {
        size_t v215 = v210;
      }
      int v216 = memcmp(v206, v211, v215);
      BOOL v217 = (unint64_t)v205 < v210;
      if (v216) {
        BOOL v217 = v216 < 0;
      }
      uint64_t v207 = v208;
      unint64_t v11 = v391;
      if (!v217) {
        goto LABEL_458;
      }
    }
    uint64_t v208 = (float *)v11;
LABEL_458:
    if (*((char *)v208 + 23) < 0) {
      operator delete(*(void **)v208);
    }
    long long v218 = *(_OWORD *)__p;
    *((void *)v208 + 2) = v398;
    *(_OWORD *)uint64_t v208 = v218;
    v208[6] = v399;
    a2 = (void **)v395;
LABEL_461:
    unint64_t v188 = (unint64_t)(v189 + 4);
    if (v189 + 4 != (unsigned __int8 **)a2) {
      continue;
    }
    break;
  }
}

float std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *,0>(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>((long long *)a1, a2, a3, a4);
  signed __int8 v10 = a5[23];
  if (v10 >= 0) {
    size_t v11 = a5[23];
  }
  else {
    size_t v11 = *((void *)a5 + 1);
  }
  signed __int8 v12 = a4[23];
  if (v12 >= 0) {
    size_t v13 = a4[23];
  }
  else {
    size_t v13 = *((void *)a4 + 1);
  }
  if (v12 >= 0) {
    unint64_t v14 = a4;
  }
  else {
    unint64_t v14 = *(unsigned __int8 **)a4;
  }
  if (v11 != v13) {
    goto LABEL_18;
  }
  if ((a5[23] & 0x80) != 0)
  {
    if (memcmp(*(const void **)a5, v14, *((void *)a5 + 1))) {
      goto LABEL_18;
    }
LABEL_28:
    float result = *((float *)a5 + 6);
    if (result >= *((float *)a4 + 6)) {
      return result;
    }
LABEL_29:
    uint64_t v23 = *((void *)a4 + 2);
    long long v24 = *(_OWORD *)a4;
    uint64_t v25 = *((void *)a5 + 2);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *((void *)a4 + 2) = v25;
    *(_OWORD *)a5 = v24;
    *((void *)a5 + 2) = v23;
    LODWORD(v24) = *((_DWORD *)a4 + 6);
    *((_DWORD *)a4 + 6) = *((_DWORD *)a5 + 6);
    *((_DWORD *)a5 + 6) = v24;
    signed __int8 v26 = a4[23];
    if (v26 >= 0) {
      size_t v27 = a4[23];
    }
    else {
      size_t v27 = *((void *)a4 + 1);
    }
    signed __int8 v28 = a3[23];
    if (v28 >= 0) {
      size_t v29 = a3[23];
    }
    else {
      size_t v29 = *((void *)a3 + 1);
    }
    if (v28 >= 0) {
      int v30 = a3;
    }
    else {
      int v30 = *(unsigned __int8 **)a3;
    }
    if (v27 != v29) {
      goto LABEL_46;
    }
    if ((a4[23] & 0x80) != 0)
    {
      if (memcmp(*(const void **)a4, v30, *((void *)a4 + 1))) {
        goto LABEL_46;
      }
    }
    else if (a4[23])
    {
      BOOL v31 = v30;
      float v32 = a4;
      uint64_t v33 = a4[23];
      while (*v32 == *v31)
      {
        ++v32;
        ++v31;
        if (!--v33) {
          goto LABEL_56;
        }
      }
LABEL_46:
      if (v26 >= 0) {
        float v34 = a4;
      }
      else {
        float v34 = *(const void **)a4;
      }
      if (v29 >= v27) {
        size_t v35 = v27;
      }
      else {
        size_t v35 = v29;
      }
      int v36 = memcmp(v34, v30, v35);
      BOOL v37 = v27 < v29;
      if (v36) {
        BOOL v37 = v36 < 0;
      }
      if (!v37) {
        return result;
      }
LABEL_57:
      uint64_t v38 = *((void *)a3 + 2);
      long long v39 = *(_OWORD *)a3;
      uint64_t v40 = *((void *)a4 + 2);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *((void *)a3 + 2) = v40;
      *(_OWORD *)a4 = v39;
      *((void *)a4 + 2) = v38;
      LODWORD(v39) = *((_DWORD *)a3 + 6);
      *((_DWORD *)a3 + 6) = *((_DWORD *)a4 + 6);
      *((_DWORD *)a4 + 6) = v39;
      signed __int8 v41 = a3[23];
      if (v41 >= 0) {
        size_t v42 = a3[23];
      }
      else {
        size_t v42 = *((void *)a3 + 1);
      }
      signed __int8 v43 = a2[23];
      if (v43 >= 0) {
        size_t v44 = a2[23];
      }
      else {
        size_t v44 = *((void *)a2 + 1);
      }
      if (v43 >= 0) {
        BOOL v45 = a2;
      }
      else {
        BOOL v45 = *(unsigned __int8 **)a2;
      }
      if (v42 != v44) {
        goto LABEL_74;
      }
      if ((a3[23] & 0x80) != 0)
      {
        if (memcmp(*(const void **)a3, v45, *((void *)a3 + 1))) {
          goto LABEL_74;
        }
      }
      else if (a3[23])
      {
        long long v46 = v45;
        long long v47 = a3;
        uint64_t v48 = a3[23];
        while (*v47 == *v46)
        {
          ++v47;
          ++v46;
          if (!--v48) {
            goto LABEL_84;
          }
        }
LABEL_74:
        if (v41 >= 0) {
          size_t v49 = a3;
        }
        else {
          size_t v49 = *(const void **)a3;
        }
        if (v44 >= v42) {
          size_t v50 = v42;
        }
        else {
          size_t v50 = v44;
        }
        int v51 = memcmp(v49, v45, v50);
        BOOL v52 = v42 < v44;
        if (v51) {
          BOOL v52 = v51 < 0;
        }
        if (!v52) {
          return result;
        }
LABEL_85:
        uint64_t v53 = *((void *)a2 + 2);
        long long v54 = *(_OWORD *)a2;
        uint64_t v55 = *((void *)a3 + 2);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *((void *)a2 + 2) = v55;
        *(_OWORD *)a3 = v54;
        *((void *)a3 + 2) = v53;
        LODWORD(v54) = *((_DWORD *)a2 + 6);
        *((_DWORD *)a2 + 6) = *((_DWORD *)a3 + 6);
        *((_DWORD *)a3 + 6) = v54;
        signed __int8 v56 = a2[23];
        if (v56 >= 0) {
          size_t v57 = a2[23];
        }
        else {
          size_t v57 = *((void *)a2 + 1);
        }
        unsigned __int8 v58 = a1[23];
        if ((v58 & 0x80u) == 0) {
          size_t v59 = a1[23];
        }
        else {
          size_t v59 = *((void *)a1 + 1);
        }
        if ((v58 & 0x80u) == 0) {
          long long v60 = a1;
        }
        else {
          long long v60 = *(unsigned __int8 **)a1;
        }
        if (v57 != v59) {
          goto LABEL_102;
        }
        if ((a2[23] & 0x80) != 0)
        {
          if (memcmp(*(const void **)a2, v60, *((void *)a2 + 1))) {
            goto LABEL_102;
          }
        }
        else if (a2[23])
        {
          size_t v61 = v60;
          int v62 = a2;
          uint64_t v63 = a2[23];
          while (*v62 == *v61)
          {
            ++v62;
            ++v61;
            if (!--v63) {
              goto LABEL_113;
            }
          }
LABEL_102:
          if (v56 >= 0) {
            BOOL v64 = a2;
          }
          else {
            BOOL v64 = *(const void **)a2;
          }
          if (v59 >= v57) {
            size_t v65 = v57;
          }
          else {
            size_t v65 = v59;
          }
          int v66 = memcmp(v64, v60, v65);
          BOOL v67 = v57 < v59;
          if (v66) {
            BOOL v67 = v66 < 0;
          }
          if (!v67) {
            return result;
          }
LABEL_111:
          uint64_t v68 = *((void *)a1 + 2);
          long long v69 = *(_OWORD *)a1;
          uint64_t v70 = *((void *)a2 + 2);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *((void *)a1 + 2) = v70;
          *(_OWORD *)a2 = v69;
          *((void *)a2 + 2) = v68;
          float result = *((float *)a1 + 6);
          *((_DWORD *)a1 + 6) = *((_DWORD *)a2 + 6);
          *((float *)a2 + 6) = result;
          return result;
        }
LABEL_113:
        float result = *((float *)a2 + 6);
        if (result >= *((float *)a1 + 6)) {
          return result;
        }
        goto LABEL_111;
      }
LABEL_84:
      float result = *((float *)a3 + 6);
      if (result >= *((float *)a2 + 6)) {
        return result;
      }
      goto LABEL_85;
    }
LABEL_56:
    float result = *((float *)a4 + 6);
    if (result >= *((float *)a3 + 6)) {
      return result;
    }
    goto LABEL_57;
  }
  if (!a5[23]) {
    goto LABEL_28;
  }
  unint64_t v15 = v14;
  long long v16 = a5;
  uint64_t v17 = a5[23];
  while (*v16 == *v15)
  {
    ++v16;
    ++v15;
    if (!--v17) {
      goto LABEL_28;
    }
  }
LABEL_18:
  if (v10 >= 0) {
    long long v18 = a5;
  }
  else {
    long long v18 = *(const void **)a5;
  }
  if (v13 >= v11) {
    size_t v19 = v11;
  }
  else {
    size_t v19 = v13;
  }
  int v20 = memcmp(v18, v14, v19);
  BOOL v22 = v11 < v13;
  if (v20) {
    BOOL v22 = v20 < 0;
  }
  if (v22) {
    goto LABEL_29;
  }
  return result;
}

unsigned __int8 **std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>(unsigned __int8 **result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  BOOL v5 = result;
  signed __int8 v6 = a2[23];
  if (v6 >= 0) {
    size_t v7 = a2[23];
  }
  else {
    size_t v7 = *((void *)a2 + 1);
  }
  char v8 = *((unsigned char *)result + 23);
  if (v8 >= 0) {
    size_t v9 = *((unsigned __int8 *)result + 23);
  }
  else {
    size_t v9 = (size_t)result[1];
  }
  if (v8 >= 0) {
    signed __int8 v10 = (unsigned __int8 *)result;
  }
  else {
    signed __int8 v10 = *result;
  }
  if (v7 != v9) {
    goto LABEL_18;
  }
  if ((a2[23] & 0x80) != 0)
  {
    float result = (unsigned __int8 **)memcmp(*(const void **)a2, v10, *((void *)a2 + 1));
    if (result) {
      goto LABEL_18;
    }
LABEL_37:
    if (v6 >= 0) {
      unint64_t v14 = a2;
    }
    else {
      unint64_t v14 = *(unsigned __int8 **)a2;
    }
    if (*((float *)a2 + 6) < *((float *)v5 + 6)) {
      goto LABEL_27;
    }
LABEL_41:
    signed __int8 v22 = a3[23];
    if (v22 >= 0) {
      size_t v23 = a3[23];
    }
    else {
      size_t v23 = *((void *)a3 + 1);
    }
    if (v23 != v7) {
      goto LABEL_80;
    }
    if ((a3[23] & 0x80) != 0)
    {
      float result = (unsigned __int8 **)memcmp(*(const void **)a3, v14, *((void *)a3 + 1));
      if (result) {
        goto LABEL_80;
      }
    }
    else if (a3[23])
    {
      long long v24 = v14;
      uint64_t v25 = a3;
      uint64_t v26 = a3[23];
      while (*v25 == *v24)
      {
        ++v25;
        ++v24;
        if (!--v26) {
          goto LABEL_90;
        }
      }
LABEL_80:
      if (v22 >= 0) {
        long long v46 = a3;
      }
      else {
        long long v46 = *(const void **)a3;
      }
      if (v7 >= v23) {
        size_t v47 = v23;
      }
      else {
        size_t v47 = v7;
      }
      float result = (unsigned __int8 **)memcmp(v46, v14, v47);
      BOOL v48 = v23 < v7;
      if (result) {
        BOOL v48 = (int)result < 0;
      }
      if (!v48) {
        return result;
      }
LABEL_91:
      uint64_t v49 = *((void *)a2 + 2);
      long long v50 = *(_OWORD *)a2;
      uint64_t v51 = *((void *)a3 + 2);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((void *)a2 + 2) = v51;
      *(_OWORD *)a3 = v50;
      *((void *)a3 + 2) = v49;
      BOOL v52 = (float *)(a2 + 24);
      LODWORD(v50) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = *((_DWORD *)a3 + 6);
      *((_DWORD *)a3 + 6) = v50;
      signed __int8 v53 = a2[23];
      if (v53 >= 0) {
        size_t v54 = a2[23];
      }
      else {
        size_t v54 = *((void *)a2 + 1);
      }
      char v55 = *((unsigned char *)v5 + 23);
      if (v55 >= 0) {
        size_t v56 = *((unsigned __int8 *)v5 + 23);
      }
      else {
        size_t v56 = (size_t)v5[1];
      }
      if (v55 >= 0) {
        size_t v57 = (unsigned __int8 *)v5;
      }
      else {
        size_t v57 = *v5;
      }
      if (v54 != v56) {
        goto LABEL_122;
      }
      if ((a2[23] & 0x80) != 0)
      {
        float result = (unsigned __int8 **)memcmp(*(const void **)a2, v57, *((void *)a2 + 1));
        if (result) {
          goto LABEL_122;
        }
      }
      else if (a2[23])
      {
        unsigned __int8 v58 = v57;
        size_t v59 = a2;
        uint64_t v60 = a2[23];
        while (*v59 == *v58)
        {
          ++v59;
          ++v58;
          if (!--v60) {
            goto LABEL_132;
          }
        }
LABEL_122:
        if (v53 >= 0) {
          BOOL v67 = a2;
        }
        else {
          BOOL v67 = *(const void **)a2;
        }
        if (v56 >= v54) {
          size_t v68 = v54;
        }
        else {
          size_t v68 = v56;
        }
        float result = (unsigned __int8 **)memcmp(v67, v57, v68);
        BOOL v69 = v54 < v56;
        if (result) {
          BOOL v69 = (int)result < 0;
        }
        if (!v69) {
          return result;
        }
LABEL_133:
        uint64_t v70 = v5[2];
        long long v71 = *(_OWORD *)v5;
        long long v72 = (unsigned __int8 *)*((void *)a2 + 2);
        *(_OWORD *)BOOL v5 = *(_OWORD *)a2;
        v5[2] = v72;
        *(_OWORD *)a2 = v71;
        *((void *)a2 + 2) = v70;
        uint64_t v33 = (int *)(v5 + 3);
        goto LABEL_134;
      }
LABEL_132:
      if (*v52 >= *((float *)v5 + 6)) {
        return result;
      }
      goto LABEL_133;
    }
LABEL_90:
    if (*((float *)a3 + 6) >= *((float *)a2 + 6)) {
      return result;
    }
    goto LABEL_91;
  }
  if (!a2[23]) {
    goto LABEL_37;
  }
  size_t v11 = v10;
  signed __int8 v12 = a2;
  uint64_t v13 = a2[23];
  while (*v12 == *v11)
  {
    ++v12;
    ++v11;
    if (!--v13) {
      goto LABEL_37;
    }
  }
LABEL_18:
  if (v6 >= 0) {
    unint64_t v14 = a2;
  }
  else {
    unint64_t v14 = *(unsigned __int8 **)a2;
  }
  if (v9 >= v7) {
    size_t v15 = v7;
  }
  else {
    size_t v15 = v9;
  }
  float result = (unsigned __int8 **)memcmp(v14, v10, v15);
  BOOL v16 = v7 < v9;
  if (result) {
    BOOL v16 = (int)result < 0;
  }
  if (!v16) {
    goto LABEL_41;
  }
LABEL_27:
  signed __int8 v17 = a3[23];
  if (v17 >= 0) {
    size_t v18 = a3[23];
  }
  else {
    size_t v18 = *((void *)a3 + 1);
  }
  if (v18 != v7) {
    goto LABEL_52;
  }
  if ((a3[23] & 0x80) != 0)
  {
    float result = (unsigned __int8 **)memcmp(*(const void **)a3, v14, *((void *)a3 + 1));
    if (result) {
      goto LABEL_52;
    }
  }
  else if (a3[23])
  {
    size_t v19 = v14;
    int v20 = a3;
    uint64_t v21 = a3[23];
    while (*v20 == *v19)
    {
      ++v20;
      ++v19;
      if (!--v21) {
        goto LABEL_62;
      }
    }
LABEL_52:
    if (v17 >= 0) {
      size_t v27 = a3;
    }
    else {
      size_t v27 = *(const void **)a3;
    }
    if (v7 >= v18) {
      size_t v28 = v18;
    }
    else {
      size_t v28 = v7;
    }
    float result = (unsigned __int8 **)memcmp(v27, v14, v28);
    BOOL v29 = v18 < v7;
    if (result) {
      BOOL v29 = (int)result < 0;
    }
    if (v29) {
      goto LABEL_61;
    }
    goto LABEL_63;
  }
LABEL_62:
  if (*((float *)a3 + 6) < *((float *)a2 + 6))
  {
LABEL_61:
    int v30 = v5[2];
    long long v31 = *(_OWORD *)v5;
    float v32 = (unsigned __int8 *)*((void *)a3 + 2);
    *(_OWORD *)BOOL v5 = *(_OWORD *)a3;
    v5[2] = v32;
    *(_OWORD *)a3 = v31;
    *((void *)a3 + 2) = v30;
    uint64_t v33 = (int *)(v5 + 3);
LABEL_120:
    BOOL v52 = (float *)(a3 + 24);
LABEL_134:
    int v73 = *v33;
    *uint64_t v33 = *(_DWORD *)v52;
    *(_DWORD *)BOOL v52 = v73;
    return result;
  }
LABEL_63:
  float v34 = v5[2];
  long long v35 = *(_OWORD *)v5;
  int v36 = (unsigned __int8 *)*((void *)a2 + 2);
  *(_OWORD *)BOOL v5 = *(_OWORD *)a2;
  v5[2] = v36;
  *(_OWORD *)a2 = v35;
  *((void *)a2 + 2) = v34;
  uint64_t v33 = (int *)(a2 + 24);
  float v37 = *((float *)v5 + 6);
  *((_DWORD *)v5 + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = v37;
  signed __int8 v38 = a3[23];
  if (v38 >= 0) {
    size_t v39 = a3[23];
  }
  else {
    size_t v39 = *((void *)a3 + 1);
  }
  signed __int8 v40 = a2[23];
  if (v40 >= 0) {
    size_t v41 = a2[23];
  }
  else {
    size_t v41 = *((void *)a2 + 1);
  }
  if (v40 >= 0) {
    size_t v42 = a2;
  }
  else {
    size_t v42 = *(unsigned __int8 **)a2;
  }
  if (v39 != v41) {
    goto LABEL_108;
  }
  if ((a3[23] & 0x80) != 0)
  {
    float result = (unsigned __int8 **)memcmp(*(const void **)a3, v42, *((void *)a3 + 1));
    if (result) {
      goto LABEL_108;
    }
LABEL_118:
    if (*((float *)a3 + 6) >= v37) {
      return result;
    }
    goto LABEL_119;
  }
  if (!a3[23]) {
    goto LABEL_118;
  }
  signed __int8 v43 = v42;
  size_t v44 = a3;
  uint64_t v45 = a3[23];
  while (*v44 == *v43)
  {
    ++v44;
    ++v43;
    if (!--v45) {
      goto LABEL_118;
    }
  }
LABEL_108:
  if (v38 >= 0) {
    size_t v61 = a3;
  }
  else {
    size_t v61 = *(const void **)a3;
  }
  if (v41 >= v39) {
    size_t v62 = v39;
  }
  else {
    size_t v62 = v41;
  }
  float result = (unsigned __int8 **)memcmp(v61, v42, v62);
  BOOL v63 = v39 < v41;
  if (result) {
    BOOL v63 = (int)result < 0;
  }
  if (v63)
  {
LABEL_119:
    uint64_t v64 = *((void *)a2 + 2);
    long long v65 = *(_OWORD *)a2;
    uint64_t v66 = *((void *)a3 + 2);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((void *)a2 + 2) = v66;
    *(_OWORD *)a3 = v65;
    *((void *)a3 + 2) = v64;
    goto LABEL_120;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>(unsigned __int8 **a1, unsigned __int8 **a2)
{
  uint64_t v3 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v3)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v5 = a2 - 4;
      char v6 = *((unsigned char *)a2 - 9);
      if (v6 >= 0) {
        size_t v7 = *((unsigned __int8 *)a2 - 9);
      }
      else {
        size_t v7 = (size_t)*(a2 - 3);
      }
      char v8 = *((unsigned char *)a1 + 23);
      if (v8 >= 0) {
        size_t v9 = *((unsigned __int8 *)a1 + 23);
      }
      else {
        size_t v9 = (size_t)a1[1];
      }
      if (v8 >= 0) {
        signed __int8 v10 = (unsigned __int8 *)a1;
      }
      else {
        signed __int8 v10 = *a1;
      }
      if (v7 != v9) {
        goto LABEL_91;
      }
      if ((*((unsigned char *)a2 - 9) & 0x80) != 0)
      {
        if (memcmp(*v5, v10, (size_t)*(a2 - 3))) {
          goto LABEL_91;
        }
      }
      else if (*((unsigned char *)a2 - 9))
      {
        size_t v11 = v10;
        signed __int8 v12 = a2 - 4;
        uint64_t v13 = *((unsigned __int8 *)a2 - 9);
        while (*(unsigned __int8 *)v12 == *v11)
        {
          signed __int8 v12 = (unsigned __int8 **)((char *)v12 + 1);
          ++v11;
          if (!--v13) {
            goto LABEL_102;
          }
        }
LABEL_91:
        if (v6 >= 0) {
          size_t v44 = v5;
        }
        else {
          size_t v44 = *v5;
        }
        if (v9 >= v7) {
          size_t v45 = v7;
        }
        else {
          size_t v45 = v9;
        }
        int v46 = memcmp(v44, v10, v45);
        BOOL v47 = v7 < v9;
        if (v46) {
          BOOL v47 = v46 < 0;
        }
        if (v47) {
          goto LABEL_100;
        }
        return 1;
      }
LABEL_102:
      if (*((float *)a2 - 2) < *((float *)a1 + 6))
      {
LABEL_100:
        BOOL v48 = a1[2];
        long long v49 = *(_OWORD *)a1;
        long long v50 = v5[2];
        *(_OWORD *)a1 = *(_OWORD *)v5;
        a1[2] = v50;
        *(_OWORD *)BOOL v5 = v49;
        v5[2] = v48;
        LODWORD(v49) = *((_DWORD *)a1 + 6);
        *((_DWORD *)a1 + 6) = *((_DWORD *)a2 - 2);
        *((_DWORD *)a2 - 2) = v49;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>(a1, (unsigned __int8 *)a1 + 32, (unsigned __int8 *)a2 - 32);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>((long long *)a1, (unsigned __int8 *)a1 + 32, (unsigned __int8 *)a1 + 64, (unsigned __int8 *)a2 - 32);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *,0>((unsigned __int8 *)a1, (unsigned __int8 *)a1 + 32, (unsigned __int8 *)a1 + 64, (unsigned __int8 *)a1 + 96, (unsigned __int8 *)a2 - 32);
      return 1;
    default:
      unint64_t v14 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>(a1, (unsigned __int8 *)a1 + 32, (unsigned __int8 *)a1 + 64);
      size_t v15 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      int v16 = 0;
      while (2)
      {
        uint64_t v17 = *((unsigned __int8 *)v15 + 23);
        if ((v17 & 0x80u) == 0) {
          size_t v18 = *((unsigned __int8 *)v15 + 23);
        }
        else {
          size_t v18 = (size_t)v15[1];
        }
        char v19 = *((unsigned char *)v14 + 23);
        if (v19 >= 0) {
          size_t v20 = *((unsigned __int8 *)v14 + 23);
        }
        else {
          size_t v20 = (size_t)v14[1];
        }
        if (v19 >= 0) {
          uint64_t v21 = (unsigned __int8 *)v14;
        }
        else {
          uint64_t v21 = *v14;
        }
        if (v18 != v20) {
          goto LABEL_37;
        }
        if ((v17 & 0x80) == 0)
        {
          if (*((unsigned char *)v15 + 23))
          {
            uint64_t v22 = 0;
            while (*((unsigned __int8 *)v15 + v22) == v21[v22])
            {
              if (v17 == ++v22) {
                goto LABEL_47;
              }
            }
            goto LABEL_37;
          }
LABEL_47:
          float v27 = *((float *)v15 + 6);
          if (v27 >= *((float *)v14 + 6)) {
            goto LABEL_85;
          }
          goto LABEL_48;
        }
        if (!memcmp(*v15, v21, (size_t)v15[1])) {
          goto LABEL_47;
        }
LABEL_37:
        if ((v17 & 0x80u) == 0) {
          size_t v23 = v15;
        }
        else {
          size_t v23 = *v15;
        }
        if (v20 >= v18) {
          size_t v24 = v18;
        }
        else {
          size_t v24 = v20;
        }
        int v25 = memcmp(v23, v21, v24);
        BOOL v26 = v18 < v20;
        if (v25) {
          BOOL v26 = v25 < 0;
        }
        if (!v26) {
          goto LABEL_85;
        }
        float v27 = *((float *)v15 + 6);
LABEL_48:
        char v28 = 0;
        *(_OWORD *)__s1 = *(_OWORD *)v15;
        signed __int8 v53 = v15[2];
        v15[1] = 0;
        void v15[2] = 0;
        unsigned __int8 *v15 = 0;
        float v54 = v27;
        for (uint64_t i = (float *)v15; ; uint64_t i = v30)
        {
          int v30 = (float *)v14;
          if (v28 < 0) {
            operator delete(*(void **)i);
          }
          *(_OWORD *)uint64_t i = *(_OWORD *)v14;
          *((void *)i + 2) = v14[2];
          *((unsigned char *)v14 + 23) = 0;
          *(unsigned char *)unint64_t v14 = 0;
          i[6] = *((float *)v14 + 6);
          if (v14 == a1) {
            break;
          }
          v14 -= 4;
          char v31 = HIBYTE(v53);
          if (SHIBYTE(v53) >= 0) {
            float v32 = (void *)HIBYTE(v53);
          }
          else {
            float v32 = __s1[1];
          }
          int v33 = *((char *)v30 - 9);
          if (v33 >= 0) {
            size_t v34 = *((unsigned __int8 *)v14 + 23);
          }
          else {
            size_t v34 = *((void *)v30 - 3);
          }
          if (v33 >= 0) {
            long long v35 = (unsigned __int8 **)(v30 - 8);
          }
          else {
            long long v35 = (unsigned __int8 **)*((void *)v30 - 4);
          }
          if (v32 == (void *)v34)
          {
            if ((HIBYTE(v53) & 0x80) != 0)
            {
              if (!memcmp(__s1[0], v35, (size_t)__s1[1]))
              {
LABEL_79:
                if (v54 >= *(v30 - 2)) {
                  goto LABEL_82;
                }
                goto LABEL_80;
              }
            }
            else
            {
              if (!HIBYTE(v53)) {
                goto LABEL_79;
              }
              int v36 = __s1;
              float v37 = v35;
              uint64_t v38 = HIBYTE(v53);
              while (*(unsigned __int8 *)v36 == *(unsigned __int8 *)v37)
              {
                int v36 = (void **)((char *)v36 + 1);
                float v37 = (unsigned __int8 **)((char *)v37 + 1);
                if (!--v38) {
                  goto LABEL_79;
                }
              }
            }
          }
          if (v31 >= 0) {
            size_t v39 = __s1;
          }
          else {
            size_t v39 = (void **)__s1[0];
          }
          if (v34 >= (unint64_t)v32) {
            size_t v40 = (size_t)v32;
          }
          else {
            size_t v40 = v34;
          }
          int v41 = memcmp(v39, v35, v40);
          BOOL v42 = (unint64_t)v32 < v34;
          if (v41) {
            BOOL v42 = v41 < 0;
          }
          if (!v42) {
            goto LABEL_82;
          }
LABEL_80:
          char v28 = *((unsigned char *)v30 + 23);
        }
        int v30 = (float *)a1;
LABEL_82:
        if (*((char *)v30 + 23) < 0) {
          operator delete(*(void **)v30);
        }
        long long v43 = *(_OWORD *)__s1;
        *((void *)v30 + 2) = v53;
        *(_OWORD *)int v30 = v43;
        HIBYTE(v53) = 0;
        LOBYTE(__s1[0]) = 0;
        v30[6] = v54;
        if (++v16 != 8)
        {
LABEL_85:
          unint64_t v14 = v15;
          v15 += 4;
          if (v15 == a2) {
            return 1;
          }
          continue;
        }
        return v15 + 4 == a2;
      }
  }
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>(long long *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>((unsigned __int8 **)a1, a2, a3);
  signed __int8 v8 = a4[23];
  if (v8 >= 0) {
    size_t v9 = a4[23];
  }
  else {
    size_t v9 = *((void *)a4 + 1);
  }
  signed __int8 v10 = a3[23];
  if (v10 >= 0) {
    size_t v11 = a3[23];
  }
  else {
    size_t v11 = *((void *)a3 + 1);
  }
  if (v10 >= 0) {
    signed __int8 v12 = a3;
  }
  else {
    signed __int8 v12 = *(unsigned __int8 **)a3;
  }
  if (v9 != v11) {
    goto LABEL_18;
  }
  if ((a4[23] & 0x80) != 0)
  {
    if (memcmp(*(const void **)a4, v12, *((void *)a4 + 1))) {
      goto LABEL_18;
    }
LABEL_28:
    float result = *((float *)a4 + 6);
    if (result >= *((float *)a3 + 6)) {
      return result;
    }
LABEL_29:
    uint64_t v21 = *((void *)a3 + 2);
    long long v22 = *(_OWORD *)a3;
    uint64_t v23 = *((void *)a4 + 2);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *((void *)a3 + 2) = v23;
    *(_OWORD *)a4 = v22;
    *((void *)a4 + 2) = v21;
    LODWORD(v22) = *((_DWORD *)a3 + 6);
    *((_DWORD *)a3 + 6) = *((_DWORD *)a4 + 6);
    *((_DWORD *)a4 + 6) = v22;
    signed __int8 v24 = a3[23];
    if (v24 >= 0) {
      size_t v25 = a3[23];
    }
    else {
      size_t v25 = *((void *)a3 + 1);
    }
    signed __int8 v26 = a2[23];
    if (v26 >= 0) {
      size_t v27 = a2[23];
    }
    else {
      size_t v27 = *((void *)a2 + 1);
    }
    if (v26 >= 0) {
      char v28 = a2;
    }
    else {
      char v28 = *(unsigned __int8 **)a2;
    }
    if (v25 != v27) {
      goto LABEL_46;
    }
    if ((a3[23] & 0x80) != 0)
    {
      if (memcmp(*(const void **)a3, v28, *((void *)a3 + 1))) {
        goto LABEL_46;
      }
    }
    else if (a3[23])
    {
      BOOL v29 = v28;
      int v30 = a3;
      uint64_t v31 = a3[23];
      while (*v30 == *v29)
      {
        ++v30;
        ++v29;
        if (!--v31) {
          goto LABEL_56;
        }
      }
LABEL_46:
      if (v24 >= 0) {
        float v32 = a3;
      }
      else {
        float v32 = *(const void **)a3;
      }
      if (v27 >= v25) {
        size_t v33 = v25;
      }
      else {
        size_t v33 = v27;
      }
      int v34 = memcmp(v32, v28, v33);
      BOOL v35 = v25 < v27;
      if (v34) {
        BOOL v35 = v34 < 0;
      }
      if (!v35) {
        return result;
      }
LABEL_57:
      uint64_t v36 = *((void *)a2 + 2);
      long long v37 = *(_OWORD *)a2;
      uint64_t v38 = *((void *)a3 + 2);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((void *)a2 + 2) = v38;
      *(_OWORD *)a3 = v37;
      *((void *)a3 + 2) = v36;
      LODWORD(v37) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = *((_DWORD *)a3 + 6);
      *((_DWORD *)a3 + 6) = v37;
      signed __int8 v39 = a2[23];
      if (v39 >= 0) {
        size_t v40 = a2[23];
      }
      else {
        size_t v40 = *((void *)a2 + 1);
      }
      char v41 = *((unsigned char *)a1 + 23);
      if (v41 >= 0) {
        size_t v42 = *((unsigned __int8 *)a1 + 23);
      }
      else {
        size_t v42 = *((void *)a1 + 1);
      }
      if (v41 >= 0) {
        long long v43 = (unsigned __int8 *)a1;
      }
      else {
        long long v43 = *(unsigned __int8 **)a1;
      }
      if (v40 != v42) {
        goto LABEL_74;
      }
      if ((a2[23] & 0x80) != 0)
      {
        if (memcmp(*(const void **)a2, v43, *((void *)a2 + 1))) {
          goto LABEL_74;
        }
      }
      else if (a2[23])
      {
        size_t v44 = v43;
        size_t v45 = a2;
        uint64_t v46 = a2[23];
        while (*v45 == *v44)
        {
          ++v45;
          ++v44;
          if (!--v46) {
            goto LABEL_85;
          }
        }
LABEL_74:
        if (v39 >= 0) {
          BOOL v47 = a2;
        }
        else {
          BOOL v47 = *(const void **)a2;
        }
        if (v42 >= v40) {
          size_t v48 = v40;
        }
        else {
          size_t v48 = v42;
        }
        int v49 = memcmp(v47, v43, v48);
        BOOL v50 = v40 < v42;
        if (v49) {
          BOOL v50 = v49 < 0;
        }
        if (!v50) {
          return result;
        }
LABEL_83:
        uint64_t v51 = *((void *)a1 + 2);
        long long v52 = *a1;
        uint64_t v53 = *((void *)a2 + 2);
        *a1 = *(_OWORD *)a2;
        *((void *)a1 + 2) = v53;
        *(_OWORD *)a2 = v52;
        *((void *)a2 + 2) = v51;
        float result = *((float *)a1 + 6);
        *((_DWORD *)a1 + 6) = *((_DWORD *)a2 + 6);
        *((float *)a2 + 6) = result;
        return result;
      }
LABEL_85:
      float result = *((float *)a2 + 6);
      if (result >= *((float *)a1 + 6)) {
        return result;
      }
      goto LABEL_83;
    }
LABEL_56:
    float result = *((float *)a3 + 6);
    if (result >= *((float *)a2 + 6)) {
      return result;
    }
    goto LABEL_57;
  }
  if (!a4[23]) {
    goto LABEL_28;
  }
  uint64_t v13 = v12;
  unint64_t v14 = a4;
  uint64_t v15 = a4[23];
  while (*v14 == *v13)
  {
    ++v14;
    ++v13;
    if (!--v15) {
      goto LABEL_28;
    }
  }
LABEL_18:
  if (v8 >= 0) {
    int v16 = a4;
  }
  else {
    int v16 = *(const void **)a4;
  }
  if (v11 >= v9) {
    size_t v17 = v9;
  }
  else {
    size_t v17 = v11;
  }
  int v18 = memcmp(v16, v12, v17);
  BOOL v20 = v9 < v11;
  if (v18) {
    BOOL v20 = v18 < 0;
  }
  if (v20) {
    goto LABEL_29;
  }
  return result;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,float> *,std::pair<std::string,float> *,std::pair<std::string,float> *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  BOOL v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      long long v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)BOOL v5 = 0;
      *(_DWORD *)(a4 + 24) = *((_DWORD *)v5 + 6);
      a4 += 32;
      v5 += 2;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::__introsort<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *,false>(unint64_t a1, void **a2, uint64_t a3, char a4)
{
  while (2)
  {
    BOOL v120 = (float *)(a2 - 4);
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          uint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 5;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (*((float *)a2 - 2) < *(float *)(a1 + 24))
                {
                  char v137 = *(void **)(a1 + 16);
                  long long v128 = *(_OWORD *)a1;
                  long long v49 = *((_OWORD *)a2 - 2);
                  *(void *)(a1 + 16) = *(a2 - 2);
                  *(_OWORD *)a1 = v49;
                  *(a2 - 2) = v137;
                  *((_OWORD *)a2 - 2) = v128;
                  LODWORD(v49) = *(_DWORD *)(a1 + 24);
                  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 - 2);
                  *((_DWORD *)a2 - 2) = v49;
                }
                break;
              case 3:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>((long long *)a1, (float *)(a1 + 32), v120);
                break;
              case 4:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>(a1, (long long *)(a1 + 32), (float *)(a1 + 64), v120);
                break;
              case 5:
                BOOL v50 = (long long *)(a1 + 32);
                uint64_t v51 = (long long *)(a1 + 64);
                long long v52 = (long long *)(a1 + 96);
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>(a1, (long long *)(a1 + 32), (float *)(a1 + 64), (float *)(a1 + 96));
                if (*((float *)a2 - 2) < *(float *)(a1 + 120))
                {
                  long long v53 = *v52;
                  float v54 = *(void **)(a1 + 112);
                  uint64_t v55 = (uint64_t)*(a2 - 2);
                  *long long v52 = *((_OWORD *)a2 - 2);
                  *(void *)(a1 + 112) = v55;
                  *(a2 - 2) = v54;
                  *((_OWORD *)a2 - 2) = v53;
                  LODWORD(v53) = *(_DWORD *)(a1 + 120);
                  *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 - 2);
                  *((_DWORD *)a2 - 2) = v53;
                  float v56 = *(float *)(a1 + 120);
                  float v57 = *(float *)(a1 + 88);
                  if (v56 < v57)
                  {
                    uint64_t v58 = *(void *)(a1 + 80);
                    long long v59 = *v51;
                    long long *v51 = *v52;
                    *(void *)(a1 + 80) = *(void *)(a1 + 112);
                    *long long v52 = v59;
                    *(void *)(a1 + 112) = v58;
                    *(float *)(a1 + 88) = v56;
                    float v60 = *(float *)(a1 + 56);
                    *(float *)(a1 + 120) = v57;
                    if (v56 < v60)
                    {
                      uint64_t v61 = *(void *)(a1 + 48);
                      long long v62 = *v50;
                      *BOOL v50 = *v51;
                      *(void *)(a1 + 48) = *(void *)(a1 + 80);
                      long long *v51 = v62;
                      *(void *)(a1 + 80) = v61;
                      *(float *)(a1 + 56) = v56;
                      float v63 = *(float *)(a1 + 24);
                      *(float *)(a1 + 88) = v60;
                      if (v56 < v63)
                      {
                        uint64_t v138 = *(void *)(a1 + 16);
                        long long v129 = *(_OWORD *)a1;
                        *(_OWORD *)a1 = *v50;
                        *(void *)(a1 + 16) = *(void *)(a1 + 48);
                        *BOOL v50 = v129;
                        *(void *)(a1 + 48) = v138;
                        *(float *)(a1 + 24) = v56;
                        *(float *)(a1 + 56) = v63;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 767)
          {
            uint64_t v64 = (void **)(a1 + 32);
            BOOL v66 = (void **)a1 == a2 || v64 == a2;
            if (a4)
            {
              if (!v66)
              {
                uint64_t v67 = 0;
                unint64_t v68 = a1;
                do
                {
                  BOOL v69 = v64;
                  float v70 = *(float *)(v68 + 56);
                  if (v70 < *(float *)(v68 + 24))
                  {
                    long long v71 = *v64;
                    *(void *)uint64_t v130 = *(void *)(v68 + 40);
                    *(void *)&v130[7] = *(void *)(v68 + 47);
                    char v72 = *(unsigned char *)(v68 + 55);
                    v64[1] = 0;
                    v64[2] = 0;
                    *uint64_t v64 = 0;
                    uint64_t v73 = v67;
                    while (1)
                    {
                      uint64_t v74 = a1 + v73;
                      uint64_t v75 = (void **)(a1 + v73 + 32);
                      if (*(char *)(a1 + v73 + 55) < 0) {
                        operator delete(*v75);
                      }
                      *(_OWORD *)uint64_t v75 = *(_OWORD *)v74;
                      *(void *)(a1 + v73 + 48) = *(void *)(v74 + 16);
                      *(unsigned char *)(v74 + 23) = 0;
                      *(unsigned char *)uint64_t v74 = 0;
                      *(_DWORD *)(v74 + 56) = *(_DWORD *)(v74 + 24);
                      if (!v73) {
                        break;
                      }
                      float v76 = *(float *)(a1 + v73 - 8);
                      v73 -= 32;
                      if (v70 >= v76)
                      {
                        uint64_t v77 = a1 + v73 + 32;
                        goto LABEL_93;
                      }
                    }
                    uint64_t v77 = a1;
LABEL_93:
                    if (*(char *)(v77 + 23) < 0) {
                      operator delete(*(void **)v77);
                    }
                    *(void *)uint64_t v77 = v71;
                    *(void *)(v77 + 8) = *(void *)v130;
                    *(void *)(v77 + 15) = *(void *)&v130[7];
                    *(unsigned char *)(v77 + 23) = v72;
                    *(float *)(v77 + 24) = v70;
                  }
                  uint64_t v64 = v69 + 4;
                  v67 += 32;
                  unint64_t v68 = (unint64_t)v69;
                }
                while (v69 + 4 != a2);
              }
            }
            else if (!v66)
            {
              uint64_t v111 = (_DWORD *)(a1 + 56);
              do
              {
                int v112 = v64;
                float v113 = *(float *)(a1 + 56);
                if (v113 < *(float *)(a1 + 24))
                {
                  uint64_t v114 = *v64;
                  *(void *)BOOL v133 = *(void *)(a1 + 40);
                  *(void *)&v133[7] = *(void *)(a1 + 47);
                  char v115 = *(unsigned char *)(a1 + 55);
                  v64[1] = 0;
                  v64[2] = 0;
                  *uint64_t v64 = 0;
                  v116 = v111;
                  do
                  {
                    uint64_t v117 = (void **)(v116 - 6);
                    if (*((char *)v116 - 1) < 0) {
                      operator delete(*v117);
                    }
                    *(_OWORD *)uint64_t v117 = *(_OWORD *)(v116 - 14);
                    *((void *)v116 - 1) = *((void *)v116 - 5);
                    *((unsigned char *)v116 - 33) = 0;
                    *((unsigned char *)v116 - 56) = 0;
                    size_t v118 = (float *)(v116 - 8);
                    _DWORD *v116 = *(v116 - 8);
                    float v119 = *((float *)v116 - 16);
                    v116 -= 8;
                  }
                  while (v113 < v119);
                  if (*((char *)v118 - 1) < 0) {
                    operator delete(*((void **)v118 - 3));
                  }
                  *((void *)v118 - 3) = v114;
                  *(void *)((char *)v118 - 9) = *(void *)&v133[7];
                  *((void *)v118 - 2) = *(void *)v133;
                  *((unsigned char *)v118 - 1) = v115;
                  *size_t v118 = v113;
                }
                uint64_t v64 = v112 + 4;
                v111 += 8;
                a1 = (unint64_t)v112;
              }
              while (v112 + 4 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((void **)a1 != a2)
            {
              int64_t v78 = (unint64_t)(v12 - 2) >> 1;
              int64_t v79 = v78;
              do
              {
                int64_t v80 = v79;
                if (v78 >= v79)
                {
                  uint64_t v81 = (2 * v79) | 1;
                  unint64_t v82 = a1 + 32 * v81;
                  if (2 * v80 + 2 < v12 && *(float *)(v82 + 24) < *(float *)(v82 + 56))
                  {
                    v82 += 32;
                    uint64_t v81 = 2 * v80 + 2;
                  }
                  float v83 = *(float *)(a1 + 32 * v80 + 24);
                  if (*(float *)(v82 + 24) >= v83)
                  {
                    unint64_t v84 = a1 + 32 * v80;
                    float v121 = *(void **)v84;
                    *(void *)&v131[7] = *(void *)(v84 + 15);
                    *(void *)size_t v131 = *(void *)(v84 + 8);
                    char v85 = *(unsigned char *)(v84 + 23);
                    *(void *)unint64_t v84 = 0;
                    *(void *)(v84 + 8) = 0;
                    *(void *)(v84 + 16) = 0;
                    do
                    {
                      unint64_t v86 = v84;
                      unint64_t v84 = v82;
                      if (*(char *)(v86 + 23) < 0) {
                        operator delete(*(void **)v86);
                      }
                      long long v87 = *(_OWORD *)v84;
                      *(void *)(v86 + 16) = *(void *)(v84 + 16);
                      *(_OWORD *)unint64_t v86 = v87;
                      *(unsigned char *)(v84 + 23) = 0;
                      *(unsigned char *)unint64_t v84 = 0;
                      *(_DWORD *)(v86 + 24) = *(_DWORD *)(v84 + 24);
                      if (v78 < v81) {
                        break;
                      }
                      uint64_t v88 = 2 * v81;
                      uint64_t v81 = (2 * v81) | 1;
                      unint64_t v82 = a1 + 32 * v81;
                      uint64_t v89 = v88 + 2;
                      if (v89 < v12 && *(float *)(v82 + 24) < *(float *)(v82 + 56))
                      {
                        v82 += 32;
                        uint64_t v81 = v89;
                      }
                    }
                    while (*(float *)(v82 + 24) >= v83);
                    if (*(char *)(v84 + 23) < 0) {
                      operator delete(*(void **)v84);
                    }
                    *(void *)unint64_t v84 = v121;
                    *(void *)(v84 + 8) = *(void *)v131;
                    *(void *)(v84 + 15) = *(void *)&v131[7];
                    *(unsigned char *)(v84 + 23) = v85;
                    *(float *)(v84 + 24) = v83;
                  }
                }
                int64_t v79 = v80 - 1;
              }
              while (v80);
              uint64_t v90 = (unint64_t)v11 >> 5;
              do
              {
                uint64_t v91 = 0;
                long long v92 = a2;
                BOOL v93 = *(void **)a1;
                *(void *)int v124 = *(void *)(a1 + 8);
                *(void *)&v124[7] = *(void *)(a1 + 15);
                char v94 = *(unsigned char *)(a1 + 23);
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                int v95 = *(_DWORD *)(a1 + 24);
                unint64_t v96 = a1;
                do
                {
                  unint64_t v97 = v96 + 32 * (v91 + 1);
                  uint64_t v98 = 2 * v91;
                  uint64_t v91 = (2 * v91) | 1;
                  uint64_t v99 = v98 + 2;
                  if (v99 < v90 && *(float *)(v97 + 24) < *(float *)(v97 + 56))
                  {
                    v97 += 32;
                    uint64_t v91 = v99;
                  }
                  if (*(char *)(v96 + 23) < 0) {
                    operator delete(*(void **)v96);
                  }
                  long long v100 = *(_OWORD *)v97;
                  *(void *)(v96 + 16) = *(void *)(v97 + 16);
                  *(_OWORD *)unint64_t v96 = v100;
                  *(unsigned char *)(v97 + 23) = 0;
                  *(unsigned char *)unint64_t v97 = 0;
                  *(_DWORD *)(v96 + 24) = *(_DWORD *)(v97 + 24);
                  unint64_t v96 = v97;
                }
                while (v91 <= (uint64_t)((unint64_t)(v90 - 2) >> 1));
                a2 -= 4;
                int v101 = *(char *)(v97 + 23);
                if ((void **)v97 == v92 - 4)
                {
                  if (v101 < 0) {
                    operator delete(*(void **)v97);
                  }
                  *(void *)unint64_t v97 = v93;
                  *(void *)(v97 + 8) = *(void *)v124;
                  *(void *)(v97 + 15) = *(void *)&v124[7];
                  *(unsigned char *)(v97 + 23) = v94;
                  *(_DWORD *)(v97 + 24) = v95;
                }
                else
                {
                  if (v101 < 0) {
                    operator delete(*(void **)v97);
                  }
                  long long v102 = *(_OWORD *)a2;
                  *(void *)(v97 + 16) = *(v92 - 2);
                  *(_OWORD *)unint64_t v97 = v102;
                  *((unsigned char *)v92 - 9) = 0;
                  *((unsigned char *)v92 - 32) = 0;
                  *(_DWORD *)(v97 + 24) = *((_DWORD *)v92 - 2);
                  if (*((char *)v92 - 9) < 0) {
                    operator delete(*a2);
                  }
                  *(v92 - 4) = v93;
                  *(void **)((char *)v92 - 17) = *(void **)&v124[7];
                  *(v92 - 3) = *(void **)v124;
                  *((unsigned char *)v92 - 9) = v94;
                  *((_DWORD *)v92 - 2) = v95;
                  uint64_t v103 = v97 + 32 - a1;
                  if (v103 >= 33)
                  {
                    unint64_t v104 = (((unint64_t)v103 >> 5) - 2) >> 1;
                    float v105 = *(float *)(v97 + 24);
                    if (*(float *)(a1 + 32 * v104 + 24) < v105)
                    {
                      size_t v106 = *(void **)v97;
                      *(void *)int v132 = *(void *)(v97 + 8);
                      *(void *)&v132[7] = *(void *)(v97 + 15);
                      char v107 = *(unsigned char *)(v97 + 23);
                      *(void *)(v97 + 8) = 0;
                      *(void *)(v97 + 16) = 0;
                      *(void *)unint64_t v97 = 0;
                      do
                      {
                        if (*(char *)(v97 + 23) < 0) {
                          operator delete(*(void **)v97);
                        }
                        unint64_t v108 = a1 + 32 * v104;
                        long long v109 = *(_OWORD *)v108;
                        *(void *)(v97 + 16) = *(void *)(v108 + 16);
                        *(_OWORD *)unint64_t v97 = v109;
                        *(unsigned char *)(v108 + 23) = 0;
                        *(unsigned char *)unint64_t v108 = 0;
                        *(_DWORD *)(v97 + 24) = *(_DWORD *)(v108 + 24);
                        if (!v104) {
                          break;
                        }
                        unint64_t v104 = (v104 - 1) >> 1;
                        unint64_t v97 = v108;
                      }
                      while (*(float *)(a1 + 32 * v104 + 24) < v105);
                      if (*(char *)(v108 + 23) < 0) {
                        operator delete(*(void **)v108);
                      }
                      *(void *)unint64_t v108 = v106;
                      *(void *)(v108 + 15) = *(void *)&v132[7];
                      *(void *)(v108 + 8) = *(void *)v132;
                      *(unsigned char *)(v108 + 23) = v107;
                      *(float *)(v108 + 24) = v105;
                    }
                  }
                }
              }
              while (v90-- > 2);
            }
            return;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unint64_t v14 = a1 + 32 * ((unint64_t)v12 >> 1);
          if ((unint64_t)v11 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>((long long *)v14, (float *)a1, v120);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>((long long *)a1, (float *)v14, v120);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>((long long *)(a1 + 32), (float *)(v14 - 32), (float *)a2 - 16);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>((long long *)(a1 + 64), (float *)(a1 + 32 + 32 * v13), (float *)a2 - 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>((long long *)(v14 - 32), (float *)v14, (float *)(a1 + 32 + 32 * v13));
            uint64_t v134 = *(void *)(a1 + 16);
            long long v125 = *(_OWORD *)a1;
            uint64_t v15 = *(void *)(v14 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(void *)(a1 + 16) = v15;
            *(void *)(v14 + 16) = v134;
            *(_OWORD *)unint64_t v14 = v125;
            int v16 = *(_DWORD *)(a1 + 24);
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(v14 + 24);
            *(_DWORD *)(v14 + 24) = v16;
          }
          --a3;
          if (a4) {
            break;
          }
          float v17 = *(float *)(a1 + 24);
          if (*(float *)(a1 - 8) < v17) {
            goto LABEL_12;
          }
          uint64_t v35 = *(void *)a1;
          *(void *)unint64_t v123 = *(void *)(a1 + 8);
          *(void *)&v123[7] = *(void *)(a1 + 15);
          char v36 = *(unsigned char *)(a1 + 23);
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          if (v17 >= *((float *)a2 - 2))
          {
            unint64_t v39 = a1 + 32;
            do
            {
              unint64_t v10 = v39;
              if (v39 >= (unint64_t)a2) {
                break;
              }
              float v40 = *(float *)(v39 + 24);
              v39 += 32;
            }
            while (v17 >= v40);
          }
          else
          {
            unint64_t v37 = a1;
            do
            {
              unint64_t v10 = v37 + 32;
              float v38 = *(float *)(v37 + 56);
              v37 += 32;
            }
            while (v17 >= v38);
          }
          char v41 = a2;
          if (v10 < (unint64_t)a2)
          {
            size_t v42 = a2;
            do
            {
              char v41 = v42 - 4;
              float v43 = *((float *)v42 - 2);
              v42 -= 4;
            }
            while (v17 < v43);
          }
          while (v10 < (unint64_t)v41)
          {
            int v136 = *(void **)(v10 + 16);
            long long v127 = *(_OWORD *)v10;
            long long v44 = *(_OWORD *)v41;
            *(void *)(v10 + 16) = v41[2];
            *(_OWORD *)unint64_t v10 = v44;
            v41[2] = v136;
            *(_OWORD *)char v41 = v127;
            LODWORD(v44) = *(_DWORD *)(v10 + 24);
            *(_DWORD *)(v10 + 24) = *((_DWORD *)v41 + 6);
            *((_DWORD *)v41 + 6) = v44;
            do
            {
              float v45 = *(float *)(v10 + 56);
              v10 += 32;
            }
            while (v17 >= v45);
            do
            {
              float v46 = *((float *)v41 - 2);
              v41 -= 4;
            }
            while (v17 < v46);
          }
          BOOL v47 = (void **)(v10 - 32);
          BOOL v4 = v10 - 32 >= a1;
          BOOL v5 = v10 - 32 == a1;
          if (v10 - 32 != a1)
          {
            if (*(char *)(a1 + 23) < 0) {
              operator delete(*(void **)a1);
            }
            long long v48 = *(_OWORD *)v47;
            *(void *)(a1 + 16) = *(void *)(v10 - 16);
            *(_OWORD *)a1 = v48;
            *(unsigned char *)(v10 - 9) = 0;
            *(unsigned char *)(v10 - 32) = 0;
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(v10 - 8);
          }
          if (*(char *)(v10 - 9) < 0) {
            operator delete(*v47);
          }
          a4 = 0;
          *(void *)(v10 - 32) = v35;
          *(void *)(v10 - 17) = *(void *)&v123[7];
          *(void *)(v10 - 24) = *(void *)v123;
          *(unsigned char *)(v10 - 9) = v36;
          *(float *)(v10 - 8) = v17;
        }
        float v17 = *(float *)(a1 + 24);
LABEL_12:
        uint64_t v18 = 0;
        uint64_t v19 = *(void *)a1;
        *(void *)float v122 = *(void *)(a1 + 8);
        *(void *)&v122[7] = *(void *)(a1 + 15);
        char v20 = *(unsigned char *)(a1 + 23);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        do
        {
          float v21 = *(float *)(a1 + v18 + 56);
          v18 += 32;
        }
        while (v21 < v17);
        unint64_t v22 = a1 + v18;
        uint64_t v23 = a2;
        if (v18 == 32)
        {
          signed __int8 v26 = a2;
          while (v22 < (unint64_t)v26)
          {
            signed __int8 v24 = v26 - 4;
            float v27 = *((float *)v26 - 2);
            v26 -= 4;
            if (v27 < v17) {
              goto LABEL_22;
            }
          }
          signed __int8 v24 = v26;
        }
        else
        {
          do
          {
            signed __int8 v24 = v23 - 4;
            float v25 = *((float *)v23 - 2);
            v23 -= 4;
          }
          while (v25 >= v17);
        }
LABEL_22:
        unint64_t v10 = v22;
        if (v22 < (unint64_t)v24)
        {
          unint64_t v28 = (unint64_t)v24;
          do
          {
            uint64_t v135 = *(void *)(v10 + 16);
            long long v126 = *(_OWORD *)v10;
            long long v29 = *(_OWORD *)v28;
            *(void *)(v10 + 16) = *(void *)(v28 + 16);
            *(_OWORD *)unint64_t v10 = v29;
            *(void *)(v28 + 16) = v135;
            *(_OWORD *)unint64_t v28 = v126;
            LODWORD(v29) = *(_DWORD *)(v10 + 24);
            *(_DWORD *)(v10 + 24) = *(_DWORD *)(v28 + 24);
            *(_DWORD *)(v28 + 24) = v29;
            do
            {
              float v30 = *(float *)(v10 + 56);
              v10 += 32;
            }
            while (v30 < v17);
            do
            {
              float v31 = *(float *)(v28 - 8);
              v28 -= 32;
            }
            while (v31 >= v17);
          }
          while (v10 < v28);
        }
        float v32 = (void **)(v10 - 32);
        if (v10 - 32 != a1)
        {
          if (*(char *)(a1 + 23) < 0) {
            operator delete(*(void **)a1);
          }
          long long v33 = *(_OWORD *)v32;
          *(void *)(a1 + 16) = *(void *)(v10 - 16);
          *(_OWORD *)a1 = v33;
          *(unsigned char *)(v10 - 9) = 0;
          *(unsigned char *)(v10 - 32) = 0;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(v10 - 8);
        }
        if (*(char *)(v10 - 9) < 0) {
          operator delete(*v32);
        }
        *(void *)(v10 - 32) = v19;
        *(void *)(v10 - 17) = *(void *)&v122[7];
        *(void *)(v10 - 24) = *(void *)v122;
        *(unsigned char *)(v10 - 9) = v20;
        *(float *)(v10 - 8) = v17;
        if (v22 >= (unint64_t)v24) {
          break;
        }
LABEL_37:
        std::__introsort<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *,false>(a1, v10 - 32, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v34 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>(a1, v10 - 32);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v34) {
        goto LABEL_37;
      }
    }
    a2 = (void **)(v10 - 32);
    if (!v34) {
      continue;
    }
    break;
  }
}

float std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>(long long *a1, float *a2, float *a3)
{
  uint64_t v3 = a2 + 6;
  float result = a2[6];
  BOOL v5 = (float *)a1 + 6;
  float v6 = a3[6];
  if (result < *((float *)a1 + 6))
  {
    if (v6 >= result)
    {
      uint64_t v16 = *((void *)a1 + 2);
      long long v17 = *a1;
      uint64_t v18 = *((void *)a2 + 2);
      *a1 = *(_OWORD *)a2;
      *((void *)a1 + 2) = v18;
      *(_OWORD *)a2 = v17;
      *((void *)a2 + 2) = v16;
      float result = *((float *)a1 + 6);
      *((float *)a1 + 6) = a2[6];
      a2[6] = result;
      if (a3[6] >= result) {
        return result;
      }
      uint64_t v19 = *((void *)a2 + 2);
      long long v20 = *(_OWORD *)a2;
      uint64_t v21 = *((void *)a3 + 2);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((void *)a2 + 2) = v21;
      *(_OWORD *)a3 = v20;
      *((void *)a3 + 2) = v19;
      BOOL v5 = a2 + 6;
    }
    else
    {
      uint64_t v7 = *((void *)a1 + 2);
      long long v8 = *a1;
      uint64_t v9 = *((void *)a3 + 2);
      *a1 = *(_OWORD *)a3;
      *((void *)a1 + 2) = v9;
      *(_OWORD *)a3 = v8;
      *((void *)a3 + 2) = v7;
    }
    uint64_t v3 = a3 + 6;
    goto LABEL_10;
  }
  if (v6 < result)
  {
    uint64_t v10 = *((void *)a2 + 2);
    long long v11 = *(_OWORD *)a2;
    uint64_t v12 = *((void *)a3 + 2);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((void *)a2 + 2) = v12;
    *(_OWORD *)a3 = v11;
    *((void *)a3 + 2) = v10;
    *(float *)&long long v11 = a2[6];
    a2[6] = a3[6];
    *((_DWORD *)a3 + 6) = v11;
    float result = a2[6];
    if (result < *v5)
    {
      uint64_t v13 = *((void *)a1 + 2);
      long long v14 = *a1;
      uint64_t v15 = *((void *)a2 + 2);
      *a1 = *(_OWORD *)a2;
      *((void *)a1 + 2) = v15;
      *(_OWORD *)a2 = v14;
      *((void *)a2 + 2) = v13;
LABEL_10:
      float result = *v5;
      *BOOL v5 = *v3;
      float *v3 = result;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 8) < *(float *)(a1 + 24))
      {
        uint64_t v6 = *(void *)(a1 + 16);
        long long v7 = *(_OWORD *)a1;
        uint64_t v8 = *(void *)(a2 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(void *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 32) = v7;
        *(void *)(a2 - 16) = v6;
        LODWORD(v7) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>((long long *)a1, (float *)(a1 + 32), (float *)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>(a1, (long long *)(a1 + 32), (float *)(a1 + 64), (float *)(a2 - 32));
      return 1;
    case 5:
      uint64_t v21 = (long long *)(a1 + 32);
      unint64_t v22 = (long long *)(a1 + 64);
      uint64_t v23 = (long long *)(a1 + 96);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>(a1, (long long *)(a1 + 32), (float *)(a1 + 64), (float *)(a1 + 96));
      if (*(float *)(a2 - 8) < *(float *)(a1 + 120))
      {
        uint64_t v24 = *(void *)(a1 + 112);
        long long v25 = *v23;
        uint64_t v26 = *(void *)(a2 - 16);
        *uint64_t v23 = *(_OWORD *)(a2 - 32);
        *(void *)(a1 + 112) = v26;
        *(_OWORD *)(a2 - 32) = v25;
        *(void *)(a2 - 16) = v24;
        LODWORD(v25) = *(_DWORD *)(a1 + 120);
        *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v25;
        float v27 = *(float *)(a1 + 120);
        float v28 = *(float *)(a1 + 88);
        if (v27 < v28)
        {
          uint64_t v29 = *(void *)(a1 + 80);
          long long v30 = *v22;
          long long *v22 = *v23;
          *(void *)(a1 + 80) = *(void *)(a1 + 112);
          *uint64_t v23 = v30;
          *(void *)(a1 + 112) = v29;
          *(float *)(a1 + 88) = v27;
          float v31 = *(float *)(a1 + 56);
          *(float *)(a1 + 120) = v28;
          if (v27 < v31)
          {
            uint64_t v32 = *(void *)(a1 + 48);
            long long v33 = *v21;
            *uint64_t v21 = *v22;
            *(void *)(a1 + 48) = *(void *)(a1 + 80);
            long long *v22 = v33;
            *(void *)(a1 + 80) = v32;
            *(float *)(a1 + 56) = v27;
            float v34 = *(float *)(a1 + 24);
            *(float *)(a1 + 88) = v31;
            if (v27 < v34)
            {
              uint64_t v35 = *(void *)(a1 + 16);
              long long v36 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v21;
              *(void *)(a1 + 16) = *(void *)(a1 + 48);
              *uint64_t v21 = v36;
              *(void *)(a1 + 48) = v35;
              *(float *)(a1 + 24) = v27;
              *(float *)(a1 + 56) = v34;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>((long long *)a1, (float *)(a1 + 32), (float *)(a1 + 64));
      uint64_t v10 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    float v13 = *(float *)(v10 + 24);
    if (v13 < *(float *)(v9 + 24))
    {
      uint64_t v14 = *(void *)v10;
      *(void *)unint64_t v37 = *(void *)(v10 + 8);
      *(void *)&v37[7] = *(void *)(v10 + 15);
      char v15 = *(unsigned char *)(v10 + 23);
      *(void *)(v10 + 8) = 0;
      *(void *)(v10 + 16) = 0;
      *(void *)uint64_t v10 = 0;
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        uint64_t v18 = (void **)(a1 + v16 + 96);
        if (*(char *)(a1 + v16 + 119) < 0) {
          operator delete(*v18);
        }
        *(_OWORD *)uint64_t v18 = *(_OWORD *)(v17 + 64);
        *(void *)(a1 + v16 + 112) = *(void *)(v17 + 80);
        *(unsigned char *)(v17 + 87) = 0;
        *(unsigned char *)(v17 + 64) = 0;
        *(_DWORD *)(v17 + 120) = *(_DWORD *)(v17 + 88);
        if (v16 == -64) {
          break;
        }
        float v19 = *(float *)(a1 + v16 + 56);
        v16 -= 32;
        if (v13 >= v19)
        {
          uint64_t v20 = a1 + v16 + 96;
          goto LABEL_14;
        }
      }
      uint64_t v20 = a1;
LABEL_14:
      if (*(char *)(v20 + 23) < 0) {
        operator delete(*(void **)v20);
      }
      *(void *)uint64_t v20 = v14;
      *(void *)(v20 + 8) = *(void *)v37;
      *(void *)(v20 + 15) = *(void *)&v37[7];
      *(unsigned char *)(v20 + 23) = v15;
      *(float *)(v20 + 24) = v13;
      if (++v12 == 8) {
        return v10 + 32 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 32;
    v10 += 32;
    if (v10 == a2) {
      return 1;
    }
  }
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>(uint64_t a1, long long *a2, float *a3, float *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>((long long *)a1, (float *)a2, a3);
  float result = a4[6];
  if (result < a3[6])
  {
    uint64_t v9 = *((void *)a3 + 2);
    long long v10 = *(_OWORD *)a3;
    uint64_t v11 = *((void *)a4 + 2);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *((void *)a3 + 2) = v11;
    *(_OWORD *)a4 = v10;
    *((void *)a4 + 2) = v9;
    *(float *)&long long v10 = a3[6];
    a3[6] = a4[6];
    *((_DWORD *)a4 + 6) = v10;
    float result = a3[6];
    if (result < *((float *)a2 + 6))
    {
      uint64_t v12 = *((void *)a2 + 2);
      long long v13 = *a2;
      uint64_t v14 = *((void *)a3 + 2);
      *a2 = *(_OWORD *)a3;
      *((void *)a2 + 2) = v14;
      *(_OWORD *)a3 = v13;
      *((void *)a3 + 2) = v12;
      LODWORD(v13) = *((_DWORD *)a2 + 6);
      *((float *)a2 + 6) = a3[6];
      *((_DWORD *)a3 + 6) = v13;
      float result = *((float *)a2 + 6);
      if (result < *(float *)(a1 + 24))
      {
        uint64_t v15 = *(void *)(a1 + 16);
        long long v16 = *(_OWORD *)a1;
        uint64_t v17 = *((void *)a2 + 2);
        *(_OWORD *)a1 = *a2;
        *(void *)(a1 + 16) = v17;
        *a2 = v16;
        *((void *)a2 + 2) = v15;
        float result = *(float *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
        *((float *)a2 + 6) = result;
      }
    }
  }
  return result;
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<std::string &,unsigned int &,unsigned int &,unsigned int &,double &,BOOL &,BOOL,std::string &>(uint64_t *a1, uint64_t a2, int *a3, int *a4, int *a5, double *a6, unsigned __int8 *a7, unsigned __int8 *a8, long long *a9)
{
  uint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) > 0x124924924924924) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v11) {
    unint64_t v11 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492) {
    unint64_t v19 = 0x124924924924924;
  }
  else {
    unint64_t v19 = v11;
  }
  float v28 = a1 + 2;
  if (v19)
  {
    uint64_t v23 = v10;
    uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), v19);
    uint64_t v10 = v23;
  }
  else
  {
    uint64_t v20 = 0;
  }
  uint64_t v24 = v20;
  long long v25 = (std::string *)&v20[224 * v10];
  float v27 = &v20[224 * v19];
  std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string &,unsigned int &,unsigned int &,unsigned int &,double &,BOOL &,BOOL,std::string &>((uint64_t)(a1 + 2), v25, a2, a3, a4, a5, a6, a7, a8, a9);
  uint64_t v26 = &v25[9].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v24);
  uint64_t v21 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v24);
  return v21;
}

void sub_1B23E606C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string &,unsigned int &,unsigned int &,unsigned int &,double &,BOOL &,BOOL,std::string &>(uint64_t a1, std::string *a2, uint64_t a3, int *a4, int *a5, int *a6, double *a7, unsigned __int8 *a8, unsigned __int8 *a9, long long *a10)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v28 = *(std::string *)a3;
  }
  int v16 = *a4;
  int v17 = *a5;
  int v18 = *a6;
  double v19 = *a7;
  int v20 = *a8;
  int v21 = *a9;
  std::string::basic_string[abi:ne180100]<0>(v26, "");
  memset(v25, 0, sizeof(v25));
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  float v22 = v19;
  quasar::Token::Token(a2, (long long *)&v28, v16, v17, v18, v20 != 0, v21 != 0, a10, v22, (long long *)v26, v25, 0, (long long *)__p, 0, 0);
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v25;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void sub_1B23E61D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  std::string __p = &a20;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::KeywordFinder::KeywordLoggingStats>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::KeywordFinder::KeywordLoggingStats>,std::reverse_iterator<quasar::KeywordFinder::KeywordLoggingStats*>,std::reverse_iterator<quasar::KeywordFinder::KeywordLoggingStats*>,std::reverse_iterator<quasar::KeywordFinder::KeywordLoggingStats*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::KeywordFinder::KeywordLoggingStats>,std::reverse_iterator<quasar::KeywordFinder::KeywordLoggingStats*>,std::reverse_iterator<quasar::KeywordFinder::KeywordLoggingStats*>,std::reverse_iterator<quasar::KeywordFinder::KeywordLoggingStats*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  double v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 56);
      *(void *)(v7 - 40) = *(void *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v8;
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(v7 - 32) = *(void *)(a3 - 32);
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 56;
      *((void *)&v14 + 1) -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::KeywordFinder::KeywordLoggingStats>,std::reverse_iterator<quasar::KeywordFinder::KeywordLoggingStats*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::KeywordFinder::KeywordLoggingStats>,std::reverse_iterator<quasar::KeywordFinder::KeywordLoggingStats*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::KeywordFinder::KeywordLoggingStats>,std::reverse_iterator<quasar::KeywordFinder::KeywordLoggingStats*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::KeywordFinder::KeywordLoggingStats>,std::reverse_iterator<quasar::KeywordFinder::KeywordLoggingStats*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::KeywordFinder::KeywordLoggingStats>::destroy[abi:ne180100](v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::KeywordFinder::KeywordLoggingStats>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::KeywordFinder::KeywordLoggingStats>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 56;
    std::allocator<quasar::KeywordFinder::KeywordLoggingStats>::destroy[abi:ne180100](v4, i - 56);
  }
}

uint64_t std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::KeywordFinder::KeywordLocationLoggingStats>,std::reverse_iterator<quasar::KeywordFinder::KeywordLocationLoggingStats*>,std::reverse_iterator<quasar::KeywordFinder::KeywordLocationLoggingStats*>,std::reverse_iterator<quasar::KeywordFinder::KeywordLocationLoggingStats*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::KeywordFinder::KeywordLocationLoggingStats>,std::reverse_iterator<quasar::KeywordFinder::KeywordLocationLoggingStats*>,std::reverse_iterator<quasar::KeywordFinder::KeywordLocationLoggingStats*>,std::reverse_iterator<quasar::KeywordFinder::KeywordLocationLoggingStats*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      long long v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::KeywordFinder::KeywordLocationLoggingStats>,std::reverse_iterator<quasar::KeywordFinder::KeywordLocationLoggingStats*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::KeywordFinder::KeywordLocationLoggingStats>,std::reverse_iterator<quasar::KeywordFinder::KeywordLocationLoggingStats*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,long long,long long,float>>,std::reverse_iterator<std::tuple<std::string,long long,long long,float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

double kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::WordMultiVecComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  *(_OWORD *)(a1 + 56) = xmmword_1B255E480;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = &unk_1F0A4C078;
  *(void *)(a1 + 88) = &unk_1F0A4C1A8;
  *(_DWORD *)(a1 + 96) = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 352) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(void *)(a1 + 400) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 1065353216;
  *(unsigned char *)(a1 + 460) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 529) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  return result;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::WordMultiVecComponent(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  *(_OWORD *)(a1 + 56) = xmmword_1B255E480;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = &unk_1F0A4C078;
  *(void *)(a1 + 88) = &unk_1F0A4C1A8;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 104), *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 128), *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 2);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 152), *(const void **)(a2 + 152), *(void *)(a2 + 160), (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 2);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  int v4 = *(_DWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 200) = v4;
  uint64_t v5 = (char **)(a1 + 256);
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 352) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(void *)(a1 + 400) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 440) = 0;
  *(void *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  int v6 = *(unsigned __int8 *)(a2 + 460);
  *(unsigned char *)(a1 + 460) = v6;
  if (v6 && *(int *)(a1 + 96) >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(a2 + 256) + 8 * v7);
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
      uint64_t v10 = v9;
      char v12 = *(uint64_t **)(a1 + 264);
      unint64_t v11 = *(void *)(a1 + 272);
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v5) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v5;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          int v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 272, v17);
        }
        else {
          int v18 = 0;
        }
        double v19 = (uint64_t *)&v18[8 * v14];
        *double v19 = v10;
        long long v13 = v19 + 1;
        int v21 = *(char **)(a1 + 256);
        int v20 = *(char **)(a1 + 264);
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--double v19 = v22;
          }
          while (v20 != v21);
          int v20 = *v5;
        }
        *(void *)(a1 + 256) = v19;
        *(void *)(a1 + 264) = v13;
        *(void *)(a1 + 272) = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *char v12 = v9;
        long long v13 = v12 + 1;
      }
      *(void *)(a1 + 264) = v13;
      ++v7;
    }
    while (v7 < *(int *)(a1 + 96));
  }
  if (a1 != a2)
  {
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 280, *(int32x2_t **)(a2 + 280), *(int32x2_t **)(a2 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 288) - *(void *)(a2 + 280)) >> 4));
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 304, *(int32x2_t **)(a2 + 304), *(int32x2_t **)(a2 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 312) - *(void *)(a2 + 304)) >> 4));
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 328, *(int32x2_t **)(a2 + 328), *(int32x2_t **)(a2 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 336) - *(void *)(a2 + 328)) >> 4));
  }
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 352), (int32x2_t *)(a2 + 352));
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 400), (int32x2_t *)(a2 + 400));
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  *(_DWORD *)(a1 + 452) = *(_DWORD *)(a2 + 452);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a2 + 464);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 208), (uint64_t)(*(void *)(a2 + 216) - *(void *)(a2 + 208)) >> 3);
  if (*(void *)(a1 + 216) != *(void *)(a1 + 208)) {
    kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::ConstructMatrixObject<kaldi::CuMatrixBase<float>>();
  }
  if (*(void *)(a2 + 480) != *(void *)(a2 + 472)) {
    kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 472));
  }
  *(unsigned char *)(a1 + 544) = *(unsigned char *)(a2 + 544);
  return a1;
}

void sub_1B23E6BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, quasar::Bitmap *a13, kaldi::nnet1::QuantizerResidualAggregator *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v22 = *a10;
  if (*a10)
  {
    *((void *)v20 + 20) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *a11;
  if (*a11)
  {
    *((void *)v20 + 17) = v23;
    operator delete(v23);
  }
  char v24 = *a12;
  if (*a12)
  {
    *((void *)v20 + 14) = v24;
    operator delete(v24);
  }
  quasar::Bitmap::~Bitmap(a13);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v20);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::ConstructMatrixObject<kaldi::CuMatrixBase<float>>()
{
}

void sub_1B23E6D48(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((void *)a1);
  if (*(unsigned char *)(a1 + 460))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "Not implemented yet when transforms are used");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  if (*(void *)(a1 + 216) != *(void *)(a1 + 208))
  {
    unint64_t v4 = 0;
    do
      kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(void *)(*(void *)(a1 + 232) + 8 * v4++));
    while (v4 < (uint64_t)(*(void *)(a1 + 216) - *(void *)(a1 + 208)) >> 3);
  }
}

void *kaldi::DeletePointers<kaldi::nnet1::UpdatableComponent>(void *result)
{
  uint64_t v1 = (void **)*result;
  uint64_t v2 = (void **)result[1];
  while (v1 != v2)
  {
    double result = *v1;
    if (*v1)
    {
      double result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      *uint64_t v1 = 0;
    }
    ++v1;
  }
  return result;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::~WordMultiVecComponent(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A4C078;
  uint64_t v2 = (quasar::Bitmap *)(a1 + 88);
  *(void *)(a1 + 88) = &unk_1F0A4C1A8;
  kaldi::DeletePointers<kaldi::nnet1::UpdatableComponent>((void *)(a1 + 256));
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 472));
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 400);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 352);
  uint64_t v8 = (void **)(a1 + 328);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 304);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 280);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v3 = *(void **)(a1 + 256);
  if (v3)
  {
    *(void *)(a1 + 264) = v3;
    operator delete(v3);
  }
  uint64_t v8 = (void **)(a1 + 232);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 208);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  unint64_t v4 = *(void **)(a1 + 176);
  if (v4)
  {
    *(void *)(a1 + 184) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 152);
  if (v5)
  {
    *(void *)(a1 + 160) = v5;
    operator delete(v5);
  }
  int v6 = *(void **)(a1 + 128);
  if (v6)
  {
    *(void *)(a1 + 136) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 104);
  if (v7)
  {
    *(void *)(a1 + 112) = v7;
    operator delete(v7);
  }
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  uint64_t vars8;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::~WordMultiVecComponent(a1);
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::~WordMultiVecComponent(uint64_t a1)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::~WordMultiVecComponent(a1 - 88);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Copy()
{
}

void sub_1B23E706C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C404CB298AFLL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::CopyCompressed()
{
}

void sub_1B23E70D8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C404CB298AFLL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::CopyCompressed()
{
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v126 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v125);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 448), &v124);
  char v105 = 0;
  int v123 = -1;
  *(unsigned char *)(a1 + 460) = 1;
  memset(v122, 0, sizeof(v122));
  size_t v106 = (std::vector<unsigned int> *)(a1 + 176);
  char v107 = (std::vector<unsigned int> *)(a1 + 104);
  unint64_t v108 = (std::vector<unsigned int> *)(a1 + 152);
  int v6 = (int *)(a1 + 96);
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_193;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v122);
    if ((SHIBYTE(v122[2]) & 0x80000000) == 0) {
      break;
    }
    uint64_t v8 = v122[1];
    switch((unint64_t)v122[1])
    {
      case 9uLL:
        BOOL v7 = *(void *)v122[0] == 0x6461724778614D3CLL && *((unsigned char *)v122[0] + 8) == 62;
LABEL_12:
        uint64_t v9 = (float *)(a1 + 452);
        if (!v7) {
          goto LABEL_270;
        }
        goto LABEL_164;
      case 0xAuLL:
        if (*(void *)v122[0] != 0x6D65744978614D3CLL || *((_WORD *)v122[0] + 4) != 15987) {
          goto LABEL_270;
        }
LABEL_109:
        std::string __p = 0;
        uint64_t v118 = 0;
        uint64_t v119 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p);
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, (std::vector<unsigned int> *)(a1 + 128));
        goto LABEL_179;
      case 0xBuLL:
        BOOL v28 = *(void *)v122[0] == 0x756F72476D754E3CLL && *(void *)((char *)v122[0] + 3) == 0x3E7370756F72476DLL;
        int v18 = (int *)(a1 + 96);
        if (!v28)
        {
          BOOL v19 = *(void *)v122[0] == 0x6C6261546D754E3CLL && *(void *)((char *)v122[0] + 3) == 0x3E73656C6261546DLL;
LABEL_96:
          int v18 = (int *)(a1 + 200);
          if (!v19) {
            goto LABEL_270;
          }
        }
        goto LABEL_177;
      case 0xCuLL:
        if (*(void *)v122[0] == 0x536D6F646E61523CLL && *((_DWORD *)v122[0] + 2) == 1046766949)
        {
LABEL_176:
          int v18 = &v123;
LABEL_177:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v18);
          goto LABEL_181;
        }
        if (*(void *)v122[0] != 0x69536261636F563CLL || *((_DWORD *)v122[0] + 2) != 1047750010) {
          goto LABEL_187;
        }
LABEL_157:
        std::string __p = 0;
        uint64_t v118 = 0;
        uint64_t v119 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p);
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v107);
        goto LABEL_179;
      case 0xDuLL:
        if (*(void *)v122[0] != 0x74536D617261503CLL || *(void *)((char *)v122[0] + 5) != 0x3E7665646474536DLL) {
          goto LABEL_270;
        }
LABEL_163:
        uint64_t v9 = (float *)&v126;
LABEL_164:
        kaldi::ReadBasicType<float>(a2, 0, v9);
        goto LABEL_181;
      case 0xFuLL:
        BOOL v29 = *(void *)v122[0] == 0x61526E7261654C3CLL && *(void *)((char *)v122[0] + 7) == 0x3E66656F43657461;
        uint64_t v9 = (float *)(a1 + 456);
        if (!v29) {
          goto LABEL_118;
        }
        goto LABEL_164;
      case 0x11uLL:
        if (*(void *)v122[0] == 0x69446465626D453CLL
          && *((void *)v122[0] + 1) == 0x736E6F69736E656DLL
          && *((unsigned char *)v122[0] + 16) == 62)
        {
LABEL_59:
          std::string __p = 0;
          uint64_t v118 = 0;
          uint64_t v119 = 0;
          kaldi::ReadToken(a2, 0, (uint64_t)&__p);
          kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v108);
          goto LABEL_179;
        }
        if (v122[1] == (void *)15)
        {
LABEL_118:
          if (*(void *)v122[0] == 0x656E67697373413CLL && *(void *)((char *)v122[0] + 7) == 0x3E656C6261546465)
          {
LABEL_178:
            std::string __p = 0;
            uint64_t v118 = 0;
            uint64_t v119 = 0;
            kaldi::ReadToken(a2, 0, (uint64_t)&__p);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v106);
LABEL_179:
            if (SHIBYTE(v119) < 0) {
              operator delete(__p);
            }
            goto LABEL_181;
          }
LABEL_122:
          uint64_t v8 = v122[1];
        }
LABEL_123:
        if (v8 == (void *)20)
        {
          if (*(void *)v122[0] == 0x6C616974696E493CLL
            && *((void *)v122[0] + 1) == 0x6E6F436F54657A69
            && *((_DWORD *)v122[0] + 4) == 1047814499)
          {
LABEL_175:
            char v105 = 1;
            goto LABEL_181;
          }
          uint64_t v8 = v122[1];
        }
        if (v8 != (void *)14) {
          goto LABEL_186;
        }
        if (*(void *)v122[0] != 0x6E6172546573553CLL || *(void *)((char *)v122[0] + 6) != 0x3E6D726F66736E61)
        {
LABEL_185:
          uint64_t v8 = v122[1];
LABEL_186:
          if (v8 == (void *)12)
          {
LABEL_187:
            float v45 = (void **)v122[0];
            goto LABEL_188;
          }
LABEL_270:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          uint64_t v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
          if (SHIBYTE(v122[2]) >= 0) {
            long long v100 = v122;
          }
          else {
            long long v100 = (void **)v122[0];
          }
          if (SHIBYTE(v122[2]) >= 0) {
            uint64_t v101 = HIBYTE(v122[2]);
          }
          else {
            uint64_t v101 = (uint64_t)v122[1];
          }
          long long v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)v100, v101);
          uint64_t v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)", a typo in config? ", 20);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"(NumGroups|VocabSizes|MaxDimensions|EmbedDimensions|LearnRateCoef|ParamStddev|RandomSeed|InitTransformType|GradientNormType|MaxGrad)", 132);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
LABEL_138:
        kaldi::ReadBasicType<BOOL>(a2, 0, (char *)(a1 + 460));
LABEL_181:
        std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
        break;
      case 0x12uLL:
        if (*(void *)v122[0] != 0x6E6569646172473CLL
          || *((void *)v122[0] + 1) != 0x7079546D726F4E74
          || *((_WORD *)v122[0] + 8) != 15973)
        {
          goto LABEL_270;
        }
LABEL_147:
        unint64_t v39 = &v124;
        goto LABEL_174;
      case 0x13uLL:
        if (*(void *)v122[0] != 0x61725474696E493CLL
          || *((void *)v122[0] + 1) != 0x79546D726F66736ELL
          || *(void *)((char *)v122[0] + 11) != 0x3E657079546D726FLL)
        {
          goto LABEL_270;
        }
LABEL_173:
        unint64_t v39 = &v125;
LABEL_174:
        kaldi::ReadToken(a2, 0, (uint64_t)v39);
        goto LABEL_181;
      default:
        goto LABEL_123;
    }
  }
  switch(HIBYTE(v122[2]))
  {
    case 9:
      BOOL v7 = v122[0] == (void *)0x6461724778614D3CLL && LOBYTE(v122[1]) == 62;
      goto LABEL_12;
    case 0xA:
      if (v122[0] != (void *)0x6D65744978614D3CLL || LOWORD(v122[1]) != 15987) {
        goto LABEL_270;
      }
      goto LABEL_109;
    case 0xB:
      BOOL v17 = v122[0] == (void *)0x756F72476D754E3CLL && *(void **)((char *)v122 + 3) == (void *)0x3E7370756F72476DLL;
      int v18 = (int *)(a1 + 96);
      if (v17) {
        goto LABEL_177;
      }
      BOOL v19 = v122[0] == (void *)0x6C6261546D754E3CLL && *(void **)((char *)v122 + 3) == (void *)0x3E73656C6261546DLL;
      goto LABEL_96;
    case 0xC:
      if (v122[0] == (void *)0x536D6F646E61523CLL && LODWORD(v122[1]) == 1046766949) {
        goto LABEL_176;
      }
      if (v122[0] != (void *)0x69536261636F563CLL || LODWORD(v122[1]) != 1047750010) {
        goto LABEL_184;
      }
      goto LABEL_157;
    case 0xD:
      if (v122[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v122 + 5) != (void *)0x3E7665646474536DLL) {
        goto LABEL_270;
      }
      goto LABEL_163;
    case 0xE:
      goto LABEL_84;
    case 0xF:
      BOOL v25 = v122[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v122 + 7) == (void *)0x3E66656F43657461;
      uint64_t v9 = (float *)(a1 + 456);
      if (v25) {
        goto LABEL_164;
      }
      if (v122[0] == (void *)0x656E67697373413CLL && *(void **)((char *)v122 + 7) == (void *)0x3E656C6261546465) {
        goto LABEL_178;
      }
      if ((HIBYTE(v122[2]) & 0x80) != 0) {
        goto LABEL_122;
      }
LABEL_83:
      if (HIBYTE(v122[2]) != 14) {
        goto LABEL_183;
      }
LABEL_84:
      if (v122[0] == (void *)0x6E6172546573553CLL && *(void **)((char *)v122 + 6) == (void *)0x3E6D726F66736E61) {
        goto LABEL_138;
      }
      if ((HIBYTE(v122[2]) & 0x80) != 0) {
        goto LABEL_185;
      }
LABEL_183:
      if (HIBYTE(v122[2]) != 12) {
        goto LABEL_270;
      }
LABEL_184:
      float v45 = v122;
      break;
    case 0x11:
      if (v122[0] != (void *)0x69446465626D453CLL || v122[1] != (void *)0x736E6F69736E656DLL || LOBYTE(v122[2]) != 62) {
        goto LABEL_270;
      }
      goto LABEL_59;
    case 0x12:
      if (v122[0] != (void *)0x6E6569646172473CLL
        || v122[1] != (void *)0x7079546D726F4E74
        || LOWORD(v122[2]) != 15973)
      {
        goto LABEL_270;
      }
      goto LABEL_147;
    case 0x13:
      if (v122[0] != (void *)0x61725474696E493CLL
        || v122[1] != (void *)0x79546D726F66736ELL
        || *(void **)((char *)&v122[1] + 3) != (void *)0x3E657079546D726FLL)
      {
        goto LABEL_270;
      }
      goto LABEL_173;
    case 0x14:
      if (v122[0] != (void *)0x6C616974696E493CLL
        || v122[1] != (void *)0x6E6F436F54657A69
        || LODWORD(v122[2]) != 1047814499)
      {
        goto LABEL_83;
      }
      goto LABEL_175;
    default:
      goto LABEL_270;
  }
LABEL_188:
  float v46 = *v45;
  uint64_t v47 = *((unsigned int *)v45 + 2);
  if (v46 != (void *)0x6E6F706D6F432F3CLL || v47 != 1047817829) {
    goto LABEL_270;
  }
LABEL_193:
  long long v49 = (char **)(a1 + 256);
  kaldi::DeletePointers<kaldi::nnet1::UpdatableComponent>((void *)(a1 + 256));
  if (*(unsigned char *)(a1 + 460))
  {
    if (*v6 >= 1)
    {
      int v50 = 0;
      do
      {
        unint64_t v110 = 0;
        uint64_t v111 = 0;
        uint64_t v112 = 0;
        LODWORD(v114) = 0;
        LODWORD(v109) = 0;
        kaldi::ExpectToken(a2, 0, "<FeatureTransform>");
        kaldi::ReadToken(a2, 0, (uint64_t)&v110);
        uint64_t v51 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v110);
        kaldi::ExpectToken(a2, 0, "<InputDim>");
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v114);
        kaldi::ExpectToken(a2, 0, "<OutputDim>");
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v109);
        kaldi::nnet1::Component::NewComponentOfType(v51);
        if (!v52
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          unint64_t v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"require an updatable component, you used ", 41);
          if (v112 >= 0) {
            unint64_t v97 = &v110;
          }
          else {
            unint64_t v97 = v110;
          }
          if (v112 >= 0) {
            uint64_t v98 = HIBYTE(v112);
          }
          else {
            uint64_t v98 = v111;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)v97, v98);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
        float v54 = v53;
        (*(void (**)(void *, uint64_t *, kaldi::UniformRandomNumber *))(*(void *)v53 + 96))(v53, a2, a3);
        float v56 = *(void **)(a1 + 264);
        unint64_t v55 = *(void *)(a1 + 272);
        if ((unint64_t)v56 >= v55)
        {
          uint64_t v58 = ((char *)v56 - *v49) >> 3;
          if ((unint64_t)(v58 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v59 = v55 - (void)*v49;
          uint64_t v60 = v59 >> 2;
          if (v59 >> 2 <= (unint64_t)(v58 + 1)) {
            uint64_t v60 = v58 + 1;
          }
          if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v61 = v60;
          }
          if (v61) {
            long long v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 272, v61);
          }
          else {
            long long v62 = 0;
          }
          float v63 = &v62[8 * v58];
          *(void *)float v63 = v54;
          float v57 = v63 + 8;
          long long v65 = *(char **)(a1 + 256);
          uint64_t v64 = *(char **)(a1 + 264);
          if (v64 != v65)
          {
            do
            {
              uint64_t v66 = *((void *)v64 - 1);
              v64 -= 8;
              *((void *)v63 - 1) = v66;
              v63 -= 8;
            }
            while (v64 != v65);
            uint64_t v64 = *v49;
          }
          *(void *)(a1 + 256) = v63;
          *(void *)(a1 + 264) = v57;
          *(void *)(a1 + 272) = &v62[8 * v61];
          if (v64) {
            operator delete(v64);
          }
        }
        else
        {
          *float v56 = v54;
          float v57 = v56 + 1;
        }
        *(void *)(a1 + 264) = v57;
        if (SHIBYTE(v112) < 0) {
          operator delete(v110);
        }
        ++v50;
      }
      while (v50 < *v6);
    }
    if (v105)
    {
      unint64_t v68 = *(uint64_t **)(a1 + 256);
      uint64_t v67 = *(uint64_t **)(a1 + 264);
      if (v68 == v67)
      {
        if (!*(_DWORD *)(*v68 + 12))
        {
LABEL_231:
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"initialized the transform for concatenation", 43);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
          }
          goto LABEL_233;
        }
      }
      else
      {
        int v69 = 0;
        float v70 = *(uint64_t **)(a1 + 256);
        do
        {
          uint64_t v71 = *v70++;
          v69 += *(_DWORD *)(v71 + 8);
        }
        while (v70 != v67);
        if (v69 == *(_DWORD *)(*v68 + 12))
        {
          int v72 = 0;
          do
          {
            uint64_t v73 = (const void *)*v68;
            if (!*v68)
            {
LABEL_277:
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"cannot initialize to concatenation for this transform", 53);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
            }
            if (v74)
            {
              uint64_t v75 = v74;
              kaldi::Matrix<float>::Matrix((uint64_t)&__p, *((unsigned int *)v74 + 3), *((unsigned int *)v74 + 2), 0, 0);
              uint64_t v76 = *((unsigned int *)v75 + 3);
              uint64_t v114 = 0;
              char v115 = 0;
              unint64_t v116 = 0;
              kaldi::Vector<float>::Resize((void **)&v114, v76, 0);
              kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v110, (uint64_t)&__p, v72, *((_DWORD *)v75 + 2), 0, v118);
              kaldi::MatrixBase<float>::AddToDiag((uint64_t)&v110, 1.0);
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v110);
              kaldi::nnet1::AffineTransform::SetLinearity(v75, (int *)&__p);
              kaldi::nnet1::AffineTransform::Bias(v75);
              uint64_t v77 = (void *)kaldi::nnet1::AffineTransform::Bias(v75);
              kaldi::CuVectorBase<float>::CopyFromVec<float>(v77, (uint64_t)&v114);
              unsigned int v78 = *((_DWORD *)v75 + 2);
              kaldi::Vector<float>::Destroy((uint64_t)&v114);
            }
            else
            {
              if (!v79) {
                goto LABEL_277;
              }
              uint64_t v80 = (uint64_t)v79;
              kaldi::Matrix<float>::Matrix((uint64_t)&__p, v79[3], v79[2], 0, 0);
              kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v110, (uint64_t)&__p, v72, *(_DWORD *)(v80 + 8), 0, v118);
              kaldi::MatrixBase<float>::AddToDiag((uint64_t)&v110, 1.0);
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v110);
              kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SetLinearity(v80, (int *)&__p);
              unsigned int v78 = *(_DWORD *)(v80 + 8);
            }
            kaldi::Matrix<float>::~Matrix((uint64_t)&__p);
            v72 += v78;
            ++v68;
          }
          while (v68 != v67);
          goto LABEL_231;
        }
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"dimension mismatch, cannot initialize to concatenation, expected dim is ", 72);
      unint64_t v104 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)" actual dim is ", 15);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
  }
LABEL_233:
  int inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v125);
  *(_DWORD *)(a1 + 448) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v124);
  if (!inited)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"it doesn't make sense to initialize the embedding table as an identify matrix", 77);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  char v115 = 0;
  unint64_t v116 = 0;
  uint64_t v114 = &v115;
  if (*v6 < 1)
  {
    unint64_t v86 = 0;
  }
  else
  {
    uint64_t v82 = 0;
    do
    {
      LODWORD(v110) = 0;
      LODWORD(v110) = v106->__begin_[v82];
      unsigned int v83 = v107->__begin_[v82];
      unsigned int v84 = v108->__begin_[v82];
      std::string __p = &v110;
      char v85 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v114, (int *)&v110, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p);
      *((_DWORD *)v85 + 8) = v83;
      *((_DWORD *)v85 + 9) = v84;
      ++v82;
    }
    while (v82 < *v6);
    unint64_t v86 = v116;
  }
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 208), v86);
  if (v123 >= 1) {
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v123);
  }
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)&__p, a3);
  int v113 = 0;
  if (*(int *)(a1 + 200) >= 1)
  {
    unint64_t v110 = &v113;
    long long v87 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v114, &v113, (uint64_t)&std::piecewise_construct, (_DWORD **)&v110);
    uint64_t v88 = *((unsigned int *)v87 + 8);
    uint64_t v89 = *((unsigned int *)v87 + 9);
    kaldi::Matrix<float>::Matrix((uint64_t)&v110, v88, v89, 0, 0);
    if ((int)v88 < 1) {
LABEL_253:
    }
      kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::ConstructMatrixObject<kaldi::Matrix<float>>();
    int v90 = 0;
    while ((int)v89 < 1)
    {
LABEL_252:
      if (++v90 == v88) {
        goto LABEL_253;
      }
    }
    uint64_t v91 = 0;
    while (inited != 2)
    {
      if (inited == 1)
      {
        float v92 = *(float *)&v126;
        float v93 = (kaldi::UniformRandomNumber::RandUniform(a3, 0) + -0.5) * (float)(v92 + v92);
LABEL_250:
        *((float *)v110 + v90 * (int)v112 + v91) = v93;
      }
      if (v89 == ++v91) {
        goto LABEL_252;
      }
    }
    float v94 = *(float *)&v126;
    kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)&__p, 0);
    float v93 = v94 * v95;
    goto LABEL_250;
  }
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  if (v120)
  {
    float v121 = v120;
    operator delete(v120);
  }
  unint64_t v110 = &v119;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
  std::__tree<int>::destroy((uint64_t)&v114, v115);
  if (SHIBYTE(v122[2]) < 0) {
    operator delete(v122[0]);
  }
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
}

void sub_1B23E8384()
{
}

void sub_1B23E83A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 - 169) < 0) {
    operator delete(*(void **)(v21 - 192));
  }
  if (*(char *)(v21 - 137) < 0) {
    operator delete(*(void **)(v21 - 160));
  }
  if (*(char *)(v21 - 113) < 0) {
    operator delete(*(void **)(v21 - 136));
  }
  _Unwind_Resume(exception_object);
}

void sub_1B23E83C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  JUMPOUT(0x1B23E83CCLL);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::ConstructMatrixObject<kaldi::Matrix<float>>()
{
}

void sub_1B23E84D0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(uint64_t result)
{
  if (!*(unsigned char *)(result + 544))
  {
    uint64_t v1 = *(unsigned int *)(result + 96);
    if ((int)v1 <= 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"must have at least one group, you used ", 39);
      std::ostream::operator<<();
    }
    else
    {
      uint64_t v2 = *(unsigned int *)(result + 200);
      if ((int)v2 <= 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"must have at least one embedding table, you used ", 49);
        std::ostream::operator<<();
      }
      else if (v1 < v2)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are only ", 15);
        float v31 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" groups, but you set ", 21);
        uint64_t v32 = (void *)std::ostream::operator<<();
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v32, " embedding tables");
      }
      else
      {
        uint64_t v3 = *(void *)(result + 104);
        uint64_t v4 = (*(void *)(result + 112) - v3) >> 2;
        if (v4 == v1)
        {
          uint64_t v5 = *(void *)(result + 128);
          if (v4 == (*(void *)(result + 136) - v5) >> 2)
          {
            uint64_t v6 = *(void *)(result + 152);
            if (v4 == (*(void *)(result + 160) - v6) >> 2)
            {
              uint64_t v7 = *(void *)(result + 176);
              if (v4 == (*(void *)(result + 184) - v7) >> 2)
              {
                uint64_t v8 = *(void *)(result + 208);
                if (v2 == (*(void *)(result + 216) - v8) >> 3)
                {
                  if (*(unsigned char *)(result + 460)
                    && v4 != (uint64_t)(*(void *)(result + 264) - *(void *)(result + 256)) >> 3)
                  {
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
                    float v40 = (void *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" groups, but the number of feature transforms is ", 49);
                    std::ostream::operator<<();
                  }
                  else
                  {
                    uint64_t v9 = 0;
                    int v10 = 0;
                    int v11 = 0;
                    do
                    {
                      uint64_t v12 = *(unsigned int *)(v7 + 4 * v9);
                      if ((v12 & 0x80000000) != 0 || (int)v12 >= (int)v2)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        uint64_t v22 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"-th group has assigned table index ", 35);
                        uint64_t v23 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" , the number of tables is ", 27);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      int v13 = *(_DWORD *)(v3 + 4 * v9);
                      if (v13 <= 0)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        BOOL v25 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"-th group has invalid vocab size ", 33);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      int v14 = *(_DWORD *)(v5 + 4 * v9);
                      if (v14 <= 0)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        uint64_t v26 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"-th group has invalid max item value ", 37);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      int v15 = *(_DWORD *)(v6 + 4 * v9);
                      if (v15 <= 0)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        char v24 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"-th group has invalid embedding dimension value ", 48);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      uint64_t v16 = *(void *)(v8 + 8 * v12);
                      if (*(_DWORD *)(v16 + 20) != v13)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        int v20 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"-th group has mismatched embedding table and vocab size ", 56);
                        uint64_t v21 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" vs ", 4);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      if (*(_DWORD *)(v16 + 16) != v15)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        int v18 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"-th group has mismatched embedding table and embedding dim ", 59);
                        BOOL v19 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" vs ", 4);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      if (*(unsigned char *)(result + 460))
                      {
                        uint64_t v17 = *(void *)(*(void *)(result + 256) + 8 * v9);
                        if (v15 != *(_DWORD *)(v17 + 8))
                        {
                          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                          BOOL v29 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"-th group has mismatched embedding table and feature transform ", 63);
                          long long v30 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" vs ", 4);
                          std::ostream::operator<<();
                          goto LABEL_35;
                        }
                        if (*(_DWORD *)(result + 12) != *(_DWORD *)(v17 + 12))
                        {
                          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                          char v27 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"-th group has feature transform output dim ", 43);
                          BOOL v28 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" does not match component output dim ", 37);
                          std::ostream::operator<<();
                          goto LABEL_35;
                        }
                      }
                      v10 += v15;
                      v11 += v14;
                      ++v9;
                    }
                    while (v4 != v9);
                    if (*(_DWORD *)(result + 8) == v11)
                    {
                      if (*(unsigned char *)(result + 460) || v10 == *(_DWORD *)(result + 12))
                      {
                        *(unsigned char *)(result + 544) = 1;
                        return result;
                      }
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Total embedding size of ", 24);
                      char v41 = (void *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" doesn't match the component output size of ", 44);
                      size_t v42 = (void *)std::ostream::operator<<();
                      std::operator<<[abi:ne180100]<std::char_traits<char>>(v42, " when transforms are not used");
                    }
                    else
                    {
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"input dim of the component is ", 30);
                      unint64_t v39 = (void *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" , while the input dim defined in max items is ", 47);
                      std::ostream::operator<<();
                    }
                  }
                }
                else
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the actual number of embedding tables is ", 41);
                  float v38 = (void *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" and different than ", 20);
                  std::ostream::operator<<();
                }
              }
              else
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
                long long v36 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" groups, but ", 13);
                unint64_t v37 = (void *)std::ostream::operator<<();
                std::operator<<[abi:ne180100]<std::char_traits<char>>(v37, " groups have assigned tables");
              }
            }
            else
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
              uint64_t v35 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" groups, but the embedding dim list size is ", 44);
              std::ostream::operator<<();
            }
          }
          else
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
            float v34 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" groups, but the max item list size is ", 39);
            std::ostream::operator<<();
          }
        }
        else
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
          long long v33 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" groups, but the number vocab list size is ", 43);
          std::ostream::operator<<();
        }
      }
    }
LABEL_35:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43);
  }
  return result;
}

void sub_1B23E8D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  long long v70 = 0uLL;
  uint64_t v71 = 0;
  uint64_t v8 = (char *)(a1 + 460);
  *(unsigned char *)(a1 + 460) = 1;
  uint64_t v9 = (float *)(a1 + 452);
  float v63 = (std::vector<unsigned int> *)(a1 + 176);
  uint64_t v64 = (float *)(a1 + 456);
  long long v62 = (std::vector<unsigned int> *)(a1 + 152);
  long long v65 = (std::vector<unsigned int> *)(a1 + 104);
  uint64_t v66 = (std::vector<unsigned int> *)(a1 + 128);
  int v10 = (int *)(a1 + 200);
  int v11 = (int *)(a1 + 96);
  while (kaldi::Peek(a2, a3) == 60)
  {
    kaldi::ReadToken(a2, a3, (uint64_t)&v70);
    if (SHIBYTE(v71) < 0)
    {
      uint64_t v16 = *((void *)&v70 + 1);
      if (*((void *)&v70 + 1) != 11) {
        goto LABEL_25;
      }
      BOOL v17 = *(void *)v70 == 0x756F72476D754E3CLL && *(void *)(v70 + 3) == 0x3E7370756F72476DLL;
      uint64_t v14 = (uint64_t)v11;
      if (v17
        || (*(void *)v70 == 0x6C6261546D754E3CLL ? (BOOL v18 = *(void *)(v70 + 3) == 0x3E73656C6261546DLL) : (BOOL v18 = 0),
            uint64_t v14 = (uint64_t)v10,
            v18))
      {
LABEL_75:
        kaldi::ReadBasicType<int>(a2, a3, v14);
      }
      else
      {
        uint64_t v16 = *((void *)&v70 + 1);
LABEL_25:
        if (v16 == 12)
        {
          if (*(void *)v70 == 0x69536261636F563CLL && *(_DWORD *)(v70 + 8) == 1047750010)
          {
LABEL_94:
            std::string __p = 0;
            uint64_t v68 = 0;
            uint64_t v69 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v65);
            goto LABEL_137;
          }
          uint64_t v16 = *((void *)&v70 + 1);
        }
        if (v16 != 10) {
          goto LABEL_37;
        }
        if (*(void *)v70 == 0x6D65744978614D3CLL && *(_WORD *)(v70 + 8) == 15987)
        {
LABEL_93:
          std::string __p = 0;
          uint64_t v68 = 0;
          uint64_t v69 = 0;
          kaldi::ReadToken(a2, a3, (uint64_t)&__p);
          kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v66);
LABEL_137:
          if (SHIBYTE(v69) < 0) {
            operator delete(__p);
          }
        }
        else
        {
          uint64_t v16 = *((void *)&v70 + 1);
LABEL_37:
          if (v16 == 17)
          {
            if (*(void *)v70 == 0x69446465626D453CLL
              && *(void *)(v70 + 8) == 0x736E6F69736E656DLL
              && *(unsigned char *)(v70 + 16) == 62)
            {
LABEL_135:
              std::string __p = 0;
              uint64_t v68 = 0;
              uint64_t v69 = 0;
              kaldi::ReadToken(a2, a3, (uint64_t)&__p);
              kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v62);
              goto LABEL_137;
            }
            uint64_t v16 = *((void *)&v70 + 1);
          }
          if (v16 != 15) {
            goto LABEL_52;
          }
          if (*(void *)v70 == 0x656E67697373413CLL && *(void *)(v70 + 7) == 0x3E656C6261546465)
          {
LABEL_134:
            std::string __p = 0;
            uint64_t v68 = 0;
            uint64_t v69 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v63);
            goto LABEL_137;
          }
          uint64_t v16 = *((void *)&v70 + 1);
LABEL_52:
          if (v16 != 18) {
            goto LABEL_61;
          }
          if (*(void *)v70 == 0x6E6569646172473CLL
            && *(void *)(v70 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v70 + 16) == 15973)
          {
LABEL_136:
            std::string __p = 0;
            uint64_t v68 = 0;
            uint64_t v69 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p);
            *(_DWORD *)(a1 + 448) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&__p);
            goto LABEL_137;
          }
          uint64_t v16 = *((void *)&v70 + 1);
LABEL_61:
          if (v16 == 9)
          {
            BOOL v26 = *(void *)v70 == 0x6461724778614D3CLL && *(unsigned char *)(v70 + 8) == 62;
            char v27 = v9;
            if (v26) {
              goto LABEL_92;
            }
            uint64_t v16 = *((void *)&v70 + 1);
          }
          if (v16 == 15)
          {
            BOOL v28 = *(void *)v70 == 0x61526E7261654C3CLL && *(void *)(v70 + 7) == 0x3E66656F43657461;
            char v27 = v64;
            if (v28) {
              goto LABEL_92;
            }
            uint64_t v16 = *((void *)&v70 + 1);
          }
          if (v16 != 14) {
            goto LABEL_167;
          }
          uint64_t v12 = (uint64_t *)v70;
LABEL_128:
          uint64_t v38 = *v12;
          uint64_t v39 = *(uint64_t *)((char *)v12 + 6);
          if (v38 != 0x6E6172546573553CLL || v39 != 0x3E6D726F66736E61) {
            goto LABEL_167;
          }
          kaldi::ReadBasicType<BOOL>(a2, a3, v8);
        }
      }
    }
    else
    {
      uint64_t v12 = (uint64_t *)&v70;
      switch(HIBYTE(v71))
      {
        case 9:
          goto LABEL_87;
        case 0xA:
          goto LABEL_82;
        case 0xB:
          BOOL v13 = (void)v70 == 0x756F72476D754E3CLL && *(void *)((char *)&v70 + 3) == 0x3E7370756F72476DLL;
          uint64_t v14 = (uint64_t)v11;
          if (!v13)
          {
            BOOL v15 = (void)v70 == 0x6C6261546D754E3CLL && *(void *)((char *)&v70 + 3) == 0x3E73656C6261546DLL;
            uint64_t v14 = (uint64_t)v10;
            if (!v15) {
              goto LABEL_80;
            }
          }
          goto LABEL_75;
        case 0xC:
          if ((void)v70 == 0x69536261636F563CLL && DWORD2(v70) == 1047750010) {
            goto LABEL_94;
          }
LABEL_80:
          if (HIBYTE(v71) == 9) {
            goto LABEL_87;
          }
          if (HIBYTE(v71) != 10) {
            goto LABEL_167;
          }
LABEL_82:
          if ((void)v70 == 0x6D65744978614D3CLL && WORD4(v70) == 15987) {
            goto LABEL_93;
          }
LABEL_86:
          if (HIBYTE(v71) == 9) {
            goto LABEL_87;
          }
          goto LABEL_167;
        case 0xE:
          goto LABEL_128;
        case 0xF:
          goto LABEL_115;
        case 0x11:
          if ((void)v70 == 0x69446465626D453CLL
            && *((void *)&v70 + 1) == 0x736E6F69736E656DLL
            && v71 == 62)
          {
            goto LABEL_135;
          }
          if (HIBYTE(v71) == 9) {
            goto LABEL_87;
          }
          if (HIBYTE(v71) == 14) {
            goto LABEL_127;
          }
          if (HIBYTE(v71) != 15) {
            goto LABEL_167;
          }
LABEL_115:
          if ((void)v70 == 0x656E67697373413CLL && *(void *)((char *)&v70 + 7) == 0x3E656C6261546465) {
            goto LABEL_134;
          }
          switch(HIBYTE(v71))
          {
            case 9u:
LABEL_87:
              BOOL v31 = (void)v70 == 0x6461724778614D3CLL && BYTE8(v70) == 62;
              char v27 = v9;
              if (!v31) {
                goto LABEL_167;
              }
              break;
            case 0xEu:
LABEL_127:
              uint64_t v12 = (uint64_t *)&v70;
              goto LABEL_128;
            case 0xFu:
LABEL_122:
              BOOL v37 = (void)v70 == 0x61526E7261654C3CLL && *(void *)((char *)&v70 + 7) == 0x3E66656F43657461;
              char v27 = v64;
              if (!v37)
              {
LABEL_167:
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
                uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
                if (v71 >= 0) {
                  uint64_t v59 = &v70;
                }
                else {
                  uint64_t v59 = (long long *)v70;
                }
                if (v71 >= 0) {
                  uint64_t v60 = HIBYTE(v71);
                }
                else {
                  uint64_t v60 = *((void *)&v70 + 1);
                }
                unint64_t v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)v59, v60);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)", a typo in config? (NumGroups|VocabSizes|MaxDimensions|EmbedDimensions|LearnRateCoef)", 86);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
              }
              break;
            default:
              goto LABEL_167;
          }
          return;
        case 0x12:
          if ((void)v70 == 0x6E6569646172473CLL
            && *((void *)&v70 + 1) == 0x7079546D726F4E74
            && (unsigned __int16)v71 == 15973)
          {
            goto LABEL_136;
          }
          if (HIBYTE(v71) == 15) {
            goto LABEL_122;
          }
          if (HIBYTE(v71) == 14) {
            goto LABEL_127;
          }
          goto LABEL_86;
        default:
          goto LABEL_167;
      }
LABEL_92:
      kaldi::ReadBasicType<float>(a2, a3, v27);
    }
  }
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 208), *(int *)(a1 + 200));
  if (*v10 >= 1) {
    operator new();
  }
  kaldi::ExpectToken(a2, a3, "</Component>");
  char v41 = (char **)(a1 + 256);
  kaldi::DeletePointers<kaldi::nnet1::UpdatableComponent>((void *)(a1 + 256));
  if (*(unsigned char *)(a1 + 460) && *v11 >= 1)
  {
    int v42 = 0;
    do
    {
      kaldi::ExpectToken(a2, a3, "<FeatureTransform>");
      float v43 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
      if (!v43
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"failed to read feature transform", 32);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      float v45 = v44;
      kaldi::ExpectToken(a2, a3, "</Component>");
      uint64_t v47 = *(void **)(a1 + 264);
      unint64_t v46 = *(void *)(a1 + 272);
      if ((unint64_t)v47 >= v46)
      {
        uint64_t v49 = ((char *)v47 - *v41) >> 3;
        if ((unint64_t)(v49 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v50 = v46 - (void)*v41;
        uint64_t v51 = v50 >> 2;
        if (v50 >> 2 <= (unint64_t)(v49 + 1)) {
          uint64_t v51 = v49 + 1;
        }
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v52 = v51;
        }
        if (v52) {
          long long v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 272, v52);
        }
        else {
          long long v53 = 0;
        }
        float v54 = &v53[8 * v49];
        *(void *)float v54 = v45;
        long long v48 = v54 + 8;
        float v56 = *(char **)(a1 + 256);
        unint64_t v55 = *(char **)(a1 + 264);
        if (v55 != v56)
        {
          do
          {
            uint64_t v57 = *((void *)v55 - 1);
            v55 -= 8;
            *((void *)v54 - 1) = v57;
            v54 -= 8;
          }
          while (v55 != v56);
          unint64_t v55 = *v41;
        }
        *(void *)(a1 + 256) = v54;
        *(void *)(a1 + 264) = v48;
        *(void *)(a1 + 272) = &v53[8 * v52];
        if (v55) {
          operator delete(v55);
        }
      }
      else
      {
        *uint64_t v47 = v45;
        long long v48 = v47 + 1;
      }
      *(void *)(a1 + 264) = v48;
      ++v42;
    }
    while (v42 < *(_DWORD *)(a1 + 96));
  }
  *(unsigned char *)(a1 + 16) = 0;
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  if (SHIBYTE(v71) < 0) {
    operator delete((void *)v70);
  }
}

void sub_1B23E97CC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::WriteConfig(uint64_t a1, void *a2, uint64_t a3)
{
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  kaldi::WriteToken(a2, a3, "<NumGroups>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<NumTables>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<VocabSizes>");
  kaldi::JoinVectorToString<int>((void *)(a1 + 104), ",", (uint64_t)v7);
  kaldi::WriteToken(a2, a3, (char *)v7);
  kaldi::WriteToken(a2, a3, "<MaxItems>");
  kaldi::JoinVectorToString<int>((void *)(a1 + 128), ",", (uint64_t)v7);
  kaldi::WriteToken(a2, a3, (char *)v7);
  kaldi::WriteToken(a2, a3, "<EmbedDimensions>");
  kaldi::JoinVectorToString<int>((void *)(a1 + 152), ",", (uint64_t)v7);
  kaldi::WriteToken(a2, a3, (char *)v7);
  kaldi::WriteToken(a2, a3, "<AssignedTable>");
  kaldi::JoinVectorToString<int>((void *)(a1 + 176), ",", (uint64_t)v7);
  kaldi::WriteToken(a2, a3, (char *)v7);
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 448), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<UseTransform>");
  kaldi::WriteBasicType<BOOL>(a2, a3, *(unsigned __int8 *)(a1 + 460));
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
}

void sub_1B23E9A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::WriteData(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 168))(a1, a2, a3);
  uint64_t v8 = *(uint64_t **)(a1 + 208);
  uint64_t v9 = *(uint64_t **)(a1 + 216);
  while (v8 != v9)
  {
    uint64_t v10 = *v8++;
    kaldi::CuMatrixBase<float>::Write(v10, a2, a3, a4);
  }
  double result = kaldi::WriteToken(a2, a3, "</Component>");
  if (*(unsigned char *)(a1 + 460))
  {
    uint64_t v12 = *(uint64_t **)(a1 + 256);
    for (uint64_t i = *(uint64_t **)(a1 + 264); v12 != i; result = kaldi::WriteToken(a2, a3, "</Component>"))
    {
      kaldi::WriteToken(a2, a3, "<FeatureTransform>");
      uint64_t v14 = *v12++;
      kaldi::nnet1::Component::Write(v14, a2, a3, a4);
    }
  }
  return result;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::NumParams(void *a1)
{
  uint64_t v1 = (uint64_t *)a1[26];
  uint64_t v2 = (uint64_t *)a1[27];
  if (v1 == v2)
  {
    uint64_t v3 = 0;
  }
  else
  {
    LODWORD(v3) = 0;
    do
    {
      uint64_t v4 = *v1++;
      uint64_t v3 = (v3 + *(_DWORD *)(v4 + 16) * *(_DWORD *)(v4 + 20));
    }
    while (v1 != v2);
  }
  uint64_t v5 = (uint64_t *)a1[32];
  uint64_t v6 = (uint64_t *)a1[33];
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    uint64_t v3 = (*(unsigned int (**)(uint64_t))(*(void *)v7 + 176))(v7) + v3;
  }
  return v3;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::GetParams(void *a1, void **a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 1);
  uint64_t v5 = (uint64_t *)a1[26];
  uint64_t v6 = (uint64_t *)a1[27];
  if (v5 == v6)
  {
    int v10 = 0;
  }
  else
  {
    int v7 = 0;
    do
    {
      uint64_t v8 = *v5++;
      int v9 = *(_DWORD *)(v8 + 16) * *(_DWORD *)(v8 + 20);
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      int v10 = v9 + v7;
      uint64_t v16 = (uint64_t)*a2 + 4 * v7;
      LODWORD(v17) = v9;
      kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v16, v8);
      int v7 = v10;
    }
    while (v5 != v6);
  }
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v12 = (void *)a1[32];
  for (uint64_t i = (void *)a1[33]; v12 != i; ++v12)
  {
    (*(void (**)(void, uint64_t *))(*(void *)*v12 + 184))(*v12, &v16);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v13 = (uint64_t)*a2 + 4 * v10;
    LODWORD(v14) = v17;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v13, (const void **)&v16);
    v10 += v17;
  }
  kaldi::Vector<float>::Destroy((uint64_t)&v16);
}

void sub_1B23E9D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

int *kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::SetParams(void *a1, void *a2)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check((uint64_t)a1);
  double result = (int *)(*(uint64_t (**)(void *))(*a1 + 176))(a1);
  uint64_t v5 = (uint64_t *)a1[26];
  uint64_t v6 = (uint64_t *)a1[27];
  if (v5 == v6)
  {
    int v10 = 0;
  }
  else
  {
    int v7 = 0;
    do
    {
      uint64_t v8 = *v5++;
      int v9 = *(_DWORD *)(v8 + 16) * *(_DWORD *)(v8 + 20);
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      int v10 = v9 + v7;
      uint64_t v16 = (char *)(*a2 + 4 * v7);
      LODWORD(v17) = v9;
      double result = kaldi::CuMatrixBase<float>::CopyRowsFromVec(v8, &v16);
      int v7 = v10;
    }
    while (v5 != v6);
  }
  uint64_t v12 = (uint64_t *)a1[32];
  for (i = (uint64_t *)a1[33]; v12 != i; int v10 = v15)
  {
    int v13 = (*(uint64_t (**)(void))(*(void *)*v12 + 176))();
    uint64_t v14 = *v12++;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v15 = v13 + v10;
    uint64_t v16 = (char *)(*a2 + 4 * v10);
    LODWORD(v17) = v13;
    double result = (int *)(*(uint64_t (**)(uint64_t, char **))(*(void *)v14 + 192))(v14, &v16);
  }
  return result;
}

float kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::SumParams(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[26];
  uint64_t v3 = (uint64_t *)a1[27];
  float v4 = 0.0;
  while (v2 != v3)
  {
    uint64_t v5 = *v2++;
    float v4 = v4 + kaldi::CuMatrixBase<float>::Sum(v5);
  }
  int v7 = (uint64_t *)a1[32];
  uint64_t v6 = (uint64_t *)a1[33];
  while (v7 != v6)
  {
    uint64_t v8 = *v7++;
    float v4 = v4 + (*(float (**)(uint64_t))(*(void *)v8 + 208))(v8);
  }
  return v4;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Info(void *a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  (*(void (**)(void *, void *, void))(*a1 + 168))(a1, v18, 0);
  uint64_t v2 = (uint64_t *)a1[26];
  for (uint64_t i = (uint64_t *)a1[27]; v2 != i; ++v2)
  {
    float v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n## Embedding Table: ", 21);
    kaldi::nnet1::MomentStatistics<float>(*v2);
    if ((v17 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v17 & 0x80u) == 0) {
      uint64_t v6 = v17;
    }
    else {
      uint64_t v6 = v16;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, v6);
    if ((char)v17 < 0) {
      operator delete(__p);
    }
  }
  uint64_t v7 = a1[32];
  for (uint64_t j = a1[33]; v7 != j; v7 += 8)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n## Feature Transform: input-dim ", 33);
    int v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", output-dim ", 13);
    int v10 = (void *)std::ostream::operator<<();
    int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n", 1);
    (*(void (**)(void **__return_ptr))(**(void **)v7 + 64))(&__p);
    if ((v17 & 0x80u) == 0) {
      uint64_t v12 = &__p;
    }
    else {
      uint64_t v12 = __p;
    }
    if ((v17 & 0x80u) == 0) {
      uint64_t v13 = v17;
    }
    else {
      uint64_t v13 = v16;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    if ((char)v17 < 0) {
      operator delete(__p);
    }
  }
  std::stringbuf::str();
  v18[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v18 + *(void *)(v18[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v18[1] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v20);
}

void sub_1B23EA214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::InfoGradient(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"No intermediate gradients for embedding tables, here is the gradient info for the transforms: ", 94);
  uint64_t v2 = *(void *)(a1 + 256);
  for (uint64_t i = *(void *)(a1 + 264); v2 != i; v2 += 8)
  {
    (*(void (**)(void **__return_ptr))(**(void **)v2 + 72))(__p);
    if ((v9 & 0x80u) == 0) {
      float v4 = __p;
    }
    else {
      float v4 = (void **)__p[0];
    }
    if ((v9 & 0x80u) == 0) {
      uint64_t v5 = v9;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n", 1);
    if ((char)v9 < 0) {
      operator delete(__p[0]);
    }
  }
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v10[1] = MEMORY[0x1E4FBA470] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v12);
}

void sub_1B23EA424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::SetTrainOptions(uint64_t result, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(result + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(result + 56) = v2;
  uint64_t v3 = *(uint64_t **)(result + 256);
  for (uint64_t i = *(uint64_t **)(result + 264);
        v3 != i;
        double result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 264))(v6, a2))
  {
    uint64_t v6 = *v3++;
  }
  return result;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  int32x2_t v6 = *(int32x2_t *)(a3 + 32);
  uint64_t v7 = *(unsigned int *)(a2 + 20);
  kaldi::CuMatrixBase<float>::SetZero(a3);
  if (*(unsigned char *)(a1 + 460))
  {
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 280), *(int *)(a1 + 96));
    int64_t v8 = *(int *)(a1 + 96);
    if ((int)v8 > 0)
    {
      uint64_t v9 = 0;
      int64_t v10 = 0;
      int v11 = 0;
      do
      {
        uint64_t v12 = (int32x2_t *)(*(void *)(a1 + 280) + v9);
        v12[4] = v6;
        kaldi::CuMatrix<float>::Resize(v12, v7, *(unsigned int *)(*(void *)(a1 + 152) + 4 * v10), 0, 0);
        uint64_t v13 = *(void *)(*(void *)(a1 + 208) + 8 * *(int *)(*(void *)(a1 + 176) + 4 * v10));
        uint64_t v14 = *(void *)(a1 + 280) + v9;
        uint64_t v15 = *(void *)(a2 + 8) + 4 * v11;
        int v16 = *(_DWORD *)(a2 + 28) - v11;
        uint64_t v17 = *(void *)(a2 + 32);
        LODWORD(v34[1]) = *(_DWORD *)(*(void *)(a1 + 128) + 4 * v10);
        *(void *)((char *)&v34[1] + 4) = *(void *)(a2 + 20);
        HIDWORD(v34[2]) = v16;
        v34[3] = v17;
        long long v33 = &unk_1F0A472A0;
        v34[0] = v15;
        kaldi::CuMatrixBase<float>::SummarizeVec(v14, v13, (uint64_t)&v33);
        long long v33 = &unk_1F0A472A0;
        memset(v34, 0, sizeof(v34));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v33);
        v11 += *(_DWORD *)(*(void *)(a1 + 128) + 4 * v10++);
        int64_t v8 = *(int *)(a1 + 96);
        v9 += 48;
      }
      while (v10 < v8);
    }
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 304), v8);
    if (*(int *)(a1 + 96) >= 1)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      do
      {
        uint64_t v20 = (int32x2_t *)(*(void *)(a1 + 304) + v18);
        v20[4] = v6;
        kaldi::nnet1::Component::Propagate(*(_DWORD **)(*(void *)(a1 + 256) + 8 * v19), *(void *)(a1 + 280) + v18, v20, 0);
        kaldi::CuMatrixBase<float>::AddMat(a3, *(void *)(a1 + 304) + v18, 111, 1.0, 1.0);
        ++v19;
        v18 += 48;
      }
      while (v19 < *(int *)(a1 + 96));
    }
  }
  else if (*(int *)(a1 + 96) >= 1)
  {
    uint64_t v21 = 0;
    unsigned int v22 = 0;
    unsigned int v23 = 0;
    uint64_t v24 = *(void *)(a1 + 152);
    uint64_t v25 = *(void *)(a1 + 128);
    do
    {
      uint64_t v26 = *(void *)(a3 + 8) + 4 * v22;
      unsigned int v27 = *(_DWORD *)(a3 + 28) - v22;
      uint64_t v28 = *(void *)(a3 + 32);
      LODWORD(v34[1]) = *(_DWORD *)(v24 + 4 * v21);
      *(void *)((char *)&v34[1] + 4) = *(void *)(a3 + 20);
      HIDWORD(v34[2]) = v27;
      v34[3] = v28;
      long long v33 = &unk_1F0A472A0;
      v34[0] = v26;
      uint64_t v29 = *(void *)(*(void *)(a1 + 208) + 8 * *(int *)(*(void *)(a1 + 176) + 4 * v21));
      uint64_t v30 = *(void *)(a2 + 8) + 4 * v23;
      LODWORD(v26) = *(_DWORD *)(a2 + 28) - v23;
      uint64_t v31 = *(void *)(a2 + 32);
      LODWORD(v32[2]) = *(_DWORD *)(v25 + 4 * v21);
      *(void *)((char *)&v32[2] + 4) = *(void *)(a2 + 20);
      HIDWORD(v32[3]) = v26;
      v32[4] = v31;
      v32[0] = &unk_1F0A472A0;
      v32[1] = v30;
      kaldi::CuMatrixBase<float>::SummarizeVec((uint64_t)&v33, v29, (uint64_t)v32);
      v32[0] = &unk_1F0A472A0;
      memset(&v32[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v32);
      long long v33 = &unk_1F0A472A0;
      memset(v34, 0, sizeof(v34));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v33);
      uint64_t v24 = *(void *)(a1 + 152);
      v22 += *(_DWORD *)(v24 + 4 * v21);
      uint64_t v25 = *(void *)(a1 + 128);
      v23 += *(_DWORD *)(v25 + 4 * v21++);
    }
    while (v21 < *(int *)(a1 + 96));
  }
}

void sub_1B23EA7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _OWORD *v15 = 0u;
  v15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::SetGradientNormalization(uint64_t a1, uint64_t a2, float a3)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  int32x2_t v6 = *(uint64_t **)(a1 + 256);
  uint64_t v7 = *(uint64_t **)(a1 + 264);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, uint64_t, float))(*(void *)v8 + 240))(v8, a2, a3);
  }
  if (a2 == 3)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"RMSPROP is not implemented in word multi embedding yet", 54);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    }
  }
  else
  {
    *(float *)(a1 + 452) = a3;
    *(_DWORD *)(a1 + 448) = a2;
  }
}

void sub_1B23EA904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 84)) {
    return *(float *)(a1 + 56);
  }
  int v1 = *(_DWORD *)(a1 + 464);
  if (v1 < 1) {
    return NAN;
  }
  else {
    return *(float *)(a1 + 56) / (float)v1;
  }
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v8, 1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  long long v28 = 0u;
  long long v27 = 0u;
  int32x2_t v26 = (int32x2_t)&unk_1F0A51768;
  char v29 = 0;
  kaldi::nnet1::Component::Propagate((_DWORD *)v9, a2, &v26, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v9 + 232))(v9, a2, a3, 0, 0);
  int64_t v10 = *(uint64_t **)(v9 + 232);
  int v11 = *(uint64_t **)(v9 + 240);
  if (v10 == v11)
  {
    int v12 = 0;
  }
  else
  {
    int v12 = 0;
    do
    {
      uint64_t v13 = *v10;
      int v14 = *(_DWORD *)(*v10 + 16) * *(_DWORD *)(*v10 + 20);
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v23 = (uint64_t)*a4 + 4 * v12;
      LODWORD(v24) = v14;
      kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v23, v13);
      v12 += v14;
      ++v10;
    }
    while (v10 != v11);
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  if (*(unsigned char *)(a1 + 460))
  {
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    kaldi::nnet1::Component::Propagate((_DWORD *)v15, a2, &v26, 0);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    if (*(int *)(a1 + 96) < 1)
    {
      if (!v15)
      {
LABEL_13:
        kaldi::Vector<float>::Destroy((uint64_t)&v23);
        return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v26);
      }
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      do
      {
        uint64_t v18 = *(void *)(*(void *)(v15 + 256) + 8 * v17);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v18 + 224))(v18, *(void *)(v15 + 280) + v16, a3, &v23);
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v20 = (uint64_t)*a4 + 4 * v12;
        LODWORD(v21) = v24;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v20, (const void **)&v23);
        v12 += v24;
        ++v17;
        v16 += 48;
      }
      while (v17 < *(int *)(a1 + 96));
    }
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    goto LABEL_13;
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v26);
}

void sub_1B23EAC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((void *)a1);
  if (*(unsigned char *)(a1 + 460))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "Not implemented yet when transforms are used");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  *a3 = 0;
  int32x2_t v6 = *(char **)(a1 + 208);
  uint64_t v7 = *(char **)(a1 + 216);
  uint64_t v8 = v7 - v6;
  if (v7 != v6)
  {
    int v9 = 0;
    unint64_t v10 = v8 >> 3;
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    do
    {
      uint64_t v11 = *(void *)v6;
      v6 += 8;
      v9 += *(_DWORD *)(v11 + 16) * *(_DWORD *)(v11 + 20);
      *a3 = v9;
      --v10;
    }
    while (v10);
  }
  uint64_t v12 = *(void *)(a1 + 232);
  uint64_t v13 = *(void *)(a1 + 240);
  *a2 = 0;
  if (v13 != v12)
  {
    unint64_t v14 = 0;
    do
    {
      *a3 += kaldi::CuMatrixBase<float>::CountZeros(*(void *)(v12 + 8 * v14++));
      uint64_t v12 = *(void *)(a1 + 232);
    }
    while (v14 < (*(void *)(a1 + 240) - v12) >> 3);
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(void *a1)
{
  unint64_t v1 = (uint64_t)(a1[27] - a1[26]) >> 3;
  if (v1 != (uint64_t)(a1[30] - a1[29]) >> 3)
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 29, v1);
    if (a1[27] != a1[26]) {
      operator new();
    }
  }
}

void sub_1B23EAE30(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WordMultiVecComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  *(_OWORD *)(a1 + 56) = xmmword_1B255E480;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = &unk_1F0A4C1D0;
  *(void *)(a1 + 88) = &unk_1F0A4C300;
  *(_DWORD *)(a1 + 96) = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 352) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(void *)(a1 + 400) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 1065353216;
  *(unsigned char *)(a1 + 460) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 529) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  return result;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WordMultiVecComponent(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  *(_OWORD *)(a1 + 56) = xmmword_1B255E480;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = &unk_1F0A4C1D0;
  *(void *)(a1 + 88) = &unk_1F0A4C300;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 104), *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 128), *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 2);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 152), *(const void **)(a2 + 152), *(void *)(a2 + 160), (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 2);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  int v4 = *(_DWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 200) = v4;
  uint64_t v5 = (char **)(a1 + 256);
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 352) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(void *)(a1 + 400) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 440) = 0;
  *(void *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  int v6 = *(unsigned __int8 *)(a2 + 460);
  *(unsigned char *)(a1 + 460) = v6;
  if (v6 && *(int *)(a1 + 96) >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(a2 + 256) + 8 * v7);
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
      uint64_t v10 = v9;
      uint64_t v12 = *(uint64_t **)(a1 + 264);
      unint64_t v11 = *(void *)(a1 + 272);
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v5) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v5;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 272, v17);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = (uint64_t *)&v18[8 * v14];
        *uint64_t v19 = v10;
        uint64_t v13 = v19 + 1;
        uint64_t v21 = *(char **)(a1 + 256);
        uint64_t v20 = *(char **)(a1 + 264);
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--uint64_t v19 = v22;
          }
          while (v20 != v21);
          uint64_t v20 = *v5;
        }
        *(void *)(a1 + 256) = v19;
        *(void *)(a1 + 264) = v13;
        *(void *)(a1 + 272) = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *uint64_t v12 = v9;
        uint64_t v13 = v12 + 1;
      }
      *(void *)(a1 + 264) = v13;
      ++v7;
    }
    while (v7 < *(int *)(a1 + 96));
  }
  if (a1 != a2)
  {
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 280, *(int32x2_t **)(a2 + 280), *(int32x2_t **)(a2 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 288) - *(void *)(a2 + 280)) >> 4));
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 304, *(int32x2_t **)(a2 + 304), *(int32x2_t **)(a2 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 312) - *(void *)(a2 + 304)) >> 4));
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 328, *(int32x2_t **)(a2 + 328), *(int32x2_t **)(a2 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 336) - *(void *)(a2 + 328)) >> 4));
  }
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 352), (int32x2_t *)(a2 + 352));
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 400), (int32x2_t *)(a2 + 400));
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  *(_DWORD *)(a1 + 452) = *(_DWORD *)(a2 + 452);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a2 + 464);
  std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::resize((uint64_t *)(a1 + 208), (uint64_t)(*(void *)(a2 + 216) - *(void *)(a2 + 208)) >> 3);
  if (*(void *)(a1 + 216) != *(void *)(a1 + 208)) {
    kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::CompressedMatrix>();
  }
  if (*(void *)(a2 + 480) != *(void *)(a2 + 472)) {
    kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::InitResidualAggregator(a1, (uint64_t *)(a1 + 472));
  }
  *(unsigned char *)(a1 + 544) = *(unsigned char *)(a2 + 544);
  return a1;
}

void sub_1B23EB42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, quasar::Bitmap *a13, kaldi::nnet1::QuantizerResidualAggregator *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v22 = *a10;
  if (*a10)
  {
    *((void *)v20 + 20) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *a11;
  if (*a11)
  {
    *((void *)v20 + 17) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *a12;
  if (*a12)
  {
    *((void *)v20 + 14) = v24;
    operator delete(v24);
  }
  quasar::Bitmap::~Bitmap(a13);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v20);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = (a1[1] - *a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, (kaldi::CompressedMatrix **)(*a1 + 8 * a2));
    }
  }
  else
  {
    std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__append(a1, a2 - v2);
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::CompressedMatrix>()
{
}

void sub_1B23EB5BC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10C0C40E6EFC850);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::EnsureCorrs((void *)a1);
  if (*(unsigned char *)(a1 + 460))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "Not implemented yet when transforms are used");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  if (*(void *)(a1 + 216) != *(void *)(a1 + 208))
  {
    unint64_t v4 = 0;
    do
      kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(void *)(*(void *)(a1 + 232) + 8 * v4++));
    while (v4 < (uint64_t)(*(void *)(a1 + 216) - *(void *)(a1 + 208)) >> 3);
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::~WordMultiVecComponent(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A4C1D0;
  unint64_t v2 = (quasar::Bitmap *)(a1 + 88);
  *(void *)(a1 + 88) = &unk_1F0A4C300;
  kaldi::DeletePointers<kaldi::nnet1::UpdatableComponent>((void *)(a1 + 256));
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 472));
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 400);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 352);
  uint64_t v8 = (void **)(a1 + 328);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 304);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 280);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v3 = *(void **)(a1 + 256);
  if (v3)
  {
    *(void *)(a1 + 264) = v3;
    operator delete(v3);
  }
  uint64_t v8 = (void **)(a1 + 232);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 208);
  std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__destroy_vector::operator()[abi:ne180100](&v8);
  unint64_t v4 = *(void **)(a1 + 176);
  if (v4)
  {
    *(void *)(a1 + 184) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 152);
  if (v5)
  {
    *(void *)(a1 + 160) = v5;
    operator delete(v5);
  }
  int v6 = *(void **)(a1 + 128);
  if (v6)
  {
    *(void *)(a1 + 136) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 104);
  if (v7)
  {
    *(void *)(a1 + 112) = v7;
    operator delete(v7);
  }
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  uint64_t vars8;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::~WordMultiVecComponent(a1);
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::~WordMultiVecComponent(uint64_t a1)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::~WordMultiVecComponent(a1 - 88);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Copy()
{
}

void sub_1B23EB880(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C404CB298AFLL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::CopyCompressed()
{
}

void sub_1B23EB8EC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C404CB298AFLL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::CopyCompressed()
{
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v126 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v125);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 448), &v124);
  char v105 = 0;
  int v123 = -1;
  *(unsigned char *)(a1 + 460) = 1;
  memset(v122, 0, sizeof(v122));
  size_t v106 = (std::vector<unsigned int> *)(a1 + 176);
  char v107 = (std::vector<unsigned int> *)(a1 + 104);
  unint64_t v108 = (std::vector<unsigned int> *)(a1 + 152);
  int v6 = (int *)(a1 + 96);
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_193;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v122);
    if ((SHIBYTE(v122[2]) & 0x80000000) == 0) {
      break;
    }
    uint64_t v8 = v122[1];
    switch((unint64_t)v122[1])
    {
      case 9uLL:
        BOOL v7 = *(void *)v122[0] == 0x6461724778614D3CLL && *((unsigned char *)v122[0] + 8) == 62;
LABEL_12:
        uint64_t v9 = (float *)(a1 + 452);
        if (!v7) {
          goto LABEL_270;
        }
        goto LABEL_164;
      case 0xAuLL:
        if (*(void *)v122[0] != 0x6D65744978614D3CLL || *((_WORD *)v122[0] + 4) != 15987) {
          goto LABEL_270;
        }
LABEL_109:
        std::string __p = 0;
        uint64_t v118 = 0;
        uint64_t v119 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p);
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, (std::vector<unsigned int> *)(a1 + 128));
        goto LABEL_179;
      case 0xBuLL:
        BOOL v28 = *(void *)v122[0] == 0x756F72476D754E3CLL && *(void *)((char *)v122[0] + 3) == 0x3E7370756F72476DLL;
        uint64_t v18 = (int *)(a1 + 96);
        if (!v28)
        {
          BOOL v19 = *(void *)v122[0] == 0x6C6261546D754E3CLL && *(void *)((char *)v122[0] + 3) == 0x3E73656C6261546DLL;
LABEL_96:
          uint64_t v18 = (int *)(a1 + 200);
          if (!v19) {
            goto LABEL_270;
          }
        }
        goto LABEL_177;
      case 0xCuLL:
        if (*(void *)v122[0] == 0x536D6F646E61523CLL && *((_DWORD *)v122[0] + 2) == 1046766949)
        {
LABEL_176:
          uint64_t v18 = &v123;
LABEL_177:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v18);
          goto LABEL_181;
        }
        if (*(void *)v122[0] != 0x69536261636F563CLL || *((_DWORD *)v122[0] + 2) != 1047750010) {
          goto LABEL_187;
        }
LABEL_157:
        std::string __p = 0;
        uint64_t v118 = 0;
        uint64_t v119 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p);
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v107);
        goto LABEL_179;
      case 0xDuLL:
        if (*(void *)v122[0] != 0x74536D617261503CLL || *(void *)((char *)v122[0] + 5) != 0x3E7665646474536DLL) {
          goto LABEL_270;
        }
LABEL_163:
        uint64_t v9 = (float *)&v126;
LABEL_164:
        kaldi::ReadBasicType<float>(a2, 0, v9);
        goto LABEL_181;
      case 0xFuLL:
        BOOL v29 = *(void *)v122[0] == 0x61526E7261654C3CLL && *(void *)((char *)v122[0] + 7) == 0x3E66656F43657461;
        uint64_t v9 = (float *)(a1 + 456);
        if (!v29) {
          goto LABEL_118;
        }
        goto LABEL_164;
      case 0x11uLL:
        if (*(void *)v122[0] == 0x69446465626D453CLL
          && *((void *)v122[0] + 1) == 0x736E6F69736E656DLL
          && *((unsigned char *)v122[0] + 16) == 62)
        {
LABEL_59:
          std::string __p = 0;
          uint64_t v118 = 0;
          uint64_t v119 = 0;
          kaldi::ReadToken(a2, 0, (uint64_t)&__p);
          kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v108);
          goto LABEL_179;
        }
        if (v122[1] == (void *)15)
        {
LABEL_118:
          if (*(void *)v122[0] == 0x656E67697373413CLL && *(void *)((char *)v122[0] + 7) == 0x3E656C6261546465)
          {
LABEL_178:
            std::string __p = 0;
            uint64_t v118 = 0;
            uint64_t v119 = 0;
            kaldi::ReadToken(a2, 0, (uint64_t)&__p);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v106);
LABEL_179:
            if (SHIBYTE(v119) < 0) {
              operator delete(__p);
            }
            goto LABEL_181;
          }
LABEL_122:
          uint64_t v8 = v122[1];
        }
LABEL_123:
        if (v8 == (void *)20)
        {
          if (*(void *)v122[0] == 0x6C616974696E493CLL
            && *((void *)v122[0] + 1) == 0x6E6F436F54657A69
            && *((_DWORD *)v122[0] + 4) == 1047814499)
          {
LABEL_175:
            char v105 = 1;
            goto LABEL_181;
          }
          uint64_t v8 = v122[1];
        }
        if (v8 != (void *)14) {
          goto LABEL_186;
        }
        if (*(void *)v122[0] != 0x6E6172546573553CLL || *(void *)((char *)v122[0] + 6) != 0x3E6D726F66736E61)
        {
LABEL_185:
          uint64_t v8 = v122[1];
LABEL_186:
          if (v8 == (void *)12)
          {
LABEL_187:
            float v45 = (void **)v122[0];
            goto LABEL_188;
          }
LABEL_270:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          uint64_t v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
          if (SHIBYTE(v122[2]) >= 0) {
            long long v100 = v122;
          }
          else {
            long long v100 = (void **)v122[0];
          }
          if (SHIBYTE(v122[2]) >= 0) {
            uint64_t v101 = HIBYTE(v122[2]);
          }
          else {
            uint64_t v101 = (uint64_t)v122[1];
          }
          long long v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)v100, v101);
          uint64_t v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)", a typo in config? ", 20);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"(NumGroups|VocabSizes|MaxDimensions|EmbedDimensions|LearnRateCoef|ParamStddev|RandomSeed|InitTransformType|GradientNormType|MaxGrad)", 132);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
LABEL_138:
        kaldi::ReadBasicType<BOOL>(a2, 0, (char *)(a1 + 460));
LABEL_181:
        std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
        break;
      case 0x12uLL:
        if (*(void *)v122[0] != 0x6E6569646172473CLL
          || *((void *)v122[0] + 1) != 0x7079546D726F4E74
          || *((_WORD *)v122[0] + 8) != 15973)
        {
          goto LABEL_270;
        }
LABEL_147:
        uint64_t v39 = &v124;
        goto LABEL_174;
      case 0x13uLL:
        if (*(void *)v122[0] != 0x61725474696E493CLL
          || *((void *)v122[0] + 1) != 0x79546D726F66736ELL
          || *(void *)((char *)v122[0] + 11) != 0x3E657079546D726FLL)
        {
          goto LABEL_270;
        }
LABEL_173:
        uint64_t v39 = &v125;
LABEL_174:
        kaldi::ReadToken(a2, 0, (uint64_t)v39);
        goto LABEL_181;
      default:
        goto LABEL_123;
    }
  }
  switch(HIBYTE(v122[2]))
  {
    case 9:
      BOOL v7 = v122[0] == (void *)0x6461724778614D3CLL && LOBYTE(v122[1]) == 62;
      goto LABEL_12;
    case 0xA:
      if (v122[0] != (void *)0x6D65744978614D3CLL || LOWORD(v122[1]) != 15987) {
        goto LABEL_270;
      }
      goto LABEL_109;
    case 0xB:
      BOOL v17 = v122[0] == (void *)0x756F72476D754E3CLL && *(void **)((char *)v122 + 3) == (void *)0x3E7370756F72476DLL;
      uint64_t v18 = (int *)(a1 + 96);
      if (v17) {
        goto LABEL_177;
      }
      BOOL v19 = v122[0] == (void *)0x6C6261546D754E3CLL && *(void **)((char *)v122 + 3) == (void *)0x3E73656C6261546DLL;
      goto LABEL_96;
    case 0xC:
      if (v122[0] == (void *)0x536D6F646E61523CLL && LODWORD(v122[1]) == 1046766949) {
        goto LABEL_176;
      }
      if (v122[0] != (void *)0x69536261636F563CLL || LODWORD(v122[1]) != 1047750010) {
        goto LABEL_184;
      }
      goto LABEL_157;
    case 0xD:
      if (v122[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v122 + 5) != (void *)0x3E7665646474536DLL) {
        goto LABEL_270;
      }
      goto LABEL_163;
    case 0xE:
      goto LABEL_84;
    case 0xF:
      BOOL v25 = v122[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v122 + 7) == (void *)0x3E66656F43657461;
      uint64_t v9 = (float *)(a1 + 456);
      if (v25) {
        goto LABEL_164;
      }
      if (v122[0] == (void *)0x656E67697373413CLL && *(void **)((char *)v122 + 7) == (void *)0x3E656C6261546465) {
        goto LABEL_178;
      }
      if ((HIBYTE(v122[2]) & 0x80) != 0) {
        goto LABEL_122;
      }
LABEL_83:
      if (HIBYTE(v122[2]) != 14) {
        goto LABEL_183;
      }
LABEL_84:
      if (v122[0] == (void *)0x6E6172546573553CLL && *(void **)((char *)v122 + 6) == (void *)0x3E6D726F66736E61) {
        goto LABEL_138;
      }
      if ((HIBYTE(v122[2]) & 0x80) != 0) {
        goto LABEL_185;
      }
LABEL_183:
      if (HIBYTE(v122[2]) != 12) {
        goto LABEL_270;
      }
LABEL_184:
      float v45 = v122;
      break;
    case 0x11:
      if (v122[0] != (void *)0x69446465626D453CLL || v122[1] != (void *)0x736E6F69736E656DLL || LOBYTE(v122[2]) != 62) {
        goto LABEL_270;
      }
      goto LABEL_59;
    case 0x12:
      if (v122[0] != (void *)0x6E6569646172473CLL
        || v122[1] != (void *)0x7079546D726F4E74
        || LOWORD(v122[2]) != 15973)
      {
        goto LABEL_270;
      }
      goto LABEL_147;
    case 0x13:
      if (v122[0] != (void *)0x61725474696E493CLL
        || v122[1] != (void *)0x79546D726F66736ELL
        || *(void **)((char *)&v122[1] + 3) != (void *)0x3E657079546D726FLL)
      {
        goto LABEL_270;
      }
      goto LABEL_173;
    case 0x14:
      if (v122[0] != (void *)0x6C616974696E493CLL
        || v122[1] != (void *)0x6E6F436F54657A69
        || LODWORD(v122[2]) != 1047814499)
      {
        goto LABEL_83;
      }
      goto LABEL_175;
    default:
      goto LABEL_270;
  }
LABEL_188:
  unint64_t v46 = *v45;
  uint64_t v47 = *((unsigned int *)v45 + 2);
  if (v46 != (void *)0x6E6F706D6F432F3CLL || v47 != 1047817829) {
    goto LABEL_270;
  }
LABEL_193:
  uint64_t v49 = (char **)(a1 + 256);
  kaldi::DeletePointers<kaldi::nnet1::UpdatableComponent>((void *)(a1 + 256));
  if (*(unsigned char *)(a1 + 460))
  {
    if (*v6 >= 1)
    {
      int v50 = 0;
      do
      {
        unint64_t v110 = 0;
        uint64_t v111 = 0;
        uint64_t v112 = 0;
        LODWORD(v114) = 0;
        LODWORD(v109) = 0;
        kaldi::ExpectToken(a2, 0, "<FeatureTransform>");
        kaldi::ReadToken(a2, 0, (uint64_t)&v110);
        uint64_t v51 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v110);
        kaldi::ExpectToken(a2, 0, "<InputDim>");
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v114);
        kaldi::ExpectToken(a2, 0, "<OutputDim>");
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v109);
        kaldi::nnet1::Component::NewComponentOfType(v51);
        if (!v52
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          unint64_t v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"require an updatable component, you used ", 41);
          if (v112 >= 0) {
            unint64_t v97 = &v110;
          }
          else {
            unint64_t v97 = v110;
          }
          if (v112 >= 0) {
            uint64_t v98 = HIBYTE(v112);
          }
          else {
            uint64_t v98 = v111;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)v97, v98);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
        float v54 = v53;
        (*(void (**)(void *, uint64_t *, kaldi::UniformRandomNumber *))(*(void *)v53 + 96))(v53, a2, a3);
        float v56 = *(void **)(a1 + 264);
        unint64_t v55 = *(void *)(a1 + 272);
        if ((unint64_t)v56 >= v55)
        {
          uint64_t v58 = ((char *)v56 - *v49) >> 3;
          if ((unint64_t)(v58 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v59 = v55 - (void)*v49;
          uint64_t v60 = v59 >> 2;
          if (v59 >> 2 <= (unint64_t)(v58 + 1)) {
            uint64_t v60 = v58 + 1;
          }
          if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v61 = v60;
          }
          if (v61) {
            long long v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 272, v61);
          }
          else {
            long long v62 = 0;
          }
          float v63 = &v62[8 * v58];
          *(void *)float v63 = v54;
          uint64_t v57 = v63 + 8;
          long long v65 = *(char **)(a1 + 256);
          uint64_t v64 = *(char **)(a1 + 264);
          if (v64 != v65)
          {
            do
            {
              uint64_t v66 = *((void *)v64 - 1);
              v64 -= 8;
              *((void *)v63 - 1) = v66;
              v63 -= 8;
            }
            while (v64 != v65);
            uint64_t v64 = *v49;
          }
          *(void *)(a1 + 256) = v63;
          *(void *)(a1 + 264) = v57;
          *(void *)(a1 + 272) = &v62[8 * v61];
          if (v64) {
            operator delete(v64);
          }
        }
        else
        {
          *float v56 = v54;
          uint64_t v57 = v56 + 1;
        }
        *(void *)(a1 + 264) = v57;
        if (SHIBYTE(v112) < 0) {
          operator delete(v110);
        }
        ++v50;
      }
      while (v50 < *v6);
    }
    if (v105)
    {
      uint64_t v68 = *(uint64_t **)(a1 + 256);
      uint64_t v67 = *(uint64_t **)(a1 + 264);
      if (v68 == v67)
      {
        if (!*(_DWORD *)(*v68 + 12))
        {
LABEL_231:
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"initialized the transform for concatenation", 43);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
          }
          goto LABEL_233;
        }
      }
      else
      {
        int v69 = 0;
        long long v70 = *(uint64_t **)(a1 + 256);
        do
        {
          uint64_t v71 = *v70++;
          v69 += *(_DWORD *)(v71 + 8);
        }
        while (v70 != v67);
        if (v69 == *(_DWORD *)(*v68 + 12))
        {
          int v72 = 0;
          do
          {
            uint64_t v73 = (const void *)*v68;
            if (!*v68)
            {
LABEL_277:
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"cannot initialize to concatenation for this transform", 53);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
            }
            if (v74)
            {
              uint64_t v75 = v74;
              kaldi::Matrix<float>::Matrix((uint64_t)&__p, *((unsigned int *)v74 + 3), *((unsigned int *)v74 + 2), 0, 0);
              uint64_t v76 = *((unsigned int *)v75 + 3);
              uint64_t v114 = 0;
              char v115 = 0;
              unint64_t v116 = 0;
              kaldi::Vector<float>::Resize((void **)&v114, v76, 0);
              kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v110, (uint64_t)&__p, v72, *((_DWORD *)v75 + 2), 0, v118);
              kaldi::MatrixBase<float>::AddToDiag((uint64_t)&v110, 1.0);
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v110);
              kaldi::nnet1::AffineTransform::SetLinearity(v75, (int *)&__p);
              kaldi::nnet1::AffineTransform::Bias(v75);
              uint64_t v77 = (void *)kaldi::nnet1::AffineTransform::Bias(v75);
              kaldi::CuVectorBase<float>::CopyFromVec<float>(v77, (uint64_t)&v114);
              unsigned int v78 = *((_DWORD *)v75 + 2);
              kaldi::Vector<float>::Destroy((uint64_t)&v114);
            }
            else
            {
              if (!v79) {
                goto LABEL_277;
              }
              uint64_t v80 = (uint64_t)v79;
              kaldi::Matrix<float>::Matrix((uint64_t)&__p, v79[3], v79[2], 0, 0);
              kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v110, (uint64_t)&__p, v72, *(_DWORD *)(v80 + 8), 0, v118);
              kaldi::MatrixBase<float>::AddToDiag((uint64_t)&v110, 1.0);
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v110);
              kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SetLinearity(v80, (int *)&__p);
              unsigned int v78 = *(_DWORD *)(v80 + 8);
            }
            kaldi::Matrix<float>::~Matrix((uint64_t)&__p);
            v72 += v78;
            ++v68;
          }
          while (v68 != v67);
          goto LABEL_231;
        }
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"dimension mismatch, cannot initialize to concatenation, expected dim is ", 72);
      unint64_t v104 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)" actual dim is ", 15);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
  }
LABEL_233:
  int inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v125);
  *(_DWORD *)(a1 + 448) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v124);
  if (!inited)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"it doesn't make sense to initialize the embedding table as an identify matrix", 77);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  char v115 = 0;
  unint64_t v116 = 0;
  uint64_t v114 = &v115;
  if (*v6 < 1)
  {
    unint64_t v86 = 0;
  }
  else
  {
    uint64_t v82 = 0;
    do
    {
      LODWORD(v110) = 0;
      LODWORD(v110) = v106->__begin_[v82];
      unsigned int v83 = v107->__begin_[v82];
      unsigned int v84 = v108->__begin_[v82];
      std::string __p = &v110;
      char v85 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v114, (int *)&v110, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p);
      *((_DWORD *)v85 + 8) = v83;
      *((_DWORD *)v85 + 9) = v84;
      ++v82;
    }
    while (v82 < *v6);
    unint64_t v86 = v116;
  }
  std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::resize((uint64_t *)(a1 + 208), v86);
  if (v123 >= 1) {
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v123);
  }
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)&__p, a3);
  int v113 = 0;
  if (*(int *)(a1 + 200) >= 1)
  {
    unint64_t v110 = &v113;
    long long v87 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v114, &v113, (uint64_t)&std::piecewise_construct, (_DWORD **)&v110);
    uint64_t v88 = *((unsigned int *)v87 + 8);
    uint64_t v89 = *((unsigned int *)v87 + 9);
    kaldi::Matrix<float>::Matrix((uint64_t)&v110, v88, v89, 0, 0);
    if ((int)v88 < 1) {
LABEL_253:
    }
      kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::Matrix<float>>();
    int v90 = 0;
    while ((int)v89 < 1)
    {
LABEL_252:
      if (++v90 == v88) {
        goto LABEL_253;
      }
    }
    uint64_t v91 = 0;
    while (inited != 2)
    {
      if (inited == 1)
      {
        float v92 = *(float *)&v126;
        float v93 = (kaldi::UniformRandomNumber::RandUniform(a3, 0) + -0.5) * (float)(v92 + v92);
LABEL_250:
        *((float *)v110 + v90 * (int)v112 + v91) = v93;
      }
      if (v89 == ++v91) {
        goto LABEL_252;
      }
    }
    float v94 = *(float *)&v126;
    kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)&__p, 0);
    float v93 = v94 * v95;
    goto LABEL_250;
  }
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  if (v120)
  {
    float v121 = v120;
    operator delete(v120);
  }
  unint64_t v110 = &v119;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
  std::__tree<int>::destroy((uint64_t)&v114, v115);
  if (SHIBYTE(v122[2]) < 0) {
    operator delete(v122[0]);
  }
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
}

void sub_1B23ECB60()
{
}

void sub_1B23ECB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 - 169) < 0) {
    operator delete(*(void **)(v21 - 192));
  }
  if (*(char *)(v21 - 137) < 0) {
    operator delete(*(void **)(v21 - 160));
  }
  if (*(char *)(v21 - 113) < 0) {
    operator delete(*(void **)(v21 - 136));
  }
  _Unwind_Resume(exception_object);
}

void sub_1B23ECB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  JUMPOUT(0x1B23ECBA8);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::Matrix<float>>()
{
}

void sub_1B23ECCAC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10C0C40E6EFC850);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(uint64_t result)
{
  if (!*(unsigned char *)(result + 544))
  {
    uint64_t v1 = *(unsigned int *)(result + 96);
    if ((int)v1 <= 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"must have at least one group, you used ", 39);
      std::ostream::operator<<();
    }
    else
    {
      uint64_t v2 = *(unsigned int *)(result + 200);
      if ((int)v2 <= 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"must have at least one embedding table, you used ", 49);
        std::ostream::operator<<();
      }
      else if (v1 < v2)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are only ", 15);
        uint64_t v31 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" groups, but you set ", 21);
        uint64_t v32 = (void *)std::ostream::operator<<();
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v32, " embedding tables");
      }
      else
      {
        uint64_t v3 = *(void *)(result + 104);
        uint64_t v4 = (*(void *)(result + 112) - v3) >> 2;
        if (v4 == v1)
        {
          uint64_t v5 = *(void *)(result + 128);
          if (v4 == (*(void *)(result + 136) - v5) >> 2)
          {
            uint64_t v6 = *(void *)(result + 152);
            if (v4 == (*(void *)(result + 160) - v6) >> 2)
            {
              uint64_t v7 = *(void *)(result + 176);
              if (v4 == (*(void *)(result + 184) - v7) >> 2)
              {
                uint64_t v8 = *(void *)(result + 208);
                if (v2 == (*(void *)(result + 216) - v8) >> 3)
                {
                  if (*(unsigned char *)(result + 460)
                    && v4 != (uint64_t)(*(void *)(result + 264) - *(void *)(result + 256)) >> 3)
                  {
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
                    float v40 = (void *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" groups, but the number of feature transforms is ", 49);
                    std::ostream::operator<<();
                  }
                  else
                  {
                    uint64_t v9 = 0;
                    int v10 = 0;
                    int v11 = 0;
                    do
                    {
                      uint64_t v12 = *(unsigned int *)(v7 + 4 * v9);
                      if ((v12 & 0x80000000) != 0 || (int)v12 >= (int)v2)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        uint64_t v23 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"-th group has assigned table index ", 35);
                        uint64_t v24 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" , the number of tables is ", 27);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      int v13 = *(_DWORD *)(v3 + 4 * v9);
                      if (v13 <= 0)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        uint64_t v20 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"-th group has invalid vocab size ", 33);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      int v14 = *(_DWORD *)(v5 + 4 * v9);
                      if (v14 <= 0)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        uint64_t v21 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"-th group has invalid max item value ", 37);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      int v15 = *(_DWORD *)(v6 + 4 * v9);
                      if (v15 <= 0)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        BOOL v19 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"-th group has invalid embedding dimension value ", 48);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      uint64_t v16 = **(void **)(v8 + 8 * v12);
                      if (!v16 || *(_DWORD *)(v16 + 8) != v13)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        uint64_t v18 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"-th group has mismatched embedding table and vocab size ", 56);
                        BOOL v29 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" vs ", 4);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      if (*(_DWORD *)(v16 + 12) != v15)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        uint64_t v22 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"-th group has mismatched embedding table and embedding dim ", 59);
                        uint64_t v30 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" vs ", 4);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      if (*(unsigned char *)(result + 460))
                      {
                        uint64_t v17 = *(void *)(*(void *)(result + 256) + 8 * v9);
                        if (v15 != *(_DWORD *)(v17 + 8))
                        {
                          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                          BOOL v25 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"-th group has mismatched embedding table and feature transform ", 63);
                          int32x2_t v26 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" vs ", 4);
                          std::ostream::operator<<();
                          goto LABEL_40;
                        }
                        if (*(_DWORD *)(result + 12) != *(_DWORD *)(v17 + 12))
                        {
                          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                          long long v27 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"-th group has feature transform output dim ", 43);
                          BOOL v28 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" does not match component output dim ", 37);
                          std::ostream::operator<<();
                          goto LABEL_40;
                        }
                      }
                      v10 += v15;
                      v11 += v14;
                      ++v9;
                    }
                    while (v4 != v9);
                    if (*(_DWORD *)(result + 8) == v11)
                    {
                      if (*(unsigned char *)(result + 460) || v10 == *(_DWORD *)(result + 12))
                      {
                        *(unsigned char *)(result + 544) = 1;
                        return result;
                      }
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Total embedding size of ", 24);
                      char v41 = (void *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" doesn't match the component output size of ", 44);
                      int v42 = (void *)std::ostream::operator<<();
                      std::operator<<[abi:ne180100]<std::char_traits<char>>(v42, " when transforms are not used");
                    }
                    else
                    {
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"input dim of the component is ", 30);
                      uint64_t v39 = (void *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" , while the input dim defined in max items is ", 47);
                      std::ostream::operator<<();
                    }
                  }
                }
                else
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the actual number of embedding tables is ", 41);
                  uint64_t v38 = (void *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" and different than ", 20);
                  std::ostream::operator<<();
                }
              }
              else
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
                long long v36 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" groups, but ", 13);
                BOOL v37 = (void *)std::ostream::operator<<();
                std::operator<<[abi:ne180100]<std::char_traits<char>>(v37, " groups have assigned tables");
              }
            }
            else
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
              uint64_t v35 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" groups, but the embedding dim list size is ", 44);
              std::ostream::operator<<();
            }
          }
          else
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
            float v34 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" groups, but the max item list size is ", 39);
            std::ostream::operator<<();
          }
        }
        else
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
          long long v33 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" groups, but the number vocab list size is ", 43);
          std::ostream::operator<<();
        }
      }
    }
LABEL_40:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43);
  }
  return result;
}

void sub_1B23ED504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  long long v70 = 0uLL;
  uint64_t v71 = 0;
  uint64_t v8 = (char *)(a1 + 460);
  *(unsigned char *)(a1 + 460) = 1;
  uint64_t v9 = (float *)(a1 + 452);
  float v63 = (std::vector<unsigned int> *)(a1 + 176);
  uint64_t v64 = (float *)(a1 + 456);
  long long v62 = (std::vector<unsigned int> *)(a1 + 152);
  long long v65 = (std::vector<unsigned int> *)(a1 + 104);
  uint64_t v66 = (std::vector<unsigned int> *)(a1 + 128);
  int v10 = (int *)(a1 + 200);
  int v11 = (int *)(a1 + 96);
  while (kaldi::Peek(a2, a3) == 60)
  {
    kaldi::ReadToken(a2, a3, (uint64_t)&v70);
    if (SHIBYTE(v71) < 0)
    {
      uint64_t v16 = *((void *)&v70 + 1);
      if (*((void *)&v70 + 1) != 11) {
        goto LABEL_25;
      }
      BOOL v17 = *(void *)v70 == 0x756F72476D754E3CLL && *(void *)(v70 + 3) == 0x3E7370756F72476DLL;
      uint64_t v14 = (uint64_t)v11;
      if (v17
        || (*(void *)v70 == 0x6C6261546D754E3CLL ? (BOOL v18 = *(void *)(v70 + 3) == 0x3E73656C6261546DLL) : (BOOL v18 = 0),
            uint64_t v14 = (uint64_t)v10,
            v18))
      {
LABEL_75:
        kaldi::ReadBasicType<int>(a2, a3, v14);
      }
      else
      {
        uint64_t v16 = *((void *)&v70 + 1);
LABEL_25:
        if (v16 == 12)
        {
          if (*(void *)v70 == 0x69536261636F563CLL && *(_DWORD *)(v70 + 8) == 1047750010)
          {
LABEL_94:
            std::string __p = 0;
            uint64_t v68 = 0;
            uint64_t v69 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v65);
            goto LABEL_137;
          }
          uint64_t v16 = *((void *)&v70 + 1);
        }
        if (v16 != 10) {
          goto LABEL_37;
        }
        if (*(void *)v70 == 0x6D65744978614D3CLL && *(_WORD *)(v70 + 8) == 15987)
        {
LABEL_93:
          std::string __p = 0;
          uint64_t v68 = 0;
          uint64_t v69 = 0;
          kaldi::ReadToken(a2, a3, (uint64_t)&__p);
          kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v66);
LABEL_137:
          if (SHIBYTE(v69) < 0) {
            operator delete(__p);
          }
        }
        else
        {
          uint64_t v16 = *((void *)&v70 + 1);
LABEL_37:
          if (v16 == 17)
          {
            if (*(void *)v70 == 0x69446465626D453CLL
              && *(void *)(v70 + 8) == 0x736E6F69736E656DLL
              && *(unsigned char *)(v70 + 16) == 62)
            {
LABEL_135:
              std::string __p = 0;
              uint64_t v68 = 0;
              uint64_t v69 = 0;
              kaldi::ReadToken(a2, a3, (uint64_t)&__p);
              kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v62);
              goto LABEL_137;
            }
            uint64_t v16 = *((void *)&v70 + 1);
          }
          if (v16 != 15) {
            goto LABEL_52;
          }
          if (*(void *)v70 == 0x656E67697373413CLL && *(void *)(v70 + 7) == 0x3E656C6261546465)
          {
LABEL_134:
            std::string __p = 0;
            uint64_t v68 = 0;
            uint64_t v69 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v63);
            goto LABEL_137;
          }
          uint64_t v16 = *((void *)&v70 + 1);
LABEL_52:
          if (v16 != 18) {
            goto LABEL_61;
          }
          if (*(void *)v70 == 0x6E6569646172473CLL
            && *(void *)(v70 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v70 + 16) == 15973)
          {
LABEL_136:
            std::string __p = 0;
            uint64_t v68 = 0;
            uint64_t v69 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p);
            *(_DWORD *)(a1 + 448) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&__p);
            goto LABEL_137;
          }
          uint64_t v16 = *((void *)&v70 + 1);
LABEL_61:
          if (v16 == 9)
          {
            BOOL v26 = *(void *)v70 == 0x6461724778614D3CLL && *(unsigned char *)(v70 + 8) == 62;
            long long v27 = v9;
            if (v26) {
              goto LABEL_92;
            }
            uint64_t v16 = *((void *)&v70 + 1);
          }
          if (v16 == 15)
          {
            BOOL v28 = *(void *)v70 == 0x61526E7261654C3CLL && *(void *)(v70 + 7) == 0x3E66656F43657461;
            long long v27 = v64;
            if (v28) {
              goto LABEL_92;
            }
            uint64_t v16 = *((void *)&v70 + 1);
          }
          if (v16 != 14) {
            goto LABEL_167;
          }
          uint64_t v12 = (uint64_t *)v70;
LABEL_128:
          uint64_t v38 = *v12;
          uint64_t v39 = *(uint64_t *)((char *)v12 + 6);
          if (v38 != 0x6E6172546573553CLL || v39 != 0x3E6D726F66736E61) {
            goto LABEL_167;
          }
          kaldi::ReadBasicType<BOOL>(a2, a3, v8);
        }
      }
    }
    else
    {
      uint64_t v12 = (uint64_t *)&v70;
      switch(HIBYTE(v71))
      {
        case 9:
          goto LABEL_87;
        case 0xA:
          goto LABEL_82;
        case 0xB:
          BOOL v13 = (void)v70 == 0x756F72476D754E3CLL && *(void *)((char *)&v70 + 3) == 0x3E7370756F72476DLL;
          uint64_t v14 = (uint64_t)v11;
          if (!v13)
          {
            BOOL v15 = (void)v70 == 0x6C6261546D754E3CLL && *(void *)((char *)&v70 + 3) == 0x3E73656C6261546DLL;
            uint64_t v14 = (uint64_t)v10;
            if (!v15) {
              goto LABEL_80;
            }
          }
          goto LABEL_75;
        case 0xC:
          if ((void)v70 == 0x69536261636F563CLL && DWORD2(v70) == 1047750010) {
            goto LABEL_94;
          }
LABEL_80:
          if (HIBYTE(v71) == 9) {
            goto LABEL_87;
          }
          if (HIBYTE(v71) != 10) {
            goto LABEL_167;
          }
LABEL_82:
          if ((void)v70 == 0x6D65744978614D3CLL && WORD4(v70) == 15987) {
            goto LABEL_93;
          }
LABEL_86:
          if (HIBYTE(v71) == 9) {
            goto LABEL_87;
          }
          goto LABEL_167;
        case 0xE:
          goto LABEL_128;
        case 0xF:
          goto LABEL_115;
        case 0x11:
          if ((void)v70 == 0x69446465626D453CLL
            && *((void *)&v70 + 1) == 0x736E6F69736E656DLL
            && v71 == 62)
          {
            goto LABEL_135;
          }
          if (HIBYTE(v71) == 9) {
            goto LABEL_87;
          }
          if (HIBYTE(v71) == 14) {
            goto LABEL_127;
          }
          if (HIBYTE(v71) != 15) {
            goto LABEL_167;
          }
LABEL_115:
          if ((void)v70 == 0x656E67697373413CLL && *(void *)((char *)&v70 + 7) == 0x3E656C6261546465) {
            goto LABEL_134;
          }
          switch(HIBYTE(v71))
          {
            case 9u:
LABEL_87:
              BOOL v31 = (void)v70 == 0x6461724778614D3CLL && BYTE8(v70) == 62;
              long long v27 = v9;
              if (!v31) {
                goto LABEL_167;
              }
              break;
            case 0xEu:
LABEL_127:
              uint64_t v12 = (uint64_t *)&v70;
              goto LABEL_128;
            case 0xFu:
LABEL_122:
              BOOL v37 = (void)v70 == 0x61526E7261654C3CLL && *(void *)((char *)&v70 + 7) == 0x3E66656F43657461;
              long long v27 = v64;
              if (!v37)
              {
LABEL_167:
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
                uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
                if (v71 >= 0) {
                  uint64_t v59 = &v70;
                }
                else {
                  uint64_t v59 = (long long *)v70;
                }
                if (v71 >= 0) {
                  uint64_t v60 = HIBYTE(v71);
                }
                else {
                  uint64_t v60 = *((void *)&v70 + 1);
                }
                unint64_t v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)v59, v60);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)", a typo in config? (NumGroups|VocabSizes|MaxDimensions|EmbedDimensions|LearnRateCoef)", 86);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
              }
              break;
            default:
              goto LABEL_167;
          }
          return;
        case 0x12:
          if ((void)v70 == 0x6E6569646172473CLL
            && *((void *)&v70 + 1) == 0x7079546D726F4E74
            && (unsigned __int16)v71 == 15973)
          {
            goto LABEL_136;
          }
          if (HIBYTE(v71) == 15) {
            goto LABEL_122;
          }
          if (HIBYTE(v71) == 14) {
            goto LABEL_127;
          }
          goto LABEL_86;
        default:
          goto LABEL_167;
      }
LABEL_92:
      kaldi::ReadBasicType<float>(a2, a3, v27);
    }
  }
  std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::resize((uint64_t *)(a1 + 208), *(int *)(a1 + 200));
  if (*v10 >= 1) {
    operator new();
  }
  kaldi::ExpectToken(a2, a3, "</Component>");
  char v41 = (char **)(a1 + 256);
  kaldi::DeletePointers<kaldi::nnet1::UpdatableComponent>((void *)(a1 + 256));
  if (*(unsigned char *)(a1 + 460) && *v11 >= 1)
  {
    int v42 = 0;
    do
    {
      kaldi::ExpectToken(a2, a3, "<FeatureTransform>");
      float v43 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
      if (!v43
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"failed to read feature transform", 32);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      float v45 = v44;
      kaldi::ExpectToken(a2, a3, "</Component>");
      uint64_t v47 = *(void **)(a1 + 264);
      unint64_t v46 = *(void *)(a1 + 272);
      if ((unint64_t)v47 >= v46)
      {
        uint64_t v49 = ((char *)v47 - *v41) >> 3;
        if ((unint64_t)(v49 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v50 = v46 - (void)*v41;
        uint64_t v51 = v50 >> 2;
        if (v50 >> 2 <= (unint64_t)(v49 + 1)) {
          uint64_t v51 = v49 + 1;
        }
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v52 = v51;
        }
        if (v52) {
          long long v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 272, v52);
        }
        else {
          long long v53 = 0;
        }
        float v54 = &v53[8 * v49];
        *(void *)float v54 = v45;
        long long v48 = v54 + 8;
        float v56 = *(char **)(a1 + 256);
        unint64_t v55 = *(char **)(a1 + 264);
        if (v55 != v56)
        {
          do
          {
            uint64_t v57 = *((void *)v55 - 1);
            v55 -= 8;
            *((void *)v54 - 1) = v57;
            v54 -= 8;
          }
          while (v55 != v56);
          unint64_t v55 = *v41;
        }
        *(void *)(a1 + 256) = v54;
        *(void *)(a1 + 264) = v48;
        *(void *)(a1 + 272) = &v53[8 * v52];
        if (v55) {
          operator delete(v55);
        }
      }
      else
      {
        *uint64_t v47 = v45;
        long long v48 = v47 + 1;
      }
      *(void *)(a1 + 264) = v48;
      ++v42;
    }
    while (v42 < *(_DWORD *)(a1 + 96));
  }
  *(unsigned char *)(a1 + 16) = 0;
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  if (SHIBYTE(v71) < 0) {
    operator delete((void *)v70);
  }
}

void sub_1B23EDF90(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WriteConfig(uint64_t a1, void *a2, uint64_t a3)
{
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  kaldi::WriteToken(a2, a3, "<NumGroups>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<NumTables>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<VocabSizes>");
  kaldi::JoinVectorToString<int>((void *)(a1 + 104), ",", (uint64_t)v7);
  kaldi::WriteToken(a2, a3, (char *)v7);
  kaldi::WriteToken(a2, a3, "<MaxItems>");
  kaldi::JoinVectorToString<int>((void *)(a1 + 128), ",", (uint64_t)v7);
  kaldi::WriteToken(a2, a3, (char *)v7);
  kaldi::WriteToken(a2, a3, "<EmbedDimensions>");
  kaldi::JoinVectorToString<int>((void *)(a1 + 152), ",", (uint64_t)v7);
  kaldi::WriteToken(a2, a3, (char *)v7);
  kaldi::WriteToken(a2, a3, "<AssignedTable>");
  kaldi::JoinVectorToString<int>((void *)(a1 + 176), ",", (uint64_t)v7);
  kaldi::WriteToken(a2, a3, (char *)v7);
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 448), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<UseTransform>");
  kaldi::WriteBasicType<BOOL>(a2, a3, *(unsigned __int8 *)(a1 + 460));
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
}

void sub_1B23EE1F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WriteData(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 168))(a1, a2, a3);
  uint64_t v8 = *(uint64_t ***)(a1 + 208);
  uint64_t v9 = *(uint64_t ***)(a1 + 216);
  while (v8 != v9)
  {
    int v10 = *v8++;
    kaldi::CompressedMatrix::Write(v10, a2, a3, a4);
  }
  double result = kaldi::WriteToken(a2, a3, "</Component>");
  if (*(unsigned char *)(a1 + 460))
  {
    uint64_t v12 = *(uint64_t **)(a1 + 256);
    for (uint64_t i = *(uint64_t **)(a1 + 264); v12 != i; result = kaldi::WriteToken(a2, a3, "</Component>"))
    {
      kaldi::WriteToken(a2, a3, "<FeatureTransform>");
      uint64_t v14 = *v12++;
      kaldi::nnet1::Component::Write(v14, a2, a3, a4);
    }
  }
  return result;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::NumParams(void *a1)
{
  uint64_t v1 = (uint64_t **)a1[26];
  uint64_t v2 = (uint64_t **)a1[27];
  if (v1 == v2)
  {
    uint64_t v3 = 0;
  }
  else
  {
    LODWORD(v3) = 0;
    do
    {
      uint64_t v4 = **v1;
      if (v4) {
        LODWORD(v4) = *(_DWORD *)(v4 + 12) * *(_DWORD *)(v4 + 8);
      }
      uint64_t v3 = (v4 + v3);
      ++v1;
    }
    while (v1 != v2);
  }
  uint64_t v5 = (uint64_t *)a1[32];
  uint64_t v6 = (uint64_t *)a1[33];
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    uint64_t v3 = (*(unsigned int (**)(uint64_t))(*(void *)v7 + 176))(v7) + v3;
  }
  return v3;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::GetParams(void *a1, void **a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 1);
  uint64_t v5 = (uint64_t **)a1[26];
  uint64_t v6 = (uint64_t **)a1[27];
  if (v5 == v6)
  {
    int v10 = 0;
  }
  else
  {
    int v7 = 0;
    do
    {
      uint64_t v8 = *v5;
      uint64_t v9 = **v5;
      if (v9) {
        LODWORD(v9) = *(_DWORD *)(v9 + 12) * *(_DWORD *)(v9 + 8);
      }
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      int v10 = v9 + v7;
      uint64_t v16 = (uint64_t)*a2 + 4 * v7;
      LODWORD(v17) = v9;
      kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v16, v8);
      ++v5;
      int v7 = v10;
    }
    while (v5 != v6);
  }
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v12 = (void *)a1[32];
  for (uint64_t i = (void *)a1[33]; v12 != i; ++v12)
  {
    (*(void (**)(void, uint64_t *))(*(void *)*v12 + 184))(*v12, &v16);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v13 = (uint64_t)*a2 + 4 * v10;
    LODWORD(v14) = v17;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v13, (const void **)&v16);
    v10 += v17;
  }
  kaldi::Vector<float>::Destroy((uint64_t)&v16);
}

void sub_1B23EE540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::SetParams(void *a1, void *a2)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check((uint64_t)a1);
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  uint64_t v5 = (uint64_t **)a1[26];
  uint64_t v6 = (uint64_t **)a1[27];
  if (v5 == v6)
  {
    int v10 = 0;
  }
  else
  {
    int v7 = 0;
    do
    {
      uint64_t v8 = *v5;
      uint64_t v9 = **v5;
      if (v9) {
        LODWORD(v9) = *(_DWORD *)(v9 + 12) * *(_DWORD *)(v9 + 8);
      }
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      int v10 = v9 + v7;
      uint64_t v16 = (char *)(*a2 + 4 * v7);
      LODWORD(v17) = v9;
      uint64_t result = kaldi::CompressedMatrix::CopyRowsFromVec<float>(v8, &v16);
      ++v5;
      int v7 = v10;
    }
    while (v5 != v6);
  }
  uint64_t v12 = (uint64_t *)a1[32];
  for (i = (uint64_t *)a1[33]; v12 != i; int v10 = v15)
  {
    int v13 = (*(uint64_t (**)(void))(*(void *)*v12 + 176))();
    uint64_t v14 = *v12++;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v15 = v13 + v10;
    uint64_t v16 = (char *)(*a2 + 4 * v10);
    LODWORD(v17) = v13;
    uint64_t result = (*(uint64_t (**)(uint64_t, char **))(*(void *)v14 + 192))(v14, &v16);
  }
  return result;
}

float kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::SumParams(void *a1)
{
  uint64_t v2 = (kaldi::CompressedMatrix **)a1[26];
  uint64_t v3 = (kaldi::CompressedMatrix **)a1[27];
  float v4 = 0.0;
  while (v2 != v3)
  {
    uint64_t v5 = *v2++;
    float v4 = v4 + kaldi::CompressedMatrix::Sum(v5);
  }
  int v7 = (uint64_t *)a1[32];
  uint64_t v6 = (uint64_t *)a1[33];
  while (v7 != v6)
  {
    uint64_t v8 = *v7++;
    float v4 = v4 + (*(float (**)(uint64_t))(*(void *)v8 + 208))(v8);
  }
  return v4;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::PerturbParams()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Info(void *a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  (*(void (**)(void *, void *, void))(*a1 + 168))(a1, v19, 0);
  uint64_t v2 = (kaldi::nnet1 **)a1[26];
  for (uint64_t i = (kaldi::nnet1 **)a1[27]; v2 != i; ++v2)
  {
    float v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n## Embedding Table: ", 21);
    kaldi::nnet1::MomentStatistics((uint64_t *)&__p, *v2, v5);
    if ((v18 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v18 & 0x80u) == 0) {
      uint64_t v7 = v18;
    }
    else {
      uint64_t v7 = v17;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, v7);
    if ((char)v18 < 0) {
      operator delete(__p);
    }
  }
  uint64_t v8 = a1[32];
  for (uint64_t j = a1[33]; v8 != j; v8 += 8)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n## Feature Transform: input-dim ", 33);
    int v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", output-dim ", 13);
    int v11 = (void *)std::ostream::operator<<();
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n", 1);
    (*(void (**)(void **__return_ptr))(**(void **)v8 + 64))(&__p);
    if ((v18 & 0x80u) == 0) {
      int v13 = &__p;
    }
    else {
      int v13 = __p;
    }
    if ((v18 & 0x80u) == 0) {
      uint64_t v14 = v18;
    }
    else {
      uint64_t v14 = v17;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    if ((char)v18 < 0) {
      operator delete(__p);
    }
  }
  std::stringbuf::str();
  v19[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v19 + *(void *)(v19[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v19[1] = MEMORY[0x1E4FBA470] + 16;
  if (v20 < 0) {
    operator delete((void *)v19[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v21);
}

void sub_1B23EEA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t kaldi::nnet1::MomentStatistics(kaldi::nnet1 *this, const kaldi::CompressedMatrix *a2)
{
  kaldi::Matrix<float>::Matrix(v6, this);
  int v2 = kaldi::MatrixBase<float>::NumRows((uint64_t)v6);
  int v3 = kaldi::MatrixBase<float>::NumCols((uint64_t)v6);
  memset(v5, 0, sizeof(v5));
  kaldi::Vector<float>::Resize(v5, (v3 * v2), 0);
  kaldi::VectorBase<float>::CopyRowsFromMat(v5, (uint64_t)v6);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v5);
  kaldi::Vector<float>::Destroy((uint64_t)v5);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v6);
}

void sub_1B23EEB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::InfoGradient(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"No intermediate gradients for embedding tables, here is the gradient info for the transforms: ", 94);
  uint64_t v2 = *(void *)(a1 + 256);
  for (uint64_t i = *(void *)(a1 + 264); v2 != i; v2 += 8)
  {
    (*(void (**)(void **__return_ptr))(**(void **)v2 + 72))(__p);
    if ((v9 & 0x80u) == 0) {
      float v4 = __p;
    }
    else {
      float v4 = (void **)__p[0];
    }
    if ((v9 & 0x80u) == 0) {
      uint64_t v5 = v9;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n", 1);
    if ((char)v9 < 0) {
      operator delete(__p[0]);
    }
  }
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v10[1] = MEMORY[0x1E4FBA470] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v12);
}

void sub_1B23EED08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::SetTrainOptions(uint64_t result, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(result + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(result + 56) = v2;
  int v3 = *(uint64_t **)(result + 256);
  for (uint64_t i = *(uint64_t **)(result + 264);
        v3 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 264))(v6, a2))
  {
    uint64_t v6 = *v3++;
  }
  return result;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  int32x2_t v6 = *(int32x2_t *)(a3 + 32);
  uint64_t v7 = *(unsigned int *)(a2 + 20);
  kaldi::CuMatrixBase<float>::SetZero(a3);
  if (*(unsigned char *)(a1 + 460))
  {
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 280), *(int *)(a1 + 96));
    int64_t v8 = *(int *)(a1 + 96);
    if ((int)v8 > 0)
    {
      uint64_t v9 = 0;
      int64_t v10 = 0;
      int v11 = 0;
      do
      {
        uint64_t v12 = (int32x2_t *)(*(void *)(a1 + 280) + v9);
        v12[4] = v6;
        kaldi::CuMatrix<float>::Resize(v12, v7, *(unsigned int *)(*(void *)(a1 + 152) + 4 * v10), 0, 0);
        int v13 = *(uint64_t **)(*(void *)(a1 + 208) + 8 * *(int *)(*(void *)(a1 + 176) + 4 * v10));
        uint64_t v14 = *(void *)(a1 + 280) + v9;
        uint64_t v15 = *(void *)(a2 + 8) + 4 * v11;
        int v16 = *(_DWORD *)(a2 + 28) - v11;
        uint64_t v17 = *(void *)(a2 + 32);
        LODWORD(v34[1]) = *(_DWORD *)(*(void *)(a1 + 128) + 4 * v10);
        *(void *)((char *)&v34[1] + 4) = *(void *)(a2 + 20);
        HIDWORD(v34[2]) = v16;
        v34[3] = v17;
        long long v33 = &unk_1F0A472A0;
        v34[0] = v15;
        kaldi::CuMatrixBase<float>::SummarizeVec(v14, v13, (uint64_t)&v33);
        long long v33 = &unk_1F0A472A0;
        memset(v34, 0, sizeof(v34));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v33);
        v11 += *(_DWORD *)(*(void *)(a1 + 128) + 4 * v10++);
        int64_t v8 = *(int *)(a1 + 96);
        v9 += 48;
      }
      while (v10 < v8);
    }
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 304), v8);
    if (*(int *)(a1 + 96) >= 1)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      do
      {
        char v20 = (int32x2_t *)(*(void *)(a1 + 304) + v18);
        v20[4] = v6;
        kaldi::nnet1::Component::Propagate(*(_DWORD **)(*(void *)(a1 + 256) + 8 * v19), *(void *)(a1 + 280) + v18, v20, 0);
        kaldi::CuMatrixBase<float>::AddMat(a3, *(void *)(a1 + 304) + v18, 111, 1.0, 1.0);
        ++v19;
        v18 += 48;
      }
      while (v19 < *(int *)(a1 + 96));
    }
  }
  else if (*(int *)(a1 + 96) >= 1)
  {
    uint64_t v21 = 0;
    unsigned int v22 = 0;
    unsigned int v23 = 0;
    uint64_t v24 = *(void *)(a1 + 152);
    uint64_t v25 = *(void *)(a1 + 128);
    do
    {
      uint64_t v26 = *(void *)(a3 + 8) + 4 * v22;
      unsigned int v27 = *(_DWORD *)(a3 + 28) - v22;
      uint64_t v28 = *(void *)(a3 + 32);
      LODWORD(v34[1]) = *(_DWORD *)(v24 + 4 * v21);
      *(void *)((char *)&v34[1] + 4) = *(void *)(a3 + 20);
      HIDWORD(v34[2]) = v27;
      v34[3] = v28;
      long long v33 = &unk_1F0A472A0;
      v34[0] = v26;
      BOOL v29 = *(uint64_t **)(*(void *)(a1 + 208) + 8 * *(int *)(*(void *)(a1 + 176) + 4 * v21));
      uint64_t v30 = *(void *)(a2 + 8) + 4 * v23;
      LODWORD(v26) = *(_DWORD *)(a2 + 28) - v23;
      uint64_t v31 = *(void *)(a2 + 32);
      LODWORD(v32[2]) = *(_DWORD *)(v25 + 4 * v21);
      *(void *)((char *)&v32[2] + 4) = *(void *)(a2 + 20);
      HIDWORD(v32[3]) = v26;
      v32[4] = v31;
      v32[0] = &unk_1F0A472A0;
      v32[1] = v30;
      kaldi::CuMatrixBase<float>::SummarizeVec((uint64_t)&v33, v29, (uint64_t)v32);
      v32[0] = &unk_1F0A472A0;
      memset(&v32[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v32);
      long long v33 = &unk_1F0A472A0;
      memset(v34, 0, sizeof(v34));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v33);
      uint64_t v24 = *(void *)(a1 + 152);
      v22 += *(_DWORD *)(v24 + 4 * v21);
      uint64_t v25 = *(void *)(a1 + 128);
      v23 += *(_DWORD *)(v25 + 4 * v21++);
    }
    while (v21 < *(int *)(a1 + 96));
  }
}

void sub_1B23EF0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _OWORD *v15 = 0u;
  v15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::SetGradientNormalization(uint64_t a1, uint64_t a2, float a3)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  int32x2_t v6 = *(uint64_t **)(a1 + 256);
  uint64_t v7 = *(uint64_t **)(a1 + 264);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, uint64_t, float))(*(void *)v8 + 240))(v8, a2, a3);
  }
  if (a2 == 3)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"RMSPROP is not implemented in word multi embedding yet", 54);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    }
  }
  else
  {
    *(float *)(a1 + 452) = a3;
    *(_DWORD *)(a1 + 448) = a2;
  }
}

void sub_1B23EF1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::GetNormalizedLearningRate(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 84)) {
    return *(float *)(a1 + 56);
  }
  int v1 = *(_DWORD *)(a1 + 464);
  if (v1 < 1) {
    return NAN;
  }
  else {
    return *(float *)(a1 + 56) / (float)v1;
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::AccumGradients()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::UpdateWeights()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v8, 1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  long long v28 = 0u;
  long long v27 = 0u;
  int32x2_t v26 = (int32x2_t)&unk_1F0A51768;
  char v29 = 0;
  kaldi::nnet1::Component::Propagate((_DWORD *)v9, a2, &v26, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v9 + 232))(v9, a2, a3, 0, 0);
  int64_t v10 = *(uint64_t **)(v9 + 232);
  int v11 = *(uint64_t **)(v9 + 240);
  if (v10 == v11)
  {
    int v12 = 0;
  }
  else
  {
    int v12 = 0;
    do
    {
      uint64_t v13 = *v10;
      int v14 = *(_DWORD *)(*v10 + 16) * *(_DWORD *)(*v10 + 20);
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v23 = (uint64_t)*a4 + 4 * v12;
      LODWORD(v24) = v14;
      kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v23, v13);
      v12 += v14;
      ++v10;
    }
    while (v10 != v11);
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  if (*(unsigned char *)(a1 + 460))
  {
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    kaldi::nnet1::Component::Propagate((_DWORD *)v15, a2, &v26, 0);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    if (*(int *)(a1 + 96) < 1)
    {
      if (!v15)
      {
LABEL_13:
        kaldi::Vector<float>::Destroy((uint64_t)&v23);
        return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v26);
      }
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      do
      {
        uint64_t v18 = *(void *)(*(void *)(v15 + 256) + 8 * v17);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v18 + 224))(v18, *(void *)(v15 + 280) + v16, a3, &v23);
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v20 = (uint64_t)*a4 + 4 * v12;
        LODWORD(v21) = v24;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v20, (const void **)&v23);
        v12 += v24;
        ++v17;
        v16 += 48;
      }
      while (v17 < *(int *)(a1 + 96));
    }
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    goto LABEL_13;
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v26);
}

void sub_1B23EF5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::EnsureCorrs((void *)a1);
  if (*(unsigned char *)(a1 + 460))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "Not implemented yet when transforms are used");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  *a3 = 0;
  int32x2_t v6 = *(char **)(a1 + 208);
  uint64_t v7 = *(char **)(a1 + 216);
  uint64_t v8 = v7 - v6;
  if (v7 != v6)
  {
    int v9 = 0;
    unint64_t v10 = v8 >> 3;
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    do
    {
      uint64_t v11 = **(void **)v6;
      if (v11) {
        LODWORD(v11) = *(_DWORD *)(v11 + 12) * *(_DWORD *)(v11 + 8);
      }
      v9 += v11;
      *a3 = v9;
      v6 += 8;
      --v10;
    }
    while (v10);
  }
  uint64_t v12 = *(void *)(a1 + 232);
  uint64_t v13 = *(void *)(a1 + 240);
  *a2 = 0;
  if (v13 != v12)
  {
    unint64_t v14 = 0;
    do
    {
      *a3 += kaldi::CuMatrixBase<float>::CountZeros(*(void *)(v12 + 8 * v14++));
      uint64_t v12 = *(void *)(a1 + 232);
    }
    while (v14 < (*(void *)(a1 + 240) - v12) >> 3);
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::EnsureCorrs(void *a1)
{
  unint64_t v1 = (uint64_t)(a1[27] - a1[26]) >> 3;
  if (v1 != (uint64_t)(a1[30] - a1[29]) >> 3)
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 29, v1);
    if (a1[27] != a1[26]) {
      operator new();
    }
  }
}

void sub_1B23EF7C4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::VectorizeWeightsCorrs()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::IsUpdatable()
{
  return 0;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::GetType()
{
  return 272;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::GetType()
{
  return 270;
}

void *kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::PerturbParams(void *a1, float a2)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check((uint64_t)a1);
  memset(&v21[1], 0, 24);
  v21[0] = &unk_1F0A517C0;
  int v17 = 1729;
  unsigned int v4 = 5489;
  char v18 = 0;
  int v19 = 5489;
  uint64_t v5 = 1;
  for (uint64_t i = 3; i != 626; ++i)
  {
    int v7 = 1812433253 * (v4 ^ (v4 >> 30));
    unsigned int v4 = v7 + v5;
    *(&v17 + i) = i + v7 - 2;
    ++v5;
  }
  uint64_t v20 = 0;
  uint64_t v8 = (uint64_t *)a1[26];
  for (uint64_t j = (uint64_t *)a1[27]; v8 != j; ++v8)
  {
    kaldi::CuVector<float>::Resize((uint64_t)v21, (*(_DWORD *)(*v8 + 16) * *(_DWORD *)(*v8 + 20)), 1);
    kaldi::CuRandom::RandGauss<float>(&v17, (uint64_t)v21, 0.0, 1.0);
    uint64_t v10 = *v8;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v14, (uint64_t)v21, *(_DWORD *)(*v8 + 20));
    kaldi::CuMatrixBase<float>::AddMat(v10, (uint64_t)&v14, 111, a2, 1.0);
    unint64_t v14 = &unk_1F0A472A0;
    long long v15 = 0u;
    long long v16 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v14);
  }
  uint64_t v12 = a1[32];
  uint64_t v11 = a1[33];
  while (v12 != v11)
  {
    (*(void (**)(float))(**(void **)v12 + 216))(a2);
    v12 += 8;
  }
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v17);
  return kaldi::CuVector<float>::~CuVector(v21);
}

void sub_1B23EFA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  kaldi::CuVector<float>::~CuVector((void *)(v7 - 112));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((void *)a1);
  int v10 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 464) = v10;
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 328), *(int *)(a1 + 96));
  if (*(unsigned char *)(a1 + 460) && *(int *)(a1 + 96) >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (int32x2_t *)(*(void *)(a1 + 328) + v11);
      v13[4] = (int32x2_t)a4;
      kaldi::nnet1::Component::Backpropagate(*(_DWORD **)(*(void *)(a1 + 256) + 8 * v12), *(void *)(a1 + 280) + v11, *(void *)(a1 + 304) + v11, a3, v13, a5);
      uint64_t v14 = *(void *)(*(void *)(a1 + 256) + 8 * v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 232))(v14, *(void *)(a1 + 280) + v11, a3, a4, a5);
      ++v12;
      v11 += 48;
    }
    while (v12 < *(int *)(a1 + 96));
  }
  if (*(int *)(a1 + 80) > 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v44, "WordMultiVecComponent doesn't support multi-batches yet");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v44);
  }
  memset(v45, 0, sizeof(v45));
  long long v44 = &unk_1F0A472A0;
  uint64_t v15 = *(void *)(a1 + 232);
  if (*(void *)(a1 + 240) != v15)
  {
    unint64_t v16 = 0;
    do
    {
      kaldi::CuMatrixBase<float>::SetZero(*(void *)(v15 + 8 * v16++));
      uint64_t v15 = *(void *)(a1 + 232);
    }
    while (v16 < (*(void *)(a1 + 240) - v15) >> 3);
  }
  uint64_t v37 = a3;
  if (*(int *)(a1 + 96) >= 1)
  {
    uint64_t v17 = 0;
    unsigned int v39 = 0;
    float v40 = (int32x2_t *)(a1 + 352);
    unsigned int v41 = 0;
    long long v36 = (int32x2_t *)(a1 + 400);
    float v18 = (float)v10;
    uint64_t v38 = a4;
    do
    {
      if (*(unsigned char *)(a1 + 460))
      {
        int v19 = (int32x2_t *)(*(void *)(a1 + 328) + 48 * v17);
      }
      else
      {
        int v20 = *(_DWORD *)(*(void *)(a1 + 152) + 4 * v17);
        unsigned int v21 = *(_DWORD *)(v37 + 28) - v39;
        uint64_t v22 = *(void *)(v37 + 32);
        *(void *)&v45[0] = *(void *)(v37 + 8) + 4 * v39;
        DWORD2(v45[0]) = v20;
        *(void *)((char *)v45 + 12) = *(void *)(v37 + 20);
        DWORD1(v45[1]) = v21;
        *((void *)&v45[1] + 1) = v22;
        int v42 = &unk_1F0A472A0;
        memset(v43, 0, sizeof(v43));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v42);
        v39 += *(_DWORD *)(*(void *)(a1 + 152) + 4 * v17);
        int v19 = (int32x2_t *)&v44;
      }
      float v23 = *(float *)(a1 + 452);
      if (v23 > 0.0)
      {
        *(void *)(a1 + 384) = a4;
        kaldi::CuMatrix<float>::operator=(v40, v19);
        int v24 = *(_DWORD *)(a1 + 448);
        if (v24 == 2)
        {
          int v26 = *(unsigned __int8 *)(a1 + 84);
          *(void *)(a1 + 432) = a4;
          kaldi::CuMatrix<float>::Resize(v36, *(unsigned int *)(a1 + 372), *(unsigned int *)(a1 + 368), 1, 0);
          if (v26) {
            float v27 = v18;
          }
          else {
            float v27 = 1.0;
          }
          int v19 = (int32x2_t *)(a1 + 352);
          kaldi::nnet1::UpdatableComponent::LimitL2NormGradient((uint64_t)v40, (int *)v36, v23 * v27);
        }
        else
        {
          int v19 = (int32x2_t *)(a1 + 352);
          if (v24 == 1)
          {
            if (*(unsigned char *)(a1 + 84)) {
              float v25 = v18;
            }
            else {
              float v25 = 1.0;
            }
            int v19 = (int32x2_t *)(a1 + 352);
            kaldi::nnet1::UpdatableComponent::ClipGradient((uint64_t)v40, v23 * v25);
          }
        }
      }
      uint64_t v28 = *(int *)(*(void *)(a1 + 176) + 4 * v17);
      *(void *)(*(void *)(*(void *)(a1 + 232) + 8 * v28) + 32) = a4;
      if (*(int *)(*(void *)(a1 + 128) + 4 * v17) >= 1)
      {
        int v29 = 0;
        uint64_t v30 = 4 * v41;
        int v31 = -v41;
        do
        {
          uint64_t v32 = *(void *)(*(void *)(a1 + 232) + 8 * v28);
          uint64_t v33 = *(void *)(a2 + 8) + v30;
          int v34 = v31 + *(_DWORD *)(a2 + 28);
          uint64_t v35 = *(void *)(a2 + 32);
          LODWORD(v43[1]) = 1;
          *(void *)((char *)&v43[1] + 4) = *(void *)(a2 + 20);
          HIDWORD(v43[2]) = v34;
          v43[3] = v35;
          int v42 = &unk_1F0A472A0;
          v43[0] = v33;
          kaldi::CuMatrixBase<float>::AddIndexedRows(v32, (uint64_t)&v42, (uint64_t)v19, 1.0);
          int v42 = &unk_1F0A472A0;
          memset(v43, 0, sizeof(v43));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v42);
          ++v29;
          v30 += 4;
          --v31;
        }
        while (v29 < *(_DWORD *)(*(void *)(a1 + 128) + 4 * v17));
        v41 += v29;
        a4 = v38;
      }
      ++v17;
    }
    while (v17 < *(int *)(a1 + 96));
  }
  long long v44 = &unk_1F0A472A0;
  memset(v45, 0, sizeof(v45));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v44);
}

void sub_1B23EFE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _OWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  a24 = a10;
  *a11 = 0u;
  a11[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a24);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::UpdateWeights(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((void *)a1);
  float v6 = *(float *)(a1 + 72);
  int v7 = *(_DWORD *)(a1 + 76);
  if (v6 > 0.0 && *(unsigned char *)(a1 + 460))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "Using transform with gradient compression is not supported yet");
    goto LABEL_19;
  }
  uint64_t v8 = *(uint64_t **)(a1 + 256);
  int v9 = *(uint64_t **)(a1 + 264);
  while (v8 != v9)
  {
    uint64_t v10 = *v8++;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 256))(v10, a2, a3);
  }
  float v11 = *(float *)(a1 + 56);
  if (*(unsigned char *)(a1 + 84)) {
    float v11 = v11 / (float)*(int *)(a1 + 464);
  }
  if (v6 > 0.0)
  {
    if (*(int *)(a1 + 80) < 2)
    {
      if (*(void *)(a1 + 480) == *(void *)(a1 + 472)) {
        kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 472));
      }
      kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 472), v7, v6);
      goto LABEL_13;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "the multi batch gradient quantization does not work yet");
LABEL_19:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
LABEL_13:
  uint64_t v12 = *(void *)(a1 + 208);
  if (*(void *)(a1 + 216) != v12)
  {
    unint64_t v13 = 0;
    do
    {
      kaldi::CuMatrixBase<float>::AddMat(*(void *)(v12 + 8 * v13), *(void *)(*(void *)(a1 + 232) + 8 * v13), 111, *(float *)(a1 + 456) * (float)-v11, 1.0);
      ++v13;
      uint64_t v12 = *(void *)(a1 + 208);
    }
    while (v13 < (*(void *)(a1 + 216) - v12) >> 3);
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(unsigned char *)(a1 + 460))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Not implemented yet when transforms are used");
    goto LABEL_14;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Weights are already vectorized");
LABEL_14:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Performing vectorization of WordMultiVecComponent", 49);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v10);
  }
  if (*(void *)(a1 + 216) != *(void *)(a1 + 208)) {
    kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub();
  }
  unsigned int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  uint64_t v8 = *(void *)(a3 + 8);
  v10[0] = &unk_1F0A472D0;
  v10[1] = v8;
  uint64_t v10[2] = v7;
  uint64_t v10[3] = *(void *)(a3 + 24);
  kaldi::CuVectorBase<float>::Set((uint64_t)v10, *(float *)(a1 + 456));
  unsigned int v9 = *(_DWORD *)(a3 + 16) - v7;
  *(void *)(a3 + 8) += 4 * (int)v7;
  *(_DWORD *)(a3 + 16) = v9;
  *(void *)(a3 + 24) = 0;
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((void *)a1);
  if (a4[1] - *a4 != 32)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "veccorrs->size() == 1");
    goto LABEL_14;
  }
  if (*(void *)(a1 + 216) != *(void *)(a1 + 208)) {
    kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub();
  }
  *(unsigned char *)(a1 + 16) = 1;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Done  vectorization of WordMultiVecComponent", 44);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v10);
  }
}

void sub_1B23F0390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::IsUpdatable()
{
  return 1;
}

uint64_t std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(uint64_t a1, int32x2_t *a2, int32x2_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unsigned int v9 = *(int32x2_t **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    std::vector<kaldi::CuMatrix<float>>::__vdeallocate((void **)a1);
    if (a4 > 0x555555555555555) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v8, (uint64_t)a2, (uint64_t)a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4) < a4)
  {
    unint64_t v13 = &a2[2 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4)];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,0>(a2, v13, v9);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v8, (uint64_t)v13, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = (uint64_t)std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,0>(a2, a3, v9);
  uint64_t v15 = v14;
  unint64_t v16 = *(void **)(a1 + 8);
  if (v16 != v14)
  {
    uint64_t v17 = v16 - 6;
    float v18 = v16 - 6;
    int v19 = v16 - 6;
    do
    {
      uint64_t v20 = *v19;
      v19 -= 6;
      uint64_t result = (*(uint64_t (**)(void *))(v20 + 16))(v18);
      v17 -= 6;
      BOOL v21 = v18 == v15;
      float v18 = v19;
    }
    while (!v21);
  }
  *(void *)(a1 + 8) = v15;
  return result;
}

void sub_1B23F0558(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B23F0560(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<kaldi::CuMatrix<float>>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    unsigned int v4 = *a1;
    if (v3 != v1)
    {
      uint64_t v5 = v3 - 48;
      float v6 = v3 - 48;
      unsigned int v7 = v3 - 48;
      do
      {
        uint64_t v8 = *(void *)v7;
        v7 -= 48;
        (*(void (**)(char *))(v8 + 16))(v6);
        v5 -= 48;
        BOOL v9 = v6 == v1;
        float v6 = v7;
      }
      while (!v9);
      unsigned int v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WordMultiVecComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  *(_OWORD *)(a1 + 56) = xmmword_1B255E480;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = &unk_1F0A4C1D0;
  *(void *)(a1 + 88) = &unk_1F0A4C300;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 104), *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 128), *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 2);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 152), *(const void **)(a2 + 152), *(void *)(a2 + 160), (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 2);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  int v4 = *(_DWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 200) = v4;
  uint64_t v5 = (char **)(a1 + 256);
  uint64_t v25 = a1 + 304;
  uint64_t v26 = a1 + 280;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  uint64_t v24 = a1 + 328;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 352) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(void *)(a1 + 400) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 440) = 0;
  *(void *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  int v6 = *(unsigned __int8 *)(a2 + 460);
  *(unsigned char *)(a1 + 460) = v6;
  if (v6 && *(int *)(a1 + 96) >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(a2 + 256) + 8 * v7);
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
      uint64_t v10 = v9;
      uint64_t v12 = *(uint64_t **)(a1 + 264);
      unint64_t v11 = *(void *)(a1 + 272);
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v5) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v5;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          float v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 272, v17);
        }
        else {
          float v18 = 0;
        }
        int v19 = (uint64_t *)&v18[8 * v14];
        *int v19 = v10;
        unint64_t v13 = v19 + 1;
        BOOL v21 = *(char **)(a1 + 256);
        uint64_t v20 = *(char **)(a1 + 264);
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--int v19 = v22;
          }
          while (v20 != v21);
          uint64_t v20 = *v5;
        }
        *(void *)(a1 + 256) = v19;
        *(void *)(a1 + 264) = v13;
        *(void *)(a1 + 272) = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *uint64_t v12 = v9;
        unint64_t v13 = v12 + 1;
      }
      *(void *)(a1 + 264) = v13;
      ++v7;
    }
    while (v7 < *(int *)(a1 + 96));
  }
  if (v26 != a2 + 280) {
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v26, *(int32x2_t **)(a2 + 280), *(int32x2_t **)(a2 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 288) - *(void *)(a2 + 280)) >> 4));
  }
  if (v25 != a2 + 304) {
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v25, *(int32x2_t **)(a2 + 304), *(int32x2_t **)(a2 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 312) - *(void *)(a2 + 304)) >> 4));
  }
  if (v24 != a2 + 328) {
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v24, *(int32x2_t **)(a2 + 328), *(int32x2_t **)(a2 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 336) - *(void *)(a2 + 328)) >> 4));
  }
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 352), (int32x2_t *)(a2 + 352));
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 400), (int32x2_t *)(a2 + 400));
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  *(_DWORD *)(a1 + 452) = *(_DWORD *)(a2 + 452);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a2 + 464);
  std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::resize((uint64_t *)(a1 + 208), (uint64_t)(*(void *)(a2 + 216) - *(void *)(a2 + 208)) >> 3);
  if (*(void *)(a1 + 216) != *(void *)(a1 + 208)) {
    kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::CuMatrixBase<float>>();
  }
  if (*(void *)(a2 + 480) != *(void *)(a2 + 472)) {
    kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::InitResidualAggregator(a1, (uint64_t *)(a1 + 472));
  }
  *(unsigned char *)(a1 + 544) = *(unsigned char *)(a2 + 544);
  return a1;
}

void sub_1B23F0AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, quasar::Bitmap *a13, kaldi::nnet1::QuantizerResidualAggregator *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v22 = *a10;
  if (*a10)
  {
    *((void *)v20 + 20) = v22;
    operator delete(v22);
  }
  float v23 = *a11;
  if (*a11)
  {
    *((void *)v20 + 17) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *a12;
  if (*a12)
  {
    *((void *)v20 + 14) = v24;
    operator delete(v24);
  }
  quasar::Bitmap::~Bitmap(a13);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v20);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::CuMatrixBase<float>>()
{
}

void sub_1B23F0C10(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10C0C40E6EFC850);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CompressedMatrix::CompressedMatrix<float>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  kaldi::Matrix<float>::Matrix<float>((uint64_t)v4, a2, 111);
  kaldi::CompressedMatrix::CopyFromMat<float>(a1, (uint64_t)v4);
  kaldi::Matrix<float>::~Matrix((uint64_t)v4);
  return a1;
}

void sub_1B23F0C88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (kaldi::CompressedMatrix ***)*a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, kaldi::CompressedMatrix **a2)
{
  int v4 = *(kaldi::CompressedMatrix ***)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 1;
    do
    {
      int v6 = *v5;
      *uint64_t v5 = 0;
      if (v6) {
        std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)v5, v6);
      }
    }
    while (v5-- != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = v13;
    uint64_t v15 = &v13[8 * v10];
    unint64_t v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    uint64_t v16 = &v15[8 * a2];
    std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::unique_ptr<kaldi::CompressedMatrix>>::~__split_buffer((uint64_t)&v14);
  }
}

void sub_1B23F0E44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<kaldi::CompressedMatrix>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(kaldi::CompressedMatrix ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(kaldi::CompressedMatrix ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    int v3 = *v1;
    *uint64_t v1 = 0;
    if (v3) {
      std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)v1, v3);
    }
    ++v1;
  }
}

uint64_t std::__split_buffer<std::unique_ptr<kaldi::CompressedMatrix>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::unique_ptr<kaldi::CompressedMatrix>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v5 = *(kaldi::CompressedMatrix **)(i - 8);
    *(void *)(i - 8) = 0;
    if (v5) {
      std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100](i - 8, v5);
    }
  }
}

void std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100](int a1, kaldi::CompressedMatrix *this)
{
  if (this)
  {
    kaldi::CompressedMatrix::Destroy(this);
    JUMPOUT(0x1B3EA8670);
  }
}

void *kaldi::WriteBasicType<BOOL>(void *a1, char a2, int a3)
{
  if (a3) {
    uint64_t v5 = "T";
  }
  else {
    uint64_t v5 = "F";
  }
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v5, 1);
  if ((a2 & 1) == 0) {
    uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  }
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "Write failure in WriteBasicType<BOOL>");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  return result;
}

uint64_t kaldi::ReadBasicType<BOOL>(void *a1, char a2, char *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if ((a2 & 1) == 0) {
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  }
  int v4 = std::istream::peek();
  char v11 = v4;
  if (v4 << 24 == 1409286144)
  {
    char v5 = 1;
  }
  else
  {
    if (v4 << 24 != 1174405120)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Read failure in ReadBasicType<BOOL>, file position is ", 54);
      std::istream::tellg();
      uint64_t v7 = (void *)std::ostream::operator<<();
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", next char is ", 15);
      kaldi::CharToString((kaldi *)&v11, &__p);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, (uint64_t)&__p);
      std::string::~string(&__p);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
    char v5 = 0;
  }
  *a3 = v5;
  return std::istream::get();
}

void sub_1B23F12F4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *kaldi::WriteBasicType<float>(uint64_t a1, int a2)
{
  if (a2)
  {
    std::ostream::put();
    return (void *)std::ostream::write();
  }
  else
  {
    int v3 = (void *)std::ostream::operator<<();
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" ", 1);
  }
}

float kaldi::ReadBasicType<float>(void *a1, int a2, float *a3)
{
  v9[18] = *(double *)MEMORY[0x1E4F143B8];
  if (a2)
  {
    v9[0] = 0.0;
    int v5 = std::istream::peek();
    if (v5 == 8)
    {
      kaldi::ReadBasicType<double>(a1, 1, v9);
      float result = v9[0];
      *a3 = result;
    }
    else
    {
      if (v5 != 4)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ReadBasicType: expected float, saw ", 35);
        std::istream::peek();
        uint64_t v7 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", at file position ", 19);
        std::istream::tellg();
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
      }
      std::istream::get();
      std::istream::read();
    }
  }
  else
  {
    MEMORY[0x1B3EA7DC0](a1, a3);
  }
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ReadBasicType: failed to read, at file position ", 48);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  return result;
}

void sub_1B23F1538(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

double kaldi::ReadBasicType<double>(void *a1, int a2, double *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    float v9 = 0.0;
    int v5 = std::istream::peek();
    if (v5 == 4)
    {
      kaldi::ReadBasicType<float>(a1, 1, &v9);
      double result = v9;
      *a3 = v9;
    }
    else
    {
      if (v5 != 8)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ReadBasicType: expected float, saw ", 35);
        std::istream::peek();
        uint64_t v7 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", at file position ", 19);
        std::istream::tellg();
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
      }
      std::istream::get();
      std::istream::read();
    }
  }
  else
  {
    MEMORY[0x1B3EA7DB0](a1, a3);
  }
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ReadBasicType: failed to read, at file position ", 48);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  return result;
}

void sub_1B23F16FC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *kaldi::ReadString(void *a1, int a2, uint64_t a3)
{
  v6[51] = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "Reading arbitrary strings in text mode is unimplemented");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  double result = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, a3, 0);
  int v5 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32);
  if ((v5 & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ReadString, failed to read string at file position ", 51);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  if ((v5 & 2) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ReadString, saw eof while looking for null terminator, at file position ", 72);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  return result;
}

void sub_1B23F1868(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *kaldi::WriteString(void *a1, int a2, uint64_t a3)
{
  if (!a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Writing arbitrary strings in text mode is unimplemented");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  int v4 = *(char *)(a3 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = *(void *)a3;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a3 + 8);
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v5, v6);
  LOBYTE(v10[0]) = 0;
  double result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v10, 1);
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteString.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1B23F1954(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B23F1968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *kaldi::WriteToken(void *a1, int a2, char *__s)
{
  LOBYTE(v5) = *__s;
  uint64_t v6 = 1;
  do
  {
    if ((v5 & 0x80) != 0) {
      __maskrune((char)v5, 0x4000uLL);
    }
    int v5 = __s[v6++];
  }
  while (v5);
  size_t v7 = strlen(__s);
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v7);
  double result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteToken.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1B23F1A50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::Peek(void *a1, char a2)
{
  if ((a2 & 1) == 0) {
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  }
  return std::istream::peek();
}

void *kaldi::WriteToken(void *a1, uint64_t a2, char *a3)
{
  if (a3[23] < 0) {
    a3 = *(char **)a3;
  }
  return kaldi::WriteToken(a1, 0, a3);
}

uint64_t kaldi::ReadToken(uint64_t *a1, char a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if ((a2 & 1) == 0) {
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  }
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, a3);
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ReadToken, failed to read token at file position ", 49);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  unsigned int v5 = std::istream::peek();
  if (v5 <= 0x7F) {
    int v6 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v5 + 60) & 0x4000;
  }
  else {
    int v6 = __maskrune(v5, 0x4000uLL);
  }
  if (!v6)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ReadToken, expected space after token, saw instead ", 51);
    v11[0] = std::istream::peek();
    float v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v11, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", at file position ", 19);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return std::istream::get();
}

void sub_1B23F1C74(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::PeekToken(void *a1, char a2)
{
  if ((a2 & 1) == 0) {
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  }
  if (std::istream::peek() == 60)
  {
    std::istream::get();
    uint64_t v2 = std::istream::peek();
    int v3 = (void *)std::istream::unget();
    if ((*((unsigned char *)v3 + *(void *)(*v3 - 24) + 32) & 5) != 0 && kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Error ungetting '<' in PeekToken", 32);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    }
    return v2;
  }
  else
  {
    return std::istream::peek();
  }
}

void sub_1B23F1D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::ExpectToken(uint64_t *a1, char a2, const char *a3)
{
  v22[34] = *MEMORY[0x1E4F143B8];
  std::istream::tellg();
  LOBYTE(v6) = *a3;
  uint64_t v7 = 1;
  do
  {
    if ((v6 & 0x80) != 0) {
      __maskrune((char)v6, 0x4000uLL);
    }
    int v6 = a3[v7++];
  }
  while (v6);
  if ((a2 & 1) == 0) {
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  }
  __s1 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)&__s1);
  std::istream::get();
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Failed to read token [started at file position ", 47);
    float v9 = (void *)std::ostream::operator<<();
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"], expected ", 12);
    size_t v11 = strlen(a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)a3, v11);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  if (SHIBYTE(v21) < 0)
  {
    uint64_t v8 = __s1;
    if (strcmp(__s1, a3)) {
      goto LABEL_15;
    }
    operator delete(v8);
  }
  else if (strcmp((const char *)&__s1, a3))
  {
LABEL_15:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Expected token \"", 16);
    size_t v13 = strlen(a3);
    char v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)a3, v13);
    long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\", got instead \"", 16);
    if (v21 >= 0) {
      p_s1 = &__s1;
    }
    else {
      p_s1 = __s1;
    }
    if (v21 >= 0) {
      uint64_t v17 = HIBYTE(v21);
    }
    else {
      uint64_t v17 = v20;
    }
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_s1, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\".", 2);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
}

void sub_1B23F1FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ESTensorData::~ESTensorData(kaldi::quasar::ESTensorData *this)
{
  *(void *)this = &unk_1F0A50080;
  uint64_t v2 = (void *)*((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v2) {
    free(v2);
  }
  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf((void **)this);
}

{
  uint64_t vars8;

  kaldi::quasar::ESTensorData::~ESTensorData(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::quasar::ESNetworkConfig::ESNetworkConfig(uint64_t a1, long long *a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)a1 = &unk_1F0A50660;
  int v3 = (std::string *)(a1 + 40);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = a1 + 72;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  return a1;
}

void sub_1B23F2110(_Unwind_Exception *a1)
{
  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkConfig::Read(uint64_t a1, uint64_t *a2, char a3, uint64_t a4)
{
  memset(&__str, 0, sizeof(__str));
  v49[0] = 0;
  v49[1] = 0;
  uint64_t v50 = 0;
  long long v4 = a2 + 4;
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) == 0)
  {
    uint64_t v8 = (std::string *)(a1 + 112);
    float v9 = (std::string *)(a1 + 88);
    long long v44 = (uint64_t **)(a1 + 64);
    while (1)
    {
      unint64_t v46 = 0;
      size_t v47 = 0;
      uint64_t v48 = 0;
      kaldi::ReadToken(a2, a3, (uint64_t)&v46);
      uint64_t v10 = *(unsigned __int8 *)(a4 + 23);
      int v11 = (char)v10;
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = *(void *)(a4 + 8);
      }
      int v12 = HIBYTE(v48);
      if (!v10 || (v48 >= 0 ? (size_t v13 = HIBYTE(v48)) : (size_t v13 = v47), v13 != v10))
      {
LABEL_21:
        if ((v48 & 0x8000000000000000) == 0)
        {
          int v18 = 0;
          int v19 = 0;
          int v20 = 0;
          uint64_t v21 = &v46;
          switch(HIBYTE(v48))
          {
            case 0xA:
              goto LABEL_26;
            case 0xE:
              goto LABEL_34;
            case 0x10:
              goto LABEL_57;
            case 0x11:
              goto LABEL_42;
            default:
              goto LABEL_72;
          }
        }
        goto LABEL_24;
      }
      char v14 = v11 >= 0 ? (unsigned __int8 *)a4 : *(unsigned __int8 **)a4;
      if (v48 < 0) {
        break;
      }
      if (!HIBYTE(v48)) {
        goto LABEL_66;
      }
      long long v15 = &v46;
      uint64_t v16 = HIBYTE(v48);
      do
      {
        if (*(unsigned __int8 *)v15 != *v14) {
          goto LABEL_21;
        }
        long long v15 = (void **)((char *)v15 + 1);
        ++v14;
        --v16;
      }
      while (v16);
      int v17 = 0;
      if ((v48 & 0x8000000000000000) == 0)
      {
LABEL_64:
        if (!v17) {
          goto LABEL_66;
        }
        goto LABEL_65;
      }
LABEL_19:
      operator delete(v46);
      if ((v17 & 1) == 0) {
        goto LABEL_66;
      }
LABEL_65:
      if ((*((unsigned char *)v4 + *(void *)(*a2 - 24)) & 2) != 0) {
        goto LABEL_66;
      }
    }
    uint64_t v22 = v46;
    if (!memcmp(v46, v14, v47))
    {
      operator delete(v22);
      goto LABEL_66;
    }
LABEL_24:
    size_t v23 = v47;
    if (v47 == 10)
    {
      int v18 = 1;
      uint64_t v21 = (void **)v46;
LABEL_26:
      uint64_t v24 = *v21;
      int v25 = *((unsigned __int16 *)v21 + 4);
      if (v24 == (void *)0x6F6974636E75463CLL && v25 == 15982)
      {
        p_str = &__str;
        goto LABEL_62;
      }
      if (!v18) {
        goto LABEL_72;
      }
      size_t v23 = v47;
    }
    if (v23 == 14)
    {
      int v19 = 1;
      uint64_t v21 = (void **)v46;
LABEL_34:
      float v27 = *v21;
      uint64_t v28 = *(uint64_t *)((char *)v21 + 6);
      if (v27 == (void *)0x5474757074754F3CLL && v28 == 0x3E726F736E655474)
      {
        kaldi::ReadToken(a2, a3, (uint64_t)v49);
        v45[0] = (long long *)v49;
        long long v36 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v44, v49, (uint64_t)&std::piecewise_construct, v45);
        std::string::operator=((std::string *)(v36 + 7), &__str);
        goto LABEL_63;
      }
      if (!v19) {
        goto LABEL_72;
      }
      size_t v23 = v47;
    }
    if (v23 != 17) {
      goto LABEL_51;
    }
    int v20 = 1;
    uint64_t v21 = (void **)v46;
LABEL_42:
    uint64_t v30 = *v21;
    int v31 = v21[1];
    int v32 = *((unsigned __int8 *)v21 + 16);
    BOOL v34 = v30 == (void *)0x657475706D6F433CLL && v31 == (void *)0x6D726F6674616C50 && v32 == 62;
    p_str = v9;
    if (!v34)
    {
      if (!v20)
      {
        if (v12 != 16) {
          goto LABEL_72;
        }
        uint64_t v21 = &v46;
        goto LABEL_57;
      }
      size_t v23 = v47;
LABEL_51:
      if (v23 != 16) {
        goto LABEL_72;
      }
      uint64_t v21 = (void **)v46;
LABEL_57:
      uint64_t v38 = *v21;
      uint64_t v37 = v21[1];
      BOOL v39 = v38 == (void *)0x6F706B636568433CLL && v37 == (void *)0x3E656D614E746E69;
      p_str = v8;
      if (!v39)
      {
LABEL_72:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
        float v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Unknown token ", 14);
        if (v48 >= 0) {
          unsigned int v41 = &v46;
        }
        else {
          unsigned int v41 = (void **)v46;
        }
        if (v48 >= 0) {
          uint64_t v42 = HIBYTE(v48);
        }
        else {
          uint64_t v42 = v47;
        }
        float v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)", a typo in config file?", 24);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
      }
    }
LABEL_62:
    kaldi::ReadToken(a2, a3, (uint64_t)p_str);
LABEL_63:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
    int v17 = 1;
    if ((v48 & 0x8000000000000000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_19;
  }
LABEL_66:
  if (SHIBYTE(v50) < 0) {
    operator delete((void *)v49[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1B23F2500(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 145) < 0) {
    operator delete(*(void **)(v1 - 168));
  }
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ESNetworkConfig::CreateComputeEngine(kaldi::quasar::ESNetworkConfig *this)
{
}

void sub_1B23F25B4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40F7E275CALL);
  _Unwind_Resume(a1);
}

kaldi::quasar::ESNetworkPlan *kaldi::quasar::ESNetworkPlan::ESNetworkPlan(kaldi::quasar::ESNetworkPlan *this, const kaldi::quasar::ESNetworkConfig *a2)
{
  *(void *)this = &unk_1F0A502B0;
  kaldi::quasar::ESNetworkConfig::ESNetworkConfig((kaldi::quasar::ESNetworkPlan *)((char *)this + 8), a2);
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((_DWORD *)this + 40) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((void *)this + 25) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_DWORD *)this + 62) = 1065353216;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((void *)this + 32) = (char *)this + 264;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((_DWORD *)this + 78) = 1065353216;
  *((unsigned char *)this + 320) = 0;
  *((void *)this + 41) = 0;
  *((void *)this + 42) = 0;
  *((unsigned char *)this + 344) = 0;
  kaldi::quasar::ESNetworkPlan::LoadNetwork((uint64_t)this, (const std::string *)this + 2);
  return this;
}

void sub_1B23F26B0(_Unwind_Exception *a1)
{
  uint64_t v10 = *((void *)v1 + 42);
  *((void *)v1 + 42) = 0;
  if (v10) {
    std::shared_ptr<fst::MappedFile>::shared_ptr[abi:ne180100]<fst::MappedFile,void>(v10);
  }

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v6);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v5, *v7);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v3);
  kaldi::quasar::ESNetworkConfig::~ESNetworkConfig(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkPlan::LoadNetwork(uint64_t a1, const std::string *a2)
{
  v100[19] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_67;
  }
  uint64_t v4 = (unsigned __int16 *)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
  {
    uint64_t v6 = *(void *)(a1 + 104);
    if (v6 == 3 && **(_WORD **)v4 == 20547 && *(unsigned char *)(*(void *)v4 + 2) == 85) {
      goto LABEL_20;
    }
    if (v6 != 7) {
      goto LABEL_67;
    }
    uint64_t v4 = *(unsigned __int16 **)v4;
    goto LABEL_13;
  }
  int v5 = *(unsigned __int8 *)(a1 + 119);
  if (v5 != 3)
  {
    if (v5 != 7) {
      goto LABEL_67;
    }
LABEL_13:
    int v8 = *(_DWORD *)v4;
    int v9 = *(_DWORD *)((char *)v4 + 3);
    BOOL v10 = v8 == 1599426627;
    int v11 = 1414283615;
    goto LABEL_15;
  }
  int v12 = *v4;
  int v9 = *(unsigned __int8 *)(a1 + 98);
  BOOL v10 = v12 == 20547;
  int v11 = 85;
LABEL_15:
  if (!v10 || v9 != v11) {
    goto LABEL_67;
  }
LABEL_20:
  std::string::basic_string[abi:ne180100]<0>(&v94, ".net");
  std::string::basic_string[abi:ne180100]<0>(v92, ".weights");
  std::string::size_type v14 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  if ((v14 & 0x80u) == 0) {
    unint64_t v16 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    unint64_t v16 = a2->__r_.__value_.__l.__size_;
  }
  if (v96 >= 0) {
    int v17 = (unsigned __int8 *)HIBYTE(v96);
  }
  else {
    int v17 = v95;
  }
  std::string::size_type v18 = v16 - (void)v17;
  if (v16 >= (unint64_t)v17)
  {
    if ((v14 & 0x80) != 0)
    {
      if (v17 == (unsigned __int8 *)-1 || size < v18) {
LABEL_236:
      }
        std::string::__throw_out_of_range[abi:ne180100]();
      if (size - v18 >= (unint64_t)v17) {
        size_t v21 = (size_t)v17;
      }
      else {
        size_t v21 = size - v18;
      }
      uint64_t v22 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    else
    {
      if (v17 == (unsigned __int8 *)-1) {
        goto LABEL_236;
      }
      BOOL v19 = v14 >= v18;
      size_t v20 = v14 - v18;
      if (!v19) {
        goto LABEL_236;
      }
      if (v20 >= (unint64_t)v17) {
        size_t v21 = (size_t)v17;
      }
      else {
        size_t v21 = v20;
      }
      uint64_t v22 = a2;
    }
    if (v96 >= 0) {
      size_t v23 = &v94;
    }
    else {
      size_t v23 = v94;
    }
    int v24 = memcmp((char *)v22 + v18, v23, v21);
    if ((unsigned __int8 *)v21 == v17 && !v24)
    {
      std::string::basic_string(&v99, a2, 0, v18, (std::allocator<char> *)&v97);
      if ((v93 & 0x80u) == 0) {
        int v25 = v92;
      }
      else {
        int v25 = (void **)v92[0];
      }
      if ((v93 & 0x80u) == 0) {
        std::string::size_type v26 = v93;
      }
      else {
        std::string::size_type v26 = (std::string::size_type)v92[1];
      }
      float v27 = std::string::append(&v99, (const std::string::value_type *)v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      int64_t v91 = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)int v90 = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
      std::ifstream::basic_ifstream((uint64_t *)&v99);
      if ((*((unsigned char *)&v99 + *(void *)(v99.__r_.__value_.__r.__words[0] - 24) + 32) & 5) == 0)
      {
        std::istream::seekg();
        std::istream::tellg();
        std::istream::seekg();
        if (v91 >= 0) {
          int v29 = (char *)v90;
        }
        else {
          int v29 = (char *)v90[0];
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v29);
        fst::FstReadOptions::FstReadOptions(v87, __p, 0, 0, 0);
        if (v86 < 0) {
          operator delete(__p[0]);
        }
        int v88 = 2;
        int v89 = 1065353216;
        fst::MappedFile::Map((uint64_t)&v99, (uint64_t)v87, v98);
      }
      v99.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA3F8];
      *(std::string::size_type *)((char *)v99.__r_.__value_.__r.__words
                                + *(void *)(v99.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8]
                                                                                                  + 24);
      MEMORY[0x1B3EA7CF0](&v99.__r_.__value_.__r.__words[2]);
      std::istream::~istream();
      MEMORY[0x1B3EA8520](v100);
      if (SHIBYTE(v91) < 0) {
        operator delete(v90[0]);
      }
    }
  }
  if ((char)v93 < 0) {
    operator delete(v92[0]);
  }
  if (SHIBYTE(v96) < 0) {
    operator delete(v94);
  }
LABEL_67:
  uint64_t v30 = (int **)(a1 + 96);
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    int v31 = *(unsigned __int8 *)(a1 + 119);
    int v32 = (int *)(a1 + 96);
    switch(*(unsigned char *)(a1 + 119))
    {
      case 0:
        goto LABEL_110;
      case 1:
      case 2:
      case 4:
      case 6:
      case 8:
      case 9:
      case 0xA:
        goto LABEL_229;
      case 3:
        if (*(_WORD *)v30 == 20557 && *(unsigned char *)(a1 + 98) == 83) {
          goto LABEL_159;
        }
        if (*(_WORD *)v30 == 20547 && *(unsigned char *)(a1 + 98) == 85) {
          goto LABEL_159;
        }
        if ((v31 & 0x80) == 0) {
          goto LABEL_229;
        }
        goto LABEL_151;
      case 5:
        if (*(_DWORD *)v30 != 1096041805 || *(unsigned char *)(a1 + 100) != 76) {
          goto LABEL_229;
        }
        goto LABEL_116;
      case 7:
        goto LABEL_154;
      case 0xB:
        if (*v30 != (int *)0x544E55525F454E41 || *(void *)(a1 + 99) != 0x454D49544E55525FLL) {
          goto LABEL_229;
        }
        goto LABEL_159;
      default:
        if (v31 != 15)
        {
          if (v31 != 18) {
            goto LABEL_229;
          }
          BOOL v39 = *v30 == (int *)0x544E55525F454E41 && *(void *)(a1 + 104) == 0x455249445F454D49;
          if (!v39 || *(_WORD *)(a1 + 112) != 21571) {
            goto LABEL_229;
          }
          goto LABEL_159;
        }
        if (*v30 != (int *)0x504D5F4C4154454DLL || *(void *)(a1 + 103) != 0x48504152475F5350) {
          goto LABEL_229;
        }
        goto LABEL_159;
    }
  }
  uint64_t v35 = *(void *)(a1 + 104);
  if (v35 > 10)
  {
    switch(v35)
    {
      case 11:
        if (*(void *)*v30 == 0x544E55525F454E41 && *(void *)((char *)*v30 + 3) == 0x454D49544E55525FLL) {
          goto LABEL_159;
        }
        break;
      case 15:
        if (*(void *)*v30 == 0x504D5F4C4154454DLL && *(void *)((char *)*v30 + 7) == 0x48504152475F5350) {
          goto LABEL_159;
        }
        goto LABEL_152;
      case 18:
        if (*(void *)*v30 == 0x544E55525F454E41
          && *((void *)*v30 + 1) == 0x455249445F454D49
          && *((_WORD *)*v30 + 8) == 21571)
        {
          goto LABEL_159;
        }
        break;
      default:
        goto LABEL_152;
    }
LABEL_229:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v99);
    uint64_t v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"Unknown platform: ", 18);
    int v81 = *(char *)(a1 + 119);
    if (v81 >= 0) {
      uint64_t v82 = a1 + 96;
    }
    else {
      uint64_t v82 = *(void *)(a1 + 96);
    }
    if (v81 >= 0) {
      uint64_t v83 = *(unsigned __int8 *)(a1 + 119);
    }
    else {
      uint64_t v83 = *(void *)(a1 + 104);
    }
    unsigned int v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, v82, v83);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v84, ", a typo in config file?");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v99);
  }
  if (!v35)
  {
LABEL_110:
    uint64_t context = espresso_create_context();
    goto LABEL_167;
  }
  if (v35 == 3)
  {
    if (*(_WORD *)*v30 == 20557 && *((unsigned char *)*v30 + 2) == 83) {
      goto LABEL_159;
    }
    if (*(_WORD *)*v30 == 20547 && *((unsigned char *)*v30 + 2) == 85) {
      goto LABEL_159;
    }
LABEL_151:
    uint64_t v35 = *(void *)(a1 + 104);
    goto LABEL_152;
  }
  if (v35 != 5)
  {
LABEL_152:
    if (v35 == 7)
    {
      int v32 = *v30;
LABEL_154:
      int v50 = *v32;
      int v51 = *(int *)((char *)v32 + 3);
      if (v50 == 1599426627 && v51 == 1414283615) {
        goto LABEL_159;
      }
    }
    goto LABEL_229;
  }
  if (**v30 != 1096041805 || *((unsigned char *)*v30 + 4) != 76) {
    goto LABEL_229;
  }
LABEL_116:
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v99);
    float v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"Using The Metal GPU backend (legacy, deprecated) ", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"\n", 1);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v99);
  }
LABEL_159:
  uint64_t context = espresso_create_context();
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v99, 3);
    long long v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"Set compute platform to ", 24);
    int v54 = *(char *)(a1 + 119);
    if (v54 >= 0) {
      uint64_t v55 = a1 + 96;
    }
    else {
      uint64_t v55 = *(void *)(a1 + 96);
    }
    if (v54 >= 0) {
      uint64_t v56 = *(unsigned __int8 *)(a1 + 119);
    }
    else {
      uint64_t v56 = *(void *)(a1 + 104);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, v55, v56);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v99);
  }
LABEL_167:
  if (!context) {
    uint64_t context = espresso_create_context();
  }
  *(void *)(a1 + 144) = context;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = *a2;
  }
  *(void *)(a1 + 168) = espresso_create_plan_and_load_network();
  uint64_t v57 = +[_EARProfiler sharedProfiler];
  uint64_t v58 = *(void **)(a1 + 328);
  *(void *)(a1 + 328) = v57;

  uint64_t v59 = *(void **)(a1 + 328);
  if (v59 && [v59 _perfProfiler])
  {
    if (espresso_plan_start_profiling_with_options())
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v99);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"espresso_plan_start_profiling_with_options(plan_, profilingOptions) == ESPRESSO_STATUS_SUCCESS", 94);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v99);
    }
    [*(id *)(a1 + 328) addProfilingNetwork:*(void *)(a1 + 168)];
  }
  if (!*(void *)(a1 + 168))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v99);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"plan_ != nullptr", 16);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v99);
  }
  memset(v87, 0, 24);
  c_network_get_input_names();
  float v94 = 0;
  float v95 = 0;
  uint64_t v96 = 0;
  c_network_get_output_names();
  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)&v99, 0, 0);
  std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__move_assign(a1 + 176, (uint64_t *)&v99);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v99);
  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)&v99, (unsigned __int8 *)v94, v95);
  std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__move_assign(a1 + 216, (uint64_t *)&v99);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v99);
  if (espresso_plan_build())
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v99);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"espresso_plan_build(plan_) == ESPRESSO_STATUS_SUCCESS", 53);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v99);
  }
  if (*(void *)(a1 + 168) != *(void *)(a1 + 152))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v99);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"plan_ == network_.plan", 22);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v99);
  }
  memset(&v99, 0, sizeof(v99));
  espresso_get_additional_configuration_names();
  std::string::size_type v60 = v99.__r_.__value_.__r.__words[0];
  if (v99.__r_.__value_.__r.__words[0] == v99.__r_.__value_.__l.__size_)
  {
    BOOL v63 = 0;
    *(unsigned char *)(a1 + 320) = 0;
  }
  else
  {
    if (*(char *)(v99.__r_.__value_.__r.__words[0] + 23) < 0)
    {
      std::string::size_type v62 = *(void *)v99.__r_.__value_.__l.__data_;
      uint64_t v61 = *(void *)(v99.__r_.__value_.__r.__words[0] + 8);
    }
    else
    {
      uint64_t v61 = *(unsigned __int8 *)(v99.__r_.__value_.__r.__words[0] + 23);
      std::string::size_type v62 = v99.__r_.__value_.__r.__words[0];
    }
    if (v61 >= 13)
    {
      uint64_t v64 = (char *)(v62 + v61);
      long long v65 = (void *)v62;
      do
      {
        uint64_t v66 = (char *)memchr(v65, 98, v61 - 12);
        if (!v66) {
          break;
        }
        if (*(void *)v66 == 0x6F635F6863746162 && *(void *)(v66 + 5) == 0x5F6769666E6F635FLL) {
          goto LABEL_194;
        }
        long long v65 = v66 + 1;
        uint64_t v61 = v64 - (unsigned char *)v65;
      }
      while (v64 - (unsigned char *)v65 > 12);
      uint64_t v66 = v64;
LABEL_194:
      BOOL v69 = v66 != v64 && v66 == (char *)v62;
      *(unsigned char *)(a1 + 320) = v69;
    }
    else
    {
      *(unsigned char *)(a1 + 320) = 0;
    }
    if (*(char *)(v60 + 23) < 0)
    {
      std::string::size_type v71 = v60;
      std::string::size_type v60 = *(void *)v60;
      uint64_t v70 = *(void *)(v71 + 8);
    }
    else
    {
      uint64_t v70 = *(unsigned __int8 *)(v60 + 23);
    }
    int v72 = (char *)(v60 + v70);
    if (v70 >= 13)
    {
      uint64_t v73 = (void *)v60;
      do
      {
        uint64_t v74 = (char *)memchr(v73, 119, v70 - 12);
        if (!v74) {
          break;
        }
        if (*(void *)v74 == 0x6F635F6874646977 && *(void *)(v74 + 5) == 0x5F6769666E6F635FLL) {
          goto LABEL_213;
        }
        uint64_t v73 = v74 + 1;
        uint64_t v70 = v72 - (unsigned char *)v73;
      }
      while (v72 - (unsigned char *)v73 > 12);
    }
    uint64_t v74 = v72;
LABEL_213:
    BOOL v63 = v74 != v72 && v74 == (char *)v60;
  }
  *(unsigned char *)(a1 + 344) = v63;
  uint64_t v77 = (unsigned __int8 *)v94;
  unsigned int v78 = v95;
  if (v94 != v95)
  {
    do
    {
      LODWORD(v92[0]) = 0;
      espresso_blob_is_dynamic();
      int v79 = (int)v92[0];
      v90[0] = v77;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 280, v77, (uint64_t)&std::piecewise_construct, (long long **)v90)+ 10) = v79;
      v77 += 24;
    }
    while (v77 != v78);
  }
  v92[0] = &v99;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v92);
  v99.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
  v99.__r_.__value_.__r.__words[0] = (std::string::size_type)v87;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
}

void sub_1B23F3474(_Unwind_Exception *a1)
{
  v5[0] = v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v5);
  v5[0] = &v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v5);
  if (v4 < 0) {
    operator delete(v3[3]);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkPlan::~ESNetworkPlan(kaldi::quasar::ESNetworkPlan *this)
{
  *(void *)this = &unk_1F0A502B0;
  if (*((void *)this + 21) && espresso_plan_destroy() || espresso_context_destroy())
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ret == ESPRESSO_STATUS_SUCCESS", 30);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  uint64_t v2 = *((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 280);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 256, *((void **)this + 33));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 216);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 176);
  kaldi::quasar::ESNetworkConfig::~ESNetworkConfig((void **)this + 1);
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  kaldi::quasar::ESNetworkPlan::~ESNetworkPlan(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::quasar::ESNetworkPlan::CreateData()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_1B23F3718(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1B23F3818(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1B23F3910(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1B23F3A08(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkPlan::CreateZeroedDataInt32(uint64_t a1, uint64_t a2)
{
  std::vector<unsigned long>::vector(&__dst, (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != *(void *)a2) {
    memmove(__dst, *(const void **)a2, v3 - *(void *)a2);
  }
  operator new();
}

void sub_1B23F3AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  MEMORY[0x1B3EA8670](v11, 0x1093C40B76D1C73);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkPlan::CreateZeroedDataFloat(uint64_t a1, uint64_t a2)
{
  std::vector<unsigned long>::vector(&__dst, (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != *(void *)a2) {
    memmove(__dst, *(const void **)a2, v3 - *(void *)a2);
  }
  operator new();
}

void sub_1B23F3BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  MEMORY[0x1B3EA8670](v11, 0x1093C40B76D1C73);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkPlan::CreateConcat(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(const void ***)a2;
  if (*(void *)a2 != *(void *)(a2 + 8))
  {
    if (*v2)
    {
      {
        memset(&v3[17], 0, 80);
        espresso_buffer_unpack_tensor_shape();
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"rank > 0", 8);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
      }
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"es_data != nullptr", 18);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  operator new();
}

uint64_t kaldi::quasar::ESTensorData::GetDataFloat(kaldi::quasar::ESTensorData *this)
{
  if (*((_DWORD *)this + 48) != 65568)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "t_.buffer.storage_type == ESPRESSO_STORAGE_TYPE_FLOAT32");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return *((void *)this + 4);
}

void *kaldi::quasar::ESNetworkPlan::CreateSplit@<X0>(const kaldi::quasar::ComputeEngineBufferItf *a1@<X1>, void *a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v5 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *, void))(*(void *)a1 + 184))(a1, 0);
  double result = std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::vector(a2, v5);
  if (v5)
  {
    {
      memset(v13, 0, 80);
      uint64_t v12 = 0;
      espresso_buffer_unpack_tensor_shape();
      memset(__p, 0, sizeof(__p));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, v13, (uint64_t)v13, 0);
      uint64_t v7 = (uint64_t *)__p[0];
      *(void *)__p[0] = 1;
      uint64_t v8 = v12;
      if (v12)
      {
        uint64_t v9 = 1;
        do
        {
          uint64_t v10 = *v7++;
          v9 *= v10;
          --v8;
        }
        while (v8);
      }
      operator new();
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"src_buf != nullptr", 18);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  return result;
}

void sub_1B23F468C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B23F46ACLL);
}

uint64_t kaldi::quasar::ESNetworkPlan::CreateSlice(kaldi::quasar::ESNetworkPlan *this, const kaldi::quasar::ComputeEngineBufferItf *a2, int a3, unsigned int a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if ((*(int (**)(const kaldi::quasar::ComputeEngineBufferItf *))(*(void *)a2 + 176))(a2) <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "src->GetNumDims() >= 1");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  if (a3 < 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "0 <= start");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  if ((int)a4 < a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "start <= end");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  unsigned int v7 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *, void))(*(void *)a2 + 184))(a2, 0);
  if (v7 < a4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "end <= num_split");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  if (!v7) {
    operator new();
  }
  if (a3 || v7 != a4)
  {
    {
      memset(v17, 0, 80);
      unint64_t v16 = 0;
      espresso_buffer_unpack_tensor_shape();
      memset(__p, 0, sizeof(__p));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, v17, (uint64_t)v17, 0);
      uint64_t v10 = (char *)__p[0];
      *(void *)__p[0] = (int)(a4 - a3);
      if (v16 >= 2)
      {
        unint64_t v11 = v16 - 1;
        uint64_t v12 = (uint64_t *)(v10 + 8);
        uint64_t v13 = 1;
        do
        {
          uint64_t v14 = *v12++;
          v13 *= v14;
          --v11;
        }
        while (v11);
      }
      operator new();
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "src_buf != nullptr");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  uint64_t v8 = *(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *))(*(void *)a2 + 16);
  return v8(a2);
}

void sub_1B23F4B0C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkPlan::SetNetworkFunctionName(uint64_t a1, long long **a2, unsigned char *a3, unsigned char *a4)
{
  if (*(void *)(a1 + 88))
  {
    uint64_t v6 = *a2;
    if (a2[1] != *a2)
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v8 = *v6;
        __p[0].__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v8;
      }
      if (std::__tree<std::string>::__count_unique<std::string>(a1 + 72, (const void **)&__p[0].__r_.__value_.__l.__data_))
      {
        std::map<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::at(a1 + 72, (const void **)&__p[0].__r_.__value_.__l.__data_);
        espresso_network_set_function_name();
        *a3 = 1;
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
  }
  if (*(char *)(a1 + 143) < 0)
  {
    if (!*(void *)(a1 + 128)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a1 + 143))
  {
    return;
  }
  if (espresso_network_set_function_name())
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Set function name for checkpoint failed, error=", 47);
    last_error = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, last_error);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  *a4 = 1;
}

void sub_1B23F4C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::quasar::ESNetworkPlan::RunNitro(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  kdebug_trace();
  uint64_t v8 = *a2;
  for (uint64_t i = a2[1]; v8 != i; v8 += 32)
  {
    kaldi::quasar::StripColon(v8, __p);
    if (espresso_network_bind_buffer())
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
      last_error = (const char *)espresso_get_last_error();
      size_t v12 = strlen(last_error);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)last_error, v12);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v20);
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  if (espresso_plan_execute_sync())
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
    long long v15 = (void *)std::ostream::operator<<();
    __p[0].__r_.__value_.__s.__data_[0] = 32;
    unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)__p, 1);
    int v17 = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, v17);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v20);
  }
  if (a5)
  {
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100](a5);
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::reserve(a5, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
    if (*a3 != a3[1])
    {
      kaldi::quasar::StripColon(*a3, &v19);
      if (!espresso_network_bind_buffer())
      {
        kaldi::quasar::EspressoNDArray::EspressoNDArray(&v20, __p, 1);
        operator new();
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
      uint64_t v13 = (const char *)espresso_get_last_error();
      size_t v14 = strlen(v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)v13, v14);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v20);
    }
  }
  return kdebug_trace();
}

void sub_1B23F5080()
{
  if (v0) {
    free(v0);
  }
  JUMPOUT(0x1B23F50D8);
}

void sub_1B23F5088()
{
  MEMORY[0x1B3EA8670](v0, 0x1093C40B76D1C73);
  JUMPOUT(0x1B23F50A4);
}

void sub_1B23F50B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    JUMPOUT(0x1B23F50E4);
  }
  JUMPOUT(0x1B23F50E8);
}

uint64_t kaldi::quasar::ESNetworkPlan::NeedShapeChange(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (espresso_plan_get_phase() == 1)
  {
    memset(v23, 0, sizeof(v23));
    int v24 = 1065353216;
    uint64_t v6 = *a3;
    unsigned int v7 = a3[1];
    while (v6 != v7)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v23, v6, (uint64_t)v6);
      v6 += 24;
    }
    if ((std::operator==[abi:ne180100]<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>((uint64_t)v23, (void *)(a1 + 216)) & 1) == 0)
    {
      uint64_t v10 = 1;
LABEL_24:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v23);
      return v10;
    }
    memset(v21, 0, sizeof(v21));
    int v22 = 1065353216;
    uint64_t v8 = *a2;
    uint64_t v9 = a2[1];
    while (v8 != v9)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v21, v8, (uint64_t)v8);
      v8 += 32;
    }
    if (std::operator==[abi:ne180100]<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>((uint64_t)v21, (void *)(a1 + 176)))
    {
      unint64_t v11 = *a2;
      if (a2[1] == *a2)
      {
LABEL_21:
        uint64_t v10 = 0;
LABEL_23:
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v21);
        goto LABEL_24;
      }
      uint64_t v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        size_t v14 = *(void **)&v11[v12 + 24];
        if (espresso_network_query_blob_dimensions())
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Espresso failed query blob info ", 32);
          unint64_t v16 = (void *)std::ostream::operator<<();
          int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
          last_error = (const char *)espresso_get_last_error();
          size_t v19 = strlen(last_error);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)last_error, v19);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
        }
        if (v14[14] > 1uLL || v14[10] != v25 || v14[11] != v26 || v14[12] != v27 || v14[13] != v28) {
          break;
        }
        ++v13;
        unint64_t v11 = *a2;
        v12 += 32;
        if (v13 >= (a2[1] - *a2) >> 5) {
          goto LABEL_21;
        }
      }
    }
    uint64_t v10 = 1;
    goto LABEL_23;
  }
  return 1;
}

void sub_1B23F5340(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::ESNetworkPlan::PrepareInputsAndOutputs(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t result = kaldi::quasar::ESNetworkPlan::NeedShapeChange(a1, a2, a3);
  if (!result) {
    return result;
  }
  if (espresso_plan_get_phase() == 1 && espresso_plan_build_clean())
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Espresso failed to reset plan with ", 35);
    int v54 = (void *)std::ostream::operator<<();
    uint64_t v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)": ", 2);
    last_error = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v55, last_error);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear(a1 + 176);
  unsigned int v7 = *a2;
  uint64_t v8 = a2[1];
  while (v7 != v8)
  {
    if (espresso_network_declare_input())
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59);
      int v22 = (char)v7[23];
      if (v22 >= 0) {
        uint64_t v23 = (uint64_t)v7;
      }
      else {
        uint64_t v23 = *(void *)v7;
      }
      if (v22 >= 0) {
        uint64_t v24 = v7[23];
      }
      else {
        uint64_t v24 = *((void *)v7 + 1);
      }
      uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"' with ", 7);
      uint64_t v26 = (void *)std::ostream::operator<<();
      uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
      uint64_t v28 = (char *)espresso_get_last_error();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, v28);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1 + 176, v7, (uint64_t)v7);
    v7 += 32;
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear(a1 + 216);
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  while (v9 != v10)
  {
    if (espresso_network_declare_output())
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59);
      int v30 = (char)v9[23];
      if (v30 >= 0) {
        uint64_t v31 = (uint64_t)v9;
      }
      else {
        uint64_t v31 = *(void *)v9;
      }
      if (v30 >= 0) {
        uint64_t v32 = v9[23];
      }
      else {
        uint64_t v32 = *((void *)v9 + 1);
      }
      uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"' with ", 7);
      BOOL v34 = (void *)std::ostream::operator<<();
      uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)": ", 2);
      long long v36 = (char *)espresso_get_last_error();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v35, v36);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1 + 216, v9, (uint64_t)v9);
    v9 += 24;
  }
  if (*(unsigned char *)(a1 + 320))
  {
    *(void *)__x = 0;
    long long v61 = 0uLL;
    std::to_string(&v59, *(void *)(*((void *)*a2 + 3) + 104));
    unint64_t v11 = std::string::insert(&v59, 0, "batch_config_");
  }
  else
  {
    if (!*(unsigned char *)(a1 + 344)) {
      goto LABEL_33;
    }
    *(void *)__x = 0;
    long long v61 = 0uLL;
    std::to_string(&v59, *(void *)(*((void *)*a2 + 3) + 80));
    unint64_t v11 = std::string::insert(&v59, 0, "width_config_");
  }
  std::string::size_type v12 = v11->__r_.__value_.__r.__words[0];
  *(void *)&long long v62 = v11->__r_.__value_.__l.__size_;
  *(void *)((char *)&v62 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  char v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v61) < 0) {
    operator delete(*(void **)__x);
  }
  *(void *)__x = v12;
  *(void *)&long long v61 = v62;
  *(void *)((char *)&v61 + 7) = *(void *)((char *)&v62 + 7);
  HIBYTE(v61) = v13;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  int v14 = espresso_network_select_configuration();
  if (v14 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59);
    long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"configuration name not supported: ", 34);
    if (v61 >= 0) {
      unint64_t v16 = __x;
    }
    else {
      unint64_t v16 = *(std::vector<int>::value_type **)__x;
    }
    if (v61 >= 0) {
      uint64_t v17 = HIBYTE(v61);
    }
    else {
      uint64_t v17 = v61;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59);
  }
  if (SHIBYTE(v61) < 0)
  {
    operator delete(*(void **)__x);
    if (!v14) {
      goto LABEL_46;
    }
LABEL_33:
    std::vector<char const*>::vector(&v62, (a2[1] - *a2) >> 5);
    std::vector<int>::size_type v18 = (a2[1] - *a2) >> 5;
    __x[0] = -1;
    std::vector<int>::vector((std::vector<int> *)&v59, v18, __x);
    std::vector<std::vector<int>>::vector(v58, 5uLL, (uint64_t)&v59);
    if (v59.__r_.__value_.__r.__words[0])
    {
      v59.__r_.__value_.__l.__size_ = v59.__r_.__value_.__r.__words[0];
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    std::vector<int>::vector(&v57, (a2[1] - *a2) >> 5);
    if (a2[1] != *a2)
    {
      unint64_t v19 = 0;
      do
      {
        if (espresso_buffer_unpack_tensor_shape())
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59);
          uint64_t v38 = (uint64_t)&(*a2)[32 * v19];
          int v39 = *(char *)(v38 + 23);
          if (v39 >= 0) {
            uint64_t v40 = (uint64_t)&(*a2)[32 * v19];
          }
          else {
            uint64_t v40 = *(void *)v38;
          }
          if (v39 >= 0) {
            uint64_t v41 = *(unsigned __int8 *)(v38 + 23);
          }
          else {
            uint64_t v41 = *(void *)(v38 + 8);
          }
          uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v40, v41);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"' with ", 7);
          float v43 = (void *)std::ostream::operator<<();
          long long v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": ", 2);
          float v45 = (const char *)espresso_get_last_error();
          size_t v46 = strlen(v45);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
        }
        v57.__begin_[v19] = 0;
        uint64_t v20 = (uint64_t)&(*a2)[32 * v19];
        if (*(char *)(v20 + 23) < 0) {
          uint64_t v20 = *(void *)v20;
        }
        *(void *)(v62 + 8 * v19++) = v20;
      }
      while (v19 < (a2[1] - *a2) >> 5);
    }
    if (espresso_network_change_input_blob_shapes_seq_rank())
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Espresso failed to change input blob shapes with ", 49);
      int v50 = (void *)std::ostream::operator<<();
      int v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)": ", 2);
      unint64_t v52 = (const char *)espresso_get_last_error();
      size_t v53 = strlen(v52);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
    }
    if (v57.__begin_)
    {
      v57.__end_ = v57.__begin_;
      operator delete(v57.__begin_);
    }
    v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
    if ((void)v62)
    {
      *((void *)&v62 + 1) = v62;
      operator delete((void *)v62);
    }
    goto LABEL_46;
  }
  if (v14) {
    goto LABEL_33;
  }
LABEL_46:
  uint64_t result = espresso_plan_build();
  if (result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Espresso failed to build plan with ", 35);
    size_t v47 = (void *)std::ostream::operator<<();
    uint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": ", 2);
    uint64_t v49 = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v48, v49);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
  }
  return result;
}

void sub_1B23F5B2C(_Unwind_Exception *a1)
{
}

void sub_1B23F5B34(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1B23F5B3CLL);
  }
  __clang_call_terminate(a1);
}

void kaldi::quasar::ESNetworkPlan::RunClassic(uint64_t a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (!*(void *)(a1 + 168))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__C);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__C, "plan_ != nullptr");
    goto LABEL_20;
  }
  kdebug_trace();
  kaldi::quasar::ESNetworkPlan::PrepareInputsAndOutputs(a1, a2, (unsigned __int8 **)a3);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 != v10)
  {
    do
    {
      int v11 = *(_DWORD *)(*((void *)v9 + 3) + 160);
      if (v11 == 131104)
      {
        int v12 = espresso_network_bind_buffer();
        vDSP_vflt32(**((const int ***)v9 + 3), 1, __C[0], 1, (vDSP_Length)__C[19]);
      }
      else
      {
        if (v11 != 65568)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__C);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(__C, "kv.second->storage_type == ESPRESSO_STORAGE_TYPE_FLOAT32");
          goto LABEL_20;
        }
        int v12 = espresso_network_bind_buffer();
      }
      if (v12) {
        goto LABEL_22;
      }
      v9 += 32;
    }
    while (v9 != v10);
  }
  if (!espresso_plan_execute_sync())
  {
    if (!a5
      || (std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100](a5),
          *(void *)a3 == *(void *)(a3 + 8)))
    {
      kdebug_trace();
      return;
    }
    if (!espresso_network_bind_buffer())
    {
      kaldi::quasar::EspressoNDArray::EspressoNDArray(__C, v22, 1);
      operator new();
    }
LABEL_22:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__C);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__C, (uint64_t)"espresso_network_bind_buffer failed: ", 37);
    last_error = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, last_error);
LABEL_20:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__C);
  }
  if (*(void *)a3 != *(void *)(a3 + 8))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__C);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__C, (uint64_t)"espresso_plan_execute_sync() failed: ", 37);
    unint64_t v19 = (void *)std::ostream::operator<<();
    v22[0] = 32;
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v22, 1);
    size_t v21 = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, v21);
    goto LABEL_20;
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__C);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__C, (uint64_t)"espresso_plan_execute_sync() failed: ", 37);
    char v13 = (void *)std::ostream::operator<<();
    v22[0] = 32;
    int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v22, 1);
    long long v15 = (const char *)espresso_get_last_error();
    size_t v16 = strlen(v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__C);
  }
}

void sub_1B23F5FDC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
}

uint64_t kaldi::quasar::ESNetworkPlan::RunTraining(uint64_t a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (!*(void *)(a1 + 168))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "plan_ != nullptr");
    goto LABEL_15;
  }
  kaldi::quasar::ESNetworkPlan::PrepareInputsAndOutputs(a1, a2, (unsigned __int8 **)a3);
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  while (v9 != v8)
  {
    if (espresso_network_bind_buffer())
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
      int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Failed to bind buffer for input=", 32);
      int v12 = (char)v9[23];
      if (v12 >= 0) {
        uint64_t v13 = (uint64_t)v9;
      }
      else {
        uint64_t v13 = *(void *)v9;
      }
      if (v12 >= 0) {
        uint64_t v14 = v9[23];
      }
      else {
        uint64_t v14 = *((void *)v9 + 1);
      }
      long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
      size_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", error=", 8);
      last_error = (char *)espresso_get_last_error();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, last_error);
      goto LABEL_15;
    }
    v9 += 32;
  }
  if (espresso_plan_execute_sync())
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Failed to run checkpoint network, error=", 40);
    size_t v21 = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, v21);
    goto LABEL_15;
  }
  get_main_function_name();
  if (espresso_network_set_function_name())
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    int v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Failed to set function to main, error=", 38);
    uint64_t v23 = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, v23);
    goto LABEL_15;
  }
  uint64_t result = espresso_plan_execute_sync();
  if (result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Failed to run main network, error=", 34);
    uint64_t v25 = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, v25);
    goto LABEL_15;
  }
  if (a5)
  {
    uint64_t result = (uint64_t)std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100](a5);
    if (*(void *)a3 != *(void *)(a3 + 8))
    {
      if (!espresso_network_bind_buffer())
      {
        kaldi::quasar::EspressoNDArray::EspressoNDArray(v27, v26, 1);
        operator new();
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
      std::vector<int>::size_type v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"espresso_network_bind_buffer failed: ", 37);
      unint64_t v19 = (char *)espresso_get_last_error();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, v19);
LABEL_15:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
    }
  }
  return result;
}

void sub_1B23F6458(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
}

void kaldi::quasar::ESNetworkPlan::Run(uint64_t a1, long long **a2, long long **a3, uint64_t a4, uint64_t *a5)
{
  v33[0] = 0;
  kaldi::quasar::ESNetworkPlan::SetNetworkFunctionName(a1, a3, (unsigned char *)v33 + 1, v33);
  int v30 = 0;
  uint64_t v31 = 0;
  unint64_t v32 = 0;
  std::vector<std::pair<std::string,espresso_buffer_t const*>>::reserve((uint64_t *)&v30, ((char *)a2[1] - (char *)*a2) >> 5);
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      uint64_t v10 = (const void *)*((void *)v8 + 3);
      if (!v10
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"es_data != nullptr", 18);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
      }
      int v12 = v11;
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v13 = *v8;
        v28.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
      }
      uint64_t v14 = v12 + 32;
      long long v15 = v31;
      if ((unint64_t)v31 >= v32)
      {
        uint64_t v17 = (v31 - v30) >> 5;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v32 - (void)v30;
        if ((uint64_t)(v32 - (void)v30) >> 4 > v18) {
          unint64_t v18 = v19 >> 4;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v20 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        v29[4] = (void **)&v32;
        size_t v21 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v32, v20);
        int v22 = &v21[4 * v17];
        v29[0] = v21;
        v29[1] = v22;
        v29[3] = &v21[4 * v23];
        long long v24 = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
        v22[2] = (void *)v28.__r_.__value_.__r.__words[2];
        *(_OWORD *)int v22 = v24;
        memset(&v28, 0, sizeof(v28));
        void v22[3] = v14;
        std::string v29[2] = v22 + 4;
        std::vector<std::pair<std::string,espresso_buffer_t const*>>::__swap_out_circular_buffer((uint64_t *)&v30, v29);
        uint64_t v25 = v31;
        std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v29);
        uint64_t v31 = v25;
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v28.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::string::size_type v16 = v28.__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v31 = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
        *((void *)v15 + 2) = v16;
        *((void *)v15 + 3) = v14;
        uint64_t v31 = v15 + 32;
      }
      v8 += 2;
    }
    while (v8 != v9);
  }
  if (HIBYTE(v33[0]))
  {
    kaldi::quasar::ESNetworkPlan::RunNitro(a1, (uint64_t *)&v30, (uint64_t *)a3, v7, a5);
  }
  else if (LOBYTE(v33[0]))
  {
    kaldi::quasar::ESNetworkPlan::RunTraining(a1, (unsigned __int8 **)&v30, (uint64_t)a3, v7, a5);
  }
  else
  {
    kaldi::quasar::ESNetworkPlan::RunClassic(a1, (unsigned __int8 **)&v30, (uint64_t)a3, v7, a5);
  }
  v29[0] = (void **)&v30;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v29);
}

{
  uint64_t v7;
  long long *v8;
  long long *v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  int v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  long long v32;
  char *v33;
  char *v34;
  std::string::size_type v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  long long v43;
  char *v44;
  uint64_t *v47;
  long long v48;
  long long v49;
  char v50;
  char *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  unint64_t v56;
  __int16 v57;
  std::string v58;
  char *v59;
  unint64_t *v60;
  void v61[3];

  std::vector<int> v57 = 0;
  kaldi::quasar::ESNetworkPlan::SetNetworkFunctionName(a1, a3, (unsigned char *)&v57 + 1, &v57);
  int v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  int v51 = 0;
  unint64_t v52 = 0;
  size_t v53 = 0;
  std::vector<std::pair<std::string,espresso_buffer_t const*>>::reserve((uint64_t *)&v51, ((char *)a2[1] - (char *)*a2) >> 5);
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  if (*a2 != v8)
  {
    do
    {
      uint64_t v10 = (uint64_t *)*((void *)v9 + 3);
      int v11 = *v10;
      if (!v12)
      {
        long long v13 = (*(uint64_t (**)(uint64_t *))(v11 + 176))(v10);
        if (v13 == 1)
        {
          memset(&v58, 0, sizeof(v58));
          (*(void (**)(void, std::string *))(**((void **)v9 + 3) + 56))(*((void *)v9 + 3), &v58);
          (*(void (**)(void *__return_ptr, uint64_t, std::string *, void))(*(void *)a1 + 24))(v61, a1, &v58, 0);
          int v12 = (char *)v61[0];
          std::string::size_type v16 = v55;
          if ((unint64_t)v55 >= v56)
          {
            unint64_t v18 = ((uint64_t)v55 - v54) >> 3;
            if ((unint64_t)(v18 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v19 = (uint64_t)(v56 - v54) >> 2;
            if (v19 <= v18 + 1) {
              uint64_t v19 = v18 + 1;
            }
            if (v56 - v54 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v19;
            }
            *((void *)&v49 + 1) = &v56;
            if (v20) {
              size_t v21 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v56, v20);
            }
            else {
              size_t v21 = 0;
            }
            int v22 = v61[0];
            std::string v28 = &v21[v18];
            size_t v47 = v21;
            *(void *)&uint64_t v48 = v28;
            *(void *)&uint64_t v49 = &v21[v20];
            v61[0] = 0;
            char *v28 = v22;
            *((void *)&v48 + 1) = v28 + 1;
            std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(&v54, &v47);
            uint64_t v17 = v55;
            std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((void **)&v47);
          }
          else
          {
            v61[0] = 0;
            *uint64_t v55 = v12;
            uint64_t v17 = v16 + 1;
          }
          uint64_t v55 = v17;
          uint64_t v29 = v61[0];
          v61[0] = 0;
          if (v29) {
            (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
          }
          if (v58.__r_.__value_.__r.__words[0])
          {
            v58.__r_.__value_.__l.__size_ = v58.__r_.__value_.__r.__words[0];
            operator delete(v58.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          if (v13 != 2)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Unsupported input dimensions", 28);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v47);
          }
          uint64_t v48 = 0u;
          uint64_t v49 = 0u;
          size_t v47 = (uint64_t *)&unk_1F0A51768;
          int v50 = 0;
          (*(void (**)(void, uint64_t **))(**((void **)v9 + 3) + 32))(*((void *)v9 + 3), &v47);
          (*(void (**)(void *__return_ptr, uint64_t, uint64_t **))(*(void *)a1 + 32))(v61, a1, &v47);
          int v12 = (char *)v61[0];
          uint64_t v14 = v55;
          if ((unint64_t)v55 >= v56)
          {
            uint64_t v23 = ((uint64_t)v55 - v54) >> 3;
            if ((unint64_t)(v23 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            long long v24 = (uint64_t)(v56 - v54) >> 2;
            if (v24 <= v23 + 1) {
              long long v24 = v23 + 1;
            }
            if (v56 - v54 >= 0x7FFFFFFFFFFFFFF8) {
              uint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v25 = v24;
            }
            std::string::size_type v60 = &v56;
            if (v25) {
              uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v56, v25);
            }
            else {
              uint64_t v26 = 0;
            }
            uint64_t v27 = v61[0];
            int v30 = &v26[8 * v23];
            v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
            v58.__r_.__value_.__l.__size_ = (std::string::size_type)v30;
            std::string v59 = &v26[8 * v25];
            v61[0] = 0;
            *(void *)int v30 = v27;
            v58.__r_.__value_.__r.__words[2] = (std::string::size_type)(v30 + 8);
            std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(&v54, &v58);
            long long v15 = v55;
            std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((void **)&v58.__r_.__value_.__l.__data_);
          }
          else
          {
            v61[0] = 0;
            *uint64_t v55 = v12;
            long long v15 = v14 + 1;
          }
          uint64_t v55 = v15;
          uint64_t v31 = v61[0];
          v61[0] = 0;
          if (v31) {
            (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
          }
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v47);
        }
      }
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        unint64_t v32 = *v9;
        v58.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v32;
      }
      uint64_t v33 = v12 + 32;
      BOOL v34 = v52;
      if ((unint64_t)v52 >= v53)
      {
        long long v36 = (v52 - v51) >> 5;
        uint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = v53 - (void)v51;
        if ((uint64_t)(v53 - (void)v51) >> 4 > v37) {
          uint64_t v37 = v38 >> 4;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFE0) {
          int v39 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          int v39 = v37;
        }
        *((void *)&v49 + 1) = &v53;
        uint64_t v40 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v53, v39);
        uint64_t v41 = &v40[4 * v36];
        size_t v47 = v40;
        *(void *)&uint64_t v48 = v41;
        *(void *)&uint64_t v49 = &v40[4 * v42];
        float v43 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
        v41[2] = v58.__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v41 = v43;
        memset(&v58, 0, sizeof(v58));
        v41[3] = (uint64_t)v33;
        *((void *)&v48 + 1) = v41 + 4;
        std::vector<std::pair<std::string,espresso_buffer_t const*>>::__swap_out_circular_buffer((uint64_t *)&v51, &v47);
        long long v44 = v52;
        std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v47);
        unint64_t v52 = v44;
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        uint64_t v35 = v58.__r_.__value_.__r.__words[2];
        *(_OWORD *)unint64_t v52 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
        *((void *)v34 + 2) = v35;
        *((void *)v34 + 3) = v33;
        unint64_t v52 = v34 + 32;
      }
      v9 += 2;
    }
    while (v9 != v8);
  }
  if (HIBYTE(v57))
  {
    kaldi::quasar::ESNetworkPlan::RunNitro(a1, (uint64_t *)&v51, (uint64_t *)a3, v7, a5);
  }
  else if ((_BYTE)v57)
  {
    kaldi::quasar::ESNetworkPlan::RunTraining(a1, (unsigned __int8 **)&v51, (uint64_t)a3, v7, a5);
  }
  else
  {
    kaldi::quasar::ESNetworkPlan::RunClassic(a1, (unsigned __int8 **)&v51, (uint64_t)a3, v7, a5);
  }
  size_t v47 = (uint64_t *)&v51;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  size_t v47 = &v54;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
}

void sub_1B23F6794(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B23F67C4);
}

void sub_1B23F67C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  a11 = (void **)(v11 - 120);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,espresso_buffer_t const*>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(result, a2);
    v7[1] = v7[0] + v5;
    void v7[2] = v7[0] + v5;
    uint64_t v7[3] = v7[0] + 32 * v6;
    std::vector<std::pair<std::string,espresso_buffer_t const*>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B23F685C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B23F6E38(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 - 104);
  *(void *)(v1 - 104) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void **)(v1 - 144);
  if (v4)
  {
    *(void *)(v1 - 136) = v4;
    operator delete(v4);
  }
  *(void *)(v1 - 104) = v1 - 200;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 104));
  *(void *)(v1 - 200) = v1 - 176;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 200));
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESTensorData::Copy(kaldi::quasar::ESTensorData *this)
{
  if (*((void *)this + 25))
  {
    uint64_t v2 = *((void *)this + 17);
    uint64_t v3 = *((void *)this + 15) * *((void *)this + 14) * *((void *)this + 16);
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v4 = v3 * v2;
    *(_OWORD *)__dst = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    uint64_t v24 = 0;
    LODWORD(v23) = 65568;
    kaldi::quasar::EspressoNDArray::InitBufferMemory((kaldi::quasar::EspressoNDArray *)__dst, v3 * v2);
    uint64_t v5 = __dst[0];
    long long v6 = *((_OWORD *)this + 11);
    long long v21 = *((_OWORD *)this + 10);
    long long v22 = v6;
    uint64_t v7 = *((void *)this + 24);
    long long v8 = *((_OWORD *)this + 7);
    long long v17 = *((_OWORD *)this + 6);
    long long v18 = v8;
    long long v9 = *((_OWORD *)this + 9);
    long long v19 = *((_OWORD *)this + 8);
    long long v20 = v9;
    long long v10 = *((_OWORD *)this + 3);
    *(_OWORD *)__dst = *((_OWORD *)this + 2);
    long long v14 = v10;
    long long v11 = *((_OWORD *)this + 5);
    long long v15 = *((_OWORD *)this + 4);
    long long v16 = v11;
    __dst[0] = v5;
    uint64_t v12 = *((void *)this + 25);
    *(void *)&long long v23 = v7;
    *((void *)&v23 + 1) = v12;
    memcpy(v5, *((const void **)this + 4), 4 * v4);
  }
  else
  {
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v24 = 0;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    *(_OWORD *)__dst = 0u;
    LODWORD(v23) = 65568;
  }
  operator new();
}

void sub_1B23F70DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  if (a31) {
    free(a31);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ESTensorData::CopyToMatrix(uint64_t a1, int32x2_t *a2)
{
}

{
  kaldi::quasar::EspressoNDArray::ToMatrix<kaldi::CuMatrix<float>>((uint64_t *)(a1 + 32), a2);
}

float kaldi::quasar::ESTensorData::CopyToVector(uint64_t a1, uint64_t a2)
{
  return kaldi::quasar::EspressoNDArray::ToVector<kaldi::CuVector<float>>((uint64_t *)(a1 + 32), a2);
}

char *kaldi::quasar::ESTensorData::CopyToStdVector(uint64_t a1, void *a2)
{
  unint64_t v2 = *(void *)(a1 + 120) * *(void *)(a1 + 112) * *(void *)(a1 + 128) * *(void *)(a1 + 136);
  return std::vector<int>::__assign_with_size[abi:ne180100]<float *,float *>(a2, *(float **)(a1 + 32), (float *)(*(void *)(a1 + 32) + 4 * v2), v2);
}

char *kaldi::quasar::ESTensorData::CopyToStdVector(uint64_t a1, char *a2)
{
  unint64_t v2 = *(void *)(a1 + 120) * *(void *)(a1 + 112) * *(void *)(a1 + 128) * *(void *)(a1 + 136);
  return std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a2, *(char **)(a1 + 32), *(void *)(a1 + 32) + 4 * v2, v2);
}

void *kaldi::quasar::ESTensorData::CopyFromImpl(kaldi::quasar::ESTensorData *this, const kaldi::quasar::ComputeEngineBufferItf *lpsrc)
{
  if (!v3) {
    __cxa_bad_cast();
  }
  uint64_t v4 = (kaldi::quasar::EspressoNDArray *)(v3 + 32);
  return kaldi::quasar::EspressoNDArray::CopyTo(v4, (kaldi::quasar::ESTensorData *)((char *)this + 32));
}

void *kaldi::quasar::ESTensorData::FlatRangeCopy(kaldi::quasar::ESTensorData *this, const kaldi::quasar::ComputeEngineBufferItf *a2, int a3, int a4, int a5)
{
  uint64_t v9 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *))(*(void *)a2 + 152))(a2);
  if (*((_DWORD *)this + 48) != 65568)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "t_.buffer.storage_type == ESPRESSO_STORAGE_TYPE_FLOAT32");
    goto LABEL_8;
  }
  if (a4 - a3 < 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "srcend - srcstart >= 0");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  long long v10 = (const void *)(v9 + 4 * a3);
  long long v11 = (void *)(*((void *)this + 4) + 4 * a5);
  return memcpy(v11, v10, 4 * (a4 - a3));
}

float kaldi::quasar::ESTensorData::FlatRangeCopy(kaldi::quasar::ESTensorData *this, int *a2, unsigned int a3, int a4)
{
  if ((a3 & 0x80000000) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "length >= 0");
    goto LABEL_12;
  }
  int v4 = *((_DWORD *)this + 48);
  if (v4 != 65568)
  {
    if (v4 == 131104)
    {
      uint64_t v5 = (void *)(*((void *)this + 4) + 4 * a4);
      size_t v6 = 4 * a3;
      memcpy(v5, a2, v6);
      return result;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "unsupported storage type.");
LABEL_12:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  if (a3)
  {
    long long v8 = (float *)*((void *)this + 4);
    uint64_t v9 = a3;
    do
    {
      int v10 = *a2++;
      float result = (float)v10;
      *v8++ = (float)v10;
      --v9;
    }
    while (v9);
  }
  return result;
}

void sub_1B23F73E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD *kaldi::quasar::ESTensorData::FlatRangeCopy(_DWORD *this, float *a2, unsigned int a3, int a4)
{
  if ((a3 & 0x80000000) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "length >= 0");
    goto LABEL_12;
  }
  int v4 = this[48];
  if (v4 != 65568)
  {
    if (v4 == 131104)
    {
      if (a3)
      {
        uint64_t v5 = (_DWORD *)*((void *)this + 4);
        uint64_t v6 = a3;
        do
        {
          float v7 = *a2++;
          *v5++ = (int)v7;
          --v6;
        }
        while (v6);
      }
      return this;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "unsupported storage type.");
LABEL_12:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  long long v8 = (void *)(*((void *)this + 4) + 4 * a4);
  size_t v9 = 4 * a3;
  return memcpy(v8, a2, v9);
}

void sub_1B23F74C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float kaldi::quasar::ESTensorData::AssignScalar(kaldi::quasar::ESTensorData *this, int a2, int a3)
{
  int v3 = *((_DWORD *)this + 48);
  if (v3 == 65568)
  {
    float result = (float)a2;
    *(float *)(*((void *)this + 4) + 4 * a3) = (float)a2;
  }
  else
  {
    if (v3 != 131104)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "unsupported storage type.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
    }
    *(_DWORD *)(*((void *)this + 4) + 4 * a3) = a2;
  }
  return result;
}

uint64_t kaldi::quasar::ESTensorData::AssignScalar(uint64_t this, float a2, int a3)
{
  int v3 = *(_DWORD *)(this + 192);
  if (v3 == 131104)
  {
    *(_DWORD *)(*(void *)(this + 32) + 4 * a3) = (int)a2;
  }
  else
  {
    if (v3 != 65568)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "unsupported storage type.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
    }
    *(float *)(*(void *)(this + 32) + 4 * a3) = a2;
  }
  return this;
}

float kaldi::quasar::ESTensorData::GetFloatScalar(kaldi::quasar::ESTensorData *this, int a2)
{
  if (*((_DWORD *)this + 48) != 65568)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "t_.buffer.storage_type == ESPRESSO_STORAGE_TYPE_FLOAT32");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return *(float *)(*((void *)this + 4) + 4 * a2);
}

uint64_t kaldi::quasar::ESTensorData::GetWritableDataFloat(kaldi::quasar::ESTensorData *this)
{
  if (*((_DWORD *)this + 48) != 65568)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "t_.buffer.storage_type == ESPRESSO_STORAGE_TYPE_FLOAT32");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return *((void *)this + 4);
}

uint64_t kaldi::quasar::ESTensorData::GetDataInt32(kaldi::quasar::ESTensorData *this)
{
  if (*((_DWORD *)this + 48) != 131104)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "t_.buffer.storage_type == ESPRESSO_STORAGE_TYPE_INT32");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return *((void *)this + 4);
}

uint64_t kaldi::quasar::ESTensorData::GetNumDims(kaldi::quasar::ESTensorData *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t kaldi::quasar::ESTensorData::GetDimSize(kaldi::quasar::ESTensorData *this, int a2)
{
  v4[10] = *MEMORY[0x1E4F143B8];
  espresso_buffer_unpack_tensor_shape();
  return v4[a2];
}

void kaldi::quasar::ESTensorData::Reshape()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented TODO");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

kaldi::quasar::ESNetworkConfig *kaldi::quasar::ESNetworkConfig::ESNetworkConfig(kaldi::quasar::ESNetworkConfig *this, const kaldi::quasar::ESNetworkConfig *a2)
{
  *(void *)this = &unk_1F0A511C0;
  *((unsigned char *)this + 8) = *((unsigned char *)a2 + 8);
  uint64_t v4 = *((void *)a2 + 3);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)this + 3) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *((_WORD *)this + 16) = *((_WORD *)a2 + 16);
  *(void *)this = &unk_1F0A50660;
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 40);
    *((void *)this + 7) = *((void *)a2 + 7);
    *(_OWORD *)((char *)this + 40) = v5;
  }
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)this + 8, (const void ***)a2 + 8);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 88);
    *((void *)this + 13) = *((void *)a2 + 13);
    *(_OWORD *)((char *)this + 88) = v6;
  }
  float v7 = (std::string *)((char *)this + 112);
  if (*((char *)a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 14), *((void *)a2 + 15));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 7);
    *((void *)this + 16) = *((void *)a2 + 16);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return this;
}

void sub_1B23F7954(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*v4);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3, *(void **)(v1 + 72));
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf((kaldi::quasar::ComputeEngineConfigItf *)v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoNDArray::ToMatrix<kaldi::Matrix<float>>(uint64_t *a1, int32x2_t *a2)
{
  v26[9] = *MEMORY[0x1E4F143B8];
  unint64_t v24 = 0;
  espresso_buffer_unpack_tensor_shape();
  unint64_t v4 = a1[21];
  if (v4 >= 3)
  {
    unint64_t v5 = 0;
    while (*(void *)&v25[8 * v5] == 1)
    {
      if (v24 - 1 == ++v5)
      {
        unint64_t v5 = v24 - 1;
        break;
      }
    }
    if (v24 <= v5 + 1) {
      unint64_t v6 = v5 + 1;
    }
    else {
      unint64_t v6 = v24;
    }
    unint64_t v7 = v6 - 1;
    unint64_t v8 = v5;
    while (1)
    {
      unint64_t v9 = v8 + 1;
      if (v8 + 1 >= v24) {
        break;
      }
      uint64_t v10 = v26[v8++];
      if (v10 != 1)
      {
        unint64_t v7 = v9 - 1;
        unint64_t v6 = v9;
        break;
      }
    }
    if (v7 + 2 < v24)
    {
      uint64_t v11 = v24 - v7 - 2;
      uint64_t v12 = &v26[v7 + 1];
      while (1)
      {
        uint64_t v13 = *v12++;
        if (v13 != 1) {
          break;
        }
        if (!--v11) {
          goto LABEL_17;
        }
      }
      if (v9 < v24)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Tensor rank is greater than 2: ", 31);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
      }
      goto LABEL_25;
    }
LABEL_17:
    if (v9 >= v24)
    {
LABEL_25:
      long long v16 = (uint64_t *)&v25[8 * v5];
      goto LABEL_26;
    }
    uint64_t v14 = *(void *)&v25[8 * v6];
    long long v15 = (uint64_t *)&v25[8 * v5];
LABEL_22:
    uint64_t v17 = *v15;
    kaldi::Matrix<float>::Resize(a2, *v15, v14, 1, 0);
    if (!v17) {
      return;
    }
    goto LABEL_27;
  }
  if (v4 != 1)
  {
    long long v15 = (uint64_t *)v25;
    uint64_t v14 = v26[0];
    goto LABEL_22;
  }
  long long v16 = (uint64_t *)v25;
LABEL_26:
  uint64_t v14 = *v16;
  kaldi::Matrix<float>::Resize(a2, 1, *v16, 1, 0);
  uint64_t v17 = 1;
LABEL_27:
  uint64_t v18 = 0;
  uint64_t v19 = *a1;
  do
  {
    if (v14)
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = *(void *)a2 + 4 * a2[2].i32[0] * (int)v18;
      do
      {
        *(_DWORD *)(v22 + 4 * v21) = *(_DWORD *)(v19 + 4 * v21);
        ++v21;
        v20 -= 4;
      }
      while (v14 != v21);
      v19 -= v20;
    }
    ++v18;
  }
  while (v18 != v17);
}

void sub_1B23F7BE0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoNDArray::ToMatrix<kaldi::CuMatrix<float>>(uint64_t *a1, int32x2_t *a2)
{
  v26[9] = *MEMORY[0x1E4F143B8];
  unint64_t v24 = 0;
  espresso_buffer_unpack_tensor_shape();
  unint64_t v4 = a1[21];
  if (v4 >= 3)
  {
    unint64_t v5 = 0;
    while (*(void *)&v25[8 * v5] == 1)
    {
      if (v24 - 1 == ++v5)
      {
        unint64_t v5 = v24 - 1;
        break;
      }
    }
    if (v24 <= v5 + 1) {
      unint64_t v6 = v5 + 1;
    }
    else {
      unint64_t v6 = v24;
    }
    unint64_t v7 = v6 - 1;
    unint64_t v8 = v5;
    while (1)
    {
      unint64_t v9 = v8 + 1;
      if (v8 + 1 >= v24) {
        break;
      }
      uint64_t v10 = v26[v8++];
      if (v10 != 1)
      {
        unint64_t v7 = v9 - 1;
        unint64_t v6 = v9;
        break;
      }
    }
    if (v7 + 2 < v24)
    {
      uint64_t v11 = v24 - v7 - 2;
      uint64_t v12 = &v26[v7 + 1];
      while (1)
      {
        uint64_t v13 = *v12++;
        if (v13 != 1) {
          break;
        }
        if (!--v11) {
          goto LABEL_17;
        }
      }
      if (v9 < v24)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Tensor rank is greater than 2: ", 31);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
      }
      goto LABEL_25;
    }
LABEL_17:
    if (v9 >= v24)
    {
LABEL_25:
      long long v16 = (uint64_t *)&v25[8 * v5];
      goto LABEL_26;
    }
    uint64_t v14 = *(void *)&v25[8 * v6];
    long long v15 = (uint64_t *)&v25[8 * v5];
LABEL_22:
    uint64_t v17 = *v15;
    kaldi::CuMatrix<float>::Resize(a2, *v15, v14, 1, 0);
    if (!v17) {
      return;
    }
    goto LABEL_27;
  }
  if (v4 != 1)
  {
    long long v15 = (uint64_t *)v25;
    uint64_t v14 = v26[0];
    goto LABEL_22;
  }
  long long v16 = (uint64_t *)v25;
LABEL_26:
  uint64_t v14 = *v16;
  kaldi::CuMatrix<float>::Resize(a2, 1, *v16, 1, 0);
  uint64_t v17 = 1;
LABEL_27:
  uint64_t v18 = 0;
  uint64_t v19 = *a1;
  do
  {
    if (v14)
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = *(void *)&a2[1] + 4 * a2[3].i32[0] * (int)v18;
      do
      {
        *(_DWORD *)(v22 + 4 * v21) = *(_DWORD *)(v19 + 4 * v21);
        ++v21;
        v20 -= 4;
      }
      while (v14 != v21);
      v19 -= v20;
    }
    ++v18;
  }
  while (v18 != v17);
}

void sub_1B23F7E20(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

float kaldi::quasar::EspressoNDArray::ToVector<kaldi::CuVector<float>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1[11] * a1[10] * a1[12] * a1[13];
  uint64_t v4 = *a1;
  kaldi::CuVector<float>::Resize(a2, v3, 1);
  if (v3)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a2 + 8);
    do
    {
      float result = *(float *)(v4 + 4 * v6);
      *(float *)(v7 + 4 * v6++) = result;
    }
    while (v3 != v6);
  }
  return result;
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<float *,float *>(void *a1, float *a2, float *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  float result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 2)
  {
    uint64_t v18 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    uint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 2;
    if (v19 >= a4)
    {
      uint64_t v26 = result;
      if (a2 != a3)
      {
        uint64_t v27 = result;
        do
        {
          float v28 = *v6++;
          *(_DWORD *)uint64_t v27 = (int)v28;
          v27 += 4;
          v26 += 4;
        }
        while (v6 != a3);
      }
      uint64_t v17 = (char *)(v26 - result);
      uint64_t v12 = result;
    }
    else
    {
      uint64_t v20 = &a2[v19];
      if (v12 != result)
      {
        uint64_t v21 = 4 * v19;
        do
        {
          float v22 = *v6++;
          *(_DWORD *)float result = (int)v22;
          result += 4;
          v21 -= 4;
        }
        while (v21);
      }
      long long v23 = v12;
      if (v20 != a3)
      {
        unint64_t v24 = v12;
        do
        {
          float v25 = *v20++;
          *(_DWORD *)unint64_t v24 = (int)v25;
          v24 += 4;
          v23 += 4;
        }
        while (v20 != a3);
      }
      uint64_t v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    float result = std::vector<int>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v14 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    uint64_t v12 = v14;
    long long v15 = v14;
    if (v6 != a3)
    {
      long long v15 = v12;
      do
      {
        float v16 = *v6++;
        *(_DWORD *)long long v15 = (int)v16;
        v15 += 4;
      }
      while (v6 != a3);
    }
    uint64_t v17 = (char *)(v15 - v12);
  }
  *uint64_t v13 = &v17[(void)v12];
  return result;
}

void *kaldi::quasar::EspressoNDArray::CopyTo(kaldi::quasar::EspressoNDArray *this, kaldi::quasar::EspressoNDArray *a2)
{
  v6[54] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 11) * *((void *)this + 10) * *((void *)this + 12) * *((void *)this + 13);
  if (v2 != *((void *)a2 + 11) * *((void *)a2 + 10) * *((void *)a2 + 12) * *((void *)a2 + 13))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "total_elements == dst.Volume()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  espresso_buffer_unpack_tensor_shape();
  espresso_buffer_unpack_tensor_shape();
  return memmove(*(void **)a2, *(const void **)this, 4 * v2);
}

void sub_1B23F8174(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::EspressoNDArray::FromStdVector<std::vector<int>>(kaldi::quasar::EspressoNDArray *a1, int **a2, char a3)
{
  kaldi::quasar::EspressoNDArray::InitBufferMemory(a1, a2[1] - *a2);
  uint64_t v6 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v7 = *(float **)a1;
    if ((unint64_t)(a2[1] - *a2) <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = a2[1] - *a2;
    }
    do
    {
      int v9 = *v6++;
      *v7++ = (float)v9;
      --v8;
    }
    while (v8);
  }
  if (a3) {
    *((void *)a1 + 21) = 2;
  }
  else {
    *((void *)a1 + 21) = 1;
  }
  return espresso_buffer_pack_tensor_shape();
}

uint64_t kaldi::quasar::EspressoNDArray::FromStdVector<std::vector<float>>(kaldi::quasar::EspressoNDArray *a1, int **a2, char a3)
{
  kaldi::quasar::EspressoNDArray::InitBufferMemory(a1, a2[1] - *a2);
  uint64_t v6 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v7 = *(_DWORD **)a1;
    if ((unint64_t)(a2[1] - *a2) <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = a2[1] - *a2;
    }
    do
    {
      int v9 = *v6++;
      *v7++ = v9;
      --v8;
    }
    while (v8);
  }
  if (a3) {
    *((void *)a1 + 21) = 2;
  }
  else {
    *((void *)a1 + 21) = 1;
  }
  return espresso_buffer_pack_tensor_shape();
}

uint64_t kaldi::quasar::EspressoNDArray::FromMatrix<kaldi::CuMatrixBase<float>>(kaldi::quasar::EspressoNDArray *a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 20);
  kaldi::quasar::EspressoNDArray::InitBufferMemory(a1, (int)v4 * (uint64_t)v5);
  *((void *)a1 + 21) = 2;
  uint64_t result = espresso_buffer_pack_tensor_shape();
  if (v5 >= 1)
  {
    int v7 = 0;
    uint64_t v8 = *(char **)a1;
    size_t v9 = 4 * v4;
    do
    {
      uint64_t result = (uint64_t)memcpy(v8, (const void *)(*(void *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * v7++), v9);
      v8 += v9;
    }
    while (v5 != v7);
  }
  return result;
}

uint64_t kaldi::quasar::EspressoNDArray::FromMatrix<kaldi::MatrixBase<float>>(kaldi::quasar::EspressoNDArray *a1, uint64_t a2)
{
  int v4 = kaldi::MatrixBase<float>::NumRows(a2);
  int v5 = kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::quasar::EspressoNDArray::InitBufferMemory(a1, v5 * v4);
  *((void *)a1 + 21) = 2;
  uint64_t result = espresso_buffer_pack_tensor_shape();
  if (v4 >= 1)
  {
    int v7 = 0;
    uint64_t v8 = *(char **)a1;
    size_t v9 = 4 * v5;
    do
    {
      uint64_t v10 = *(void *)a2;
      int v11 = *(_DWORD *)(a2 + 16);
      kaldi::MatrixBase<float>::NumCols(a2);
      uint64_t result = (uint64_t)memcpy(v8, (const void *)(v10 + 4 * v11 * v7++), v9);
      v8 += v9;
    }
    while (v4 != v7);
  }
  return result;
}

void *kaldi::quasar::ESTensorData::ESTensorData(void *a1, uint64_t a2)
{
  int v4 = kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(a1);
  void *v4 = &unk_1F0A50080;
  v4[25] = 0;
  v4[26] = 0;
  int v5 = *(uint64_t **)a2;
  uint64_t v6 = *(void *)(a2 + 8) - *(void *)a2;
  if (v6)
  {
    unint64_t v7 = v6 >> 3;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    size_t v8 = 1;
    do
    {
      uint64_t v9 = *v5++;
      v8 *= v9;
      --v7;
    }
    while (v7);
  }
  else
  {
    size_t v8 = 1;
  }
  kaldi::quasar::EspressoNDArray::InitBufferMemory((kaldi::quasar::EspressoNDArray *)(v4 + 4), v8);
  espresso_buffer_pack_tensor_shape();
  a1[25] = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3;
  return a1;
}

void sub_1B23F860C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 208);
  *(void *)(v1 + 208) = 0;
  if (v3) {
    free(v3);
  }
  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t std::operator==[abi:ne180100]<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24) != a2[3]) {
    return 0;
  }
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  if (!v2) {
    return 1;
  }
  while (1)
  {
    int v4 = (const void **)(v2 + 2);
    uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a2, (unsigned __int8 *)v2 + 16);
    if (!result) {
      return result;
    }
    uint64_t v6 = *((unsigned __int8 *)v2 + 39);
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = *((unsigned __int8 *)v2 + 39);
    }
    else {
      uint64_t v7 = v2[3];
    }
    uint64_t v8 = *(unsigned __int8 *)(result + 39);
    int v9 = (char)v8;
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(result + 24);
    }
    if (v7 != v8) {
      return 0;
    }
    uint64_t v12 = *(unsigned __int8 **)(result + 16);
    uint64_t v10 = (unsigned __int8 *)(result + 16);
    int v11 = v12;
    if (v9 >= 0) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = v11;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*v4, v13, v2[3])) {
        return 0;
      }
    }
    else if (*((unsigned char *)v2 + 39))
    {
      while (*(unsigned __int8 *)v4 == *v13)
      {
        int v4 = (const void **)((char *)v4 + 1);
        ++v13;
        if (!--v6) {
          goto LABEL_19;
        }
      }
      return 0;
    }
LABEL_19:
    uint64_t v2 = (uint64_t *)*v2;
    if (!v2) {
      return 1;
    }
  }
}

uint64_t std::vector<std::pair<std::string,espresso_buffer_t const*>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,espresso_buffer_t const*>>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,espresso_buffer_t const*>>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(v8 - 8) = *(void *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v8;
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,espresso_buffer_t const*>>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,espresso_buffer_t const*>>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *quasar::RegionsBitmapData::RegionsBitmapData(void *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  this[7] = 0;
  this[8] = 0;
  return this;
}

void quasar::RegionsBitmapData::loadAndEraseFromJson(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v3, "bitmap-file");
  quasar::PTree::getAndEraseString(a2, (uint64_t)&v3);
}

void quasar::readLongitude(uint64_t a1, uint64_t a2)
{
}

void quasar::readLatitude(uint64_t a1, uint64_t a2)
{
}

uint64_t quasar::RegionsBitmapData::lookupBitmapColorForLocation(quasar::RegionsBitmapData *this, const quasar::Location *a2)
{
  if (quasar::Location::isUnknown(a2))
  {
    memset(v15, 0, sizeof(v15));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "Internal error, expecting a real location at this point");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v15);
  }
  double v4 = *((double *)this + 4) - *((double *)this + 3);
  double v6 = *((double *)this + 5);
  double v5 = *((double *)this + 6);
  double v7 = (quasar::corrective_reranking::VoiceEditingWFST::Path::getWeight(a2) - *((double *)this + 3)) / v4;
  double Latitude = quasar::Location::getLatitude(a2);
  if (v7 < 0.0 || v7 > 1.0) {
    return 0;
  }
  double v11 = (Latitude - *((double *)this + 5)) / (v5 - v6);
  if (v11 < 0.0 || v11 > 1.0) {
    return 0;
  }
  char v13 = (quasar::Bitmap *)*((void *)this + 7);
  return quasar::Bitmap::nearestNeighborSampleAt(v13, v8, v7, v11);
}

kaldi::quasar::FofeLmEvaluator *kaldi::quasar::FofeLmEvaluator::FofeLmEvaluator(kaldi::quasar::FofeLmEvaluator *this, const kaldi::quasar::NnlmDecoderWord *a2, kaldi::InferenceNetItf *a3, kaldi::InferenceNetItf *a4, float a5, int a6, int a7, int a8)
{
  *(void *)kaldi::quasar::RnnlmEvaluator::RnnlmEvaluator(this, a2, a3, a4, a5, a6, a7, a8, 0) = &unk_1F0A50770;
  unsigned int v11 = kaldi::quasar::NnlmDecoderWord::BosSymbol(a2);
  *((_DWORD *)this + 117) = kaldi::quasar::NnlmDecoderWord::GetWordId(a2, v11);
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((void *)this + 59) = &unk_1F0A51768;
  *((unsigned char *)this + 512) = 0;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((void *)this + 65) = &unk_1F0A51768;
  *((unsigned char *)this + 560) = 0;
  (*(void (**)(kaldi::InferenceNetItf *))(*(void *)a3 + 168))(a3);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"This is a FOFE model", 20);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v13);
  }
  return this;
}

void sub_1B23F9444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a9);
  kaldi::CuMatrix<float>::~CuMatrix(v11);
  kaldi::CuMatrix<float>::~CuMatrix(v10);
  kaldi::quasar::RnnlmEvaluator::~RnnlmEvaluator(v9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::FofeLmEvaluator::~FofeLmEvaluator(kaldi::quasar::FofeLmEvaluator *this)
{
  *(void *)this = &unk_1F0A50770;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    kaldi::quasar::FofeLmEvaluator::Report((uint64_t *)__p, this);
    if ((v5 & 0x80u) == 0) {
      uint64_t v2 = __p;
    }
    else {
      uint64_t v2 = (void **)__p[0];
    }
    if ((v5 & 0x80u) == 0) {
      uint64_t v3 = v5;
    }
    else {
      uint64_t v3 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v2, v3);
    if ((char)v5 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v6);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 520);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 472);
  kaldi::quasar::RnnlmEvaluator::~RnnlmEvaluator(this);
}

{
  uint64_t vars8;

  kaldi::quasar::FofeLmEvaluator::~FofeLmEvaluator(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::quasar::FofeLmEvaluator::Report(kaldi::quasar::FofeLmEvaluator *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"HIT vs MISS: ", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"lm-score ", 9);
  uint64_t v2 = (void *)std::ostream::operator<<();
  char v10 = 47;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)&v10, 1);
  uint64_t v3 = (void *)std::ostream::operator<<();
  double v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"penultimate ", 12);
  unsigned __int8 v5 = (void *)std::ostream::operator<<();
  char v10 = 47;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v10, 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v7 + *(void *)(v7[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[1] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v9);
}

void sub_1B23F9704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL kaldi::quasar::FofeLmEvaluator::ShouldCacheNgram(uint64_t a1, void *a2)
{
  return *(unsigned char *)(a1 + 40) || *(int *)(a1 + 464) > (unint64_t)((uint64_t)(a2[1] - *a2) >> 2);
}

float kaldi::quasar::FofeLmEvaluator::CalculateSingleNgramAfterCacheMiss(uint64_t a1, const void **a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    return kaldi::quasar::DnnlmEvaluator::CalculateSingleNgramAfterCacheMiss(a1, (uint64_t)a2);
  }
  else
  {
    unsigned __int8 v5 = *a2;
    uint64_t v6 = (uint64_t)a2[1] - 4;
    unint64_t v7 = (v6 - (uint64_t)*a2) >> 2;
    std::string __p = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, v5, v6, v7);
    uint64_t v27 = 0;
    if (kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get(a1 + 136, (uint64_t)&__p, &v27))
    {
      ++*(_DWORD *)(a1 + 296);
    }
    else
    {
      ++*(_DWORD *)(a1 + 300);
      uint64_t v9 = *a2;
      char v8 = a2[1];
      uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 48))(*(void *)(a1 + 24));
      int v11 = v10;
      uint64_t v12 = ((unint64_t)(v8 - v9) >> 2) - 1;
      kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 520), v12, v10, 1, 0);
      int v13 = v11 - 1;
      if (v11 >= 1)
      {
        uint64_t v14 = 0;
        for (uint64_t i = 0; i != v11; ++i)
        {
          if ((int)v12 >= 1)
          {
            uint64_t v16 = 0;
            uint64_t v17 = -4 * v13;
            uint64_t v18 = (float *)(*(void *)(a1 + 528) + v14);
            uint64_t v19 = 4 * *(int *)(a1 + 544);
            do
            {
              uint64_t v20 = (int *)((char *)*a2 + v17);
              if (v16 < v11 + ~i) {
                uint64_t v20 = (int *)(a1 + 468);
              }
              *uint64_t v18 = (float)*v20;
              ++v16;
              v17 += 4;
              uint64_t v18 = (float *)((char *)v18 + v19);
            }
            while (v12 != v16);
          }
          --v13;
          v14 += 4;
        }
      }
      uint64_t v27 = kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace((unint64_t *)(a1 + 136), (uint64_t)&__p);
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 24) + 96))(*(void *)(a1 + 24), a1 + 520, a1 + 472, 1);
      kaldi::CuVector<float>::Resize((uint64_t)v27, *(unsigned int *)(a1 + 488), 1);
      uint64_t v21 = *(void *)(a1 + 480);
      uint64_t v22 = *(void *)(a1 + 504);
      DWORD2(v25) = *(_DWORD *)(a1 + 488);
      HIDWORD(v25) = 1;
      *(void *)&long long v26 = *(void *)(a1 + 496);
      *((void *)&v26 + 1) = v22;
      unint64_t v24 = &unk_1F0A472A0;
      *(void *)&long long v25 = v21;
      kaldi::CuVectorBase<float>::CopyRowsFromMat((uint64_t)v27, (uint64_t)&v24);
      unint64_t v24 = &unk_1F0A472A0;
      long long v25 = 0u;
      long long v26 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v24);
    }
    float v23 = -(float)((*(float (**)(void, uint64_t *, void))(**(void **)(a1 + 24) + 136))(*(void *)(a1 + 24), v27, *((unsigned int *)a2[1] - 1))- *(float *)(a1 + 44));
    if (__p)
    {
      uint64_t v29 = __p;
      operator delete(__p);
    }
    return v23;
  }
}

void sub_1B23F9A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  *uint64_t v17 = 0u;
  v17[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a10);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *EARContextAwareLDModel::EARContextAwareLDModel(void *a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  *a1 = &unk_1F0A34440;
  a1[1] = *a2;
  uint64_t v3 = a2[1];
  a1[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  a1[3] = 0;
  double v4 = (void *)MEMORY[0x1E4F1CB10];
  unsigned __int8 v5 = objc_msgSend(NSString, "stringWithUTF8String:");
  uint64_t v6 = [v4 fileURLWithPath:v5 isDirectory:1];

  id v14 = 0;
  uint64_t v7 = [MEMORY[0x1E4F1E970] modelWithContentsOfURL:v6 error:&v14];
  id v8 = v14;
  uint64_t v9 = (void *)a1[3];
  a1[3] = v7;

  if (v8)
  {
    int v11 = [v8 localizedDescription];
    uint64_t v12 = earLanguageDetectorLog;
    if (os_log_type_enabled((os_log_t)earLanguageDetectorLog, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      _os_log_impl(&dword_1B1A86000, v12, OS_LOG_TYPE_DEFAULT, "Error loading context-aware model: %@", (uint8_t *)&buf, 0xCu);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (v11) {
      objc_msgSend(v11, "ear_toString");
    }
    else {
      memset(&buf, 0, sizeof(buf));
    }
    std::runtime_error::runtime_error(exception, &buf);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  return a1;
}

void sub_1B23F9D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  __cxa_free_exception(v20);

  uint64_t v22 = *(std::__shared_weak_count **)(v16 + 16);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v16);
  _Unwind_Resume(a1);
}

void EARContextAwareLDModel::makePrediction(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v226[19] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v5 = *(void **)(a1 + 8);
  uint64_t v181 = v5[6];
  uint64_t v182 = v5[7];
  uint64_t v183 = v5[3];
  uint64_t v184 = v5[4];
  uint64_t v6 = (v184 - v183) / 48;
  id v7 = objc_alloc(MEMORY[0x1E4F1E9A0]);
  id v8 = [NSNumber numberWithUnsignedInteger:v6];
  int64_t v220 = v8;
  uint64_t v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v220 count:1];
  id v210 = 0;
  unint64_t v189 = (void *)[v7 initWithShape:v9 dataType:65600 error:&v210];
  id v191 = v210;

  if (!v191)
  {
    if (v184 != v183)
    {
      uint64_t v12 = 0;
      do
        [v189 setObject:&unk_1F0A74208 atIndexedSubscript:v12++];
      while (v6 != v12);
    }
    id v13 = objc_alloc(MEMORY[0x1E4F1E9A0]);
    id v14 = [NSNumber numberWithUnsignedInteger:v6];
    int64_t v219 = v14;
    long long v15 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v219 count:1];
    id v209 = 0;
    int v190 = (void *)[v13 initWithShape:v15 dataType:65600 error:&v209];
    id v191 = v209;

    if (v191)
    {
      uint64_t v16 = (id)earLanguageDetectorLog;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = [v191 description];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Failed to allocate array";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v17;
        _os_log_impl(&dword_1B1A86000, v16, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);
      }
      quasar::LDResult::LDResult(a4, 0);
      goto LABEL_142;
    }
    if (v184 != v183)
    {
      uint64_t v18 = 0;
      double v19 = 1.0;
      do
      {
        uint64_t v20 = objc_msgSend(NSNumber, "numberWithDouble:", 1.0 / (double)(unint64_t)v6, v19);
        [v190 setObject:v20 atIndexedSubscript:v18];

        ++v18;
      }
      while (v6 != v18);
    }
    uint64_t v21 = *(void *)(a1 + 8);
    float v206 = 0;
    uint64_t v207 = 0;
    long long v205 = (uint64_t *)&v206;
    float v23 = (unsigned __int8 *)(a3 + 8);
    uint64_t v22 = *(unsigned __int8 **)a3;
    if (*(void *)a3 != a3 + 8)
    {
      do
      {
        std::__tree<quasar::language_detector::Locale>::__emplace_unique_key_args<quasar::language_detector::Locale,quasar::language_detector::Locale const&>(&v205, v22 + 32, (long long *)v22 + 2);
        unint64_t v24 = (unsigned __int8 *)*((void *)v22 + 1);
        if (v24)
        {
          do
          {
            long long v25 = v24;
            unint64_t v24 = *(unsigned __int8 **)v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            long long v25 = (unsigned __int8 *)*((void *)v22 + 2);
            BOOL v26 = *(void *)v25 == (void)v22;
            uint64_t v22 = v25;
          }
          while (!v26);
        }
        uint64_t v22 = v25;
      }
      while (v25 != v23);
    }
    if (*(unsigned char *)(a3 + 48)) {
      std::set<quasar::language_detector::Locale>::insert[abi:ne180100]<std::__tree_const_iterator<quasar::language_detector::Locale,std::__tree_node<quasar::language_detector::Locale,void *> *,long>>((uint64_t *)&v205, *(unsigned __int8 ***)(a3 + 24), (unsigned __int8 **)(a3 + 32));
    }
    if (*(unsigned char *)(a3 + 144))
    {
      float v28 = *(unsigned __int8 ***)(a3 + 120);
      uint64_t v27 = *(unsigned __int8 ***)(a3 + 128);
      while (v28 != v27)
      {
        std::__tree<quasar::language_detector::Locale>::__emplace_hint_unique_key_args<quasar::language_detector::Locale,quasar::language_detector::Locale const&>(&v205, (uint64_t *)&v206, v28, (long long *)v28);
        v28 += 6;
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = (v182 - v181) / 24;
    do
    {
      uint64_t v31 = (unsigned __int8 *)(a3 + qword_1B25B07F8[v29]);
      if (v31[48]) {
        std::__tree<quasar::language_detector::Locale>::__emplace_unique_key_args<quasar::language_detector::Locale,quasar::language_detector::Locale const&>(&v205, v31, (long long *)(a3 + qword_1B25B07F8[v29]));
      }
      ++v29;
    }
    while (v29 != 3);
    for (uint64_t i = 0; i != 3; ++i)
    {
      uint64_t v33 = (void **)(a3 + qword_1B25B0810[i]);
      if (*((unsigned char *)v33 + 24))
      {
        long long v36 = (unsigned __int8 *)*v33;
        uint64_t v35 = (unsigned __int8 *)(v33 + 1);
        BOOL v34 = v36;
        if (v36 != v35)
        {
          do
          {
            std::__tree<quasar::language_detector::Locale>::__emplace_unique_key_args<quasar::language_detector::Locale,quasar::language_detector::Locale const&>(&v205, v34 + 32, (long long *)v34 + 2);
            uint64_t v37 = (unsigned __int8 *)*((void *)v34 + 1);
            if (v37)
            {
              do
              {
                uint64_t v38 = v37;
                uint64_t v37 = *(unsigned __int8 **)v37;
              }
              while (v37);
            }
            else
            {
              do
              {
                uint64_t v38 = (unsigned __int8 *)*((void *)v34 + 2);
                BOOL v26 = *(void *)v38 == (void)v34;
                BOOL v34 = v38;
              }
              while (!v26);
            }
            BOOL v34 = v38;
          }
          while (v38 != v35);
        }
      }
    }
    uint64_t v40 = *(unsigned __int8 ***)(v21 + 24);
    for (uint64_t j = *(unsigned __int8 ***)(v21 + 32); v40 != j; v40 += 6)
      std::__tree<quasar::language_detector::Locale>::__erase_unique<quasar::language_detector::Locale>(&v205, v40);
    if (v207)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&buf);
      quasar::language_detector::operator<<(&buf, (quasar::language_detector::Locale *)(v205 + 4));
      uint64_t v41 = v205;
      uint64_t v42 = (uint64_t *)v205[1];
      if (v42)
      {
        do
        {
          float v43 = v42;
          uint64_t v42 = (uint64_t *)*v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          float v43 = (uint64_t *)v41[2];
          BOOL v26 = *v43 == (void)v41;
          uint64_t v41 = v43;
        }
        while (!v26);
      }
      if (v43 != (uint64_t *)&v206)
      {
        do
        {
          long long v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf, (uint64_t)", ", 2);
          quasar::language_detector::operator<<(v44, (quasar::language_detector::Locale *)(v43 + 4));
          float v45 = (uint64_t *)v43[1];
          if (v45)
          {
            do
            {
              size_t v46 = v45;
              float v45 = (uint64_t *)*v45;
            }
            while (v45);
          }
          else
          {
            do
            {
              size_t v46 = (uint64_t *)v43[2];
              BOOL v26 = *v46 == (void)v43;
              float v43 = v46;
            }
            while (!v26);
          }
          float v43 = v46;
        }
        while (v46 != (uint64_t *)&v206);
      }
      size_t v47 = (id)earLanguageDetectorLog;
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        uint64_t v48 = v213 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)uint64_t v214 = 136315138;
        *(void *)&v214[4] = v48;
        _os_log_impl(&dword_1B1A86000, v47, OS_LOG_TYPE_DEFAULT, "Unsupported locales (%s) found in context, will be ignored", v214, 0xCu);
        if (SHIBYTE(v213) < 0) {
          operator delete(__p);
        }
      }

      buf.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA418];
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words
                                + *(void *)(buf.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418]
                                                                                                  + 24);
      buf.__r_.__value_.__l.__size_ = MEMORY[0x1E4FBA470] + 16;
      if (v225 < 0) {
        operator delete(v224);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1B3EA8520](v226);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v205, v206);
    int v212 = 0;
    uint64_t v213 = 0;
    std::string __p = &v212;
    if (*(unsigned char *)(a3 + 48))
    {
      if (&__p != (void **)(a3 + 24)) {
        std::__tree<quasar::language_detector::Locale>::__assign_multi<std::__tree_const_iterator<quasar::language_detector::Locale,std::__tree_node<quasar::language_detector::Locale,void *> *,long>>((uint64_t **)&__p, *(long long **)(a3 + 24), (long long *)(a3 + 32));
      }
    }
    else
    {
      uint64_t v49 = *(unsigned __int8 **)a3;
      if (*(unsigned __int8 **)a3 != v23)
      {
        do
        {
          std::__tree<quasar::language_detector::Locale>::__emplace_unique_key_args<quasar::language_detector::Locale,quasar::language_detector::Locale const&>((uint64_t **)&__p, v49 + 32, (long long *)v49 + 2);
          int v50 = (unsigned __int8 *)*((void *)v49 + 1);
          if (v50)
          {
            do
            {
              int v51 = v50;
              int v50 = *(unsigned __int8 **)v50;
            }
            while (v50);
          }
          else
          {
            do
            {
              int v51 = (unsigned __int8 *)*((void *)v49 + 2);
              BOOL v26 = *(void *)v51 == (void)v49;
              uint64_t v49 = v51;
            }
            while (!v26);
          }
          uint64_t v49 = v51;
        }
        while (v51 != v23);
      }
    }
    std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)&v205, *(unsigned __int8 **)(*(void *)(a1 + 8) + 96), *(unsigned __int8 **)(*(void *)(a1 + 8) + 104));
    int v204 = &v205;
    char v180 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:v208];
    unint64_t v52 = operator new(0x20uLL);
    buf.__r_.__value_.__l.__size_ = 26;
    buf.__r_.__value_.__r.__words[2] = 0x8000000000000020;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
    memmove(v52, "acousticLanguagePosteriors", 0x1AuLL);
    v52[26] = 0;
    size_t v53 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(&v205, (unsigned __int8 *)&buf);
    int v54 = v53;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
      if (!v54) {
        goto LABEL_98;
      }
    }
    else if (!v53)
    {
      goto LABEL_98;
    }
    id v55 = objc_alloc(MEMORY[0x1E4F1E9A0]);
    uint64_t v56 = [NSNumber numberWithUnsignedInteger:v30];
    long long v218 = v56;
    std::vector<int> v57 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v218 count:1];
    id v203 = 0;
    uint64_t v58 = (void *)[v55 initWithShape:v57 dataType:65600 error:&v203];
    id v191 = v203;

    if (v191)
    {
      std::string v59 = (id)earLanguageDetectorLog;
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        std::string::size_type v60 = [v191 description];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Failed to allocate array";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v60;
        _os_log_impl(&dword_1B1A86000, v59, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);
      }
      quasar::LDResult::LDResult(a4, 0);
      goto LABEL_140;
    }
    if (v182 == v181) {
      goto LABEL_91;
    }
    uint64_t v61 = 0;
    char v62 = 0;
    uint64_t v63 = 0;
    do
    {
      uint64_t v64 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a2, (const void **)(*(void *)(*(void *)(a1 + 8) + 48) + v61));
      if (a2 + 8 == v64)
      {
        double v65 = 0.0;
      }
      else
      {
        double v65 = *(double *)(v64 + 56);
        char v62 = 1;
      }
      uint64_t v66 = [NSNumber numberWithDouble:v65];
      [v58 setObject:v66 atIndexedSubscript:v63];

      ++v63;
      v61 += 24;
    }
    while (v30 != v63);
    if ((v62 & 1) == 0)
    {
LABEL_91:
      uint64_t v67 = (id)earLanguageDetectorLog;
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1B1A86000, v67, OS_LOG_TYPE_DEFAULT, "No supported languages found in acousticPosteriors", (uint8_t *)&buf, 2u);
      }

      uint64_t v68 = [NSNumber numberWithDouble:1.0 / (double)(unint64_t)v30];
      if (v182 != v181)
      {
        uint64_t v69 = 0;
        do
          [v58 setObject:v68 atIndexedSubscript:v69++];
        while (v30 != v69);
      }
    }
    uint64_t v70 = objc_msgSend(NSString, "ear_stringWithStringView:", "acousticLanguagePosteriors", 26);
    [v180 setObject:v58 forKeyedSubscript:v70];

LABEL_98:
    std::string::size_type v71 = v204;
    *((unsigned char *)&buf.__r_.__value_.__s + 23) = 16;
    memmove(&buf, "dictationLocales", 0x10uLL);
    buf.__r_.__value_.__s.__data_[16] = 0;
    int v72 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v71, (unsigned __int8 *)&buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (v72)
    {
      uint64_t v73 = *(void *)(a1 + 8);
      id v202 = 0;
      uint64_t v74 = *(void *)(v73 + 24);
      uint64_t v75 = *(void *)(v73 + 32);
      id v76 = objc_alloc(MEMORY[0x1E4F1E9A0]);
      uint64_t v77 = (v75 - v74) / 48;
      unsigned int v78 = [NSNumber numberWithUnsignedInteger:v77];
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
      int v79 = [MEMORY[0x1E4F1C978] arrayWithObjects:&buf count:1];
      uint64_t v80 = (void *)[v76 initWithShape:v79 dataType:65600 error:&v202];

      int v81 = v80;
      if (v80)
      {
        if (v75 != v74)
        {
          uint64_t v82 = 0;
          uint64_t v83 = 0;
          do
          {
            unsigned int v84 = NSNumber;
            if (std::__tree<quasar::language_detector::Locale>::__count_unique<quasar::language_detector::Locale>((uint64_t)&__p, (unsigned __int8 **)(*(void *)(v73 + 24) + v82)))
            {
              double v85 = 1.0;
            }
            else
            {
              double v85 = 0.0;
            }
            char v86 = [v84 numberWithDouble:v85];
            [v80 setObject:v86 atIndexedSubscript:v83];

            ++v83;
            v82 += 48;
          }
          while (v77 != v83);
        }
        int v81 = v80;
        id v87 = v80;
      }

      id v191 = v202;
      if (v191)
      {
        int v88 = (id)earLanguageDetectorLog;
        if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
        {
          int v89 = [v191 description];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Failed to allocate array";
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v89;
          _os_log_impl(&dword_1B1A86000, v88, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);
        }
        id v90 = v80;
        quasar::LDResult::LDResult(a4, 0);
        goto LABEL_141;
      }
      int64_t v91 = objc_msgSend(NSString, "ear_stringWithStringView:", "dictationLocales", 16);
      [v180 setObject:v80 forKeyedSubscript:v91];
    }
    float v92 = v204;
    *((unsigned char *)&buf.__r_.__value_.__s + 23) = 22;
    memmove(&buf, "currentDictationLocale", 0x16uLL);
    buf.__r_.__value_.__s.__data_[22] = 0;
    unsigned __int8 v93 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v92, (unsigned __int8 *)&buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (v93)
    {
      if (*(unsigned char *)(a3 + 104))
      {
        float v94 = (uint64_t *)(*(void *)(a1 + 8) + 24);
        id v201 = 0;
        localeToMultiArray((const Locale *)(a3 + 56), v94, (uint64_t)&v201);
        id v90 = (id)objc_claimAutoreleasedReturnValue();
        id v191 = v201;
        if (v191)
        {
          float v95 = (id)earLanguageDetectorLog;
          if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v96 = [v191 description];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Failed to allocate array";
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v96;
            _os_log_impl(&dword_1B1A86000, v95, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);
          }
          quasar::LDResult::LDResult(a4, 0);
          goto LABEL_141;
        }
        id v98 = v90;
      }
      else
      {
        std::string v97 = (id)earLanguageDetectorLog;
        if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1B1A86000, v97, OS_LOG_TYPE_DEFAULT, "context.currentDictationLanguage is empty, setting currentDictationLocale to zeroes.", (uint8_t *)&buf, 2u);
        }

        id v98 = v189;
      }
      std::string v99 = objc_msgSend(NSString, "ear_stringWithStringView:", "currentDictationLocale", 22);
      [v180 setObject:v98 forKeyedSubscript:v99];
    }
    long long v100 = v204;
    *((unsigned char *)&buf.__r_.__value_.__s + 23) = 16;
    memmove(&buf, "wasLocaleToggled", 0x10uLL);
    buf.__r_.__value_.__s.__data_[16] = 0;
    uint64_t v101 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v100, (unsigned __int8 *)&buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (!v101) {
      goto LABEL_148;
    }
    if (*(unsigned char *)(a3 + 113))
    {
      long long v102 = NSNumber;
    }
    else
    {
      uint64_t v103 = (id)earLanguageDetectorLog;
      if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1B1A86000, v103, OS_LOG_TYPE_DEFAULT, "context.wasLanguageToggled not set, defaulting to false.", (uint8_t *)&buf, 2u);
      }

      unsigned int v104 = *(unsigned __int8 *)(a3 + 113);
      long long v102 = NSNumber;
      if (!*(unsigned char *)(a3 + 113)) {
        goto LABEL_136;
      }
    }
    unsigned int v104 = *(unsigned char *)(a3 + 112) != 0;
LABEL_136:
    uint64_t v58 = [v102 numberWithDouble:(double)v104];
    id v105 = objc_alloc(MEMORY[0x1E4F1E9A0]);
    size_t v106 = [NSNumber numberWithUnsignedInteger:v6];
    BOOL v217 = v106;
    char v107 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v217 count:1];
    id v200 = 0;
    unint64_t v108 = (void *)[v105 initWithShape:v107 dataType:65600 error:&v200];
    id v191 = v200;

    if (v191)
    {
      uint64_t v109 = (id)earLanguageDetectorLog;
      if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v110 = [v191 description];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Failed to allocate array";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v110;
        _os_log_impl(&dword_1B1A86000, v109, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);
      }
      quasar::LDResult::LDResult(a4, 0);

LABEL_140:
      id v90 = v58;
LABEL_141:

      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v205);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v212);
LABEL_142:

      goto LABEL_143;
    }
    if (v184 != v183)
    {
      uint64_t v111 = 0;
      do
        [v108 setObject:v58 atIndexedSubscript:v111++];
      while (v6 != v111);
    }
    uint64_t v112 = objc_msgSend(NSString, "ear_stringWithStringView:", "wasLocaleToggled", 16);
    [v180 setObject:v108 forKeyedSubscript:v112];

LABEL_148:
    int v113 = v204;
    uint64_t v114 = operator new(0x20uLL);
    buf.__r_.__value_.__l.__size_ = 27;
    buf.__r_.__value_.__r.__words[2] = 0x8000000000000020;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
    memmove(v114, "multilingualKeyboardLocales", 0x1BuLL);
    v114[27] = 0;
    char v115 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v113, (unsigned __int8 *)&buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (v115)
    {
      if (*(unsigned char *)(a3 + 144))
      {
        std::set<quasar::language_detector::Locale>::set[abi:ne180100]<std::__wrap_iter<quasar::language_detector::Locale const*>>((uint64_t)&buf, *(unsigned __int8 ***)(a3 + 120), *(unsigned __int8 ***)(a3 + 128));
        *(void *)uint64_t v214 = &buf;
        unint64_t v116 = (uint64_t *)(*(void *)(a1 + 8) + 24);
        id v199 = 0;
        BOOLeanFunctionToMultiArray<EARContextAwareLDModel::makePrediction(std::map<std::string,double> const&,quasar::LDContext const&,std::function<std::string ()(quasar::language_detector::Locale const&)> const&)::$_2>((uint64_t *)v214, v116, (uint64_t)&v199);
        id v90 = (id)objc_claimAutoreleasedReturnValue();
        id v191 = v199;
        if (v191)
        {
          uint64_t v117 = (id)earLanguageDetectorLog;
          if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v118 = [v191 description];
            *(_DWORD *)uint64_t v214 = 136315394;
            *(void *)&v214[4] = "Failed to allocate array";
            __int16 v215 = 2112;
            int v216 = v118;
            _os_log_impl(&dword_1B1A86000, v117, OS_LOG_TYPE_DEFAULT, "%s, error %@", v214, 0x16u);
          }
          quasar::LDResult::LDResult(a4, 0);
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&buf, (void *)buf.__r_.__value_.__l.__size_);
          goto LABEL_141;
        }
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&buf, (void *)buf.__r_.__value_.__l.__size_);
      }
      else
      {
        uint64_t v119 = (id)earLanguageDetectorLog;
        if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1B1A86000, v119, OS_LOG_TYPE_DEFAULT, "context.multilingualKeyboardLanguages not set, setting multilingualKeyboardLocales to zeroes.", (uint8_t *)&buf, 2u);
        }

        id v90 = v189;
      }
      BOOL v120 = objc_msgSend(NSString, "ear_stringWithStringView:", "multilingualKeyboardLocales", 27);
      [v180 setObject:v90 forKeyedSubscript:v120];
    }
    float v121 = v204;
    float v122 = operator new(0x20uLL);
    buf.__r_.__value_.__l.__size_ = 25;
    buf.__r_.__value_.__r.__words[2] = 0x8000000000000020;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v122;
    memmove(v122, "keyboardConvoLocalePriors", 0x19uLL);
    v122[25] = 0;
    int v123 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v121, (unsigned __int8 *)&buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (v123)
    {
      if (*(unsigned char *)(a3 + 176))
      {
        std::string v124 = (uint64_t *)(*(void *)(a1 + 8) + 24);
        id v198 = 0;
        mapToMultiArray<std::map<quasar::language_detector::Locale,double>>(a3 + 152, v124, (uint64_t)&v198);
        id v90 = (id)objc_claimAutoreleasedReturnValue();
        id v191 = v198;
        if (v191)
        {
          std::string v125 = (id)earLanguageDetectorLog;
          if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
          {
            int v126 = [v191 description];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Failed to allocate array";
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v126;
            _os_log_impl(&dword_1B1A86000, v125, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);
          }
          quasar::LDResult::LDResult(a4, 0);
          goto LABEL_141;
        }
        id v128 = v90;
      }
      else
      {
        long long v127 = (id)earLanguageDetectorLog;
        if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1B1A86000, v127, OS_LOG_TYPE_DEFAULT, "context.keyboardConvoLanguagePriors not set, setting keyboardConvoLocalePriors to uniform probability.", (uint8_t *)&buf, 2u);
        }

        id v128 = v190;
      }
      long long v129 = objc_msgSend(NSString, "ear_stringWithStringView:", "keyboardConvoLocalePriors", 25);
      [v180 setObject:v128 forKeyedSubscript:v129];
    }
    if (EARContextAwareLDModel::makePrediction(std::map<std::string,double> const&,quasar::LDContext const&,std::function<std::string ()(quasar::language_detector::Locale const&)> const&)const::$_0::operator()(&v204, "keyboardGlobalLocalePriors", 0x1AuLL))
    {
      if (*(unsigned char *)(a3 + 208))
      {
        uint64_t v130 = (uint64_t *)(*(void *)(a1 + 8) + 24);
        id v197 = 0;
        mapToMultiArray<std::map<quasar::language_detector::Locale,double>>(a3 + 184, v130, (uint64_t)&v197);
        id v90 = (id)objc_claimAutoreleasedReturnValue();
        id v191 = v197;
        if (v191)
        {
          size_t v131 = (id)earLanguageDetectorLog;
          if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
          {
            int v132 = [v191 description];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Failed to allocate array";
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v132;
            _os_log_impl(&dword_1B1A86000, v131, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);
          }
          quasar::LDResult::LDResult(a4, 0);
          goto LABEL_141;
        }
        id v134 = v90;
      }
      else
      {
        BOOL v133 = (id)earLanguageDetectorLog;
        if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1B1A86000, v133, OS_LOG_TYPE_DEFAULT, "context.keyboardGlobalLanguagePriors not set, setting keyboardGlobalLocalePriors to uniform probability.", (uint8_t *)&buf, 2u);
        }

        id v134 = v190;
      }
      uint64_t v135 = objc_msgSend(NSString, "ear_stringWithStringView:", "keyboardGlobalLocalePriors", 26);
      [v180 setObject:v134 forKeyedSubscript:v135];
    }
    if (EARContextAwareLDModel::makePrediction(std::map<std::string,double> const&,quasar::LDContext const&,std::function<std::string ()(quasar::language_detector::Locale const&)> const&)const::$_0::operator()(&v204, "previousMessageLocale", 0x15uLL))
    {
      if (*(unsigned char *)(a3 + 264))
      {
        int v136 = (uint64_t *)(*(void *)(a1 + 8) + 24);
        id v196 = 0;
        localeToMultiArray((const Locale *)(a3 + 216), v136, (uint64_t)&v196);
        id v90 = (id)objc_claimAutoreleasedReturnValue();
        id v191 = v196;
        if (v191)
        {
          char v137 = (id)earLanguageDetectorLog;
          if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v138 = [v191 description];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Failed to allocate array";
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v138;
            _os_log_impl(&dword_1B1A86000, v137, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);
          }
          quasar::LDResult::LDResult(a4, 0);
          goto LABEL_141;
        }
        id v140 = v90;
      }
      else
      {
        uint64_t v139 = (id)earLanguageDetectorLog;
        if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1B1A86000, v139, OS_LOG_TYPE_DEFAULT, "context.previousMessageLanguage not set, setting previousMessageLocale to zeroes.", (uint8_t *)&buf, 2u);
        }

        id v140 = v189;
      }
      uint64_t v141 = objc_msgSend(NSString, "ear_stringWithStringView:", "previousMessageLocale", 21);
      [v180 setObject:v140 forKeyedSubscript:v141];
    }
    if (EARContextAwareLDModel::makePrediction(std::map<std::string,double> const&,quasar::LDContext const&,std::function<std::string ()(quasar::language_detector::Locale const&)> const&)const::$_0::operator()(&v204, "globalLastKeyboardUsed", 0x16uLL))
    {
      if (*(unsigned char *)(a3 + 320))
      {
        uint64_t v142 = (uint64_t *)(*(void *)(a1 + 8) + 24);
        id v195 = 0;
        localeToMultiArray((const Locale *)(a3 + 272), v142, (uint64_t)&v195);
        id v90 = (id)objc_claimAutoreleasedReturnValue();
        id v191 = v195;
        if (v191)
        {
          size_t v143 = (id)earLanguageDetectorLog;
          if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
          {
            int v144 = [v191 description];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Failed to allocate array";
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v144;
            _os_log_impl(&dword_1B1A86000, v143, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);
          }
          quasar::LDResult::LDResult(a4, 0);
          goto LABEL_141;
        }
        id v146 = v90;
      }
      else
      {
        BOOL v145 = (id)earLanguageDetectorLog;
        if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1B1A86000, v145, OS_LOG_TYPE_DEFAULT, "context.globalLastKeyboardUsed not set, setting globalLastKeyboardUsed to zeroes.", (uint8_t *)&buf, 2u);
        }

        id v146 = v189;
      }
      long long v147 = objc_msgSend(NSString, "ear_stringWithStringView:", "globalLastKeyboardUsed", 22);
      [v180 setObject:v146 forKeyedSubscript:v147];
    }
    if (EARContextAwareLDModel::makePrediction(std::map<std::string,double> const&,quasar::LDContext const&,std::function<std::string ()(quasar::language_detector::Locale const&)> const&)const::$_0::operator()(&v204, "dictationLocalePriors", 0x15uLL))
    {
      if (*(unsigned char *)(a3 + 352))
      {
        long long v148 = (uint64_t *)(*(void *)(a1 + 8) + 24);
        id v194 = 0;
        mapToMultiArray<std::map<quasar::language_detector::Locale,double>>(a3 + 328, v148, (uint64_t)&v194);
        id v90 = (id)objc_claimAutoreleasedReturnValue();
        id v191 = v194;
        if (v191)
        {
          uint64_t v149 = (id)earLanguageDetectorLog;
          if (os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT))
          {
            int v150 = [v191 description];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Failed to allocate array";
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v150;
            _os_log_impl(&dword_1B1A86000, v149, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);
          }
          quasar::LDResult::LDResult(a4, 0);
          goto LABEL_141;
        }
        id v152 = v90;
      }
      else
      {
        unint64_t v151 = (id)earLanguageDetectorLog;
        if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1B1A86000, v151, OS_LOG_TYPE_DEFAULT, "context.dictationLanguagePriors not set, setting dictationLocalePriors to uniform probability.", (uint8_t *)&buf, 2u);
        }

        id v152 = v190;
      }
      uint64_t v153 = objc_msgSend(NSString, "ear_stringWithStringView:", "dictationLocalePriors", 21);
      [v180 setObject:v152 forKeyedSubscript:v153];
    }
    id v193 = 0;
    uint64_t v154 = [objc_alloc(MEMORY[0x1E4F1E928]) initWithDictionary:v180 error:&v193];
    id v191 = v193;
    if (v191)
    {
      uint64_t v58 = (void *)v154;
      uint64_t v155 = (id)earLanguageDetectorLog;
      if (os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
      {
        int v156 = [v191 description];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Failed to create feature provider";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v156;
        _os_log_impl(&dword_1B1A86000, v155, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);
      }
      quasar::LDResult::LDResult(a4, 0);
    }
    else
    {
      id v185 = objc_alloc_init(MEMORY[0x1E4F1E9D8]);
      [v185 setUsesCPUOnly:*(unsigned __int8 *)(*(void *)(a1 + 8) + 144)];
      size_t v157 = *(void **)(a1 + 24);
      id v192 = 0;
      uint64_t v158 = [v157 predictionFromFeatures:v154 options:v185 error:&v192];
      id v191 = v192;
      if (v191)
      {
        uint64_t v58 = (void *)v154;
        uint64_t v159 = (id)earLanguageDetectorLog;
        if (os_log_type_enabled(v159, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v160 = [v191 description];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Error during prediction";
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v160;
          _os_log_impl(&dword_1B1A86000, v159, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);
        }
        quasar::LDResult::LDResult(a4, 0);
      }
      else
      {
        uint64_t v161 = *(void *)(a1 + 8);
        size_t v162 = (void *)(v161 + 120);
        if (*(char *)(v161 + 143) < 0) {
          size_t v162 = (void *)*v162;
        }
        int v163 = [NSString stringWithUTF8String:v162];
        BOOL v164 = [v158 featureValueForName:v163];
        uint64_t v58 = (void *)v154;
        float v165 = [v164 dictionaryValue];

        uint64_t v166 = a4;
        quasar::LDResult::LDResult(a4, 1);
        int v167 = (long long *)__p;
        if (__p != &v212)
        {
          double v168 = 0.0;
          do
          {
            *(void *)uint64_t v214 = 0;
            float v169 = NSString;
            quasar::language_detector::Locale::getSiriLocaleStr((quasar::language_detector::Locale *)(v167 + 2), &buf);
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_std::string buf = &buf;
            }
            else {
              p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
            }
            float v171 = [v169 stringWithUTF8String:p_buf];
            uint64_t v172 = [v165 objectForKeyedSubscript:v171];
            [v172 doubleValue];
            double v174 = v173;

            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            *(double *)uint64_t v214 = v174;
            std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100]<quasar::language_detector::Locale const&,double &,0>(&buf, v167 + 2, (std::string::size_type *)v214);
            std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_unique_key_args<quasar::language_detector::Locale,std::pair<quasar::language_detector::Locale const,double>>((uint64_t **)(a4 + 8), (unsigned __int8 *)&buf, (long long *)&buf);
            if (v223 < 0) {
              operator delete(v222);
            }
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            BOOL v175 = (long long *)*((void *)v167 + 1);
            if (v175)
            {
              do
              {
                float v176 = v175;
                BOOL v175 = *(long long **)v175;
              }
              while (v175);
            }
            else
            {
              do
              {
                float v176 = (long long *)*((void *)v167 + 2);
                BOOL v26 = *(void *)v176 == (void)v167;
                int v167 = v176;
              }
              while (!v26);
            }
            double v168 = v168 + v174;
            int v167 = v176;
          }
          while (v176 != (long long *)&v212);
          uint64_t v166 = a4;
          if (v168 > 0.0)
          {
            float v177 = *(void **)(a4 + 8);
            if (v177 != (void *)(a4 + 16))
            {
              do
              {
                *(double *)uint64_t v214 = *((double *)v177 + 10) / v168;
                std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100]<quasar::language_detector::Locale const&,double,0>(&buf, (long long *)v177 + 2, (std::string::size_type *)v214);
                std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_unique_key_args<quasar::language_detector::Locale,std::pair<quasar::language_detector::Locale const,double>>((uint64_t **)(a4 + 32), (unsigned __int8 *)&buf, (long long *)&buf);
                std::pair<std::string,std::string>::~pair((uint64_t)&buf);
                long long v178 = (void *)v177[1];
                if (v178)
                {
                  do
                  {
                    long long v179 = v178;
                    long long v178 = (void *)*v178;
                  }
                  while (v178);
                }
                else
                {
                  do
                  {
                    long long v179 = (void *)v177[2];
                    BOOL v26 = *v179 == (void)v177;
                    float v177 = v179;
                  }
                  while (!v26);
                }
                float v177 = v179;
              }
              while (v179 != (void *)(a4 + 16));
            }
          }
        }
        if (!*(void *)(v166 + 48)) {
          *(unsigned char *)uint64_t v166 = 0;
        }
      }
    }
    goto LABEL_140;
  }
  uint64_t v10 = (id)earLanguageDetectorLog;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = [v191 description];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Failed to allocate array";
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v11;
    _os_log_impl(&dword_1B1A86000, v10, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);
  }
  quasar::LDResult::LDResult(a4, 0);
LABEL_143:
}

void sub_1B23FBE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, quasar::LDResult *a17, uint64_t a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a35);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a42, a43);

  _Unwind_Resume(a1);
}

BOOL EARContextAwareLDModel::makePrediction(std::map<std::string,double> const&,quasar::LDContext const&,std::function<std::string ()(quasar::language_detector::Locale const&)> const&)const::$_0::operator()(void **a1, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unsigned __int8 v5 = *a1;
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = (void **)operator new(v7 + 1);
    __dst[1] = (void *)__len;
    unint64_t v12 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  uint64_t v6 = __dst;
  if (__len) {
LABEL_8:
  }
    memmove(v6, __src, __len);
  *((unsigned char *)v6 + __len) = 0;
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v5, (unsigned __int8 *)__dst);
  if (SHIBYTE(v12) < 0) {
    operator delete(__dst[0]);
  }
  return v9 != 0;
}

void sub_1B23FC3F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id localeToMultiArray(const Locale *a1, uint64_t *a2, uint64_t a3)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v8 = (v6 - *a2) / 48;
  id v9 = objc_alloc(MEMORY[0x1E4F1E9A0]);
  uint64_t v10 = [NSNumber numberWithUnsignedInteger:v8];
  v20[0] = v10;
  int v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v20 count:1];
  unint64_t v12 = (void *)[v9 initWithShape:v11 dataType:65600 error:a3];

  if (v12)
  {
    if (v6 != v7)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      do
      {
        long long v15 = NSNumber;
        if (quasar::Locale::isCompatible((quasar::Locale *)(*a2 + v13), a1)) {
          double v16 = 1.0;
        }
        else {
          double v16 = 0.0;
        }
        uint64_t v17 = [v15 numberWithDouble:v16];
        [v12 setObject:v17 atIndexedSubscript:v14];

        ++v14;
        v13 += 48;
      }
      while (v8 != v14);
    }
    id v18 = v12;
  }

  return v12;
}

void sub_1B23FC5AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id BOOLeanFunctionToMultiArray<EARContextAwareLDModel::makePrediction(std::map<std::string,double> const&,quasar::LDContext const&,std::function<std::string ()(quasar::language_detector::Locale const&)> const&)::$_2>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v8 = (v6 - *a2) / 48;
  id v9 = objc_alloc(MEMORY[0x1E4F1E9A0]);
  uint64_t v10 = [NSNumber numberWithUnsignedInteger:v8];
  v20[0] = v10;
  int v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v20 count:1];
  unint64_t v12 = (void *)[v9 initWithShape:v11 dataType:65600 error:a3];

  if (v12)
  {
    if (v6 != v7)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      do
      {
        long long v15 = NSNumber;
        if (std::__tree<quasar::language_detector::Locale>::__count_unique<quasar::language_detector::Locale>(*a1, (unsigned __int8 **)(*a2 + v13)))
        {
          double v16 = 1.0;
        }
        else
        {
          double v16 = 0.0;
        }
        uint64_t v17 = [v15 numberWithDouble:v16];
        [v12 setObject:v17 atIndexedSubscript:v14];

        ++v14;
        v13 += 48;
      }
      while (v8 != v14);
    }
    id v18 = v12;
  }

  return v12;
}

void sub_1B23FC780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id mapToMultiArray<std::map<quasar::language_detector::Locale,double>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v8 = (v6 - *a2) / 48;
  id v9 = objc_alloc(MEMORY[0x1E4F1E9A0]);
  uint64_t v10 = [NSNumber numberWithUnsignedInteger:v8];
  v21[0] = v10;
  int v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v21 count:1];
  unint64_t v12 = (void *)[v9 initWithShape:v11 dataType:65600 error:a3];

  if (v12)
  {
    if (v6 != v7)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      do
      {
        long long v15 = NSNumber;
        uint64_t v16 = std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::find<quasar::language_detector::Locale>(a1, (unsigned __int8 **)(*a2 + v13));
        if (a1 + 8 == v16) {
          double v17 = 0.0;
        }
        else {
          double v17 = *(double *)(v16 + 80);
        }
        id v18 = [v15 numberWithDouble:v17];
        [v12 setObject:v18 atIndexedSubscript:v14];

        ++v14;
        v13 += 48;
      }
      while (v8 != v14);
    }
    id v19 = v12;
  }

  return v12;
}

void sub_1B23FC954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void EARContextAwareLDModelFactory::createModel(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  if (*(char *)(*a1 + 95) < 0)
  {
    unsigned __int8 v5 = *(const void **)(v4 + 72);
    uint64_t v6 = *(void *)(v4 + 80);
  }
  else
  {
    unsigned __int8 v5 = (const void *)(v4 + 72);
    uint64_t v6 = *(unsigned __int8 *)(*a1 + 95);
  }
  if (v6 == 7 && !memcmp(v5, "core-ml", 7uLL)) {
    operator new();
  }
  uint64_t v7 = earLanguageDetectorLog;
  if (os_log_type_enabled((os_log_t)earLanguageDetectorLog, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = (void *)(*a1 + 72);
    if (*(char *)(*a1 + 95) < 0) {
      uint64_t v8 = (void *)*v8;
    }
    int v9 = 136315138;
    uint64_t v10 = v8;
    _os_log_impl(&dword_1B1A86000, v7, OS_LOG_TYPE_DEFAULT, "Unsupported model file format \"%s\"", (uint8_t *)&v9, 0xCu);
  }
  *a2 = 0;
}

void sub_1B23FCAC4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9)
{
  MEMORY[0x1B3EA8670](v10, 0xE1C40A6AE3FD9);
  if (a2 == 1)
  {
    uint64_t v13 = __cxa_begin_catch(a1);
    uint64_t v14 = (void *)earLanguageDetectorLog;
    if (os_log_type_enabled((os_log_t)earLanguageDetectorLog, OS_LOG_TYPE_DEFAULT))
    {
      long long v15 = *(uint64_t (**)(void *))(*(void *)v13 + 16);
      uint64_t v16 = v14;
      uint64_t v17 = v15(v13);
      LODWORD(a9) = 136315138;
      *(void *)((char *)&a9 + 4) = v17;
      _os_log_impl(&dword_1B1A86000, v16, OS_LOG_TYPE_DEFAULT, "Exception in EARContextAwareLDModelFactory::createModel: %s", (uint8_t *)&a9, 0xCu);
    }
    *int v9 = 0;
    __cxa_end_catch();
    JUMPOUT(0x1B23FCA64);
  }
  _Unwind_Resume(a1);
}

void sub_1B23FCEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a9);
  uint64_t v33 = a14;
  a14 = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 16))(v33);
  }
  uint64_t v34 = a15;
  a15 = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 16))(v34);
  }

  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<quasar::LanguageDetector,std::string,std::unique_ptr<EARAcousticLDModelFactory>,std::unique_ptr<EARContextAwareLDModelFactory>,std::unordered_map<std::string,std::string> &>()
{
}

void sub_1B23FD0CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (a2) {
    std::make_unique[abi:ne180100]<quasar::LanguageDetector,std::string,std::unique_ptr<EARAcousticLDModelFactory>,std::unique_ptr<EARContextAwareLDModelFactory>,std::unordered_map<std::string,std::string> &>(a2);
  }
  std::make_unique[abi:ne180100]<quasar::LanguageDetector,std::string,std::unique_ptr<EARAcousticLDModelFactory>,std::unique_ptr<EARContextAwareLDModelFactory>,std::unordered_map<std::string,std::string> &>((uint64_t *)va);
  MEMORY[0x1B3EA8670](v2, 0x10B2C4076CD4550);
  _Unwind_Resume(a1);
}

void sub_1B23FD274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  a16 = &a23;
  std::vector<std::optional<quasar::language_detector::Locale>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);

  _Unwind_Resume(a1);
}

void sub_1B23FD8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  _Unwind_Resume(a1);
}

void sub_1B23FDB4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<std::map<quasar::language_detector::Locale,double>>::operator=[abi:ne180100]<std::map<quasar::language_detector::Locale,double>&,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (a1 != a2) {
      std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<quasar::language_detector::Locale,double>,std::__tree_node<std::__value_type<quasar::language_detector::Locale,double>,void *> *,long>>((uint64_t **)a1, *(long long **)a2, (long long *)(a2 + 8));
    }
  }
  else
  {
    std::map<quasar::language_detector::Locale,double>::map[abi:ne180100]((uint64_t *)a1, a2);
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_1B23FE02C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void EARLDResultStream::init(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v5;
  id v9 = v5;

  uint64_t v8 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v6;
}

uint64_t __copy_helper_block_ea8_40c51_ZTSNSt3__110shared_ptrIN6quasar14LDRequestStateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_40c51_ZTSNSt3__110shared_ptrIN6quasar14LDRequestStateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void sub_1B23FE2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10, char a11)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  a9 = (void **)&a11;
  std::vector<std::optional<quasar::language_detector::Locale>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_48c42_ZTSNSt3__18weak_ptrI17EARLDResultStreamEE64c48_ZTSNSt3__18weak_ptrIN6quasar14LDRequestStateEEE80c46_ZTSNSt3__110shared_ptrIKN6quasar9LDContextEEE(void *result, void *a2)
{
  uint64_t v2 = a2[7];
  result[6] = a2[6];
  result[7] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[9];
  result[8] = a2[8];
  result[9] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2[11];
  result[10] = a2[10];
  result[11] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_48c42_ZTSNSt3__18weak_ptrI17EARLDResultStreamEE64c48_ZTSNSt3__18weak_ptrIN6quasar14LDRequestStateEEE80c46_ZTSNSt3__110shared_ptrIKN6quasar9LDContextEEE(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[11];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[9];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void EARContextAwareLDModel::~EARContextAwareLDModel(id *this)
{
  *this = &unk_1F0A34440;

  uint64_t v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *this = &unk_1F0A34440;

  uint64_t v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
  JUMPOUT(0x1B3EA8670);
}

void EARContextAwareLDModelFactory::~EARContextAwareLDModelFactory(EARContextAwareLDModelFactory *this)
{
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__tree<quasar::language_detector::Locale>::__erase_unique<quasar::language_detector::Locale>(uint64_t **a1, unsigned __int8 **a2)
{
  uint64_t v3 = (uint64_t *)std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::find<quasar::language_detector::Locale>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  uint64_t v4 = v3;
  std::__tree<std::string>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t AssistantServicesLibraryCore(char **a1)
{
  if (!AssistantServicesLibraryCore(char **)::frameworkLibrary) {
    AssistantServicesLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  return AssistantServicesLibraryCore(char **)::frameworkLibrary;
}

uint64_t ___ZL28AssistantServicesLibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AssistantServicesLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

void *___ZL50getAFDictationLanguageForKeyboardLanguageSymbolLocv_block_invoke(void *a1)
{
  id v6 = 0;
  uint64_t v2 = AssistantServicesLibraryCore(&v6);
  if (!v2)
  {
    a1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"void *AssistantServicesLibrary()"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v3, @"EARLanguageDetector.mm", 42, @"%s", v6);

    __break(1u);
    goto LABEL_5;
  }
  uint64_t v3 = (void *)v2;
  uint64_t v4 = v6;
  if (v6) {
LABEL_5:
  }
    free(v4);
  uint64_t result = dlsym(v3, "AFDictationLanguageForKeyboardLanguage");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  getAFDictationLanguageForKeyboardLanguageSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(a1[4] + 8) + 24);
  return result;
}

void sub_1B23FE758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void EARAcousticLDModelFactory::createModel(uint64_t *a1@<X1>, CoreMLAcousticLDModel **a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<CoreMLAcousticLDModel,std::allocator<CoreMLAcousticLDModel>,std::shared_ptr<quasar::LDConfig> const&,void>(a1, &v10);
  uint64_t v4 = (void *)(*a1 + 64);
  if (*(char *)(*a1 + 87) < 0) {
    uint64_t v4 = (void *)*v4;
  }
  id v5 = v10;
  id v6 = [NSString stringWithUTF8String:v4];
  LOBYTE(v5) = CoreMLAcousticLDModel::initializeModel(v5, v6);

  if (v5)
  {
    uint64_t v7 = v11;
    *a2 = v10;
    a2[1] = (CoreMLAcousticLDModel *)v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v8 = earLanguageDetectorLog;
    if (os_log_type_enabled((os_log_t)earLanguageDetectorLog, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 0;
      _os_log_impl(&dword_1B1A86000, v8, OS_LOG_TYPE_DEFAULT, "Error initializing model.", (uint8_t *)v9, 2u);
    }
    *a2 = 0;
    a2[1] = 0;
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1B23FE864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

void EARAcousticLDModelFactory::~EARAcousticLDModelFactory(EARAcousticLDModelFactory *this)
{
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t CoreMLAcousticLDModel::initializeModel(CoreMLAcousticLDModel *this, NSString *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  uint64_t v4 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v5 = [v4 fileExistsAtPath:v3];

  if (v5)
  {
    uint64_t v6 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v3 isDirectory:1];
    uint64_t v7 = (void *)*((void *)this + 3);
    *((void *)this + 3) = v6;
  }
  else
  {
    uint64_t v8 = earLanguageDetectorLog;
    if (os_log_type_enabled((os_log_t)earLanguageDetectorLog, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412290;
      uint64_t v11 = v3;
      _os_log_impl(&dword_1B1A86000, v8, OS_LOG_TYPE_DEFAULT, "LanguageDetector: EARLanguageDetector model file does not exist at %@", (uint8_t *)&v10, 0xCu);
    }
  }

  return v5;
}

void sub_1B23FE9CC(_Unwind_Exception *exception_object)
{
}

void *std::allocate_shared[abi:ne180100]<CoreMLAcousticLDModel,std::allocator<CoreMLAcousticLDModel>,std::shared_ptr<quasar::LDConfig> const&,void>@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x40uLL);
  uint64_t result = std::__shared_ptr_emplace<CoreMLAcousticLDModel>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::LDConfig> const&,std::allocator<CoreMLAcousticLDModel>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B23FEA38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<CoreMLAcousticLDModel>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::LDConfig> const&,std::allocator<CoreMLAcousticLDModel>,0>(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5DDC8;
  quasar::AcousticLDModel::AcousticLDModel(a1 + 3, a2);
  a1[3] = &unk_1F0A341E8;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void sub_1B23FEAB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CoreMLAcousticLDModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DDC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CoreMLAcousticLDModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DDC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<CoreMLAcousticLDModel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void CoreMLAcousticLDModel::~CoreMLAcousticLDModel(id *this)
{
  quasar::AcousticLDModel::~AcousticLDModel((quasar::AcousticLDModel *)this);
}

{
  uint64_t vars8;

  quasar::AcousticLDModel::~AcousticLDModel((quasar::AcousticLDModel *)this);
  JUMPOUT(0x1B3EA8670);
}

BOOL CoreMLAcousticLDModel::resetModel(CoreMLAcousticLDModel *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 3);
  id v11 = 0;
  uint64_t v3 = [MEMORY[0x1E4F1E970] modelWithContentsOfURL:v2 error:&v11];
  id v4 = v11;
  uint64_t v5 = (void *)*((void *)this + 4);
  *((void *)this + 4) = v3;

  uint64_t v6 = (id)earLanguageDetectorLog;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = [*((id *)this + 3) absoluteString];
    *(_DWORD *)std::string buf = 138412290;
    uint64_t v13 = v7;
    _os_log_impl(&dword_1B1A86000, v6, OS_LOG_TYPE_DEFAULT, "Attempting to load model file: %@", buf, 0xCu);
  }
  if (v4)
  {
    uint64_t v8 = (id)earLanguageDetectorLog;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = [v4 localizedDescription];
      *(_DWORD *)std::string buf = 138412290;
      uint64_t v13 = v9;
      _os_log_impl(&dword_1B1A86000, v8, OS_LOG_TYPE_DEFAULT, "Failed to reload CoreML model with error: %@", buf, 0xCu);
    }
  }

  return v4 == 0;
}

void sub_1B23FED74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreMLAcousticLDModel::makePrediction(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(unsigned int **)(a1 + 8);
  if (*((unsigned char *)v7 + 137))
  {
    uint64_t v8 = (void *)MEMORY[0x1E4F1C978];
    id v9 = [NSNumber numberWithUnsignedLong:((a2[1] - *a2) >> 2) / (unint64_t)(int)a3];
    int v10 = [NSNumber numberWithInt:a3];
    id v11 = objc_msgSend(v8, "arrayWithObjects:", v9, &unk_1F0A740D0, &unk_1F0A740D0, &unk_1F0A740D0, v10, 0);

    uint64_t v12 = (void *)MEMORY[0x1E4F1C978];
    uint64_t v13 = [NSNumber numberWithInt:a3];
    uint64_t v14 = objc_msgSend(v12, "arrayWithObjects:", v13, &unk_1F0A740D0, &unk_1F0A740D0, &unk_1F0A740D0, &unk_1F0A740D0, 0);
  }
  else
  {
    long long v15 = (void *)MEMORY[0x1E4F1C978];
    uint64_t v16 = [NSNumber numberWithInt:*v7];
    uint64_t v17 = [NSNumber numberWithInt:a3];
    id v11 = objc_msgSend(v15, "arrayWithObjects:", &unk_1F0A740D0, v16, v17, 0);

    id v18 = (void *)MEMORY[0x1E4F1C978];
    uint64_t v13 = [NSNumber numberWithInt:(**(_DWORD **)(a1 + 8) * a3)];
    id v19 = [NSNumber numberWithInt:a3];
    uint64_t v14 = objc_msgSend(v18, "arrayWithObjects:", v13, v19, &unk_1F0A740D0, 0);
  }
  id v20 = objc_alloc(MEMORY[0x1E4F1E9A0]);
  uint64_t v21 = *a2;
  id v58 = 0;
  uint64_t v22 = (void *)[v20 initWithDataPointer:v21 shape:v11 dataType:65568 strides:v14 deallocator:0 error:&v58];
  id v23 = v58;
  if (v23)
  {
    id v24 = v23;
    long long v25 = (id)earLanguageDetectorLog;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v26 = [v24 description];
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v26;
      _os_log_impl(&dword_1B1A86000, v25, OS_LOG_TYPE_DEFAULT, "Failed to create feature multiarray with error %@", (uint8_t *)&buf, 0xCu);
    }
    quasar::LDAcousticResult::LDAcousticResult(a4, 0);
  }
  else
  {
    uint64_t v27 = *(void *)(a1 + 8);
    float v28 = (void *)(v27 + 88);
    if (*(char *)(v27 + 111) < 0) {
      float v28 = (void *)*v28;
    }
    uint64_t v29 = [NSString stringWithUTF8String:v28];
    size_t v53 = [MEMORY[0x1E4F1CA60] dictionaryWithObject:v22 forKey:v29];
    id v57 = 0;
    int v54 = (void *)[objc_alloc(MEMORY[0x1E4F1E928]) initWithDictionary:v53 error:&v57];
    id v30 = v57;
    if (v30)
    {
      id v24 = v30;
      uint64_t v31 = (id)earLanguageDetectorLog;
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v32 = [v24 description];
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v32;
        _os_log_impl(&dword_1B1A86000, v31, OS_LOG_TYPE_DEFAULT, "Failed to create feature provider with error %@", (uint8_t *)&buf, 0xCu);
      }
      quasar::LDAcousticResult::LDAcousticResult(a4, 0);
    }
    else
    {
      id v51 = objc_alloc_init(MEMORY[0x1E4F1E9D8]);
      [v51 setUsesCPUOnly:*(unsigned __int8 *)(*(void *)(a1 + 8) + 136)];
      uint64_t v33 = *(void **)(a1 + 32);
      id v56 = 0;
      unint64_t v52 = [v33 predictionFromFeatures:v54 options:v51 error:&v56];
      id v24 = v56;
      if (v24)
      {
        uint64_t v34 = (id)earLanguageDetectorLog;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v35 = [v24 description];
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v35;
          _os_log_impl(&dword_1B1A86000, v34, OS_LOG_TYPE_DEFAULT, "Error during prediction: %@", (uint8_t *)&buf, 0xCu);
        }
        quasar::LDAcousticResult::LDAcousticResult(a4, 0);
      }
      else
      {
        uint64_t v36 = *(void *)(a1 + 8);
        uint64_t v37 = (void *)(v36 + 112);
        if (*(char *)(v36 + 135) < 0) {
          uint64_t v37 = (void *)*v37;
        }
        int v50 = [NSString stringWithUTF8String:v37];
        uint64_t v38 = *(void *)(a1 + 8);
        if (*(unsigned char *)(v38 + 137))
        {
          int v39 = EARHelpers::NSArrayOfStringFromVectorOfString((long long **)(v38 + 40));
          uint64_t v40 = [v52 dictionary];
          uint64_t v41 = [v40 objectForKey:v50];
          uint64_t v42 = [v41 multiArrayValue];

          float v43 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v39, "count"));
          for (unint64_t i = 0; i < [v39 count]; ++i)
          {
            float v45 = [v42 objectAtIndexedSubscript:i];
            [v43 addObject:v45];
          }
          size_t v46 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v43 forKeys:v39];
        }
        else
        {
          int v39 = [v52 dictionary];
          uint64_t v42 = [v39 objectForKey:v50];
          size_t v46 = [v42 dictionaryValue];
        }

        quasar::LDAcousticResult::LDAcousticResult(a4, 1);
        EARHelpers::DictionaryToMap<std::string,double,CoreMLAcousticLDModel::makePrediction(std::vector<float> &,int)::{lambda(NSString *)#1},CoreMLAcousticLDModel::makePrediction(std::vector<float> &,int)::{lambda(NSNumber *)#1}>(v46, (uint64_t *)&buf);
        uint64_t v47 = a4 + 16;
        std::__tree<std::string>::destroy(a4 + 8, *(char **)(a4 + 16));
        uint64_t v48 = *((void *)&buf + 1);
        *(void *)(a4 + 8) = buf;
        *(void *)(a4 + 16) = v48;
        uint64_t v49 = v60;
        *(void *)(a4 + 24) = v60;
        if (v49)
        {
          *(void *)(v48 + 16) = v47;
          *(void *)&long long buf = (char *)&buf + 8;
          *((void *)&buf + 1) = 0;
          uint64_t v60 = 0;
          uint64_t v48 = 0;
        }
        else
        {
          *(void *)(a4 + 8) = v47;
        }
        std::__tree<std::string>::destroy((uint64_t)&buf, (char *)v48);
      }
    }
  }
}

void sub_1B23FF3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *exception_object, void *a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21)
{
  _Unwind_Resume(a1);
}

void EARHelpers::DictionaryToMap<std::string,double,CoreMLAcousticLDModel::makePrediction(std::vector<float> &,int)::{lambda(NSString *)#1},CoreMLAcousticLDModel::makePrediction(std::vector<float> &,int)::{lambda(NSNumber *)#1}>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = a1;
  uint64_t v5 = 0;
  uint64_t v6 = (const void ***)&v5;
  uint64_t v7 = 0x4812000000;
  uint64_t v8 = __Block_byref_object_copy__15;
  id v9 = __Block_byref_object_dispose__15;
  int v10 = &unk_1B27252DB;
  v12[0] = 0;
  v12[1] = 0;
  id v11 = v12;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = ___ZN10EARHelpers15DictionaryToMapINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEdZNK21CoreMLAcousticLDModel14makePredictionERNS1_6vectorIfNS5_IfEEEEiEUlP8NSStringE_ZNKS8_14makePredictionESC_iEUlP8NSNumberE_EENS1_3mapIT_T0_NS1_4lessISK_EENS5_INS1_4pairIKSK_SL_EEEEEEP12NSDictionaryT1_T2__block_invoke;
  v4[3] = &unk_1E5FFE238;
  v4[4] = &v5;
  [v3 enumerateKeysAndObjectsUsingBlock:v4];
  std::map<std::string,double>::map[abi:ne180100](a2, v6 + 6);
  _Block_object_dispose(&v5, 8);
  std::__tree<std::string>::destroy((uint64_t)&v11, v12[0]);
}

void sub_1B23FF6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char *a23)
{
  _Block_object_dispose(&a16, 8);
  std::__tree<std::string>::destroy(v24, a23);

  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__15(void *result, void *a2)
{
  result[6] = a2[6];
  uint64_t v2 = a2 + 7;
  uint64_t v3 = a2[7];
  result[7] = v3;
  id v4 = result + 7;
  uint64_t v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[6] = v2;
    void *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
}

void ___ZN10EARHelpers15DictionaryToMapINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEdZNK21CoreMLAcousticLDModel14makePredictionERNS1_6vectorIfNS5_IfEEEEiEUlP8NSStringE_ZNKS8_14makePredictionESC_iEUlP8NSNumberE_EENS1_3mapIT_T0_NS1_4lessISK_EENS5_INS1_4pairIKSK_SL_EEEEEEP12NSDictionaryT1_T2__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  uint64_t v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "ear_toString");
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v12 = 0;
  }

  [v6 doubleValue];
  id v9 = (uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
  uint64_t v13 = __p;
  std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v13)[7] = v10;
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B23FF7DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__118(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__119(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a1 + 48);
}

void ___ZN10EARHelpers24DictionaryToUnorderedMapINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_Z53___EARLanguageDetector_initWithConfigFile_overrides__E3__3S8_EENS1_13unordered_mapIT_T0_NS1_4hashISA_EENS1_8equal_toISA_EENS5_INS1_4pairIKSA_SB_EEEEEEP12NSDictionaryT1_T2__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  uint64_t v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "ear_toString");
  }
  else
  {
    v14[0] = 0;
    v14[1] = 0;
    uint64_t v15 = 0;
  }

  id v9 = v6;
  uint64_t v10 = v9;
  if (v9) {
    objc_msgSend(v9, "ear_toString");
  }
  else {
    memset(&__p, 0, sizeof(__p));
  }

  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8) + 48;
  uint64_t v16 = v14;
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, (unsigned __int8 *)v14, (uint64_t)&std::piecewise_construct, (long long **)&v16);
  std::string::operator=((std::string *)(v12 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
}

void sub_1B23FF914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void std::default_delete<quasar::LanguageDetector>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)(a2 + 12));
    std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::destroy((uint64_t)(a2 + 9), (void *)a2[10]);
    uint64_t v3 = a2[8];
    a2[8] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = a2[7];
    a2[7] = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
    std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::destroy((uint64_t)(a2 + 4), (void *)a2[5]);
    std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::destroy((uint64_t)(a2 + 1), (void *)a2[2]);
    uint64_t v5 = *a2;
    *a2 = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    }
    JUMPOUT(0x1B3EA8670);
  }
}

void std::vector<std::optional<quasar::language_detector::Locale>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::__optional_destruct_base<quasar::language_detector::Locale,false>::~__optional_destruct_base[abi:ne180100](v4 - 56);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::vector<std::optional<quasar::language_detector::Locale>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<quasar::VoiceCommandArgument>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (unsigned char *)a1[1];
    uint64_t v5 = &v4[56 * a2];
    do
    {
      unsigned char *v4 = 0;
      v4[48] = 0;
      v4 += 56;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_1B23FFB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::allocate_shared[abi:ne180100]<quasar::LDContext,std::allocator<quasar::LDContext>,quasar::LDContext const&,void>@<X0>(const quasar::LDContext *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x180uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::LDContext>::__shared_ptr_emplace[abi:ne180100]<quasar::LDContext const&,std::allocator<quasar::LDContext>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B23FFBB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::LDContext>::__shared_ptr_emplace[abi:ne180100]<quasar::LDContext const&,std::allocator<quasar::LDContext>,0>(void *a1, const quasar::LDContext *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62668;
  quasar::LDContext::LDContext((quasar::LDContext *)(a1 + 3), a2);
  return a1;
}

void sub_1B23FFC14(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LDContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62668;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LDContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62668;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::LDContext>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<EARLDResultStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DD58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EARLDResultStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DD58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<EARLDResultStream>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void EARLDResultStream::didFinishProcessingFrames(uint64_t a1, quasar *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = earLanguageDetectorLog;
  if (os_log_type_enabled((os_log_t)earLanguageDetectorLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1B1A86000, v4, OS_LOG_TYPE_DEFAULT, "Received didFinishProcessingFrames", buf, 2u);
  }
  uint64_t v5 = objc_alloc_init(_EARLanguageDetectorLoggingInfo);
  double v6 = COERCE_DOUBLE(atomic_load((unint64_t *)(a1 + 24)));
  std::string::basic_string[abi:ne180100]<0>(__p, "messageLanguageTaggingLatency");
  quasar::LDLoggingInfo::addDoubleValue(a2, (uint64_t)__p, v6);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  id v7 = EARHelpers::dictFromPTree(a2, 0);
  uint64_t v8 = earLanguageDetectorLog;
  BOOL v9 = os_log_type_enabled((os_log_t)earLanguageDetectorLog, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    if (!v9) {
      goto LABEL_11;
    }
    *(_DWORD *)long long buf = 138412290;
    id v18 = v7;
    uint64_t v10 = "Logging Data: %@";
    uint64_t v11 = v8;
    uint32_t v12 = 12;
  }
  else
  {
    if (!v9) {
      goto LABEL_11;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v10 = "Got an error when trying to print logging info";
    uint64_t v11 = v8;
    uint32_t v12 = 2;
  }
  _os_log_impl(&dword_1B1A86000, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
LABEL_11:
  [(_EARLanguageDetectorLoggingInfo *)v5 setLoggingDict:v7];
  if (*((void *)a2 + 8))
  {
    uint64_t v13 = +[_EARLanguageDetectorRequestContext contextFromLDContext:](_EARLanguageDetectorRequestContext, "contextFromLDContext:");
    [(_EARLanguageDetectorLoggingInfo *)v5 setContext:v13];
  }
  uint64_t v14 = earLanguageDetectorLog;
  if (os_log_type_enabled((os_log_t)earLanguageDetectorLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1B1A86000, v14, OS_LOG_TYPE_DEFAULT, "Sending logging info to delegate", buf, 2u);
  }
  [*(id *)(a1 + 8) languageDetectorDidCompleteProcessing:*(void *)(a1 + 16) loggingInfo:v5];
}

void sub_1B23FFF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void EARLDResultStream::didComputeResult(id *this, const quasar::LDResult *a2)
{
  uint64_t v4 = earLanguageDetectorLog;
  if (os_log_type_enabled((os_log_t)earLanguageDetectorLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1B1A86000, v4, OS_LOG_TYPE_DEFAULT, "Received didComputeResult", buf, 2u);
  }
  uint64_t v5 = EARHelpers::MapToDictionary<quasar::language_detector::Locale,double,EARLDResultStream::didComputeResult(quasar::LDResult const&)::{lambda(quasar::language_detector::Locale)#1},EARLDResultStream::didComputeResult(quasar::LDResult const&)::{lambda(double)#1}>((void *)a2 + 4);
  if (objc_opt_respondsToSelector())
  {
    double v6 = objc_alloc_init(_EARLanguageDetectorResult);
    [(_EARLanguageDetectorResult *)v6 setConfidences:v5];
    [(_EARLanguageDetectorResult *)v6 setIsConfident:*((unsigned __int8 *)a2 + 2)];
    id v7 = earLanguageDetectorLog;
    if (os_log_type_enabled((os_log_t)earLanguageDetectorLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_1B1A86000, v7, OS_LOG_TYPE_DEFAULT, "Sending language detector result to delegate", v10, 2u);
    }
    [this[1] languageDetector:this[2] result:v6];
  }
  else if (objc_opt_respondsToSelector())
  {
    uint64_t v8 = earLanguageDetectorLog;
    if (os_log_type_enabled((os_log_t)earLanguageDetectorLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v9 = 0;
      _os_log_impl(&dword_1B1A86000, v8, OS_LOG_TYPE_DEFAULT, "Sending language detector confidences to delegate", v9, 2u);
    }
    [this[1] languageDetector:this[2] confidences:v5];
  }
}

void sub_1B240010C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void EARLDResultStream::~EARLDResultStream(id *this)
{
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
}

{
  uint64_t vars8;

  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
  JUMPOUT(0x1B3EA8670);
}

id EARHelpers::MapToDictionary<quasar::language_detector::Locale,double,EARLDResultStream::didComputeResult(quasar::LDResult const&)::{lambda(quasar::language_detector::Locale)#1},EARLDResultStream::didComputeResult(quasar::LDResult const&)::{lambda(double)#1}>(void *a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v5 = (void *)*a1;
  uint64_t v3 = a1 + 1;
  uint64_t v4 = v5;
  if (v5 != v3)
  {
    do
    {
      double v6 = objc_msgSend(NSNumber, "numberWithDouble:", *((double *)v4 + 10), *(_OWORD *)&v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__r.__words[2]);
      if (*((char *)v4 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v15, (const std::string::value_type *)v4[4], v4[5]);
      }
      else {
        std::string v15 = *(std::string *)(v4 + 4);
      }
      if (*((char *)v4 + 79) < 0) {
        std::string::__init_copy_ctor_external(&v16, (const std::string::value_type *)v4[7], v4[8]);
      }
      else {
        std::string v16 = *(std::string *)(v4 + 7);
      }
      id v7 = NSString;
      quasar::language_detector::Locale::getSiriLocaleStr((quasar::language_detector::Locale *)&v15, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      BOOL v9 = objc_msgSend(v7, "stringWithUTF8String:", p_p, v15.__r_.__value_.__r.__words[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      [v2 setObject:v6 forKey:v9];

      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }

      uint64_t v10 = (void *)v4[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v4[2];
          BOOL v12 = *v11 == (void)v4;
          uint64_t v4 = v11;
        }
        while (!v12);
      }
      uint64_t v4 = v11;
    }
    while (v11 != v3);
  }
  uint64_t v13 = (void *)[v2 copy];

  return v13;
}

void sub_1B2400380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::LDContext const,std::allocator<quasar::LDContext const>,quasar::LDContext,void>@<X0>(void *a1@<X8>)
{
  id v2 = operator new(0x180uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::LDContext const>::__shared_ptr_emplace[abi:ne180100]<quasar::LDContext,std::allocator<quasar::LDContext const>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B2400434(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::LDContext const>::__shared_ptr_emplace[abi:ne180100]<quasar::LDContext,std::allocator<quasar::LDContext const>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5DFC0;
  quasar::LDContext::LDContext(a1 + 3);
  return a1;
}

void sub_1B2400490(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LDContext const>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DFC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LDContext const>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DFC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::LDContext const>::__on_zero_shared(uint64_t a1)
{
}

uint64_t *std::__tree<quasar::language_detector::Locale>::__emplace_unique_key_args<quasar::language_detector::Locale,quasar::language_detector::Locale const&>(uint64_t **a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<quasar::language_detector::Locale>::__find_equal<quasar::language_detector::Locale>((uint64_t)a1, &v10, a2);
  double v6 = *v5;
  if (!*v5)
  {
    id v7 = v5;
    std::__tree<quasar::language_detector::Locale>::__construct_node<quasar::language_detector::Locale const&>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v7, v9[0]);
    double v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t std::__tree<quasar::language_detector::Locale>::__count_unique<quasar::language_detector::Locale>(uint64_t a1, unsigned __int8 **a2)
{
  id v2 = *(unsigned __int8 **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = 1;
    do
    {
      if ((quasar::language_detector::Locale::operator<((unsigned __int8 *)a2, (unsigned __int8 **)v2 + 4) & 1) == 0)
      {
        if (!quasar::language_detector::Locale::operator<(v2 + 32, a2)) {
          return v4;
        }
        v2 += 8;
      }
      id v2 = *(unsigned __int8 **)v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t std::set<quasar::language_detector::Locale>::set[abi:ne180100]<std::__wrap_iter<quasar::language_detector::Locale const*>>(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    double v6 = a2;
    do
    {
      std::__tree<quasar::language_detector::Locale>::__emplace_hint_unique_key_args<quasar::language_detector::Locale,quasar::language_detector::Locale const&>((uint64_t **)a1, v4, v6, (long long *)v6);
      v6 += 6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_1B2400690(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

std::__shared_weak_count *quasar::WordSetFileFactory::get@<X0>(unsigned __int8 *a1@<X0>, std::string::size_type *a2@<X8>)
{
  {
    operator new();
  }
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)quasar::WordSetFileFactory::get(std::string const&)::wordSetFiles, a1);
  if (v4)
  {
    uint64_t v5 = v4;
    *a2 = 0;
    a2[1] = 0;
    double v6 = (std::__shared_weak_count *)*((void *)v4 + 6);
    if (v6)
    {
      uint64_t result = std::__shared_weak_count::lock(v6);
      a2[1] = (std::string::size_type)result;
      if (result)
      {
        std::string::size_type v8 = *((void *)v5 + 5);
        *a2 = v8;
        if (v8) {
          return result;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](result);
      }
    }
  }
  quasar::mt::utils::readWordsFromFile((uint64_t)a1, (uint64_t)v9);
  std::allocate_shared[abi:ne180100]<quasar::WordSet,std::allocator<quasar::WordSet>,std::unordered_set<std::string>,void>(v9, a2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v9);
  return (std::__shared_weak_count *)std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>>>::__emplace_unique_key_args<std::string,std::string const&,std::shared_ptr<quasar::WordSet> &>(quasar::WordSetFileFactory::get(std::string const&)::wordSetFiles, a1, (long long *)a1, a2);
}

void sub_1B24007B0(_Unwind_Exception *a1)
{
}

void *std::allocate_shared[abi:ne180100]<quasar::WordSet,std::allocator<quasar::WordSet>,std::unordered_set<std::string>,void>@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x40uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::WordSet>::__shared_ptr_emplace[abi:ne180100]<std::unordered_set<std::string>,std::allocator<quasar::WordSet>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B2400834(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::WordSet>::__shared_ptr_emplace[abi:ne180100]<std::unordered_set<std::string>,std::allocator<quasar::WordSet>,0>(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A623C8;
  std::allocator<quasar::WordSet>::construct[abi:ne180100]<quasar::WordSet,std::unordered_set<std::string>>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B24008A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::WordSet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A623C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WordSet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A623C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WordSet>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 24);
}

uint64_t std::allocator<quasar::WordSet>::construct[abi:ne180100]<quasar::WordSet,std::unordered_set<std::string>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table((uint64_t)v5, a3);
  quasar::WordSet::WordSet(a2, v5);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v5);
}

void sub_1B2400980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>>>::__emplace_unique_key_args<std::string,std::string const&,std::shared_ptr<quasar::WordSet> &>(uint64_t a1, unsigned __int8 *a2, long long *a3, std::string::size_type *a4)
{
  BOOL v9 = (void *)(a1 + 24);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    std::string v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (unint64_t i = *v15; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>>>::__construct_node_hash<std::string const&,std::shared_ptr<quasar::WordSet> &>(a1, v11, a3, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *uint64_t v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_1B2400C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>>>::__construct_node_hash<std::string const&,std::shared_ptr<quasar::WordSet> &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, std::string::size_type *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = (char *)operator new(0x38uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)unint64_t v10 = 0;
  *((void *)v10 + 1) = a2;
  uint64_t result = std::pair<std::__fs::filesystem::path const,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>::pair[abi:ne180100]<std::__fs::filesystem::path const&,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk> &,0>((std::string *)(v10 + 16), a3, a4);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_1B2400C90(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LatticeRnn::LatticeRnn(kaldi::nnet1::Nnet *a1)
{
}

void sub_1B2400EA0(_Unwind_Exception *a1)
{
  kaldi::nnet1::Nnet::~Nnet(v4);
  kaldi::nnet1::Nnet::~Nnet(v3);
  kaldi::nnet1::Nnet::~Nnet(v6);
  kaldi::nnet1::Nnet::~Nnet(v2);
  kaldi::nnet1::Nnet::~Nnet(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LatticeRnn::Run(uint64_t a1, void *a2, void *a3)
{
  if (a2[3] - a2[2] > 0xFuLL)
  {
    id v7 = (uint64_t *)a2[5];
    std::string::size_type v8 = (uint64_t *)a2[6];
    while (v7 != v8)
    {
      kaldi::CuVector<float>::Resize(*v7 + 328, *(unsigned int *)(*v7 + 312), 1);
      uint64_t v9 = *v7++;
      kaldi::nnet1::Nnet::Feedforward((void *)a1, v9 + 296, (void *)(v9 + 328), -1);
    }
    unint64_t v10 = (kaldi::nnet1::Nnet *)(a1 + 376);
    uint64_t v11 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 376));
    unint64_t v12 = (kaldi::nnet1::Nnet *)(a1 + 752);
    if (((*(void *)(a1 + 760) - *(void *)(a1 + 752)) & 0x7FFFFFFF8) != 0) {
      uint64_t v11 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 752)) + v11;
    }
    if (*(unsigned char *)(a1 + 1880))
    {
      kaldi::quasar::LatticeRnn::Feed(0, (uint64_t)a2, (kaldi::nnet1::Nnet *)(a1 + 376), 0);
      kaldi::quasar::LatticeRnn::Feed(1, (uint64_t)a2, (kaldi::nnet1::Nnet *)(a1 + 752), 0);
      uint64_t v13 = a2[5];
      uint64_t v14 = a2[6];
      if (v13 != v14)
      {
        std::string v15 = (void *)(a1 + 1504);
        do
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v27 = &unk_1F0A517C0;
          uint64_t v30 = 0;
          kaldi::CuVector<float>::Resize((uint64_t)&v27, v11, 1);
          unsigned int v16 = kaldi::nnet1::Nnet::OutputDim(v10);
          size_t v23 = &unk_1F0A472D0;
          uint64_t v24 = v28;
          uint64_t v25 = v16;
          uint64_t v26 = v30;
          kaldi::CuVectorBase<float>::CopyFromVec(&v23, *(void *)v13 + 360);
          int v17 = kaldi::nnet1::Nnet::OutputDim(v10);
          unsigned int v18 = kaldi::nnet1::Nnet::OutputDim(v12);
          size_t v23 = &unk_1F0A472D0;
          uint64_t v24 = v28 + 4 * v17;
          uint64_t v25 = v18;
          uint64_t v26 = v30;
          kaldi::CuVectorBase<float>::CopyFromVec(&v23, *(void *)v13 + 392);
          kaldi::nnet1::Nnet::Feedforward(v15, (uint64_t)&v27, (void *)(*(void *)v13 + 424), -1);
          kaldi::CuVector<float>::~CuVector(&v27);
          v13 += 8;
        }
        while (v13 != v14);
      }
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v27 = &unk_1F0A517C0;
      uint64_t v30 = 0;
      kaldi::CuVector<float>::Resize((uint64_t)&v27, v11, 1);
      unsigned int v19 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 376));
      size_t v23 = &unk_1F0A472D0;
      uint64_t v24 = v28;
      uint64_t v25 = v19;
      uint64_t v26 = v30;
      kaldi::quasar::LatticeRnn::Feed(0, (uint64_t)a2, (kaldi::nnet1::Nnet *)(a1 + 376), &v23);
      if (((*(void *)(a1 + 760) - *(void *)(a1 + 752)) & 0x7FFFFFFF8) != 0)
      {
        int v20 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 376));
        unsigned int v21 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 752));
        v22[0] = &unk_1F0A472D0;
        v22[1] = v28 + 4 * v20;
        v22[2] = v21;
        void v22[3] = v30;
        kaldi::quasar::LatticeRnn::Feed(1, (uint64_t)a2, (kaldi::nnet1::Nnet *)(a1 + 752), v22);
      }
      kaldi::nnet1::Nnet::Feedforward((void *)(a1 + 1128), (uint64_t)&v27, a3, -1);
      kaldi::CuVector<float>::~CuVector(&v27);
    }
  }
  else
  {
    uint64_t v5 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 1128));
    kaldi::CuVector<float>::Resize((uint64_t)a3, v5, 0);
  }
}

void sub_1B2401264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LatticeRnn::Feed(int a1, uint64_t a2, kaldi::nnet1::Nnet *this, void *a4)
{
  if (a1)
  {
    id v7 = *(uint64_t **)(a2 + 24);
    while (v7 != *(uint64_t **)(a2 + 16))
    {
      std::string::size_type v8 = (kaldi::quasar::LatticeRnn *)*--v7;
      uint64_t v9 = (kaldi::WordHypLattice::Node *)kaldi::nnet1::Nnet::OutputDim(this);
      kaldi::quasar::LatticeRnn::Pool(v8, v9, 1);
      uint64_t v10 = *v7;
      for (uint64_t i = *(void *)(*v7 + 8); i != v10; uint64_t i = *(void *)(i + 8))
      {
        kaldi::nnet1::Nnet::SetHistoryState((uint64_t)this, *v7 + 152, 0, 0);
        kaldi::nnet1::Nnet::Feedforward(this, *(void *)(i + 16) + 328, (void *)(*(void *)(i + 16) + 392), -1);
      }
    }
    if (!a4) {
      return;
    }
    if (v7 == *(uint64_t **)(a2 + 24))
    {
LABEL_21:
      uint64_t v19 = 0;
      goto LABEL_22;
    }
  }
  else
  {
    unint64_t v12 = *(kaldi::quasar::LatticeRnn ***)(a2 + 16);
    uint64_t v13 = *(kaldi::quasar::LatticeRnn ***)(a2 + 24);
    while (v12 != v13)
    {
      uint64_t v14 = *v12;
      std::string v15 = (kaldi::WordHypLattice::Node *)kaldi::nnet1::Nnet::OutputDim(this);
      kaldi::quasar::LatticeRnn::Pool(v14, v15, 0);
      uint64_t v16 = (uint64_t)*v12 + 64;
      for (uint64_t j = *((void *)*v12 + 9); j != v16; uint64_t j = *(void *)(j + 8))
      {
        kaldi::nnet1::Nnet::SetHistoryState((uint64_t)this, (uint64_t)*v12 + 152, 0, 0);
        kaldi::nnet1::Nnet::Feedforward(this, *(void *)(j + 16) + 328, (void *)(*(void *)(j + 16) + 360), -1);
      }
      ++v12;
    }
    if (!a4) {
      return;
    }
    uint64_t v18 = *(void *)(a2 + 24);
    if (*(void *)(a2 + 16) == v18) {
      goto LABEL_21;
    }
    id v7 = (uint64_t *)(v18 - 8);
  }
  uint64_t v19 = *v7;
LABEL_22:
  kaldi::CuVectorBase<float>::CopyFromVec(a4, v19 + 152);
}

void kaldi::quasar::LatticeRnn::Pool(kaldi::quasar::LatticeRnn *this, kaldi::WordHypLattice::Node *a2, int a3)
{
  uint64_t v5 = (char *)this + 152;
  kaldi::CuVector<float>::Resize((uint64_t)this + 152, (uint64_t)a2, 0);
  if (a3)
  {
    id v7 = (char *)this + 80;
    unint64_t v6 = *((void *)this + 10);
    if (!v6) {
      return;
    }
    std::string::size_type v8 = (char *)this + 64;
    uint64_t v9 = *((void *)this + 9);
    if ((char *)v9 == v7 - 16) {
      goto LABEL_10;
    }
    do
    {
      kaldi::CuVectorBase<float>::AddVec((uint64_t)v5, *(void *)(v9 + 16) + 392, 1.0, 1.0);
      uint64_t v9 = *(void *)(v9 + 8);
    }
    while ((char *)v9 != v8);
    goto LABEL_9;
  }
  id v7 = (char *)this + 16;
  unint64_t v6 = *((void *)this + 2);
  if (!v6) {
    return;
  }
  uint64_t v10 = (kaldi::quasar::LatticeRnn *)*((void *)this + 1);
  if (v10 != this)
  {
    do
    {
      kaldi::CuVectorBase<float>::AddVec((uint64_t)v5, *((void *)v10 + 2) + 360, 1.0, 1.0);
      uint64_t v10 = (kaldi::quasar::LatticeRnn *)*((void *)v10 + 1);
    }
    while (v10 != this);
LABEL_9:
    unint64_t v6 = *(void *)v7;
  }
LABEL_10:
  float v11 = 1.0 / (double)v6;
  kaldi::CuVectorBase<float>::Scale((uint64_t)v5, v11);
}

uint64_t writeBinaryCount(File *this, unint64_t a2, unsigned int a3)
{
  unsigned int v3 = a2;
  if (a2 >> 15 || a3 > 2)
  {
    if (!(a2 >> 30) && a3 <= 4)
    {
      unsigned int v9 = a2 | 0x80000000;
      if (isLittleEndian(void)::haveEndianness)
      {
        if (isLittleEndian(void)::endianIsLittle != 1) {
          goto LABEL_20;
        }
      }
      else
      {
        isLittleEndian(void)::endianIsLittle = 1;
        isLittleEndian(void)::haveEndianness = 1;
      }
      unsigned int v9 = bswap32(v9);
LABEL_20:
      uint64_t v5 = 4;
      File::fwrite(this, &v9, 4uLL, 1uLL);
      return v5;
    }
    if (a2 >> 62)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"writeBinaryCount: count ", 24);
      unint64_t v6 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" is too large\n", 14);
      return 0;
    }
    unsigned int v8 = HIDWORD(a2) | 0xC0000000;
    if (isLittleEndian(void)::haveEndianness)
    {
      if (isLittleEndian(void)::endianIsLittle != 1)
      {
LABEL_24:
        File::fwrite(this, &v8, 4uLL, 1uLL);
        unsigned int v8 = v3;
        if (isLittleEndian(void)::haveEndianness)
        {
          if (isLittleEndian(void)::endianIsLittle != 1) {
            goto LABEL_29;
          }
        }
        else
        {
          isLittleEndian(void)::endianIsLittle = 1;
          isLittleEndian(void)::haveEndianness = 1;
        }
        unsigned int v8 = bswap32(v8);
LABEL_29:
        File::fwrite(this, &v8, 4uLL, 1uLL);
        return 8;
      }
    }
    else
    {
      isLittleEndian(void)::endianIsLittle = 1;
      isLittleEndian(void)::haveEndianness = 1;
    }
    unsigned int v8 = bswap32(v8);
    goto LABEL_24;
  }
  __int16 __ptr = a2;
  if (isLittleEndian(void)::haveEndianness)
  {
    if (isLittleEndian(void)::endianIsLittle != 1) {
      goto LABEL_13;
    }
  }
  else
  {
    isLittleEndian(void)::endianIsLittle = 1;
    isLittleEndian(void)::haveEndianness = 1;
  }
  __int16 __ptr = bswap32(a2) >> 16;
LABEL_13:
  uint64_t v5 = 2;
  File::fwrite(this, &__ptr, 2uLL, 1uLL);
  return v5;
}

uint64_t readBinaryCount(File *a1, unint64_t *a2)
{
  unsigned __int16 __ptr = 0;
  size_t v4 = File::fread(a1, &__ptr, 2uLL, 1uLL);
  uint64_t result = 0;
  if (v4 == 1)
  {
    if (isLittleEndian(void)::haveEndianness)
    {
      if ((isLittleEndian(void)::endianIsLittle & 1) == 0)
      {
        unsigned int v6 = __ptr;
        if ((__ptr & 0x8000) != 0) {
          goto LABEL_5;
        }
        goto LABEL_11;
      }
    }
    else
    {
      isLittleEndian(void)::endianIsLittle = 1;
      isLittleEndian(void)::haveEndianness = 1;
    }
    unsigned int v6 = __rev16(__ptr);
    unsigned __int16 __ptr = v6;
    if ((v6 & 0x8000) != 0)
    {
LABEL_5:
      if (File::fread(a1, &__ptr, 2uLL, 1uLL) != 1)
      {
        unsigned int v8 = (void *)MEMORY[0x1E4FBA240];
        unsigned int v9 = "readBinaryCount: incomplete long count\n";
        uint64_t v10 = 39;
        goto LABEL_13;
      }
      if (isLittleEndian(void)::haveEndianness)
      {
        if ((isLittleEndian(void)::endianIsLittle & 1) == 0)
        {
          unsigned int v7 = __ptr;
LABEL_16:
          unint64_t v11 = ((v6 & 0x7FFF) << 16) | v7;
          unsigned int v13 = ((v6 & 0x7FFF) << 16) | v7;
          if (!((unsigned __int16)(v6 & 0x7FFF) >> 14))
          {
            *a2 = v11;
            return 4;
          }
          *a2 = (v11 & 0x3FFFFFFF) << 32;
          if (File::fread(a1, &v13, 4uLL, 1uLL) == 1)
          {
            if (isLittleEndian(void)::haveEndianness)
            {
              if ((isLittleEndian(void)::endianIsLittle & 1) == 0)
              {
                unsigned int v12 = v13;
LABEL_25:
                *a2 |= v12;
                return 8;
              }
            }
            else
            {
              isLittleEndian(void)::endianIsLittle = 1;
              isLittleEndian(void)::haveEndianness = 1;
            }
            unsigned int v12 = bswap32(v13);
            goto LABEL_25;
          }
          unsigned int v8 = (void *)MEMORY[0x1E4FBA240];
          unsigned int v9 = "readBinaryCount: incomplete long long count\n";
          uint64_t v10 = 44;
LABEL_13:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
          return 0;
        }
      }
      else
      {
        isLittleEndian(void)::endianIsLittle = 1;
        isLittleEndian(void)::haveEndianness = 1;
      }
      unsigned int v7 = bswap32(__ptr) >> 16;
      unsigned __int16 __ptr = v7;
      goto LABEL_16;
    }
LABEL_11:
    *a2 = v6;
    return 2;
  }
  return result;
}

uint64_t writeBinaryCount(File *a1, float a2)
{
  unsigned int __ptr = LODWORD(a2);
  if (isLittleEndian(void)::haveEndianness)
  {
    if (isLittleEndian(void)::endianIsLittle != 1) {
      return 4 * (File::fwrite(a1, &__ptr, 4uLL, 1uLL) == 1);
    }
  }
  else
  {
    isLittleEndian(void)::endianIsLittle = 1;
    isLittleEndian(void)::haveEndianness = 1;
  }
  unsigned int __ptr = bswap32(__ptr);
  return 4 * (File::fwrite(a1, &__ptr, 4uLL, 1uLL) == 1);
}

uint64_t writeBinaryCount(File *a1, double a2)
{
  unint64_t __ptr = *(void *)&a2;
  if (isLittleEndian(void)::haveEndianness)
  {
    if (isLittleEndian(void)::endianIsLittle != 1) {
      return 8 * (File::fwrite(a1, &__ptr, 8uLL, 1uLL) == 1);
    }
  }
  else
  {
    isLittleEndian(void)::endianIsLittle = 1;
    isLittleEndian(void)::haveEndianness = 1;
  }
  unint64_t __ptr = bswap64(__ptr);
  return 8 * (File::fwrite(a1, &__ptr, 8uLL, 1uLL) == 1);
}

uint64_t readBinaryCount(File *a1, float *a2)
{
  if (File::fread(a1, a2, 4uLL, 1uLL) != 1) {
    return 0;
  }
  if (isLittleEndian(void)::haveEndianness)
  {
    if (isLittleEndian(void)::endianIsLittle != 1) {
      return 4;
    }
  }
  else
  {
    isLittleEndian(void)::endianIsLittle = 1;
    isLittleEndian(void)::haveEndianness = 1;
  }
  *(_DWORD *)a2 = bswap32(*(_DWORD *)a2);
  return 4;
}

uint64_t readBinaryCount(File *a1, double *a2)
{
  if (File::fread(a1, a2, 8uLL, 1uLL) != 1) {
    return 0;
  }
  if (isLittleEndian(void)::haveEndianness)
  {
    if (isLittleEndian(void)::endianIsLittle != 1) {
      return 8;
    }
  }
  else
  {
    isLittleEndian(void)::endianIsLittle = 1;
    isLittleEndian(void)::haveEndianness = 1;
  }
  *(void *)a2 = bswap64(*(void *)a2);
  return 8;
}

void kaldi::MakeLatticeFromLinear()
{
}

void sub_1B2401CC4(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlinePrefixBeamSearchDecoder::OnlinePrefixBeamSearchDecoder(uint64_t a1, long long *a2)
{
  void v8[3] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = quasar::CTCAlignedDecoder::CTCAlignedDecoder(a1, a2);
  *(void *)uint64_t v3 = &unk_1F0A57AD8;
  *(void *)(v3 + 472) = 0x1000000010;
  *(_DWORD *)(v3 + 480) = -1;
  *(_WORD *)(v3 + 484) = 256;
  *(unsigned char *)(v3 + 486) = 0;
  std::string::basic_string[abi:ne180100]<0>(v7, "<?>");
  std::string::basic_string[abi:ne180100]<0>(v8, "<eps>");
  std::unordered_set<std::string>::unordered_set(a1 + 488, v7, 2);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v8[i + 2]) < 0) {
      operator delete(*(void **)&v7[i * 8 + 24]);
    }
  }
  *(unsigned char *)(a1 + 528) = 0;
  *(void *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  uint64_t v5 = (char *)operator new(0xA8uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)uint64_t v5 = &unk_1F0A60678;
  *((void *)v5 + 19) = 0;
  *((void *)v5 + 20) = 0;
  *((void *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *((_DWORD *)v5 + 34) = 0;
  *(_OWORD *)(v5 + 24) = 0u;
  *(void *)(a1 + 576) = v5 + 24;
  *(void *)(a1 + 584) = v5;
  kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig::OnlineLatticeBiglmFasterDecoderConfig((kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig *)(a1 + 592));
  *(void *)(a1 + 752) = 0xCF000000CF000000;
  *(unsigned char *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 825) = 0u;
  *(_DWORD *)(a1 + 844) = 5000;
  *(unsigned char *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 852) = 0u;
  *(_OWORD *)(a1 + 868) = 0u;
  *(_OWORD *)(a1 + 881) = 0u;
  *(unsigned char *)(a1 + 897) = 1;
  *(void *)(a1 + 900) = 60000;
  *(_DWORD *)(a1 + 908) = 500;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 912), "");
  *(_DWORD *)(a1 + 952) = 0;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_WORD *)(a1 + 956) = 1;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 960), "increase-by-one");
  *(void *)(a1 + 984) = &unk_1F0A1CB10;
  *(void *)(a1 + 1008) = a1 + 984;
  *(void *)(a1 + 1016) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 1024) = 0;
  *(unsigned char *)(a1 + 57) = 1;
  return a1;
}

void sub_1B2401F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  unsigned int v21 = *(std::__shared_weak_count **)(v15 + 944);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (*(char *)(v15 + 935) < 0) {
    operator delete(*v18);
  }
  quasar::UttDetectConfig::~UttDetectConfig(v17);
  unint64_t v22 = *(std::__shared_weak_count **)(v15 + 584);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  size_t v23 = *(std::__shared_weak_count **)(v15 + 568);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (*(char *)(v15 + 559) < 0) {
    operator delete(*v19);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v16);
  quasar::CTCAlignedDecoder::~CTCAlignedDecoder((void **)v15);
  _Unwind_Resume(a1);
}

void quasar::OnlinePrefixBeamSearchDecoder::~OnlinePrefixBeamSearchDecoder(quasar::OnlinePrefixBeamSearchDecoder *this)
{
  *(void *)this = &unk_1F0A57AD8;
  std::__function::__value_func<int ()(int)>::~__value_func[abi:ne180100]((void *)this + 123);
  if (*((char *)this + 983) < 0) {
    operator delete(*((void **)this + 120));
  }
  id v2 = (std::__shared_weak_count *)*((void *)this + 118);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 935) < 0) {
    operator delete(*((void **)this + 114));
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 111);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unsigned int v6 = (void **)((char *)this + 856);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 839) < 0) {
    operator delete(*((void **)this + 102));
  }
  if (*((char *)this + 815) < 0) {
    operator delete(*((void **)this + 99));
  }
  if (*((char *)this + 791) < 0) {
    operator delete(*((void **)this + 96));
  }
  size_t v4 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 71);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*((char *)this + 559) < 0) {
    operator delete(*((void **)this + 67));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 488);
  *(void *)this = &unk_1F0A1C8C0;
  if (*((char *)this + 471) < 0) {
    operator delete(*((void **)this + 56));
  }
  quasar::Decoder::~Decoder(this);
}

{
  uint64_t vars8;

  quasar::OnlinePrefixBeamSearchDecoder::~OnlinePrefixBeamSearchDecoder(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::OnlinePrefixBeamSearchDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ctc-prefix-beam-search-decoder");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 268, 0, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  quasar::QsrTextSymbolTable::Register(this[72], a2, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(__p, "nnlm-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "an nnlm that uses the same label sets as the encoder");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 114), (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "nnlm-weight");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default 0) the interpolation weight of nnlm");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 119), (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "prune-before-fusion");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default true) prune by symbol-beam before fusion");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 956, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "track-lm-score-separately");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default false) track lm score separately in the prefix; otherwise it will be fused into non-blank label's logprob d"
    "uring prefix merge");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 957, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "non-blank-penalty");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default 0)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 127), (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "blank-threshold-for-fusion");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default 1)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1020, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "use-repetition-offset");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default false)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 128), (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "symbol-beam");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default 16) pick the top K symbols for the next round of expansion");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 476, (uint64_t)v4, 0, 268, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "beam");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default 16) how many paths to keep during search");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 59), (uint64_t)v4, 0, 268, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "blank");
  std::string::basic_string[abi:ne180100]<0>(v4, "id of the blank symbol");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 60), (uint64_t)v4, 1, 268, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "use-viterbi");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default true) if set, pick the highest probability instead of summing the probabilities when merging prefix");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 484, (uint64_t)v4, 0, 268, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "phone-syms-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Phone symbol table (text format) filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 67), (uint64_t)v4, 1, 16, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "keep-only-best-in-lattice");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default true)  keep only the best in the lattice");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 485, (uint64_t)v4, 0, 268, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "exit-without-search");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default false) disable beam search (for am-only energy measurement)");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 486, (uint64_t)v4, 0, 268, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "rejected-left-context-tokens");
  std::string::basic_string[abi:ne180100]<0>(v4, "List of tokens that don't work with left context. The decoder will reset the left context when it encounters one of these tokens.");
  quasar::SystemConfig::Register<std::unordered_set<std::string>>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 61), (uint64_t)v4, 0, 268, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "inter-utterance-left-context-max-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "Maximum size for inter-utterance left context");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 532, (uint64_t)v4, 0, 268, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ilabel-mapper-type");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default increase-by-one), currently we support 'identity' and 'increase-by-one'");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 120), (uint64_t)v4, 0, 268, 271, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "preserve-white-space");
  std::string::basic_string[abi:ne180100]<0>(v4, "Preserve white space from decoder, default is true");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 66), (uint64_t)v4, 0, 268, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "separator");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default ▁) indictator of the start of a new word for BPE");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 56), (uint64_t)v4, 0, 268, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "utt-detect.");
  quasar::UttDetectConfig::registerParams((uint64_t)(this + 74), a2, (const void **)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  *((_DWORD *)this + 133) = 4;
}

void sub_1B2402A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlinePrefixBeamSearchDecoder::finishInit(quasar::OnlinePrefixBeamSearchDecoder *this)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)((char *)this + 960);
  if ((*((char *)this + 983) & 0x80000000) == 0)
  {
    int v3 = *((unsigned __int8 *)this + 983);
    if (v3 != 8)
    {
      if (v3 != 15) {
        goto LABEL_32;
      }
      goto LABEL_9;
    }
    if (*v2 != 0x797469746E656469) {
      goto LABEL_32;
    }
LABEL_16:
    unsigned int v8 = (void *)((char *)this + 984);
    unsigned int v9 = &unk_1F0A1D038;
    goto LABEL_17;
  }
  uint64_t v4 = *((void *)this + 121);
  if (v4 == 8 && *(void *)*v2 == 0x797469746E656469) {
    goto LABEL_16;
  }
  if (v4 != 15) {
    goto LABEL_32;
  }
  id v2 = (void *)*v2;
LABEL_9:
  char v5 = (void *)*v2;
  uint64_t v6 = *(void *)((char *)v2 + 7);
  if (v5 != (void *)0x6573616572636E69 || v6 != 0x656E6F2D79622D65)
  {
LABEL_32:
    uint64_t v19 = (char *)this + 960;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
    char v15 = *((unsigned char *)this + 983);
    if (v15 >= 0) {
      uint64_t v16 = (uint64_t)v19;
    }
    else {
      uint64_t v16 = *((void *)this + 120);
    }
    if (v15 >= 0) {
      uint64_t v17 = *((unsigned __int8 *)this + 983);
    }
    else {
      uint64_t v17 = *((void *)this + 121);
    }
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, v16, v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, " is not a valid ilabel mapper");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v20);
  }
  unsigned int v8 = (void *)((char *)this + 984);
  unsigned int v9 = &unk_1F0A1D090;
LABEL_17:
  *(void *)&long long v20 = v9;
  *((void *)&v21 + 1) = &v20;
  std::__function::__value_func<int ()(int)>::swap[abi:ne180100](&v20, v8);
  std::__function::__value_func<int ()(int)>::~__value_func[abi:ne180100](&v20);
  if (*((char *)this + 935) < 0)
  {
    if (!*((void *)this + 115)) {
      goto LABEL_24;
    }
  }
  else if (!*((unsigned char *)this + 935))
  {
    goto LABEL_24;
  }
  std::allocate_shared[abi:ne180100]<kaldi::quasar::CEDecoder,std::allocator<kaldi::quasar::CEDecoder>,std::string &,void>(&v20);
  long long v10 = v20;
  long long v20 = 0uLL;
  unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 118);
  *(_OWORD *)((char *)this + 936) = v10;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    if (*((void *)&v20 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
    }
  }
LABEL_24:
  if (*((char *)this + 559) < 0)
  {
    if (!*((void *)this + 68)) {
      goto LABEL_31;
    }
  }
  else if (!*((unsigned char *)this + 559))
  {
    goto LABEL_31;
  }
  quasar::ModelLoader::readSymbolTable(*((void *)this + 46), (uint64_t)this + 536, 4, 0, &v20);
  long long v12 = v20;
  long long v20 = 0uLL;
  unsigned int v13 = (std::__shared_weak_count *)*((void *)this + 71);
  *((_OWORD *)this + 35) = v12;
  if (v13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    if (*((void *)&v20 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
    }
  }
LABEL_31:
  quasar::QsrTextSymbolTable::init(*((const std::string **)this + 72), (quasar::OnlinePrefixBeamSearchDecoder *)((char *)this + 32), 0, *((unsigned __int8 *)this + 441), 1);
  return quasar::EndPointDecoderConfig::init((uint64_t)this + 752);
}

void sub_1B2402DB0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlinePrefixBeamSearchDecoder::runImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 486))
  {
    quasar::rescoring::AdapterModel::getFeaturizer(*(quasar::rescoring::AdapterModel **)(*(void *)a3 + 608));
    quasar::EndPointer::createEndPointer((quasar::EndPointer *)(a1 + 752), *(const kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig **)(a1 + 424), (const quasar::EndPointModelConfig *)*(unsigned __int8 *)(a1 + 896), &v8);
  }
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = 0xFFFFFFFFLL;
  do
  {
    char v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 8))(v3, v4);
    uint64_t v4 = (v4 + 1);
  }
  while ((v5 & 1) == 0);
  return 1;
}

void sub_1B2406848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](a40);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x340]);
  STACK[0x400] = (unint64_t)&STACK[0x210];
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x400]);
  uint64_t v41 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v41;
    operator delete(v41);
  }
  std::unique_ptr<std::vector<std::string>>::reset[abi:ne180100]((void ***)&STACK[0x250], 0);
  unint64_t v42 = STACK[0x258];
  STACK[0x258] = 0;
  if (v42) {
    (*(void (**)(unint64_t))(*(void *)v42 + 8))(v42);
  }
  STACK[0x400] = (unint64_t)&STACK[0x260];
  std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x400]);
  float v43 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v43;
    operator delete(v43);
  }
  std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::~__hash_table((uint64_t)&STACK[0x290]);
  std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::~__hash_table((uint64_t)&STACK[0x2C0]);
  kaldi::quasar::Score::~Score((kaldi::quasar::Score *)&STACK[0x2E8]);
  unint64_t v44 = STACK[0x338];
  STACK[0x338] = 0;
  if (v44) {
    (*(void (**)(unint64_t))(*(void *)v44 + 16))(v44);
  }
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::vector<int> const,kaldi::quasar::Score>::~pair(uint64_t a1)
{
  id v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

void kaldi::quasar::Score::~Score(kaldi::quasar::Score *this)
{
  id v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t std::vector<kaldi::CuVector<float>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v4, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    char v15 = v14;
    uint64_t v16 = &v14[32 * v10];
    uint64_t v18 = &v14[32 * v13];
    kaldi::CuVector<float>::CuVector(v16, a2);
    uint64_t v17 = v16 + 32;
    std::vector<kaldi::CuVector<float>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<kaldi::CuVector<float>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = (uint64_t)kaldi::CuVector<float>::CuVector(*(void **)(v4 - 8), a2);
    uint64_t v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_1B2407254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::Score::updateLmCache(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  kaldi::CuMatrix<float>::CuMatrix(v16, 1, 1, 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix(v15, 1, 1, 1, 0, 0);
  *(float *)v15[1].i32[0] = (float)a2;
  uint64_t v8 = operator new(0x48uLL);
  v8[1] = 0;
  std::string v8[2] = 0;
  *uint64_t v8 = &unk_1F0A5F648;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  void v8[3] = &unk_1F0A51768;
  *((unsigned char *)v8 + 64) = 0;
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 24) = v8 + 3;
  *(void *)(a1 + 32) = v8;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = *(void **)(a1 + 40);
  if (v10) {
    kaldi::quasar::CEDecoder::SetStates(*a3, v10);
  }
  kaldi::quasar::CEDecoder::Compute(*a3, (uint64_t)v15, (uint64_t)v16, a4, 0, 0, *(int32x2_t **)(a1 + 24));
  kaldi::quasar::CEDecoder::GetStates((kaldi::quasar::CEDecoder *)*a3, &v14);
  long long v11 = v14;
  long long v14 = 0uLL;
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v11;
  if (v12)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    if (*((void *)&v14 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  *(unsigned char *)(a1 + 56) = 1;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v15);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v16);
}

void sub_1B24073D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

float kaldi::quasar::Score::merge(kaldi::quasar::Score *this, float a2, float a3)
{
  float v3 = a3;
  if (*((unsigned char *)this + 8))
  {
    if (a2 >= a3) {
      return a2;
    }
  }
  else if (*(float *)&kaldi::quasar::Score::merge(float,float)const::num_min < a2)
  {
    if (*(float *)&kaldi::quasar::Score::merge(float,float)const::num_min >= a3)
    {
      return a2;
    }
    else
    {
      if (a2 >= a3) {
        float v4 = a2;
      }
      else {
        float v4 = a3;
      }
      float v5 = expf(a2 - v4);
      float v6 = expf(v3 - v4);
      return v4 + logf(v5 + v6);
    }
  }
  return v3;
}

void kaldi::quasar::Score::updateLmScore(uint64_t a1, uint64_t a2, int a3, float a4)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4) {
    *(float *)(a1 + 16) = *(float *)(a2 + 16) + (float)(*(float *)(*(void *)(v4 + 8) + 4 * a3) * a4);
  }
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 88 * a2;
    while (v3 != v7)
    {
      v3 -= 88;
      std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

uint64_t kaldi::quasar::Score::scoreString(kaldi::quasar::Score *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  uint64_t v2 = v12[0];
  *(void *)((char *)&v12[3] + *(void *)(v12[0] - 24)) = 8;
  *(void *)((char *)&v12[2] + *(void *)(v2 - 24)) = 5;
  kaldi::quasar::Score::merge(this, *((float *)this + 1), *(float *)this);
  std::ostream::operator<<();
  if (*((float *)this + 3) > 0.0)
  {
    uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" = ", 3);
    uint64_t v4 = *v3;
    *(uint64_t *)((char *)v3 + *(void *)(*v3 - 24) + 24) = 8;
    *(uint64_t *)((char *)v3 + *(void *)(v4 - 24) + 16) = 5;
    kaldi::quasar::Score::merge(this, *((float *)this + 1), *(float *)this);
    BOOL v5 = (void *)std::ostream::operator<<();
    unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" + ", 3);
    uint64_t v7 = *v6;
    *(uint64_t *)((char *)v6 + *(void *)(*v6 - 24) + 24) = 8;
    *(uint64_t *)((char *)v6 + *(void *)(v7 - 24) + 16) = 5;
    uint64_t v8 = (void *)std::ostream::operator<<();
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" * ", 3);
    uint64_t v10 = *v9;
    *(uint64_t *)((char *)v9 + *(void *)(*v9 - 24) + 24) = 3;
    *(uint64_t *)((char *)v9 + *(void *)(v10 - 24) + 16) = 2;
    std::ostream::operator<<();
  }
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v12[1] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v14);
}

void sub_1B240789C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::shared_ptr<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,std::shared_ptr<std::vector<quasar::Token>>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIN6quasar29OnlinePrefixBeamSearchDecoder13ilabelMapper_MUliE_ENS_9allocatorIS4_EEFiiEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIN6quasar29OnlinePrefixBeamSearchDecoder13ilabelMapper_MUliE_ENS_9allocatorIS4_EEFiiEE7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F0A1CB10;
  return result;
}

void _ZNKSt3__110__function6__funcIN6quasar29OnlinePrefixBeamSearchDecoder13ilabelMapper_MUliE_ENS_9allocatorIS4_EEFiiEE7__cloneEPNS0_6__baseIS7_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A1CB10;
}

uint64_t _ZNSt3__110__function6__funcIN6quasar29OnlinePrefixBeamSearchDecoder13ilabelMapper_MUliE_ENS_9allocatorIS4_EEFiiEEclEOi(uint64_t a1, _DWORD *a2)
{
  return (*a2 + 1);
}

uint64_t _ZNKSt3__110__function6__funcIN6quasar29OnlinePrefixBeamSearchDecoder13ilabelMapper_MUliE_ENS_9allocatorIS4_EEFiiEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIN6quasar29OnlinePrefixBeamSearchDecoder13ilabelMapper_MUliE_E))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIN6quasar29OnlinePrefixBeamSearchDecoder13ilabelMapper_MUliE_ENS_9allocatorIS4_EEFiiEE11target_typeEv()
{
  return &_ZTIN6quasar29OnlinePrefixBeamSearchDecoder13ilabelMapper_MUliE_E;
}

void std::__function::__func<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_0>,int ()(int)>::~__func()
{
}

void *std::__function::__func<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_0>,int ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F0A1D038;
  return result;
}

void std::__function::__func<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_0>,int ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A1D038;
}

uint64_t std::__function::__func<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_0>,int ()(int)>::operator()(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

uint64_t std::__function::__func<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_0>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_0>,int ()(int)>::target_type()
{
}

void std::__function::__func<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_1>,int ()(int)>::~__func()
{
}

void *std::__function::__func<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_1>,int ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F0A1D090;
  return result;
}

void std::__function::__func<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_1>,int ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A1D090;
}

uint64_t std::__function::__func<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_1>,int ()(int)>::operator()(uint64_t a1, _DWORD *a2)
{
  return (*a2 + 1);
}

uint64_t std::__function::__func<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_1>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlinePrefixBeamSearchDecoder::finishInit(void)::$_1>,int ()(int)>::target_type()
{
}

uint64_t std::unordered_map<std::vector<int>,kaldi::quasar::Score,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,std::allocator<std::pair<std::vector<int> const,kaldi::quasar::Score>>>::unordered_map(uint64_t a1, int **a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 88 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__emplace_unique_key_args<std::vector<int>,std::pair<std::vector<int> const,kaldi::quasar::Score> const&>(a1, a2, (uint64_t)a2);
      a2 += 11;
      v5 -= 88;
    }
    while (v5);
  }
  return a1;
}

void sub_1B2407BD0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__emplace_unique_key_args<std::vector<int>,std::pair<std::vector<int> const,kaldi::quasar::Score> const&>(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v7 = *a2;
  unint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = *a2;
    do
    {
      uint64_t v10 = *v9++;
      unint64_t v8 = v10 + 7853 * v8;
    }
    while (v9 != v6);
  }
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v11) {
        unint64_t v3 = v8 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v8;
    }
    uint64_t v14 = *(void **)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      char v15 = (void *)*v14;
      if (*v14)
      {
        size_t v16 = (char *)v6 - (char *)v7;
        do
        {
          unint64_t v17 = v15[1];
          if (v17 == v8)
          {
            uint64_t v18 = (const void *)v15[2];
            if (v15[3] - (void)v18 == v16 && !memcmp(v18, v7, v16)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v17 >= v11) {
                v17 %= v11;
              }
            }
            else
            {
              v17 &= v11 - 1;
            }
            if (v17 != v3) {
              break;
            }
          }
          char v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__construct_node_hash<std::pair<std::vector<int> const,kaldi::quasar::Score> const&>(a1, v8, a3, (uint64_t)v28);
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11) {
        unint64_t v3 = v8 % v11;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v8;
    }
  }
  long long v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *(void *)v28[0] = *v25;
    *long long v25 = v28[0];
  }
  else
  {
    *(void *)v28[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v28[0])
    {
      unint64_t v26 = *(void *)(*(void *)v28[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11) {
          v26 %= v11;
        }
      }
      else
      {
        v26 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v28[0];
    }
  }
  char v15 = (void *)v28[0];
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return v15;
}

void sub_1B2407E70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__construct_node_hash<std::pair<std::vector<int> const,kaldi::quasar::Score> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x68uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = std::pair<std::vector<int> const,kaldi::quasar::Score>::pair[abi:ne180100]((uint64_t)(v8 + 2), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B2407EE8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::vector<int> const,kaldi::quasar::Score>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  long long v4 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::vector<int> const,kaldi::quasar::Score>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::vector<int> const,kaldi::quasar::Score>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  long long v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::vector<int> const,kaldi::quasar::Score>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(std::__shared_weak_count **)(a2 + 72);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 56);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v5;
    operator delete(v5);
  }
}

void *std::__hash_table<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(uint64_t a1, int **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = *a2;
    do
    {
      uint64_t v10 = *v9++;
      unint64_t v8 = v10 + 7853 * v8;
    }
    while (v9 != v6);
  }
  unint64_t v11 = *(void *)(a1 + 8);
  if (!v11) {
    goto LABEL_26;
  }
  uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  unint64_t v13 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v4 = v8;
    if (v8 >= v11) {
      unint64_t v4 = v8 % v11;
    }
  }
  else
  {
    unint64_t v4 = (v11 - 1) & v8;
  }
  uint64_t v14 = *(void **)(*(void *)a1 + 8 * v4);
  if (!v14) {
    goto LABEL_26;
  }
  char v15 = (void *)*v14;
  if (!*v14) {
    goto LABEL_26;
  }
  long long v28 = a4;
  size_t v16 = (char *)v6 - (char *)v7;
  do
  {
    unint64_t v17 = v15[1];
    if (v17 == v8)
    {
      uint64_t v18 = (const void *)v15[2];
      if (v15[3] - (void)v18 == v16 && !memcmp(v18, v7, v16)) {
        return v15;
      }
      goto LABEL_24;
    }
    if (v13 > 1)
    {
      if (v17 >= v11) {
        v17 %= v11;
      }
    }
    else
    {
      v17 &= v11 - 1;
    }
    if (v17 != v4) {
      break;
    }
LABEL_24:
    char v15 = (void *)*v15;
  }
  while (v15);
  a4 = v28;
LABEL_26:
  std::__hash_table<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(a1, v8, a4, (uint64_t)v29);
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11) {
        unint64_t v4 = v8 % v11;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v8;
    }
  }
  long long v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)v29[0] = *v25;
    *long long v25 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v26 = *(void *)(*(void *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11) {
          v26 %= v11;
        }
      }
      else
      {
        v26 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v29[0];
    }
  }
  char v15 = (void *)v29[0];
  v29[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return v15;
}

void sub_1B2408450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  uint64_t v9 = *a3;
  void v8[3] = 0;
  void v8[4] = 0;
  std::string v8[2] = 0;
  uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8 + 2, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 2);
  v8[5] = 0;
  v8[6] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B24084E4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::vector<int> const,std::shared_ptr<void>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::vector<int> const,std::shared_ptr<void>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

void *std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int>&&>,std::tuple<>>(uint64_t a1, int **a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 == v7)
  {
    unint64_t v9 = 0;
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v10 = *a2;
    do
    {
      uint64_t v11 = *v10++;
      unint64_t v9 = v11 + 7853 * v9;
    }
    while (v10 != v7);
  }
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v12) {
        unint64_t v4 = v9 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v9;
    }
    char v15 = *(void **)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      size_t v16 = (void *)*v15;
      if (*v15)
      {
        size_t v17 = (char *)v7 - (char *)v8;
        do
        {
          unint64_t v18 = v16[1];
          if (v18 == v9)
          {
            float v19 = (const void *)v16[2];
            if (v16[3] - (void)v19 == v17 && !memcmp(v19, v8, v17)) {
              return v16;
            }
          }
          else
          {
            if (v14 > 1)
            {
              if (v18 >= v12) {
                v18 %= v12;
              }
            }
            else
            {
              v18 &= v12 - 1;
            }
            if (v18 != v4) {
              break;
            }
          }
          size_t v16 = (void *)*v16;
        }
        while (v16);
      }
    }
  }
  float v20 = (char *)operator new(0x68uLL);
  v31[0] = v20;
  v31[1] = a1 + 16;
  *(void *)float v20 = 0;
  *((void *)v20 + 1) = v9;
  uint64_t v21 = *a4;
  *((void *)v20 + 3) = 0;
  *((void *)v20 + 4) = 0;
  *((void *)v20 + 2) = 0;
  *((_OWORD *)v20 + 1) = *(_OWORD *)v21;
  *((void *)v20 + 4) = *(void *)(v21 + 16);
  *(void *)(v21 + 8) = 0;
  *(void *)(v21 + 16) = 0;
  *(void *)uint64_t v21 = 0;
  *((_OWORD *)v20 + 4) = 0u;
  *((_OWORD *)v20 + 5) = 0u;
  *((void *)v20 + 12) = 0;
  *((_OWORD *)v20 + 3) = 0u;
  *((void *)v20 + 5) = 0x80000000800000;
  *(_OWORD *)(v20 + 68) = 0u;
  *(_OWORD *)(v20 + 81) = 0u;
  *(_OWORD *)(v20 + 52) = 0u;
  char v32 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v12 || (float)(v23 * (float)v12) < v22)
  {
    BOOL v24 = 1;
    if (v12 >= 3) {
      BOOL v24 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v12);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v27);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v9 >= v12) {
        unint64_t v4 = v9 % v12;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v9;
    }
  }
  long long v28 = *(void **)(*(void *)a1 + 8 * v4);
  if (v28)
  {
    *(void *)v31[0] = *v28;
    void *v28 = v31[0];
  }
  else
  {
    *(void *)v31[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v31[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v31[0])
    {
      unint64_t v29 = *(void *)(*(void *)v31[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v29 >= v12) {
          v29 %= v12;
        }
      }
      else
      {
        v29 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v29) = v31[0];
    }
  }
  size_t v16 = (void *)v31[0];
  v31[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>>>>::reset[abi:ne180100]((uint64_t)v31, 0);
  return v16;
}

void sub_1B240887C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::OnlinePrefixBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2 &,std::__wrap_iter<std::pair<int,float> *>>(uint64_t result, uint64_t a2, float *a3)
{
  if (a2 >= 2)
  {
    uint64_t v3 = (uint64_t)a3 - result;
    int64_t v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 3)
    {
      uint64_t v5 = v3 >> 2;
      uint64_t v6 = (v3 >> 2) | 1;
      uint64_t v7 = (float *)(result + 8 * v6);
      uint64_t v8 = v5 + 2;
      if (v8 < a2 && v7[1] > v7[3])
      {
        v7 += 2;
        uint64_t v6 = v8;
      }
      float v9 = v7[1];
      float v10 = a3[1];
      if (v9 <= v10)
      {
        float v11 = *a3;
        do
        {
          unint64_t v12 = a3;
          a3 = v7;
          *unint64_t v12 = *v7;
          v12[1] = v9;
          if (v4 < v6) {
            break;
          }
          uint64_t v13 = 2 * v6;
          uint64_t v6 = (2 * v6) | 1;
          uint64_t v7 = (float *)(result + 8 * v6);
          uint64_t v14 = v13 + 2;
          if (v14 < a2 && v7[1] > v7[3])
          {
            v7 += 2;
            uint64_t v6 = v14;
          }
          float v9 = v7[1];
        }
        while (v9 <= v10);
        *a3 = v11;
        a3[1] = v10;
      }
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(uint64_t a1, int **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    float v9 = *a2;
    do
    {
      uint64_t v10 = *v9++;
      unint64_t v8 = v10 + 7853 * v8;
    }
    while (v9 != v6);
  }
  unint64_t v11 = *(void *)(a1 + 8);
  if (!v11) {
    goto LABEL_26;
  }
  uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  unint64_t v13 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v4 = v8;
    if (v8 >= v11) {
      unint64_t v4 = v8 % v11;
    }
  }
  else
  {
    unint64_t v4 = (v11 - 1) & v8;
  }
  uint64_t v14 = *(void **)(*(void *)a1 + 8 * v4);
  if (!v14) {
    goto LABEL_26;
  }
  char v15 = (void *)*v14;
  if (!*v14) {
    goto LABEL_26;
  }
  long long v28 = a4;
  size_t v16 = (char *)v6 - (char *)v7;
  do
  {
    unint64_t v17 = v15[1];
    if (v17 == v8)
    {
      unint64_t v18 = (const void *)v15[2];
      if (v15[3] - (void)v18 == v16 && !memcmp(v18, v7, v16)) {
        return v15;
      }
      goto LABEL_24;
    }
    if (v13 > 1)
    {
      if (v17 >= v11) {
        v17 %= v11;
      }
    }
    else
    {
      v17 &= v11 - 1;
    }
    if (v17 != v4) {
      break;
    }
LABEL_24:
    char v15 = (void *)*v15;
  }
  while (v15);
  a4 = v28;
LABEL_26:
  std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(a1, v8, a4, (uint64_t)v29);
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11) {
        unint64_t v4 = v8 % v11;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v8;
    }
  }
  unint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)v29[0] = *v25;
    *unint64_t v25 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v26 = *(void *)(*(void *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11) {
          v26 %= v11;
        }
      }
      else
      {
        v26 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v29[0];
    }
  }
  char v15 = (void *)v29[0];
  v29[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return v15;
}

void sub_1B2408BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x68uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t v9 = *a3;
  *((void *)v8 + 3) = 0;
  *((void *)v8 + 4) = 0;
  *((void *)v8 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v8 + 2, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 2);
  double result = 0.0;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((void *)v8 + 12) = 0;
  *((void *)v8 + 5) = 0x80000000800000;
  *(_OWORD *)(v8 + 52) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_OWORD *)(v8 + 81) = 0u;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B2408CA4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::__insert_with_size[abi:ne180100]<std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *> *>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *> *>>>(uint64_t *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      unint64_t v20 = a5 + 1;
      BOOL v21 = a3;
      do
      {
        BOOL v21 = (void *)*v21;
        --v20;
      }
      while (v20 > 1);
      uint64_t v22 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - a2) >> 3);
      uint64_t v23 = a5;
      if (v22 < a5)
      {
        if ((uint64_t)(v12 - a2) < 1)
        {
          BOOL v21 = a3;
        }
        else
        {
          unint64_t v24 = v22 + 1;
          BOOL v21 = a3;
          do
          {
            BOOL v21 = (void *)*v21;
            --v24;
          }
          while (v24 > 1);
        }
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *> *>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *> *>>,std::pair<std::vector<int>,kaldi::quasar::Score>*>(v9, v21, a4, *(void *)(v9 - 8));
        uint64_t v23 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - v5) >> 3);
      }
      if (v23 >= 1)
      {
        std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::__move_range((uint64_t)a1, v5, v12, v5 + 88 * a5);
        if (v21 != v7)
        {
          uint64_t v28 = v5;
          do
          {
            std::pair<std::vector<int>,kaldi::quasar::Score>::operator=[abi:ne180100]<std::vector<int> const,kaldi::quasar::Score,(void *)0>(v28, (uint64_t)(v7 + 2));
            uint64_t v7 = (void *)*v7;
            v28 += 88;
          }
          while (v7 != v21);
        }
      }
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x2E8BA2E8BA2E8BALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = 0x2E8BA2E8BA2E8BA3 * ((a2 - v13) >> 3);
      unint64_t v16 = 0x2E8BA2E8BA2E8BA3 * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x1745D1745D1745DLL) {
        unint64_t v18 = 0x2E8BA2E8BA2E8BALL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v33 = v9;
      if (v18) {
        float v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>>(v9, v18);
      }
      else {
        float v19 = 0;
      }
      unint64_t v25 = &v19[88 * v15];
      v30[0] = v19;
      v30[1] = v25;
      long long v31 = v25;
      char v32 = &v19[88 * v18];
      uint64_t v26 = 88 * a5;
      size_t v27 = &v25[88 * a5];
      do
      {
        std::pair<std::vector<int> const,kaldi::quasar::Score>::pair[abi:ne180100]((uint64_t)v25, (uint64_t)(v7 + 2));
        v25 += 88;
        uint64_t v7 = (void *)*v7;
        v26 -= 88;
      }
      while (v26);
      long long v31 = v27;
      uint64_t v5 = std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::__swap_out_circular_buffer(a1, v30, v5);
      std::__split_buffer<std::pair<std::vector<int>,kaldi::quasar::Score>>::~__split_buffer(v30);
    }
  }
  return v5;
}

void sub_1B2408EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(void *)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0;
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(void *)(v8 + 16) = *(void *)(v9 + 16);
      *(void *)unint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      long long v10 = *(_OWORD *)(v9 + 24);
      *(void *)(v8 + 40) = *(void *)(v9 + 40);
      *(_OWORD *)(v8 + 24) = v10;
      *(_OWORD *)(v8 + 48) = *(_OWORD *)(v9 + 48);
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_OWORD *)(v8 + 64) = *(_OWORD *)(v9 + 64);
      *(void *)(v9 + 64) = 0;
      *(void *)(v9 + 72) = 0;
      *(unsigned char *)(v8 + 80) = *(unsigned char *)(v9 + 80);
      v8 += 88;
      v9 += 88;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::pair<std::vector<int>,kaldi::quasar::Score> *,std::pair<std::vector<int>,kaldi::quasar::Score> *,std::pair<std::vector<int>,kaldi::quasar::Score> *,0>(a2, v7, v6);
}

uint64_t std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::pair<std::vector<int>,kaldi::quasar::Score>*,std::pair<std::vector<int>,kaldi::quasar::Score>*,std::pair<std::vector<int>,kaldi::quasar::Score>*>(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *> *>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *> *>>,std::pair<std::vector<int>,kaldi::quasar::Score>*>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  std::string v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::pair<std::vector<int> const,kaldi::quasar::Score>::pair[abi:ne180100](v4, (uint64_t)(v6 + 2));
      uint64_t v6 = (void *)*v6;
      uint64_t v4 = v11 + 88;
      v11 += 88;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::pair<std::vector<int>,kaldi::quasar::Score>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B24090F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::pair<std::vector<int>,kaldi::quasar::Score>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::pair<std::vector<int>,kaldi::quasar::Score>*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::pair<std::vector<int>,kaldi::quasar::Score>*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 88;
      std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::pair<std::vector<int>,kaldi::quasar::Score> *,std::pair<std::vector<int>,kaldi::quasar::Score> *,std::pair<std::vector<int>,kaldi::quasar::Score> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      v6 -= 88;
      a3 -= 88;
      std::pair<std::vector<int>,kaldi::quasar::Score>::operator=[abi:ne180100](a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::pair<std::vector<int>,kaldi::quasar::Score>::operator=[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::vector<int>::__move_assign(a1, (__n128 *)a2);
  long long v4 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  long long v7 = *(_OWORD *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = v7;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

uint64_t std::pair<std::vector<int>,kaldi::quasar::Score>::operator=[abi:ne180100]<std::vector<int> const,kaldi::quasar::Score,(void *)0>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a1, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  long long v4 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 56);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  long long v7 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 72);
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v8;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 88) = 0;
      *(void *)(v7 - 80) = 0;
      *(void *)(v7 - 72) = 0;
      long long v8 = *(_OWORD *)(a3 - 88);
      a3 -= 88;
      *(_OWORD *)(v7 - 88) = v8;
      *(void *)(v7 - 72) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      long long v9 = *(_OWORD *)(a3 + 24);
      *(void *)(v7 - 48) = *(void *)(a3 + 40);
      *(_OWORD *)(v7 - 64) = v9;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 + 48);
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 56) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 64);
      *(void *)(a3 + 64) = 0;
      *(void *)(a3 + 72) = 0;
      *(unsigned char *)(v7 - 8) = *(unsigned char *)(a3 + 80);
      uint64_t v7 = *((void *)&v15 + 1) - 88;
      *((void *)&v15 + 1) -= 88;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::pair<std::vector<int>,kaldi::quasar::Score>*,std::pair<std::vector<int>,kaldi::quasar::Score>*,std::pair<std::vector<int>,kaldi::quasar::Score>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  void v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
      *(void *)(v4 + 16) = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      long long v5 = *(_OWORD *)(a2 + 24);
      *(void *)(v4 + 40) = *(void *)(a2 + 40);
      *(_OWORD *)(v4 + 24) = v5;
      *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 48);
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 56) = 0;
      *(_OWORD *)(v4 + 64) = *(_OWORD *)(a2 + 64);
      *(void *)(a2 + 64) = 0;
      *(void *)(a2 + 72) = 0;
      *(unsigned char *)(v4 + 80) = *(unsigned char *)(a2 + 80);
      v4 += 88;
      a2 += 88;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::pair<std::vector<int>,kaldi::quasar::Score>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>::destroy[abi:ne180100](v3, v1);
      v1 += 88;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::pair<std::vector<int>,kaldi::quasar::Score>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<std::vector<int>,kaldi::quasar::Score>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 88;
    std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>::destroy[abi:ne180100](v4, i - 88);
  }
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::OnlinePrefixBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4 &,std::__wrap_iter<std::pair<std::vector<int>,kaldi::quasar::Score> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2 - 2;
  if (a2 >= 2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = v3 >> 1;
    if ((uint64_t)(v3 >> 1) >= 0x2E8BA2E8BA2E8BA3 * ((a3 - a1) >> 3))
    {
      uint64_t v8 = (0x5D1745D1745D1746 * ((a3 - a1) >> 3)) | 1;
      uint64_t v9 = (float *)(a1 + 88 * v8);
      uint64_t v10 = 0x5D1745D1745D1746 * ((a3 - a1) >> 3) + 2;
      if (v10 < a2)
      {
        float v11 = kaldi::quasar::Score::merge((kaldi::quasar::Score *)(a1 + 88 * v8 + 24), *(float *)(a1 + 88 * v8 + 28), *(float *)(a1 + 88 * v8 + 24))+ (float)(*(float *)(a1 + 88 * v8 + 36) * *(float *)(a1 + 88 * v8 + 40));
        if (v11 > (float)(kaldi::quasar::Score::merge((kaldi::quasar::Score *)(v9 + 28), v9[29], v9[28])
                         + (float)(v9[31] * v9[32])))
        {
          v9 += 22;
          uint64_t v8 = v10;
        }
      }
      float v12 = kaldi::quasar::Score::merge((kaldi::quasar::Score *)(v9 + 6), v9[7], v9[6]) + (float)(v9[9] * v9[10]);
      if (v12 <= (float)(kaldi::quasar::Score::merge((kaldi::quasar::Score *)(v4 + 24), *(float *)(v4 + 28), *(float *)(v4 + 24))+ (float)(*(float *)(v4 + 36) * *(float *)(v4 + 40))))
      {
        *(_OWORD *)std::string __p = *(_OWORD *)v4;
        uint64_t v28 = *(void *)(v4 + 16);
        *(void *)uint64_t v4 = 0;
        *(void *)(v4 + 8) = 0;
        *(void *)(v4 + 16) = 0;
        long long v13 = *(_OWORD *)(v4 + 24);
        uint64_t v14 = *(void *)(v4 + 40);
        long long v15 = *(_OWORD *)(v4 + 64);
        long long v31 = *(_OWORD *)(v4 + 48);
        *(void *)(v4 + 48) = 0;
        *(void *)(v4 + 56) = 0;
        long long v32 = v15;
        uint64_t v30 = v14;
        *(void *)(v4 + 64) = 0;
        *(void *)(v4 + 72) = 0;
        char v33 = *(unsigned char *)(v4 + 80);
        long long v29 = v13;
        do
        {
          uint64_t v16 = v4;
          uint64_t v4 = (uint64_t)v9;
          std::pair<std::vector<int>,kaldi::quasar::Score>::operator=[abi:ne180100](v16, (uint64_t)v9);
          if (v6 < v8) {
            break;
          }
          uint64_t v17 = (2 * v8) | 1;
          uint64_t v9 = (float *)(a1 + 88 * v17);
          uint64_t v18 = 2 * v8 + 2;
          if (v18 < a2)
          {
            float v19 = kaldi::quasar::Score::merge((kaldi::quasar::Score *)(a1 + 88 * v17 + 24), *(float *)(a1 + 88 * v17 + 28), *(float *)(a1 + 88 * v17 + 24));
            uint64_t v20 = a1 + 88 * v17;
            float v21 = *(float *)(v20 + 36);
            float v22 = *(float *)(v20 + 40);
            if ((float)(v19 + (float)(v21 * v22)) > (float)(kaldi::quasar::Score::merge((kaldi::quasar::Score *)(v9 + 28), v9[29], v9[28])+ (float)(v9[31] * v9[32])))
            {
              v9 += 22;
              uint64_t v17 = v18;
            }
          }
          float v23 = kaldi::quasar::Score::merge((kaldi::quasar::Score *)(v9 + 6), v9[7], v9[6]);
          float v24 = v9[9];
          float v25 = v9[10];
          float v26 = kaldi::quasar::Score::merge((kaldi::quasar::Score *)&v29, *((float *)&v29 + 1), *(float *)&v29);
          uint64_t v8 = v17;
        }
        while ((float)(v23 + (float)(v24 * v25)) <= (float)(v26 + (float)(*((float *)&v29 + 3) * *(float *)&v30)));
        std::pair<std::vector<int>,kaldi::quasar::Score>::operator=[abi:ne180100](v4, (uint64_t)__p);
        if (*((void *)&v32 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
        }
        if (*((void *)&v31 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_1B2409808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::pair<std::vector<int>,kaldi::quasar::Score>::swap[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  *a2 = v4;
  uint64_t v5 = a1[1];
  a1[1] = a2[1];
  a2[1] = v5;
  uint64_t v6 = a1[2];
  a1[2] = a2[2];
  a2[2] = v6;
  uint64_t v18 = a1[5];
  long long v15 = *((_OWORD *)a1 + 3);
  long long v16 = *((_OWORD *)a1 + 4);
  long long v17 = *(_OWORD *)(a1 + 3);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  char v7 = *((unsigned char *)a1 + 80);
  long long v8 = *(_OWORD *)(a2 + 3);
  a1[5] = a2[5];
  *(_OWORD *)(a1 + 3) = v8;
  long long v9 = *((_OWORD *)a2 + 3);
  a2[6] = 0;
  a2[7] = 0;
  uint64_t v10 = (std::__shared_weak_count *)a1[7];
  *((_OWORD *)a1 + 3) = v9;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  long long v11 = *((_OWORD *)a2 + 4);
  a2[8] = 0;
  a2[9] = 0;
  float v12 = (std::__shared_weak_count *)a1[9];
  *((_OWORD *)a1 + 4) = v11;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *((unsigned char *)a1 + 80) = *((unsigned char *)a2 + 80);
  *(_OWORD *)(a2 + 3) = v17;
  a2[5] = v18;
  long long v13 = (std::__shared_weak_count *)a2[7];
  *((_OWORD *)a2 + 3) = v15;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)a2[9];
  *((_OWORD *)a2 + 4) = v16;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  *((unsigned char *)a2 + 80) = v7;
}

void **std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  double result = (void **)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = (uint64_t)*(result - 1);
  if (0x2E8BA2E8BA2E8BA3 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 88 * a2;
      do
      {
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(void *)(v7 + 80) = 0;
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(void *)(v7 + 24) = 0x80000000800000;
        *(_OWORD *)(v7 + 36) = 0uLL;
        *(_OWORD *)(v7 + 52) = 0uLL;
        *(_OWORD *)(v7 + 65) = 0uLL;
        v7 += 88;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x2E8BA2E8BA2E8BALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x1745D1745D1745DLL) {
      unint64_t v11 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v11 = v9;
    }
    v16[4] = result;
    if (v11) {
      float v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>>((uint64_t)result, v11);
    }
    else {
      float v12 = 0;
    }
    uint64_t v14 = &v12[88 * v8];
    v16[0] = v12;
    v16[1] = v14;
    void v16[3] = &v12[88 * v11];
    long long v15 = &v14[88 * a2];
    do
    {
      *((_OWORD *)v14 + 2) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *((_OWORD *)v14 + 4) = 0uLL;
      *((void *)v14 + 10) = 0;
      *(_OWORD *)uint64_t v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((void *)v14 + 3) = 0x80000000800000;
      *(_OWORD *)(v14 + 36) = 0uLL;
      *(_OWORD *)(v14 + 52) = 0uLL;
      *(_OWORD *)(v14 + 65) = 0uLL;
      v14 += 88;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<std::pair<std::vector<int>,kaldi::quasar::Score>>::~__split_buffer(v16);
  }
  return result;
}

void sub_1B2409ABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,kaldi::quasar::Score>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>,std::reverse_iterator<std::pair<std::vector<int>,kaldi::quasar::Score>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__shared_ptr_emplace<quasar::CTCAlignedDecoderContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A1D448;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::CTCAlignedDecoderContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A1D448;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::CTCAlignedDecoderContext>::__on_zero_shared(uint64_t a1)
{
  std::allocator<quasar::CTCAlignedDecoderContext>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

uint64_t std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::vector<int> const,std::vector<quasar::Token>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::allocator<quasar::CTCAlignedDecoderContext>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>>>::~__hash_table(a2 + 64);
  std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::~__hash_table(a2 + 24);
  unint64_t v3 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v3;
    operator delete(v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::vector<int> const,std::shared_ptr<void>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__function::__value_func<int ()(int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::allocate_shared[abi:ne180100]<kaldi::quasar::Score,std::allocator<kaldi::quasar::Score>,kaldi::quasar::Score const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x58uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::quasar::Score>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::Score const&,std::allocator<kaldi::quasar::Score>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1B2409E78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::Score>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::Score const&,std::allocator<kaldi::quasar::Score>,0>(uint64_t result, long long *a2)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = &unk_1F0A1D368;
  long long v2 = *a2;
  *(void *)(result + 40) = *((void *)a2 + 2);
  *(_OWORD *)(result + 24) = v2;
  uint64_t v3 = *((void *)a2 + 4);
  *(void *)(result + 48) = *((void *)a2 + 3);
  *(void *)(result + 56) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *((void *)a2 + 6);
  *(void *)(result + 64) = *((void *)a2 + 5);
  *(void *)(result + 72) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(result + 80) = *((unsigned char *)a2 + 56);
  return result;
}

void std::__shared_ptr_emplace<kaldi::quasar::Score>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A1D368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::Score>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A1D368;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::quasar::Score>::__on_zero_shared(uint64_t a1)
{
  std::allocator<kaldi::quasar::Score>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<kaldi::quasar::Score>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 48);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 32);
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t quasar::NotchDetector::dumpVector(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v11[19] = *MEMORY[0x1E4F143B8];
  std::ofstream::basic_ofstream(&v9);
  uint64_t v5 = *a3;
  for (uint64_t i = a3[1]; v5 != i; v5 += 8)
  {
    uint64_t v6 = (void *)std::ostream::operator<<();
    char v8 = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v8, 1);
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)&v10[*(void *)(v9 - 24) - 8], *(_DWORD *)&v10[*(void *)(v9 - 24) + 24] | 4);
  }
  uint64_t v9 = *MEMORY[0x1E4FBA400];
  *(void *)&v10[*(void *)(v9 - 24) - 8] = *(void *)(MEMORY[0x1E4FBA400] + 24);
  MEMORY[0x1B3EA7CF0](v10);
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](v11);
}

void sub_1B240A178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void quasar::NotchDetector::calcCosineWindow(quasar::NotchDetector *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::string __p = 0;
  float v21 = 0;
  float v22 = 0;
  std::vector<double>::reserve(&__p, a2);
  if (a2 >= 1)
  {
    int v6 = 0;
    uint64_t v7 = v21;
    do
    {
      long double v8 = cos((double)v6 / (double)(a2 - 1) * 6.28318531);
      long double v9 = pow(1.0 - v8, *((long double *)this + 4));
      double v10 = v9 + v9;
      if (v7 >= v22)
      {
        float v12 = (double *)__p;
        uint64_t v13 = ((char *)v7 - (unsigned char *)__p) >> 3;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = (char *)v22 - (unsigned char *)__p;
        if (((char *)v22 - (unsigned char *)__p) >> 2 > v14) {
          unint64_t v14 = v15 >> 2;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          long long v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v22, v16);
          float v12 = (double *)__p;
          uint64_t v7 = v21;
        }
        else
        {
          long long v17 = 0;
        }
        uint64_t v18 = (double *)&v17[8 * v13];
        *uint64_t v18 = v10;
        unint64_t v11 = v18 + 1;
        while (v7 != v12)
        {
          uint64_t v19 = *((void *)v7-- - 1);
          *((void *)v18-- - 1) = v19;
        }
        std::string __p = v18;
        float v21 = v11;
        float v22 = (double *)&v17[8 * v16];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        double *v7 = v10;
        unint64_t v11 = v7 + 1;
      }
      float v21 = v11;
      ++v6;
      uint64_t v7 = v11;
    }
    while (v6 != a2);
  }
  quasar::NotchDetector::normalize((double **)&__p, a3);
  if (__p)
  {
    float v21 = (double *)__p;
    operator delete(__p);
  }
}

void sub_1B240A330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::NotchDetector::normalize(double **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  double v6 = 0.0;
  if (*a1 != v5)
  {
    uint64_t v7 = *a1;
    do
    {
      double v8 = *v7++;
      double v6 = v6 + v8;
    }
    while (v7 != v5);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::vector<double>::reserve((void **)a2, v5 - v4);
  long double v9 = *a1;
  double v10 = a1[1];
  if (*a1 != v10)
  {
    unint64_t v11 = (void *)(a2 + 16);
    float v12 = *(double **)(a2 + 8);
    do
    {
      double v13 = *v9 / v6;
      if ((unint64_t)v12 >= *v11)
      {
        uint64_t v15 = *(double **)a2;
        uint64_t v16 = ((uint64_t)v12 - *(void *)a2) >> 3;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = *v11 - (void)v15;
        if (v18 >> 2 > v17) {
          unint64_t v17 = v18 >> 2;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a2 + 16, v19);
          uint64_t v15 = *(double **)a2;
          float v12 = *(double **)(a2 + 8);
        }
        else
        {
          uint64_t v20 = 0;
        }
        float v21 = (double *)&v20[8 * v16];
        *float v21 = v13;
        unint64_t v14 = v21 + 1;
        while (v12 != v15)
        {
          uint64_t v22 = *((void *)v12-- - 1);
          *((void *)v21-- - 1) = v22;
        }
        *(void *)a2 = v21;
        *(void *)(a2 + 8) = v14;
        *(void *)(a2 + 16) = &v20[8 * v19];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *float v12 = v13;
        unint64_t v14 = v12 + 1;
      }
      *(void *)(a2 + 8) = v14;
      ++v9;
      float v12 = v14;
    }
    while (v9 != v10);
  }
}

void sub_1B240A4B4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::NotchDetector::calcHfPower(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, int *a4@<X3>, void *a5@<X8>)
{
  int v35 = kaldi::MatrixBase<float>::NumCols(a2);
  uint64_t v33 = a2;
  int v10 = kaldi::MatrixBase<float>::NumRows(a2);
  std::vector<double>::vector(a5, v10);
  std::vector<double>::vector(v38, v10);
  if (v10 >= 1)
  {
    uint64_t v31 = a1;
    long long v32 = a5;
    uint64_t v11 = 0;
    unint64_t v14 = a3;
    uint64_t v12 = *a3;
    uint64_t v13 = v14[1];
    uint64_t v15 = *a4;
    uint64_t v16 = a4[1];
    long long v34 = (double *)v38[0];
    do
    {
      if (v35 < 1)
      {
        double v19 = 0.0;
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)v33 + 4 * *(_DWORD *)(v33 + 16) * (int)v11;
        double v19 = 0.0;
        do
        {
          if (v17 >= v12 && v17 < v13 || v17 >= v15 && v17 < v16) {
            double v19 = v19 + 1.0 / (double)((int)v13 + (int)v16 - ((int)v12 + (int)v15)) * expf(*(float *)(v18 + 4 * v17));
          }
          ++v17;
        }
        while (v35 != v17);
      }
      v34[v11++] = v19;
    }
    while (v11 != v10);
    uint64_t v20 = 0;
    a1 = v31;
    a5 = v32;
    int v21 = *(_DWORD *)(v31 + 24);
    int v22 = -v21;
    uint64_t v23 = *v32;
    if (v21 >= 0) {
      int v24 = *(_DWORD *)(v31 + 24);
    }
    else {
      int v24 = -v21;
    }
    int v25 = v21 + v24 + 1;
    do
    {
      double v26 = 0.0;
      if ((v21 & 0x80000000) == 0)
      {
        int v27 = v22;
        int v28 = v25;
        do
        {
          if ((v27 & 0x80000000) == 0 && v27 < v10) {
            double v26 = v26 + *((double *)v38[0] + v27);
          }
          ++v27;
          --v28;
        }
        while (v28);
      }
      double v29 = v26 / (double)((2 * v21) | 1);
      if (v29 < 1.0e-10) {
        double v29 = 1.0e-10;
      }
      *(double *)(v23 + 8 * v20++) = v29;
      ++v22;
    }
    while (v20 != v10);
  }
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v30 = std::string::basic_string[abi:ne180100]<0>(__p, "notch-detector.hfpower.txt");
    quasar::NotchDetector::dumpVector((uint64_t)v30, (uint64_t)__p, a5);
    if (v37 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v38[0])
  {
    v38[1] = v38[0];
    operator delete(v38[0]);
  }
}

void sub_1B240A708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  int v24 = *(void **)v22;
  if (*(void *)v22)
  {
    *(void *)(v22 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void quasar::NotchDetector::calcWeightedSpectrum(quasar::NotchDetector *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8 = kaldi::MatrixBase<float>::NumCols(a3);
  uint64_t v32 = a3;
  uint64_t v9 = kaldi::MatrixBase<float>::NumRows(a3);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  std::vector<double>::reserve((void **)a4, v8);
  quasar::NotchDetector::calcCosineWindow(a1, v9, (uint64_t)v36);
  quasar::NotchDetector::multiply(v36, a2, (uint64_t)__p);
  quasar::NotchDetector::normalize((double **)__p, (uint64_t)v35);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*((unsigned char *)a1 + 40))
  {
    int v10 = std::string::basic_string[abi:ne180100]<0>(__p, "notch-detector.wt.txt");
    quasar::NotchDetector::dumpVector((uint64_t)v10, (uint64_t)__p, (uint64_t *)v35);
    if (v34 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v8 >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v9;
    do
    {
      uint64_t v14 = v9;
      if ((int)v9 < 1)
      {
        double v19 = 0.0;
      }
      else
      {
        uint64_t v15 = 0;
        uint64_t v16 = (double *)v35[0];
        uint64_t v17 = (float *)(*(void *)v32 + v11);
        uint64_t v18 = 4 * *(int *)(v32 + 16);
        double v19 = 0.0;
        do
        {
          double v19 = v19 + expf(*v17) * v16[v15++];
          uint64_t v17 = (float *)((char *)v17 + v18);
        }
        while (v13 != v15);
      }
      double v20 = log10(v19) * 10.0;
      uint64_t v22 = *(double **)(a4 + 8);
      unint64_t v21 = *(void *)(a4 + 16);
      if ((unint64_t)v22 >= v21)
      {
        int v24 = *(double **)a4;
        uint64_t v25 = ((uint64_t)v22 - *(void *)a4) >> 3;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v27 = v21 - (void)v24;
        if (v27 >> 2 > v26) {
          unint64_t v26 = v27 >> 2;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28)
        {
          double v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a4 + 16, v28);
          int v24 = *(double **)a4;
          uint64_t v22 = *(double **)(a4 + 8);
        }
        else
        {
          double v29 = 0;
        }
        uint64_t v30 = (double *)&v29[8 * v25];
        *uint64_t v30 = v20;
        uint64_t v23 = v30 + 1;
        while (v22 != v24)
        {
          uint64_t v31 = *((void *)v22-- - 1);
          *((void *)v30-- - 1) = v31;
        }
        *(void *)a4 = v30;
        *(void *)(a4 + 8) = v23;
        *(void *)(a4 + 16) = &v29[8 * v28];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        double *v22 = v20;
        uint64_t v23 = v22 + 1;
      }
      *(void *)(a4 + 8) = v23;
      ++v12;
      v11 += 4;
      uint64_t v9 = v14;
    }
    while (v12 != v8);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
}

void sub_1B240A9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a21) {
    operator delete(a21);
  }
  int v24 = *(void **)v22;
  if (*(void *)v22)
  {
    *(void *)(v22 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void quasar::NotchDetector::multiply(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1[1] - *a1;
  uint64_t v7 = a2[1] - *a2;
  if (v7 >> 3 >= (unint64_t)(v6 >> 3)) {
    uint64_t v8 = v6 >> 3;
  }
  else {
    uint64_t v8 = v7 >> 3;
  }
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (v6 >> 3 <= (unint64_t)(v7 >> 3)) {
    uint64_t v9 = v7 >> 3;
  }
  else {
    uint64_t v9 = v6 >> 3;
  }
  *(void *)a3 = 0;
  std::vector<double>::reserve((void **)a3, (int)v9);
  if ((int)v8 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (void *)(a3 + 16);
    uint64_t v12 = *(double **)(a3 + 8);
    do
    {
      double v13 = *(double *)(*a1 + 8 * v10) * *(double *)(*a2 + 8 * v10);
      if ((unint64_t)v12 >= *v11)
      {
        uint64_t v15 = *(double **)a3;
        uint64_t v16 = ((uint64_t)v12 - *(void *)a3) >> 3;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = *v11 - (void)v15;
        if (v18 >> 2 > v17) {
          unint64_t v17 = v18 >> 2;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          double v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a3 + 16, v19);
          uint64_t v15 = *(double **)a3;
          uint64_t v12 = *(double **)(a3 + 8);
        }
        else
        {
          double v20 = 0;
        }
        unint64_t v21 = (double *)&v20[8 * v16];
        *unint64_t v21 = v13;
        uint64_t v14 = v21 + 1;
        while (v12 != v15)
        {
          uint64_t v22 = *((void *)v12-- - 1);
          *((void *)v21-- - 1) = v22;
        }
        *(void *)a3 = v21;
        *(void *)(a3 + 8) = v14;
        *(void *)(a3 + 16) = &v20[8 * v19];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *uint64_t v12 = v13;
        uint64_t v14 = v12 + 1;
      }
      *(void *)(a3 + 8) = v14;
      ++v10;
      uint64_t v12 = v14;
    }
    while (v10 != v8);
  }
  if ((int)v8 < (int)v9)
  {
    uint64_t v23 = (void *)(a3 + 16);
    int v24 = *(void **)(a3 + 8);
    do
    {
      if ((unint64_t)v24 >= *v23)
      {
        unint64_t v26 = *(void **)a3;
        uint64_t v27 = ((uint64_t)v24 - *(void *)a3) >> 3;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v29 = *v23 - (void)v26;
        if (v29 >> 2 > v28) {
          unint64_t v28 = v29 >> 2;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30)
        {
          uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a3 + 16, v30);
          unint64_t v26 = *(void **)a3;
          int v24 = *(void **)(a3 + 8);
        }
        else
        {
          uint64_t v31 = 0;
        }
        uint64_t v32 = &v31[8 * v27];
        *(void *)uint64_t v32 = 0;
        uint64_t v25 = v32 + 8;
        while (v24 != v26)
        {
          uint64_t v33 = *--v24;
          *((void *)v32 - 1) = v33;
          v32 -= 8;
        }
        *(void *)a3 = v32;
        *(void *)(a3 + 8) = v25;
        *(void *)(a3 + 16) = &v31[8 * v30];
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *int v24 = 0;
        uint64_t v25 = v24 + 1;
      }
      *(void *)(a3 + 8) = v25;
      LODWORD(v8) = v8 + 1;
      int v24 = v25;
    }
    while (v8 != v9);
  }
}

void sub_1B240AC88(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::NotchDetector::calcPeak(_DWORD *a1@<X1>, int *a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  int v12 = a2[1] - *a2;
  std::vector<double>::reserve((void **)a4, a2[1] - (uint64_t)*a2);
  if (v12 >= 1)
  {
    int v13 = 0;
    double v14 = a6 - a5;
    double v15 = (double)(a1[1] - *a1);
    uint64_t v16 = (void *)(a4 + 16);
    unint64_t v17 = *(double **)(a4 + 8);
    do
    {
      double v18 = a5 + (double)(*a2 + v13 - *a1) / v15 * v14 - *(double *)(*a3 + 8 * (*a2 + v13));
      if ((unint64_t)v17 >= *v16)
      {
        double v20 = *(double **)a4;
        uint64_t v21 = ((uint64_t)v17 - *(void *)a4) >> 3;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = *v16 - (void)v20;
        if (v23 >> 2 > v22) {
          unint64_t v22 = v23 >> 2;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a4 + 16, v24);
          double v20 = *(double **)a4;
          unint64_t v17 = *(double **)(a4 + 8);
        }
        else
        {
          uint64_t v25 = 0;
        }
        unint64_t v26 = (double *)&v25[8 * v21];
        double *v26 = v18;
        unint64_t v19 = v26 + 1;
        while (v17 != v20)
        {
          uint64_t v27 = *((void *)v17-- - 1);
          *((void *)v26-- - 1) = v27;
        }
        *(void *)a4 = v26;
        *(void *)(a4 + 8) = v19;
        *(void *)(a4 + 16) = &v25[8 * v24];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *unint64_t v17 = v18;
        unint64_t v19 = v17 + 1;
      }
      *(void *)(a4 + 8) = v19;
      ++v13;
      unint64_t v17 = v19;
    }
    while (v13 != v12);
  }
}

void sub_1B240AE40(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double quasar::NotchDetector::measureNotch(quasar::NotchDetector *a1, int *a2, int *a3, int *a4, uint64_t a5, float a6)
{
  LODWORD(v12) = kaldi::MatrixBase<float>::NumCols(a5);
  quasar::NotchDetector::calcHfPower((uint64_t)a1, a5, a2, a4, v80);
  quasar::NotchDetector::calcWeightedSpectrum(a1, v80, a5, (uint64_t)v79);
  if (*((unsigned char *)a1 + 40))
  {
    int v13 = std::string::basic_string[abi:ne180100]<0>(__p, "notch-detector.weighted.spectrum.txt");
    quasar::NotchDetector::dumpVector((uint64_t)v13, (uint64_t)__p, (uint64_t *)v79);
    if (SBYTE7(v60) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v14 = *a2;
  uint64_t v15 = a2[1];
  double v16 = 0.0;
  double v17 = 0.0;
  if ((int)v15 > (int)v14)
  {
    uint64_t v18 = v15 - v14;
    unint64_t v19 = (double *)((char *)v79[0] + 8 * v14);
    do
    {
      double v20 = *v19++;
      double v17 = v17 + v20;
      --v18;
    }
    while (v18);
  }
  double v21 = v17 / (double)((int)v15 - (int)v14);
  uint64_t v22 = *a4;
  uint64_t v23 = a4[1];
  if ((int)v23 > (int)v22)
  {
    uint64_t v24 = v23 - v22;
    uint64_t v25 = (double *)((char *)v79[0] + 8 * v22);
    double v16 = 0.0;
    do
    {
      double v26 = *v25++;
      double v16 = v16 + v26;
      --v24;
    }
    while (v24);
  }
  double v27 = v16 / (double)((int)v23 - (int)v22);
  int v28 = *((_DWORD *)a1 + 2);
  int v29 = *((_DWORD *)a1 + 3);
  int v30 = v28 + *(_DWORD *)a1;
  if (v30 < 0 != __OFADD__(v28, *(_DWORD *)a1)) {
    ++v30;
  }
  int v31 = v30 >> 1;
  int v32 = *((_DWORD *)a1 + 5);
  BOOL v33 = __OFADD__(v32, v29);
  int v34 = v32 + v29;
  if (v34 < 0 != v33) {
    ++v34;
  }
  double v35 = (double)(int)(float)(a6 * 0.5) / (double)((int)v12 - 1);
  int v36 = (int)((double)v31 / v35);
  int v37 = v34 >> 1;
  if (v36 >= (int)v12) {
    uint64_t v38 = v12;
  }
  else {
    uint64_t v38 = v36;
  }
  int v39 = (int)((double)v37 / v35);
  if (v39 >= (int)v12) {
    uint64_t v12 = v12;
  }
  else {
    uint64_t v12 = v39;
  }
  uint64_t v78 = v38 | (v12 << 32);
  quasar::NotchDetector::calcPeak(&v78, a3, v79, (uint64_t)&v76, v21, v27);
  if (*((unsigned char *)a1 + 40))
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"avlo = ", 7);
      uint64_t v40 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"  avhuint64_t i = ", 9);
      uint64_t v41 = (void *)std::ostream::operator<<();
      char v81 = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)&v81, 1);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      if (quasar::gLogLevel >= 4)
      {
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"bands_below.lo = ", 17);
        unint64_t v42 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)", bands_below.huint64_t i = ", 19);
        float v43 = (void *)std::ostream::operator<<();
        char v81 = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v81, 1);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
        if (quasar::gLogLevel >= 4)
        {
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
          long long v64 = 0u;
          long long v65 = 0u;
          long long v62 = 0u;
          long long v63 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          *(_OWORD *)std::string __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"bands_notch.lo = ", 17);
          unint64_t v44 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)", bands_notch.huint64_t i = ", 19);
          float v45 = (void *)std::ostream::operator<<();
          char v81 = 10;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)&v81, 1);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
          if (quasar::gLogLevel >= 4)
          {
            long long v74 = 0u;
            long long v75 = 0u;
            long long v72 = 0u;
            long long v73 = 0u;
            long long v70 = 0u;
            long long v71 = 0u;
            long long v68 = 0u;
            long long v69 = 0u;
            long long v66 = 0u;
            long long v67 = 0u;
            long long v64 = 0u;
            long long v65 = 0u;
            long long v62 = 0u;
            long long v63 = 0u;
            long long v60 = 0u;
            long long v61 = 0u;
            *(_OWORD *)std::string __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"bands_above.lo = ", 17);
            size_t v46 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)", bands_above.huint64_t i = ", 19);
            uint64_t v47 = (void *)std::ostream::operator<<();
            char v81 = 10;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)&v81, 1);
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
            if (quasar::gLogLevel >= 4)
            {
              long long v74 = 0u;
              long long v75 = 0u;
              long long v72 = 0u;
              long long v73 = 0u;
              long long v70 = 0u;
              long long v71 = 0u;
              long long v68 = 0u;
              long long v69 = 0u;
              long long v66 = 0u;
              long long v67 = 0u;
              long long v64 = 0u;
              long long v65 = 0u;
              long long v62 = 0u;
              long long v63 = 0u;
              long long v60 = 0u;
              long long v61 = 0u;
              *(_OWORD *)std::string __p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"bands_across.lo = ", 18);
              uint64_t v48 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)", bands_across.huint64_t i = ", 20);
              uint64_t v49 = (void *)std::ostream::operator<<();
              char v81 = 10;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)&v81, 1);
              quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
            }
          }
        }
      }
    }
    int v50 = std::string::basic_string[abi:ne180100]<0>(__p, "notch-detector.peak.txt");
    quasar::NotchDetector::dumpVector((uint64_t)v50, (uint64_t)__p, (uint64_t *)&v76);
    if (SBYTE7(v60) < 0) {
      operator delete(__p[0]);
    }
  }
  if (v76 == v77)
  {
    double v51 = 0.0;
    if (v76)
    {
LABEL_37:
      uint64_t v77 = v76;
      operator delete(v76);
    }
  }
  else
  {
    double v51 = *v76;
    unint64_t v52 = v76;
    do
    {
      double v53 = *v52++;
      double v54 = v53;
      if (v53 >= v51) {
        double v51 = v54;
      }
    }
    while (v52 != v77);
    double v55 = 0.0;
    id v56 = v76;
    do
    {
      double v57 = *v56++;
      double v55 = v55 + v57;
    }
    while (v56 != v77);
    if (v76) {
      goto LABEL_37;
    }
  }
  if (v79[0])
  {
    v79[1] = v79[0];
    operator delete(v79[0]);
  }
  if (v80[0])
  {
    v80[1] = v80[0];
    operator delete(v80[0]);
  }
  return v51;
}

void sub_1B240B3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  double v16 = *(void **)(v14 - 184);
  if (v16)
  {
    *(void *)(v14 - 176) = v16;
    operator delete(v16);
  }
  double v17 = *(void **)(v14 - 152);
  if (v17)
  {
    *(void *)(v14 - 144) = v17;
    operator delete(v17);
  }
  uint64_t v18 = *(void **)(v14 - 128);
  if (v18)
  {
    *(void *)(v14 - 120) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void quasar::NotchDetector::measureNotch(int *a1, uint64_t a2, float a3)
{
  int v6 = kaldi::MatrixBase<float>::NumCols(a2);
  double v7 = (double)(int)(float)(a3 * 0.5) / (double)(v6 - 1);
  LODWORD(v8) = (int)((double)*a1 / v7);
  if ((int)v8 >= v6) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v8;
  }
  LODWORD(v9) = (int)((double)a1[1] / v7);
  if ((int)v9 >= v6) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = v9;
  }
  uint64_t v10 = v8 | (v9 << 32);
  int v11 = (int)((double)a1[2] / v7);
  if (v11 >= v6) {
    uint64_t v12 = v6;
  }
  else {
    uint64_t v12 = v11;
  }
  LODWORD(v13) = (int)((double)a1[3] / v7);
  if ((int)v13 >= v6) {
    uint64_t v13 = v6;
  }
  else {
    uint64_t v13 = v13;
  }
  uint64_t v14 = v12 | (v13 << 32);
  int v15 = a1[5];
  int v16 = (int)((double)a1[4] / v7);
  uint64_t v20 = v14;
  uint64_t v21 = v10;
  if (v16 >= v6) {
    uint64_t v17 = v6;
  }
  else {
    uint64_t v17 = v16;
  }
  LODWORD(v18) = (int)((double)v15 / v7);
  if ((int)v18 >= v6) {
    uint64_t v18 = v6;
  }
  else {
    uint64_t v18 = v18;
  }
  uint64_t v19 = v17 | (v18 << 32);
  quasar::NotchDetector::measureNotch((quasar::NotchDetector *)a1, (int *)&v21, (int *)&v20, (int *)&v19, a2, a3);
}

id EARLogger::QuasarOSLogger(EARLogger *this)
{
  unint64_t v1 = 0x1EC010000uLL;
  {
    unint64_t v1 = 0x1EC010000;
    if (v4)
    {
      EARLogger::QuasarOSLogger(void)::logger = (uint64_t)os_log_create("com.apple.siri", "quasar");
      unint64_t v1 = 0x1EC010000;
    }
  }
  long long v2 = *(void **)(v1 + 2224);
  return v2;
}

void EARLogger::initializeLogging(EARLogger *this)
{
  if (EARLogger::initializeLogging(void)::onceToken != -1) {
    dispatch_once(&EARLogger::initializeLogging(void)::onceToken, &__block_literal_global_4);
  }
}

void ___ZN9EARLogger17initializeLoggingEv_block_invoke(EARLogger *this)
{
  quasar::QuasarFatalMessage::logger = (uint64_t (*)())EARLogger::QuasarOSLogger_FAULT;
  kaldi::KaldiErrorMessage::g_logger = (uint64_t (*)())EARLogger::QuasarOSLogger_FAULT;
  quasar::QuasarExceptionMessage::logger = (uint64_t (*)())EARLogger::QuasarOSLogger_FAULT;
  quasar::QuasarErrorMessage::logger = (uint64_t (*)())EARLogger::QuasarOSLogger_FAULT;
  quasar::QuasarWarnMessage::logger = (uint64_t (*)())EARLogger::QuasarOSLogger_FAULT;
  kaldi::KaldiWarnMessage::g_logger = (uint64_t (*)())EARLogger::QuasarOSLogger_FAULT;
  quasar::QuasarProdInfoMessage::logger = (uint64_t (*)())EARLogger::QuasarOSLogger_INFO;
  quasar::QuasarInfoMessage::logger = (uint64_t (*)())EARLogger::QuasarOSLogger_INFO;
  kaldi::KaldiLogMessage::g_logger = (uint64_t (*)())EARLogger::QuasarOSLogger_INFO;
  quasar::QuasarDebugMessage::logger = (uint64_t (*)())EARLogger::QuasarOSLogger_DEBUG;
  quasar::QuasarTraceMessage::logger = (uint64_t (*)(uint64_t))EARLogger::QuasarOSLogger_DEBUG;
  kaldi::KaldiVlogMessage::g_logger = (uint64_t (*)())quasar::QuasarTraceMessage::logKaldiTrace;
  EARLogger::setQuasarLogLevelToSystemDefault(this);
}

void EARLogger::QuasarOSLogger_FAULT(uint64_t *a1, os_log_type_t a2, void *a3, const char *a4)
{
  if (*((char *)a1 + 23) >= 0) {
    int v4 = a1;
  }
  else {
    int v4 = (uint64_t *)*a1;
  }
  EARLogger::QuasarOSLog((EARLogger *)0x11, a2, a3, a4, v4);
}

void EARLogger::QuasarOSLogger_INFO(uint64_t *a1, os_log_type_t a2, void *a3, const char *a4)
{
  if (*((char *)a1 + 23) >= 0) {
    int v4 = a1;
  }
  else {
    int v4 = (uint64_t *)*a1;
  }
  EARLogger::QuasarOSLog((EARLogger *)1, a2, a3, a4, v4);
}

void EARLogger::QuasarOSLogger_DEBUG(uint64_t *a1, os_log_type_t a2, void *a3, const char *a4)
{
  if (*((char *)a1 + 23) >= 0) {
    int v4 = a1;
  }
  else {
    int v4 = (uint64_t *)*a1;
  }
  EARLogger::QuasarOSLog((EARLogger *)2, a2, a3, a4, v4);
}

void EARLogger::setQuasarLogLevelToSystemDefault(EARLogger *this)
{
  oslog = EARLogger::QuasarOSLogger(this);
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEBUG))
  {
    int v1 = 1;
    int v2 = 5;
LABEL_7:
    uint64_t v3 = oslog;
LABEL_8:
    quasar::gLogLevel = v2;
    kaldi::g_kaldi_verbose_level = v1;
    goto LABEL_9;
  }
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_INFO))
  {
    int v1 = 0;
    int v2 = 4;
    goto LABEL_7;
  }
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    int v1 = -1;
    int v2 = 2;
    goto LABEL_7;
  }
  BOOL v4 = os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR);
  uint64_t v3 = oslog;
  if (v4)
  {
    int v1 = -1;
    int v2 = 1;
    goto LABEL_8;
  }
LABEL_9:
}

void EARLogger::QuasarOSLog(EARLogger *this, os_log_type_t a2, void *a3, const char *a4, ...)
{
  BOOL v4 = EARLogger::QuasarOSLogger(this);
  os_log_with_args();
}

uint64_t quasar::QuasarTraceMessage::logKaldiTrace(uint64_t a1)
{
  return quasar::QuasarTraceMessage::logger(a1);
}

void quasar::ConfusionNetworkCombinerDecoder::registerParams(quasar::ConfusionNetworkCombinerDecoder *this, quasar::SystemConfig *a2)
{
  *((_DWORD *)this + 540) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "confusion-network-combiner");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 45, 0, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  quasar::ConfusionNetworkCombiner::registerParams((quasar::ConfusionNetworkCombinerDecoder *)((char *)this + 448), a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "wait-milliseconds");
  std::string::basic_string[abi:ne180100]<0>(v4, "The number of milliseconds to wait for a confusion network to become available in the cache");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 2160, (uint64_t)v4, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B240B9E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ConfusionNetworkCombinerDecoder::finishInit(quasar::ConfusionNetworkCombinerDecoder *this)
{
}

uint64_t quasar::ConfusionNetworkCombinerDecoder::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
  if (!*(void *)(a2 + 592))
  {
    long long v111 = 0u;
    long long v112 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long v96 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v96);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v96, "No confusion network cache found.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v96);
  }
  if (*(void *)(*a3 + 304))
  {
    if ((quasar::SpeechRequestData::isUtteranceDetectionEnabled(*a4) & 1) != 0
      || quasar::SpeechRequestData::isUtteranceConcatenationEnabled(*a4))
    {
      if (quasar::gLogLevel >= 4)
      {
        long long v111 = 0u;
        long long v112 = 0u;
        long long v109 = 0u;
        long long v110 = 0u;
        long long v107 = 0u;
        long long v108 = 0u;
        long long v105 = 0u;
        long long v106 = 0u;
        long long v103 = 0u;
        long long v104 = 0u;
        long long v101 = 0u;
        long long v102 = 0u;
        long long v99 = 0u;
        long long v100 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        long long v96 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v96);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"This doesn't work when utt detect/concatenation is enabled. Doing nothing.", 74);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v96);
      }
      return 0;
    }
    uint64_t v61 = a2;
    std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::vector(v95, 2uLL);
    uint64_t v8 = *(uint64_t **)(*a3 + 304);
    uint64_t v9 = v95[0] + 3;
    std::vector<std::vector<std::vector<quasar::Token>>>::resize((uint64_t *)v95[0] + 3, 0xAAAAAAAAAAAAAAABLL * ((v8[1] - *v8) >> 3));
    long long v63 = a3;
    uint64_t v10 = *v8;
    if (v8[1] != *v8)
    {
      unint64_t v11 = 0;
      do
      {
        std::vector<std::vector<quasar::Token>>::resize((uint64_t *)&(*v9)[3 * v11], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v10 + 24 * v11 + 8) - *(void *)(v10 + 24 * v11)) >> 5));
        uint64_t v10 = *v8;
        uint64_t v12 = *(void *)(*v8 + 24 * v11);
        if (*(void *)(*v8 + 24 * v11 + 8) != v12)
        {
          uint64_t v13 = 0;
          uint64_t v14 = 0;
          unint64_t v15 = 0;
          int v16 = (*v9)[3 * v11];
          do
          {
            uint64_t v17 = (const quasar::Token *)(v12 + v13);
            uint64_t v18 = &v16[v14];
            unint64_t v19 = v16[v14 + 1];
            if (v19 >= v16[v14 + 2])
            {
              uint64_t v20 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(&v16[v14], v17);
            }
            else
            {
              quasar::Token::Token((std::string *)v16[v14 + 1], v17);
              uint64_t v20 = v19 + 224;
              v18[1] = v19 + 224;
            }
            v18[1] = v20;
            int v16 = (*v9)[3 * v11];
            *(float *)(v16[v14 + 1] - 184) = *(float *)(v16[v14 + 1] - 184) * 1000.0;
            ++v15;
            uint64_t v10 = *v8;
            uint64_t v12 = *(void *)(*v8 + 24 * v11);
            v14 += 3;
            v13 += 224;
          }
          while (0x6DB6DB6DB6DB6DB7 * ((*(void *)(*v8 + 24 * v11 + 8) - v12) >> 5) > v15);
        }
        ++v11;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v8[1] - v10) >> 3) > v11);
    }
    uint64_t v21 = v63;
    uint64_t v22 = *(void *)(*v63 + 424);
    std::allocate_shared[abi:ne180100]<std::vector<std::vector<std::vector<quasar::Token>>>,std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::vector<std::vector<std::vector<quasar::Token>>>&,void>(v9, &v93);
    quasar::SpeechRequestResultData::storeServerConfusionNetwork(v22, &v93);
    if (v94) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v94);
    }
    quasar::SpeechRequestData::getRecogRequestTimer((uint64_t)*a4, &v96);
    uint64_t v23 = (double *)v96;
    *(double *)(*v63 + 536) = (kaldi::Timer::GetSeconds((kaldi::Timer *)5, v24) - *v23) * 1000.0;
    if (*((void *)&v96 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v96 + 1));
    }
    quasar::StopWatch::StopWatch((quasar::StopWatch *)v89, v25);
    uint64_t v26 = v61;
    quasar::StopWatch::resume((quasar::StopWatch *)v89, v27);
    id v87 = 0;
    int v88 = 0;
    ConfNetworunint64_t k = quasar::ConfusionNetworkCache::getConfNetwork(*(uint64_t **)(v61 + 592), &v87, *(_DWORD *)(a1 + 2160));
    double v30 = v92;
    if (v90) {
      double v30 = v30 + kaldi::Timer::GetSeconds((kaldi::Timer *)5, v28) - v91;
    }
    uint64_t v31 = *v63;
    *(double *)(*v63 + 520) = v30 * 1000.0;
    if ((ConfNetwork & 1) == 0)
    {
      if (quasar::gLogLevel >= 4)
      {
        long long v111 = 0u;
        long long v112 = 0u;
        long long v109 = 0u;
        long long v110 = 0u;
        long long v107 = 0u;
        long long v108 = 0u;
        long long v105 = 0u;
        long long v106 = 0u;
        long long v103 = 0u;
        long long v104 = 0u;
        long long v101 = 0u;
        long long v102 = 0u;
        long long v99 = 0u;
        long long v100 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        long long v96 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v96);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"No confusion network found in cache. Doing nothing.", 51);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v96);
      }
      goto LABEL_84;
    }
    uint64_t v32 = *(void *)(v31 + 424);
    double v85 = v87;
    char v86 = v88;
    if (v88) {
      atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    quasar::SpeechRequestResultData::storeClientConfusionNetwork(v32, (uint64_t *)&v85);
    if (v86) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v86);
    }
    BOOL v33 = v87;
    if (v95[0] != v87)
    {
      std::vector<std::vector<std::vector<quasar::Token>>>::__assign_with_size[abi:ne180100]<std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>((uint64_t)v95[0], *v87, v87[1], 0xAAAAAAAAAAAAAAABLL * (v87[1] - *v87));
      BOOL v33 = v95[0];
    }
    *(unsigned char *)(*v63 + 517) = 1;
    uint64_t v83 = 0;
    unint64_t v84 = 0;
    uint64_t v82 = 0;
    int v34 = *v33;
    if (v33[1] != *v33)
    {
      unint64_t v35 = 0;
      char v36 = 0;
      do
      {
        int v37 = v34[3 * v35];
        if (v34[3 * v35 + 1] != v37)
        {
          unint64_t v38 = 0;
          do
          {
            if (v37[3 * v38 + 1] == v37[3 * v38])
            {
              unint64_t v46 = 0;
            }
            else
            {
              uint64_t v39 = 0;
              unint64_t v40 = 0;
              do
              {
                if (!v38)
                {
                  long long v96 = 0uLL;
                  *(void *)&long long v97 = 0;
                  int v79 = 0;
                  uint64_t v80 = 0;
                  uint64_t v81 = 0;
                  uint64_t v41 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v79, (const quasar::Token *)(*(*v33)[3 * v35] + v39));
                  unint64_t v42 = (void *)*((void *)&v96 + 1);
                  uint64_t v80 = v41;
                  if (*((void *)&v96 + 1) >= (unint64_t)v97)
                  {
                    uint64_t v43 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v96, (uint64_t *)&v79);
                  }
                  else
                  {
                    **((void **)&v96 + 1) = 0;
                    v42[1] = 0;
                    v42[2] = 0;
                    std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v42, (uint64_t)v79, v80, 0x6DB6DB6DB6DB6DB7 * ((v80 - (uint64_t)v79) >> 5));
                    uint64_t v43 = (uint64_t)(v42 + 3);
                  }
                  *((void *)&v96 + 1) = v43;
                  unint64_t v44 = v83;
                  if ((unint64_t)v83 >= v84)
                  {
                    float v45 = (uint64_t **)std::vector<std::vector<std::vector<quasar::Token>>>::__push_back_slow_path<std::vector<std::vector<quasar::Token>> const&>((uint64_t *)&v82, (uint64_t **)&v96);
                  }
                  else
                  {
                    *uint64_t v83 = 0;
                    v44[1] = 0;
                    v44[2] = 0;
                    std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v44, (uint64_t *)v96, *((uint64_t **)&v96 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v96 + 1) - v96) >> 3));
                    float v45 = v44 + 3;
                  }
                  uint64_t v83 = v45;
                  v78[0] = (void **)&v79;
                  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v78);
                  int v79 = (void **)&v96;
                  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v79);
                  BOOL v33 = v95[0];
                  int v34 = *v95[0];
                }
                ++v40;
                unint64_t v46 = 0x6DB6DB6DB6DB6DB7 * ((v34[3 * v35][3 * v38 + 1] - v34[3 * v35][3 * v38]) >> 5);
                v39 += 224;
              }
              while (v46 > v40);
              int v37 = v34[3 * v35];
            }
            v36 |= v46 > 1;
            ++v38;
          }
          while (0xAAAAAAAAAAAAAAABLL * (v34[3 * v35 + 1] - v37) > v38);
        }
        ++v35;
      }
      while (0xAAAAAAAAAAAAAAABLL * (v33[1] - v34) > v35);
      uint64_t v21 = v63;
      uint64_t v26 = v61;
      if (v36)
      {
        if (quasar::gLogLevel >= 5)
        {
          long long v111 = 0u;
          long long v112 = 0u;
          long long v109 = 0u;
          long long v110 = 0u;
          long long v107 = 0u;
          long long v108 = 0u;
          long long v105 = 0u;
          long long v106 = 0u;
          long long v103 = 0u;
          long long v104 = 0u;
          long long v101 = 0u;
          long long v102 = 0u;
          long long v99 = 0u;
          long long v100 = 0u;
          long long v97 = 0u;
          long long v98 = 0u;
          long long v96 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v96);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"Detected phrases in confusion network - backing off to flattened 1-best (this is OK)", 84);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v96);
          BOOL v33 = v95[0];
        }
        if (v33 != &v82) {
          std::vector<std::vector<std::vector<quasar::Token>>>::__assign_with_size[abi:ne180100]<std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>((uint64_t)v33, v82, v83, 0xAAAAAAAAAAAAAAABLL * (v83 - v82));
        }
      }
    }
    int v79 = 0;
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    memset(v78, 0, sizeof(v78));
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    memset(v74, 0, sizeof(v74));
    long long v71 = 0;
    long long v72 = 0;
    uint64_t v73 = 0;
    memset(v70, 0, sizeof(v70));
    long long v67 = 0;
    long long v68 = 0;
    uint64_t v69 = 0;
    std::string __p = 0;
    long long v65 = 0;
    uint64_t v66 = 0;
    quasar::ConfusionNetworkCombiner::combineResults(a1 + 448, v95, (uint64_t)&v79, (uint64_t)v78, &v75, v74, (uint64_t)&v71, v70, (uint64_t)&v67, (uint64_t)&__p);
    if (v76 == v75)
    {
      if (quasar::gLogLevel < 4)
      {
LABEL_77:
        if (__p)
        {
          long long v65 = __p;
          operator delete(__p);
        }
        if (v67)
        {
          long long v68 = v67;
          operator delete(v67);
        }
        *(void *)&long long v96 = v70;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
        if (v71)
        {
          long long v72 = v71;
          operator delete(v71);
        }
        *(void *)&long long v96 = v74;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
        *(void *)&long long v96 = &v75;
        std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
        *(void *)&long long v96 = v78;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
        *(void *)&long long v96 = &v79;
        std::vector<std::vector<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
        *(void *)&long long v96 = &v82;
        std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
LABEL_84:
        if (v88) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v88);
        }
        *(void *)&long long v96 = v89;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
        *(void *)&long long v96 = v95;
        std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
        return 0;
      }
      long long v111 = 0u;
      long long v112 = 0u;
      long long v109 = 0u;
      long long v110 = 0u;
      long long v107 = 0u;
      long long v108 = 0u;
      long long v105 = 0u;
      long long v106 = 0u;
      long long v103 = 0u;
      long long v104 = 0u;
      long long v101 = 0u;
      long long v102 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long v96 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v96);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"Combined sausage is empty. Doing nothing.", 41);
    }
    else
    {
      quasar::Decoder::calculateNBest(v26, v21, *((_DWORD *)*a4 + 4));
      uint64_t v47 = *(uint64_t **)(*v21 + 352);
      uint64_t v48 = (uint64_t *)*v47;
      long long v96 = 0uLL;
      *(void *)&long long v97 = 0;
      std::vector<std::vector<quasar::Token>>::insert(v47, v48, 0xAAAAAAAAAAAAAAABLL * ((v76 - v75) >> 3), (uint64_t *)&v96);
      *(void *)&v113[1] = &v96;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v113[1]);
      if (v76 != v75)
      {
        unint64_t v49 = 0;
        do
        {
          int v50 = *(void **)(v75 + 24 * v49);
          if (*(void **)(v75 + 24 * v49 + 8) != v50) {
            quasar::PhonesetMapping::getIpaPhoneSequence(v26 + 608, *v50 + 48);
          }
          ++v49;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v76 - v75) >> 3) > v49);
      }
      *(void *)&v113[1] = 0xAAAAAAAAAAAAAAABLL
                          * ((uint64_t)(*(void *)(*(void *)(*v63 + 352) + 8) - **(void **)(*v63 + 352)) >> 3);
      std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,unsigned long,void>((unint64_t *)&v113[1], &v96);
      uint64_t v51 = *v63;
      unint64_t v52 = (_OWORD *)(*v63 + 392);
      long long v53 = v96;
      long long v96 = 0uLL;
      double v54 = *(std::__shared_weak_count **)(v51 + 400);
      *unint64_t v52 = v53;
      if (v54)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v54);
        if (*((void *)&v96 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v96 + 1));
        }
      }
      uint64_t v55 = *v63;
      uint64_t v56 = **(void **)(*v63 + 392);
      uint64_t v57 = *(void *)(*(void *)(*v63 + 392) + 8);
      uint64_t v58 = v57 - v56;
      if (v57 != v56)
      {
        uint64_t v59 = 0;
        unint64_t v60 = v58 >> 3;
        if (v60 <= 1) {
          unint64_t v60 = 1;
        }
        do
        {
          *(double *)(v56 + 8 * v59) = (double)(int)v59;
          ++v59;
        }
        while (v60 != v59);
      }
      *(_DWORD *)(v55 + 528) = *(void *)v67;
      *(_WORD *)int v113 = 0;
      quasar::Align::MakeMonotonic(*(uint64_t **)(v55 + 352), &v113[1], v113);
      if (!v113[0] || quasar::gLogLevel < 4) {
        goto LABEL_77;
      }
      long long v111 = 0u;
      long long v112 = 0u;
      long long v109 = 0u;
      long long v110 = 0u;
      long long v107 = 0u;
      long long v108 = 0u;
      long long v105 = 0u;
      long long v106 = 0u;
      long long v103 = 0u;
      long long v104 = 0u;
      long long v101 = 0u;
      long long v102 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long v96 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v96);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"Tokens not monotonic and have been corrected.", 45);
    }
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v96);
    goto LABEL_77;
  }
  if (quasar::gLogLevel >= 1)
  {
    long long v111 = 0u;
    long long v112 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long v96 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v96);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"No confusion network found in decodeChainOutput. Doing nothing.", 63);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v96);
  }
  return 2;
}

uint64_t *std::vector<std::vector<quasar::Token>>::insert(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t *a4)
{
  BOOL v4 = a2;
  if (a3)
  {
    uint64_t v10 = a1[2];
    uint64_t v8 = (uint64_t)(a1 + 2);
    uint64_t v9 = v10;
    unint64_t v11 = *(void *)(v8 - 8);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v11) >> 3) >= a3)
    {
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)a2) >> 3);
      unint64_t v20 = a3;
      if (a3 <= v19) {
        goto LABEL_15;
      }
      uint64_t v21 = 0;
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)a2) >> 3);
      unint64_t v27 = v11 + 24 * (a3 - v19);
      uint64_t v22 = 24 * a3 - 8 * ((uint64_t)(v11 - (void)a2) >> 3);
      do
      {
        uint64_t v23 = (void *)(v11 + v21);
        *uint64_t v23 = 0;
        v23[1] = 0;
        _OWORD v23[2] = 0;
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((void *)(v11 + v21), *a4, a4[1], 0x6DB6DB6DB6DB6DB7 * ((a4[1] - *a4) >> 5));
        v21 += 24;
      }
      while (v22 != v21);
      a1[1] = v27;
      if ((uint64_t *)v11 != v4)
      {
LABEL_15:
        std::vector<std::vector<quasar::Token>>::__move_range((uint64_t)a1, v4, v11, (uint64_t)&v4[3 * a3]);
        if (v4 <= a4)
        {
          if (a1[1] <= (unint64_t)a4) {
            unint64_t v24 = 0;
          }
          else {
            unint64_t v24 = a3;
          }
          a4 += 3 * v24;
        }
        uint64_t v25 = (uint64_t)v4;
        do
        {
          if ((uint64_t *)v25 != a4) {
            std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v25, *a4, a4[1], 0x6DB6DB6DB6DB6DB7 * ((a4[1] - *a4) >> 5));
          }
          v25 += 24;
          --v20;
        }
        while (v20);
      }
    }
    else
    {
      uint64_t v12 = *a1;
      unint64_t v13 = a3 - 0x5555555555555555 * ((uint64_t)(v11 - *a1) >> 3);
      if (v13 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v12) >> 3);
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v12) >> 3);
      uint64_t v16 = 2 * v15;
      if (2 * v15 <= v13) {
        uint64_t v16 = v13;
      }
      if (v15 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v16;
      }
      uint64_t v32 = v8;
      if (v17) {
        uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v8, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      clockid_t v28 = v18;
      int v29 = &v18[24 * v14];
      double v30 = v29;
      uint64_t v31 = &v18[24 * v17];
      std::__split_buffer<std::vector<quasar::Token>>::__construct_at_end(&v28, a3, a4);
      BOOL v4 = (uint64_t *)std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(a1, &v28, v4);
      std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(&v28);
    }
  }
  return v4;
}

void sub_1B240CAC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::ConfusionNetworkCombinerDecoder::supportsEager(quasar::ConfusionNetworkCombinerDecoder *this)
{
  return 1;
}

void quasar::ConfusionNetworkCombinerDecoder::~ConfusionNetworkCombinerDecoder(quasar::ConfusionNetworkCombinerDecoder *this)
{
  *(void *)this = &unk_1F0A580F8;
  int v2 = (void **)((char *)this + 448);
  *((void *)this + 56) = &unk_1F0A56BB0;
  uint64_t v3 = (void *)*((void *)this + 264);
  if (v3)
  {
    *((void *)this + 265) = v3;
    operator delete(v3);
  }
  BOOL v4 = (void **)((char *)this + 2088);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 2071) < 0) {
    operator delete(*((void **)this + 256));
  }
  if (*((char *)this + 2047) < 0) {
    operator delete(*((void **)this + 253));
  }
  quasar::ResultCombiner::~ResultCombiner(v2);
  quasar::Decoder::~Decoder(this);
}

{
  void **v2;
  void *v3;
  void **v4;

  *(void *)this = &unk_1F0A580F8;
  int v2 = (void **)((char *)this + 448);
  *((void *)this + 56) = &unk_1F0A56BB0;
  uint64_t v3 = (void *)*((void *)this + 264);
  if (v3)
  {
    *((void *)this + 265) = v3;
    operator delete(v3);
  }
  BOOL v4 = (void **)((char *)this + 2088);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 2071) < 0) {
    operator delete(*((void **)this + 256));
  }
  if (*((char *)this + 2047) < 0) {
    operator delete(*((void **)this + 253));
  }
  quasar::ResultCombiner::~ResultCombiner(v2);
  quasar::Decoder::~Decoder(this);
  MEMORY[0x1B3EA8670]();
}

void *std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    BOOL v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1B240CCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::allocate_shared[abi:ne180100]<std::vector<std::vector<std::vector<quasar::Token>>>,std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::vector<std::vector<std::vector<quasar::Token>>>&,void>@<X0>(uint64_t ***a1@<X1>, void *a2@<X8>)
{
  BOOL v4 = (char *)operator new(0x30uLL);
  uint64_t result = std::__shared_ptr_emplace<std::vector<std::vector<std::vector<quasar::Token>>>>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::vector<std::vector<quasar::Token>>>&,std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1B240CD58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<std::vector<std::vector<std::vector<quasar::Token>>>>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::vector<std::vector<quasar::Token>>>&,std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,0>(uint64_t a1, uint64_t ***a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_1F0A62A58;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 24) = 0;
  std::vector<std::vector<std::vector<quasar::Token>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>((void *)(a1 + 24), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  return a1;
}

void sub_1B240CDDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<std::vector<std::vector<quasar::Token>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62A58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::vector<std::vector<quasar::Token>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62A58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<std::vector<std::vector<std::vector<quasar::Token>>>>::__on_zero_shared(uint64_t a1)
{
  int v1 = (void **)(a1 + 24);
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void *std::__split_buffer<std::vector<quasar::Token>>::__construct_at_end(void *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = result;
  BOOL v4 = (void *)result[2];
  if (a2)
  {
    int v6 = &v4[3 * a2];
    uint64_t v7 = 24 * a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      uint64_t result = std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v4, *a3, a3[1], 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5));
      v4 += 3;
      v7 -= 24;
    }
    while (v7);
    BOOL v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1B240CF24(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,unsigned long,void>@<X0>(unint64_t *a1@<X1>, void *a2@<X8>)
{
  BOOL v4 = operator new(0x30uLL);
  uint64_t result = std::__shared_ptr_emplace<std::vector<double>>::__shared_ptr_emplace[abi:ne180100]<unsigned long,std::allocator<std::vector<double>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B240CF74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<std::vector<double>>::__shared_ptr_emplace[abi:ne180100]<unsigned long,std::allocator<std::vector<double>>,0>(void *a1, unint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62C18;
  std::vector<double>::vector(a1 + 3, *a2);
  return a1;
}

void sub_1B240CFD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void kaldi::FbankWithAudioAnalytics::FbankWithAudioAnalytics(kaldi::FbankWithAudioAnalytics *this, const kaldi::FbankWithAudioAnalyticsOptions *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = &unk_1F0A472F8;
  long long v4 = *(_OWORD *)((char *)a2 + 8);
  *(void *)((char *)this + 37) = *(void *)((char *)a2 + 21);
  *(_OWORD *)((char *)this + 24) = v4;
  size_t v5 = (std::string *)((char *)this + 48);
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 2);
    v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 6);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *((void *)this + 9) = *((void *)a2 + 7);
  long long v7 = *((_OWORD *)a2 + 4);
  long long v8 = *((_OWORD *)a2 + 5);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 24);
  *((_OWORD *)this + 5) = v7;
  *((_OWORD *)this + 6) = v8;
  *((void *)this + 2) = &unk_1F0A48330;
  *(_OWORD *)((char *)this + 116) = *(_OWORD *)((char *)a2 + 100);
  long long v9 = *(_OWORD *)((char *)a2 + 116);
  long long v10 = *(_OWORD *)((char *)a2 + 132);
  long long v11 = *(_OWORD *)((char *)a2 + 148);
  *(_OWORD *)((char *)this + 180) = *(_OWORD *)((char *)a2 + 164);
  *(_OWORD *)((char *)this + 164) = v11;
  *(_OWORD *)((char *)this + 148) = v10;
  *(_OWORD *)((char *)this + 132) = v9;
  long long v12 = *(_OWORD *)((char *)a2 + 180);
  long long v13 = *(_OWORD *)((char *)a2 + 196);
  long long v14 = *(_OWORD *)((char *)a2 + 212);
  *((unsigned char *)this + 244) = *((unsigned char *)a2 + 228);
  *(_OWORD *)((char *)this + 228) = v14;
  *(_OWORD *)((char *)this + 212) = v13;
  *(_OWORD *)((char *)this + 196) = v12;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 34) = (char *)this + 280;
  kaldi::FeatureWindowFunction::FeatureWindowFunction((kaldi::FbankWithAudioAnalytics *)((char *)this + 296), (const kaldi::FbankWithAudioAnalyticsOptions *)((char *)a2 + 8));
  *((void *)this + 40) = 0;
  *((_DWORD *)this + 86) = 0;
  if (*((unsigned char *)a2 + 99))
  {
    unint64_t v15 = operator new(0x90uLL);
    v15[1] = 0;
    void v15[2] = 0;
    int v16 = (int)*((float *)a2 + 3);
    void *v15 = &unk_1F0A5E768;
    v15[3] = 850045863;
    *((_OWORD *)v15 + 2) = 0u;
    *((_OWORD *)v15 + 3) = 0u;
    *((_OWORD *)v15 + 4) = 0u;
    *((_OWORD *)v15 + 5) = 0u;
    *((_OWORD *)v15 + 6) = 0u;
    *((_DWORD *)v15 + 28) = v16;
    v15[16] = 0;
    _OWORD v15[17] = 0;
    v15[15] = 0;
    unint64_t v17 = (std::__shared_weak_count *)*((void *)this + 1);
    *(void *)this = v15 + 3;
    *((void *)this + 1) = v15;
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
  float v18 = *((float *)a2 + 23);
  if (v18 > 0.0) {
    *((float *)this + 66) = logf(v18);
  }
  int v19 = kaldi::FrameExtractionOptions::PaddedWindowSize((const kaldi::FbankWithAudioAnalyticsOptions *)((char *)a2 + 8));
  if ((v19 & (v19 - 1)) == 0) {
    operator new();
  }
  kaldi::FbankWithAudioAnalytics::GetMelBanks(this, 1.0);
  operator new();
}

void sub_1B240D2D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::FbankWithAudioAnalytics::GetMelBanks(kaldi::FbankWithAudioAnalytics *this, float a2)
{
  uint64_t v2 = (char **)*((void *)this + 35);
  if (!v2) {
    goto LABEL_8;
  }
  uint64_t v3 = (float *)((char *)this + 280);
  do
  {
    long long v4 = v2 + 1;
    if (*((float *)v2 + 8) >= a2)
    {
      long long v4 = v2;
      uint64_t v3 = (float *)v2;
    }
    uint64_t v2 = (char **)*v4;
  }
  while (*v4);
  if (v3 == (float *)((char *)this + 280) || v3[8] > a2) {
LABEL_8:
  }
    operator new();
  return *((void *)v3 + 5);
}

void sub_1B240D470(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A0C409C5A7551);
  _Unwind_Resume(a1);
}

void kaldi::FbankWithAudioAnalytics::~FbankWithAudioAnalytics(kaldi::FbankWithAudioAnalytics *this)
{
  uint64_t v2 = (char *)*((void *)this + 34);
  uint64_t v3 = (char *)this + 280;
  if (v2 != (char *)this + 280)
  {
    do
    {
      uint64_t v4 = *((void *)v2 + 5);
      if (v4)
      {
        unint64_t v17 = (void **)(v4 + 24);
        std::vector<std::pair<int,kaldi::Vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v17);
        kaldi::Vector<float>::Destroy(v4);
        MEMORY[0x1B3EA8670](v4, 0x10A0C409C5A7551);
      }
      size_t v5 = (char *)*((void *)v2 + 1);
      if (v5)
      {
        do
        {
          long long v6 = v5;
          size_t v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          long long v6 = (char *)*((void *)v2 + 2);
          BOOL v7 = *(void *)v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
    }
    while (v6 != v3);
  }
  uint64_t v8 = *((void *)this + 40);
  if (v8)
  {
    uint64_t v9 = kaldi::SplitRadixComplexFft<float>::~SplitRadixComplexFft(v8);
    MEMORY[0x1B3EA8670](v9, 0x1090C40943DB512);
  }
  uint64_t v10 = *((void *)this + 31);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 64))(v10);
  }
  long long v11 = (kaldi::OnlineProcessPitch *)*((void *)this + 32);
  if (v11)
  {
    kaldi::OnlineProcessPitch::~OnlineProcessPitch(v11);
    MEMORY[0x1B3EA8670]();
  }
  uint64_t v12 = *((void *)this + 41);
  if (v12)
  {
    uint64_t v13 = kaldi::Matrix<float>::~Matrix(v12);
    MEMORY[0x1B3EA8670](v13, 0x1080C40EB13E0A1);
  }
  uint64_t v14 = *((void *)this + 42);
  if (v14)
  {
    uint64_t v15 = kaldi::Matrix<float>::~Matrix(v14);
    MEMORY[0x1B3EA8670](v15, 0x1080C40EB13E0A1);
  }
  kaldi::Vector<float>::Destroy((uint64_t)this + 296);
  std::__tree<int>::destroy((uint64_t)this + 272, *((void **)this + 35));
  kaldi::FbankOptions::~FbankOptions((void **)this + 2);
  int v16 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
}

void kaldi::FbankWithAudioAnalytics::Compute(kaldi::FbankWithAudioAnalytics *a1, uint64_t a2, int32x2_t *a3, uint64_t a4, int32x2_t *a5, int a6, float a7)
{
  uint64_t MelBanks = kaldi::FbankWithAudioAnalytics::GetMelBanks(a1, a7);
  kaldi::FbankWithAudioAnalytics::ComputeInternal((uint64_t)a1, a2, MelBanks, a3, a4, a5, a6);
}

void kaldi::FbankWithAudioAnalytics::ComputeInternal(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5, int32x2_t *a6, int a7)
{
  uint64_t v25 = (float *)(a1 + 24);
  int v28 = kaldi::NumFrames(*(_DWORD *)(a2 + 8), a1 + 24);
  int v11 = *(_DWORD *)(a1 + 80);
  int v12 = *(unsigned __int8 *)(a1 + 104);
  int v13 = *(_DWORD *)(a1 + 344);
  uint64_t v14 = *(void *)(a1 + 328);
  if (v14)
  {
    int v29 = kaldi::MatrixBase<float>::NumRows(v14);
    if (kaldi::MatrixBase<float>::NumRows(*(void *)(a1 + 336)) != v29)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"#remaining_frames for fbank ", 28);
      uint64_t v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" and energy ", 12);
      kaldi::MatrixBase<float>::NumRows(*(void *)(a1 + 336));
      int v16 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, " don't match!");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v44);
    }
  }
  else
  {
    int v29 = 0;
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v42);
  int v17 = kaldi::OnlineProcessAudioAnalytics::NumFramesReady(*(kaldi::OnlineProcessAudioAnalytics **)(a1 + 256));
  if (a5)
  {
    uint64_t v18 = (*(_DWORD *)(a2 + 8) - *(_DWORD *)(a5 + 8));
    uint64_t v46 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    kaldi::Vector<float>::Resize((void **)&v44, v18, 0);
    uint64_t v19 = *(int *)(a5 + 8);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v30 = *(void *)a2 + 4 * v19;
    LODWORD(v31) = v45;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v44, (const void **)&v30);
    (*(void (**)(void, uint64_t *, float))(**(void **)(a1 + 248) + 32))(*(void *)(a1 + 248), &v44, *(float *)(a1 + 116));
    kaldi::Vector<float>::Destroy((uint64_t)&v44);
  }
  else
  {
    (*(void (**)(void, uint64_t, float))(**(void **)(a1 + 248) + 32))(*(void *)(a1 + 248), a2, *(float *)(a1 + 116));
  }
  if (a7) {
    (*(void (**)(void))(**(void **)(a1 + 248) + 40))(*(void *)(a1 + 248));
  }
  uint64_t v24 = a2;
  uint64_t v20 = kaldi::OnlineProcessAudioAnalytics::NumFramesReady(*(kaldi::OnlineProcessAudioAnalytics **)(a1 + 256))
      - v17;
  if (a7)
  {
    int v21 = v20 - (v29 + v28);
    if (v21 < 0) {
      int v21 = v29 + v28 - v20;
    }
    if (v21 >= 2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"mismatch between finished audio analytics frames and remaining frames+new wav frames: ", 86);
      uint64_t v23 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" v.s. ", 6);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v44);
    }
    uint64_t v20 = (v29 + v28);
  }
  if (v20)
  {
    kaldi::Matrix<float>::Resize(v42, v20, *(unsigned int *)(*(void *)(a1 + 256) + 56), 0, 0);
    if (a6) {
      kaldi::Matrix<float>::Resize(a6, v20, *(unsigned int *)(*(void *)(a1 + 256) + 56), 0, 0);
    }
    if ((int)v20 >= 1)
    {
      int v22 = 0;
      do
      {
        uint64_t v45 = 0;
        uint64_t v46 = 0;
        uint64_t v44 = *(void *)v42 + 4 * v43 * v22;
        LODWORD(v45) = kaldi::MatrixBase<float>::NumCols((uint64_t)v42);
        kaldi::OnlineProcessAudioAnalytics::GetFrame(*(void *)(a1 + 256), v17 + v22++, (uint64_t)&v44);
      }
      while (v20 != v22);
    }
    kaldi::Matrix<float>::Resize(a4, v20, (v11 + v12 + v13), 0, 0);
  }
  else
  {
    kaldi::Matrix<float>::Resize(a4, 0, 0, 0, 0);
  }
  if (a5) {
    kaldi::ExtractWaveformRemainder(v24, v25, (void **)a5);
  }
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  BOOL v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  operator new();
}

void sub_1B240E24C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::ostringstream::~ostringstream((uint64_t)va);
  JUMPOUT(0x1B240E2C8);
}

void sub_1B240E2B8(_Unwind_Exception *a1)
{
}

void sub_1B240E2C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a64) {
    operator delete(a64);
  }
  kaldi::Vector<float>::Destroy((uint64_t)&a67);
  kaldi::Vector<float>::Destroy((uint64_t)&a70);
  JUMPOUT(0x1B240E2F8);
}

uint64_t quasar::KeywordSpottingSyncDecoder::KeywordSpottingSyncDecoder(uint64_t a1, long long *a2)
{
  uint64_t v3 = quasar::SyncDecoder::SyncDecoder(a1, a2);
  *(void *)uint64_t v3 = &unk_1F0A57380;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)(v3 + 176), "<blk>");
  *(void *)(a1 + 200) = 3240099840;
  *(_DWORD *)(a1 + 212) = 0;
  *(_WORD *)(a1 + 216) = 1;
  *(unsigned char *)(a1 + 218) = 0;
  *(unsigned char *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 276) = 1;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 304) = 0;
  *(void *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 384) = 9999;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 392) = 0;
  return a1;
}

void sub_1B240E3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 152);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 128);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v14 = *(std::__shared_weak_count **)(v10 + 120);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  quasar::KeywordSpottingSyncDecoder::KeywordSpottingSyncDecoder(v10, v12, v11);
  quasar::SyncDecoder::~SyncDecoder((quasar::SyncDecoder *)v10);
  _Unwind_Resume(a1);
}

void quasar::KeywordSpottingSyncDecoder::~KeywordSpottingSyncDecoder(void **this)
{
  *this = &unk_1F0A57380;
  uint64_t v4 = this + 49;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 383) < 0) {
    operator delete(this[45]);
  }
  uint64_t v4 = this + 42;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = this[39];
  if (v2)
  {
    this[40] = v2;
    operator delete(v2);
  }
  uint64_t v4 = this + 35;
  std::vector<quasar::MovingAverage>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = this + 28;
  std::vector<quasar::AMKeywordDetection>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 199) < 0) {
    operator delete(this[22]);
  }
  uint64_t v4 = this + 19;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = this + 16;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v3 = (std::__shared_weak_count *)this[15];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  quasar::SyncDecoder::~SyncDecoder((quasar::SyncDecoder *)this);
}

{
  uint64_t vars8;

  quasar::KeywordSpottingSyncDecoder::~KeywordSpottingSyncDecoder(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::KeywordSpottingSyncDecoder::registerParams(quasar::KeywordSpottingSyncDecoder *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "keyword-spotting");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 42, 0, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "threshold");
  std::string::basic_string[abi:ne180100]<0>(v4, "The threshold for the keyword score");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 200, (uint64_t)v4, 0, 42, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "frame-offset");
  std::string::basic_string[abi:ne180100]<0>(v4, "frame offset");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 204, (uint64_t)v4, 0, 42, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "do-viterbi");
  std::string::basic_string[abi:ne180100]<0>(v4, "apply viterbi for keyword detection");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 216, (uint64_t)v4, 0, 42, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "tokens-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "symbol table file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 64, (uint64_t)v4, 1, 42, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "keyword-list-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "list of keywords and their corresponding tokens sequence");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 88, (uint64_t)v4, 1, 42, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "batch-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "Number of frames that get decoded in one go");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 208, (uint64_t)v4, 0, 42, 108, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "do-batch-reset");
  std::string::basic_string[abi:ne180100]<0>(v4, "Reset scores after each result");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 217, (uint64_t)v4, 0, 89, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "do-top-result-only");
  std::string::basic_string[abi:ne180100]<0>(v4, "Only return the best keyword score");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 218, (uint64_t)v4, 0, 89, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "do-moving-avg");
  std::string::basic_string[abi:ne180100]<0>(v4, "Performs a moving average of the scores");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 272, (uint64_t)v4, 0, 223, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "moving-avg-window-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "Set the window size for the moving average");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 276, (uint64_t)v4, 0, 223, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "num-discriminative-branches");
  std::string::basic_string[abi:ne180100]<0>(v4, "Number of discriminative branch outputs to be decoded");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 304, (uint64_t)v4, 0, 245, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "discriminative-config-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Config to map the keywords to the discriminative branch numbersAlso specifies the weights to be used for combining the phonetic and discriminative scoresExpected format: <kwdToken> <discBranchId> <phoneticScoreScaleFactor> <discScoreScaleFactor>");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 360, (uint64_t)v4, 0, 245, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "num-frames-to-use");
  std::string::basic_string[abi:ne180100]<0>(v4, "Num of frames to use for decodingThis is specifically required when using discriminative branch as we need to use thediscriminative output coming out of the first block");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 384, (uint64_t)v4, 0, 248, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B240EB64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::KeywordSpottingSyncDecoder::setupDiscBranch(const std::string *this)
{
  v29[19] = *MEMORY[0x1E4F143B8];
  std::fstream::basic_fstream(&v28, this + 15, 8u);
  v26[0] = 0;
  v26[1] = 0;
  uint64_t v27 = 0;
  if (this[5].__r_.__value_.__r.__words[2] == this[5].__r_.__value_.__l.__size_
    || (int)(-1431655765 * ((this[5].__r_.__value_.__r.__words[2] - this[5].__r_.__value_.__l.__size_) >> 3)) < 1)
  {
    if (quasar::gLogLevel > 1)
    {
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v10 = 0u;
      long long v11 = 0u;
      *(_OWORD *)&v9[0].__locale_ = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"No keywords configured, ignore discriminative config", 52);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v9);
    }
  }
  else
  {
    std::ios_base::getloc((const std::ios_base *)((char *)&v28 + *((void *)v28.__sb_.__extbuf_ - 3)));
    uint64_t v3 = std::locale::use_facet(v9, MEMORY[0x1E4FBA258]);
    unsigned __int8 v4 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
    std::locale::~locale(v9);
    char v5 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v28, (uint64_t)v26, v4);
    if ((*((unsigned char *)v5 + *(void *)(*v5 - 24) + 32) & 5) == 0)
    {
      memset(&v8, 0, sizeof(v8));
      std::string::basic_string[abi:ne180100]<0>(&__p, " ");
      quasar::splitStringSimple((uint64_t)v26, (uint64_t *)&__p, (unint64_t)v9);
    }
    if (0xAAAAAAAAAAAAAAABLL
       * ((uint64_t)(this[5].__r_.__value_.__r.__words[2] - this[5].__r_.__value_.__l.__size_) >> 3) != (uint64_t)(this[13].__r_.__value_.__l.__size_ - this[13].__r_.__value_.__r.__words[0]) >> 2)
    {
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v10 = 0u;
      long long v11 = 0u;
      *(_OWORD *)&v9[0].__locale_ = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Mismatch in num keywords specified in discriminative config", 59);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v9);
    }
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  MEMORY[0x1B3EA7CF0](v28.__sb_.__extbuf_min_);
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](v29);
}

void sub_1B240F384()
{
}

void sub_1B240F3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::locale a19)
{
  std::locale::~locale(&a19);
  if (v21 < 0) {
    operator delete(v20);
  }
  std::fstream::~fstream(&v22);
  _Unwind_Resume(a1);
}

void sub_1B240F3F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char *a19)
{
  if (__p) {
    operator delete(__p);
  }
  a19 = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  JUMPOUT(0x1B240F418);
}

void quasar::KeywordSpottingSyncDecoder::finishInit(quasar::KeywordSpottingSyncDecoder *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)&v4);
  uint64_t Text = fst::SymbolTable::ReadText((uint64_t)this + 64);
  std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<fst::SymbolTable,void>(v3, Text);
}

void sub_1B240FFC4(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B2410024);
}

void sub_1B240FFD4(_Unwind_Exception *a1)
{
  if (v3) {
    operator delete(v3);
  }
  std::fstream v4 = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if ((v5[47] & 0x80000000) != 0) {
    operator delete(*(void **)(v1 + 304));
  }
  if ((v5[71] & 0x80000000) != 0) {
    operator delete(*(void **)(v1 + 328));
  }
  std::fstream::~fstream(&v6);
  _Unwind_Resume(a1);
}

void quasar::KeywordSpottingSyncDecoder::reset(quasar::KeywordSpottingSyncDecoder *this)
{
  uint64_t v2 = (quasar::AMKeywordDetection *)*((void *)this + 28);
  uint64_t v3 = (quasar::AMKeywordDetection *)*((void *)this + 29);
  while (v2 != v3)
  {
    quasar::AMKeywordDetection::init(v2);
    uint64_t v2 = (quasar::AMKeywordDetection *)((char *)v2 + 216);
  }
  std::fstream v4 = (quasar::MovingAverage *)*((void *)this + 35);
  uint64_t v5 = (quasar::MovingAverage *)*((void *)this + 36);
  while (v4 != v5)
  {
    quasar::MovingAverage::init(v4, *((int *)this + 69));
    std::fstream v4 = (quasar::MovingAverage *)((char *)v4 + 64);
  }
  *((_DWORD *)this + 53) = 0;
  uint64_t v6 = *((void *)this + 19);
  for (uint64_t i = *((void *)this + 20); v6 != i; v6 += 224)
  {
    *(_DWORD *)(v6 + 28) = 0;
    *(_DWORD *)(v6 + 32) = 0;
    *(void *)(v6 + 36) = 0xFF7FFFFF00000000;
  }
}

BOOL quasar::KeywordSpottingSyncDecoder::firstIsBetter(quasar::KeywordSpottingSyncDecoder *this, const quasar::Token *a2, const quasar::Token *a3)
{
  return *((float *)this + 10) > *((float *)a2 + 10);
}

uint64_t quasar::KeywordSpottingSyncDecoder::updateBestScores(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2 != *a2)
  {
    uint64_t v5 = result;
    for (unint64_t i = 0; 0x6DB6DB6DB6DB6DB7 * ((v2 - v3) >> 5) > i; ++i)
    {
      uint64_t v7 = v3 + 224 * i;
      uint64_t v8 = *(void *)(v5 + 152);
      uint64_t v9 = (unsigned __int8 **)(v8 + 224 * i);
      uint64_t v10 = *(unsigned __int8 *)(v7 + 23);
      if ((v10 & 0x80u) == 0) {
        long long v11 = (unsigned __int8 *)*(unsigned __int8 *)(v7 + 23);
      }
      else {
        long long v11 = *(unsigned __int8 **)(v7 + 8);
      }
      long long v12 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 23);
      int v13 = (char)v12;
      if ((char)v12 < 0) {
        long long v12 = v9[1];
      }
      if (v11 != v12) {
        goto LABEL_23;
      }
      if (v13 >= 0) {
        long long v14 = (unsigned __int8 *)(v8 + 224 * i);
      }
      else {
        long long v14 = *v9;
      }
      if ((v10 & 0x80) != 0)
      {
        uint64_t result = memcmp(*(const void **)v7, v14, *(void *)(v7 + 8));
        if (result) {
          goto LABEL_23;
        }
      }
      else if (*(unsigned char *)(v7 + 23))
      {
        long long v15 = (unsigned __int8 *)(v3 + 224 * i);
        while (*v15 == *v14)
        {
          ++v15;
          ++v14;
          if (!--v10) {
            goto LABEL_19;
          }
        }
LABEL_23:
        memset(v23, 0, 272);
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
        long long v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Coding error. Keyword ", 22);
        uint64_t v17 = *a2 + 224 * i;
        int v18 = *(char *)(v17 + 23);
        if (v18 >= 0) {
          uint64_t v19 = *a2 + 224 * i;
        }
        else {
          uint64_t v19 = *(void *)v17;
        }
        if (v18 >= 0) {
          uint64_t v20 = *(unsigned __int8 *)(v17 + 23);
        }
        else {
          uint64_t v20 = *(void *)(v17 + 8);
        }
        char v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v19, v20);
        long long v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" != ", 4);
        std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, *(void *)(v5 + 152) + 224 * i);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v23);
      }
LABEL_19:
      if (*(float *)(v3 + 224 * i + 40) > *(float *)(v8 + 224 * i + 40))
      {
        uint64_t result = quasar::Token::operator=(v8 + 224 * i, v3 + 224 * i);
        uint64_t v3 = *a2;
        uint64_t v2 = a2[1];
      }
    }
  }
  return result;
}

void quasar::KeywordSpottingSyncDecoder::addDiscriminativeScores(uint64_t a1, kaldi::OnlineFeatureMatrix **a2, signed int a3)
{
  kaldi::OnlineFeatureMatrix::GetFrame(*a2, a3, &v34);
  int v4 = *(_DWORD *)(a1 + 304);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  BOOL v33 = 0;
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v35 - v4;
    do
    {
      uint64_t v7 = v34;
      if (v5 >= v33)
      {
        uint64_t v9 = v31;
        uint64_t v10 = v5 - v31;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = (char *)v33 - (char *)v31;
        if (((char *)v33 - (char *)v31) >> 1 > v11) {
          unint64_t v11 = v12 >> 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v33, v13);
          uint64_t v9 = v31;
          uint64_t v5 = v32;
        }
        else
        {
          long long v14 = 0;
        }
        long long v15 = (float *)&v14[4 * v10];
        float *v15 = *(float *)(v7 + 4 * v6);
        uint64_t v8 = v15 + 1;
        while (v5 != v9)
        {
          int v16 = *((_DWORD *)v5-- - 1);
          *((_DWORD *)v15-- - 1) = v16;
        }
        uint64_t v31 = v15;
        uint64_t v32 = v8;
        BOOL v33 = (float *)&v14[4 * v13];
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        *uint64_t v5 = *(float *)(v34 + 4 * v6);
        uint64_t v8 = v5 + 1;
      }
      uint64_t v32 = v8;
      ++v6;
      uint64_t v5 = v8;
    }
    while (v6 < v35);
  }
  uint64_t v18 = *(void *)(a1 + 128);
  uint64_t v17 = *(void *)(a1 + 136);
  if (v17 != v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    int v22 = quasar::gLogLevel;
    do
    {
      *(float *)(*(void *)(a1 + 152) + v20 + 40) = (float)(v31[*(int *)(*(void *)(a1 + 312) + 4 * v21)]
                                                           * *(float *)(*(void *)(*(void *)(a1 + 336) + v19) + 4))
                                                   + (float)(**(float **)(*(void *)(a1 + 336) + v19)
                                                           * *(float *)(*(void *)(a1 + 152) + v20 + 40));
      if (v22 >= 4)
      {
        memset(v30, 0, sizeof(v30));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
        long long v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"KWD: ", 5);
        uint64_t v24 = *(void *)(a1 + 152) + v20;
        int v25 = *(char *)(v24 + 23);
        if (v25 >= 0) {
          uint64_t v26 = *(void *)(a1 + 152) + v20;
        }
        else {
          uint64_t v26 = *(void *)v24;
        }
        if (v25 >= 0) {
          uint64_t v27 = *(unsigned __int8 *)(v24 + 23);
        }
        else {
          uint64_t v27 = *(void *)(v24 + 8);
        }
        std::fstream v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v26, v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" CTC Score: ", 12);
        int v29 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" Disc Score: ", 13);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v30);
        int v22 = quasar::gLogLevel;
        uint64_t v18 = *(void *)(a1 + 128);
        uint64_t v17 = *(void *)(a1 + 136);
      }
      ++v21;
      v20 += 224;
      v19 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3) > v21);
  }
  if (v31)
  {
    uint64_t v32 = v31;
    operator delete(v31);
  }
}

void sub_1B2410550(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 144);
  if (v3)
  {
    *(void *)(v1 - 136) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::KeywordSpottingSyncDecoder::getResultTokens(quasar::KeywordSpottingSyncDecoder *this@<X0>, uint64_t *a2@<X8>)
{
  v41[1] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v19, *((void *)this + 19), *((void *)this + 20), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)this + 20) - *((void *)this + 19)) >> 5));
  unint64_t v2 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((v20 - v19) >> 5));
  int v16 = (uint64_t (*)(long long *, uint64_t))quasar::KeywordSpottingSyncDecoder::firstIsBetter;
  if (v20 == v19) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v2;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*,false>((long long *)v19, (long long *)v20, &v16, v3, 1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<std::vector<quasar::Token>>::reserve(a2, 0x6DB6DB6DB6DB6DB7 * ((v20 - v19) >> 5));
  int v4 = (long long *)v19;
  unint64_t v13 = (long long *)v20;
  if (v19 != v20)
  {
    do
    {
      long long v5 = *v4;
      uint64_t v25 = *((void *)v4 + 2);
      long long v24 = v5;
      *((void *)v4 + 1) = 0;
      *((void *)v4 + 2) = 0;
      *(void *)int v4 = 0;
      long long v6 = *(long long *)((char *)v4 + 24);
      *(void *)((char *)&v26[1] + 6) = *(void *)((char *)v4 + 38);
      *(_OWORD *)uint64_t v26 = v6;
      long long v7 = v4[3];
      v26[5] = *((void *)v4 + 8);
      *(_OWORD *)&v26[3] = v7;
      *((void *)v4 + 7) = 0;
      *((void *)v4 + 8) = 0;
      *((void *)v4 + 6) = 0;
      long long v27 = *(long long *)((char *)v4 + 72);
      uint64_t v28 = *((void *)v4 + 11);
      *((void *)v4 + 9) = 0;
      *((void *)v4 + 10) = 0;
      *((void *)v4 + 11) = 0;
      long long v8 = v4[6];
      uint64_t v30 = *((void *)v4 + 14);
      long long v29 = v8;
      *((void *)v4 + 13) = 0;
      *((void *)v4 + 14) = 0;
      *((void *)v4 + 12) = 0;
      long long v31 = *(long long *)((char *)v4 + 120);
      uint64_t v32 = *((void *)v4 + 17);
      *((void *)v4 + 15) = 0;
      *((void *)v4 + 16) = 0;
      *((void *)v4 + 17) = 0;
      long long v9 = v4[9];
      uint64_t v34 = *((void *)v4 + 20);
      long long v33 = v9;
      *((void *)v4 + 19) = 0;
      *((void *)v4 + 20) = 0;
      *((void *)v4 + 18) = 0;
      int v10 = *((_DWORD *)v4 + 42);
      __int16 v36 = *((_WORD *)v4 + 86);
      int v35 = v10;
      long long v11 = v4[11];
      uint64_t v38 = *((void *)v4 + 24);
      long long v37 = v11;
      *((void *)v4 + 23) = 0;
      *((void *)v4 + 24) = 0;
      *((void *)v4 + 22) = 0;
      long long v12 = *(long long *)((char *)v4 + 200);
      int v40 = *((_DWORD *)v4 + 54);
      long long v39 = v12;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      int v16 = 0;
      int v22 = &v16;
      char v23 = 0;
      int v16 = (uint64_t (*)(long long *, uint64_t))operator new(0xE0uLL);
      uint64_t v17 = v16;
      uint64_t v18 = (char *)v16 + 224;
      uint64_t v17 = (uint64_t (*)(long long *, uint64_t))std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token const*,quasar::Token const*,quasar::Token*>((uint64_t)&v18, (uint64_t)&v24, (uint64_t)v41, (uint64_t)v16);
      std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100](a2, (uint64_t)&v16);
      int v22 = &v16;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
      quasar::Token::~Token((void **)&v24);
      if (*((unsigned char *)this + 218)) {
        break;
      }
      v4 += 14;
    }
    while (v4 != v13);
  }
  *(void *)&long long v24 = &v19;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
}

void sub_1B2410848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  a21 = a12;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a21);
  a21 = (void **)&a16;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void quasar::KeywordSpottingSyncDecoder::updateProb(uint64_t a1, kaldi::OnlineFeatureMatrix **a2, signed int a3, uint64_t *a4)
{
  kaldi::OnlineFeatureMatrix::GetFrame(*a2, a3, &v13);
  int v6 = *(_DWORD *)(a1 + 304);
  if (v6 >= v14 || v6 <= 0) {
    int v6 = 0;
  }
  uint64_t v8 = (v14 - v6);
  std::vector<float>::vector(__p, (int)v8);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v13;
    long long v11 = __p[0];
    do
    {
      v11[v9] = *(_DWORD *)(v10 + 4 * v9);
      ++v9;
    }
    while (v8 != v9);
  }
  std::vector<std::vector<float>>::push_back[abi:ne180100](a4, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B241095C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::KeywordSpottingSyncDecoder::runSync(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  int v4 = *(void ***)(a2 + 88);
  long long v5 = (char *)*v4;
  int v6 = (char *)v4[1];
  while (v6 != v5)
  {
    v6 -= 24;
    v78[0] = v6;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v78);
  }
  v4[1] = v5;
  int v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v2 + 56) + 16) + 24))(*(void *)(*(void *)(v2 + 56) + 16));
  long long v96 = 0;
  long long v97 = 0;
  uint64_t v98 = 0;
  for (signed int i = *(_DWORD *)(a1 + 212); ; ++i)
  {
    BOOL IsValidFrame = kaldi::OnlineFeatureMatrix::IsValidFrame(*(int32x2_t **)(v2 + 56), i, 1);
    signed int v10 = *(_DWORD *)(a1 + 384);
    if (i >= v10 || !IsValidFrame) {
      break;
    }
    long long v12 = *(atomic_ullong **)(v2 + 64);
    v95[0] = *(kaldi::OnlineFeatureMatrix **)(v2 + 56);
    v95[1] = (kaldi::OnlineFeatureMatrix *)v12;
    if (v12) {
      atomic_fetch_add_explicit(v12 + 1, 1uLL, memory_order_relaxed);
    }
    quasar::KeywordSpottingSyncDecoder::updateProb(a1, v95, i, (uint64_t *)&v96);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v12);
    }
  }
  signed int v13 = *(_DWORD *)(a1 + 212);
  if (v13 < v10)
  {
    if (v97 == v96) {
      goto LABEL_95;
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (v97 - v96);
    if ((int)v14 < 1)
    {
      int v16 = 0;
    }
    else
    {
      unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * (v97 - v96);
      if (*(void *)(a1 + 256) != (uint64_t)(v96[1] - *v96) >> 2)
      {
        long long v93 = 0u;
        long long v94 = 0u;
        long long v91 = 0u;
        long long v92 = 0u;
        *(_OWORD *)std::string __p = 0u;
        long long v90 = 0u;
        *(_OWORD *)id v87 = 0u;
        long long v88 = 0u;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        *(_OWORD *)unint64_t v84 = 0u;
        *(_OWORD *)uint64_t v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        *(_OWORD *)uint64_t v78 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"Dimension mismatch. Code or DP error", 36);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v78);
      }
      uint64_t v15 = 0;
      int v16 = 0;
      uint64_t v17 = v14;
      uint64_t v64 = v7;
      if (v14 <= 1uLL) {
        uint64_t v17 = 1;
      }
      uint64_t v63 = v17;
      uint64_t v61 = v2;
      do
      {
        long long v65 = &v96[3 * v15];
        v75.__locale_ = 0;
        uint64_t v76 = 0;
        unint64_t v77 = 0;
        if (*(unsigned char *)(a1 + 272))
        {
          if (*(void *)(a1 + 136) != *(void *)(a1 + 128))
          {
            int v62 = v16;
            uint64_t v18 = 0;
            uint64_t v19 = 0;
            uint64_t v20 = 0;
            unint64_t v21 = 0;
            do
            {
              uint64_t v22 = *(int *)(a1 + 212);
              uint64_t v23 = *(int *)(a1 + 276);
              long long v24 = (quasar::MovingAverage *)(*(void *)(a1 + 280) + v18);
              quasar::MovingAverage::add(v24, *(float *)(*v65 + 4 * v21));
              float v25 = *(float *)(a1 + 204);
              uint64_t v26 = *(int *)(a1 + 212);
              long long v27 = *(long long **)(*(void *)(a1 + 128) + v19);
              if (*((char *)v27 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)v27, *((void *)v27 + 1));
              }
              else
              {
                long long v28 = *v27;
                v74.__r_.__value_.__r.__words[2] = *((void *)v27 + 2);
                *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v28;
              }
              float Average = quasar::MovingAverage::getAverage(v24);
              std::string::basic_string[abi:ne180100]<0>(v72, "");
              std::string::basic_string[abi:ne180100]<0>(v70, "");
              memset(v69, 0, sizeof(v69));
              std::string::basic_string[abi:ne180100]<0>(v67, "");
              quasar::Token::Token((std::string *)v78, (long long *)&v74, (int)(float)(v25 + (float)(((v15 + v22 - v23) & ~((v15 + v22 - v23) >> 63)) * v64)), (int)(float)(v25 + (float)((v15 + v26) * v64)), (int)(float)(v25 + (float)((v15 + v26) * v64)), 0, 0, (long long *)v72, Average, (long long *)v70, v69, 0, (long long *)v67, 0, 0);
              quasar::Token::operator=(*(void *)(a1 + 152) + v20, (long long *)v78);
              if (SBYTE7(v90) < 0) {
                operator delete(__p[0]);
              }
              if (SBYTE7(v88) < 0) {
                operator delete(v87[0]);
              }
              v99[0] = (void **)&v85 + 1;
              std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v99);
              if (SBYTE7(v85) < 0) {
                operator delete(v84[0]);
              }
              v99[0] = (void **)&v82 + 1;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v99);
              if (SBYTE7(v82) < 0) {
                operator delete(v81[0]);
              }
              if (SBYTE7(v79) < 0) {
                operator delete(v78[0]);
              }
              if (v68 < 0) {
                operator delete(v67[0]);
              }
              v67[0] = v69;
              std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v67);
              if (v71 < 0) {
                operator delete(v70[0]);
              }
              if (v73 < 0) {
                operator delete(v72[0]);
              }
              if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v74.__r_.__value_.__l.__data_);
              }
              ++v21;
              v20 += 224;
              v19 += 24;
              v18 += 64;
            }
            while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 3) > v21);
            uint64_t v2 = v61;
            int v16 = v62;
          }
        }
        else
        {
          long long v31 = *(quasar::AMKeywordDetection **)(a1 + 224);
          uint64_t v30 = *(quasar::AMKeywordDetection **)(a1 + 232);
          while (v31 != v30)
          {
            quasar::AMKeywordDetection::propagate(v31, v65, *(void *)(a1 + 264));
            LODWORD(v72[0]) = 0;
            LODWORD(v72[0]) = quasar::AMKeywordDetection::getScore(v31);
            uint64_t BestStartFrame = (uint64_t)quasar::AMKeywordDetection::getBestStartFrame(v31);
            if (BestStartFrame == -1) {
              uint64_t BestStartFrame = 0;
            }
            float v33 = *(float *)(a1 + 204);
            LODWORD(v70[0]) = (int)(float)(v33 + (float)(BestStartFrame * v64));
            LODWORD(v69[0]) = (int)(float)(v33 + (float)((v15 + *(_DWORD *)(a1 + 212)) * v64));
            kaldi::quasar::Vocab::OOvWord(v31, (std::string *)v78);
            LOBYTE(v67[0]) = 0;
            uint64_t v34 = v76;
            if ((unint64_t)v76 >= v77)
            {
              int v35 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<std::string,int &,int &,int &,float &,BOOL>((uint64_t *)&v75, (uint64_t)v78, (int *)v70, (int *)v69, (int *)v69, (float *)v72, (unsigned __int8 *)v67);
            }
            else
            {
              std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int &,int &,int &,float &,BOOL>((uint64_t)&v77, v76, (uint64_t)v78, (int *)v70, (int *)v69, (int *)v69, (float *)v72, (unsigned __int8 *)v67);
              int v35 = (std::string *)((char *)v34 + 224);
            }
            uint64_t v76 = v35;
            if (SBYTE7(v79) < 0) {
              operator delete(v78[0]);
            }
            if (*(float *)v72 > *(float *)(a1 + 200))
            {
              if (quasar::gLogLevel >= 4)
              {
                __int16 v36 = v76;
                long long v93 = 0u;
                long long v94 = 0u;
                long long v91 = 0u;
                long long v92 = 0u;
                *(_OWORD *)std::string __p = 0u;
                long long v90 = 0u;
                *(_OWORD *)id v87 = 0u;
                long long v88 = 0u;
                long long v85 = 0u;
                long long v86 = 0u;
                long long v83 = 0u;
                *(_OWORD *)unint64_t v84 = 0u;
                *(_OWORD *)uint64_t v81 = 0u;
                long long v82 = 0u;
                long long v79 = 0u;
                long long v80 = 0u;
                *(_OWORD *)uint64_t v78 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
                long long v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"KWD ", 4);
                int v38 = v36[-9].__r_.__value_.__s.__data_[15];
                if (v38 >= 0) {
                  uint64_t v39 = (uint64_t)&v36[-10].__r_.__value_.__r.__words[2];
                }
                else {
                  uint64_t v39 = v36[-10].__r_.__value_.__r.__words[2];
                }
                if (v38 >= 0) {
                  uint64_t data = v36[-9].__r_.__value_.__s.__data_[15];
                }
                else {
                  uint64_t data = (uint64_t)v36[-9].__r_.__value_.__l.__data_;
                }
                uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v39, data);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" ", 1);
                unint64_t v42 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" ", 1);
                int v43 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" ", 1);
                std::ostream::operator<<();
                quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v78);
              }
              ++v16;
            }
            long long v31 = (quasar::AMKeywordDetection *)((char *)v31 + 216);
          }
          quasar::KeywordSpottingSyncDecoder::updateBestScores(a1, (uint64_t *)&v75);
        }
        v78[0] = &v75;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v78);
        ++v15;
      }
      while (v15 != v63);
      signed int v13 = *(_DWORD *)(a1 + 212);
      LODWORD(v14) = v60;
    }
    *(_DWORD *)(a1 + 212) = v13 + v14;
    if (quasar::gLogLevel > 4)
    {
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v90 = 0u;
      *(_OWORD *)id v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      *(_OWORD *)unint64_t v84 = 0u;
      *(_OWORD *)uint64_t v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      *(_OWORD *)uint64_t v78 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"Frames seen so far: ", 20);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v78);
    }
    if (*(int *)(a1 + 304) >= 1)
    {
      uint64_t v47 = *(atomic_ullong **)(v2 + 64);
      v66[0] = *(kaldi::OnlineFeatureMatrix **)(v2 + 56);
      v66[1] = (kaldi::OnlineFeatureMatrix *)v47;
      if (v47) {
        atomic_fetch_add_explicit(v47 + 1, 1uLL, memory_order_relaxed);
      }
      quasar::KeywordSpottingSyncDecoder::addDiscriminativeScores(a1, v66, *(_DWORD *)(a1 + 212) - 1);
      if (v47) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v47);
      }
    }
    if (v16 < 1)
    {
      if (quasar::gLogLevel >= 4)
      {
        long long v93 = 0u;
        long long v94 = 0u;
        long long v91 = 0u;
        long long v92 = 0u;
        *(_OWORD *)std::string __p = 0u;
        long long v90 = 0u;
        *(_OWORD *)id v87 = 0u;
        long long v88 = 0u;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        *(_OWORD *)unint64_t v84 = 0u;
        *(_OWORD *)uint64_t v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        *(_OWORD *)uint64_t v78 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
        int v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"no keywords detected", 20);
        std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(void *)(*v50 - 24)));
        uint64_t v51 = std::locale::use_facet(&v75, MEMORY[0x1E4FBA258]);
        ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
        std::locale::~locale(&v75);
        std::ostream::put();
        std::ostream::flush();
LABEL_87:
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v78);
        if (quasar::gLogLevel >= 4)
        {
          long long v93 = 0u;
          long long v94 = 0u;
          long long v91 = 0u;
          long long v92 = 0u;
          *(_OWORD *)std::string __p = 0u;
          long long v90 = 0u;
          *(_OWORD *)id v87 = 0u;
          long long v88 = 0u;
          long long v85 = 0u;
          long long v86 = 0u;
          long long v83 = 0u;
          *(_OWORD *)unint64_t v84 = 0u;
          *(_OWORD *)uint64_t v81 = 0u;
          long long v82 = 0u;
          long long v79 = 0u;
          long long v80 = 0u;
          *(_OWORD *)uint64_t v78 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"keyword search finished with ", 29);
          unint64_t v52 = (void *)std::ostream::operator<<();
          long long v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" detected hypothesis.", 21);
          std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(*v53 - 24)));
          double v54 = std::locale::use_facet(&v75, MEMORY[0x1E4FBA258]);
          ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
          std::locale::~locale(&v75);
          std::ostream::put();
          std::ostream::flush();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v78);
        }
      }
    }
    else if (quasar::gLogLevel >= 4)
    {
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v90 = 0u;
      *(_OWORD *)id v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      *(_OWORD *)unint64_t v84 = 0u;
      *(_OWORD *)uint64_t v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      *(_OWORD *)uint64_t v78 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
      uint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"keyword detected", 16);
      std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(void *)(*v48 - 24)));
      unint64_t v49 = std::locale::use_facet(&v75, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
      std::locale::~locale(&v75);
      std::ostream::put();
      std::ostream::flush();
      goto LABEL_87;
    }
    if (*(unsigned char *)(a1 + 217))
    {
      uint64_t v55 = *(void *)(a1 + 152);
      for (uint64_t j = *(void *)(a1 + 160); v55 != j; v55 += 224)
      {
        *(_DWORD *)(v55 + 28) = 0;
        *(_DWORD *)(v55 + 32) = 0;
        *(void *)(v55 + 36) = 0xFF7FFFFF00000000;
      }
    }
    quasar::KeywordSpottingSyncDecoder::getResultTokens((quasar::KeywordSpottingSyncDecoder *)a1, (uint64_t *)v78);
    uint64_t v57 = *(void *)(v2 + 88);
    std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)v57);
    *(_OWORD *)uint64_t v57 = *(_OWORD *)v78;
    *(void *)(v57 + 16) = v79;
    v78[0] = 0;
    v78[1] = 0;
    *(void *)&long long v79 = 0;
    v75.__locale_ = (std::locale::__imp *)v78;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
    if (*(_DWORD *)(a1 + 212) >= *(_DWORD *)(a1 + 384))
    {
      uint64_t v58 = *(uint64_t ***)(v2 + 88);
      if ((uint64_t **)(a1 + 392) != v58) {
        std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1 + 392, *v58, v58[1], 0xAAAAAAAAAAAAAAABLL * (v58[1] - *v58));
      }
    }
    goto LABEL_95;
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v90 = 0u;
    *(_OWORD *)id v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    *(_OWORD *)unint64_t v84 = 0u;
    *(_OWORD *)uint64_t v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    *(_OWORD *)uint64_t v78 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"framesSeenSoFar: ", 17);
    uint64_t v44 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" hit numFramesToUse: ", 21);
    uint64_t v45 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)", use the tokens result from cutoff", 35);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v78);
  }
  uint64_t v46 = *(void *)(v2 + 88);
  if (v46 != a1 + 392) {
    std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v46, *(uint64_t **)(a1 + 392), *(uint64_t **)(a1 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 400) - *(void *)(a1 + 392)) >> 3));
  }
LABEL_95:
  v78[0] = &v96;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v78);
  return 1;
}

void sub_1B24114D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,std::locale a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  std::string __p = (void *)(v60 - 152);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*,false>(long long *a1, long long *a2, uint64_t (**a3)(long long *, uint64_t), uint64_t a4, char a5)
{
void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(uint64_t a1, void **a2, uint64_t (**a3)(void **, uint64_t))
{
  if ((void **)a1 != a2)
  {
    char v5 = (void **)(a1 + 224);
    if ((void **)(a1 + 224) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = a1;
      do
      {
        uint64_t v9 = v5;
        if ((*a3)(v5, v8))
        {
          *(_OWORD *)uint64_t v14 = *(_OWORD *)v9;
          unint64_t v15 = v9[2];
          v9[1] = 0;
          std::locale v9[2] = 0;
          *uint64_t v9 = 0;
          *(_OWORD *)unint64_t v16 = *(_OWORD *)(v8 + 248);
          *(void *)&v16[14] = *(void *)(v8 + 262);
          long long v17 = *(_OWORD *)(v8 + 272);
          uint64_t v18 = *(void *)(v8 + 288);
          *(void *)(v8 + 272) = 0;
          *(void *)(v8 + 280) = 0;
          *(void *)(v8 + 288) = 0;
          long long v19 = *(_OWORD *)(v8 + 296);
          uint64_t v20 = *(void *)(v8 + 312);
          *(void *)(v8 + 296) = 0;
          *(void *)(v8 + 304) = 0;
          *(void *)(v8 + 312) = 0;
          long long v21 = *(_OWORD *)(v8 + 320);
          uint64_t v22 = *(void *)(v8 + 336);
          *(void *)(v8 + 320) = 0;
          *(void *)(v8 + 328) = 0;
          *(void *)(v8 + 336) = 0;
          long long v23 = *(_OWORD *)(v8 + 344);
          uint64_t v24 = *(void *)(v8 + 360);
          *(void *)(v8 + 344) = 0;
          *(void *)(v8 + 352) = 0;
          *(void *)(v8 + 360) = 0;
          long long v25 = *(_OWORD *)(v8 + 368);
          uint64_t v26 = *(void *)(v8 + 384);
          *(void *)(v8 + 368) = 0;
          *(void *)(v8 + 376) = 0;
          *(void *)(v8 + 384) = 0;
          int v27 = *(_DWORD *)(v8 + 392);
          __int16 v28 = *(_WORD *)(v8 + 396);
          uint64_t v30 = *(void *)(v8 + 416);
          long long __p = *(_OWORD *)(v8 + 400);
          *(void *)(v8 + 400) = 0;
          *(void *)(v8 + 408) = 0;
          *(void *)(v8 + 416) = 0;
          long long v10 = *(_OWORD *)(v8 + 424);
          int v32 = *(_DWORD *)(v8 + 440);
          uint64_t v11 = v7;
          long long v31 = v10;
          while (1)
          {
            quasar::Token::operator=(a1 + v11 + 224, (long long *)(a1 + v11));
            if (!v11) {
              break;
            }
            char v12 = (*a3)(v14, a1 + v11 - 224);
            v11 -= 224;
            if ((v12 & 1) == 0)
            {
              uint64_t v13 = a1 + v11 + 224;
              goto LABEL_10;
            }
          }
          uint64_t v13 = a1;
LABEL_10:
          quasar::Token::operator=(v13, (long long *)v14);
          if (SHIBYTE(v30) < 0) {
            operator delete((void *)__p);
          }
          if (SHIBYTE(v26) < 0) {
            operator delete((void *)v25);
          }
          v33[0] = (void **)&v23;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v33);
          if (SHIBYTE(v22) < 0) {
            operator delete((void *)v21);
          }
          v33[0] = (void **)&v19;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v33);
          if (SHIBYTE(v18) < 0) {
            operator delete((void *)v17);
          }
          if (SHIBYTE(v15) < 0) {
            operator delete(v14[0]);
          }
        }
        char v5 = v9 + 28;
        v7 += 224;
        uint64_t v8 = (uint64_t)v9;
      }
      while (v9 + 28 != a2);
    }
  }
}

void sub_1B2411CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  quasar::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(void **a1, void **a2, uint64_t (**a3)(void **, uint64_t))
{
  if (a1 != a2)
  {
    int v4 = a1;
    char v5 = a1 + 28;
    if (a1 + 28 != a2)
    {
      do
      {
        uint64_t v7 = v5;
        if ((*a3)(v5, (uint64_t)v4))
        {
          *(_OWORD *)uint64_t v9 = *(_OWORD *)v7;
          long long v10 = v7[2];
          v7[1] = 0;
          void v7[2] = 0;
          double *v7 = 0;
          *(_OWORD *)uint64_t v11 = *(_OWORD *)(v4 + 31);
          *(void *)&v11[14] = *(void **)((char *)v4 + 262);
          long long v12 = *((_OWORD *)v4 + 17);
          uint64_t v13 = v4[36];
          void v4[34] = 0;
          v4[35] = 0;
          v4[36] = 0;
          long long v14 = *(_OWORD *)(v4 + 37);
          unint64_t v15 = v4[39];
          v4[37] = 0;
          v4[38] = 0;
          v4[39] = 0;
          long long v16 = *((_OWORD *)v4 + 20);
          long long v17 = v4[42];
          unsigned char v4[40] = 0;
          v4[41] = 0;
          v4[42] = 0;
          long long v18 = *(_OWORD *)(v4 + 43);
          long long v19 = v4[45];
          v4[43] = 0;
          v4[44] = 0;
          v4[45] = 0;
          long long v20 = *((_OWORD *)v4 + 23);
          long long v21 = v4[48];
          v4[46] = 0;
          v4[47] = 0;
          v4[48] = 0;
          int v22 = *((_DWORD *)v4 + 98);
          __int16 v23 = *((_WORD *)v4 + 198);
          long long v25 = v4[52];
          long long __p = *((_OWORD *)v4 + 25);
          v4[50] = 0;
          v4[51] = 0;
          v4[52] = 0;
          long long v8 = *(_OWORD *)(v4 + 53);
          int v27 = *((_DWORD *)v4 + 110);
          long long v26 = v8;
          do
          {
            quasar::Token::operator=((uint64_t)(v4 + 28), (long long *)v4);
            v4 -= 28;
          }
          while (((*a3)(v9, (uint64_t)v4) & 1) != 0);
          quasar::Token::operator=((uint64_t)(v4 + 28), (long long *)v9);
          if (SHIBYTE(v25) < 0) {
            operator delete((void *)__p);
          }
          if (SHIBYTE(v21) < 0) {
            operator delete((void *)v20);
          }
          v28[0] = (void **)&v18;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v28);
          if (SHIBYTE(v17) < 0) {
            operator delete((void *)v16);
          }
          v28[0] = (void **)&v14;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v28);
          if (SHIBYTE(v13) < 0) {
            operator delete((void *)v12);
          }
          if (SHIBYTE(v10) < 0) {
            operator delete(v9[0]);
          }
        }
        char v5 = v7 + 28;
        int v4 = v7;
      }
      while (v7 + 28 != a2);
    }
  }
}

void sub_1B2411F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  quasar::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(uint64_t a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, uint64_t))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, (uint64_t)a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    std::swap[abi:ne180100]<quasar::Token>((uint64_t)a2, a3);
    if (!(*a4)(a2, a1)) {
      return 1;
    }
    uint64_t v10 = a1;
    uint64_t v11 = a2;
    goto LABEL_9;
  }
  if (!result)
  {
    std::swap[abi:ne180100]<quasar::Token>(a1, a2);
    if (!(*a4)(a3, (uint64_t)a2)) {
      return 1;
    }
    uint64_t v10 = (uint64_t)a2;
    uint64_t v11 = a3;
LABEL_9:
    std::swap[abi:ne180100]<quasar::Token>(v10, v11);
    return 2;
  }
  std::swap[abi:ne180100]<quasar::Token>(a1, a3);
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,quasar::Token *,BOOL (*&)(quasar::Token const&,quasar::Token const&)>(uint64_t a1, long long *a2, uint64_t (**a3)(void **, unint64_t))
{
  int v4 = a2;
  *(_OWORD *)unint64_t v15 = *(_OWORD *)a1;
  uint64_t v16 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_OWORD *)long long v17 = *(_OWORD *)(a1 + 24);
  *(void *)&v17[14] = *(void *)(a1 + 38);
  *(_OWORD *)long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 64);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  long long v20 = *(_OWORD *)(a1 + 72);
  uint64_t v21 = *(void *)(a1 + 88);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  long long v6 = *(_OWORD *)(a1 + 96);
  uint64_t v23 = *(void *)(a1 + 112);
  *(_OWORD *)int v22 = v6;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  long long v24 = *(_OWORD *)(a1 + 120);
  uint64_t v25 = *(void *)(a1 + 136);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  long long v7 = *(_OWORD *)(a1 + 144);
  uint64_t v27 = *(void *)(a1 + 160);
  *(_OWORD *)long long v26 = v7;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  int v8 = *(_DWORD *)(a1 + 168);
  __int16 v29 = *(_WORD *)(a1 + 172);
  int v28 = v8;
  long long v9 = *(_OWORD *)(a1 + 176);
  uint64_t v31 = *(void *)(a1 + 192);
  *(_OWORD *)long long __p = v9;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  long long v10 = *(_OWORD *)(a1 + 200);
  int v33 = *(_DWORD *)(a1 + 216);
  long long v32 = v10;
  if ((*a3)(v15, (unint64_t)(a2 - 14)))
  {
    unint64_t v11 = a1;
    do
      v11 += 224;
    while (((*a3)(v15, v11) & 1) == 0);
  }
  else
  {
    unint64_t v12 = a1 + 224;
    do
    {
      unint64_t v11 = v12;
      if (v12 >= (unint64_t)v4) {
        break;
      }
      int v13 = (*a3)(v15, v12);
      unint64_t v12 = v11 + 224;
    }
    while (!v13);
  }
  if (v11 < (unint64_t)v4)
  {
    do
      v4 -= 14;
    while (((*a3)(v15, (unint64_t)v4) & 1) != 0);
  }
  while (v11 < (unint64_t)v4)
  {
    std::swap[abi:ne180100]<quasar::Token>(v11, v4);
    do
      v11 += 224;
    while (!(*a3)(v15, v11));
    do
      v4 -= 14;
    while (((*a3)(v15, (unint64_t)v4) & 1) != 0);
  }
  if (v11 - 224 != a1) {
    quasar::Token::operator=(a1, (long long *)(v11 - 224));
  }
  quasar::Token::operator=(v11 - 224, (long long *)v15);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  uint64_t v34 = (void **)&v24;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v34);
  if (SHIBYTE(v23) < 0) {
    operator delete(v22[0]);
  }
  uint64_t v34 = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v34);
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[0]);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
  return v11;
}

void sub_1B24122A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

long long *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,quasar::Token *,BOOL (*&)(quasar::Token const&,quasar::Token const&)>(uint64_t a1, long long *a2, uint64_t (**a3)(uint64_t, void **))
{
  uint64_t v6 = 0;
  *(_OWORD *)long long v17 = *(_OWORD *)a1;
  uint64_t v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_OWORD *)uint64_t v19 = *(_OWORD *)(a1 + 24);
  *(void *)&v19[14] = *(void *)(a1 + 38);
  *(_OWORD *)long long v20 = *(_OWORD *)(a1 + 48);
  uint64_t v21 = *(void *)(a1 + 64);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  long long v22 = *(_OWORD *)(a1 + 72);
  uint64_t v23 = *(void *)(a1 + 88);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  long long v7 = *(_OWORD *)(a1 + 96);
  uint64_t v25 = *(void *)(a1 + 112);
  *(_OWORD *)long long v24 = v7;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  long long v26 = *(_OWORD *)(a1 + 120);
  uint64_t v27 = *(void *)(a1 + 136);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  long long v8 = *(_OWORD *)(a1 + 144);
  uint64_t v29 = *(void *)(a1 + 160);
  *(_OWORD *)int v28 = v8;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  __int16 v31 = *(_WORD *)(a1 + 172);
  int v30 = *(_DWORD *)(a1 + 168);
  long long v9 = *(_OWORD *)(a1 + 176);
  uint64_t v33 = *(void *)(a1 + 192);
  *(_OWORD *)long long __p = v9;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  long long v10 = *(_OWORD *)(a1 + 200);
  int v35 = *(_DWORD *)(a1 + 216);
  long long v34 = v10;
  do
  {
    char v11 = (*a3)(a1 + v6 + 224, v17);
    v6 += 224;
  }
  while ((v11 & 1) != 0);
  unint64_t v12 = a1 + v6;
  if (v6 == 224)
  {
    do
    {
      if (v12 >= (unint64_t)a2) {
        break;
      }
      a2 -= 14;
    }
    while (((*a3)((uint64_t)a2, v17) & 1) == 0);
  }
  else
  {
    do
      a2 -= 14;
    while (!(*a3)((uint64_t)a2, v17));
  }
  if (v12 >= (unint64_t)a2)
  {
    unint64_t v15 = (long long *)(v12 - 224);
  }
  else
  {
    unint64_t v13 = a1 + v6;
    long long v14 = a2;
    do
    {
      std::swap[abi:ne180100]<quasar::Token>(v13, v14);
      do
        v13 += 224;
      while (((*a3)(v13, v17) & 1) != 0);
      do
        v14 -= 14;
      while (!(*a3)((uint64_t)v14, v17));
    }
    while (v13 < (unint64_t)v14);
    unint64_t v15 = (long long *)(v13 - 224);
  }
  if (v15 != (long long *)a1) {
    quasar::Token::operator=(a1, v15);
  }
  quasar::Token::operator=((uint64_t)v15, (long long *)v17);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(v28[0]);
  }
  __int16 v36 = (void **)&v26;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v36);
  if (SHIBYTE(v25) < 0) {
    operator delete(v24[0]);
  }
  __int16 v36 = (void **)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v36);
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
  return v15;
}

void sub_1B2412550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(long long *a1, long long *a2, uint64_t (**a3)(long long *, uint64_t))
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2 - 14, (uint64_t)a1)) {
        std::swap[abi:ne180100]<quasar::Token>((uint64_t)a1, a2 - 14);
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>((uint64_t)a1, a1 + 14, a2 - 14, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>((uint64_t)a1, a1 + 14, a1 + 28, a2 - 14, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>((uint64_t)a1, a1 + 14, a1 + 28, a1 + 42, a2 - 14, a3);
      return 1;
    default:
      long long v8 = a1 + 28;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>((uint64_t)a1, a1 + 14, a1 + 28, a3);
      long long v9 = a1 + 42;
      if (a1 + 42 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v9, (uint64_t)v8))
    {
      *(_OWORD *)long long v20 = *v9;
      uint64_t v21 = *((void *)v9 + 2);
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *(void *)long long v9 = 0;
      *(_OWORD *)long long v22 = *(long long *)((char *)v9 + 24);
      *(void *)&v22[14] = *(void *)((char *)v9 + 38);
      long long v23 = v9[3];
      uint64_t v24 = *((void *)v9 + 8);
      *((void *)v9 + 6) = 0;
      *((void *)v9 + 7) = 0;
      long long v25 = *(long long *)((char *)v9 + 72);
      uint64_t v26 = *((void *)v9 + 11);
      *((void *)v9 + 8) = 0;
      *((void *)v9 + 9) = 0;
      *((void *)v9 + 10) = 0;
      *((void *)v9 + 11) = 0;
      long long v12 = v9[6];
      uint64_t v28 = *((void *)v9 + 14);
      long long v27 = v12;
      *((void *)v9 + 12) = 0;
      *((void *)v9 + 13) = 0;
      long long v29 = *(long long *)((char *)v9 + 120);
      uint64_t v30 = *((void *)v9 + 17);
      *((void *)v9 + 14) = 0;
      *((void *)v9 + 15) = 0;
      *((void *)v9 + 16) = 0;
      *((void *)v9 + 17) = 0;
      long long v13 = v9[9];
      uint64_t v32 = *((void *)v9 + 20);
      long long v31 = v13;
      *((void *)v9 + 18) = 0;
      *((void *)v9 + 19) = 0;
      *((void *)v9 + 20) = 0;
      int v14 = *((_DWORD *)v9 + 42);
      __int16 v34 = *((_WORD *)v9 + 86);
      int v33 = v14;
      long long v15 = v9[11];
      uint64_t v36 = *((void *)v9 + 24);
      long long __p = v15;
      *((void *)v9 + 22) = 0;
      *((void *)v9 + 23) = 0;
      *((void *)v9 + 24) = 0;
      long long v16 = *(long long *)((char *)v9 + 200);
      int v38 = *((_DWORD *)v9 + 54);
      uint64_t v17 = v10;
      long long v37 = v16;
      while (1)
      {
        quasar::Token::operator=((uint64_t)a1 + v17 + 672, (long long *)((char *)a1 + v17 + 448));
        if (v17 == -448) {
          break;
        }
        char v18 = (*a3)((long long *)v20, (uint64_t)a1 + v17 + 224);
        v17 -= 224;
        if ((v18 & 1) == 0)
        {
          uint64_t v19 = (uint64_t)a1 + v17 + 672;
          goto LABEL_12;
        }
      }
      uint64_t v19 = (uint64_t)a1;
LABEL_12:
      quasar::Token::operator=(v19, (long long *)v20);
      if (SHIBYTE(v36) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v32) < 0) {
        operator delete((void *)v31);
      }
      v39[0] = (void **)&v29;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v39);
      if (SHIBYTE(v28) < 0) {
        operator delete((void *)v27);
      }
      v39[0] = (void **)&v25;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v39);
      if (SHIBYTE(v24) < 0) {
        operator delete((void *)v23);
      }
      if (SHIBYTE(v21) < 0) {
        operator delete(v20[0]);
      }
      if (++v11 == 8) {
        return v9 + 14 == a2;
      }
    }
    long long v8 = v9;
    v10 += 224;
    v9 += 14;
    if (v9 == a2) {
      return 1;
    }
  }
}

void sub_1B24128D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  quasar::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(uint64_t a1, long long *a2, long long *a3, long long *a4, uint64_t (**a5)(long long *, uint64_t))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(a1, a2, a3, a5);
  if ((*a5)(a4, (uint64_t)a3))
  {
    std::swap[abi:ne180100]<quasar::Token>((uint64_t)a3, a4);
    if ((*a5)(a3, (uint64_t)a2))
    {
      std::swap[abi:ne180100]<quasar::Token>((uint64_t)a2, a3);
      if ((*a5)(a2, a1))
      {
        std::swap[abi:ne180100]<quasar::Token>(a1, a2);
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(uint64_t a1, long long *a2, long long *a3, long long *a4, long long *a5, uint64_t (**a6)(long long *, uint64_t))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(a1, a2, a3, a4, a6);
  if ((*a6)(a5, (uint64_t)a4))
  {
    std::swap[abi:ne180100]<quasar::Token>((uint64_t)a4, a5);
    if ((*a6)(a4, (uint64_t)a3))
    {
      std::swap[abi:ne180100]<quasar::Token>((uint64_t)a3, a4);
      if ((*a6)(a3, (uint64_t)a2))
      {
        std::swap[abi:ne180100]<quasar::Token>((uint64_t)a2, a3);
        if ((*a6)(a2, a1))
        {
          std::swap[abi:ne180100]<quasar::Token>(a1, a2);
        }
      }
    }
  }
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*,quasar::Token*>(long long *a1, long long *a2, uint64_t a3, uint64_t (**a4)(long long *, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) / 224;
    if ((char *)a2 - (char *)a1 >= 225)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t)&a1[14 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>((uint64_t)a1, a4, v9, v12);
        v12 -= 224;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if ((*a4)((long long *)v14, (uint64_t)a1))
        {
          std::swap[abi:ne180100]<quasar::Token>(v14, a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>((uint64_t)a1, a4, v9, (uint64_t)a1);
        }
        v14 += 224;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 225)
    {
      unint64_t v15 = (((unint64_t)v8 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(quasar::Token const&,quasar::Token const&),quasar::Token*>((uint64_t)a1, v6, (unsigned int (**)(uint64_t, uint64_t))a4, v15);
        v6 -= 224;
      }
      while (v15-- > 2);
    }
    return v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(uint64_t a1, uint64_t (**a2)(long long *, uint64_t), uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x6DB6DB6DB6DB6DB7 * ((a4 - a1) >> 5))
    {
      int64_t v10 = (0xDB6DB6DB6DB6DB6ELL * ((a4 - a1) >> 5)) | 1;
      unint64_t v11 = (long long *)(a1 + 224 * v10);
      int64_t v12 = 0xDB6DB6DB6DB6DB6ELL * ((a4 - a1) >> 5) + 2;
      if (v12 < a3 && (*a2)((long long *)(a1 + 224 * v10), (uint64_t)(v11 + 14)))
      {
        v11 += 14;
        int64_t v10 = v12;
      }
      if (((*a2)(v11, v5) & 1) == 0)
      {
        *(_OWORD *)long long v20 = *(_OWORD *)v5;
        uint64_t v21 = *(void *)(v5 + 16);
        *(void *)(v5 + 8) = 0;
        *(void *)(v5 + 16) = 0;
        *(void *)uint64_t v5 = 0;
        *(_OWORD *)long long v22 = *(_OWORD *)(v5 + 24);
        *(void *)&v22[14] = *(void *)(v5 + 38);
        *(_OWORD *)long long v23 = *(_OWORD *)(v5 + 48);
        uint64_t v24 = *(void *)(v5 + 64);
        *(void *)(v5 + 48) = 0;
        *(void *)(v5 + 56) = 0;
        long long v25 = *(_OWORD *)(v5 + 72);
        uint64_t v26 = *(void *)(v5 + 88);
        *(void *)(v5 + 64) = 0;
        *(void *)(v5 + 72) = 0;
        *(void *)(v5 + 80) = 0;
        *(void *)(v5 + 88) = 0;
        long long v13 = *(_OWORD *)(v5 + 96);
        uint64_t v28 = *(void *)(v5 + 112);
        *(_OWORD *)long long v27 = v13;
        *(void *)(v5 + 96) = 0;
        *(void *)(v5 + 104) = 0;
        long long v29 = *(_OWORD *)(v5 + 120);
        uint64_t v30 = *(void *)(v5 + 136);
        *(void *)(v5 + 112) = 0;
        *(void *)(v5 + 120) = 0;
        *(void *)(v5 + 128) = 0;
        *(void *)(v5 + 136) = 0;
        long long v14 = *(_OWORD *)(v5 + 144);
        uint64_t v32 = *(void *)(v5 + 160);
        *(_OWORD *)long long v31 = v14;
        *(void *)(v5 + 144) = 0;
        *(void *)(v5 + 152) = 0;
        *(void *)(v5 + 160) = 0;
        int v15 = *(_DWORD *)(v5 + 168);
        __int16 v34 = *(_WORD *)(v5 + 172);
        int v33 = v15;
        long long v16 = *(_OWORD *)(v5 + 176);
        uint64_t v36 = *(void *)(v5 + 192);
        *(_OWORD *)long long __p = v16;
        *(void *)(v5 + 176) = 0;
        *(void *)(v5 + 184) = 0;
        *(void *)(v5 + 192) = 0;
        long long v17 = *(_OWORD *)(v5 + 200);
        int v38 = *(_DWORD *)(v5 + 216);
        long long v37 = v17;
        do
        {
          uint64_t v18 = (uint64_t)v11;
          quasar::Token::operator=(v5, v11);
          if (v7 < v10) {
            break;
          }
          uint64_t v19 = (2 * v10) | 1;
          unint64_t v11 = (long long *)(a1 + 224 * v19);
          int64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            int64_t v10 = v19;
          }
          else if ((*a2)((long long *)(a1 + 224 * v19), (uint64_t)(v11 + 14)))
          {
            v11 += 14;
          }
          else
          {
            int64_t v10 = v19;
          }
          uint64_t v5 = v18;
        }
        while (!(*a2)(v11, (uint64_t)v20));
        quasar::Token::operator=(v18, (long long *)v20);
        if (SHIBYTE(v36) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v32) < 0) {
          operator delete(v31[0]);
        }
        v39[0] = (void **)&v29;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v39);
        if (SHIBYTE(v28) < 0) {
          operator delete(v27[0]);
        }
        v39[0] = (void **)&v25;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v39);
        if (SHIBYTE(v24) < 0) {
          operator delete(v23[0]);
        }
        if (SHIBYTE(v21) < 0) {
          operator delete(v20[0]);
        }
      }
    }
  }
}

void sub_1B2412EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(quasar::Token const&,quasar::Token const&),quasar::Token*>(uint64_t a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  if (a4 >= 2)
  {
    *(_OWORD *)int v15 = *(_OWORD *)a1;
    uint64_t v16 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(_OWORD *)long long v17 = *(_OWORD *)(a1 + 24);
    *(void *)&v17[14] = *(void *)(a1 + 38);
    *(_OWORD *)uint64_t v18 = *(_OWORD *)(a1 + 48);
    uint64_t v19 = *(void *)(a1 + 64);
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    long long v20 = *(_OWORD *)(a1 + 72);
    uint64_t v21 = *(void *)(a1 + 88);
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    long long v7 = *(_OWORD *)(a1 + 96);
    uint64_t v23 = *(void *)(a1 + 112);
    *(_OWORD *)long long v22 = v7;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    long long v24 = *(_OWORD *)(a1 + 120);
    uint64_t v25 = *(void *)(a1 + 136);
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    long long v8 = *(_OWORD *)(a1 + 144);
    uint64_t v27 = *(void *)(a1 + 160);
    *(_OWORD *)uint64_t v26 = v8;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    int v9 = *(_DWORD *)(a1 + 168);
    __int16 v29 = *(_WORD *)(a1 + 172);
    int v28 = v9;
    long long v10 = *(_OWORD *)(a1 + 176);
    uint64_t v31 = *(void *)(a1 + 192);
    *(_OWORD *)long long __p = v10;
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0;
    long long v11 = *(_OWORD *)(a1 + 200);
    int v33 = *(_DWORD *)(a1 + 216);
    long long v32 = v11;
    int64_t v12 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(a1, a3, a4);
    long long v13 = v12;
    long long v14 = (long long *)(a2 - 224);
    if (v12 == v14)
    {
      quasar::Token::operator=((uint64_t)v12, (long long *)v15);
    }
    else
    {
      quasar::Token::operator=((uint64_t)v12, v14);
      quasar::Token::operator=((uint64_t)v14, (long long *)v15);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(a1, (uint64_t)(v13 + 14), (uint64_t (**)(long long *, void **))a3, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v13 - a1 + 224) >> 5));
    }
    if (SHIBYTE(v31) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v27) < 0) {
      operator delete(v26[0]);
    }
    __int16 v34 = (void **)&v24;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v34);
    if (SHIBYTE(v23) < 0) {
      operator delete(v22[0]);
    }
    __int16 v34 = (void **)&v20;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v34);
    if (SHIBYTE(v19) < 0) {
      operator delete(v18[0]);
    }
    if (SHIBYTE(v16) < 0) {
      operator delete(v15[0]);
    }
  }
}

void sub_1B24130C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

long long *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    int v9 = (long long *)(a1 + 224 * v6 + 224);
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 224 * v6 + 224, a1 + 224 * v6 + 448))
    {
      v9 += 14;
      uint64_t v10 = v11;
    }
    quasar::Token::operator=(a1, v9);
    a1 = (uint64_t)v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, void **), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v8 = v4 >> 1;
    int v9 = (long long *)(a1 + 224 * (v4 >> 1));
    uint64_t v10 = a2 - 224;
    if ((*a3)(v9, (void **)(a2 - 224)))
    {
      *(_OWORD *)long long v17 = *(_OWORD *)v10;
      uint64_t v18 = *(void *)(v10 + 16);
      *(void *)(v10 + 8) = 0;
      *(void *)(v10 + 16) = 0;
      *(void *)uint64_t v10 = 0;
      *(_OWORD *)uint64_t v19 = *(_OWORD *)(a2 - 200);
      *(void *)&v19[14] = *(void *)(a2 - 186);
      *(_OWORD *)long long v20 = *(_OWORD *)(a2 - 176);
      uint64_t v21 = *(void *)(a2 - 160);
      *(void *)(a2 - 176) = 0;
      *(void *)(a2 - 168) = 0;
      long long v22 = *(_OWORD *)(a2 - 152);
      uint64_t v23 = *(void *)(a2 - 136);
      *(void *)(a2 - 160) = 0;
      *(void *)(a2 - 152) = 0;
      *(void *)(a2 - 144) = 0;
      *(void *)(a2 - 136) = 0;
      long long v11 = *(_OWORD *)(a2 - 128);
      uint64_t v25 = *(void *)(a2 - 112);
      *(_OWORD *)long long v24 = v11;
      *(void *)(a2 - 128) = 0;
      *(void *)(a2 - 120) = 0;
      long long v26 = *(_OWORD *)(a2 - 104);
      uint64_t v27 = *(void *)(a2 - 88);
      *(void *)(a2 - 112) = 0;
      *(void *)(a2 - 104) = 0;
      *(void *)(a2 - 96) = 0;
      *(void *)(a2 - 88) = 0;
      long long v12 = *(_OWORD *)(a2 - 80);
      uint64_t v29 = *(void *)(a2 - 64);
      *(_OWORD *)int v28 = v12;
      *(void *)(a2 - 80) = 0;
      *(void *)(a2 - 72) = 0;
      *(void *)(a2 - 64) = 0;
      int v13 = *(_DWORD *)(a2 - 56);
      __int16 v31 = *(_WORD *)(a2 - 52);
      int v30 = v13;
      long long v14 = *(_OWORD *)(a2 - 48);
      uint64_t v33 = *(void *)(a2 - 32);
      *(_OWORD *)long long __p = v14;
      *(void *)(a2 - 48) = 0;
      *(void *)(a2 - 40) = 0;
      *(void *)(a2 - 32) = 0;
      long long v15 = *(_OWORD *)(a2 - 24);
      int v35 = *(_DWORD *)(a2 - 8);
      long long v34 = v15;
      do
      {
        uint64_t v16 = (uint64_t)v9;
        quasar::Token::operator=(v10, v9);
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        int v9 = (long long *)(a1 + 224 * v8);
        uint64_t v10 = v16;
      }
      while (((*a3)(v9, v17) & 1) != 0);
      quasar::Token::operator=(v16, (long long *)v17);
      if (SHIBYTE(v33) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v29) < 0) {
        operator delete(v28[0]);
      }
      uint64_t v36 = (void **)&v26;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v36);
      if (SHIBYTE(v25) < 0) {
        operator delete(v24[0]);
      }
      uint64_t v36 = (void **)&v22;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v36);
      if (SHIBYTE(v21) < 0) {
        operator delete(v20[0]);
      }
      if (SHIBYTE(v18) < 0) {
        operator delete(v17[0]);
      }
    }
  }
}

void sub_1B241339C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<std::string,int &,int &,int &,float &,BOOL>(uint64_t *a1, uint64_t a2, int *a3, int *a4, int *a5, float *a6, unsigned __int8 *a7)
{
  uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  unint64_t v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > 0x124924924924924) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v9) {
    unint64_t v9 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492) {
    unint64_t v16 = 0x124924924924924;
  }
  else {
    unint64_t v16 = v9;
  }
  long long v24 = a1 + 2;
  if (v16) {
    long long v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), v16);
  }
  else {
    long long v17 = 0;
  }
  long long v20 = v17;
  uint64_t v21 = (std::string *)&v17[224 * v8];
  uint64_t v23 = &v17[224 * v16];
  std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int &,int &,int &,float &,BOOL>((uint64_t)(a1 + 2), v21, a2, a3, a4, a5, a6, a7);
  long long v22 = &v21[9].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v20);
  uint64_t v18 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v20);
  return v18;
}

void sub_1B2413504(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int &,int &,int &,float &,BOOL>(uint64_t a1, std::string *a2, uint64_t a3, int *a4, int *a5, int *a6, float *a7, unsigned __int8 *a8)
{
  long long v21 = *(_OWORD *)a3;
  uint64_t v22 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  int v9 = *a4;
  int v10 = *a5;
  int v11 = *a6;
  float v12 = *a7;
  int v13 = *a8;
  std::string::basic_string[abi:ne180100]<0>(v19, "");
  std::string::basic_string[abi:ne180100]<0>(v17, "");
  memset(v16, 0, sizeof(v16));
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::Token::Token(a2, &v21, v9, v10, v11, v13 != 0, 0, (long long *)v19, v12, (long long *)v17, v16, 0, (long long *)__p, 0, 0);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v16;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete((void *)v21);
  }
}

void sub_1B241365C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  long long __p = &a21;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  _Unwind_Resume(a1);
}

void kaldi::ReadPhoneMap(uint64_t a1, std::vector<int> *a2)
{
  a2->__end_ = a2->__begin_;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v30 = *(std::string *)a1;
  }
  int v4 = kaldi::ReadVectorVectorSimple<int>((uint64_t)&v30, &v31);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (!v4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Error reading phone map from ", 29);
    if (*(char *)(a1 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else {
      std::string v27 = *(std::string *)a1;
    }
    kaldi::PrintableRxfilename((uint64_t)&v27, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__x);
  }
  uint64_t v5 = v31;
  uint64_t v6 = v32;
  if (v32 == v31)
  {
    begiuint64_t n = a2->__begin_;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      int v9 = *(unsigned int **)(v5 + v7);
      if (*(void *)(v5 + v7 + 8) - (void)v9 != 8 || (uint64_t v10 = *v9, (int)v10 < 1) || (v11 = v9[1], v11 < 1))
      {
LABEL_21:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
        long long v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Error reading phone map from ", 29);
        if (*(char *)(a1 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
        }
        else {
          std::string v26 = *(std::string *)a1;
        }
        kaldi::PrintableRxfilename((uint64_t)&v26, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v15 = &__p;
        }
        else {
          char v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v16 = __p.__r_.__value_.__l.__size_;
        }
        long long v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" (bad line ", 11);
        char v18 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)")", 1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v26.__r_.__value_.__l.__data_);
        }
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__x);
      }
      begiuint64_t n = a2->__begin_;
      if ((int)v10 >= (int)((unint64_t)((char *)a2->__end_ - (char *)a2->__begin_) >> 2))
      {
        __x[0] = -1;
        std::vector<int>::resize(a2, v10 + 1, __x);
        uint64_t v5 = v31;
        uint64_t v6 = v32;
        int v13 = *(_DWORD **)(v31 + v7);
        begiuint64_t n = a2->__begin_;
        LODWORD(v10) = *v13;
        int v11 = v13[1];
      }
      else if (begin[v10] != -1)
      {
        goto LABEL_21;
      }
      begin[(int)v10] = v11;
      ++v8;
      v7 += 24;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3));
  }
  if (begin == a2->__end_)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
    char v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Read empty phone map from ", 26);
    if (*(char *)(a1 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else {
      std::string v25 = *(std::string *)a1;
    }
    kaldi::PrintableRxfilename((uint64_t)&v25, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v23 = &__p;
    }
    else {
      uint64_t v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v24 = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v23, v24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__x);
  }
  *(void *)__x = &v31;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
}

void SkipNgram::SkipNgram(SkipNgram *this, Vocab *a2, int a3)
{
  Ngram::Ngram(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F0A35490;
  *(_DWORD *)(v5 + 192) = 100;
  *(_OWORD *)(v5 + 200) = xmmword_1B25B0EB0;
  unsigned int v6 = (*(uint64_t (**)(Vocab *))(*(void *)a2 + 72))(a2);
  LHash<unsigned int,double>::LHash((void *)this + 27, v6);
}

void sub_1B2413BC4(_Unwind_Exception *a1)
{
  Ngram::~Ngram(v1);
  _Unwind_Resume(a1);
}

_DWORD **SkipNgram::memStats(SkipNgram *this, MemStats *a2)
{
  Ngram::memStats(this, a2);
  return LHash<unsigned int,double>::memStats((_DWORD **)this + 27, (uint64_t *)a2);
}

void SkipNgram::wordProb(SkipNgram *this, const unsigned int *a2, Vocab *a3)
{
  unsigned int v6 = Vocab::length((uint64_t)a3, a2);
  if (!*(unsigned char *)(*(uint64_t (**)(SkipNgram *))(*(void *)this + 344))(this)
    || *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 88))(*((void *)this + 3)) != a2
    && (*((_DWORD *)this + 44) < 2u
     || (unsigned int v7 = *(_DWORD *)a3,
         v7 != *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 88))(*((void *)this + 3)))
     && (*((_DWORD *)this + 44) < 3u
      || (int v8 = *((_DWORD *)a3 + 2),
          v8 != *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 88))(*((void *)this + 3))))))
  {
    if (v6)
    {
      unsigned int v9 = *(_DWORD *)a3;
      char v23 = 0;
      uint64_t v10 = (double *)LHash<unsigned int,double>::find((_DWORD **)this + 27, v9, &v23);
      if (v10 && (int v11 = v10, *v10 != 0.0))
      {
        unsigned int v14 = *((_DWORD *)this + 44) - 1;
        if (v6 - 1 >= v14) {
          uint64_t v15 = v14;
        }
        else {
          uint64_t v15 = v6 - 1;
        }
        float v16 = Ngram::wordProbBO(this, (uint64_t)a2, (const unsigned int *)a3 + 1, v15);
        unsigned int v17 = *((_DWORD *)this + 44) - 1;
        if (v6 >= v17) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = v6;
        }
        float v19 = Ngram::wordProbBO(this, (uint64_t)a2, (const unsigned int *)a3, v18);
        double v20 = *v11;
        double v21 = 0.0;
        double v22 = 0.0;
        if (v16 != -INFINITY) {
          double v22 = exp(v16 * 2.30258509);
        }
        if (v19 != -INFINITY) {
          double v21 = exp(v19 * 2.30258509);
        }
        log10((1.0 - v20) * v21 + v20 * v22);
      }
      else
      {
        unsigned int v12 = *((_DWORD *)this + 44) - 1;
        if (v6 >= v12) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = v6;
        }
        Ngram::wordProbBO(this, (uint64_t)a2, (const unsigned int *)a3, v13);
      }
    }
    else
    {
      Ngram::wordProbBO(this, (uint64_t)a2, (const unsigned int *)a3, 0);
    }
  }
}

uint64_t SkipNgram::read(SkipNgram *this, File *a2, unsigned int a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t result = Ngram::read(this, a2, a3);
  if (result)
  {
    unsigned int v6 = File::getline(a2);
    if (v6)
    {
      while (1)
      {
        *(void *)uint64_t v18 = 0;
        __s = 0;
        uint64_t v20 = 0;
        if (Vocab::parseWords((Vocab *)v6, v18, (const char **)3, v7) != 2)
        {
          uint64_t v10 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"illegal skip prob line\n", 23);
          return 0;
        }
        unsigned int v8 = (*(uint64_t (**)(void, void))(**((void **)this + 3) + 16))(*((void *)this + 3), *(void *)v18);
        uint64_t v16 = 0;
        if (!parseProb(__s, (double *)&v16)) {
          break;
        }
        uint64_t v9 = v16;
        LOBYTE(v17.__locale_) = 0;
        *(void *)LHash<unsigned int,double>::insert((void *)this + 27, v8, &v17) = v9;
        unsigned int v6 = File::getline(a2);
        if (!v6) {
          return 1;
        }
      }
      int v11 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
      unsigned int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"bad skip prob value ", 20);
      size_t v13 = strlen(__s);
      unsigned int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)__s, v13);
      std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
      uint64_t v15 = std::locale::use_facet(&v17, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
      std::locale::~locale(&v17);
      std::ostream::put();
      std::ostream::flush();
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_1B24140C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t SkipNgram::write(Vocab **this, File *a2)
{
  uint64_t result = Ngram::write((Ngram *)this, a2);
  if (result)
  {
    File::fprintf(a2, "\n");
    uint64_t v5 = Vocab::compareIndex(this[3]);
    LHashIter<unsigned int,double>::LHashIter(v9, this + 27, v5);
    unsigned int v8 = 0;
    while (1)
    {
      unsigned int v6 = (double *)LHashIter<unsigned int,double>::next((uint64_t)v9, &v8);
      if (!v6) {
        break;
      }
      unsigned int v7 = (const char *)(*(uint64_t (**)(Vocab *, void))(*(void *)this[3] + 32))(this[3], v8);
      File::fprintf(a2, "%s %lg\n", v7, *v6);
    }
    File::fprintf(a2, "\n");
    LHashIter<unsigned int,double>::~LHashIter((uint64_t)v9);
    return 1;
  }
  return result;
}

void sub_1B24141D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  LHashIter<unsigned int,double>::~LHashIter((uint64_t)va);
  _Unwind_Resume(a1);
}

void SkipNgram::~SkipNgram(SkipNgram *this)
{
  *(void *)this = &unk_1F0A35490;
  LHash<unsigned int,double>::~LHash((void *)this + 27);
  *(void *)this = &unk_1F0A346B0;
  Trie<unsigned int,BOnode>::~Trie((char *)this + 152);
  LM::~LM(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A35490;
  LHash<unsigned int,double>::~LHash((void *)this + 27);
  *(void *)this = &unk_1F0A346B0;
  Trie<unsigned int,BOnode>::~Trie((char *)this + 152);
  LM::~LM(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::TokenizerBlock::~TokenizerBlock(quasar::TokenizerBlock *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[3];
  if (*((void *)this + 41)) {
    NLTokenizerRelease();
  }
  uint64_t v5 = a2[1];
  *(void *)this = v5;
  *(void *)((char *)this + *(void *)(v5 - 24)) = a2[2];
  quasar::TokenizerOptions::~TokenizerOptions((quasar::TokenizerBlock *)((char *)this + 8));
}

void quasar::TokenizerBlock::~TokenizerBlock(quasar::TokenizerBlock *this)
{
  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 336));
}

{
  uint64_t v1;
  uint64_t vars8;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 336));
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'quasar::TokenizerBlock::~TokenizerBlock(quasar::TokenizerBlock *this)
{
  uint64_t v2 = (char **)(v1 + 336);
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  quasar::TokenizerBlock::~TokenizerBlock((quasar::TokenizerBlock *)((char *)this + *(void *)(*(void *)this - 24)));
}

uint64_t quasar::TokenizerBlock::init(quasar::TokenizerBlock *this)
{
  quasar::Bitmap::~Bitmap(this);
  uint64_t result = NLTokenizerCreate();
  *((void *)this + 41) = result;
  return result;
}

uint64_t virtual thunk to'quasar::TokenizerBlock::init(quasar::TokenizerBlock *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 88);
  quasar::Bitmap::~Bitmap(this);
  uint64_t result = NLTokenizerCreate();
  *((void *)v1 + 41) = result;
  return result;
}

void *quasar::TokenizerOptions::options@<X0>(quasar::TokenizerOptions *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *uint64_t result = (char *)this + 160;
  result[1] = (char *)this + 16;
  *a2 = result;
  return result;
}

void quasar::TokenizerBlock::process(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  if (v5 == v6)
  {
    uint64_t v19 = (uint64_t)a1 + *(void *)(*a1 - 24);
    quasar::ProcessingBlock::send(v19, (uint64_t)a3, 0);
  }
  else
  {
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(&v51, v5, v6, 0x8F5C28F5C28F5C29 * ((v6 - v5) >> 3));
    uint64_t v7 = v51;
    uint64_t v22 = v52;
    if (v51 != v52)
    {
      uint64_t v21 = v4 + 21;
      unsigned int v8 = v4 + 3;
      uint64_t v20 = v4;
      do
      {
        quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v49, (quasar::TranslationPhraseInternal *)v7);
        uint64_t v9 = quasar::OptionValue<std::string>::value(v21);
        quasar::TokenizerBlock::tokenize((const char *)v49, v9, &v47);
        quasar::PTree::PTree((quasar::PTree *)v46);
        std::string::basic_string[abi:ne180100]<0>(__p, "tokenizer input");
        quasar::PTree::PTree(&v32, v49);
        quasar::PTree::putChild((uint64_t)v46, (uint64_t)__p, (uint64_t)&v32, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v32);
        if (v45 < 0) {
          operator delete(__p[0]);
        }
        quasar::PTree::PTree((quasar::PTree *)__p);
        if (*(unsigned char *)quasar::OptionValue<BOOL>::value(v8))
        {
          uint64_t v11 = *(void *)(v7 + 136);
          for (uint64_t i = *(void *)(v7 + 144);
                i != v11;
                std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100](v7 + 152, i))
          {
            i -= 136;
          }
          *(void *)(v7 + 144) = v11;
        }
        uint64_t v12 = v47;
        for (uint64_t j = v48; v12 != j; v12 += 32)
        {
          long long v34 = 0;
          uint64_t v35 = 0;
          uint64_t v36 = 0;
          memset(&v32, 0, sizeof(v32));
          __int16 v33 = 0;
          uint64_t v37 = 3212836864;
          int v38 = -1;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          uint64_t v42 = 0;
          uint64_t v43 = -1;
          std::string::operator=(&v32, (const std::string *)v12);
          LOBYTE(v33) = 1;
          if (*(unsigned char *)quasar::OptionValue<BOOL>::value(v8))
          {
            unint64_t v14 = *(void *)(v7 + 144);
            if (v14 >= *(void *)(v7 + 152))
            {
              uint64_t v15 = std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal const&>((uint64_t *)(v7 + 136), (const quasar::TranslationTokenInternal *)&v32);
            }
            else
            {
              quasar::TranslationTokenInternal::TranslationTokenInternal(*(std::string **)(v7 + 144), (const quasar::TranslationTokenInternal *)&v32);
              uint64_t v15 = v14 + 136;
              *(void *)(v7 + 144) = v14 + 136;
            }
            *(void *)(v7 + 144) = v15;
          }
          quasar::PTree::PTree((quasar::PTree *)v31);
          std::string::basic_string[abi:ne180100]<0>(v29, "text");
          quasar::PTree::PTree(&Type, v12);
          quasar::PTree::putChild((uint64_t)v31, (uint64_t)v29, (uint64_t)&Type, 1);
          quasar::PTree::~PTree((quasar::PTree *)&Type);
          if (v30 < 0) {
            operator delete(v29[0]);
          }
          std::string::basic_string[abi:ne180100]<0>(v29, "start");
          unsigned int v16 = *(_DWORD *)(v12 + 24);
          int Type = quasar::getType((quasar *)v16);
          std::to_string(&v24, v16);
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          uint64_t v27 = 0;
          char v28 = 1;
          quasar::PTree::putChild((uint64_t)v31, (uint64_t)v29, (uint64_t)&Type, 1);
          quasar::PTree::~PTree((quasar::PTree *)&Type);
          if (v30 < 0) {
            operator delete(v29[0]);
          }
          std::string::basic_string[abi:ne180100]<0>(v29, "length");
          unsigned int v17 = *(_DWORD *)(v12 + 28);
          int Type = quasar::getType((quasar *)v17);
          std::to_string(&v24, v17);
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          uint64_t v27 = 0;
          char v28 = 1;
          quasar::PTree::putChild((uint64_t)v31, (uint64_t)v29, (uint64_t)&Type, 1);
          quasar::PTree::~PTree((quasar::PTree *)&Type);
          if (v30 < 0) {
            operator delete(v29[0]);
          }
          quasar::PTree::addChild((quasar::PTree *)__p, (const quasar::PTree *)v31);
          quasar::PTree::~PTree((quasar::PTree *)v31);
          if ((void)v41)
          {
            *((void *)&v41 + 1) = v41;
            operator delete((void *)v41);
          }
          if (SBYTE7(v40) < 0) {
            operator delete((void *)v39);
          }
          if (v34)
          {
            uint64_t v35 = v34;
            operator delete(v34);
          }
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v32.__r_.__value_.__l.__data_);
          }
        }
        uint64_t v4 = v20;
        if (*(unsigned char *)quasar::OptionValue<BOOL>::value(v8))
        {
          uint64_t v18 = *(void *)(v7 + 144);
          if (*(void *)(v7 + 136) != v18) {
            *(unsigned char *)(v18 - 112) = 0;
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v32, "tokenizer output");
        quasar::PTree::putChild((uint64_t)v46, (uint64_t)&v32, (uint64_t)__p, 1);
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v32.__r_.__value_.__l.__data_);
        }
        quasar::MetaInfo::update((quasar::MetaInfo::Impl **)(v7 + 192), (const quasar::PTree *)v46);
        quasar::PTree::~PTree((quasar::PTree *)__p);
        quasar::PTree::~PTree((quasar::PTree *)v46);
        v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
        if (v50 < 0) {
          operator delete(v49[0]);
        }
        v7 += 200;
      }
      while (v7 != v22);
    }
    quasar::ProcessingBlock::send((uint64_t)v4 + *(void *)(*v4 - 24), (uint64_t)&v51, 0);
    v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
    std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  }
}

void sub_1B2414ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  std::string __p = (void *)(v60 - 128);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::TokenizerBlock::tokenize(const char *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  CFStringRef v5 = CFStringCreateWithCString(0, a1, 0x8000100u);
  CFStringGetLength(v5);
  quasar::languageIdForLocale(a2);
  NLTokenizerSetString();
  int v6 = 0;
  int v7 = 0;
  while (1)
  {
    NextTokeuint64_t n = (CFRange *)NLTokenizerGetNextToken();
    uint64_t v9 = NextToken;
    if (!NextToken) {
      break;
    }
    __uint64_t n = 0;
    memset(&v38, 0, sizeof(v38));
    CFStringGetBytes(v5, *NextToken, 0x8000100u, 0, 0, 0, 0, (CFIndex *)&__n);
    std::string::resize(&v38, __n, 0);
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v38;
    }
    else {
      uint64_t v10 = (std::string *)v38.__r_.__value_.__r.__words[0];
    }
    CFStringGetBytes(v5, *v9, 0x8000100u, 0, 0, (UInt8 *)v10, __n, (CFIndex *)&__n);
    locatiouint64_t n = v9->location;
    CFIndex length = v9->length;
    int v13 = v9->location - v7;
    if ((int)v9->location <= v7)
    {
      CFIndex v16 = v9->location;
      int v14 = 0;
      CFIndex v17 = v9->location;
    }
    else
    {
      int v14 = 0;
      CFIndex v15 = v7;
      do
      {
        if (CFStringGetCharacterAtIndex(v5, v15) >> 10 == 55) {
          ++v14;
        }
        ++v15;
        --v13;
      }
      while (v13);
      CFIndex v16 = v9->location;
      CFIndex v17 = v9->location;
    }
    int v7 = length + location;
    if ((int)v16 >= (int)length + (int)location)
    {
      int v18 = 0;
    }
    else
    {
      int v18 = 0;
      CFIndex v19 = (int)v17;
      int v20 = v7 - v17;
      do
      {
        if (CFStringGetCharacterAtIndex(v5, v19) >> 10 == 55) {
          ++v18;
        }
        ++v19;
        --v20;
      }
      while (v20);
      LODWORD(v16) = v9->location;
    }
    int v21 = v9->length;
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v36, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
    }
    else {
      std::string v36 = v38;
    }
    int v22 = v14 + v6;
    unint64_t v37 = (v16 - v22) | ((unint64_t)(v21 - v18) << 32);
    unint64_t v23 = a3[1];
    unint64_t v24 = a3[2];
    if (v23 >= v24)
    {
      uint64_t v26 = (uint64_t)(v23 - *a3) >> 5;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 59) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v28 = v24 - *a3;
      if (v28 >> 4 > v27) {
        unint64_t v27 = v28 >> 4;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v29 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v27;
      }
      v40[4] = a3 + 2;
      char v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(a3 + 2), v29);
      uint64_t v31 = &v30[32 * v26];
      v40[0] = v30;
      v40[1] = v31;
      v40[3] = &v30[32 * v32];
      long long v33 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
      *((void *)v31 + 2) = *((void *)&v36.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v31 = v33;
      memset(&v36, 0, sizeof(v36));
      *((void *)v31 + 3) = v37;
      v40[2] = v31 + 32;
      std::vector<std::pair<std::string,std::pair<int,int>>>::__swap_out_circular_buffer(a3, v40);
      uint64_t v34 = a3[1];
      std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v40);
      int v35 = SHIBYTE(v36.__r_.__value_.__r.__words[2]);
      a3[1] = v34;
      if (v35 < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v25 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
      *(void *)(v23 + 16) = *((void *)&v36.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v23 = v25;
      memset(&v36, 0, sizeof(v36));
      *(void *)(v23 + 24) = v37;
      a3[1] = v23 + 32;
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    int v6 = v18 + v22;
  }
  CFRelease(v5);
}

void sub_1B2414F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
}

void virtual thunk to'quasar::TokenizerBlock::process(void *a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t quasar::TokenizerBlock::minConfigVersion(quasar::TokenizerBlock *this)
{
  return 169;
}

uint64_t virtual thunk to'quasar::TokenizerBlock::minConfigVersion(quasar::TokenizerBlock *this)
{
  return 169;
}

void quasar::ConfiguredProcessingBlock<quasar::TokenizerOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  uint64_t *v11;

  uint64_t v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
  (**v3)(&v10);
  uint64_t v4 = v10;
  CFStringRef v5 = v11;
  if (v10 != v11)
  {
    do
    {
      int v6 = *v4;
      int v7 = (std::__shared_weak_count *)a2[1];
      unsigned int v8 = *a2;
      uint64_t v9 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      quasar::OptionValueBase::setContextProvider(v6, &v8);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      ++v4;
    }
    while (v4 != v5);
    uint64_t v4 = v10;
  }
  if (v4)
  {
    uint64_t v11 = v4;
    operator delete(v4);
  }
}

void sub_1B241509C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::TokenizerOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::TokenizerOptions>::setContextProvider(void *a1, uint64_t *a2)
{
}

uint64_t virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::TokenizerOptions>::getOptions(void *a1)
{
  return (uint64_t)a1 + *(void *)(*a1 - 104) + 8;
}

const char *quasar::TokenizerBlock::blockType(quasar::TokenizerBlock *this)
{
  return "TokenizerBlock";
}

const char *virtual thunk to'quasar::TokenizerBlock::blockType(quasar::TokenizerBlock *this)
{
  return "TokenizerBlock";
}

void quasar::TokenizerOptions::~TokenizerOptions(quasar::TokenizerOptions *this)
{
  *(void *)this = &unk_1F0A53950;
  *((void *)this + 20) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 296, *((void **)this + 38));
  if (*((char *)this + 287) < 0) {
    operator delete(*((void **)this + 33));
  }
  *((void *)this + 20) = &unk_1F0A52FB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 239) < 0) {
    operator delete(*((void **)this + 27));
  }
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  *((void *)this + 2) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 136, *((char **)this + 18));
  *((void *)this + 2) = &unk_1F0A52FB8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

uint64_t std::vector<std::pair<std::string,std::pair<int,int>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::pair<int,int>>>,std::reverse_iterator<std::pair<std::string,std::pair<int,int>>*>,std::reverse_iterator<std::pair<std::string,std::pair<int,int>>*>,std::reverse_iterator<std::pair<std::string,std::pair<int,int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::pair<int,int>>>,std::reverse_iterator<std::pair<std::string,std::pair<int,int>>*>,std::reverse_iterator<std::pair<std::string,std::pair<int,int>>*>,std::reverse_iterator<std::pair<std::string,std::pair<int,int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  double v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 32);
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::pair<int,int>>>,std::reverse_iterator<std::pair<std::string,std::pair<int,int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::pair<int,int>>>,std::reverse_iterator<std::pair<std::string,std::pair<int,int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void kaldi::CuRandom::RandGauss<float>(int *a1, uint64_t a2, float a3, float a4)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if (v4)
  {
    if (!*((unsigned char *)a1 + 4))
    {
      unsigned int v5 = *a1;
      a1[2] = *a1;
      uint64_t v6 = 1;
      for (uint64_t i = 3; i != 626; ++i)
      {
        int v8 = 1812433253 * (v5 ^ (v5 >> 30));
        unsigned int v5 = v8 + v6;
        a1[i] = i + v8 - 2;
        ++v6;
      }
      *((void *)a1 + 313) = 0;
      *((unsigned char *)a1 + 4) = 1;
      int v4 = *(_DWORD *)(a2 + 16);
    }
    uint64_t v9 = *(float **)(a2 + 8);
    unint64_t v11 = __PAIR64__(LODWORD(a4), LODWORD(a3));
    char v12 = 0;
    if (v4 >= 1)
    {
      uint64_t v10 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)(a1 + 2);
      do
      {
        *v9++ = std::normal_distribution<float>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v11, v10, (float *)&v11);
        --v4;
      }
      while (v4);
    }
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"cannot write data to zero size vector", 37);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
  }
}

void sub_1B24154D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::CuRand<float>::~CuRand(uint64_t a1)
{
  return a1;
}

void kaldi::CuRand<float>::RandGaussian(uint64_t a1, uint64_t a2)
{
}

void kaldi::CuRand<float>::BinarizeProbs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 20);
  if (v3 >= 1)
  {
    int v6 = 0;
    LODWORD(v7) = *(_DWORD *)(a3 + 16);
    do
    {
      if ((int)v7 >= 1)
      {
        uint64_t v8 = 0;
        do
        {
          float v9 = ((double)(int)kaldi::Rand(0) + 1.0) / 2147483650.0;
          if (*(float *)(*(void *)(a2 + 8) + 4 * v6 * *(_DWORD *)(a2 + 24) + 4 * v8) <= v9) {
            float v10 = 0.0;
          }
          else {
            float v10 = 1.0;
          }
          *(float *)(*(void *)(a3 + 8) + 4 * v6 * *(_DWORD *)(a3 + 24) + 4 * v8++) = v10;
          uint64_t v7 = *(int *)(a3 + 16);
        }
        while (v8 < v7);
        int v3 = *(_DWORD *)(a3 + 20);
      }
      ++v6;
    }
    while (v6 < v3);
  }
}

float std::normal_distribution<float>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(uint64_t a1, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this, float *a3)
{
  if (*(unsigned char *)(a1 + 12))
  {
    *(unsigned char *)(a1 + 12) = 0;
    float v5 = *(float *)(a1 + 8);
  }
  else
  {
    do
    {
      do
      {
        float v7 = (float)((float)((float)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this)
                           * 2.3283e-10)
                   * 2.0)
           + -1.0;
        float v8 = (float)((float)((float)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this)
                           * 2.3283e-10)
                   * 2.0)
           + -1.0;
        float v9 = (float)(v8 * v8) + (float)(v7 * v7);
      }
      while (v9 > 1.0);
    }
    while (v9 == 0.0);
    float v10 = sqrtf((float)(logf((float)(v8 * v8) + (float)(v7 * v7)) * -2.0) / v9);
    *(float *)(a1 + 8) = v8 * v10;
    *(unsigned char *)(a1 + 12) = 1;
    float v5 = v7 * v10;
  }
  return *a3 + (float)(v5 * a3[1]);
}

void *quasar::LmData::dataTypeString@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, &quasar::EvaluationTask::dataSetOptions[20 * a1]);
}

uint64_t quasar::LmData::getInputDataType(std::string *this)
{
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if (!size) {
    return 0;
  }
  uint64_t v3 = 0;
  for (uint64_t i = "plain-text"; std::string::compare(this, i); i += 20)
  {
    if (++v3 == 4)
    {
      memset(v7, 0, sizeof(v7));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
      float v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"invalid input data type specifier: ", 35);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (uint64_t)this);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v7);
    }
  }
  return v3;
}

void sub_1B24157C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *quasar::operator<<(void *a1, unsigned int *a2)
{
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"inputDataType ", 14);
  std::string::basic_string[abi:ne180100]<0>(__p, &quasar::LmData::inputDataOptions[20 * *a2]);
  if ((v18 & 0x80u) == 0) {
    float v5 = __p;
  }
  else {
    float v5 = (void **)__p[0];
  }
  if ((v18 & 0x80u) == 0) {
    uint64_t v6 = v18;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  float v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" numDocumentsRejected ", 22);
  float v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" numSentencesRejected ", 22);
  float v9 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" numSentencesMungeRejected ", 27);
  float v10 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" numDocuments ", 14);
  unint64_t v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" numUniqSentences ", 18);
  char v12 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" numSentences ", 14);
  long long v13 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" numSentencesMungeChanged ", 26);
  long long v14 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" numTokens ", 11);
  CFIndex v15 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" numTokensOOV ", 14);
  std::ostream::operator<<();
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1B2415944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::LmData::Stats::ptree(quasar::LmData::Stats *this@<X0>, int a2@<W1>, int a3@<W2>, quasar::PTree *a4@<X8>)
{
  quasar::PTree::PTree(a4);
  std::string::basic_string[abi:ne180100]<0>(__p, "numDocumentsRejected");
  unsigned int v8 = *((_DWORD *)this + 1);
  int Type = quasar::getType((quasar *)v8);
  std::to_string(&v23, v8);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "numSentencesRejected");
  unsigned int v9 = *((_DWORD *)this + 2);
  int Type = quasar::getType((quasar *)v9);
  std::to_string(&v23, v9);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "numDocuments");
  unsigned int v10 = *((_DWORD *)this + 4);
  int Type = quasar::getType((quasar *)v10);
  std::to_string(&v23, v10);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "numSentences");
  unsigned int v11 = *((_DWORD *)this + 5);
  int Type = quasar::getType((quasar *)v11);
  std::to_string(&v23, v11);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "numTokens");
  unsigned int v12 = *((_DWORD *)this + 8);
  int Type = quasar::getType((quasar *)v12);
  std::to_string(&v23, v12);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "numTokensOOV");
  unsigned int v13 = *((_DWORD *)this + 9);
  int Type = quasar::getType((quasar *)v13);
  std::to_string(&v23, v13);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "numDocumentsDictated");
  unsigned int v14 = *((_DWORD *)this + 10);
  int Type = quasar::getType((quasar *)v14);
  std::to_string(&v23, v14);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "numDocumentsTyped");
  unsigned int v15 = *((_DWORD *)this + 11);
  int Type = quasar::getType((quasar *)v15);
  std::to_string(&v23, v15);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "numTokensDictated");
  unsigned int v16 = *((_DWORD *)this + 12);
  int Type = quasar::getType((quasar *)v16);
  std::to_string(&v23, v16);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "numTokensTyped");
  unsigned int v17 = *((_DWORD *)this + 13);
  int Type = quasar::getType((quasar *)v17);
  std::to_string(&v23, v17);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "numTokensEstimatedExamined");
  unsigned int v18 = *((_DWORD *)this + 14);
  int Type = quasar::getType((quasar *)v18);
  std::to_string(&v23, v18);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v29 < 0)
  {
    operator delete(__p[0]);
    if (!a3) {
      goto LABEL_28;
    }
  }
  else if (!a3)
  {
    goto LABEL_28;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "numSentencesMungeRejected");
  unsigned int v20 = *((_DWORD *)this + 3);
  int Type = quasar::getType((quasar *)v20);
  std::to_string(&v23, v20);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "numSentencesMungeChanged");
  int v21 = (quasar *)*((unsigned int *)this + 6);
  int Type = quasar::getType(v21);
  std::to_string(&v23, v21);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if ((v29 & 0x80000000) == 0)
  {
LABEL_28:
    if (!a2) {
      return;
    }
    goto LABEL_29;
  }
  operator delete(__p[0]);
  if (!a2) {
    return;
  }
LABEL_29:
  quasar::roundCountsInPtree(a4, v19);
}

void sub_1B2415F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  quasar::PTree::~PTree(v23);
  _Unwind_Resume(a1);
}

void quasar::inferSymbolTableRootFromDecoderChainName(std::string *a1@<X8>)
{
  std::operator+<char>();
  uint64_t v2 = std::string::append(&v3, ".lattice-biglm-lme-faster");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_1B241608C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::loadSymbolTable(std::string *a1, uint64_t a2)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  memset(v8, 0, sizeof(v8));
  int v9 = 0;
  if (*(char *)(a2 + 23) >= 0) {
    size_t v4 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v4 = *(void *)(a2 + 8);
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v4 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v4)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v6 = (const void *)a2;
    }
    else {
      uint64_t v6 = *(const void **)a2;
    }
    memmove(p_p, v6, v4);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v4) = 46;
  quasar::SystemConfig::setPrefix(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  quasar::QsrTextSymbolTable::Register((quasar::QsrTextSymbolTable *)v8, (quasar::SystemConfig *)a1, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  quasar::SystemConfig::readPtree((uint64_t)a1, a2);
}

void sub_1B24162DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  quasar::QsrTextSymbolTable::~QsrTextSymbolTable((quasar::QsrTextSymbolTable *)(v14 - 208));
  _Unwind_Resume(a1);
}

void quasar::LmData::LmData()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  char v2 = v1;
  char v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = v0;
  *(void *)uint64_t v0 = &unk_1F0A58F88;
  *(_DWORD *)(v0 + 8) = -1;
  uint64_t v9 = *v8;
  *unsigned int v8 = 0;
  *(_OWORD *)(v0 + 24) = 0u;
  *(void *)(v0 + 16) = v9;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 124) = 0u;
  *(_OWORD *)(v0 + 140) = 0u;
  *(_OWORD *)(v0 + 156) = 0u;
  *(_OWORD *)(v0 + 172) = 0u;
  *(_OWORD *)(v0 + 188) = 0u;
  *(_OWORD *)(v0 + 204) = 0u;
  *(_OWORD *)(v0 + 220) = 0u;
  *(_OWORD *)(v0 + 236) = 0u;
  *(_OWORD *)(v0 + 108) = 0u;
  *(_OWORD *)(v0 + 252) = 0u;
  *(_OWORD *)(v0 + 268) = 0u;
  *(_OWORD *)(v0 + 284) = 0u;
  *(_OWORD *)(v0 + 300) = 0u;
  *(_OWORD *)(v0 + 316) = 0u;
  *(_OWORD *)(v0 + 332) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_DWORD *)(v0 + 528) = 0;
  *(_OWORD *)(v0 + 496) = 0u;
  *(_OWORD *)(v0 + 512) = 0u;
  *(_OWORD *)(v0 + 464) = 0u;
  *(_OWORD *)(v0 + 480) = 0u;
  *(_OWORD *)(v0 + 432) = 0u;
  *(_OWORD *)(v0 + 448) = 0u;
  *(_OWORD *)(v0 + 400) = 0u;
  *(_OWORD *)(v0 + 416) = 0u;
  *(_OWORD *)(v0 + 368) = 0u;
  *(_OWORD *)(v0 + 384) = 0u;
  *(_OWORD *)(v0 + 352) = 0u;
  *(_DWORD *)(v0 + 584) = 0;
  *(_OWORD *)(v0 + 552) = 0u;
  *(_OWORD *)(v0 + 568) = 0u;
  *(_OWORD *)(v0 + 536) = 0u;
  *(_OWORD *)(v0 + 588) = xmmword_1B25B0F50;
  *(_DWORD *)(v0 + 620) = 512;
  *(_OWORD *)(v0 + 604) = xmmword_1B25B0F60;
  std::string::basic_string[abi:ne180100]<0>((void *)(v0 + 624), "•|\\(|\\)|\"|\\[|\\]|\\{|\\}|®|,|;|\\?|\\!|\\\\"");
  *(_OWORD *)(v7 + 769) = 0u;
  *(_OWORD *)(v7 + 744) = 0u;
  *(_OWORD *)(v7 + 760) = 0u;
  *(_OWORD *)(v7 + 712) = 0u;
  *(_OWORD *)(v7 + 728) = 0u;
  *(_OWORD *)(v7 + 680) = 0u;
  *(_OWORD *)(v7 + 696) = 0u;
  *(_OWORD *)(v7 + 648) = 0u;
  *(_OWORD *)(v7 + 664) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)(v7 + 792), "Dictation");
  *(unsigned char *)(v7 + 840) = 0;
  *(void *)(v7 + 832) = 0;
  *(_OWORD *)(v7 + 816) = 0u;
  *(_OWORD *)(v7 + 848) = 0u;
  *(_OWORD *)(v7 + 864) = 0u;
  *(_OWORD *)(v7 + 880) = 0u;
  *(_OWORD *)(v7 + 896) = 0u;
  *(_OWORD *)(v7 + 912) = 0u;
  *(_OWORD *)(v7 + 928) = 0u;
  *(_OWORD *)(v7 + 944) = 0u;
  *(_OWORD *)(v7 + 960) = 0u;
  *(_OWORD *)(v7 + 976) = 0u;
  *(_DWORD *)(v7 + 992) = 0;
  *(_WORD *)(v7 + 996) = 1;
  *(unsigned char *)(v7 + 998) = 0;
  *(unsigned char *)(v7 + 999) = v4;
  *(unsigned char *)(v7 + 1000) = v2;
  *(_OWORD *)(v7 + 1008) = 0u;
  *(_OWORD *)(v7 + 1024) = 0u;
  *(_DWORD *)(v7 + 1040) = 1065353216;
  quasar::LmData::parseConfig(v7, v6);
}

void sub_1B241832C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B24185DCLL);
}

void quasar::LmData::parseConfig(uint64_t a1, uint64_t a2)
{
  memset(v5, 0, sizeof(v5));
  *(_OWORD *)std::string __p = 0u;
  long long v3 = 0u;
  int v4 = 1065353216;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v6, a2, (uint64_t *)v5, (uint64_t)__p);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  __p[0] = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "model-info");
  quasar::SystemConfig::getPtreeOptional((uint64_t)v6, (uint64_t)__p);
}

void sub_1B24194F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a26);
  _Unwind_Resume(a1);
}

uint64_t quasar::LmData::loadExternalData(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v5 = result;
  v58[20] = *MEMORY[0x1E4F143B8];
  if (*(char *)(result + 431) < 0)
  {
    if (!*(void *)(result + 416)) {
      return result;
    }
  }
  else if (!*(unsigned char *)(result + 431))
  {
    return result;
  }
  BOOL v6 = quasar::filesystem::exists((char *)(result + 408));
  int v7 = quasar::gLogLevel;
  if (!v6 && quasar::gLogLevel >= 1)
  {
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v43 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
    unsigned int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"external data file doesn't exist: ", 34);
    int v9 = *(char *)(v5 + 431);
    if (v9 >= 0) {
      uint64_t v10 = v5 + 408;
    }
    else {
      uint64_t v10 = *(void *)(v5 + 408);
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(v5 + 431);
    }
    else {
      uint64_t v11 = *(void *)(v5 + 416);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v41);
    int v7 = quasar::gLogLevel;
  }
  if (v7 >= 4)
  {
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v43 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Reading external data file ", 27);
    int v13 = *(char *)(v5 + 431);
    if (v13 >= 0) {
      uint64_t v14 = v5 + 408;
    }
    else {
      uint64_t v14 = *(void *)(v5 + 408);
    }
    if (v13 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(v5 + 431);
    }
    else {
      uint64_t v15 = *(void *)(v5 + 416);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v41);
  }
  std::ifstream::basic_ifstream((uint64_t *)&v41);
  uint64_t v16 = v41;
  if (!*(_DWORD *)((char *)&v43 + *(void *)(v41 - 24)))
  {
    int v17 = 0;
    memset(&__str, 0, sizeof(__str));
    unsigned int v18 = (std::locale::id *)MEMORY[0x1E4FBA258];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)&v41 + *(void *)(v16 - 24)));
      CFIndex v19 = std::locale::use_facet((const std::locale *)&v38, v18);
      unsigned __int8 v20 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
      std::locale::~locale((std::locale *)&v38);
      int v21 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v41, (uint64_t)&__str, v20);
      if ((*((unsigned char *)v21 + *(void *)(*v21 - 24) + 32) & 5) != 0) {
        break;
      }
      memset(&v38, 0, sizeof(v38));
      if (a2)
      {
        std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        p_str = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if (size)
        {
          uint64_t v24 = (unsigned __int8 *)p_str + size;
          uint64_t v25 = p_str;
LABEL_30:
          uint64_t v26 = 0;
          while (v25->__r_.__value_.__s.__data_[0] != asc_1B26801D4[v26])
          {
            if (++v26 == 2)
            {
              uint64_t v25 = (std::string *)((char *)v25 + 1);
              if (v25 != (std::string *)v24) {
                goto LABEL_30;
              }
              uint64_t v25 = (std::string *)v24;
              break;
            }
          }
          std::string::size_type v27 = (char *)v25 - (char *)p_str;
          if (v25 == (std::string *)v24) {
            std::string::size_type v28 = -1;
          }
          else {
            std::string::size_type v28 = v27;
          }
        }
        else
        {
          std::string::size_type v28 = -1;
        }
        std::string::basic_string(&v37, &__str, 0, v28, (std::allocator<char> *)v40);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v38.__r_.__value_.__l.__data_);
        }
        std::string v38 = v37;
        std::string::basic_string(&v37, &__str, v28 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v40);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        std::string __str = v37;
      }
      else
      {
        std::to_string(&v37, v17);
        int v29 = *(char *)(a3 + 23);
        if (v29 >= 0) {
          char v30 = (const std::string::value_type *)a3;
        }
        else {
          char v30 = *(const std::string::value_type **)a3;
        }
        if (v29 >= 0) {
          std::string::size_type v31 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          std::string::size_type v31 = *(void *)(a3 + 8);
        }
        uint64_t v32 = std::string::insert(&v37, 0, v30, v31);
        std::string::size_type v33 = v32->__r_.__value_.__r.__words[0];
        *(void *)long long v40 = v32->__r_.__value_.__l.__size_;
        *(void *)&v40[7] = *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 7);
        char v34 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v38.__r_.__value_.__l.__data_);
        }
        v38.__r_.__value_.__r.__words[0] = v33;
        v38.__r_.__value_.__l.__size_ = *(void *)v40;
        *(std::string::size_type *)((char *)&v38.__r_.__value_.__r.__words[1] + 7) = *(void *)&v40[7];
        *((unsigned char *)&v38.__r_.__value_.__s + 23) = v34;
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v37.__r_.__value_.__l.__data_);
        }
        ++v17;
      }
      std::string::size_type v35 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v35 = __str.__r_.__value_.__l.__size_;
      }
      if (v35)
      {
        LODWORD(v37.__r_.__value_.__l.__data_) = 0;
        unsigned int v36 = quasar::LmData::hash((void *)v5, (uint64_t)&v38, 1);
        LODWORD(v37.__r_.__value_.__l.__data_) = v36;
        if (*(unsigned char *)(v5 + 996))
        {
          quasar::trim(&__str);
          quasar::LmData::addLine((_DWORD *)v5, (int *)&v37, (uint64_t)&v38, (uint64_t)&__str);
        }
        else
        {
          ++*(_DWORD *)(v5 + 60 * v36 + 116);
        }
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      uint64_t v16 = v41;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  *(void *)&long long v41 = *MEMORY[0x1E4FBA3F8];
  *(void *)((char *)&v41 + *(void *)(v41 - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1B3EA7CF0](&v42);
  std::istream::~istream();
  uint64_t result = MEMORY[0x1B3EA8520](v58);
  ++*(_DWORD *)(v5 + 304);
  return result;
}

void sub_1B2419C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,long long a32,long long a33,long long a34,long long a35,long long a36,long long a37,long long a38,long long a39,long long a40,long long a41,long long a42,long long a43,long long a44,long long a45,long long a46,long long a47,long long a48)
{
  if (a2)
  {
    long long v49 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      if (quasar::gLogLevel >= 1)
      {
        long long v50 = v49;
        a47 = 0u;
        a48 = 0u;
        a45 = 0u;
        a46 = 0u;
        a43 = 0u;
        a44 = 0u;
        a41 = 0u;
        a42 = 0u;
        a39 = 0u;
        a40 = 0u;
        a37 = 0u;
        a38 = 0u;
        a35 = 0u;
        a36 = 0u;
        a34 = 0u;
        a32 = 0u;
        a33 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a32);
        long long v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a32, (uint64_t)"C++ exception: ", 15);
        long long v52 = (const char *)(*(uint64_t (**)(void *))(*(void *)v50 + 16))(v50);
        size_t v53 = strlen(v52);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a32);
      }
    }
    else if (quasar::gLogLevel >= 1)
    {
      a47 = 0u;
      a48 = 0u;
      a45 = 0u;
      a46 = 0u;
      a43 = 0u;
      a44 = 0u;
      a41 = 0u;
      a42 = 0u;
      a39 = 0u;
      a40 = 0u;
      a37 = 0u;
      a38 = 0u;
      a35 = 0u;
      a36 = 0u;
      a34 = 0u;
      a32 = 0u;
      a33 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a32, (uint64_t)"Unknown exception", 17);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a32);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B2419BECLL);
  }
  _Unwind_Resume(exception_object);
}

void quasar::LmData::~LmData(quasar::LmData *this)
{
  *(void *)this = &unk_1F0A58F88;
  if (quasar::gLogLevel >= 4)
  {
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v15);
    char v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Train data: ", 12);
    quasar::operator<<(v2, (unsigned int *)this + 27);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v15);
    if (quasar::gLogLevel >= 4)
    {
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v15 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v15);
      long long v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Dev data: ", 10);
      quasar::operator<<(v3, (unsigned int *)this + 42);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v15);
      if (quasar::gLogLevel >= 4)
      {
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        long long v15 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v15);
        int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Test data: ", 11);
        quasar::operator<<(v4, (unsigned int *)this + 57);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v15);
        if (quasar::gLogLevel >= 4)
        {
          long long v30 = 0u;
          long long v31 = 0u;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          long long v20 = 0u;
          long long v21 = 0u;
          long long v18 = 0u;
          long long v19 = 0u;
          long long v16 = 0u;
          long long v17 = 0u;
          long long v15 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v15);
          uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"External test data: ", 20);
          quasar::operator<<(v5, (unsigned int *)this + 72);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v15);
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 1008);
  for (uint64_t i = 968; i != 872; i -= 24)
  {
    *(void *)&long long v15 = (char *)this + i;
    std::vector<quasar::lm::TokenStringAndCount>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  }
  uint64_t v7 = *((void *)this + 111);
  *((void *)this + 111) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  std::unique_ptr<quasar::Munger>::reset[abi:ne180100]((void ***)this + 110, 0);
  uint64_t v8 = *((void *)this + 109);
  *((void *)this + 109) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  if (*((char *)this + 871) < 0) {
    operator delete(*((void **)this + 106));
  }
  if (*((char *)this + 839) < 0) {
    operator delete(*((void **)this + 102));
  }
  if (*((char *)this + 815) < 0) {
    operator delete(*((void **)this + 99));
  }
  if (*((char *)this + 767) < 0) {
    operator delete(*((void **)this + 93));
  }
  if (*((char *)this + 743) < 0) {
    operator delete(*((void **)this + 90));
  }
  if (*((char *)this + 719) < 0) {
    operator delete(*((void **)this + 87));
  }
  if (*((char *)this + 695) < 0) {
    operator delete(*((void **)this + 84));
  }
  if (*((char *)this + 671) < 0) {
    operator delete(*((void **)this + 81));
  }
  if (*((char *)this + 647) < 0) {
    operator delete(*((void **)this + 78));
  }
  int v9 = (void *)*((void *)this + 69);
  if (v9)
  {
    *((void *)this + 70) = v9;
    operator delete(v9);
  }
  *(void *)&long long v15 = (char *)this + 504;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  uint64_t v10 = (void *)*((void *)this + 60);
  if (v10)
  {
    *((void *)this + 61) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 57);
  if (v11)
  {
    *((void *)this + 58) = v11;
    operator delete(v11);
  }
  if (*((char *)this + 455) < 0) {
    operator delete(*((void **)this + 54));
  }
  if (*((char *)this + 431) < 0) {
    operator delete(*((void **)this + 51));
  }
  if (*((char *)this + 407) < 0) {
    operator delete(*((void **)this + 48));
  }
  *(void *)&long long v15 = (char *)this + 360;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  uint64_t v12 = *((void *)this + 44);
  *((void *)this + 44) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  int v13 = (void *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v13) {
    std::default_delete<quasar::lm::SymbolTableData>::operator()[abi:ne180100]((uint64_t)this + 96, v13);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  uint64_t v14 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
}

uint64_t quasar::LmData::hash(void *a1, uint64_t a2, int a3)
{
  float v5 = (float)(std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v15, a2) % 0x3E8) / 1000.0;
  if (a3)
  {
    BOOL v6 = (float *)a1[60];
    uint64_t v7 = (float *)a1[61];
    if (v6 == v7) {
      return 3;
    }
    if ((char *)v7 - (char *)v6 == 12)
    {
      float v8 = *v6;
      if (v5 <= *v6 && v8 > 0.0) {
        return 0;
      }
      float v12 = v6[1];
      if (v12 <= v8 || v12 <= 0.0 || v5 > v12) {
        return 3;
      }
      else {
        return 1;
      }
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "externalSplitOffsets.size() == NumPartitions");
LABEL_26:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  uint64_t v10 = a1[57];
  if (a1[58] - v10 != 12)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "splitOffsets.size() == NumPartitions");
    goto LABEL_26;
  }
  for (uint64_t i = 0; i != 3; ++i)
  {
    if (v5 <= *(float *)(v10 + 4 * i)) {
      break;
    }
  }
  if (i >= 2) {
    return 2;
  }
  else {
    return i;
  }
}

void quasar::LmData::sanitize(uint64_t a1, uint64_t a2)
{
  int v3 = quasar::TextSanitizer::sanitize(*(void *)(a1 + 352), a2);
  int v4 = *(char *)(a2 + 23);
  if (v3)
  {
    if (v4 < 0)
    {
      **(unsigned char **)a2 = 0;
      *(void *)(a2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 23) = 0;
    }
  }
  else
  {
    if (v4 < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = 0uLL;
    *(void *)(a2 + 16) = 0;
  }
}

void sub_1B241A48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::LmData::addLine(_DWORD *a1, int *a2, uint64_t a3, uint64_t a4)
{
  int v4 = a1[26];
  if (v4 == 2)
  {
    float v5 = *(uint64_t (**)(void))(*(void *)a1 + 24);
  }
  else
  {
    if (v4 == 1)
    {
      int v6 = *a2;
      quasar::LmData::addNgramCount((uint64_t)a1, v6, a4);
    }
    if (v4)
    {
      memset(v8, 0, sizeof(v8));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Unsupported input type ", 23);
      std::ostream::operator<<();
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v8);
    }
    float v5 = *(uint64_t (**)(void))(*(void *)a1 + 24);
  }
  return v5();
}

BOOL quasar::LmData::tokenizeSentence(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  (*(void (**)(void, uint64_t, uint64_t *))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), a2, &v7);
  uint64_t v4 = v7;
  uint64_t v5 = v8;
  if (v7 != v8)
  {
    std::vector<std::pair<std::string,float>>::__vdeallocate(a3);
    *(_OWORD *)a3 = *(_OWORD *)v4;
    a3[2] = *(void *)(v4 + 16);
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
  }
  uint64_t v10 = (void **)&v7;
  std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100](&v10);
  return v4 != v5;
}

void sub_1B241A680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::LmData::addNgramCount(uint64_t a1, int a2, uint64_t a3)
{
  if (!a2)
  {
    if (quasar::gLogLevel >= 6)
    {
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"RECEIVED ", 9);
      int v5 = *(char *)(a3 + 23);
      if (v5 >= 0) {
        uint64_t v6 = a3;
      }
      else {
        uint64_t v6 = *(void *)a3;
      }
      if (v5 >= 0) {
        uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v7 = *(void *)(a3 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&__p);
    }
    void v8[3] = (void *)1;
    std::string::basic_string[abi:ne180100]<0>(&v9, "");
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v11 = 0u;
    long long v10 = 0u;
    std::string::basic_string[abi:ne180100]<0>(&__p, " \t");
    quasar::splitStringSimple(a3, (uint64_t *)&__p, (unint64_t)v8);
  }
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long __p = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "addNgramCounts only support training data currently!");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
}

void sub_1B241AF3C()
{
}

void sub_1B241AF48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B241AFBCLL);
}

void sub_1B241AF60()
{
}

void sub_1B241AF68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void sub_1B241AF80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__split_buffer<std::wstring> *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
}

void sub_1B241AF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  long long v11 = va_arg(va2, void **);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v18 = va_arg(va3, void);
  va_copy((va_list)v7, va1);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  va_copy((va_list)v11, va2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  quasar::lm::TokenStringAndCount::~TokenStringAndCount((quasar::lm::TokenStringAndCount *)va3);
  _Unwind_Resume(a1);
}

unint64_t std::vector<quasar::lm::TokenStringAndCount>::emplace_back<quasar::lm::TokenStringAndCount>(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v4 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v4)
  {
    uint64_t v8 = (uint64_t)(v6 - *a1) >> 7;
    if ((unint64_t)(v8 + 1) >> 57) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - *a1;
    uint64_t v10 = v9 >> 6;
    if (v9 >> 6 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFF80) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t v18 = a1 + 2;
    if (v11) {
      long long v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::lm::TokenStringAndCount>>((uint64_t)(a1 + 2), v11);
    }
    else {
      long long v12 = 0;
    }
    uint64_t v14 = v12;
    uint64_t v15 = &v12[128 * v8];
    uint64_t v17 = &v12[128 * v11];
    std::allocator<quasar::lm::TokenStringAndCount>::construct[abi:ne180100]<quasar::lm::TokenStringAndCount,quasar::lm::TokenStringAndCount>(v5, (uint64_t)v15, a2);
    long long v16 = v15 + 128;
    std::vector<quasar::lm::TokenStringAndCount>::__swap_out_circular_buffer(a1, &v14);
    unint64_t v7 = a1[1];
    std::__split_buffer<quasar::lm::TokenStringAndCount>::~__split_buffer(&v14);
  }
  else
  {
    std::allocator<quasar::lm::TokenStringAndCount>::construct[abi:ne180100]<quasar::lm::TokenStringAndCount,quasar::lm::TokenStringAndCount>((uint64_t)(a1 + 2), v6, a2);
    unint64_t v7 = v6 + 128;
    a1[1] = v6 + 128;
  }
  a1[1] = v7;
  return v7 - 128;
}

void sub_1B241B0D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::lm::TokenStringAndCount>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void quasar::lm::TokenStringAndCount::~TokenStringAndCount(quasar::lm::TokenStringAndCount *this)
{
  unint64_t v4 = (void **)((char *)this + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  char v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t quasar::LmData::mapSymbols(uint64_t a1, uint64_t *a2, void *a3, _DWORD *a4)
{
  *a4 = 0;
  uint64_t v5 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v9 = 0;
    long long v49 = (void **)(a3 + 7);
    long long v50 = (std::vector<std::string> *)(a3 + 4);
    std::string __str = (std::string *)(a1 + 48);
    uint64_t v48 = (uint64_t)(a3 + 6);
    uint64_t v46 = (uint64_t)(a3 + 9);
    while (1)
    {
      uint64_t v10 = (long long *)(v5 + 24 * v9);
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v11 = *v10;
        v66.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
        *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v11;
      }
      int v12 = quasar::lm::SymbolTableData::getAndCheckSymbolId(*(void *)(a1 + 96), (uint64_t)&v66);
      int v13 = v12;
      if (!v9 && v12 == *(_DWORD *)(*(void *)(a1 + 96) + 80)) {
        break;
      }
      if (-1 - 0x5555555555555555 * ((a2[1] - *a2) >> 3) == v9 && v12 == *(_DWORD *)(*(void *)(a1 + 96) + 84)) {
        break;
      }
      if (v12 > 0) {
        goto LABEL_11;
      }
      ++*a4;
      (*(void (**)(uint64_t, std::string *, void))(*(void *)a1 + 32))(a1, &v66, *(unsigned int *)a3);
      if (*(int *)(a1 + 8) < 1) {
        break;
      }
      std::string::operator=(&v66, __str);
      int v13 = *(_DWORD *)(a1 + 8);
      uint64_t v18 = a3[8];
      if (a3[7] != v18 && *(_DWORD *)(v18 - 4) == v13) {
        break;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 40))(a1))
      {
LABEL_11:
        unint64_t v14 = a3[5];
        unint64_t v15 = a3[6];
        if (v14 >= v15)
        {
          unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (unint64_t)v50->__begin_) >> 3);
          unint64_t v21 = v20 + 1;
          if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (unint64_t)v50->__begin_) >> 3);
          if (2 * v22 > v21) {
            unint64_t v21 = 2 * v22;
          }
          if (v22 >= 0x555555555555555) {
            unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v23 = v21;
          }
          *(void *)&__v[32] = v48;
          if (v23) {
            long long v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v48, v23);
          }
          else {
            long long v24 = 0;
          }
          long long v25 = &v24[24 * v20];
          *(void *)__v = v24;
          *(void *)&__v[8] = v25;
          *(void *)&__v[24] = &v24[24 * v23];
          long long v26 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
          *((void *)v25 + 2) = *((void *)&v66.__r_.__value_.__l + 2);
          *(_OWORD *)long long v25 = v26;
          memset(&v66, 0, sizeof(v66));
          *(void *)&__v[16] = v25 + 24;
          std::vector<std::string>::__swap_out_circular_buffer(v50, (std::__split_buffer<std::string> *)__v);
          unint64_t v17 = a3[5];
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
        }
        else
        {
          long long v16 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
          *(void *)(v14 + 16) = *((void *)&v66.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v14 = v16;
          memset(&v66, 0, sizeof(v66));
          unint64_t v17 = v14 + 24;
          a3[5] = v14 + 24;
        }
        a3[5] = v17;
        long long v28 = (char *)a3[8];
        unint64_t v27 = a3[9];
        if ((unint64_t)v28 >= v27)
        {
          long long v30 = (char *)*v49;
          uint64_t v31 = (v28 - (unsigned char *)*v49) >> 2;
          unint64_t v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v33 = v27 - (void)v30;
          if (v33 >> 1 > v32) {
            unint64_t v32 = v33 >> 1;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v32;
          }
          if (v34)
          {
            std::string::size_type v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v46, v34);
            long long v30 = (char *)a3[7];
            long long v28 = (char *)a3[8];
          }
          else
          {
            std::string::size_type v35 = 0;
          }
          unsigned int v36 = (int *)&v35[4 * v31];
          *unsigned int v36 = v13;
          long long v29 = v36 + 1;
          while (v28 != v30)
          {
            int v37 = *((_DWORD *)v28 - 1);
            v28 -= 4;
            *--unsigned int v36 = v37;
          }
          a3[7] = v36;
          a3[8] = v29;
          a3[9] = &v35[4 * v34];
          if (v30) {
            operator delete(v30);
          }
        }
        else
        {
          *(_DWORD *)long long v28 = v13;
          long long v29 = v28 + 4;
        }
        int v19 = 0;
        a3[8] = v29;
      }
      else
      {
        int v19 = 1;
      }
LABEL_46:
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      if ((v19 | 4) != 4) {
        return 0;
      }
      ++v9;
      uint64_t v5 = *a2;
      if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v9) {
        goto LABEL_50;
      }
    }
    int v19 = 4;
    goto LABEL_46;
  }
LABEL_50:
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[5] - a3[4]) >> 3) == (uint64_t)(a3[8] - a3[7]) >> 2) {
    return 1;
  }
  if (quasar::gLogLevel >= 1)
  {
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    memset(__v, 0, sizeof(__v));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
    uint64_t v41 = a3[1];
    long long v40 = a3 + 1;
    uint64_t v39 = v41;
    int v42 = *((char *)v40 + 23);
    if (v42 >= 0) {
      uint64_t v43 = (uint64_t)v40;
    }
    else {
      uint64_t v43 = v39;
    }
    if (v42 >= 0) {
      uint64_t v44 = *((unsigned __int8 *)v40 + 23);
    }
    else {
      uint64_t v44 = v40[1];
    }
    long long v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, v43, v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" : number of tokens and symbolIds don't match", 45);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__v);
  }
  return 0;
}

void sub_1B241B5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__split_buffer<std::wstring> *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
}

uint64_t quasar::LmData::addTokenizedSentence(uint64_t a1, unsigned int a2, std::string *a3, uint64_t a4, _DWORD *a5, uint64_t a6, unsigned int a7, _DWORD *a8)
{
  unint64_t v14 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v89, "");
  memset(v95, 0, sizeof(v95));
  long long v94 = 0u;
  long long v93 = 0u;
  long long v92 = 0u;
  long long v91 = 0u;
  std::string::operator=(v14, a3);
  uint64_t v88 = a7;
  __int16 v87 = 0;
  if (a2 != 3)
  {
    uint64_t v15 = *(void *)(a1 + 880);
    if (v15) {
      quasar::Munger::munge(v15, (uint64_t *)a4, (unsigned char *)&v87 + 1, &v87);
    }
  }
  unsigned int v58 = a2;
  memset(&v86, 0, sizeof(v86));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v86, *(long long **)a4, *(long long **)(a4 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3));
  if (*(unsigned char *)(a1 + 1000))
  {
    std::string::size_type size = v86.__r_.__value_.__l.__size_;
    for (uint64_t i = (char *)v86.__r_.__value_.__r.__words[0]; i != (char *)size; i += 24)
    {
      v66[0] = i;
      uint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 1008, (unsigned __int8 *)i, (uint64_t)&std::piecewise_construct, (long long **)v66);
      ++*((_DWORD *)v18 + 10);
    }
  }
  unsigned int v85 = 0;
  if ((quasar::LmData::mapSymbols(a1, (uint64_t *)a4, &v88, &v85) & 1) == 0) {
    goto LABEL_27;
  }
  uint64_t v19 = *(void *)a4;
  uint64_t v20 = *(void *)(a4 + 8);
  if (*(void *)a4 == v20 || *((void *)&v92 + 1) == (void)v93 && (void)v91 == *((void *)&v91 + 1))
  {
    if (quasar::gLogLevel >= 6)
    {
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      int64x2_t v68 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v68);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"Reject due to empty", 19);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v68);
    }
    a5[2] += a7;
    uint64_t v25 = 0;
    if (HIBYTE(v87)) {
      a5[3] += a7;
    }
  }
  else
  {
    if (v58 != 3)
    {
      unsigned int v21 = v85;
      float v22 = (float)v85 / (float)(0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 3));
      if (quasar::gLogLevel >= 6)
      {
        long long v83 = 0u;
        long long v84 = 0u;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        long long v73 = 0u;
        long long v74 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        long long v69 = 0u;
        long long v70 = 0u;
        int64x2_t v68 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v68);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"oovRatio=", 9);
        unint64_t v23 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" numTokensOOV=", 14);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v68);
      }
      float v24 = *(float *)(a1 + 596);
      if (v24 >= 0.0 && v22 > v24)
      {
        if (quasar::gLogLevel >= 6)
        {
          long long v83 = 0u;
          long long v84 = 0u;
          long long v81 = 0u;
          long long v82 = 0u;
          long long v79 = 0u;
          long long v80 = 0u;
          long long v77 = 0u;
          long long v78 = 0u;
          long long v75 = 0u;
          long long v76 = 0u;
          long long v73 = 0u;
          long long v74 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          long long v69 = 0u;
          long long v70 = 0u;
          int64x2_t v68 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v68);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"Reject due to high oov ratio", 28);
LABEL_26:
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v68);
          goto LABEL_27;
        }
        goto LABEL_27;
      }
      unsigned int v26 = *(_DWORD *)(a1 + 604);
      if ((v26 & 0x80000000) == 0 && v21 > v26)
      {
        if (quasar::gLogLevel >= 6)
        {
          long long v83 = 0u;
          long long v84 = 0u;
          long long v81 = 0u;
          long long v82 = 0u;
          long long v79 = 0u;
          long long v80 = 0u;
          long long v77 = 0u;
          long long v78 = 0u;
          long long v75 = 0u;
          long long v76 = 0u;
          long long v73 = 0u;
          long long v74 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          long long v69 = 0u;
          long long v70 = 0u;
          int64x2_t v68 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v68);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"Reject due to high oov count", 28);
          goto LABEL_26;
        }
LABEL_27:
        uint64_t v25 = 0;
LABEL_28:
        a5[2] += a7;
        goto LABEL_29;
      }
      if (*(void *)(a1 + 888))
      {
        quasar::LmInfo::LmInfo((uint64_t)v66, 1, (long long *)a3);
        int64x2_t v56 = vdupq_n_s64(0x4076800000000000uLL);
        int64x2_t v68 = v56;
        double Latitude = quasar::Location::getLatitude((quasar::Location *)&v68);
        int64x2_t v68 = v56;
        double Weight = quasar::corrective_reranking::VoiceEditingWFST::Path::getWeight((quasar::corrective_reranking::VoiceEditingWFST::Path *)&v68);
        uint64_t v30 = *(void *)(a1 + 888);
        int64x2_t v68 = 0uLL;
        *(void *)&long long v69 = 0;
        int64x2_t v64 = v56;
        v65[0] = quasar::Location::knownOrFallback((uint64_t)&v64, Latitude, Weight);
        v65[1] = v31;
        long long v61 = 0;
        uint64_t v62 = 0;
        uint64_t v63 = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        memset(v59, 0, sizeof(v59));
        BYTE2(v55) = 0;
        LOWORD(v55) = 0;
        quasar::FstLmScorer::computeLmScore(v30, (int)&v68, (int)v65, (long long *)(a1 + 72), (int)&v91, 0, (int)v66, (void **)&v61, 0, &__p, (uint64_t)&v92 + 8, v55, 0, (uint64_t)v59, 1);
      }
    }
    unint64_t v32 = *(unsigned int *)(a1 + 576);
    uint64_t v34 = *((void *)&v92 + 1);
    uint64_t v33 = v93;
    if (v32)
    {
      if ((unint64_t)*(unsigned int *)(a1 + 992) + ((uint64_t)(v93 - *((void *)&v92 + 1)) >> 2) >= v32)
      {
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 996) = 0;
        goto LABEL_28;
      }
      uint64_t v35 = (uint64_t)(v93 - *((void *)&v92 + 1)) >> 2;
    }
    else
    {
      uint64_t v35 = (uint64_t)(v93 - *((void *)&v92 + 1)) >> 2;
    }
    a5[9] += v85 * a7;
    int v36 = v35 * a7;
    if (a8) {
      *a8 = v36;
    }
    a5[8] += v36;
    *(_DWORD *)(a1 + 992) += v36;
    ++a5[7];
    a5[5] += a7;
    if ((_BYTE)v87) {
      a5[6] += a7;
    }
    if (!v58)
    {
      if (v33 != v34)
      {
        unint64_t v37 = 0;
        uint64_t v33 = v34;
        do
        {
          int v38 = quasar::lm::SymbolTableData::observeTrainingSymbol(*(void **)(a1 + 96), (int *)(v33 + 4 * v37), (uint64_t *)(v91 + 24 * v37));
          int v39 = v38;
          long long v40 = (char *)*((void *)&v94 + 1);
          if (*((void *)&v94 + 1) >= *(void *)&v95[0])
          {
            int v42 = (char *)v94;
            uint64_t v43 = (uint64_t)(*((void *)&v94 + 1) - v94) >> 2;
            unint64_t v44 = v43 + 1;
            if ((unint64_t)(v43 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v45 = *(void *)&v95[0] - v94;
            if ((uint64_t)(*(void *)&v95[0] - v94) >> 1 > v44) {
              unint64_t v44 = v45 >> 1;
            }
            if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v46 = v44;
            }
            if (v46)
            {
              long long v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v95, v46);
              long long v40 = (char *)*((void *)&v94 + 1);
              int v42 = (char *)v94;
            }
            else
            {
              long long v47 = 0;
            }
            uint64_t v48 = &v47[4 * v43];
            *(_DWORD *)uint64_t v48 = v39;
            uint64_t v41 = v48 + 4;
            while (v40 != v42)
            {
              int v49 = *((_DWORD *)v40 - 1);
              v40 -= 4;
              *((_DWORD *)v48 - 1) = v49;
              v48 -= 4;
            }
            *(void *)&long long v94 = v48;
            *((void *)&v94 + 1) = v41;
            *(void *)&v95[0] = &v47[4 * v46];
            if (v42) {
              operator delete(v42);
            }
          }
          else
          {
            **((_DWORD **)&v94 + 1) = v38;
            uint64_t v41 = v40 + 4;
          }
          *((void *)&v94 + 1) = v41;
          ++v37;
          uint64_t v33 = *((void *)&v92 + 1);
        }
        while (v37 < (uint64_t)(v93 - *((void *)&v92 + 1)) >> 2);
      }
      if (!*(unsigned char *)(a1 + 998)) {
        *(void *)&long long v93 = v33;
      }
    }
    if (quasar::gLogLevel >= 6)
    {
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      int64x2_t v68 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v68);
      long long v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"ADDED ", 6);
      long long v61 = ",";
      uint64_t v62 = 1;
      quasar::join<std::vector<std::string>>((uint64_t *)&v91, (uint64_t *)&v61);
      if (v67 >= 0) {
        long long v51 = v66;
      }
      else {
        long long v51 = (void **)v66[0];
      }
      if (v67 >= 0) {
        uint64_t v52 = HIBYTE(v67);
      }
      else {
        uint64_t v52 = (uint64_t)v66[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
      if (SHIBYTE(v67) < 0) {
        operator delete(v66[0]);
      }
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v68);
    }
    if (!*(unsigned char *)(a1 + 997))
    {
      uint64_t v54 = *((void *)&v91 + 1);
      uint64_t v53 = v91;
      while (v54 != v53)
      {
        if (*(char *)(v54 - 1) < 0) {
          operator delete(*(void **)(v54 - 24));
        }
        v54 -= 24;
      }
      *((void *)&v91 + 1) = v53;
    }
    if (*(unsigned char *)(a1 + 999))
    {
      std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)((char *)v95 + 8));
      *(std::string *)((char *)v95 + 8) = v86;
      memset(&v86, 0, sizeof(v86));
    }
    std::vector<quasar::lm::TokenStringAndCount>::emplace_back<quasar::lm::TokenStringAndCount>((uint64_t *)(a1 + 24 * v58 + 896), (uint64_t)&v88);
    uint64_t v25 = 1;
  }
LABEL_29:
  v68.i64[0] = (uint64_t)&v86;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  v68.i64[0] = (uint64_t)v95 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  if ((void)v94)
  {
    *((void *)&v94 + 1) = v94;
    operator delete((void *)v94);
  }
  if (*((void *)&v92 + 1))
  {
    *(void *)&long long v93 = *((void *)&v92 + 1);
    operator delete(*((void **)&v92 + 1));
  }
  v68.i64[0] = (uint64_t)&v91;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  if (v90 < 0) {
    operator delete(v89);
  }
  return v25;
}

void sub_1B241C02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a47);
  quasar::LmInfo::~LmInfo((quasar::LmInfo *)&a34);
  a47 = (uint64_t)&STACK[0x250];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  quasar::lm::TokenStringAndCount::~TokenStringAndCount((quasar::lm::TokenStringAndCount *)(v47 - 248));
  _Unwind_Resume(a1);
}

void *quasar::LmData::serialize(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 96);
  v12[0] = a3;
  v12[1] = v5;
  uint64_t v31 = 0;
  int v6 = *(_DWORD *)(a1 + 104);
  if (v6 == 2)
  {
    unint64_t v7 = &unk_1F0A5D040;
  }
  else if (v6 == 1)
  {
    unint64_t v7 = &unk_1F0A5D098;
  }
  else
  {
    if (v6)
    {
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v13 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Unsupported input type ", 23);
      std::ostream::operator<<();
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v13);
    }
    unint64_t v7 = &unk_1F0A5CFE8;
  }
  *(void *)&long long v13 = v7;
  *((void *)&v13 + 1) = a3;
  *(void *)&long long v14 = v12;
  *((void *)&v14 + 1) = &v13;
  std::__function::__value_func<void ()(quasar::lm::TokenStringAndCount const&)>::swap[abi:ne180100](&v13, v30);
  std::__function::__value_func<void ()(quasar::lm::TokenStringAndCount const&)>::~__value_func[abi:ne180100](&v13);
  uint64_t v8 = a1 + 24 * a2;
  uint64_t v9 = *(void *)(v8 + 896);
  uint64_t v10 = *(void *)(v8 + 904);
  while (v9 != v10)
  {
    if (!v31) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 48))(v31, v9);
    v9 += 128;
  }
  return std::__function::__value_func<void ()(quasar::lm::TokenStringAndCount const&)>::~__value_func[abi:ne180100](v30);
}

void sub_1B241C31C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::LmData::getSentences(uint64_t a1, unsigned int a2)
{
  return a1 + 24 * a2 + 896;
}

double quasar::LmData::parseCountPhrase(std::string *__str, uint64_t a2, int *a3)
{
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    unint64_t v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
    if (!size) {
      goto LABEL_18;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    unint64_t v7 = __str;
    if (!*((unsigned char *)&__str->__r_.__value_.__s + 23)) {
      goto LABEL_18;
    }
  }
  uint64_t v8 = (unsigned __int8 *)v7 + size;
  uint64_t v9 = v7;
LABEL_6:
  uint64_t v10 = 0;
  while (v9->__r_.__value_.__s.__data_[0] != asc_1B26801D4[v10])
  {
    if (++v10 == 2)
    {
      uint64_t v9 = (std::string *)((char *)v9 + 1);
      if (v9 == (std::string *)v8) {
        goto LABEL_18;
      }
      goto LABEL_6;
    }
  }
  if (v9 == (std::string *)v8 || (int64_t v11 = (char *)v9 - (char *)v7, (char *)v9 - (char *)v7 == -1))
  {
LABEL_18:
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"invalid input sentence: ", 24);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v13, (uint64_t)__str);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::string::basic_string((std::string *)__p, __str, 0, (char *)v9 - (char *)v7, (std::allocator<char> *)&v31);
  *a3 = std::stoi((const std::string *)__p, 0, 10);
  if (SBYTE7(v15) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string((std::string *)__p, __str, v11 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v31);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)__p;
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(void *)(a2 + 16) = v15;
  return result;
}

uint64_t quasar::LmData::setInputType(uint64_t result, int a2)
{
  if (a2 == 4) {
    a2 = *(_DWORD *)(result + 104);
  }
  *(_DWORD *)(result + 104) = a2;
  return result;
}

void quasar::LmData::loadFromTextFile()
{
}

void sub_1B241C714(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void quasar::LmData::loadFromStream(quasar::LmData *a1, void **a2, int *a3, uint64_t a4, int a5)
{
  std::istream_iterator<quasar::internal::Line,char,std::char_traits<char>,long>::istream_iterator[abi:ne180100](&v11, *a2);
  *(_OWORD *)long long __p = 0u;
  long long v10 = 0u;
  quasar::LmData::loadFromIterator<std::istream_iterator<quasar::internal::Line,char,std::char_traits<char>,long>>(a1, (uint64_t)&v11, (void **)__p, a3, a4, a5);
}

void sub_1B241C7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  quasar::LmData::loadFromStream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void quasar::LmData::loadFromIterator<std::istream_iterator<quasar::internal::Line,char,std::char_traits<char>,long>>(quasar::LmData *a1, uint64_t a2, void **a3, int *a4, uint64_t a5, int a6)
{
  if (a6 == 4) {
    a6 = *((_DWORD *)a1 + 26);
  }
  *((_DWORD *)a1 + 26) = a6;
  *((_DWORD *)a1 + 15 * *a4 + 27) = a6;
  long long v16 = *(void **)a2;
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    std::string v17 = *(std::string *)(a2 + 8);
  }
  int v10 = 0;
  while (v16 != *a3)
  {
    std::to_string(&v20, v10);
    int v11 = *(char *)(a5 + 23);
    if (v11 >= 0) {
      int v12 = (const std::string::value_type *)a5;
    }
    else {
      int v12 = *(const std::string::value_type **)a5;
    }
    if (v11 >= 0) {
      std::string::size_type v13 = *(unsigned __int8 *)(a5 + 23);
    }
    else {
      std::string::size_type v13 = *(void *)(a5 + 8);
    }
    long long v14 = std::string::insert(&v20, 0, v12, v13);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    std::string::size_type v19 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    quasar::LmData::addLine(a1, a4, (uint64_t)__p, (uint64_t)&v17);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    ++v10;
    std::istream_iterator<quasar::internal::Line,char,std::char_traits<char>,long>::operator++[abi:ne180100](&v16);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  quasar::LmData::getMetrics(a1, 1, (quasar::PTree *)&v16);
  quasar::PTree::writeJson();
}

void sub_1B241CB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (*(char *)(v51 - 65) < 0) {
    operator delete(*(void **)(v51 - 88));
  }
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  std::ostringstream::~ostringstream((uint64_t)&a46);
  _Unwind_Resume(a1);
}

uint64_t quasar::LmData::getWordFrequency(quasar::LmData *this)
{
  return (uint64_t)this + 1008;
}

uint64_t quasar::LmData::getSymbolTableData(quasar::LmData *this)
{
  return *((void *)this + 12);
}

uint64_t quasar::LmData::getSources(quasar::LmData *this)
{
  return (uint64_t)this + 504;
}

uint64_t quasar::LmData::getQueryLimit(quasar::LmData *this)
{
  return *((unsigned int *)this + 132);
}

double quasar::LmData::getMaxAgeSeconds(quasar::LmData *this)
{
  return *((double *)this + 67);
}

double quasar::LmData::getMinAgeSeconds(quasar::LmData *this)
{
  return *((double *)this + 68);
}

void quasar::LmData::getMetrics(quasar::LmData *this@<X0>, int a2@<W1>, quasar::PTree *a3@<X8>)
{
  quasar::PTree::PTree(a3);
  uint64_t v6 = 0;
  unint64_t v7 = (quasar::LmData *)((char *)this + 108);
  do
  {
    std::string::basic_string[abi:ne180100]<0>(__p, &quasar::EvaluationTask::dataSetOptions[v6]);
    quasar::LmData::Stats::ptree(v7, a2, *((unsigned __int8 *)this + 840), (quasar::PTree *)v8);
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)__p, (uint64_t)v8, 1);
    quasar::PTree::~PTree((quasar::PTree *)v8);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    v6 += 20;
    unint64_t v7 = (quasar::LmData::Stats *)((char *)v7 + 60);
  }
  while (v6 != 80);
}

void sub_1B241CCB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  quasar::PTree::~PTree((quasar::PTree *)&a10);
  if (a23 < 0) {
    operator delete(__p);
  }
  quasar::PTree::~PTree(v23);
  _Unwind_Resume(a1);
}

BOOL quasar::LmData::hasEnoughData(quasar::LmData *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 69);
  if (*((_DWORD *)this + 35) < *v1) {
    return 0;
  }
  unint64_t v3 = 0;
  unint64_t v4 = v1 + 1;
  uint64_t v5 = (unsigned int *)((char *)this + 200);
  do
  {
    unint64_t v6 = v3;
    if (v3 == 3) {
      break;
    }
    unsigned int v7 = *v5;
    v5 += 15;
    unsigned int v8 = v4[v3++];
  }
  while (v7 >= v8);
  return v6 > 2;
}

uint64_t quasar::LmData::hasRoomForMoreData(quasar::LmData *this)
{
  return *((unsigned __int8 *)this + 996);
}

void quasar::LmData::disallowMoreData(quasar::LmData *this)
{
  *((unsigned char *)this + 996) = 0;
  uint64_t v2 = *((void *)this + 44);
  *((void *)this + 44) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 109);
  *((void *)this + 109) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  std::unique_ptr<quasar::Munger>::reset[abi:ne180100]((void ***)this + 110, 0);
  uint64_t v5 = *((void *)this + 111);
  *((void *)this + 111) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  if (quasar::gLogLevel >= 4)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"numSymbolsInTrainSet ", 21);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v6);
  }
}

void sub_1B241CEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::default_delete<quasar::lm::SymbolTableData>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a2 + 18));
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a2 + 13));
    uint64_t v3 = (void *)a2[6];
    if (v3) {
      operator delete(v3);
    }
    uint64_t v4 = (void *)a2[3];
    if (v4) {
      operator delete(v4);
    }
    uint64_t v5 = a2[2];
    a2[2] = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    unint64_t v6 = (std::__shared_weak_count *)a2[1];
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    JUMPOUT(0x1B3EA8670);
  }
}

__n128 std::allocator<quasar::lm::TokenStringAndCount>::construct[abi:ne180100]<quasar::lm::TokenStringAndCount,quasar::lm::TokenStringAndCount>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = *(void *)a3;
  long long v3 = *(_OWORD *)(a3 + 8);
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(_OWORD *)(a2 + 8) = v3;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
  *(void *)(a2 + 72) = *(void *)(a3 + 72);
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a3 + 80);
  *(void *)(a2 + 96) = *(void *)(a3 + 96);
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  __n128 result = *(__n128 *)(a3 + 104);
  *(__n128 *)(a2 + 104) = result;
  *(void *)(a2 + 120) = *(void *)(a3 + 120);
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 120) = 0;
  return result;
}

uint64_t std::vector<quasar::lm::TokenStringAndCount>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::lm::TokenStringAndCount>,std::reverse_iterator<quasar::lm::TokenStringAndCount*>,std::reverse_iterator<quasar::lm::TokenStringAndCount*>,std::reverse_iterator<quasar::lm::TokenStringAndCount*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::lm::TokenStringAndCount>,std::reverse_iterator<quasar::lm::TokenStringAndCount*>,std::reverse_iterator<quasar::lm::TokenStringAndCount*>,std::reverse_iterator<quasar::lm::TokenStringAndCount*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 128;
      std::allocator<quasar::lm::TokenStringAndCount>::construct[abi:ne180100]<quasar::lm::TokenStringAndCount,quasar::lm::TokenStringAndCount>(a1, v7 - 128, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 128;
      *((void *)&v16 + 1) -= 128;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::lm::TokenStringAndCount>,std::reverse_iterator<quasar::lm::TokenStringAndCount*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::lm::TokenStringAndCount>,std::reverse_iterator<quasar::lm::TokenStringAndCount*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::lm::TokenStringAndCount>,std::reverse_iterator<quasar::lm::TokenStringAndCount*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::lm::TokenStringAndCount>,std::reverse_iterator<quasar::lm::TokenStringAndCount*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::lm::TokenStringAndCount>::destroy[abi:ne180100](v3, v1);
      v1 += 128;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::lm::TokenStringAndCount>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::lm::TokenStringAndCount>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 128;
    std::allocator<quasar::lm::TokenStringAndCount>::destroy[abi:ne180100](v4, i - 128);
  }
}

void *std::__function::__value_func<void ()(quasar::lm::TokenStringAndCount const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_1,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_1>,void ()(quasar::lm::TokenStringAndCount const&)>::~__func()
{
}

__n128 std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_1,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_1>,void ()(quasar::lm::TokenStringAndCount const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F0A5CFE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_1,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_1>,void ()(quasar::lm::TokenStringAndCount const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5CFE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_1,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_1>,void ()(quasar::lm::TokenStringAndCount const&)>::operator()(uint64_t a1, uint64_t a2)
{
  quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)const::$_0::operator()(*(void ****)(a1 + 16), a2);
  std::ios_base::getloc((const std::ios_base *)(**(void **)(a1 + 8) + *(void *)(***(void ***)(a1 + 8) - 24)));
  uint64_t v3 = std::locale::use_facet(&v5, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v5);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_1B241D418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_1,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_1>,void ()(quasar::lm::TokenStringAndCount const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_1,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_1>,void ()(quasar::lm::TokenStringAndCount const&)>::target_type()
{
}

void *quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)const::$_0::operator()(void ***a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 80);
  uint64_t v3 = *(void *)(a2 + 88);
  if (v2 == v3)
  {
    memset(v11, 0, sizeof(v11));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "Unable to serialize record.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v11);
  }
  unint64_t v6 = 0;
  do
  {
    if (v6)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(**a1, (uint64_t)" ", 1);
      uint64_t v2 = *(void *)(a2 + 80);
      uint64_t v3 = *(void *)(a2 + 88);
    }
    if (v6 >= (v3 - v2) >> 2) {
      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v7 = **a1;
    uint64_t v8 = (const char *)(*(uint64_t (**)(void, void))(**a1[1] + 32))(*a1[1], *(unsigned int *)(v2 + 4 * v6));
    size_t v9 = strlen(v8);
    __n128 result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    ++v6;
    uint64_t v2 = *(void *)(a2 + 80);
    uint64_t v3 = *(void *)(a2 + 88);
  }
  while (v6 < (v3 - v2) >> 2);
  return result;
}

void *std::__function::__value_func<void ()(quasar::lm::TokenStringAndCount const&)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    std::locale v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B241D820(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_2,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_2>,void ()(quasar::lm::TokenStringAndCount const&)>::~__func()
{
}

__n128 std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_2,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_2>,void ()(quasar::lm::TokenStringAndCount const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F0A5D040;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_2,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_2>,void ()(quasar::lm::TokenStringAndCount const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5D040;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_2,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_2>,void ()(quasar::lm::TokenStringAndCount const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\t", 1);
  quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)const::$_0::operator()(*(void ****)(a1 + 16), a2);
  std::ios_base::getloc((const std::ios_base *)(**(void **)(a1 + 8) + *(void *)(***(void ***)(a1 + 8) - 24)));
  std::locale v5 = std::locale::use_facet(&v7, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v7);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_1B241D998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_2,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_2>,void ()(quasar::lm::TokenStringAndCount const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_2,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_2>,void ()(quasar::lm::TokenStringAndCount const&)>::target_type()
{
}

void std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_3,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_3>,void ()(quasar::lm::TokenStringAndCount const&)>::~__func()
{
}

__n128 std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_3,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_3>,void ()(quasar::lm::TokenStringAndCount const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F0A5D098;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_3,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_3>,void ()(quasar::lm::TokenStringAndCount const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5D098;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_3,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_3>,void ()(quasar::lm::TokenStringAndCount const&)>::operator()(uint64_t a1, uint64_t a2)
{
  quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)const::$_0::operator()(*(void ****)(a1 + 16), a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(**(void ***)(a1 + 8), (uint64_t)"\t", 1);
  std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)(**(void **)(a1 + 8) + *(void *)(***(void ***)(a1 + 8) - 24)));
  uint64_t v3 = std::locale::use_facet(&v5, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v5);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_1B241DB60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_3,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_3>,void ()(quasar::lm::TokenStringAndCount const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_3,std::allocator<quasar::LmData::serialize(quasar::LmData::DataSetType,std::unique_ptr<std::ostream>)::$_3>,void ()(quasar::lm::TokenStringAndCount const&)>::target_type()
{
}

void *std::istream_iterator<quasar::internal::Line,char,std::char_traits<char>,long>::istream_iterator[abi:ne180100](void *a1, void *a2)
{
  *a1 = a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v3 = quasar::internal::operator>>(a2, (uint64_t)(a1 + 1));
  if ((*((unsigned char *)v3 + *(void *)(*v3 - 24) + 32) & 5) != 0) {
    *a1 = 0;
  }
  return a1;
}

void sub_1B241DC34(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::internal::operator>>(void *a1, uint64_t a2)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v4 = std::locale::use_facet(&v7, MEMORY[0x1E4FBA258]);
  unsigned __int8 v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v7);
  return std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, a2, v5);
}

void sub_1B241DCF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void **std::istream_iterator<quasar::internal::Line,char,std::char_traits<char>,long>::operator++[abi:ne180100](void **a1)
{
  uint64_t v2 = quasar::internal::operator>>(*a1, (uint64_t)(a1 + 1));
  if ((*((unsigned char *)v2 + *(void *)(*v2 - 24) + 32) & 5) != 0) {
    *a1 = 0;
  }
  return a1;
}

void sub_1B241DEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1B241E038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1B241E160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B241E390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1B3EA8670](v28, 0x10B3C40067A2A16);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a26);

  _Unwind_Resume(a1);
}

void sub_1B241E524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  std::vector<std::vector<quasar::CommandTagging>>::__destroy_vector::operator()[abi:ne180100](&a13);
  a13 = (void **)&a16;
  std::vector<std::vector<quasar::CommandTagging>>::__destroy_vector::operator()[abi:ne180100](&a13);
  std::__tree<std::string>::destroy(v17 - 64, *(char **)(v17 - 56));

  _Unwind_Resume(a1);
}

void sub_1B241E608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B241E6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B241E73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1B241E7DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void **std::unique_ptr<quasar::CommandTagging>::reset[abi:ne180100](void ***a1, void **a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::CommandTagging::~CommandTagging(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void std::vector<std::vector<quasar::CommandTagging>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    unsigned __int8 v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        unint64_t v6 = v4;
        std::vector<quasar::CommandTagging>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      unsigned __int8 v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::vector<std::vector<quasar::CommandTagging>>::__init_with_size[abi:ne180100]<std::vector<quasar::CommandTagging>*,std::vector<quasar::CommandTagging>*>(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::CommandTagging>>,std::vector<quasar::CommandTagging>*,std::vector<quasar::CommandTagging>*,std::vector<quasar::CommandTagging>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B241E970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<quasar::CommandTagging>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::CommandTagging>>,std::vector<quasar::CommandTagging>*,std::vector<quasar::CommandTagging>*,std::vector<quasar::CommandTagging>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  std::string v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      std::vector<quasar::CommandTagging>::__init_with_size[abi:ne180100]<quasar::CommandTagging*,quasar::CommandTagging*>(v4, *v6, v6[1], 0x8E38E38E38E38E39 * ((v6[1] - *v6) >> 3));
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::CommandTagging>>,std::vector<quasar::CommandTagging>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B241EA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::CommandTagging>>,std::vector<quasar::CommandTagging>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::CommandTagging>>,std::vector<quasar::CommandTagging>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::CommandTagging>>,std::vector<quasar::CommandTagging>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    uint64_t v3 = v1;
    std::vector<quasar::CommandTagging>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

void kaldi::PrintableRxfilename(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 23))
    {
      uint64_t v2 = (unsigned char *)a1;
      if (*(unsigned char *)(a1 + 23) != 1) {
        goto LABEL_10;
      }
      goto LABEL_8;
    }
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(a2, "standard input");
    return;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    goto LABEL_9;
  }
  if (v3 != 1) {
    goto LABEL_10;
  }
  uint64_t v2 = *(unsigned char **)a1;
LABEL_8:
  if (*v2 == 45) {
    goto LABEL_9;
  }
LABEL_10:
  kaldi::ParseOptions::Escape((unsigned __int8 *)a1, a2);
}

void kaldi::PrintableWxfilename(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 23))
    {
      uint64_t v2 = (unsigned char *)a1;
      if (*(unsigned char *)(a1 + 23) != 1) {
        goto LABEL_10;
      }
      goto LABEL_8;
    }
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(a2, "standard output");
    return;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    goto LABEL_9;
  }
  if (v3 != 1) {
    goto LABEL_10;
  }
  uint64_t v2 = *(unsigned char **)a1;
LABEL_8:
  if (*v2 == 45) {
    goto LABEL_9;
  }
LABEL_10:
  kaldi::ParseOptions::Escape((unsigned __int8 *)a1, a2);
}

uint64_t kaldi::ClassifyWxfilename(uint64_t a1)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v1 = (char *)a1;
  }
  else {
    uint64_t v1 = *(char **)a1;
  }
  int v2 = *v1;
  if (!*v1) {
    return 2;
  }
  if (v2 == 124) {
    return 3;
  }
  if (v2 == 45)
  {
    if (v1[1])
    {
      unsigned int v4 = 45;
      goto LABEL_12;
    }
    return 2;
  }
  unsigned int v4 = (char)v2;
  if ((char)v2 < 0)
  {
    if (!__maskrune((char)v2, 0x4000uLL)) {
      goto LABEL_15;
    }
LABEL_19:
    if (kaldi::g_kaldi_verbose_level < -1) {
      return 0;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Cannot have leading or trailing space in filename \"", 51);
    int v9 = *(char *)(a1 + 23);
    if (v9 >= 0) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = *(void *)a1;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v11 = *(void *)(a1 + 8);
    }
    goto LABEL_26;
  }
LABEL_12:
  if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v4 + 60) & 0x4000) != 0) {
    goto LABEL_19;
  }
LABEL_15:
  uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  unsigned int v7 = v1[v6 - 1];
  if ((v7 & 0x80000000) != 0)
  {
    if (__maskrune(v7, 0x4000uLL)) {
      goto LABEL_19;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v7 + 60) & 0x4000) != 0)
  {
    goto LABEL_19;
  }
  int v13 = *v1;
  if (v13 == 98 || v13 == 116)
  {
    if (v1[1] == 44)
    {
      if (kaldi::g_kaldi_verbose_level < -1) {
        return 0;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Found what looks like a wspecifier instead of a filename \"", 58);
      int v19 = *(char *)(a1 + 23);
      if (v19 >= 0) {
        uint64_t v10 = a1;
      }
      else {
        uint64_t v10 = *(void *)a1;
      }
      if (v19 >= 0) {
        uint64_t v11 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v11 = *(void *)(a1 + 8);
      }
LABEL_26:
      int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\".", 2);
LABEL_27:
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
      return 0;
    }
  }
  else if (v13 == 126)
  {
    if (kaldi::g_kaldi_verbose_level < -1) {
      return 0;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
    char v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Found ~ at the beginning of filename \"", 38);
    int v15 = *(char *)(a1 + 23);
    if (v15 >= 0) {
      uint64_t v16 = a1;
    }
    else {
      uint64_t v16 = *(void *)a1;
    }
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v17 = *(void *)(a1 + 8);
    }
    long long v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\". Shell like path expansions not supported.", 44);
    goto LABEL_27;
  }
  std::string v20 = v1 - 1;
  do
  {
    int v21 = v20[2];
    ++v20;
  }
  while (v21);
  unsigned int v22 = *v20;
  if (v22 == 124) {
    return 0;
  }
  if ((v22 & 0x80000000) != 0 ? __maskrune(v22, 0x4000uLL) : *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v22 + 60) & 0x4000) {
    return 0;
  }
  if ((*v20 & 0x80000000) == 0
    && (uint64_t v24 = *v20, (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v24 + 60) & 0x400) != 0))
  {
    do
    {
      if (v20 <= v1) {
        break;
      }
      if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v24 + 60) & 0x400) == 0) {
        break;
      }
      int v29 = *--v20;
      uint64_t v24 = v29;
    }
    while ((v29 & 0x80000000) == 0);
    return v24 != 58;
  }
  else
  {
    if (strchr(v1, 124))
    {
      if (kaldi::g_kaldi_verbose_level < -1) {
        return 0;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
      long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Trying to classify wxfilename with pipe symbol in the wrong place (pipe without | at the beginning?): ", 102);
      int v26 = *(char *)(a1 + 23);
      if (v26 >= 0) {
        uint64_t v27 = a1;
      }
      else {
        uint64_t v27 = *(void *)a1;
      }
      if (v26 >= 0) {
        uint64_t v28 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v28 = *(void *)(a1 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
      goto LABEL_27;
    }
    return 1;
  }
}

void sub_1B241EEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::ClassifyRxfilename(uint64_t a1)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v1 = (char *)a1;
  }
  else {
    uint64_t v1 = *(char **)a1;
  }
  int v2 = *v1;
  if (!*v1) {
    return 2;
  }
  if (v2 == 124) {
    return 0;
  }
  if (v2 == 45)
  {
    if (v1[1])
    {
      unsigned int v4 = 45;
      goto LABEL_11;
    }
    return 2;
  }
  unsigned int v4 = (char)v2;
  if (((char)v2 & 0x80000000) == 0)
  {
LABEL_11:
    if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v4 + 60) & 0x4000) != 0) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  if (__maskrune((char)v2, 0x4000uLL)) {
    goto LABEL_18;
  }
LABEL_14:
  uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  unsigned int v7 = v1[v6 - 1];
  if ((v7 & 0x80000000) != 0)
  {
    if (__maskrune(v7, 0x4000uLL))
    {
LABEL_18:
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
        uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Cannot have leading or trailing space in filename \"", 51);
        int v9 = *(char *)(a1 + 23);
        if (v9 >= 0) {
          uint64_t v10 = a1;
        }
        else {
          uint64_t v10 = *(void *)a1;
        }
        if (v9 >= 0) {
          uint64_t v11 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          uint64_t v11 = *(void *)(a1 + 8);
        }
LABEL_25:
        int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\".", 2);
LABEL_26:
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
      }
      return 0;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v7 + 60) & 0x4000) != 0)
  {
    goto LABEL_18;
  }
  int v13 = *v1;
  if (v13 == 98 || v13 == 116)
  {
    if (v1[1] == 44)
    {
      if (kaldi::g_kaldi_verbose_level < -1) {
        return 0;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Found what looks like an rspecifier instead of a filename \"", 59);
      int v19 = *(char *)(a1 + 23);
      if (v19 >= 0) {
        uint64_t v10 = a1;
      }
      else {
        uint64_t v10 = *(void *)a1;
      }
      if (v19 >= 0) {
        uint64_t v11 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v11 = *(void *)(a1 + 8);
      }
      goto LABEL_25;
    }
  }
  else if (v13 == 126)
  {
    if (kaldi::g_kaldi_verbose_level < -1) {
      return 0;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
    char v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Found ~ at the beginning of filename \"", 38);
    int v15 = *(char *)(a1 + 23);
    if (v15 >= 0) {
      uint64_t v16 = a1;
    }
    else {
      uint64_t v16 = *(void *)a1;
    }
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v17 = *(void *)(a1 + 8);
    }
    long long v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\". Shell like path expansions not supported.", 44);
    goto LABEL_26;
  }
  std::string v20 = v1 - 1;
  do
  {
    int v21 = v20[2];
    ++v20;
  }
  while (v21);
  unsigned int v22 = *v20;
  if (v22 == 124) {
    return 4;
  }
  if ((v22 & 0x80000000) != 0) {
    int v23 = __maskrune(v22, 0x4000uLL);
  }
  else {
    int v23 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v22 + 60) & 0x4000;
  }
  if (v23) {
    return 0;
  }
  if ((*v20 & 0x80000000) == 0
    && (uint64_t v24 = *v20, (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v24 + 60) & 0x400) != 0))
  {
    do
    {
      if (v20 <= v1) {
        break;
      }
      if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v24 + 60) & 0x400) == 0) {
        break;
      }
      int v29 = *--v20;
      uint64_t v24 = v29;
    }
    while ((v29 & 0x80000000) == 0);
    if (v24 == 58) {
      return 3;
    }
    else {
      return 1;
    }
  }
  else
  {
    if (strchr(v1, 124))
    {
      if (kaldi::g_kaldi_verbose_level < -1) {
        return 0;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
      long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Trying to classify rxfilename with pipe symbol in the wrong place (pipe without | at the end?): ", 96);
      int v26 = *(char *)(a1 + 23);
      if (v26 >= 0) {
        uint64_t v27 = a1;
      }
      else {
        uint64_t v27 = *(void *)a1;
      }
      if (v26 >= 0) {
        uint64_t v28 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v28 = *(void *)(a1 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
      goto LABEL_26;
    }
    return 1;
  }
}

void sub_1B241F238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::FileOutputImpl::~FileOutputImpl(kaldi::FileOutputImpl *this)
{
  *(void *)this = &unk_1F0A47678;
  int v2 = (void *)((char *)this + 32);
  if (*((void *)this + 20))
  {
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 32) | 4);
    }
    if ((*((unsigned char *)v2 + *(void *)(*v2 - 24) + 32) & 5) != 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      unsigned __int8 v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Error closing output file ", 26);
      uint64_t v8 = *((void *)this + 1);
      unsigned int v7 = (char *)this + 8;
      uint64_t v6 = v8;
      int v9 = v7[23];
      if (v9 >= 0) {
        uint64_t v10 = (uint64_t)v7;
      }
      else {
        uint64_t v10 = v6;
      }
      if (v9 >= 0) {
        uint64_t v11 = v7[23];
      }
      else {
        uint64_t v11 = *((void *)v7 + 1);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v10, v11);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
    }
  }
  uint64_t v3 = MEMORY[0x1E4FBA400];
  uint64_t v4 = *MEMORY[0x1E4FBA400];
  *((void *)this + 4) = *MEMORY[0x1E4FBA400];
  *(void *)((char *)v2 + *(void *)(v4 - 24)) = *(void *)(v3 + 24);
  MEMORY[0x1B3EA7CF0]((char *)this + 40);
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520]((char *)this + 448);
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  kaldi::FileOutputImpl::~FileOutputImpl(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::StandardOutputImpl::~StandardOutputImpl(kaldi::StandardOutputImpl *this)
{
  *(void *)this = &unk_1F0A47CC8;
  if (*((unsigned char *)this + 8))
  {
    fst::cout(this);
    uint64_t v1 = (fst *)std::ostream::flush();
    int v2 = (void *)fst::cout(v1);
    if ((*((unsigned char *)v2 + *(void *)(*v2 - 24) + 32) & 5) != 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Error writing to standard output", 32);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
    }
  }
}

{
  uint64_t vars8;

  kaldi::StandardOutputImpl::~StandardOutputImpl(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::PipeOutputImpl::~PipeOutputImpl(kaldi::PipeOutputImpl *this)
{
  *(void *)this = &unk_1F0A477F0;
  if (*((void *)this + 6) && !kaldi::PipeOutputImpl::Close(this))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    int v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Error writing to pipe ", 22);
    if (*((char *)this + 31) < 0) {
      std::string::__init_copy_ctor_external(&v5, *((const std::string::value_type **)this + 1), *((void *)this + 2));
    }
    else {
      std::string v5 = *(std::string *)((char *)this + 8);
    }
    kaldi::PrintableWxfilename((uint64_t)&v5, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v5.__r_.__value_.__l.__data_);
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  kaldi::PipeOutputImpl::~PipeOutputImpl(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::FileInputImpl::~FileInputImpl(kaldi::FileInputImpl *this)
{
  *(void *)this = &unk_1F0A47318;
  uint64_t v2 = MEMORY[0x1E4FBA3F8];
  uint64_t v3 = *MEMORY[0x1E4FBA3F8];
  *((void *)this + 1) = *MEMORY[0x1E4FBA3F8];
  *(void *)((char *)this + *(void *)(v3 - 24) + 8) = *(void *)(v2 + 24);
  MEMORY[0x1B3EA7CF0]((char *)this + 24);
  std::istream::~istream();
  MEMORY[0x1B3EA8520]((char *)this + 432);
}

{
  uint64_t vars8;

  kaldi::FileInputImpl::~FileInputImpl(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::StandardInputImpl::~StandardInputImpl(kaldi::StandardInputImpl *this)
{
}

void kaldi::PipeInputImpl::~PipeInputImpl(void **this)
{
  *this = &unk_1F0A474F8;
  if (this[6]) {
    kaldi::PipeInputImpl::Close((kaldi::PipeInputImpl *)this);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  kaldi::PipeInputImpl::~PipeInputImpl(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::OffsetFileInputImpl::~OffsetFileInputImpl(kaldi::OffsetFileInputImpl *this)
{
  *(void *)this = &unk_1F0A47D00;
  uint64_t v2 = MEMORY[0x1E4FBA3F8];
  uint64_t v3 = *MEMORY[0x1E4FBA3F8];
  *((void *)this + 5) = *MEMORY[0x1E4FBA3F8];
  *(void *)((char *)this + *(void *)(v3 - 24) + 40) = *(void *)(v2 + 24);
  MEMORY[0x1B3EA7CF0]((char *)this + 56);
  std::istream::~istream();
  MEMORY[0x1B3EA8520]((char *)this + 464);
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  kaldi::OffsetFileInputImpl::~OffsetFileInputImpl(this);
  JUMPOUT(0x1B3EA8670);
}

kaldi::Output *kaldi::Output::Output(kaldi::Output *a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  if ((kaldi::Output::Open(a1, (std::string *)a2) & 1) == 0)
  {
    if (*(void *)a1)
    {
      (*(void (**)(void))(**(void **)a1 + 32))(*(void *)a1);
      *(void *)a1 = 0;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::string v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Error opening output stream ", 28);
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v8 = *(std::string *)a2;
    }
    kaldi::PrintableWxfilename((uint64_t)&v8, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return a1;
}

void sub_1B241FB3C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::Output::Open(kaldi::Output *this, std::string *__str)
{
  if (*(void *)this && (kaldi::Output::Close(this) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Output::Open(), failed to close output stream: ", 47);
    if (*((char *)this + 31) < 0) {
      std::string::__init_copy_ctor_external(&v11, *((const std::string::value_type **)this + 1), *((void *)this + 2));
    }
    else {
      std::string v11 = *(std::string *)((char *)this + 8);
    }
    kaldi::PrintableWxfilename((uint64_t)&v11, &__p);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, (uint64_t)&__p);
    std::string::~string(&__p);
    std::string::~string(&v11);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  std::string::operator=((std::string *)((char *)this + 8), __str);
  int v4 = kaldi::ClassifyWxfilename((uint64_t)__str);
  switch(v4)
  {
    case 3:
      operator new();
    case 2:
      operator new();
    case 1:
      operator new();
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::string v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Invalid output filename format ", 31);
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v10, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    }
    else {
      std::string v10 = *__str;
    }
    kaldi::PrintableWxfilename((uint64_t)&v10, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
  }
  return 0;
}

uint64_t kaldi::Output::Close(kaldi::Output *this)
{
  uint64_t v2 = *(void *)this;
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  if (*(void *)this) {
    (*(void (**)(void))(**(void **)this + 32))(*(void *)this);
  }
  *(void *)this = 0;
  return v3;
}

void kaldi::Output::~Output(const std::string::value_type **this)
{
  uint64_t v2 = *this;
  if (v2)
  {
    char v3 = (*(uint64_t (**)(const std::string::value_type *))(*(void *)v2 + 16))(v2);
    if (*this) {
      (*(void (**)(const std::string::value_type *))(*(void *)*this + 32))(*this);
    }
    *this = 0;
    if ((v3 & 1) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
      int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Error closing output file ", 26);
      if (*((char *)this + 31) < 0) {
        std::string::__init_copy_ctor_external(&v7, this[1], (std::string::size_type)this[2]);
      }
      else {
        std::string v7 = *(std::string *)(this + 1);
      }
      kaldi::PrintableWxfilename((uint64_t)&v7, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v7.__r_.__value_.__l.__data_);
      }
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
    }
  }
  if (*((char *)this + 31) < 0) {
    operator delete((void *)this[1]);
  }
}

uint64_t kaldi::Output::Stream(kaldi::Output *this)
{
  uint64_t v1 = *(void *)this;
  if (!v1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Output::Stream() called but not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 8);
  return v2();
}

void *kaldi::Input::Input(void *a1, uint64_t a2, unsigned char *a3)
{
  *a1 = 0;
  if ((kaldi::Input::OpenInternal(a1, a2, 1, a3) & 1) == 0)
  {
    uint64_t v6 = a2;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::string v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Error opening input stream ", 27);
    if (*(char *)(v6 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
    }
    else {
      std::string __p = *(std::string *)v6;
    }
    kaldi::PrintableRxfilename((uint64_t)&__p, &v9);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, (uint64_t)&v9);
    std::string::~string(&v9);
    std::string::~string(&__p);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return a1;
}

uint64_t kaldi::Input::Close(kaldi::Input *this)
{
  uint64_t result = *(void *)this;
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    *(void *)this = 0;
  }
  return result;
}

uint64_t kaldi::Input::OpenInternal(void *a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  int v8 = kaldi::ClassifyRxfilename(a2);
  uint64_t v9 = *a1;
  if (!*a1) {
    goto LABEL_9;
  }
  if (v8 != 3)
  {
LABEL_8:
    (*(void (**)(uint64_t))(*(void *)v9 + 40))(v9);
    *a1 = 0;
LABEL_9:
    switch(v8)
    {
      case 1:
        operator new();
      case 2:
        operator new();
      case 3:
        goto LABEL_11;
      case 4:
        operator new();
      default:
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
          int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Invalid input filename format ", 30);
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v16 = *(std::string *)a2;
          }
          kaldi::PrintableRxfilename((uint64_t)&v16, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v16.__r_.__value_.__l.__data_);
          }
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
        }
        return 0;
    }
  }
  int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
  uint64_t v9 = *a1;
  if (v10 != 3)
  {
    if (!v9) {
LABEL_11:
    }
      operator new();
    goto LABEL_8;
  }
  if ((**(uint64_t (***)(uint64_t, uint64_t, uint64_t))v9)(v9, a2, a3))
  {
    if (a4)
    {
      uint64_t v13 = (*(uint64_t (**)(void))(*(void *)*a1 + 8))();
      return kaldi::InitKaldiInputStream(v13, a4);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if (*a1) {
      (*(void (**)(void))(*(void *)*a1 + 40))(*a1);
    }
    uint64_t result = 0;
    *a1 = 0;
  }
  return result;
}

void sub_1B24209FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
}

void kaldi::Input::~Input(kaldi::Input *this)
{
  uint64_t v2 = *(void *)this;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    *(void *)this = 0;
  }
}

uint64_t kaldi::Input::Stream(kaldi::Input *this)
{
  uint64_t v1 = *(void *)this;
  if (!v1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Input::Stream(), not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 8);
  return v2();
}

BOOL kaldi::FileOutputImpl::Open(uint64_t a1, const std::string *a2)
{
  if (*(void *)(a1 + 160))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"FileOutputImpl::Open(), ", 24);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "open called on already open file.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  std::string::operator=((std::string *)(a1 + 8), a2);
  std::ofstream::open();
  return *(void *)(a1 + 160) != 0;
}

uint64_t kaldi::FileOutputImpl::Stream(kaldi::FileOutputImpl *this)
{
  if (!*((void *)this + 20))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "FileOutputImpl::Stream(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return (uint64_t)this + 32;
}

BOOL kaldi::FileOutputImpl::Close(kaldi::FileOutputImpl *this)
{
  if (!*((void *)this + 20))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "FileOutputImpl::Close(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  uint64_t v1 = (void *)((char *)this + 32);
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v1 + *(void *)(*v1 - 24)), *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) | 4);
  }
  return (*((unsigned char *)v1 + *(void *)(*v1 - 24) + 32) & 5) == 0;
}

BOOL kaldi::StandardOutputImpl::Open(fst *a1)
{
  if (*((unsigned char *)a1 + 8))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "StandardOutputImpl::Open(), open called on already open file.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  uint64_t v2 = (void *)fst::cout(a1);
  BOOL result = *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 32) == 0;
  *((unsigned char *)a1 + 8) = result;
  return result;
}

uint64_t kaldi::StandardOutputImpl::Stream(kaldi::StandardOutputImpl *this)
{
  if (!*((unsigned char *)this + 8))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "StandardOutputImpl::Stream(), object not initialized.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return fst::cout(this);
}

BOOL kaldi::StandardOutputImpl::Close(kaldi::StandardOutputImpl *this)
{
  if (!*((unsigned char *)this + 8))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "StandardOutputImpl::Close(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  *((unsigned char *)this + 8) = 0;
  fst::cout(this);
  uint64_t v1 = (fst *)std::ostream::flush();
  uint64_t v2 = (void *)fst::cout(v1);
  return (*((unsigned char *)v2 + *(void *)(*v2 - 24) + 32) & 5) == 0;
}

uint64_t kaldi::PipeOutputImpl::Open(uint64_t a1, std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 8), a2);
  std::string::basic_string[abi:ne180100](__dst, (uint64_t *)a2, 1uLL);
  if ((v17 & 0x80u) == 0) {
    int v4 = (const char *)__dst;
  }
  else {
    int v4 = (const char *)__dst[0];
  }
  std::string v5 = popen(v4, "w");
  *(void *)(a1 + 32) = v5;
  if (v5) {
    operator new();
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Failed opening pipe for writing, command is: ", 45);
    if ((v17 & 0x80u) == 0) {
      std::string v7 = __dst;
    }
    else {
      std::string v7 = (void **)__dst[0];
    }
    if ((v17 & 0x80u) == 0) {
      uint64_t v8 = v17;
    }
    else {
      uint64_t v8 = (uint64_t)__dst[1];
    }
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
    int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", errno is ", 11);
    std::string v11 = __error();
    int v12 = strerror(*v11);
    size_t v13 = strlen(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
  }
  if ((char)v17 < 0) {
    operator delete(__dst[0]);
  }
  return 0;
}

void sub_1B2421118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*(char *)(v10 - 33) < 0) {
    operator delete(*(void **)(v10 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::PipeOutputImpl::Stream(kaldi::PipeOutputImpl *this)
{
  uint64_t result = *((void *)this + 6);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "PipeOutputImpl::Stream(), object not initialized.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

BOOL kaldi::PipeOutputImpl::Close(kaldi::PipeOutputImpl *this)
{
  if (!*((void *)this + 6))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "PipeOutputImpl::Close(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  std::ostream::flush();
  uint64_t v2 = *((void *)this + 6);
  int v3 = *(_DWORD *)(v2 + *(void *)(*(void *)v2 - 24) + 32);
  (*(void (**)(void))(*(void *)v2 + 8))();
  *((void *)this + 6) = 0;
  if (pclose(*((FILE **)this + 4))) {
    BOOL v4 = kaldi::g_kaldi_verbose_level < -1;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::string v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Pipe ", 5);
    int v6 = *((char *)this + 31);
    if (v6 >= 0) {
      std::string v7 = (char *)this + 8;
    }
    else {
      std::string v7 = (char *)*((void *)this + 1);
    }
    if (v6 >= 0) {
      uint64_t v8 = *((unsigned __int8 *)this + 31);
    }
    else {
      uint64_t v8 = *((void *)this + 2);
    }
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" had nonzero return status ", 27);
    std::ostream::operator<<();
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
  }
  *((void *)this + 4) = 0;
  uint64_t v10 = *((void *)this + 5);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  BOOL result = (v3 & 5) == 0;
  *((void *)this + 5) = 0;
  return result;
}

void sub_1B2421348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL kaldi::FileInputImpl::Open(uint64_t a1)
{
  if (*(void *)(a1 + 144))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"FileInputImpl::Open(), ", 23);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "open called on already open file.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  std::ifstream::open();
  return *(void *)(a1 + 144) != 0;
}

uint64_t kaldi::FileInputImpl::Stream(kaldi::FileInputImpl *this)
{
  if (!*((void *)this + 18))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "FileInputImpl::Stream(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return (uint64_t)this + 8;
}

void kaldi::FileInputImpl::Close(kaldi::FileInputImpl *this)
{
  if (!*((void *)this + 18))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "FileInputImpl::Close(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  if (!std::filebuf::close())
  {
    uint64_t v2 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 1) - 24) + 8);
    std::ios_base::iostate v3 = v2->__rdstate_ | 4;
    std::ios_base::clear(v2, v3);
  }
}

uint64_t kaldi::FileInputImpl::MyType(kaldi::FileInputImpl *this)
{
  return 1;
}

uint64_t kaldi::StandardInputImpl::Open(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "StandardInputImpl::Open(), open called on already open file.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  *(unsigned char *)(a1 + 8) = 1;
  return 1;
}

uint64_t kaldi::StandardInputImpl::Stream(kaldi::StandardInputImpl *this)
{
  if (!*((unsigned char *)this + 8))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "StandardInputImpl::Stream(), object not initialized.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return fst::cin(this);
}

uint64_t kaldi::StandardInputImpl::Close(uint64_t this)
{
  if (!*(unsigned char *)(this + 8))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "StandardInputImpl::Close(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
  }
  *(unsigned char *)(this + 8) = 0;
  return this;
}

uint64_t kaldi::StandardInputImpl::MyType(kaldi::StandardInputImpl *this)
{
  return 2;
}

uint64_t kaldi::PipeInputImpl::Open(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)a2);
  if (*(char *)(a2 + 23) < 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  }
  std::string::basic_string(&v17, (const std::string *)a2, 0, v4 - 1, (std::allocator<char> *)v16);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v5 = &v17;
  }
  else {
    std::string v5 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  int v6 = popen((const char *)v5, "r");
  *(void *)(a1 + 32) = v6;
  if (v6) {
    operator new();
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::string v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Failed opening pipe for reading, command is: ", 45);
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &v17;
    }
    else {
      uint64_t v8 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v17.__r_.__value_.__l.__size_;
    }
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, size);
    std::string v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", errno is ", 11);
    int v12 = __error();
    size_t v13 = strerror(*v12);
    size_t v14 = strlen(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1B242195C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a22);
  if (*(char *)(v22 - 49) < 0) {
    operator delete(*(void **)(v22 - 72));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::PipeInputImpl::Stream(kaldi::PipeInputImpl *this)
{
  uint64_t result = *((void *)this + 6);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "PipeInputImpl::Stream(), object not initialized.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::PipeInputImpl::Close(kaldi::PipeInputImpl *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (!v2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "PipeInputImpl::Close(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *((void *)this + 6) = 0;
  if (pclose(*((FILE **)this + 4))) {
    BOOL v3 = kaldi::g_kaldi_verbose_level < -1;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Pipe ", 5);
    int v5 = *((char *)this + 31);
    if (v5 >= 0) {
      int v6 = (char *)this + 8;
    }
    else {
      int v6 = (char *)*((void *)this + 1);
    }
    if (v5 >= 0) {
      uint64_t v7 = *((unsigned __int8 *)this + 31);
    }
    else {
      uint64_t v7 = *((void *)this + 2);
    }
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" had nonzero return status ", 27);
    std::ostream::operator<<();
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
  }
  *((void *)this + 4) = 0;
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

void sub_1B2421BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::PipeInputImpl::MyType(kaldi::PipeInputImpl *this)
{
  return 4;
}

BOOL kaldi::OffsetFileInputImpl::Open(uint64_t a1, uint64_t a2, int a3)
{
  int v5 = (void *)(a1 + 40);
  if (!*(void *)(a1 + 176))
  {
    __s1.__r_.__value_.__r.__words[0] = 0;
    kaldi::OffsetFileInputImpl::SplitFilename(a2, a1 + 8, (uint64_t *)&__s1);
    *(unsigned char *)(a1 + 32) = a3;
    std::ifstream::open();
    return *(void *)(a1 + 176)
        && kaldi::OffsetFileInputImpl::Seek((kaldi::OffsetFileInputImpl *)a1, __s1.__r_.__value_.__r.__words[0]);
  }
  memset(&__s1, 0, sizeof(__s1));
  unint64_t v14 = 0;
  kaldi::OffsetFileInputImpl::SplitFilename(a2, (uint64_t)&__s1, (uint64_t *)&v14);
  uint64_t v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = *(unsigned __int8 *)(a1 + 31);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 16);
  }
  if (size == v8)
  {
    if (v9 >= 0) {
      uint64_t v10 = (unsigned __int8 *)(a1 + 8);
    }
    else {
      uint64_t v10 = *(unsigned __int8 **)(a1 + 8);
    }
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(__s1.__r_.__value_.__l.__data_, v10, __s1.__r_.__value_.__l.__size_)) {
        goto LABEL_23;
      }
    }
    else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      while (p_s1->__r_.__value_.__s.__data_[0] == *v10)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v10;
        if (!--v6) {
          goto LABEL_21;
        }
      }
      goto LABEL_23;
    }
LABEL_21:
    if (*(unsigned __int8 *)(a1 + 32) == a3)
    {
      std::ios_base::clear((std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)), 0);
LABEL_26:
      BOOL v12 = kaldi::OffsetFileInputImpl::Seek((kaldi::OffsetFileInputImpl *)a1, v14);
      goto LABEL_28;
    }
  }
LABEL_23:
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)), *(_DWORD *)((char *)v5 + *(void *)(*v5 - 24) + 32) | 4);
  }
  std::string::operator=((std::string *)(a1 + 8), &__s1);
  std::ifstream::open();
  if (*(void *)(a1 + 176)) {
    goto LABEL_26;
  }
  BOOL v12 = 0;
LABEL_28:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  return v12;
}

void sub_1B2421DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::OffsetFileInputImpl::Stream(kaldi::OffsetFileInputImpl *this)
{
  if (!*((void *)this + 22))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "FileInputImpl::Stream(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return (uint64_t)this + 40;
}

void kaldi::OffsetFileInputImpl::Close(kaldi::OffsetFileInputImpl *this)
{
  if (!*((void *)this + 22))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "FileInputImpl::Close(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  if (!std::filebuf::close())
  {
    uint64_t v2 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 5) - 24) + 40);
    std::ios_base::iostate v3 = v2->__rdstate_ | 4;
    std::ios_base::clear(v2, v3);
  }
}

uint64_t kaldi::OffsetFileInputImpl::MyType(kaldi::OffsetFileInputImpl *this)
{
  return 3;
}

kaldi::OffsetFileInputImpl *kaldi::OffsetFileInputImpl::OffsetFileInputImpl(kaldi::OffsetFileInputImpl *this)
{
  *(void *)this = &unk_1F0A47D00;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  uint64_t v2 = (uint64_t *)((char *)this + 40);
  std::ios_base::iostate v3 = (uint64_t *)((char *)this + 464);
  uint64_t v4 = MEMORY[0x1E4FBA460] + 64;
  *((void *)this + 58) = MEMORY[0x1E4FBA460] + 64;
  int v5 = (char *)this + 56;
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *((void *)this + 5) = v7;
  *(uint64_t *)((char *)v2 + *(void *)(v7 - 24)) = v6;
  *((void *)this + 6) = 0;
  uint64_t v8 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 5) - 24) + 40);
  std::ios_base::init(v8, (char *)this + 56);
  uint64_t v9 = MEMORY[0x1E4FBA460] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t *v2 = v9;
  uint64_t *v3 = v4;
  MEMORY[0x1B3EA7CE0](v5);
  return this;
}

void sub_1B242208C(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v2);
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(a1);
}

void kaldi::basic_pipebuf<char>::~basic_pipebuf()
{
  std::streambuf::~streambuf();
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::basic_pipebuf<char>::sync(uint64_t a1)
{
  if (fflush(*(FILE **)(a1 + 64))) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t kaldi::basic_pipebuf<char>::underflow(uint64_t a1)
{
  return kaldi::basic_pipebuf<char>::__getchar(a1, 0);
}

uint64_t kaldi::basic_pipebuf<char>::uflow(uint64_t a1)
{
  return kaldi::basic_pipebuf<char>::__getchar(a1, 1);
}

uint64_t kaldi::basic_pipebuf<char>::pbackfail(uint64_t a1, uint64_t a2)
{
  *(void *)&v9[7] = *MEMORY[0x1E4F143B8];
  if (a2 != -1)
  {
    uint64_t v3 = a2;
    if (*(unsigned char *)(a1 + 76))
    {
      char v8 = *(_DWORD *)(a1 + 72);
      uint64_t v4 = v9;
      while (v4 > &v8)
      {
        int v5 = *--v4;
        if (ungetc(v5, *(FILE **)(a1 + 64)) == -1) {
          return 0xFFFFFFFFLL;
        }
      }
    }
    *(_DWORD *)(a1 + 72) = v3;
    BOOL v6 = 1;
    goto LABEL_11;
  }
  if (!*(unsigned char *)(a1 + 76))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 72);
    BOOL v6 = v3 != -1;
LABEL_11:
    *(unsigned char *)(a1 + 76) = v6;
    return v3;
  }
  return 0xFFFFFFFFLL;
}

uint64_t kaldi::basic_pipebuf<char>::overflow(uint64_t a1, uint64_t a2)
{
  if (a2 == -1) {
    return 0;
  }
  uint64_t v2 = a2;
  *(void *)(a1 + 40) = &__ptr;
  uint64_t v3 = (void *)(a1 + 40);
  char __ptr = a2;
  *(void *)(a1 + 48) = &v6;
  *(void *)(a1 + 56) = &v6;
  if (fwrite(&__ptr, 1uLL, 1uLL, *(FILE **)(a1 + 64)) != 1) {
    return 0xFFFFFFFFLL;
  }
  void *v3 = 0;
  v3[1] = 0;
  std::locale v3[2] = 0;
  return v2;
}

uint64_t kaldi::basic_pipebuf<char>::__getchar(uint64_t a1, int a2)
{
  char v2 = a2;
  if (!*(unsigned char *)(a1 + 76))
  {
    int v5 = getc(*(FILE **)(a1 + 64));
    if (v5 != -1)
    {
      uint64_t v4 = v5;
      if (v2)
      {
        *(_DWORD *)(a1 + 72) = v5;
        return v4;
      }
      if (ungetc(v5, *(FILE **)(a1 + 64)) != -1) {
        return v4;
      }
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *(unsigned int *)(a1 + 72);
  if (a2)
  {
    *(_DWORD *)(a1 + 72) = -1;
    *(unsigned char *)(a1 + 76) = 0;
  }
  return v4;
}

void kaldi::OffsetFileInputImpl::SplitFilename(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::string::size_type v6 = std::string::rfind((const std::string *)a1, 58, 0xFFFFFFFFFFFFFFFFLL);
  std::string::basic_string(&v14, (const std::string *)a1, 0, v6, (std::allocator<char> *)__dst);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(std::string *)a2 = v14;
  uint64_t v7 = std::string::basic_string[abi:ne180100](__dst, (uint64_t *)a1, v6 + 1);
  if ((kaldi::ConvertStringToInteger<unsigned long>((uint64_t)v7, a3) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
    char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Cannot get offset from filename ", 32);
    int v9 = *(char *)(a1 + 23);
    if (v9 >= 0) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = *(void *)a1;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v11 = *(void *)(a1 + 8);
    }
    BOOL v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
    size_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" (possibly you compiled in 32-bit and have a >32-bit", 52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" byte offset into a file; you'll have to compile 64-bit.",
      56);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v14);
  }
  if (v16 < 0) {
    operator delete(__dst[0]);
  }
}

void sub_1B2422434(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 49) < 0) {
    operator delete(*(void **)(v1 - 72));
  }
  _Unwind_Resume(exception_object);
}

BOOL kaldi::OffsetFileInputImpl::Seek(kaldi::OffsetFileInputImpl *this, unint64_t a2)
{
  uint64_t v3 = (void *)((char *)this + 40);
  std::istream::tellg();
  unint64_t v4 = v8;
  if (v8 == a2) {
    return 1;
  }
  if (v8 < a2 && v8 + 100 > a2)
  {
    do
    {
      std::istream::get();
      ++v4;
    }
    while (a2 != v4);
    std::istream::tellg();
    return v8 == a2;
  }
  else
  {
    std::istream::seekg();
    uint64_t v7 = (std::ios_base *)((char *)v3 + *(void *)(*v3 - 24));
    if ((v7->__rdstate_ & 5) == 0)
    {
      std::ios_base::clear(v7, 0);
      return 1;
    }
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + 32) | 4);
    }
    return 0;
  }
}

uint64_t kaldi::ConvertStringToInteger<unsigned long>(uint64_t a1, uint64_t *a2)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v3 = (const char *)a1;
  }
  else {
    uint64_t v3 = *(const char **)a1;
  }
  __endptr = 0;
  *__error() = 0;
  uint64_t v4 = strtoll(v3, &__endptr, 10);
  if (__endptr == v3) {
    return 0;
  }
  uint64_t v5 = v4;
  std::string::size_type v6 = __endptr - 1;
  uint64_t v7 = MEMORY[0x1E4F14390];
  do
  {
    unsigned int v8 = v6[1];
    if ((v8 & 0x80000000) != 0) {
      int v9 = __maskrune(v8, 0x4000uLL);
    }
    else {
      int v9 = *(_DWORD *)(v7 + 4 * v8 + 60) & 0x4000;
    }
    ++v6;
  }
  while (v9);
  if (v6 == v3 || *v6) {
    return 0;
  }
  uint64_t v11 = __error();
  uint64_t result = 0;
  if (!*v11 && (v5 & 0x8000000000000000) == 0)
  {
    *a2 = v5;
    return 1;
  }
  return result;
}

void sub_1B2422784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B2422A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1B2422BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B2422F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1B2423424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1B242382C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t quasar::SystemCombinationDecoder::SystemCombinationDecoder(uint64_t a1, long long *a2)
{
  uint64_t v3 = quasar::Decoder::Decoder(a1, a2);
  *(void *)(v3 + 448) = 0;
  *(void *)(v3 + 456) = 0;
  *(void *)uint64_t v3 = &unk_1F0A56D28;
  *(void *)(v3 + 464) = 0;
  *(void *)(v3 + 472) = 0;
  *(void *)(v3 + 480) = 0;
  *(void *)(v3 + 488) = 850045863;
  *(void *)(v3 + 560) = 0;
  *(void *)(v3 + 576) = 0;
  *(void *)(v3 + 568) = 0;
  *(void *)(v3 + 600) = 0;
  *(void *)(v3 + 592) = 0;
  *(_OWORD *)(v3 + 496) = 0u;
  *(_OWORD *)(v3 + 512) = 0u;
  *(_OWORD *)(v3 + 528) = 0u;
  *(_OWORD *)(v3 + 537) = 0u;
  *(void *)(v3 + 584) = v3 + 592;
  *(void *)(v3 + 616) = 0;
  *(void *)(v3 + 624) = 0;
  *(void *)(v3 + 608) = v3 + 616;
  *(_DWORD *)(v3 + 640) = 1056964608;
  *(void *)(a1 + 632) = 0x100000001;
  std::string::basic_string[abi:ne180100]<0>((void *)(v3 + 648), "");
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 697) = 0u;
  *(unsigned char *)(a1 + 713) = 1;
  *(unsigned char *)(a1 + 57) = 0;
  return a1;
}

void sub_1B2423A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v16 = v15;
  std::string v17 = v12;
  std::__tree<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>>>::destroy(v16, *(void **)(v10 + 616));
  std::__tree<std::string>::destroy(v13, *(char **)(v10 + 592));
  a10 = v17;
  std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::mutex::~mutex(v11);
  if (*(char *)(v10 + 487) < 0) {
    operator delete(*v14);
  }
  int v19 = *(std::__shared_weak_count **)(v10 + 456);
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)v10);
  _Unwind_Resume(a1);
}

void quasar::SystemCombinationDecoder::~SystemCombinationDecoder(quasar::SystemCombinationDecoder *this)
{
  *(void *)this = &unk_1F0A56D28;
  uint64_t v2 = *((void *)this + 88);
  *((void *)this + 88) = 0;
  if (v2) {
    std::default_delete<kaldi::quasar::SystemSelectionFeatureExtractor>::operator()[abi:ne180100]((uint64_t)this + 704, v2);
  }
  uint64_t v3 = *((void *)this + 87);
  *((void *)this + 87) = 0;
  if (v3) {
    std::default_delete<kaldi::quasar::LogisticRegressionModel>::operator()[abi:ne180100]((uint64_t)this + 696, v3);
  }
  uint64_t v5 = (void **)((char *)this + 672);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*((char *)this + 671) < 0) {
    operator delete(*((void **)this + 81));
  }
  std::__tree<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>>>::destroy((uint64_t)this + 608, *((void **)this + 77));
  std::__tree<std::string>::destroy((uint64_t)this + 584, *((char **)this + 74));
  uint64_t v5 = (void **)((char *)this + 560);
  std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::mutex::~mutex((std::mutex *)((char *)this + 488));
  if (*((char *)this + 487) < 0) {
    operator delete(*((void **)this + 58));
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  quasar::Decoder::~Decoder(this);
}

{
  uint64_t vars8;

  quasar::SystemCombinationDecoder::~SystemCombinationDecoder(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::SystemCombinationDecoder::combinesSystems(quasar::SystemCombinationDecoder *this)
{
  return 1;
}

void quasar::SystemCombinationDecoder::registerParams(quasar::SystemCombinationDecoder *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "system-combination");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 195, 0, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "selected-chain");
  std::string::basic_string[abi:ne180100]<0>(v4, "Decoder chain to select for output.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 464, (uint64_t)v4, 0, 195, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "selection-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Filename for selection model. Each line must have the format: intercept <value> OR, <FEATURE> <WEIGHT> [ <FEATURE-MEAN> [ <FEATURE-STD> ] ](feature mean and std values are both optional, could be provided for feature normalization)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 648, (uint64_t)v4, 0, 195, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "num-hyps-primary");
  std::string::basic_string[abi:ne180100]<0>(v4, "Number of primary chain hypotheses to consider for selection.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 632, (uint64_t)v4, 0, 195, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "num-hyps-secondary");
  std::string::basic_string[abi:ne180100]<0>(v4, "Number of secondary chain hypotheses to consider for selection.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 636, (uint64_t)v4, 0, 195, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "selection-threshold");
  std::string::basic_string[abi:ne180100]<0>(v4, "Threshold value for system selection");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 640, (uint64_t)v4, 0, 195, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "uncombinable-word-tags");
  std::string::basic_string[abi:ne180100]<0>(v4, "Force primary selection if recognition has any of these suffixes");
  quasar::SystemConfig::Register<std::vector<std::string>>((uint64_t)a2, (const void **)__p, (uint64_t)this + 672, (uint64_t)v4, 0, 237, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "disable-pron-transfer");
  std::string::basic_string[abi:ne180100]<0>(v4, "Do not copy word pronunciations from the primary chain");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 712, (uint64_t)v4, 0, 237, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "disable-after-first-utterance");
  std::string::basic_string[abi:ne180100]<0>(v4, "Do not run system combination for second-and-later utterances");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 713, (uint64_t)v4, 0, 237, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B2423FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SystemCombinationDecoder::finishInit(quasar::SystemCombinationDecoder *this)
{
  if (*((char *)this + 671) < 0)
  {
    if (*((void *)this + 82)) {
LABEL_3:
    }
      operator new();
  }
  else if (*((unsigned char *)this + 671))
  {
    goto LABEL_3;
  }
  if (quasar::gLogLevel >= 4)
  {
    memset(v1, 0, sizeof(v1));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"No selection model supplied. The output of the primary chain will be selected.", 78);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v1);
  }
  operator new();
}

void sub_1B242422C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::SystemCombinationDecoder::supportsEager(quasar::SystemCombinationDecoder *this)
{
  return 1;
}

uint64_t quasar::SystemCombinationDecoder::runAsyncTasks(uint64_t a1, uint64_t a2, uint64_t a3, quasar::SpeechRequestData **a4, uint64_t a5, uint64_t *a6, void *a7, uint64_t *a8)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 400) != 1)
  {
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v58 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
    uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Must call init() for ", 21);
    kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)a1, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    unint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)p_p, size);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v44, " before calling runAsyncTasks().");
    std::string::~string(&__p);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v58);
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v58 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Running async tasks of Decoder: ", 32);
    kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)a1, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v14 = &__p;
    }
    else {
      std::string v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v58);
  }
  uint64_t v16 = *((void *)*a4 + 3);
  quasar::SpeechRecognizerModelLoader::lookupRecognizers(*a8, *(unsigned int *)(v16 + 24), (unsigned __int8 **)(v16 + 80), (std::string *)(v16 + 152), *(unsigned __int8 *)(v16 + 34), *(unsigned __int8 *)(v16 + 739), (std::string *)(v16 + 648), (std::string *)(v16 + 672), (uint64_t *)&v53, (std::string *)(v16 + 696));
  if (*(unsigned char *)(a1 + 713) && *((_DWORD *)*a4 + 1))
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v58 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
      std::string v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Not running async tasks for post-first utterances of Decoder: ", 62);
      kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)a1, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v18 = &__p;
      }
      else {
        long long v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v19 = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v58);
    }
    std::string v20 = v53;
    int v21 = v54;
    while (v20 != v21)
    {
      if (!v20[16]) {
        quasar::MultiChainMultiAudioBuffer::removeBuffer(*a6, (unsigned __int8 *)(*(void *)v20 + 16));
      }
      v20 += 24;
    }
    uint64_t v39 = 0;
  }
  else
  {
    uint64_t v22 = (uint64_t)v53;
    if (v53 != v54)
    {
      uint64_t v45 = (void *)(a1 + 560);
      do
      {
        if (!*(unsigned char *)(v22 + 16))
        {
          quasar::MultiChainMultiAudioBuffer::getBuffer(*a6, (const void **)(*(void *)v22 + 16), &v52);
          std::allocate_shared[abi:ne180100]<quasar::RunAsyncParams,std::allocator<quasar::RunAsyncParams>,quasar::RunAsyncParams&,void>(*((const quasar::RunAsyncParams **)*a4 + 3), &v51);
          LmeDataStreams = (void **)quasar::SpeechRequestData::getLmeDataStreams(*a4);
          Locatiouint64_t n = (std::__assoc_sub_state **)quasar::SpeechRequestData::getLocation(*a4);
          *(void *)&long long v58 = quasar::Location::fromSharedFuture(Location);
          *((void *)&v58 + 1) = v25;
          quasar::SpeechRequestData::getRecogRequestTimer((uint64_t)*a4, &__p);
          char v49 = *((unsigned char *)*a4 + 216);
          char v48 = 0;
          std::allocate_shared[abi:ne180100]<quasar::SpeechRequestData,std::allocator<quasar::SpeechRequestData>,std::shared_ptr<quasar::RunAsyncParams> &,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::MultiAudioBuffer> &,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location,std::shared_ptr<kaldi::Timer> const,BOOL,BOOL,void>(&v51, a6, &v52, LmeDataStreams, &v58, (uint64_t *)&__p, &v49, &v50, &v48);
          if (__p.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
          int v26 = *a4;
          uint64_t v27 = v50;
          *(_DWORD *)(v50 + 8) = *((_DWORD *)*a4 + 2);
          *(void *)uint64_t v27 = *(void *)v26;
          *(_DWORD *)(v27 + 16) = *((_DWORD *)v26 + 4);
          std::shared_ptr<quasar::SpeechRecognizer>::shared_ptr[abi:ne180100]<quasar::SpeechRecognizer,void>(&v47, (void *)(a1 + 448));
          long long v58 = v47;
          if (*((void *)&v47 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v47 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          long long v59 = v50;
          if (*((void *)&v50 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v50 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)&long long v60 = *(void *)v22;
          uint64_t v28 = *(void *)(v22 + 8);
          *((void *)&v60 + 1) = v28;
          if (v28) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
          }
          std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v61, a5);
          uint64_t v29 = a7[1];
          *(void *)&long long v63 = *a7;
          *((void *)&v63 + 1) = v29;
          if (v29) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v30 = a8[1];
          *(void *)&long long v64 = *a8;
          *((void *)&v64 + 1) = v30;
          if (v30) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v31 = *(void *)(a1 + 568);
          unint64_t v32 = *(void *)(a1 + 576);
          if (v31 < v32) {
            std::allocator_traits<std::allocator<std::thread>>::construct[abi:ne180100]<std::thread,quasar::SystemCombinationDecoder::runAsyncTasks(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::SpeechRecognizerConfig> const&,std::shared_ptr<quasar::SpeechRecognizerModelLoader> const&)::$_0,void>();
          }
          uint64_t v33 = (uint64_t)(v31 - *v45) >> 3;
          if (!((unint64_t)(v33 + 1) >> 61))
          {
            uint64_t v34 = v32 - *v45;
            uint64_t v35 = v34 >> 2;
            if (v34 >> 2 <= (unint64_t)(v33 + 1)) {
              uint64_t v35 = v33 + 1;
            }
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v36 = v35;
            }
            uint64_t v57 = a1 + 576;
            if (v36) {
              unint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 576, v36);
            }
            else {
              unint64_t v37 = 0;
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v37[8 * v33];
            __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
            int64x2_t v56 = &v37[8 * v36];
            std::allocator_traits<std::allocator<std::thread>>::construct[abi:ne180100]<std::thread,quasar::SystemCombinationDecoder::runAsyncTasks(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::SpeechRecognizerConfig> const&,std::shared_ptr<quasar::SpeechRecognizerModelLoader> const&)::$_0,void>();
          }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        v22 += 24;
      }
      while ((unsigned char *)v22 != v54);
    }
    uint64_t v38 = *(void *)(a5 + 24);
    if (!v38) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v38 + 48))(v38)) {
      uint64_t v39 = 1;
    }
    else {
      uint64_t v39 = 3;
    }
  }
  *(void *)&long long v58 = &v53;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  return v39;
}

void sub_1B242496C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B2424A88);
}

void sub_1B242497C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a34);
  JUMPOUT(0x1B2424A88);
}

void sub_1B24249AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  a31 = (void **)&a23;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&a31);
  _Unwind_Resume(a1);
}

void sub_1B2424A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31)
{
  a31 = (void **)&a23;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&a31);
  _Unwind_Resume(a1);
}

void sub_1B2424A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a27) {
    JUMPOUT(0x1B2424A50);
  }
  JUMPOUT(0x1B2424A60);
}

void sub_1B2424A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  JUMPOUT(0x1B2424A78);
}

void *quasar::SystemCombinationDecoder::runAsyncTasks(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::SpeechRecognizerConfig> const&,std::shared_ptr<quasar::SpeechRecognizerModelLoader> const&)::$_0::~$_0(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[13];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[11];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](a1 + 6);
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  char v5 = (std::__shared_weak_count *)a1[3];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::string::size_type v6 = (std::__shared_weak_count *)a1[1];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return a1;
}

void quasar::SystemCombinationDecoder::runSyncCheck(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4, void *a5, uint64_t *a6)
{
  BOOL v12 = (std::__shared_weak_count *)operator new(0x30uLL);
  uint64_t v13 = v12;
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60090;
  v12[1].__vftable = 0;
  v12[1].__shared_owners_ = 0;
  v12[1].__shared_weak_owners_ = 0;
  unint64_t v14 = *a2;
  std::string::size_type v15 = (std::__shared_weak_count *)a2[1];
  v20[0] = v14;
  v20[1] = (unint64_t)v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *a3;
  std::string v17 = (std::__shared_weak_count *)a3[1];
  v19[0] = v16;
  v19[1] = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v18[0] = v12 + 1;
  v18[1] = v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  quasar::SystemCombinationDecoder::runSync(a1, v20, (uint64_t)v19, v18, a4, a5, a6);
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
}

void sub_1B2424C18(_Unwind_Exception *a1, int a2)
{
  char v7 = v3;
  int v9 = v7;
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  if (a2 == 3)
  {
    uint64_t v10 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 2)
    {
      uint64_t v11 = v10;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v25 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v25);
      BOOL v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"Ran out of token storage during decode: ", 40);
      uint64_t v13 = (const char *)(*(uint64_t (**)(void *))(*(void *)v11 + 16))(v11);
      size_t v14 = strlen(v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v25);
    }
  }
  else if (a2 == 2)
  {
    std::string::size_type v15 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 2)
    {
      uint64_t v16 = v15;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v25 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v25);
      std::string v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"Ran out of forward link storage during decode: ", 47);
      long long v18 = (const char *)(*(uint64_t (**)(void *))(*(void *)v16 + 16))(v16);
      size_t v19 = strlen(v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v25);
    }
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(a1);
    }
    std::string v20 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 2)
    {
      int v21 = v20;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v25 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v25);
      uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"Synchronous decoding failed: ", 29);
      int v23 = (const char *)(*(uint64_t (**)(void *))(*(void *)v21 + 16))(v21);
      size_t v24 = strlen(v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v25);
    }
  }
  std::mutex::lock((std::mutex *)(v2 + 488));
  *(unsigned char *)(v2 + 552) = 1;
  std::mutex::unlock((std::mutex *)(v2 + 488));
  __cxa_end_catch();
}

void quasar::SystemCombinationDecoder::runSync(uint64_t a1, unint64_t *a2, uint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t *a7)
{
  if (*(void *)*a4 != *(void *)(*a4 + 8))
  {
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v57 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v57);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v57, "Symbol table list passed to runSync() must start empty");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v57);
  }
  memset(v56, 0, sizeof(v56));
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  unint64_t v14 = *a2;
  unint64_t v13 = a2[1];
  if (v13)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    std::string::size_type v15 = (std::__shared_weak_count *)*((void *)&v52 + 1);
    *(void *)&long long v52 = v14;
    *((void *)&v52 + 1) = v13;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  else
  {
    long long v52 = v14;
  }
  if (!v14)
  {
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v57 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"Invalid recognition request parameters", 38);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v57);
  }
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v16 = *(atomic_ullong **)(a3 + 8);
  v49[0] = *(quasar::SpeechRequestData **)a3;
  v49[1] = (quasar::SpeechRequestData *)v16;
  if (v16) {
    atomic_fetch_add_explicit(v16 + 1, 1uLL, memory_order_relaxed);
  }
  quasar::SystemCombinationDecoder::createFeatChain(v49, &v52, &v50, (uint64_t *)&v57);
  std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate((uint64_t *)&v53);
  long long v53 = v57;
  *(void *)&long long v54 = v58;
  *(void *)&long long v58 = 0;
  long long v57 = 0uLL;
  __p[0] = &v57;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v16);
  }
  long long v18 = *(void **)(*((void *)&v53 + 1) - 16);
  std::string v17 = *(std::__shared_weak_count **)(*((void *)&v53 + 1) - 8);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v57 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"Created OnlineFeatInputItf chain", 32);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v57);
  }
  size_t v19 = (void *)(*a6 + 1612);
  __p[0] = v18;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineFeatureMatrix,std::allocator<kaldi::OnlineFeatureMatrix>,kaldi::OnlineFeatureMatrixOptions const&,kaldi::OnlineFeatInputItf *,void>(v19, (uint64_t *)__p, &v57);
  long long v20 = v57;
  long long v57 = 0uLL;
  int v21 = (std::__shared_weak_count *)v56[2];
  *(_OWORD *)&v56[1] = v20;
  if (v21)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    if (*((void *)&v57 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v57 + 1));
    }
  }
  quasar::Decodable::createDecodable((uint64_t *)&v57, *(quasar::Decodable **)(v52 + 64), v56[1]);
  long long v22 = v57;
  long long v57 = 0uLL;
  int v23 = (std::__shared_weak_count *)v56[4];
  *(_OWORD *)&v56[3] = v22;
  if (v23)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    if (*((void *)&v57 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v57 + 1));
    }
  }
  (*(void (**)(long long *__return_ptr))(**(void **)v53 + 80))(&v57);
  long long v24 = v57;
  long long v57 = 0uLL;
  long long v25 = (std::__shared_weak_count *)v56[6];
  *(_OWORD *)&v56[5] = v24;
  if (v25)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    if (*((void *)&v57 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v57 + 1));
    }
  }
  uint64_t v26 = *(void *)(v52 + 80);
  int v48 = 0;
  int v48 = (*(uint64_t (**)(void))(**((void **)v56[1] + 2) + 24))(*((void *)v56[1] + 2));
  if (!v48)
  {
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v57 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"Feature extraction misconfigured", 32);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v57);
  }
  (*(void (**)(void **__return_ptr))(**(void **)v26 + 112))(__p);
  MultiBuffer = (uint64_t *)quasar::SpeechRequestData::getMultiBuffer(*(quasar::SpeechRequestData **)a3);
  quasar::MultiAudioBuffer::getBuffer(*MultiBuffer, 1, &v44);
  unint64_t v28 = v47;
  if ((v47 & 0x80u) != 0) {
    unint64_t v28 = (unint64_t)__p[1];
  }
  if (v28 && v44)
  {
    quasar::SpeechRecognizerModelLoader::getSpgConfig(*a7, (uint64_t)__p, &v43);
    std::allocate_shared[abi:ne180100]<quasar::SilencePosteriorGenerator,std::allocator<quasar::SilencePosteriorGenerator>,std::shared_ptr<quasar::SilencePosteriorGeneratorConfig>,std::shared_ptr<quasar::RecogAudioBuffer> &,unsigned int &,void>(&v43, &v44, (unsigned int *)(*(void *)(*(void *)a3 + 24) + 24), &v57);
    long long v29 = v57;
    long long v57 = 0uLL;
    long long v30 = (std::__shared_weak_count *)v56[8];
    *(_OWORD *)&v56[7] = v29;
    if (v30)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      if (*((void *)&v57 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v57 + 1));
      }
    }
    if (*((void *)&v43 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v43 + 1));
    }
    int FrameDurationMs = quasar::SilencePosteriorGenerator::getFrameDurationMs(v56[7]);
    if (FrameDurationMs != v48)
    {
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v57 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v57);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"Frontend and SPG frame durations differ: ", 41);
      long long v39 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" vs ", 4);
      quasar::SilencePosteriorGenerator::getFrameDurationMs(v56[7]);
      std::ostream::operator<<();
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v57);
    }
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::string const&,int &>((uint64_t **)(a1 + 584), (const void **)(v52 + 16), v52 + 16, &v48);
  long long v32 = *(std::__shared_weak_count **)(a3 + 8);
  long long v41 = *(quasar::SpeechRequestData **)a3;
  int v42 = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v33 = *a4;
  long long v34 = (std::__shared_weak_count *)a4[1];
  v40[0] = v33;
  v40[1] = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::SystemCombinationDecoder::runSyncUtterance((uint64_t *)&v41, v40, (uint64_t *)&v52, a5, (uint64_t)&v57);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  std::mutex::lock((std::mutex *)(a1 + 488));
  std::__tree<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>>>::__emplace_unique_key_args<std::string,std::string const&,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>&>((uint64_t **)(a1 + 608), (const void **)(v52 + 16), (long long *)(v52 + 16), (uint64_t)&v57);
  std::mutex::unlock((std::mutex *)(a1 + 488));
  long long v37 = *(void **)(v52 + 80);
  long long v38 = *(void **)(v52 + 88);
  while (v37 != v38)
  {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v37 + 120))(*v37, v35, v36);
    v37 += 2;
  }
  if ((void)v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v58);
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if ((char)v47 < 0) {
    operator delete(__p[0]);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  quasar::SystemCombinationDecoder::RecogChain::~RecogChain((quasar::SystemCombinationDecoder::RecogChain *)&v52);
}

void sub_1B24255AC()
{
}

void sub_1B24255B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  std::mutex::unlock(v45);
  if (a45) {
    JUMPOUT(0x1B2425620);
  }
  JUMPOUT(0x1B2425624);
}

void sub_1B24255C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v15 < 0) {
    operator delete(v14);
  }
  JUMPOUT(0x1B2425640);
}

void sub_1B24255F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, ...)
{
  va_start(va, a17);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  quasar::SystemCombinationDecoder::RecogChain::~RecogChain((quasar::SystemCombinationDecoder::RecogChain *)va);
  _Unwind_Resume(a1);
}

void sub_1B242560C()
{
}

void quasar::SystemCombinationDecoder::createFeatChain(quasar::SpeechRequestData **a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  char v7 = *a1;
  uint64_t v8 = *((void *)v7 + 3);
  int v9 = *(_DWORD *)(v8 + 24);
  LOBYTE(v8) = *(unsigned char *)(v8 + 51);
  LODWORD(v94) = v9;
  uint64_t v95 = 0;
  char v96 = v8;
  int v102 = 0;
  char v103 = 0;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  memset(v101, 0, sizeof(v101));
  long long v104 = 0u;
  long long v105 = 0u;
  uint64_t v106 = 0;
  char v107 = 1;
  Locatiouint64_t n = quasar::SpeechRequestData::getLocation(v7);
  if (*(void *)Location) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)Location + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v95 = *(void *)Location;
  uint64_t v11 = *((void *)*a1 + 3);
  uint64_t v13 = *(void *)(v11 + 320);
  uint64_t v12 = *(void *)(v11 + 328);
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v14 = (std::__shared_weak_count *)*((void *)&v97 + 1);
  *(void *)&long long v97 = v13;
  *((void *)&v97 + 1) = v12;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v15 = *a2;
  uint64_t v16 = *(uint64_t **)(*a2 + 40);
  if (v16 == *(uint64_t **)(*a2 + 48))
  {
    long long v18 = 0;
    std::string v17 = 0;
  }
  else
  {
    std::string v17 = 0;
    long long v18 = 0;
    do
    {
      uint64_t v19 = *v16;
      MultiBuffer = (uint64_t *)quasar::SpeechRequestData::getMultiBuffer(*a1);
      quasar::MultiAudioBuffer::getBuffer(*MultiBuffer, 0, &v93);
      if ((void)v93) {
        uint64_t v21 = v93 + 16;
      }
      else {
        uint64_t v21 = 0;
      }
      long long v91 = v17;
      long long v92 = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      quasar::FeatureExtractor::createOnlineFeInput(v19, v21, (uint64_t *)&v91);
      long long v22 = (_OWORD *)a4[1];
      unint64_t v23 = a4[2];
      if ((unint64_t)v22 >= v23)
      {
        uint64_t v24 = ((uint64_t)v22 - *a4) >> 4;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = v23 - *a4;
        if (v26 >> 3 > v25) {
          unint64_t v25 = v26 >> 3;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        *((void *)&v76 + 1) = a4 + 2;
        unint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a4 + 2), v27);
        long long v29 = &v28[16 * v24];
        *(void *)&long long v74 = v28;
        *((void *)&v74 + 1) = v29;
        *(void *)&long long v76 = &v28[16 * v30];
        *(_OWORD *)long long v29 = v108;
        long long v108 = 0uLL;
        uint64_t v75 = v29 + 16;
        std::vector<std::shared_ptr<kaldi::OnlineFeatInputItf>>::__swap_out_circular_buffer(a4, &v74);
        uint64_t v31 = a4[1];
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)&v74);
        long long v32 = (std::__shared_weak_count *)*((void *)&v108 + 1);
        a4[1] = v31;
        if (v32) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v32);
        }
      }
      else
      {
        _OWORD *v22 = v108;
        long long v108 = 0uLL;
        a4[1] = (uint64_t)(v22 + 1);
      }
      if (v92) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v92);
      }
      if (*((void *)&v93 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v93 + 1));
      }
      uint64_t v33 = a4[1];
      std::string v17 = *(const void **)(v33 - 16);
      long long v34 = *(std::__shared_weak_count **)(v33 - 8);
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      if (v17
      {
        if (v34)
        {
          atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v34);
          atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v35 = (std::__shared_weak_count *)a2[6];
        a2[5] = v17;
        a2[6] = v34;
        if (v35) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
        }
      }
      if ((*(unsigned int (**)(void))(*(void *)*v16 + 16))())
      {
        *(void *)&long long v93 = v17;
        std::allocate_shared[abi:ne180100]<kaldi::OnlineBufferingInput,std::allocator<kaldi::OnlineBufferingInput>,kaldi::OnlineFeatInputItf *,void>((kaldi::OnlineFeatInputItf **)&v93, &v108);
        long long v36 = v108;
        long long v108 = 0uLL;
        long long v38 = (_OWORD *)a4[1];
        unint64_t v37 = a4[2];
        if ((unint64_t)v38 >= v37)
        {
          long long v72 = v36;
          uint64_t v40 = ((uint64_t)v38 - *a4) >> 4;
          if ((unint64_t)(v40 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v41 = v37 - *a4;
          uint64_t v42 = v41 >> 3;
          if (v41 >> 3 <= (unint64_t)(v40 + 1)) {
            uint64_t v42 = v40 + 1;
          }
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v43 = v42;
          }
          *((void *)&v76 + 1) = a4 + 2;
          uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a4 + 2), v43);
          uint64_t v45 = &v44[16 * v40];
          *(void *)&long long v74 = v44;
          *((void *)&v74 + 1) = v45;
          *(void *)&long long v76 = &v44[16 * v46];
          *(_OWORD *)uint64_t v45 = v72;
          uint64_t v75 = v45 + 16;
          std::vector<std::shared_ptr<kaldi::OnlineFeatInputItf>>::__swap_out_circular_buffer(a4, &v74);
          long long v39 = (_OWORD *)a4[1];
          std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)&v74);
          unsigned __int8 v47 = (std::__shared_weak_count *)*((void *)&v108 + 1);
          a4[1] = (uint64_t)v39;
          if (v47)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v47);
            long long v39 = (_OWORD *)a4[1];
          }
        }
        else
        {
          _OWORD *v38 = v36;
          long long v39 = v38 + 1;
          a4[1] = (uint64_t)v39;
        }
        std::string v17 = (const void *)*((void *)v39 - 2);
        long long v18 = (std::__shared_weak_count *)*((void *)v39 - 1);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v34) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v34);
        }
      }
      else
      {
        long long v18 = v34;
      }
      v16 += 2;
      uint64_t v15 = *a2;
    }
    while (v16 != *(uint64_t **)(*a2 + 48));
  }
  uint64_t v49 = *(void *)(v15 + 80);
  for (uint64_t i = *(void *)(v15 + 88); v49 != i; v49 += 16)
  {
    if ((*(unsigned int (**)(void))(**(void **)v49 + 48))())
    {
      std::allocate_shared[abi:ne180100]<quasar::OnlineCacheInputFe,std::allocator<quasar::OnlineCacheInputFe>,char const(&)[6],void>("cache", &v74);
      long long v50 = v74;
      long long v74 = 0uLL;
      uint64_t v51 = (std::__shared_weak_count *)a3[1];
      *(_OWORD *)a3 = v50;
      if (v51)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v51);
        if (*((void *)&v74 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v74 + 1));
        }
      }
      quasar::FeatureExtractor::init(*a3);
      long long v52 = a3;
      uint64_t v53 = *a3;
      long long v54 = (uint64_t *)quasar::SpeechRequestData::getMultiBuffer(*a1);
      quasar::MultiAudioBuffer::getBuffer(*v54, 0, &v89);
      uint64_t v55 = v89;
      __int16 v87 = v17;
      uint64_t v88 = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      LODWORD(v74) = *(_DWORD *)(*((void *)*a1 + 3) + 24);
      *((void *)&v74 + 1) = 0;
      LOBYTE(v75) = 0;
      int v81 = 0;
      char v82 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      memset(v80, 0, sizeof(v80));
      long long v83 = 0u;
      long long v84 = 0u;
      uint64_t v85 = 0;
      char v86 = 1;
      if (v55) {
        uint64_t v56 = v55 + 16;
      }
      else {
        uint64_t v56 = 0;
      }
      quasar::FeatureExtractor::createOnlineFeInput(v53, v56, (uint64_t *)&v87);
      long long v57 = (_OWORD *)a4[1];
      unint64_t v58 = a4[2];
      if ((unint64_t)v57 >= v58)
      {
        uint64_t v59 = ((uint64_t)v57 - *a4) >> 4;
        unint64_t v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v61 = v58 - *a4;
        if (v61 >> 3 > v60) {
          unint64_t v60 = v61 >> 3;
        }
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v62 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v62 = v60;
        }
        long long v111 = a4 + 2;
        long long v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a4 + 2), v62);
        long long v64 = &v63[16 * v59];
        *(void *)&long long v108 = v63;
        *((void *)&v108 + 1) = v64;
        long long v110 = &v63[16 * v65];
        *(_OWORD *)long long v64 = v93;
        long long v93 = 0uLL;
        long long v109 = v64 + 16;
        std::vector<std::shared_ptr<kaldi::OnlineFeatInputItf>>::__swap_out_circular_buffer(a4, &v108);
        uint64_t v66 = a4[1];
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)&v108);
        long long v67 = (std::__shared_weak_count *)*((void *)&v93 + 1);
        a4[1] = v66;
        a3 = v52;
        if (v67) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v67);
        }
      }
      else
      {
        _OWORD *v57 = v93;
        long long v93 = 0uLL;
        a4[1] = (uint64_t)(v57 + 1);
        a3 = v52;
      }
      quasar::FeatureExtractorArgs::~FeatureExtractorArgs((void **)&v74);
      if (v88) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v88);
      }
      if (v90) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v90);
      }
    }
  }
  uint64_t v68 = a4[1];
  uint64_t v70 = *(void *)(v68 - 16);
  uint64_t v69 = *(void *)(v68 - 8);
  if (v69) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v69 + 8), 1uLL, memory_order_relaxed);
  }
  long long v71 = (std::__shared_weak_count *)a2[8];
  a2[7] = v70;
  a2[8] = v69;
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  quasar::FeatureExtractorArgs::~FeatureExtractorArgs(&v94);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
}

void sub_1B2425D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
}

void quasar::SystemCombinationDecoder::runSyncUtterance(uint64_t *a1@<X1>, void *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  v119[4] = *MEMORY[0x1E4F143B8];
  if (*(void *)*a2 != *(void *)(*a2 + 8))
  {
    long long v111 = 0u;
    long long v112 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long v96 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v96);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v96, "Symbol table list passed to runSyncUtterance() must start empty");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v96);
  }
  uint64_t v10 = *a3;
  uint64_t v11 = *(void **)(*a3 + 80);
  uint64_t v12 = *(void **)(*a3 + 88);
  if (v11 != v12)
  {
    do
    {
      if (((*(uint64_t (**)(void))(*(void *)*v11 + 72))() & 1) == 0)
      {
        long long v111 = 0u;
        long long v112 = 0u;
        long long v109 = 0u;
        long long v110 = 0u;
        long long v107 = 0u;
        long long v108 = 0u;
        long long v105 = 0u;
        long long v106 = 0u;
        long long v103 = 0u;
        long long v104 = 0u;
        long long v101 = 0u;
        long long v102 = 0u;
        long long v99 = 0u;
        long long v100 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        long long v96 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v96);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v96, "All secondary chain decoders should affect recognition.");
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v96);
      }
      v11 += 2;
    }
    while (v11 != v12);
    uint64_t v10 = *a3;
    uint64_t v11 = *(void **)(*a3 + 80);
  }
  unint64_t v14 = (kaldi::quasar::Vocab *)*v11;
  uint64_t v13 = (std::__shared_weak_count *)v11[1];
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v10 = *a3;
    uint64_t v11 = *(void **)(*a3 + 80);
  }
  long long v52 = v13;
  uint64_t v15 = *(char **)(v10 + 88);
  uint64_t v117 = 0;
  uint64_t v118 = 0;
  unint64_t v116 = 0;
  std::vector<std::shared_ptr<quasar::Decoder>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<quasar::Decoder> const*>,std::__wrap_iter<std::shared_ptr<quasar::Decoder> const*>>(&v116, v11 + 2, v15, (v15 - (char *)(v11 + 2)) >> 4);
  if (!*(unsigned char *)(*(void *)(*a1 + 24) + 48)) {
    goto LABEL_31;
  }
  if ((*(uint64_t (**)(kaldi::quasar::Vocab *))(*(void *)v14 + 80))(v14))
  {
    if (!*(unsigned char *)(*(void *)(*a1 + 24) + 48)
      || !(*(unsigned int (**)(kaldi::quasar::Vocab *))(*(void *)v14 + 88))(v14)
      || ((*(uint64_t (**)(uint64_t))(*(void *)a3[11] + 56))(a3[11]) & 1) != 0)
    {
      goto LABEL_31;
    }
    if (quasar::gLogLevel >= 4)
    {
      long long v111 = 0u;
      long long v112 = 0u;
      long long v109 = 0u;
      long long v110 = 0u;
      long long v107 = 0u;
      long long v108 = 0u;
      long long v105 = 0u;
      long long v106 = 0u;
      long long v103 = 0u;
      long long v104 = 0u;
      long long v101 = 0u;
      long long v102 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long v96 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v96);
      uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"Eager disabled: silence posterior required but not available: ", 62);
      kaldi::quasar::Vocab::OOvWord(v14, (std::string *)__p);
      if ((SBYTE7(v55) & 0x80u) == 0) {
        std::string v17 = __p;
      }
      else {
        std::string v17 = (void **)__p[0];
      }
      if ((SBYTE7(v55) & 0x80u) == 0) {
        uint64_t v18 = BYTE7(v55);
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
LABEL_27:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
      if (SBYTE7(v55) < 0) {
        operator delete(__p[0]);
      }
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v96);
    }
  }
  else if (quasar::gLogLevel >= 4)
  {
    long long v111 = 0u;
    long long v112 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long v96 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v96);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"Eager disabled: not supported by first-pass decoder: ", 53);
    kaldi::quasar::Vocab::OOvWord(v14, (std::string *)__p);
    if ((SBYTE7(v55) & 0x80u) == 0) {
      std::string v17 = __p;
    }
    else {
      std::string v17 = (void **)__p[0];
    }
    if ((SBYTE7(v55) & 0x80u) == 0) {
      uint64_t v18 = BYTE7(v55);
    }
    else {
      uint64_t v18 = (uint64_t)__p[1];
    }
    goto LABEL_27;
  }
  *(unsigned char *)(*(void *)(*a1 + 24) + 48) = 0;
LABEL_31:
  uint64_t v49 = (uint64_t)v14;
  uint64_t v19 = (kaldi::quasar::Vocab **)v116;
  long long v20 = v117;
  while (v19 != (kaldi::quasar::Vocab **)v20)
  {
    if (*(unsigned char *)(*(void *)(*a1 + 24) + 48) && ((*(uint64_t (**)(void))(*(void *)*v19 + 80))() & 1) == 0)
    {
      if (quasar::gLogLevel >= 5)
      {
        long long v111 = 0u;
        long long v112 = 0u;
        long long v109 = 0u;
        long long v110 = 0u;
        long long v107 = 0u;
        long long v108 = 0u;
        long long v105 = 0u;
        long long v106 = 0u;
        long long v103 = 0u;
        long long v104 = 0u;
        long long v101 = 0u;
        long long v102 = 0u;
        long long v99 = 0u;
        long long v100 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        long long v96 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v96);
        uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"Eager disabled: not supported by second-pass decoder: ", 54);
        kaldi::quasar::Vocab::OOvWord(*v19, (std::string *)__p);
        if ((SBYTE7(v55) & 0x80u) == 0) {
          long long v22 = __p;
        }
        else {
          long long v22 = (void **)__p[0];
        }
        if ((SBYTE7(v55) & 0x80u) == 0) {
          uint64_t v23 = BYTE7(v55);
        }
        else {
          uint64_t v23 = (uint64_t)__p[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
        if (SBYTE7(v55) < 0) {
          operator delete(__p[0]);
        }
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v96);
      }
      *(unsigned char *)(*(void *)(*a1 + 24) + 48) = 0;
      break;
    }
    v19 += 2;
  }
  uint64_t v50 = a4;
  uint64_t v51 = a5;
  int v113 = 0;
  uint64_t v114 = 0;
  unint64_t v115 = 0;
  unint64_t v25 = v116;
  uint64_t v24 = v117;
  if (v116 != v117)
  {
    uint64_t v26 = 0;
    do
    {
      long long v27 = *(_OWORD *)v25;
      uint64_t v28 = v25[1];
      if (v28) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 16), 1uLL, memory_order_relaxed);
      }
      if ((unint64_t)v26 >= v115)
      {
        long long v53 = v27;
        uint64_t v29 = (v26 - v113) >> 4;
        if ((unint64_t)(v29 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v30 = (uint64_t)(v115 - (void)v113) >> 3;
        if (v30 <= v29 + 1) {
          unint64_t v30 = v29 + 1;
        }
        if (v115 - (unint64_t)v113 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v30;
        }
        *(void *)&long long v98 = &v115;
        long long v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v115, v31);
        uint64_t v33 = &v32[16 * v29];
        *(void *)&long long v96 = v32;
        *((void *)&v96 + 1) = v33;
        *((void *)&v97 + 1) = &v32[16 * v34];
        *(_OWORD *)uint64_t v33 = v53;
        *(void *)&long long v97 = v33 + 16;
        std::vector<std::weak_ptr<quasar::Decoder>>::__swap_out_circular_buffer((uint64_t *)&v113, &v96);
        uint64_t v26 = v114;
        std::__split_buffer<std::weak_ptr<quasar::Decoder>>::~__split_buffer((void **)&v96);
      }
      else
      {
        *(void *)uint64_t v26 = v27;
        *((void *)v26 + 1) = v28;
        v26 += 16;
      }
      uint64_t v114 = v26;
      v25 += 2;
    }
    while (v25 != v24);
  }
  uint64_t v35 = (std::__shared_weak_count *)a3[6];
  uint64_t v94 = a3[5];
  uint64_t v95 = v35;
  if (v35) {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v36 = (std::__shared_weak_count *)a3[8];
  uint64_t v92 = a3[7];
  long long v93 = v36;
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v37 = (std::__shared_weak_count *)a3[10];
  uint64_t v90 = a3[9];
  long long v91 = v37;
  if (v37) {
    atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v38 = (std::__shared_weak_count *)a3[12];
  uint64_t v88 = a3[11];
  uint64_t v89 = v38;
  if (v38) {
    atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v39 = *(std::__shared_weak_count **)(*a3 + 72);
  uint64_t v86 = *(void *)(*a3 + 64);
  __int16 v87 = v39;
  if (v39) {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v40 = (std::__shared_weak_count *)a3[14];
  uint64_t v84 = a3[13];
  uint64_t v85 = v40;
  if (v40) {
    atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v83 = 0;
  uint64_t v82 = 0;
  uint64_t v41 = *(void *)(*a1 + 24) + 56;
  uint64_t v42 = (std::__shared_weak_count *)a3[16];
  uint64_t v80 = a3[15];
  int v81 = v42;
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v79 = 0;
  uint64_t v78 = 0;
  memset(v77, 0, sizeof(v77));
  memset(v76, 0, sizeof(v76));
  memset(v75, 0, sizeof(v75));
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v55 = 0;
  quasar::DecoderPassData::DecoderPassData((uint64_t)&v96, &v94, &v92, &v90, &v88, &v86, &v84, 0, 1, (void **)&v113, &v82, v41, &v80, &v78, 4, 0, v77, v76, v75,
    0,
    0,
    (uint64_t **)__p);
  long long v73 = __p;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v73);
  __p[0] = v75;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = v76;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = v77;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v79) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v79);
  }
  if (v81) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v81);
  }
  if (v83) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v83);
  }
  if (v85) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v85);
  }
  if (v87) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v87);
  }
  if (v89) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v89);
  }
  if (v91) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v91);
  }
  if (v93) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v93);
  }
  if (v95) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v95);
  }
  unint64_t v43 = (std::__shared_weak_count *)a2[1];
  uint64_t v71 = *a2;
  long long v72 = v43;
  if (v43) {
    atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::SystemCombinationDecoder::initializeDecoderChainOutput((uint64_t)a1, &v71, (uint64_t **)&v73);
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Waiting for first valid feature frame of first utterance...", 59);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  if (*(_DWORD *)(*a1 + 4) || kaldi::OnlineFeatureMatrix::IsValidFrame((int32x2_t *)a3[9], 0, 1))
  {
    int v44 = quasar::Decoder::run(v49, (uint64_t)&v96, (uint64_t)&v73, a1, v50, 1, v116 == v117);
    int v45 = v44;
    if (!*(unsigned char *)(*(void *)(*a1 + 24) + 48) && !v44)
    {
      std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v119, v50);
      int v45 = quasar::Decoder::runChain(&v116, (uint64_t)v119, (uint64_t)&v96, (uint64_t)&v73, a1);
      std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v119);
    }
    if (v45 == 2)
    {
      *(_DWORD *)uint64_t v51 = 0;
      goto LABEL_114;
    }
    if (v45 == 1) {
      int v46 = 2;
    }
    else {
      int v46 = 1;
    }
  }
  else
  {
    uint64_t v47 = *(void *)(v50 + 24);
    if (!v47) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v47 + 48))(v47)) {
      int v46 = 2;
    }
    else {
      int v46 = 3;
    }
  }
  *(_DWORD *)uint64_t v51 = v46;
LABEL_114:
  int v48 = v74;
  *(void *)(v51 + 8) = v73;
  *(void *)(v51 + 16) = v48;
  if (v48) {
    atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v74) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v74);
  }
  quasar::DecoderPassData::~DecoderPassData((quasar::DecoderPassData *)&v96);
  *(void *)&long long v96 = &v113;
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
  *(void *)&long long v96 = &v116;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
}

void sub_1B242694C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1B2426964()
{
  std::__split_buffer<std::weak_ptr<quasar::Decoder>>::~__split_buffer((void **)&STACK[0x2B0]);
  v2[0] = (void **)(v0 - 176);
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100](v2);
  v2[0] = (void **)(v0 - 152);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1B24269C0);
}

void sub_1B2426974()
{
  if (v0) {
    std::__shared_weak_count::__release_weak(v0);
  }
  v3[0] = (void **)(v1 - 176);
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100](v3);
  v3[0] = (void **)(v1 - 152);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](v3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  JUMPOUT(0x1B24269C0);
}

void quasar::SystemCombinationDecoder::initializeDecoderChainOutput(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t **a3@<X8>)
{
  std::string::size_type v6 = (char *)operator new(0x198uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)std::string::size_type v6 = &unk_1F0A61408;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 264) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 296) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  quasar::SpeechRequestResultData::SpeechRequestResultData((quasar::SpeechRequestResultData *)(v6 + 24));
  *(void *)&v13[0] = v7;
  *((void *)&v13[0] + 1) = v6;
  std::allocate_shared[abi:ne180100]<quasar::DecoderChainOutput,std::allocator<quasar::DecoderChainOutput>,std::shared_ptr<quasar::SymbolTableList> &,std::shared_ptr<quasar::SpeechRequestResultData>,void>(a2, v13, a3);
  if (*((void *)&v13[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13[0] + 1));
  }
  std::vector<std::string>::__clear[abi:ne180100](*a3);
  uint64_t v8 = *(void *)(*(void *)a1 + 24);
  if (*(char *)(v8 + 199) < 0)
  {
    if (!*(void *)(v8 + 184)) {
      return;
    }
  }
  else if (!*(unsigned char *)(v8 + 199))
  {
    return;
  }
  _ZNSt3__115allocate_sharedB8ne180100IN6quasar5PTreeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v13);
  int v9 = *a3;
  long long v10 = v13[0];
  v13[0] = 0uLL;
  uint64_t v11 = (std::__shared_weak_count *)v9[69];
  *((_OWORD *)v9 + 34) = v10;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    if (*((void *)&v13[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13[0] + 1));
    }
  }
  uint64_t v12 = (*a3)[68];
  std::string::basic_string[abi:ne180100]<0>(v18, "version");
  LODWORD(v13[0]) = quasar::getType((quasar *)1);
  std::to_string((std::string *)((char *)v13 + 8), 1);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  char v17 = 1;
  quasar::PTree::putChild(v12, (uint64_t)v18, (uint64_t)v13, 1);
  quasar::PTree::~PTree((quasar::PTree *)v13);
  if (v19 < 0) {
    operator delete(v18[0]);
  }
}

void sub_1B2426B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  quasar::PTree::~PTree((quasar::PTree *)&a9);
  if (*(char *)(v11 - 33) < 0) {
    operator delete(*(void **)(v11 - 56));
  }
  uint64_t v13 = *(std::__shared_weak_count **)(v10 + 8);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  _Unwind_Resume(a1);
}

void quasar::SystemCombinationDecoder::clearAsyncTasks(quasar::SystemCombinationDecoder *this)
{
  uint64_t v2 = (std::thread *)*((void *)this + 70);
  uint64_t v3 = (std::thread *)*((void *)this + 71);
  if (v2 == v3)
  {
    *((unsigned char *)this + 552) = 0;
  }
  else
  {
    do
    {
      if (v2->__t_) {
        std::thread::join(v2);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v4 = (std::thread *)*((void *)this + 71);
    uint64_t v2 = (std::thread *)*((void *)this + 70);
    *((unsigned char *)this + 552) = 0;
    while (v4 != v2)
      std::thread::~thread(v4 - 1);
  }
  *((void *)this + 71) = v2;
  std::__tree<std::string>::destroy((uint64_t)this + 584, *((char **)this + 74));
  *((void *)this + 73) = (char *)this + 592;
  *((void *)this + 75) = 0;
  *((void *)this + 74) = 0;
  std::__tree<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>>>::destroy((uint64_t)this + 608, *((void **)this + 77));
  *((void *)this + 76) = (char *)this + 616;
  *((void *)this + 78) = 0;
  *((void *)this + 77) = 0;
}

uint64_t quasar::SystemCombinationDecoder::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
  if (*(unsigned char *)(a1 + 713) && *((_DWORD *)*a4 + 1))
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Skipping run for post-first utterances of Decoder: ", 51);
      kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)a1, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_29;
    }
    return 0;
  }
  if (*(unsigned char *)(*a3 + 581))
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Last frame of utterance has been processed, running system selection", 68);
LABEL_15:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v20);
    }
  }
  else
  {
    if (*(unsigned char *)(*((void *)*a4 + 3) + 48))
    {
      if (quasar::gLogLevel >= 4)
      {
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v20 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Last frame of utterance has not been processed, returning success without running system selection", 98);
LABEL_29:
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v20);
      }
      return 0;
    }
    if (quasar::gLogLevel >= 4)
    {
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Eager not enabled, running system selection", 43);
      goto LABEL_15;
    }
  }
  uint64_t v11 = *(std::thread **)(a1 + 560);
  uint64_t v12 = *(std::thread **)(a1 + 568);
  while (v11 != v12)
  {
    if (v11->__t_) {
      std::thread::join(v11);
    }
    ++v11;
  }
  std::mutex::lock((std::mutex *)(a1 + 488));
  int v13 = *(unsigned __int8 *)(a1 + 552);
  if (*(unsigned char *)(a1 + 552) && quasar::gLogLevel >= 2)
  {
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v20 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Secondary decoder chains threw an exception. Skipping system combination.", 73);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v20);
    std::mutex::unlock((std::mutex *)(a1 + 488));
    return 2;
  }
  std::mutex::unlock((std::mutex *)(a1 + 488));
  if (v13) {
    return 2;
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v20 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Done with workerthreads", 23);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v20);
  }
  if (*(char *)(a1 + 487) < 0) {
    uint64_t v16 = *(void *)(a1 + 472);
  }
  else {
    uint64_t v16 = *(unsigned __int8 *)(a1 + 487);
  }
  if (v16)
  {
    quasar::SystemCombinationDecoder::selectSpecifiedChain(a1, a2, a3, (uint64_t)a4);
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = quasar::SystemCombinationDecoder::selectChain(a1, a2, a3, a4);
  }
  *(unsigned char *)(a1 + 552) = 0;
  uint64_t v17 = *(void *)(a1 + 568);
  uint64_t v18 = *(void *)(a1 + 560);
  while (v17 != v18)
    std::thread::~thread((std::thread *)(v17 - 8));
  *(void *)(a1 + 568) = v18;
  std::__tree<std::string>::destroy(a1 + 584, *(char **)(a1 + 592));
  *(void *)(a1 + 584) = a1 + 592;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 592) = 0;
  std::__tree<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>>>::destroy(a1 + 608, *(void **)(a1 + 616));
  *(void *)(a1 + 608) = a1 + 616;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 616) = 0;
  return v14;
}

void sub_1B242706C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t quasar::SystemCombinationDecoder::selectSpecifiedChain(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 608, (const void **)(a1 + 464));
  if (a1 + 616 != v8)
  {
    uint64_t v9 = v8;
    if (quasar::gLogLevel >= 4)
    {
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v31 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Output of the secondary decoder chain (", 39);
      int v11 = *(char *)(a1 + 487);
      if (v11 >= 0) {
        uint64_t v12 = a1 + 464;
      }
      else {
        uint64_t v12 = *(void *)(a1 + 464);
      }
      if (v11 >= 0) {
        uint64_t v13 = *(unsigned __int8 *)(a1 + 487);
      }
      else {
        uint64_t v13 = *(void *)(a1 + 472);
      }
      uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)") was selected.", 15);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v31);
    }
    uint64_t v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 584, (const void **)(a1 + 464));
    if (a1 + 592 == v15)
    {
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v31 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v31, "Could not find frame duration of selected secondary decoder chain.");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v31);
    }
    uint64_t v16 = v15;
    int v17 = *(_DWORD *)(*a3 + 576);
    int v18 = (*(uint64_t (**)(void))(**(void **)(*(void *)a2 + 16) + 24))(*(void *)(*(void *)a2 + 16));
    uint64_t v19 = *(void *)(v9 + 64);
    if (v18 * v17 < (*(_DWORD *)(v16 + 56) * *(_DWORD *)(v19 + 576)))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v31, "decoderChainOutput->uttNumFrames * decoderPassData.featureMatrix->FrameDurationMs() >= selectedDecoderChainOutput->uttNumFrames * selectedFrameDuration->second");
    }
    else
    {
      if (*(unsigned __int8 *)(*a3 + 580) == *(unsigned __int8 *)(v19 + 580))
      {
        quasar::SystemCombinationDecoder::populateResultChoicesForAllChains(a1, a2, a3, a4);
        quasar::SystemCombinationDecoder::alignResultChoices(a1, *(uint64_t **)(*a3 + 352), *(uint64_t **)(*(void *)(v9 + 64) + 352));
        uint64_t v20 = *(void *)(v9 + 64);
        uint64_t v21 = *a3;
        uint64_t v23 = *(void *)(v20 + 352);
        uint64_t v22 = *(void *)(v20 + 360);
        if (v22) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
        }
        long long v24 = *(std::__shared_weak_count **)(v21 + 360);
        *(void *)(v21 + 352) = v23;
        *(void *)(v21 + 360) = v22;
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        uint64_t v25 = *(void *)(v9 + 64);
        uint64_t v26 = *a3;
        uint64_t v28 = *(void *)(v25 + 392);
        uint64_t v27 = *(void *)(v25 + 400);
        if (v27) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
        }
        long long v29 = *(std::__shared_weak_count **)(v26 + 400);
        *(void *)(v26 + 392) = v28;
        *(void *)(v26 + 400) = v27;
        if (v29) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        }
        return 0;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v31, "decoderChainOutput->processedLastFrame == selectedDecoderChainOutput->processedLastFrame");
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v31);
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Output of the primary decoder chain was selected.", 49);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v31);
  }
  return 0;
}

void sub_1B24273DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::SystemCombinationDecoder::selectChain(uint64_t a1, uint64_t a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
  quasar::SystemCombinationDecoder::populateResultChoicesForAllChains(a1, a2, a3, (uint64_t)a4);
  uint64_t v9 = *a3;
  uint64_t v10 = *(uint64_t ***)(*a3 + 352);
  uint64_t v11 = *(void *)(a1 + 608);
  uint64_t v12 = *(void **)(v11 + 64);
  uint64_t v13 = (uint64_t **)v12[44];
  uint64_t v14 = v12[28];
  if (v14 && !*(void *)(v9 + 224))
  {
    uint64_t v15 = v12[29];
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = *(std::__shared_weak_count **)(v9 + 232);
    *(void *)(v9 + 224) = v14;
    *(void *)(v9 + 232) = v15;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  uint64_t v16 = *(void *)(v11 + 64);
  uint64_t v17 = *(void *)(v16 + 240);
  if (v17)
  {
    uint64_t v18 = *a3;
    if (!*(void *)(*a3 + 240))
    {
      uint64_t v19 = *(void *)(v16 + 248);
      if (v19) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = *(std::__shared_weak_count **)(v18 + 248);
      *(void *)(v18 + 240) = v17;
      *(void *)(v18 + 248) = v19;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
  }
  uint64_t v20 = *(void *)(v11 + 64);
  uint64_t v21 = *(void *)(v20 + 256);
  if (v21)
  {
    uint64_t v22 = *a3;
    if (!*(void *)(*a3 + 256))
    {
      uint64_t v23 = *(void *)(v20 + 264);
      if (v23) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = *(std::__shared_weak_count **)(v22 + 264);
      *(void *)(v22 + 256) = v21;
      *(void *)(v22 + 264) = v23;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
  }
  uint64_t v25 = *v13;
  long long v24 = v13[1];
  if (v10[1] == *v10)
  {
    if (v24 != v25) {
      goto LABEL_35;
    }
    if (quasar::gLogLevel >= 1)
    {
      long long v105 = 0u;
      long long v106 = 0u;
      long long v103 = 0u;
      long long v104 = 0u;
      long long v101 = 0u;
      long long v102 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v90 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v90);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v90, (uint64_t)"Both the primary and secondary result choices are empty", 55);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v90);
    }
    return 2;
  }
  if (v24 == v25)
  {
    if (quasar::gLogLevel < 4) {
      return 0;
    }
    long long v105 = 0u;
    long long v106 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v90 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v90);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v90, (uint64_t)"No result choices were available for the secondary chain. Selecting the primary chain", 85);
LABEL_58:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v90);
    return 0;
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v105 = 0u;
    long long v106 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v90 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v90);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v90, (uint64_t)"Result choices for the primary chain:", 37);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v90);
  }
  quasar::SystemCombinationDecoder::printResultChoices((uint64_t)v8, (uint64_t)v10);
  if (quasar::gLogLevel >= 5)
  {
    long long v105 = 0u;
    long long v106 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v90 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v90);
    uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v90, (uint64_t)"Result choices for the secondary chain ", 39);
    int v28 = *(char *)(v11 + 55);
    if (v28 >= 0) {
      uint64_t v29 = v11 + 32;
    }
    else {
      uint64_t v29 = *(void *)(v11 + 32);
    }
    if (v28 >= 0) {
      uint64_t v30 = *(unsigned __int8 *)(v11 + 55);
    }
    else {
      uint64_t v30 = *(void *)(v11 + 40);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v29, v30);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v90);
  }
  quasar::SystemCombinationDecoder::printResultChoices(v26, (uint64_t)v13);
  uint64_t v88 = 0;
  unint64_t v89 = 0;
  uint64_t v87 = 0;
  long long v31 = *v10;
  long long v32 = v10[1];
  unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (v32 - *v10);
  unint64_t v34 = *(int *)(a1 + 632);
  if (v33 >= v34)
  {
    std::vector<std::vector<quasar::Token>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<quasar::Token>*>,std::__wrap_iter<std::vector<quasar::Token>*>>(&v87, 0, v31, &v31[3 * (int)v34], v34);
  }
  else
  {
    if (quasar::gLogLevel < 5)
    {
      long long v35 = 0;
    }
    else
    {
      long long v105 = 0u;
      long long v106 = 0u;
      long long v103 = 0u;
      long long v104 = 0u;
      long long v101 = 0u;
      long long v102 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v90 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v90);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v90, (uint64_t)"Number of primary chain alternatives was less than the number of hypotheses requested for selection. The last choice will be repeated", 133);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v90);
      long long v35 = v88;
      long long v31 = *v10;
      long long v32 = v10[1];
      unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (v32 - *v10);
    }
    std::vector<std::vector<quasar::Token>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<quasar::Token>*>,std::__wrap_iter<std::vector<quasar::Token>*>>(&v87, v35, v31, v32, v33);
    long long v61 = v10[1];
    if (0x5555555555555555 * (v61 - *v10) + *(int *)(a1 + 632))
    {
      unint64_t v62 = 0;
      long long v63 = v88;
      do
      {
        if ((unint64_t)v63 >= v89)
        {
          long long v63 = (void *)std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(&v87, v61 - 3);
        }
        else
        {
          *long long v63 = 0;
          v63[1] = 0;
          v63[2] = 0;
          std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v63, *(v61 - 3), *(v61 - 2), 0x6DB6DB6DB6DB6DB7 * ((*(v61 - 2) - *(v61 - 3)) >> 5));
          v63 += 3;
        }
        uint64_t v88 = v63;
        ++v62;
        long long v61 = v10[1];
      }
      while (*(int *)(a1 + 632) + 0x5555555555555555 * (v61 - *v10) > v62);
    }
  }
  long long v64 = *v13;
  long long v65 = v13[1];
  unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * (v65 - *v13);
  unint64_t v67 = *(int *)(a1 + 636);
  if (v66 >= v67)
  {
    std::vector<std::vector<quasar::Token>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<quasar::Token>*>,std::__wrap_iter<std::vector<quasar::Token>*>>(&v87, v88, v64, &v64[3 * (int)v67], *(int *)(a1 + 636));
    long long v68 = (uint64_t **)*v10;
  }
  else
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v105 = 0u;
      long long v106 = 0u;
      long long v103 = 0u;
      long long v104 = 0u;
      long long v101 = 0u;
      long long v102 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v90 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v90);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v90, (uint64_t)"Number of secondary chain alternatives was less than the number of hypotheses requested for selection. The last choice will be repeated", 135);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v90);
      long long v64 = *v13;
      long long v65 = v13[1];
      unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * (v65 - *v13);
    }
    std::vector<std::vector<quasar::Token>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<quasar::Token>*>,std::__wrap_iter<std::vector<quasar::Token>*>>(&v87, v88, v64, v65, v66);
    long long v68 = (uint64_t **)*v10;
    if (0x5555555555555555 * (v10[1] - *v10) + *(int *)(a1 + 632))
    {
      unint64_t v69 = 0;
      long long v70 = v88;
      do
      {
        uint64_t v71 = v13[1];
        if ((unint64_t)v70 >= v89)
        {
          long long v70 = (void *)std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(&v87, v71 - 3);
        }
        else
        {
          *long long v70 = 0;
          v70[1] = 0;
          v70[2] = 0;
          std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v70, *(v71 - 3), *(v71 - 2), 0x6DB6DB6DB6DB6DB7 * ((*(v71 - 2) - *(v71 - 3)) >> 5));
          v70 += 3;
        }
        uint64_t v88 = v70;
        ++v69;
        long long v68 = (uint64_t **)*v10;
      }
      while (*(int *)(a1 + 632) + 0x5555555555555555 * (v10[1] - *v10) > v69);
    }
  }
  if (quasar::SystemCombinationDecoder::isResultChoiceUncombinable(a1, v68))
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v105 = 0u;
      long long v106 = 0u;
      long long v103 = 0u;
      long long v104 = 0u;
      long long v101 = 0u;
      long long v102 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v90 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v90);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v90, (uint64_t)"Output of primary decoder chain was selected because it contains uncombinable word tags", 87);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v90);
    }
    *(void *)&long long v90 = &v87;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
    return 0;
  }
  std::string __p = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  if (quasar::SystemCombinationDecoder::extractFeatures(a1, &v87, &__p))
  {
    uint64_t v60 = *a3;
    if (!*(void *)(*a3 + 272))
    {
      long long v73 = operator new(0x30uLL);
      v73[1] = 0;
      v73[2] = 0;
      *long long v73 = &unk_1F0A62B70;
      v73[4] = 0;
      v73[5] = 0;
      void v73[3] = 0;
      long long v74 = *(std::__shared_weak_count **)(v60 + 280);
      *(void *)(v60 + 272) = v73 + 3;
      *(void *)(v60 + 280) = v73;
      if (v74) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v74);
      }
      uint64_t v75 = *(void *)(a1 + 704);
      *(void *)&long long v91 = 0;
      long long v90 = 0uLL;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v90, *(long long **)(v75 + 32), *(long long **)(v75 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v75 + 40) - *(void *)(v75 + 32)) >> 3));
      uint64_t v60 = *(void *)(*a3 + 272);
      std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)v60);
      *(_OWORD *)uint64_t v60 = v90;
      *(void *)(v60 + 16) = v91;
      long long v90 = 0uLL;
      *(void *)&long long v91 = 0;
      long long v107 = (void **)&v90;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v107);
    }
    long long v76 = operator new(0x30uLL);
    v76[1] = 0;
    v76[2] = 0;
    *long long v76 = &unk_1F0A62C50;
    v76[4] = 0;
    v76[5] = 0;
    v76[3] = 0;
    uint64_t v77 = *a3;
    uint64_t v78 = *(std::__shared_weak_count **)(*a3 + 296);
    *(void *)(v77 + 288) = v76 + 3;
    *(void *)(v77 + 296) = v76;
    if (v78) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v78);
    }
    long long v79 = *(char **)(*a3 + 288);
    if (v79 != (char *)&__p) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v79, (char *)__p, (uint64_t)v85, (v85 - (unsigned char *)__p) >> 2);
    }
    if (*(char *)(a1 + 671) < 0)
    {
      if (*(void *)(a1 + 656)) {
        goto LABEL_98;
      }
    }
    else if (*(unsigned char *)(a1 + 671))
    {
LABEL_98:
      BOOL v80 = quasar::SystemCombinationDecoder::runSystemSelection(a1, (uint64_t *)&__p);
      char v81 = 1;
      goto LABEL_106;
    }
    if (quasar::gLogLevel >= 4)
    {
      long long v105 = 0u;
      long long v106 = 0u;
      long long v103 = 0u;
      long long v104 = 0u;
      long long v101 = 0u;
      long long v102 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v90 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v90);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v90, (uint64_t)"No selection model was provided, output of primary decoder chain was selected.", 78);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v90);
    }
    char v81 = 0;
    BOOL v80 = 0;
    uint64_t v60 = 0;
  }
  else
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v105 = 0u;
      long long v106 = 0u;
      long long v103 = 0u;
      long long v104 = 0u;
      long long v101 = 0u;
      long long v102 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v90 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v90);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v90, (uint64_t)"Feature extraction for system selection failed. Selecting the primary chain.", 76);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v90);
    }
    char v81 = 0;
    BOOL v80 = 0;
    uint64_t v60 = 2;
  }
LABEL_106:
  if (__p)
  {
    uint64_t v85 = __p;
    operator delete(__p);
  }
  *(void *)&long long v90 = &v87;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
  if (v81)
  {
    if (!v80)
    {
      if (quasar::gLogLevel < 4) {
        return 0;
      }
      long long v105 = 0u;
      long long v106 = 0u;
      long long v103 = 0u;
      long long v104 = 0u;
      long long v101 = 0u;
      long long v102 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v90 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v90);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v90, (uint64_t)"Output of the primary decoder chain was selected.", 49);
      goto LABEL_58;
    }
LABEL_35:
    uint64_t v36 = *(void *)(a1 + 608);
    if (quasar::gLogLevel >= 4)
    {
      long long v105 = 0u;
      long long v106 = 0u;
      long long v103 = 0u;
      long long v104 = 0u;
      long long v101 = 0u;
      long long v102 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v90 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v90);
      long long v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v90, (uint64_t)"Output of the secondary decoder chain ", 38);
      uint64_t v38 = *(void *)(a1 + 608);
      uint64_t v41 = *(void *)(v38 + 32);
      uint64_t v39 = v38 + 32;
      uint64_t v40 = v41;
      int v42 = *(char *)(v39 + 23);
      if (v42 >= 0) {
        uint64_t v43 = v39;
      }
      else {
        uint64_t v43 = v40;
      }
      if (v42 >= 0) {
        uint64_t v44 = *(unsigned __int8 *)(v39 + 23);
      }
      else {
        uint64_t v44 = *(void *)(v39 + 8);
      }
      long long v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v43, v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" was selected.", 14);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v90);
    }
    if (v10[1] != *v10 && v13[1] != *v13)
    {
      uint64_t v46 = *(void *)(a1 + 584);
      if ((quasar::SpeechRequestData::isUtteranceDetectionEnabled(*a4) & 1) == 0)
      {
        int v47 = *(_DWORD *)(*a3 + 576);
        int v48 = (*(uint64_t (**)(void))(**(void **)(*(void *)a2 + 16) + 24))(*(void *)(*(void *)a2 + 16));
        uint64_t v49 = *(void *)(v36 + 64);
        if (v48 * v47 != *(_DWORD *)(v46 + 56) * *(_DWORD *)(v49 + 576))
        {
          long long v105 = 0u;
          long long v106 = 0u;
          long long v103 = 0u;
          long long v104 = 0u;
          long long v101 = 0u;
          long long v102 = 0u;
          long long v99 = 0u;
          long long v100 = 0u;
          long long v97 = 0u;
          long long v98 = 0u;
          long long v95 = 0u;
          long long v96 = 0u;
          long long v93 = 0u;
          long long v94 = 0u;
          long long v91 = 0u;
          long long v92 = 0u;
          long long v90 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v90);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v90, (uint64_t)"primary (", 9);
          uint64_t v82 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)") != secondary (", 16);
          long long v83 = (void *)std::ostream::operator<<();
          std::operator<<[abi:ne180100]<std::char_traits<char>>(v83, ")");
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v90);
        }
        if (*(unsigned __int8 *)(*a3 + 580) != *(unsigned __int8 *)(v49 + 580))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v90);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(&v90, "decoderChainOutput->processedLastFrame == selectedDecoderChainOutput->processedLastFrame");
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v90);
        }
      }
    }
    quasar::SystemCombinationDecoder::alignResultChoices(a1, *(uint64_t **)(*a3 + 352), *(uint64_t **)(*(void *)(v36 + 64) + 352));
    uint64_t v50 = *(void *)(v36 + 64);
    uint64_t v51 = *a3;
    uint64_t v53 = *(void *)(v50 + 352);
    uint64_t v52 = *(void *)(v50 + 360);
    if (v52) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v52 + 8), 1uLL, memory_order_relaxed);
    }
    long long v54 = *(std::__shared_weak_count **)(v51 + 360);
    *(void *)(v51 + 352) = v53;
    *(void *)(v51 + 360) = v52;
    if (v54) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v54);
    }
    uint64_t v55 = *(void *)(v36 + 64);
    uint64_t v56 = *a3;
    uint64_t v58 = *(void *)(v55 + 392);
    uint64_t v57 = *(void *)(v55 + 400);
    if (v57) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v57 + 8), 1uLL, memory_order_relaxed);
    }
    long long v59 = *(std::__shared_weak_count **)(v56 + 400);
    *(void *)(v56 + 392) = v58;
    *(void *)(v56 + 400) = v57;
    if (v59) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v59);
    }
    return 0;
  }
  return v60;
}

void sub_1B2428038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void quasar::SystemCombinationDecoder::populateResultChoicesForAllChains(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  quasar::SystemCombinationDecoder::populateResultChoices(a1, a2, a3, a4);
  uint64_t v8 = *(void **)(a1 + 608);
  uint64_t v9 = (void *)(a1 + 616);
  if (v8 != v9)
  {
    do
    {
      quasar::SystemCombinationDecoder::populateResultChoices(v7, a2, v8 + 8, a4);
      uint64_t v10 = (void *)v8[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v8[2];
          BOOL v12 = *v11 == (void)v8;
          uint64_t v8 = v11;
        }
        while (!v12);
      }
      uint64_t v8 = v11;
    }
    while (v11 != v9);
  }
}

void quasar::SystemCombinationDecoder::alignResultChoices(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  if (*a2 != a2[1])
  {
    uint64_t v4 = *a3;
    uint64_t v5 = a3[1];
    if (*a3 != v5)
    {
      uint64_t v6 = 2 * (*(unsigned char *)(a1 + 712) == 0);
      do
      {
        quasar::Align::Align(v8, v3, v4, v6);
        DestToks = (uint64_t *)quasar::Align::getDestToks((quasar::Align *)v8);
        if ((uint64_t *)v4 != DestToks) {
          std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v4, *DestToks, DestToks[1], 0x6DB6DB6DB6DB6DB7 * ((DestToks[1] - *DestToks) >> 5));
        }
        quasar::Align::~Align(v8);
        v4 += 24;
      }
      while (v4 != v5);
    }
  }
}

void sub_1B2428190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t quasar::SystemCombinationDecoder::isResultChoiceUncombinable(uint64_t a1, uint64_t **a2)
{
  if (*(void *)(a1 + 672) != *(void *)(a1 + 680))
  {
    uint64_t v2 = *a2;
    uint64_t v3 = a2[1];
    if (*a2 != v3)
    {
      while (2)
      {
        uint64_t v5 = *(uint64_t **)(a1 + 672);
        uint64_t v6 = *(uint64_t **)(a1 + 680);
        while (v5 != v6)
        {
          if (quasar::endsWith(v2, v5)) {
            return 1;
          }
          v5 += 3;
        }
        v2 += 28;
        if (v2 != v3) {
          continue;
        }
        break;
      }
    }
  }
  return 0;
}

void quasar::SystemCombinationDecoder::printResultChoices(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)a2;
  if (*(void *)a2 != *(void *)(a2 + 8))
  {
    uint64_t v3 = a2;
    int v4 = 0;
    uint64_t v5 = v39;
    uint64_t v6 = MEMORY[0x1E4FBA418];
    uint64_t v7 = &v41;
    uint64_t v34 = *(void *)(MEMORY[0x1E4FBA418] + 24);
    uint64_t v35 = *MEMORY[0x1E4FBA418];
    do
    {
      if (v2[1] == *v2)
      {
        if (quasar::gLogLevel >= 5)
        {
          long long v57 = 0u;
          long long v58 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v42 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Result choice ", 14);
          BOOL v12 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" was empty", 10);
          ++v4;
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v42);
        }
      }
      else
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Result choice ", 14);
        uint64_t v8 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" (std::string::size_type size = ", 9);
        uint64_t v9 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"): ", 3);
        uint64_t v10 = *v2;
        if (v2[1] - *v2 == 224)
        {
          unint64_t v11 = 0;
        }
        else
        {
          int v33 = v4;
          uint64_t v13 = v5;
          uint64_t v14 = v3;
          uint64_t v15 = v7;
          uint64_t v16 = v6;
          uint64_t v17 = 0;
          unint64_t v18 = 0;
          do
          {
            uint64_t v19 = v10 + v17;
            int v20 = *(char *)(v19 + 23);
            if (v20 >= 0) {
              uint64_t v21 = v19;
            }
            else {
              uint64_t v21 = *(void *)v19;
            }
            if (v20 >= 0) {
              uint64_t v22 = *(unsigned __int8 *)(v19 + 23);
            }
            else {
              uint64_t v22 = *(void *)(v19 + 8);
            }
            uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, v21, v22);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" (", 2);
            long long v24 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"), ", 3);
            ++v18;
            uint64_t v10 = *v2;
            unint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((v2[1] - *v2) >> 5) - 1;
            v17 += 224;
          }
          while (v11 > v18);
          uint64_t v6 = v16;
          uint64_t v7 = v15;
          uint64_t v3 = v14;
          uint64_t v5 = v13;
          int v4 = v33;
        }
        uint64_t v25 = v10 + 224 * v11;
        int v26 = *(char *)(v25 + 23);
        if (v26 >= 0) {
          uint64_t v27 = v25;
        }
        else {
          uint64_t v27 = *(void *)v25;
        }
        if (v26 >= 0) {
          uint64_t v28 = *(unsigned __int8 *)(v25 + 23);
        }
        else {
          uint64_t v28 = *(void *)(v25 + 8);
        }
        uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, v27, v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" (", 2);
        uint64_t v30 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)")\n", 2);
        if (quasar::gLogLevel >= 5)
        {
          long long v57 = 0u;
          long long v58 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v42 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
          std::stringbuf::str();
          if ((v37 & 0x80u) == 0) {
            long long v31 = __p;
          }
          else {
            long long v31 = (void **)__p[0];
          }
          if ((v37 & 0x80u) == 0) {
            uint64_t v32 = v37;
          }
          else {
            uint64_t v32 = (uint64_t)__p[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)v31, v32);
          if ((char)v37 < 0) {
            operator delete(__p[0]);
          }
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v42);
        }
        uint64_t v38 = v35;
        *(void *)((char *)&v39[-1] + *(void *)(v35 - 24)) = v34;
        v39[0] = MEMORY[0x1E4FBA470] + 16;
        if (v40 < 0) {
          operator delete((void *)v39[8]);
        }
        ++v4;
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1B3EA8520](v7);
      }
      v2 += 3;
    }
    while (v2 != *(uint64_t **)(v3 + 8));
  }
}

void sub_1B2428628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a52);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

BOOL quasar::SystemCombinationDecoder::extractFeatures(uint64_t a1, uint64_t *a2, void *a3)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  uint64_t v5 = *(int *)(a1 + 636) + (uint64_t)*(int *)(a1 + 632);
  if (v4 == v5)
  {
    uint64_t v44 = *(int *)(a1 + 636) + (uint64_t)*(int *)(a1 + 632);
    unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
    std::vector<std::vector<float>>::vector(v48, v4);
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    if (v7 != *a2)
    {
      unint64_t v8 = 0;
      do
      {
        uint64_t v9 = *(void *)(v6 + 24 * v8);
        if (*(void *)(v6 + 24 * v8 + 8) != v9)
        {
          unint64_t v10 = 0;
          do
          {
            uint64_t v11 = v9 + 224 * v10;
            uint64_t v12 = *(void *)(v11 + 120);
            if (*(void *)(v11 + 128) == v12)
            {
              uint64_t v27 = *(void *)&v48[0] + 24 * v8;
              uint64_t v28 = (_DWORD *)(v9 + 224 * v10 + 40);
              uint64_t v30 = (_DWORD **)(v27 + 8);
              uint64_t v29 = *(_DWORD **)(v27 + 8);
              uint64_t v32 = (void *)(v27 + 16);
              unint64_t v31 = *(void *)(v27 + 16);
              if ((unint64_t)v29 >= v31)
              {
                uint64_t v34 = *(_DWORD **)v27;
                uint64_t v35 = ((uint64_t)v29 - *(void *)v27) >> 2;
                unint64_t v36 = v35 + 1;
                if ((unint64_t)(v35 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v37 = v31 - (void)v34;
                if (v37 >> 1 > v36) {
                  unint64_t v36 = v37 >> 1;
                }
                if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v38 = v36;
                }
                if (v38)
                {
                  uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v32, v38);
                  uint64_t v29 = *v30;
                  uint64_t v34 = *(_DWORD **)v27;
                }
                else
                {
                  uint64_t v39 = 0;
                }
                char v40 = &v39[4 * v35];
                *(_DWORD *)char v40 = *v28;
                int v33 = v40 + 4;
                while (v29 != v34)
                {
                  int v41 = *--v29;
                  *((_DWORD *)v40 - 1) = v41;
                  v40 -= 4;
                }
                *(void *)uint64_t v27 = v40;
                *uint64_t v30 = v33;
                void *v32 = &v39[4 * v38];
                if (v34) {
                  operator delete(v34);
                }
              }
              else
              {
                _DWORD *v29 = *v28;
                int v33 = v29 + 1;
              }
              *uint64_t v30 = v33;
              uint64_t v6 = *a2;
              uint64_t v9 = *(void *)(*a2 + 24 * v8);
            }
            else
            {
              do
              {
                uint64_t v13 = *(void *)&v48[0] + 24 * v8;
                uint64_t v15 = (_DWORD **)(v13 + 8);
                uint64_t v14 = *(_DWORD **)(v13 + 8);
                uint64_t v17 = (void *)(v13 + 16);
                unint64_t v16 = *(void *)(v13 + 16);
                if ((unint64_t)v14 >= v16)
                {
                  uint64_t v19 = *(_DWORD **)v13;
                  uint64_t v20 = ((uint64_t)v14 - *(void *)v13) >> 2;
                  unint64_t v21 = v20 + 1;
                  if ((unint64_t)(v20 + 1) >> 62) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v22 = v16 - (void)v19;
                  if (v22 >> 1 > v21) {
                    unint64_t v21 = v22 >> 1;
                  }
                  if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v23 = v21;
                  }
                  if (v23)
                  {
                    long long v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v17, v23);
                    uint64_t v14 = *v15;
                    uint64_t v19 = *(_DWORD **)v13;
                  }
                  else
                  {
                    long long v24 = 0;
                  }
                  uint64_t v25 = &v24[4 * v20];
                  *(_DWORD *)uint64_t v25 = *(_DWORD *)(v12 + 24);
                  unint64_t v18 = v25 + 4;
                  while (v14 != v19)
                  {
                    int v26 = *--v14;
                    *((_DWORD *)v25 - 1) = v26;
                    v25 -= 4;
                  }
                  *(void *)uint64_t v13 = v25;
                  uint64_t *v15 = v18;
                  *uint64_t v17 = &v24[4 * v23];
                  if (v19) {
                    operator delete(v19);
                  }
                }
                else
                {
                  *uint64_t v14 = *(_DWORD *)(v12 + 24);
                  unint64_t v18 = v14 + 1;
                }
                uint64_t *v15 = v18;
                v12 += 32;
                uint64_t v6 = *a2;
                uint64_t v9 = *(void *)(*a2 + 24 * v8);
              }
              while (v12 != *(void *)(v9 + 224 * v10 + 128));
            }
            ++v10;
          }
          while (0x6DB6DB6DB6DB6DB7 * ((*(void *)(v6 + 24 * v8 + 8) - v9) >> 5) > v10);
          uint64_t v7 = a2[1];
        }
        ++v8;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3) > v8);
    }
    kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(*(int **)(a1 + 704), (uint64_t *)v48, a3);
    long long v49 = (void **)v48;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v49);
    uint64_t v5 = v44;
    unint64_t v4 = v45;
  }
  else if (quasar::gLogLevel >= 1)
  {
    memset(v48, 0, sizeof(v48));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Received ", 9);
    long long v42 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"hypotheses for feature extraction, expected ", 44);
    std::ostream::operator<<();
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v48);
  }
  return v4 == v5;
}

void sub_1B2428A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v13 - 96) = &a13;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 96));
  _Unwind_Resume(a1);
}

BOOL quasar::SystemCombinationDecoder::runSystemSelection(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t)(a2[1] - *a2) >> 2;
  memset(v17, 0, sizeof(v17));
  kaldi::Vector<float>::Resize(v17, v4, 0);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = v6 - *a2;
  if (v6 != *a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = v7 >> 2;
    unint64_t v10 = v17[0];
    if (v9 <= 1) {
      unint64_t v9 = 1;
    }
    do
    {
      v10[v8] = *(_DWORD *)(v5 + 4 * v8);
      ++v8;
    }
    while (v9 != v8);
  }
  uint64_t v11 = *(float **)(a1 + 696);
  uint64_t v12 = *(void *)(a1 + 704);
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *(long long **)(v12 + 32), *(long long **)(v12 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v12 + 40) - *(void *)(v12 + 32)) >> 3));
  float Output = kaldi::quasar::LogisticRegressionModel::GetOutput(v11, (uint64_t)v17, (unsigned __int8 **)&v16);
  unint64_t v18 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  float v14 = *(float *)(a1 + 640);
  kaldi::Vector<float>::Destroy((uint64_t)v17);
  return Output > v14;
}

void sub_1B2428B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::SystemCombinationDecoder::populateResultChoices(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (*(void *)(*a3 + 352))
  {
    *(unsigned char *)(*a3 + 440) = 1;
  }
  else
  {
    quasar::Decoder::calculateNBest(a2, a3, *(_DWORD *)(*(void *)a4 + 16));
    uint64_t v5 = *a3;
    if (!*(void *)(v5 + 352))
    {
      uint64_t v6 = operator new(0x30uLL);
      v6[1] = 0;
      v6[2] = 0;
      v6[3] = 0;
      void *v6 = &unk_1F0A62A20;
      void v6[4] = 0;
      v6[5] = 0;
      uint64_t v7 = *(std::__shared_weak_count **)(v5 + 360);
      *(void *)(v5 + 352) = v6 + 3;
      *(void *)(v5 + 360) = v6;
      if (v7)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
  }
}

void quasar::SystemCombinationDecoder::RecogChain::~RecogChain(quasar::SystemCombinationDecoder::RecogChain *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v9 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (std::thread *)**a1;
  if (v2)
  {
    uint64_t v4 = (std::thread *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        std::thread::~thread(v4 - 1);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t std::default_delete<kaldi::quasar::SystemSelectionFeatureExtractor>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = (void **)(a2 + 32);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(a2 + 8);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    return MEMORY[0x1B3EA8670](a2, 0x1020C40681C42E3);
  }
  return result;
}

uint64_t kaldi::quasar::SystemSelectionFeatureExtractor::SystemSelectionFeatureExtractor(uint64_t a1, int a2, uint64_t a3, float a4)
{
  *(void *)&long long v19 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a1 = a2;
  uint64_t v7 = (void *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(&v11, "count");
  std::string::basic_string[abi:ne180100]<0>(v12, "mean");
  std::string::basic_string[abi:ne180100]<0>(v13, "std");
  std::string::basic_string[abi:ne180100]<0>(v14, "min");
  std::string::basic_string[abi:ne180100]<0>(v15, "max");
  std::string::basic_string[abi:ne180100]<0>(v16, "25pct");
  std::string::basic_string[abi:ne180100]<0>(v17, "50pct");
  std::string::basic_string[abi:ne180100]<0>(v18, "75pct");
  void *v7 = 0;
  v7[1] = 0;
  void v7[2] = 0;
  uint64_t v8 = (std::string *)operator new(0xC0uLL);
  *(void *)(a1 + 24) = v8 + 8;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v8;
  uint64_t v9 = 0;
  *(void *)(a1 + 16) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(a1 + 24, &v11, &v19, v8);
  do
  {
    if (SHIBYTE(v18[v9 + 2]) < 0) {
      operator delete((void *)v18[v9]);
    }
    v9 -= 3;
  }
  while (v9 != -24);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(float *)(a1 + 56) = a4;
  *(unsigned char *)(a1 + 60) = 1;
  kaldi::quasar::SystemSelectionFeatureExtractor::PopulateFeatureList(a1, a3);
  return a1;
}

void sub_1B2429048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::RunAsyncParams,std::allocator<quasar::RunAsyncParams>,quasar::RunAsyncParams&,void>@<X0>(const quasar::RunAsyncParams *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x338uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::RunAsyncParams>::__shared_ptr_emplace[abi:ne180100]<quasar::RunAsyncParams&,std::allocator<quasar::RunAsyncParams>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B2429128(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::RunAsyncParams>::__shared_ptr_emplace[abi:ne180100]<quasar::RunAsyncParams&,std::allocator<quasar::RunAsyncParams>,0>(void *a1, const quasar::RunAsyncParams *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5FE98;
  quasar::RunAsyncParams::RunAsyncParams((quasar::RunAsyncParams *)(a1 + 3), a2);
  return a1;
}

void sub_1B2429184(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

quasar::RunAsyncParams *quasar::RunAsyncParams::RunAsyncParams(quasar::RunAsyncParams *this, const quasar::RunAsyncParams *a2)
{
  *(void *)this = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  *((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *((void *)a2 + 2);
  *((void *)this + 2) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  long long v6 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 39) = *(_OWORD *)((char *)a2 + 39);
  *(_OWORD *)((char *)this + 24) = v6;
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((void *)a2 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 56);
    *((void *)this + 9) = *((void *)a2 + 9);
    *(_OWORD *)((char *)this + 56) = v7;
  }
  if (*((char *)a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 80), *((const std::string::value_type **)a2 + 10), *((void *)a2 + 11));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 5);
    *((void *)this + 12) = *((void *)a2 + 12);
    *((_OWORD *)this + 5) = v8;
  }
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 104), *((const std::string::value_type **)a2 + 13), *((void *)a2 + 14));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 104);
    *((void *)this + 15) = *((void *)a2 + 15);
    *(_OWORD *)((char *)this + 104) = v9;
  }
  if (*((char *)a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 128), *((const std::string::value_type **)a2 + 16), *((void *)a2 + 17));
  }
  else
  {
    long long v10 = *((_OWORD *)a2 + 8);
    *((void *)this + 18) = *((void *)a2 + 18);
    *((_OWORD *)this + 8) = v10;
  }
  if (*((char *)a2 + 175) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 152), *((const std::string::value_type **)a2 + 19), *((void *)a2 + 20));
  }
  else
  {
    long long v11 = *(_OWORD *)((char *)a2 + 152);
    *((void *)this + 21) = *((void *)a2 + 21);
    *(_OWORD *)((char *)this + 152) = v11;
  }
  if (*((char *)a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 176), *((const std::string::value_type **)a2 + 22), *((void *)a2 + 23));
  }
  else
  {
    long long v12 = *((_OWORD *)a2 + 11);
    *((void *)this + 24) = *((void *)a2 + 24);
    *((_OWORD *)this + 11) = v12;
  }
  if (*((char *)a2 + 223) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 200), *((const std::string::value_type **)a2 + 25), *((void *)a2 + 26));
  }
  else
  {
    long long v13 = *(_OWORD *)((char *)a2 + 200);
    *((void *)this + 27) = *((void *)a2 + 27);
    *(_OWORD *)((char *)this + 200) = v13;
  }
  if (*((char *)a2 + 247) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 224), *((const std::string::value_type **)a2 + 28), *((void *)a2 + 29));
  }
  else
  {
    long long v14 = *((_OWORD *)a2 + 14);
    *((void *)this + 30) = *((void *)a2 + 30);
    *((_OWORD *)this + 14) = v14;
  }
  uint64_t v15 = (std::string *)((char *)this + 248);
  if (*((char *)a2 + 271) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *((const std::string::value_type **)a2 + 31), *((void *)a2 + 32));
  }
  else
  {
    long long v16 = *(_OWORD *)((char *)a2 + 248);
    *((void *)this + 33) = *((void *)a2 + 33);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  }
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  std::vector<std::shared_ptr<kaldi::quasar::LmHandle>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*>((void *)this + 34, *((void **)a2 + 34), *((void **)a2 + 35), (uint64_t)(*((void *)a2 + 35) - *((void *)a2 + 34)) >> 4);
  *((void *)this + 37) = 0;
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  std::vector<std::shared_ptr<kaldi::quasar::LmHandle>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*>((void *)this + 37, *((void **)a2 + 37), *((void **)a2 + 38), (uint64_t)(*((void *)a2 + 38) - *((void *)a2 + 37)) >> 4);
  *((void *)this + 40) = *((void *)a2 + 40);
  uint64_t v17 = *((void *)a2 + 41);
  *((void *)this + 41) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  *((unsigned char *)this + 336) = *((unsigned char *)a2 + 336);
  std::set<std::string>::set[abi:ne180100]((uint64_t *)this + 43, (const void ***)a2 + 43);
  quasar::LeftContext::LeftContext((quasar::RunAsyncParams *)((char *)this + 368), (const quasar::RunAsyncParams *)((char *)a2 + 368));
  *((unsigned char *)this + 504) = *((unsigned char *)a2 + 504);
  if (*((char *)a2 + 535) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 512), *((const std::string::value_type **)a2 + 64), *((void *)a2 + 65));
  }
  else
  {
    long long v18 = *((_OWORD *)a2 + 32);
    *((void *)this + 66) = *((void *)a2 + 66);
    *((_OWORD *)this + 32) = v18;
  }
  quasar::RightContext::RightContext((quasar::RunAsyncParams *)((char *)this + 536), (const quasar::RunAsyncParams *)((char *)a2 + 536));
  *((_WORD *)this + 312) = *((_WORD *)a2 + 312);
  *((void *)this + 79) = *((void *)a2 + 79);
  uint64_t v19 = *((void *)a2 + 80);
  *((void *)this + 80) = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  if (*((char *)a2 + 671) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 27, *((const std::string::value_type **)a2 + 81), *((void *)a2 + 82));
  }
  else
  {
    long long v20 = *(_OWORD *)((char *)a2 + 648);
    *((void *)this + 83) = *((void *)a2 + 83);
    *(_OWORD *)((char *)this + 648) = v20;
  }
  if (*((char *)a2 + 695) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 28, *((const std::string::value_type **)a2 + 84), *((void *)a2 + 85));
  }
  else
  {
    long long v21 = *((_OWORD *)a2 + 42);
    *((void *)this + 86) = *((void *)a2 + 86);
    *((_OWORD *)this + 42) = v21;
  }
  if (*((char *)a2 + 719) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 29, *((const std::string::value_type **)a2 + 87), *((void *)a2 + 88));
  }
  else
  {
    long long v22 = *(_OWORD *)((char *)a2 + 696);
    *((void *)this + 89) = *((void *)a2 + 89);
    *(_OWORD *)((char *)this + 696) = v22;
  }
  *((void *)this + 90) = *((void *)a2 + 90);
  uint64_t v23 = *((void *)a2 + 91);
  *((void *)this + 91) = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)this + 184) = *((_DWORD *)a2 + 184);
  *((void *)this + 93) = 0;
  *((void *)this + 95) = 0;
  *((void *)this + 94) = 0;
  std::vector<quasar::LmeDataFactoryBase::LmeType>::__init_with_size[abi:ne180100]<quasar::LmeDataFactoryBase::LmeType*,quasar::LmeDataFactoryBase::LmeType*>((void *)this + 93, *((const void **)a2 + 93), *((void *)a2 + 94), (uint64_t)(*((void *)a2 + 94) - *((void *)a2 + 93)) >> 2);
  std::map<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>::map[abi:ne180100]((uint64_t *)this + 96, (uint64_t)a2 + 768);
  *((void *)this + 99) = *((void *)a2 + 99);
  return this;
}

void sub_1B24295F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20)
{
  if (*(char *)(v20 + 695) < 0) {
    operator delete(*v22);
  }
  if (*(char *)(v20 + 671) < 0) {
    operator delete(*v26);
  }
  uint64_t v28 = *(std::__shared_weak_count **)(v20 + 640);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  quasar::RightContext::~RightContext(v21);
  if (*(char *)(v20 + 535) < 0) {
    operator delete(*v25);
  }
  quasar::LeftContext::~LeftContext(v24);
  std::__tree<std::string>::destroy(v23, *(char **)(v20 + 352));
  uint64_t v29 = *(std::__shared_weak_count **)(v20 + 328);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  a20 = a11;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a20);
  a20 = a16;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (*(char *)(v20 + 271) < 0) {
    operator delete(*a9);
  }
  if (*(char *)(v20 + 247) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v20 + 223) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v20 + 199) < 0) {
    operator delete(*a13);
  }
  if (*(char *)(v20 + 175) < 0) {
    operator delete(*a14);
  }
  if (*(char *)(v20 + 151) < 0) {
    operator delete(*a15);
  }
  if (*(char *)(v20 + 127) < 0) {
    operator delete(*a17);
  }
  if (*(char *)(v20 + 103) < 0) {
    operator delete(*a18);
  }
  if (*(char *)(v20 + 79) < 0) {
    operator delete(*a19);
  }
  uint64_t v30 = *(atomic_ullong **)(v20 + 16);
  if (v30 && !atomic_fetch_add(v30 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
    (*(void (**)(atomic_ullong *))(*v30 + 16))(v30);
  }
  unint64_t v31 = *(std::__shared_weak_count **)(v20 + 8);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  _Unwind_Resume(a1);
}

void sub_1B2429828()
{
}

void sub_1B2429830()
{
}

void sub_1B2429838()
{
}

void sub_1B2429840()
{
}

void *std::allocate_shared[abi:ne180100]<quasar::SpeechRequestData,std::allocator<quasar::SpeechRequestData>,std::shared_ptr<quasar::RunAsyncParams> &,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::MultiAudioBuffer> &,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location,std::shared_ptr<kaldi::Timer> const,BOOL,BOOL,void>@<X0>(void *a1@<X1>, void *a2@<X2>, void *a3@<X3>, void **a4@<X4>, _OWORD *a5@<X5>, uint64_t *a6@<X6>, char *a7@<X7>, void *a8@<X8>, char *a9)
{
  uint64_t v17 = operator new(0xF8uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::SpeechRequestData>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::RunAsyncParams> &,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::MultiAudioBuffer> &,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location,std::shared_ptr<kaldi::Timer> const,BOOL,BOOL,std::allocator<quasar::SpeechRequestData>,0>(v17, a1, a2, a3, a4, a5, a6, a7, a9);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_1B24298E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::SpeechRequestData>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::RunAsyncParams> &,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::MultiAudioBuffer> &,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location,std::shared_ptr<kaldi::Timer> const,BOOL,BOOL,std::allocator<quasar::SpeechRequestData>,0>(void *a1, void *a2, void *a3, void *a4, void **a5, _OWORD *a6, uint64_t *a7, char *a8, char *a9)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A604F0;
  std::allocator<quasar::SpeechRequestData>::construct[abi:ne180100]<quasar::SpeechRequestData,std::shared_ptr<quasar::RunAsyncParams> &,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::MultiAudioBuffer> &,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location,std::shared_ptr<kaldi::Timer> const,BOOL,BOOL>((uint64_t)&v11, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9);
  return a1;
}

void sub_1B2429978(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::SpeechRequestData>::construct[abi:ne180100]<quasar::SpeechRequestData,std::shared_ptr<quasar::RunAsyncParams> &,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::MultiAudioBuffer> &,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location,std::shared_ptr<kaldi::Timer> const,BOOL,BOOL>(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void **a6, _OWORD *a7, uint64_t *a8, char *a9, char *a10)
{
  long long v10 = (std::__shared_weak_count *)a8[1];
  uint64_t v11 = *a8;
  long long v12 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::SpeechRequestData::SpeechRequestData(a2, a3, a4, a5, a6, a7, &v11, *a9, *a10, 4uLL);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_1B2429A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator_traits<std::allocator<std::thread>>::construct[abi:ne180100]<std::thread,quasar::SystemCombinationDecoder::runAsyncTasks(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::SpeechRecognizerConfig> const&,std::shared_ptr<quasar::SpeechRecognizerModelLoader> const&)::$_0,void>()
{
}

void sub_1B2429B4C(_Unwind_Exception *a1)
{
  uint64_t v5 = (std::__shared_weak_count *)v1[6];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::allocator_traits<std::allocator<std::thread>>::construct[abi:ne180100]<std::thread,quasar::SystemCombinationDecoder::runAsyncTasks(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::SpeechRecognizerConfig> const&,std::shared_ptr<quasar::SpeechRecognizerModelLoader> const&)::$_0,void>(v3, v2, v1);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,quasar::SystemCombinationDecoder::runAsyncTasks(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::SpeechRecognizerConfig> const&,std::shared_ptr<quasar::SpeechRecognizerModelLoader> const&)::$_0>>(uint64_t *a1)
{
  long long v7 = a1;
  uint64_t v1 = std::__thread_local_data();
  uint64_t v2 = (const void *)*v7;
  uint64_t *v7 = 0;
  pthread_setspecific(v1->__key_, v2);
  uint64_t v3 = v7[1];
  uint64_t v4 = (std::__shared_weak_count *)v7[6];
  v9[0] = v7[5];
  v9[1] = (unint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)v7[4];
  v8[0] = v7[3];
  v8[1] = (uint64_t)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::SystemCombinationDecoder::runSyncCheck(v3, v9, v8, (uint64_t)(v7 + 7), v7 + 11, v7 + 13);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,quasar::SystemCombinationDecoder::runAsyncTasks(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::SpeechRecognizerConfig> const&,std::shared_ptr<quasar::SpeechRecognizerModelLoader> const&)::$_0>>::~unique_ptr[abi:ne180100](&v7);
  return 0;
}

void sub_1B2429C70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,quasar::SystemCombinationDecoder::runAsyncTasks(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::SpeechRecognizerConfig> const&,std::shared_ptr<quasar::SpeechRecognizerModelLoader> const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,quasar::SystemCombinationDecoder::runAsyncTasks(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> const&,std::shared_ptr<quasar::SpeechRecognizerConfig> const&,std::shared_ptr<quasar::SpeechRecognizerModelLoader> const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[14];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)v2[12];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v2 + 7);
    uint64_t v5 = (std::__shared_weak_count *)v2[6];
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    long long v6 = (std::__shared_weak_count *)v2[4];
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    long long v7 = (std::__shared_weak_count *)v2[2];
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v2, 0);
    MEMORY[0x1B3EA8670](v2, 0x1020C403B413AE3);
  }
  return a1;
}

uint64_t std::__split_buffer<std::thread>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::thread::~thread((std::thread *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::string const&,int &>(uint64_t **a1, const void **a2, uint64_t a3, _DWORD *a4)
{
  long long v7 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  uint64_t result = *v7;
  if (!*v7)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::string const&,int &>((uint64_t)a1, a3, a4, (uint64_t)&v9);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v7, v9);
    return v9;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::string const&,int &>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  long long v8 = (char *)operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  long long v9 = (std::string *)(v8 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v8 + 6) = *(void *)(a2 + 16);
  }
  *((_DWORD *)v8 + 14) = *a3;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1B2429EA4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>>>::__emplace_unique_key_args<std::string,std::string const&,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>&>(uint64_t **a1, const void **a2, long long *a3, uint64_t a4)
{
  uint64_t v7 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  long long v8 = *v7;
  if (!*v7)
  {
    long long v9 = v7;
    std::__tree<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>>>::__construct_node<std::string const&,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>&>((uint64_t)a1, a3, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v12, v9, v11[0]);
    long long v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

std::string *std::__tree<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>>>::__construct_node<std::string const&,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  long long v8 = (char *)operator new(0x50uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>::pair[abi:ne180100]<std::string const&,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>&,0>((std::string *)(v8 + 32), a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B2429FC0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>::pair[abi:ne180100]<std::string const&,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>&,0>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *(_DWORD *)a3;
  std::string::size_type v6 = *(void *)(a3 + 16);
  this[1].__r_.__value_.__l.__size_ = *(void *)(a3 + 8);
  this[1].__r_.__value_.__r.__words[2] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<quasar::RecogResultStreamBase::RecogStatus,std::shared_ptr<quasar::DecoderChainOutput>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void *std::allocate_shared[abi:ne180100]<quasar::DecoderChainOutput,std::allocator<quasar::DecoderChainOutput>,std::shared_ptr<quasar::SymbolTableList> &,std::shared_ptr<quasar::SpeechRequestResultData>,void>@<X0>(uint64_t *a1@<X1>, long long *a2@<X2>, void *a3@<X8>)
{
  std::string::size_type v6 = operator new(0x4A8uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::DecoderChainOutput>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SymbolTableList> &,std::shared_ptr<quasar::SpeechRequestResultData>,std::allocator<quasar::DecoderChainOutput>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B242A0F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::DecoderChainOutput>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SymbolTableList> &,std::shared_ptr<quasar::SpeechRequestResultData>,std::allocator<quasar::DecoderChainOutput>,0>(void *a1, uint64_t *a2, long long *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60598;
  std::allocator<quasar::DecoderChainOutput>::construct[abi:ne180100]<quasar::DecoderChainOutput,std::shared_ptr<quasar::SymbolTableList> &,std::shared_ptr<quasar::SpeechRequestResultData>>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1B242A168(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::DecoderChainOutput>::construct[abi:ne180100]<quasar::DecoderChainOutput,std::shared_ptr<quasar::SymbolTableList> &,std::shared_ptr<quasar::SpeechRequestResultData>>(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4)
{
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v6 = *a3;
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v5 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  quasar::DecoderChainOutput::DecoderChainOutput(a2, &v6, &v5);
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1B242A1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<std::vector<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62C50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62C50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<std::vector<float>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

double TextStats::increment(uint64_t a1, uint64_t a2)
{
  float64x2_t v2 = *(float64x2_t *)a1;
  *(float64x2_t *)(a1 + 16) = vaddq_f64(*(float64x2_t *)(a2 + 16), *(float64x2_t *)(a1 + 16));
  *(double *)(a1 + 32) = *(double *)(a2 + 32) + *(double *)(a1 + 32);
  *(float64x2_t *)a1 = vaddq_f64(*(float64x2_t *)a2, v2);
  *(float64x2_t *)(a1 + 40) = vaddq_f64(*(float64x2_t *)(a2 + 40), *(float64x2_t *)(a1 + 40));
  *(float64x2_t *)(a1 + 56) = vaddq_f64(*(float64x2_t *)(a2 + 56), *(float64x2_t *)(a1 + 56));
  *(float64x2_t *)(a1 + 72) = vaddq_f64(*(float64x2_t *)(a2 + 72), *(float64x2_t *)(a1 + 72));
  *(float64x2_t *)(a1 + 88) = vaddq_f64(*(float64x2_t *)(a2 + 88), *(float64x2_t *)(a1 + 88));
  double result = *(double *)(a2 + 104) + *(double *)(a1 + 104);
  *(double *)(a1 + 104) = result;
  return result;
}

void *operator<<(void *a1, double *a2)
{
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" sentences, ", 12);
  long long v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" words, ", 8);
  uint64_t v6 = (void *)std::ostream::operator<<();
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" OOVs", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
  long long v8 = std::locale::use_facet(&v19, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v19);
  std::ostream::put();
  std::ostream::flush();
  if (a2[3] + a2[2] > 0.0)
  {
    long long v9 = (void *)std::ostream::operator<<();
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" zeroprobs, ", 12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"logprob= ", 9);
    std::ostream::operator<<();
    double v11 = a2[3] - a2[4] - a2[1] + a2[2];
    if (v11 <= 0.0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ppl= undefined", 15);
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ppl= ", 6);
      exp(*a2 / v11 * -2.30258509);
      std::ostream::operator<<();
    }
    double v12 = v11 - a2[2];
    if (v12 <= 0.0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ppl1= undefined", 16);
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ppl1= ", 7);
      exp(*a2 / v12 * -2.30258509);
      std::ostream::operator<<();
    }
    if (a2[11] > 0.0)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      long long v13 = std::locale::use_facet(&v19, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale(&v19);
      std::ostream::put();
      std::ostream::flush();
      long long v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" words,", 7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" rank1= ", 8);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" rank5= ", 8);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" rank10= ", 9);
      std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v15 = std::locale::use_facet(&v19, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
      std::locale::~locale(&v19);
      std::ostream::put();
      std::ostream::flush();
      long long v16 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" words+sents,", 13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" rank1wSent= ", 13);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" rank5wSent= ", 13);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" rank10wSent= ", 14);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" qloss= ", 8);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" absloss= ", 10);
      std::ostream::operator<<();
    }
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    uint64_t v17 = std::locale::use_facet(&v19, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v19);
    std::ostream::put();
    std::ostream::flush();
  }
  return a1;
}

void sub_1B242A83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void *LHash<unsigned int,Trie<unsigned int,ZeroArray<double>>>::alloc(void *a1, unsigned int a2)
{
  char v3 = -1;
  do
    uint64_t v4 = (1 << ++v3);
  while (v4 < a2);
  double result = BM_malloc(40 * (v4 - 1) + 48);
  uint64_t v6 = 0;
  *a1 = result;
  *(_DWORD *)double result = *(_DWORD *)result & 0xFFFFFFE0 | v3 & 0x1F;
  *(_DWORD *)*a1 &= 0x1Fu;
  do
  {
    uint64_t v7 = *a1 + v6;
    *(_DWORD *)(v7 + 40) = -1;
    *(_OWORD *)(v7 + 8) = 0uLL;
    *(_OWORD *)(v7 + 24) = 0uLL;
    v6 += 40;
    --v4;
  }
  while (v4);
  return result;
}

void LHash<unsigned int,Trie<unsigned int,ZeroArray<double>>>::clear(void *a1, unsigned int a2)
{
  uint64_t v4 = (void *)*a1;
  if (v4)
  {
    BM_free(v4, 40 * ~(-1 << *(_DWORD *)v4) + 48);
    *a1 = 0;
  }
  if (a2)
  {
    if (a2 >= 8) {
      a2 = (float)((float)(a2 + 1) / 0.8);
    }
    LHash<unsigned int,Trie<unsigned int,ZeroArray<double>>>::alloc(a1, a2);
  }
}

void *LHash<unsigned int,Trie<unsigned int,ZeroArray<double>>>::~LHash(void *a1)
{
  return a1;
}

uint64_t LHash<unsigned int,Trie<unsigned int,ZeroArray<double>>>::locate(_DWORD **a1, unsigned int a2, _DWORD *a3)
{
  char v3 = *a1;
  if (!*a1) {
    return 0;
  }
  uint64_t v4 = v3 + 2;
  unint64_t v5 = *v3;
  char v6 = v5 & 0x1F;
  if ((*v3 & 0x1Fu) > 2)
  {
    uint64_t v9 = -1 << v6;
    unint64_t v7 = ((1103515245 * (unint64_t)a2 + 12345) >> (30 - v6)) & ~(-1 << v6);
    int v10 = v4[10 * v7 + 8];
    if (v10 == -1)
    {
LABEL_10:
      uint64_t result = 0;
    }
    else
    {
      int v11 = ~v9;
      while (v10 != a2)
      {
        LODWORD(v7) = (v7 + 1) & v11;
        int v10 = v4[10 * v7 + 8];
        if (v10 == -1) {
          goto LABEL_10;
        }
      }
      uint64_t result = 1;
    }
  }
  else if (v5 >= 0x20)
  {
    uint64_t v12 = 0;
    unint64_t v7 = v5 >> 5;
    long long v13 = v3 + 10;
    while (1)
    {
      int v14 = *v13;
      v13 += 10;
      if (v14 == a2) {
        break;
      }
      if (v7 == ++v12) {
        goto LABEL_14;
      }
    }
    uint64_t result = 1;
    LODWORD(v7) = v12;
  }
  else
  {
    LODWORD(v7) = 0;
LABEL_14:
    uint64_t result = 0;
  }
  *a3 = v7;
  return result;
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>>::LHashIter(uint64_t result, _DWORD **a2, uint64_t a3)
{
  char v3 = *a2;
  *(void *)uint64_t result = *a2;
  *(_DWORD *)(result + 8) = 0;
  if (v3)
  {
    *(_DWORD *)(result + 12) = *v3 >> 5;
    *(void *)(result + 16) = a3;
    *(void *)(result + 24) = 0;
    LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>>::sortKeys();
  }
  *(_DWORD *)(result + 12) = 0;
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = 0;
  return result;
}

void LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>>::sortKeys()
{
}

void sub_1B242AC54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    MEMORY[0x1B3EA8630](a12, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>>::next(uint64_t a1, _DWORD *a2)
{
  float64x2_t v2 = *(_DWORD **)a1;
  if (!*(void *)a1) {
    return 0;
  }
  unsigned int v10 = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 == *(_DWORD *)(a1 + 12)) {
    return 0;
  }
  uint64_t v9 = v2;
  uint64_t v7 = *(void *)(a1 + 24);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  LHash<unsigned int,Trie<unsigned int,ZeroArray<double>>>::locate(&v9, *(_DWORD *)(v7 + 4 * v4), &v10);
  uint64_t v8 = *(void *)a1 + 40 * v10;
  uint64_t result = v8 + 8;
  *a2 = *(_DWORD *)(v8 + 40);
  return result;
}

void sub_1B242AD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Trie<unsigned int,ZeroArray<double>>::~Trie(uint64_t a1)
{
  LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>>::LHashIter((uint64_t)v5, (_DWORD **)a1, 0);
  int v4 = 0;
  while (LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>>::next((uint64_t)v5, &v4))
    Trie<unsigned int,ZeroArray<double>>::~Trie();
  if (v6) {
    MEMORY[0x1B3EA8630](v6, 0x1000C8052888210);
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    MEMORY[0x1B3EA8630](v2, 0x1000C8000313F17);
  }
  LHash<unsigned int,Trie<unsigned int,ZeroArray<double>>>::clear((void *)a1, 0);
  return a1;
}

void *Trie<unsigned int,ZeroArray<double>>::findPrefixTrie(_DWORD **a1, unsigned int *a2, _DWORD *a3)
{
  PrefixTrie = a1;
  if (a2
    && (unsigned int v6 = *a2, v6 != -1)
    && (unsigned int v10 = 0, LHash<unsigned int,Trie<unsigned int,ZeroArray<double>>>::locate(a1, v6, &v10)))
  {
    uint64_t v7 = *PrefixTrie + 40 * v10 + 8;
    int v9 = 0;
    PrefixTrie = (void *)Trie<unsigned int,ZeroArray<double>>::findPrefixTrie(v7, a2 + 1, &v9);
    *a3 = v9 + 1;
  }
  else
  {
    *a3 = 0;
  }
  return PrefixTrie;
}

void NgramProbArrayTrie::clear(NgramProbArrayTrie *this)
{
  LHash<unsigned int,Trie<unsigned int,ZeroArray<double>>>::clear((void *)this + 3, 0);
  if (*((_DWORD *)this + 5))
  {
    unint64_t v2 = 0;
    do
      *(void *)ZeroArray<double>::operator[]((int *)this + 8, v2++) = 0;
    while (v2 < *((unsigned int *)this + 5));
  }
}

void NgramProbArrayTrie::NgramProbArrayTrie(NgramProbArrayTrie *this, Vocab *a2, int a3, int a4)
{
  *(void *)this = &unk_1F0A340D0;
  *((void *)this + 1) = a2;
  *((_DWORD *)this + 4) = a3;
  *((_DWORD *)this + 5) = a4;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (!a4) {
    *((_DWORD *)this + 5) = 1;
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int v10 = (unsigned int *)result;
LABEL_2:
  int v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unsigned int v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 40 * *(a2 - 1) + 32), *(unsigned int *)(*(void *)a3 + 8 + 40 * *v11 + 32));
          if ((result & 0x80000000) != 0)
          {
            unsigned int v22 = *v11;
            unsigned int *v11 = *(a2 - 1);
            *(a2 - 1) = v22;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(v11, v11 + 1, a2 - 1, a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(v11, v11 + 1, v11 + 2, a2 - 1, a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *,unsigned int *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(v11, &v11[v15 >> 1], a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(v11 + 1, v17 - 1, a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(v11 + 2, &v11[v16 + 1], a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(v17 - 1, v17, &v11[v16 + 1], a3);
      unsigned int v18 = *v11;
      unsigned int *v11 = *v17;
      *uint64_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(&v11[v15 >> 1], v11, a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 40 * *(v11 - 1) + 32), *(unsigned int *)(*(void *)a3 + 8 + 40 * *v11 + 32)) & 0x80000000) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &>(v11, a2, a3);
      int v11 = (unsigned int *)result;
      goto LABEL_19;
    }
LABEL_14:
    std::locale v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &>(v11, a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(v11, v19, a3);
    int v11 = v19 + 1;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(v19 + 1, a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *,false>(v10, v19, a3, -v13, a5 & 1);
      int v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>((uint64_t)v11, a2, a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>((uint64_t)v11, a2, a3);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  if ((unsigned int *)result != a2)
  {
    int v4 = (unsigned int *)result;
    char v5 = (unsigned int *)(result + 4);
    if ((unsigned int *)(result + 4) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (unsigned int *)result;
      do
      {
        unsigned int v10 = *v8;
        unsigned int v9 = v8[1];
        uint64_t v8 = v5;
        uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 40 * v9 + 32), *(unsigned int *)(*(void *)a3 + 8 + 40 * v10 + 32));
        if ((result & 0x80000000) != 0)
        {
          unsigned int v11 = *v8;
          uint64_t v12 = v7;
          while (1)
          {
            *(unsigned int *)((char *)v4 + v12 + 4) = *(unsigned int *)((char *)v4 + v12);
            if (!v12) {
              break;
            }
            uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 40 * v11 + 32), *(unsigned int *)(*(void *)a3 + 8 + 40 * *(unsigned int *)((char *)v4 + v12 - 4) + 32));
            v12 -= 4;
            if ((result & 0x80000000) == 0)
            {
              uint64_t v13 = (unsigned int *)((char *)v4 + v12 + 4);
              goto LABEL_10;
            }
          }
          uint64_t v13 = v4;
LABEL_10:
          *uint64_t v13 = v11;
        }
        char v5 = v8 + 1;
        v7 += 4;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  if ((unsigned int *)result != a2)
  {
    int v4 = (unsigned int *)result;
    for (uint64_t i = (unsigned int *)(result + 4); v4 + 1 != a2; uint64_t i = v4 + 1)
    {
      unsigned int v8 = *v4;
      unsigned int v7 = v4[1];
      int v4 = i;
      uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 40 * v7 + 32), *(unsigned int *)(*(void *)a3 + 8 + 40 * v8 + 32));
      if ((result & 0x80000000) != 0)
      {
        unsigned int v9 = *v4;
        unsigned int v10 = v4;
        do
        {
          unsigned int v11 = v10;
          unsigned int v12 = *--v10;
          unsigned int *v11 = v12;
          uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 40 * v9 + 32), *(unsigned int *)(*(void *)a3 + 8 + 40 * *(v11 - 2) + 32));
        }
        while ((result & 0x80000000) != 0);
        *unsigned int v10 = v9;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  int v8 = (*(uint64_t (**)(void, void))(a4 + 16))(*(unsigned int *)(*(void *)a4 + 8 + 40 * *a2 + 32), *(unsigned int *)(*(void *)a4 + 8 + 40 * *a1 + 32));
  int v9 = (*(uint64_t (**)(void, void))(a4 + 16))(*(unsigned int *)(*(void *)a4 + 8 + 40 * *a3 + 32), *(unsigned int *)(*(void *)a4 + 8 + 40 * *a2 + 32));
  if (v8 < 0)
  {
    unsigned int v11 = *a1;
    if (v9 < 0)
    {
      *a1 = *a3;
      *a3 = v11;
    }
    else
    {
      *a1 = *a2;
      *a2 = v11;
      if (((*(uint64_t (**)(void, void))(a4 + 16))(*(unsigned int *)(*(void *)a4 + 8 + 40 * *a3 + 32), *(unsigned int *)(*(void *)a4 + 8 + 40 * v11 + 32)) & 0x80000000) != 0)
      {
        unsigned int v12 = *a2;
        *a2 = *a3;
        *a3 = v12;
        return 2;
      }
    }
  }
  else
  {
    if ((v9 & 0x80000000) == 0) {
      return 0;
    }
    unsigned int v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    if (((*(uint64_t (**)(void, void))(a4 + 16))(*(unsigned int *)(*(void *)a4 + 8 + 40 * *a2 + 32), *(unsigned int *)(*(void *)a4 + 8 + 40 * *a1 + 32)) & 0x80000000) != 0)
    {
      unsigned int v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
      return 2;
    }
  }
  return 1;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  int v4 = a2;
  unsigned int v6 = *a1;
  if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 40 * *a1 + 32), *(unsigned int *)(*(void *)a3 + 8 + 40 * *(a2 - 1) + 32)) & 0x80000000) != 0)
  {
    int v8 = a1;
    do
    {
      unsigned int v9 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 40 * v6 + 32), *(unsigned int *)(*(void *)a3 + 8 + 40 * v9 + 32)) & 0x80000000) == 0);
  }
  else
  {
    unsigned int v7 = a1 + 1;
    do
    {
      int v8 = v7;
      if (v7 >= v4) {
        break;
      }
      ++v7;
    }
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 40 * v6 + 32), *(unsigned int *)(*(void *)a3 + 8 + 40 * *v8 + 32)) & 0x80000000) == 0);
  }
  if (v8 < v4)
  {
    do
      unsigned int v10 = *--v4;
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 40 * v6 + 32), *(unsigned int *)(*(void *)a3 + 8 + 40 * v10 + 32)) & 0x80000000) != 0);
  }
  while (v8 < v4)
  {
    unsigned int v11 = *v8;
    *int v8 = *v4;
    unsigned int *v4 = v11;
    do
    {
      unsigned int v12 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 40 * v6 + 32), *(unsigned int *)(*(void *)a3 + 8 + 40 * v12 + 32)) & 0x80000000) == 0);
    do
      unsigned int v13 = *--v4;
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 40 * v6 + 32), *(unsigned int *)(*(void *)a3 + 8 + 40 * v13 + 32)) & 0x80000000) != 0);
  }
  if (v8 - 1 != a1) {
    *a1 = *(v8 - 1);
  }
  *(v8 - 1) = v6;
  return v8;
}

unsigned int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  unsigned int v7 = *a1;
  do
    int v8 = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 40 * a1[++v6] + 32), *(unsigned int *)(*(void *)a3 + 8 + 40 * v7 + 32));
  while (v8 < 0);
  unsigned int v9 = &a1[v6];
  unsigned int v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      unsigned int v12 = *--a2;
    }
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 40 * v12 + 32), *(unsigned int *)(*(void *)a3 + 8 + 40 * v7 + 32)) & 0x80000000) == 0);
  }
  else
  {
    do
      unsigned int v11 = *--a2;
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 40 * v11 + 32), *(unsigned int *)(*(void *)a3 + 8 + 40 * v7 + 32)) & 0x80000000) == 0);
  }
  if (v9 < a2)
  {
    unsigned int v13 = (int *)&a1[v6];
    unsigned int v14 = (int *)a2;
    do
    {
      int v15 = *v13;
      *unsigned int v13 = *v14;
      *unsigned int v14 = v15;
      do
      {
        unsigned int v16 = v13[1];
        ++v13;
      }
      while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 40 * v16 + 32), *(unsigned int *)(*(void *)a3 + 8 + 40 * v7 + 32)) & 0x80000000) != 0);
      do
        unsigned int v17 = *--v14;
      while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 40 * v17 + 32), *(unsigned int *)(*(void *)a3 + 8 + 40 * v7 + 32)) & 0x80000000) == 0);
    }
    while (v13 < v14);
    unsigned int v10 = (unsigned int *)(v13 - 1);
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  *unsigned int v10 = v7;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 40 * *(a2 - 1) + 32), *(unsigned int *)(*(void *)a3 + 8 + 40 * *a1 + 32)) & 0x80000000) != 0)
      {
        unsigned int v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unsigned int v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      unsigned int v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 40 * *v10 + 32), *(unsigned int *)(*(void *)a3 + 8 + 40 * *v9 + 32)) & 0x80000000) != 0)
    {
      unsigned int v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v14 + 12) = *(unsigned int *)((char *)a1 + v14 + 8);
        if (v14 == -8) {
          break;
        }
        int v15 = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 40 * v13 + 32), *(unsigned int *)(*(void *)a3 + 8 + 40 * *(unsigned int *)((char *)a1 + v14 + 4) + 32));
        v14 -= 4;
        if ((v15 & 0x80000000) == 0)
        {
          unsigned int v16 = (unsigned int *)((char *)a1 + v14 + 12);
          goto LABEL_12;
        }
      }
      unsigned int v16 = a1;
LABEL_12:
      *unsigned int v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    unsigned int v9 = v10;
    v11 += 4;
    if (++v10 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(a1, a2, a3, a5);
  uint64_t result = (*(uint64_t (**)(void, void))(a5 + 16))(*(unsigned int *)(*(void *)a5 + 8 + 40 * *a4 + 32), *(unsigned int *)(*(void *)a5 + 8 + 40 * *a3 + 32));
  if ((result & 0x80000000) != 0)
  {
    unsigned int v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = (*(uint64_t (**)(void, void))(a5 + 16))(*(unsigned int *)(*(void *)a5 + 8 + 40 * *a3 + 32), *(unsigned int *)(*(void *)a5 + 8 + 40 * *a2 + 32));
    if ((result & 0x80000000) != 0)
    {
      unsigned int v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = (*(uint64_t (**)(void, void))(a5 + 16))(*(unsigned int *)(*(void *)a5 + 8 + 40 * *a2 + 32), *(unsigned int *)(*(void *)a5 + 8 + 40 * *a1 + 32));
      if ((result & 0x80000000) != 0)
      {
        unsigned int v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(a1, a2, a3, a4, a6);
  uint64_t result = (*(uint64_t (**)(void, void))(a6 + 16))(*(unsigned int *)(*(void *)a6 + 8 + 40 * *a5 + 32), *(unsigned int *)(*(void *)a6 + 8 + 40 * *a4 + 32));
  if ((result & 0x80000000) != 0)
  {
    unsigned int v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = (*(uint64_t (**)(void, void))(a6 + 16))(*(unsigned int *)(*(void *)a6 + 8 + 40 * *a4 + 32), *(unsigned int *)(*(void *)a6 + 8 + 40 * *a3 + 32));
    if ((result & 0x80000000) != 0)
    {
      unsigned int v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = (*(uint64_t (**)(void, void))(a6 + 16))(*(unsigned int *)(*(void *)a6 + 8 + 40 * *a3 + 32), *(unsigned int *)(*(void *)a6 + 8 + 40 * *a2 + 32));
      if ((result & 0x80000000) != 0)
      {
        unsigned int v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = (*(uint64_t (**)(void, void))(a6 + 16))(*(unsigned int *)(*(void *)a6 + 8 + 40 * *a2 + 32), *(unsigned int *)(*(void *)a6 + 8 + 40 * *a1 + 32));
        if ((result & 0x80000000) != 0)
        {
          unsigned int v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unsigned int v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    unsigned int v13 = a2;
    if (a2 != a3)
    {
      unsigned int v14 = a2;
      do
      {
        if (((*(uint64_t (**)(void, void))(a4 + 16))(*(unsigned int *)(*(void *)a4 + 8 + 40 * *v14 + 32), *(unsigned int *)(*(void *)a4 + 8 + 40 * *a1 + 32)) & 0x80000000) != 0)
        {
          unsigned int v15 = *v14;
          *unsigned int v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      unsigned int v13 = a3;
    }
    if (v8 >= 5)
    {
      uint64_t v16 = (unint64_t)v8 >> 2;
      unsigned int v17 = a2 - 1;
      do
      {
        unsigned int v18 = *a1;
        std::locale v19 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(a1, a4, v16);
        if (v17 == v19)
        {
          *std::locale v19 = v18;
        }
        else
        {
          *std::locale v19 = *v17;
          *unsigned int v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>((uint64_t)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v6 = result;
    int64_t v16 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v9 = ((uint64_t)a4 - result) >> 1;
      uint64_t v10 = v9 + 1;
      unint64_t v11 = (unsigned int *)(result + 4 * (v9 + 1));
      uint64_t v12 = v9 + 2;
      if (v9 + 2 < a3
        && (*(int (**)(void, void))(a2 + 16))(*(unsigned int *)(*(void *)a2 + 8 + 40 * *v11 + 32), *(unsigned int *)(*(void *)a2 + 8 + 40 * v11[1] + 32)) < 0)
      {
        ++v11;
        uint64_t v10 = v12;
      }
      uint64_t result = (*(uint64_t (**)(void, void))(a2 + 16))(*(unsigned int *)(*(void *)a2 + 8 + 40 * *v11 + 32), *(unsigned int *)(*(void *)a2 + 8 + 40 * *v5 + 32));
      if ((result & 0x80000000) == 0)
      {
        unsigned int v13 = *v5;
        do
        {
          unsigned int v14 = v11;
          *char v5 = *v11;
          if (v16 < v10) {
            break;
          }
          uint64_t v15 = (2 * v10) | 1;
          unint64_t v11 = (unsigned int *)(v6 + 4 * v15);
          if (2 * v10 + 2 < a3
            && (*(int (**)(void, void))(a2 + 16))(*(unsigned int *)(*(void *)a2 + 8 + 40 * *v11 + 32), *(unsigned int *)(*(void *)a2 + 8 + 40 * v11[1] + 32)) < 0)
          {
            ++v11;
            uint64_t v15 = 2 * v10 + 2;
          }
          uint64_t result = (*(uint64_t (**)(void, void))(a2 + 16))(*(unsigned int *)(*(void *)a2 + 8 + 40 * *v11 + 32), *(unsigned int *)(*(void *)a2 + 8 + 40 * v13 + 32));
          char v5 = v14;
          uint64_t v10 = v15;
        }
        while ((result & 0x80000000) == 0);
        *unsigned int v14 = v13;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3
      && (*(int (**)(void, void))(a2 + 16))(*(unsigned int *)(*(void *)a2 + 8 + 40 * *v9 + 32), *(unsigned int *)(*(void *)a2 + 8 + 40 * a1[v6 + 2] + 32)) < 0)
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,ZeroArray<double>>> &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (unsigned int *)(result + 4 * (v4 >> 1));
    uint64_t v9 = (unsigned int *)(a2 - 4);
    uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 40 * *v8 + 32), *(unsigned int *)(*(void *)a3 + 8 + 40 * *(unsigned int *)(a2 - 4) + 32));
    if ((result & 0x80000000) != 0)
    {
      unsigned int v10 = *v9;
      do
      {
        uint64_t v11 = v8;
        *uint64_t v9 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (unsigned int *)(v6 + 4 * v7);
        uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 40 * *v8 + 32), *(unsigned int *)(*(void *)a3 + 8 + 40 * v10 + 32));
        uint64_t v9 = v11;
      }
      while ((result & 0x80000000) != 0);
      unsigned int *v11 = v10;
    }
  }
  return result;
}

uint64_t ZeroArray<double>::operator[](int *a1, uint64_t a2)
{
  unint64_t v2 = a2 - *a1;
  if (v2 >= a1[1])
  {
    a1[1] = v2 + 1;
    if (v2 >= a1[4]) {
      Array<double>::alloc();
    }
  }
  return *((void *)a1 + 1) + 8 * v2;
}

BOOL kaldi::ReadScriptFile(uint64_t a1, int a2, std::vector<std::pair<std::string, std::string>> *a3)
{
  char v27 = 0;
  uint64_t v26 = 0;
  if (kaldi::Input::OpenInternal(&v26, a1, 1, &v27))
  {
    if (v27)
    {
      BOOL v6 = 0;
      if (a2 && kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
        unint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Error: script file appears to be binary: ", 41);
        if (*(char *)(a1 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
        }
        else {
          std::string v22 = *(std::string *)a1;
        }
        kaldi::PrintableRxfilename((uint64_t)&v22, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v22.__r_.__value_.__l.__data_);
        }
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
LABEL_54:
        BOOL v6 = 0;
      }
    }
    else
    {
      uint64_t v9 = (void *)kaldi::Input::Stream((kaldi::Input *)&v26);
      BOOL ScriptFile = kaldi::ReadScriptFile(v9, a2, a3);
      BOOL v6 = ScriptFile;
      if (a2)
      {
        if (kaldi::g_kaldi_verbose_level >= -1 && !ScriptFile)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
          uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"[script file was: ", 18);
          if (*(char *)(a1 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
          }
          else {
            std::string v21 = *(std::string *)a1;
          }
          kaldi::PrintableRxfilename((uint64_t)&v21, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned int v17 = &__p;
          }
          else {
            unsigned int v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v18 = __p.__r_.__value_.__l.__size_;
          }
          std::locale v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v17, v18);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"]", 1);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v21.__r_.__value_.__l.__data_);
          }
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
          goto LABEL_54;
        }
      }
    }
  }
  else
  {
    BOOL v6 = 0;
    if (a2 && kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Error opening script file: ", 27);
      if (*(char *)(a1 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
      }
      else {
        std::string v23 = *(std::string *)a1;
      }
      kaldi::PrintableRxfilename((uint64_t)&v23, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v13 = &__p;
      }
      else {
        unsigned int v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v13, v14);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
      goto LABEL_54;
    }
  }
  kaldi::Input::~Input((kaldi::Input *)&v26);
  return v6;
}

void sub_1B242C5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a35);
  kaldi::Input::~Input((kaldi::Input *)(v35 - 48));
  _Unwind_Resume(a1);
}

BOOL kaldi::ReadScriptFile(void *a1, int a2, std::vector<std::pair<std::string, std::string>> *a3)
{
  int v6 = 1;
  unint64_t v7 = (std::locale::id *)MEMORY[0x1E4FBA258];
  char v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  do
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    uint64_t v8 = std::locale::use_facet(&v26, v7);
    unsigned __int8 v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(&v26);
    unsigned int v10 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)&v27, v9);
    int v11 = *(_DWORD *)((unsigned char *)v10 + *(void *)(*v10 - 24) + 32) & 5;
    if (v11) {
      break;
    }
    if (v29 >= 0) {
      uint64_t v12 = (void **)&v27;
    }
    else {
      uint64_t v12 = v27;
    }
    if (!*(unsigned char *)v12)
    {
      if (a2 && kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Empty ", 6);
        std::string v22 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"'th line in script file", 23);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      }
      break;
    }
    memset(&__str, 0, sizeof(__str));
    memset(&v24, 0, sizeof(v24));
    kaldi::SplitStringOnFirstSpace((uint64_t)&v27, (uint64_t)&__str, (uint64_t)&v24);
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (!size) {
      goto LABEL_14;
    }
    std::string::size_type v14 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v14 = v24.__r_.__value_.__l.__size_;
    }
    if (v14)
    {
      std::vector<std::pair<std::string,std::string>>::resize(a3, 1 - 0x5555555555555555 * (((char *)a3->__end_ - (char *)a3->__begin_) >> 4));
      std::string::operator=(&a3->__end_[-1].first, &__str);
      std::string::operator=(&a3->__end_[-1].second, &v24);
      char v15 = 1;
    }
    else
    {
LABEL_14:
      char v15 = 0;
      if (a2 && kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Invalid ", 8);
        int64_t v16 = (void *)std::ostream::operator<<();
        unsigned int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"'th line in script file", 23);
        std::string::size_type v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)":\"", 2);
        if (v29 >= 0) {
          std::locale v19 = (void **)&v27;
        }
        else {
          std::locale v19 = v27;
        }
        if (v29 >= 0) {
          uint64_t v20 = HIBYTE(v29);
        }
        else {
          uint64_t v20 = v28;
        }
        std::string v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
        v30[0] = 34;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v30, 1);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
        char v15 = 0;
      }
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    ++v6;
  }
  while ((v15 & 1) != 0);
  if (SHIBYTE(v29) < 0) {
    operator delete(v27);
  }
  return v11 != 0;
}

void sub_1B242C99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22)
{
  if (*(char *)(v22 - 97) < 0) {
    operator delete(*(void **)(v22 - 120));
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::resize(std::vector<std::pair<std::string, std::string>> *this, std::vector<std::pair<std::string, std::string>>::size_type __sz)
{
  std::vector<std::pair<std::string, std::string>>::pointer end = this->__end_;
  std::vector<std::pair<std::string, std::string>>::size_type v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 4);
  BOOL v5 = __sz >= v4;
  std::vector<std::pair<std::string, std::string>>::size_type v6 = __sz - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::pair<std::string,std::string>>::__append(this, v6);
  }
  else if (!v5)
  {
    unint64_t v7 = &this->__begin_[__sz];
    while (end != v7)
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)&this->__end_cap_, (uint64_t)--end);
    this->__end_ = v7;
  }
}

uint64_t kaldi::ClassifyRspecifier(std::string *this, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
LABEL_4:
    if (!a3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
    goto LABEL_4;
  }
  **(unsigned char **)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (a3) {
LABEL_5:
  }
    *(_DWORD *)a3 = 0;
LABEL_6:
  std::string::size_type v6 = std::string::find(this, 58, 0);
  if (v6 == -1) {
    return 0;
  }
  std::string::size_type v7 = v6;
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    unsigned __int8 v9 = this;
  }
  else {
    unsigned __int8 v9 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  unsigned int v10 = v9->__r_.__value_.__s.__data_[size - 1];
  if ((v10 & 0x80000000) != 0)
  {
    if (__maskrune(v10, 0x4000uLL))
    {
LABEL_14:
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
        int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Trailing whitespace not allowd in rspecifier (found \"", 53);
        int v12 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
        if (v12 >= 0) {
          unsigned int v13 = this;
        }
        else {
          unsigned int v13 = (std::string *)this->__r_.__value_.__r.__words[0];
        }
        if (v12 >= 0) {
          std::string::size_type v14 = HIBYTE(this->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v14 = this->__r_.__value_.__l.__size_;
        }
        char v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
        int64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\"). ", 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Will treat this as kNoRspecifier.", 33);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      }
      return 0;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v10 + 60) & 0x4000) != 0)
  {
    goto LABEL_14;
  }
  std::string::basic_string(&v26, this, 0, v7, (std::allocator<char> *)&__str);
  std::string::basic_string[abi:ne180100](&__str, (uint64_t *)this, v7 + 1);
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  kaldi::SplitStringToVector(&v26, ", ", 0, (uint64_t)&v22);
  uint64_t v19 = v22;
  if (v23 == v22)
  {
LABEL_68:
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = 0;
    if ((unint64_t)((v23 - v22) / 24) <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = (v23 - v22) / 24;
    }
    do
    {
      std::string v21 = (const char *)v19;
      if (*(char *)(v19 + 23) < 0) {
        std::string v21 = *(const char **)v19;
      }
      if (strcmp(v21, "b") && strcmp(v21, "t"))
      {
        if (!strcmp(v21, "o"))
        {
          if (a3) {
            *(unsigned char *)a3 = 1;
          }
        }
        else if (!strcmp(v21, "no"))
        {
          if (a3) {
            *(unsigned char *)a3 = 0;
          }
        }
        else if (!strcmp(v21, "p"))
        {
          if (a3) {
            *(unsigned char *)(a3 + 3) = 1;
          }
        }
        else if (!strcmp(v21, "np"))
        {
          if (a3) {
            *(unsigned char *)(a3 + 3) = 0;
          }
        }
        else if (!strcmp(v21, "s"))
        {
          if (a3) {
            *(unsigned char *)(a3 + 1) = 1;
          }
        }
        else if (!strcmp(v21, "ns"))
        {
          if (a3) {
            *(unsigned char *)(a3 + 1) = 0;
          }
        }
        else if (!strcmp(v21, "cs"))
        {
          if (a3) {
            *(unsigned char *)(a3 + 2) = 1;
          }
        }
        else if (!strcmp(v21, "ncs"))
        {
          if (a3) {
            *(unsigned char *)(a3 + 2) = 0;
          }
        }
        else if (!strcmp(v21, "ark"))
        {
          if (v17) {
            goto LABEL_68;
          }
          uint64_t v17 = 1;
        }
        else
        {
          if (strcmp(v21, "scp") | v17) {
            goto LABEL_68;
          }
          uint64_t v17 = 2;
        }
      }
      v19 += 24;
      --v20;
    }
    while (v20);
    if (a2 && (v17 - 1) <= 1) {
      std::string::operator=((std::string *)a2, &__str);
    }
  }
  char v27 = (void **)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  return v17;
}

void sub_1B242CE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  *(void *)(v23 - 96) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 96));
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::__append(std::vector<std::pair<std::string, std::string>> *this, std::vector<std::pair<std::string, std::string>>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  BOOL v5 = value;
  std::string::size_type v7 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 4) >= __n)
  {
    if (__n)
    {
      size_t v13 = 48 * ((48 * __n - 48) / 0x30) + 48;
      bzero(p_end_cap[-1].__value_, v13);
      std::string::size_type v7 = (std::pair<std::string, std::string> *)((char *)v7 + v13);
    }
    this->__end_ = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 4);
    unint64_t v9 = v8 + __n;
    if (v8 + __n > 0x555555555555555) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)p_end_cap;
    if (v11) {
      int v12 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>((uint64_t)p_end_cap, v11);
    }
    else {
      int v12 = 0;
    }
    __v.__first_ = v12;
    __v.__begin_ = v12 + v8;
    __v.__end_cap_.__value_ = &v12[v11];
    size_t v14 = 48 * ((48 * __n - 48) / 0x30) + 48;
    bzero(__v.__begin_, v14);
    __v.__end_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)((char *)__v.__begin_ + v14);
    std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::wstring, std::wstring>> *)&__v);
  }
}

void sub_1B242D044(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::wstring, std::wstring>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void *quasar::git_version::get@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "none");
}

uint64_t quasar::tennessee::archive::ImmutableArchive::ReadIntoStringStream(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 16))(&v2);
  std::ostream::operator<<();
  uint64_t result = v2;
  uint64_t v2 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B242D11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    quasar::artifact::AppLmArtifact::loadAppLmData(a10);
  }
  _Unwind_Resume(exception_object);
}

void quasar::tennessee::archive::ImmutableArchive::GetAsByteBuffer(quasar::tennessee::archive::ImmutableArchive *this, const std::__fs::filesystem::path *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v3);
  quasar::tennessee::archive::ImmutableArchive::ReadIntoStringStream((uint64_t)this);
  std::stringbuf::str();
  operator new();
}

void sub_1B242D2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

quasar::tennessee::archive::FileSystemDirectoryMutableArchive *quasar::tennessee::archive::FileSystemDirectoryMutableArchive::FileSystemDirectoryMutableArchive(quasar::tennessee::archive::FileSystemDirectoryMutableArchive *this, const std::__fs::filesystem::path *a2)
{
  *(void *)this = &unk_1F0A5A050;
  uint64_t v3 = (std::__fs::filesystem::path *)((char *)this + 8);
  std::__fs::filesystem::__canonical((std::__fs::filesystem::path *)((char *)this + 8), a2, 0);
  if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 31)) {
      goto LABEL_3;
    }
LABEL_7:
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v6 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v6);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v6);
  }
  if (!*((void *)this + 2)) {
    goto LABEL_7;
  }
LABEL_3:
  if (!std::__fs::filesystem::path::__root_directory(v3).__size_)
  {
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v6 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v6);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v6);
  }
  std::__fs::filesystem::__status(v3, 0);
  if (v6 != 2)
  {
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v6 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v6);
    BOOL v5 = std::__fs::filesystem::operator<<[abi:ne180100]<char,std::char_traits<char>,0>(&v6, (uint64_t *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" is not a directory", 19);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v6);
  }
  return this;
}

void sub_1B242D490(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void quasar::tennessee::archive::FileSystemDirectoryMutableArchive::OpenStreamForReading(quasar::tennessee::archive::FileSystemDirectoryMutableArchive *this, std::__fs::filesystem::path *a2)
{
  quasar::tennessee::archive::FileSystemDirectoryMutableArchive::ResolvePath(this, a2, &v3);
  std::__fs::filesystem::__status(&v3, 0);
  if (v2[0] == 1) {
    std::make_unique[abi:ne180100]<std::ifstream>();
  }
  memset(v2, 0, sizeof(v2));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
  std::__fs::filesystem::operator<<[abi:ne180100]<char,std::char_traits<char>,0>(v2, (uint64_t *)&v3);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v2);
}

void sub_1B242D634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (*(char *)(v16 - 33) < 0) {
    operator delete(*(void **)(v16 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::tennessee::archive::FileSystemDirectoryMutableArchive::ResolvePath@<X0>(quasar::tennessee::archive::FileSystemDirectoryMutableArchive *this@<X0>, std::__fs::filesystem::path *a2@<X1>, std::__fs::filesystem::path *a3@<X8>)
{
  if (std::__fs::filesystem::path::__root_directory(a2).__size_)
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v8 = 0u;
    quasar::QuasarExceptionMessage::QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v8);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v8);
  }
  std::__fs::filesystem::operator/[abi:ne180100](a2, (uint64_t)this + 8, a3);
  std::__fs::filesystem::path::__string_view v7 = std::__fs::filesystem::path::__root_directory(a3);
  uint64_t result = (uint64_t)v7.__data_;
  if (!v7.__size_)
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v8);
  }
  return result;
}

void sub_1B242D780(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::tennessee::archive::FileSystemDirectoryMutableArchive::OpenFileInVirtualMemoryForReading(quasar::tennessee::archive::FileSystemDirectoryMutableArchive *a1, std::__fs::filesystem::path *a2)
{
  quasar::tennessee::archive::FileSystemDirectoryMutableArchive::ResolvePath(a1, a2, &v20);
  std::__fs::filesystem::__status(&v20, 0);
  if (v3 == 1)
  {
    if (std::__fs::filesystem::__file_size(&v20, 0)) {
      operator new();
    }
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    long long v4 = 0u;
    long long v5 = 0u;
    long long v3 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v3);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v3);
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v4 = 0u;
  long long v5 = 0u;
  long long v3 = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v3);
  uint64_t v2 = std::__fs::filesystem::operator<<[abi:ne180100]<char,std::char_traits<char>,0>(&v3, (uint64_t *)&v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" is not a regular file.", 23);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v3);
}

void sub_1B242D900(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 49) < 0) {
    operator delete(*(void **)(v1 - 72));
  }
  _Unwind_Resume(exception_object);
}

BOOL quasar::tennessee::archive::FileSystemDirectoryMutableArchive::Exists(quasar::tennessee::archive::FileSystemDirectoryMutableArchive *this, std::__fs::filesystem::path *a2)
{
  quasar::tennessee::archive::FileSystemDirectoryMutableArchive::ResolvePath(this, a2, &__p);
  std::__fs::filesystem::__status(&__p, 0);
  uint64_t v2 = v6;
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  }
  if (v2) {
    BOOL v3 = v2 == 255;
  }
  else {
    BOOL v3 = 1;
  }
  return !v3;
}

void sub_1B242D9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uintmax_t quasar::tennessee::archive::FileSystemDirectoryMutableArchive::Size(quasar::tennessee::archive::FileSystemDirectoryMutableArchive *this, std::__fs::filesystem::path *a2)
{
  quasar::tennessee::archive::FileSystemDirectoryMutableArchive::ResolvePath(this, a2, &v4);
  uintmax_t v2 = std::__fs::filesystem::__file_size(&v4, 0);
  if (SHIBYTE(v4.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__pn_.__r_.__value_.__l.__data_);
  }
  return v2;
}

void sub_1B242DA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::tennessee::archive::FileSystemDirectoryMutableArchive::OpenStreamForWriting(quasar::tennessee::archive::FileSystemDirectoryMutableArchive *this, std::__fs::filesystem::path *a2)
{
  quasar::tennessee::archive::FileSystemDirectoryMutableArchive::ResolvePath(this, a2, &v3);
  std::__fs::filesystem::path::parent_path[abi:ne180100](&v3, (uint64_t)&__p);
  std::__fs::filesystem::__create_directories(&__p, 0);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  }
  std::make_unique[abi:ne180100]<std::ofstream>();
}

void sub_1B242DB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v16 = *(void *)(v14 - 64);
  *(void *)(v14 - 64) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  if (*(char *)(v14 - 33) < 0) {
    operator delete(*(void **)(v14 - 56));
  }
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<std::ofstream>()
{
}

void sub_1B242DD48(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](v2);
  MEMORY[0x1B3EA8670](v1, 0x10F1C4067547207);
  _Unwind_Resume(a1);
}

void quasar::tennessee::archive::FileSystemDirectoryMutableArchive::~FileSystemDirectoryMutableArchive(void **this)
{
  *this = &unk_1F0A5A050;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F0A5A050;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t printVersion(const char *a1)
{
  printf("SRILM release %s", "1.7.1");
  printf(" (with third-party contributions)");
  printf("\n\nProgram version %s\n", a1);
  puts("\nSupport for compressed files is included.");
  return puts("\nThis software is subject to the SRILM Community Research License Version\n1.0 (the \"License\"); you may not use this software except in compliance\n"
           "with the License.  A copy of the License is included in the SRILM root\n"
           "directory in the \"License\" file.  Software distributed under the License\n"
           "is distributed on an \"AS IS\" basis, WITHOUT WARRANTY OF ANY KIND, either\n"
           "express or implied.  See the License for the specific language governing\n"
           "rights and limitations under the License.\n"
           "\n"
           "This software is Copyright (c) 1995-2014 SRI International.  All rights\n"
           "reserved.\n"
           "\n"
           "Portions of this software are\n"
           "Copyright (c) 2002-2005 Jeff Bilmes\n"
           "Copyright (c) 2009-2013 Tanel Alumae\n"
           "Copyright (c) 2012-2013 Microsoft Corp.\n"
           "\n"
           "SRILM also includes open-source software as listed in the\n"
           "ACKNOWLEDGEMENTS file in the SRILM root directory.\n"
           "\n"
           "If this software was obtained under a commercial license agreement with\n"
           "SRI then the provisions therein govern the use of the software and the\n"
           "above notice does not apply.\n");
}

void crashIntoDebugger(void)
{
}

void assertFailed(const char *a1, const char *a2, uint64_t a3)
{
}

const char *conditionalAssert(const char *result, const char *a2, uint64_t a3)
{
  if (g_bCrashOnError) {
    assertFailed(result, a2, a3);
  }
  return result;
}

uint64_t getDirSep(void)
{
  return 47;
}

int wcsncasecmp(const __int32 *a1, const __int32 *a2, size_t n)
{
  if (!n) {
    return 0;
  }
  size_t v3 = n;
  while (1)
  {
    __darwin_ct_rune_t v7 = *a1++;
    __darwin_ct_rune_t v6 = v7;
    __int32 v8 = *a2;
    if (!v7 || v8 == 0) {
      break;
    }
    __darwin_ct_rune_t v10 = __tolower(v6);
    __darwin_ct_rune_t v11 = __tolower(*a2);
    if (v10 < v11) {
      return -1;
    }
    if (v10 > v11) {
      return 1;
    }
    ++a2;
    if (!--v3) {
      return 0;
    }
  }
  if (v6 | v8) {
    int v12 = -1;
  }
  else {
    int v12 = 0;
  }
  if (v6) {
    return 1;
  }
  else {
    return v12;
  }
}

void sub_1B242E068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B242E110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

kaldi::LinearResample *kaldi::LinearResample::LinearResample(kaldi::LinearResample *this, uint64_t a2, int a3, float a4, int a5)
{
  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3;
  *((float *)this + 2) = a4;
  *((_DWORD *)this + 3) = a5;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 11) = 0;
  __darwin_ct_rune_t v6 = (void **)((char *)this + 88);
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  int v7 = kaldi::Gcd<int>(a2, a3);
  int v8 = *((_DWORD *)this + 1) / v7;
  *((_DWORD *)this + 4) = *(_DWORD *)this / v7;
  *((_DWORD *)this + 5) = v8;
  kaldi::LinearResample::SetIndexesAndWeights(this);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  kaldi::Vector<float>::Resize(v6, 0, 0);
  return this;
}

void sub_1B242E1E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy(v3);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  __darwin_ct_rune_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v2 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void kaldi::LinearResample::SetIndexesAndWeights(kaldi::LinearResample *this)
{
  std::vector<int>::resize((std::vector<unsigned int> *)this + 1, *((int *)this + 5));
  std::vector<kaldi::Vector<float>>::resize((uint64_t *)this + 6, *((int *)this + 5));
  if (*((int *)this + 5) >= 1)
  {
    uint64_t v2 = 0;
    double v3 = (double)*((int *)this + 3) / (*((float *)this + 2) + *((float *)this + 2));
    do
    {
      double v4 = (double)(int)v2 / (double)*((int *)this + 1);
      unsigned int v5 = vcvtpd_s64_f64((v4 - v3) * (double)*(int *)this);
      unsigned int v6 = vcvtmd_s64_f64((v3 + v4) * (double)*(int *)this) - v5;
      uint64_t v7 = v6 + 1;
      *(_DWORD *)(*((void *)this + 3) + 4 * v2) = v5;
      kaldi::Vector<float>::Resize((void **)(*((void *)this + 6) + 24 * v2), v7, 0);
      if ((v6 & 0x80000000) == 0)
      {
        uint64_t v8 = 0;
        double v9 = (double)*(int *)this;
        float v10 = (float)*(int *)this;
        uint64_t v11 = *(void *)(*((void *)this + 6) + 24 * v2);
        do
        {
          float v12 = (double)(int)(v5 + v8) / v9 - v4;
          *(float *)(v11 + 4 * v8++) = kaldi::LinearResample::FilterFunc(this, v12) / v10;
        }
        while (v7 != v8);
      }
      ++v2;
    }
    while (v2 < *((int *)this + 5));
  }
}

uint64_t kaldi::LinearResample::GetNumOutputSamples(kaldi::LinearResample *this, uint64_t a2, char a3)
{
  int v6 = *(_DWORD *)this;
  int v7 = *((_DWORD *)this + 1);
  int v8 = kaldi::Gcd<int>(*(unsigned int *)this, v7);
  int v9 = v6 / v8 * v8 * (v7 / v8);
  uint64_t v10 = v9 / *(_DWORD *)this * a2;
  if ((a3 & 1) == 0)
  {
    float v11 = (double)*((int *)this + 3) / (*((float *)this + 2) + *((float *)this + 2));
    v10 -= (int)vcvtms_s32_f32((float)v9 * v11);
  }
  if (v10 < 1) {
    return 0;
  }
  else {
    return v10 / (v9 / *((_DWORD *)this + 1))
  }
         - (v10 / (v9 / *((_DWORD *)this + 1)) * (v9 / *((_DWORD *)this + 1)) == v10)
         + 1;
}

float kaldi::LinearResample::FilterFunc(kaldi::LinearResample *this, float a2)
{
  double v3 = fabsf(a2);
  double v4 = (double)*((int *)this + 3);
  float v5 = *((float *)this + 2);
  double v6 = v5;
  float v7 = 0.0;
  if (v4 / (v6 + v6) > v3) {
    float v7 = (cos(v6 * 6.28318531 / v4 * a2) + 1.0) * 0.5;
  }
  if (a2 == 0.0) {
    float v8 = v5 + v5;
  }
  else {
    float v8 = sin(v6 * 6.28318531 * a2) / (a2 * 3.14159265);
  }
  return v7 * v8;
}

void kaldi::LinearResample::Resample(uint64_t a1, uint64_t a2, char a3, void **a4)
{
  uint64_t v8 = *(int *)(a2 + 8);
  int v9 = (void *)(a1 + 72);
  uint64_t v22 = *(void *)(a1 + 72) + v8;
  uint64_t NumOutputSamples = kaldi::LinearResample::GetNumOutputSamples((kaldi::LinearResample *)a1, v22, a3);
  kaldi::Vector<float>::Resize(a4, (NumOutputSamples - *(_DWORD *)(a1 + 80)), 0);
  uint64_t v11 = *(void *)(a1 + 80);
  if (v11 < NumOutputSamples)
  {
    for (uint64_t i = *(void *)(a1 + 80); i != NumOutputSamples; ++i)
    {
      uint64_t v13 = *(int *)(a1 + 20);
      uint64_t v14 = i / v13;
      LODWORD(v13) = i % v13;
      uint64_t v15 = *(void *)(a1 + 48) + 24 * (int)v13;
      uint64_t v16 = *(unsigned int *)(*(void *)(a1 + 24) + 4 * (int)v13)
          + v14 * *(unsigned int *)(a1 + 16)
          - *(void *)(a1 + 72);
      uint64_t v17 = *(unsigned int *)(v15 + 8);
      if ((v16 & 0x80000000) != 0 || (int)v17 + (int)v16 > (int)v8)
      {
        if ((int)v17 >= 1)
        {
          long long v18 = *(float **)v15;
          float v19 = 0.0;
          while (1)
          {
            if ((v16 & 0x80000000) != 0)
            {
              int v21 = v16 + *(_DWORD *)(a1 + 96);
              if (v21 >= 0)
              {
                float v20 = *(float *)(*(void *)(a1 + 88) + 4 * v21);
                goto LABEL_12;
              }
            }
            else if ((int)v16 < (int)v8)
            {
              float v20 = *(float *)(*(void *)a2 + 4 * v16);
LABEL_12:
              float v19 = v19 + (float)(*v18 * v20);
            }
            LODWORD(v16) = v16 + 1;
            ++v18;
            if (!--v17) {
              goto LABEL_17;
            }
          }
        }
        float v19 = 0.0;
      }
      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t v23 = *(void *)a2 + 4 * v16;
        LODWORD(v24) = v17;
        float v19 = kaldi::VecVec<float>((uint64_t)&v23, (const float **)v15);
        uint64_t v11 = *(void *)(a1 + 80);
      }
LABEL_17:
      *((float *)*a4 + (int)i - (int)v11) = v19;
    }
  }
  if (a3)
  {
    *int v9 = 0;
    v9[1] = 0;
    kaldi::Vector<float>::Resize((void **)(a1 + 88), 0, 0);
  }
  else
  {
    kaldi::LinearResample::SetRemainder(a1, a2);
    *(void *)(a1 + 72) = v22;
    *(void *)(a1 + 80) = NumOutputSamples;
  }
}

void kaldi::LinearResample::SetRemainder(uint64_t a1, uint64_t a2)
{
  double v4 = (const void **)(a1 + 88);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  kaldi::Vector<float>::Resize((void **)&v16, *(unsigned int *)(a1 + 96), 1);
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v16, v4);
  LODWORD(v5) = vcvtps_s32_f32((float)(*(_DWORD *)(a1 + 12) * *(_DWORD *)a1) / *(float *)(a1 + 8));
  kaldi::Vector<float>::Resize((void **)v4, v5, 0);
  uint64_t v6 = *(int *)(a1 + 96);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = -v6;
    uint64_t v8 = *(int *)(a2 + 8);
    int v9 = v17;
    uint64_t v10 = v16;
    uint64_t v11 = *(_DWORD **)a2;
    uint64_t v12 = 4 * *(unsigned int *)(a1 + 96);
    uint64_t v13 = v8 + (int)v17;
    while (1)
    {
      uint64_t v14 = v11;
      int v15 = v7 + v8;
      if (v7 + v8 >= 0) {
        goto LABEL_6;
      }
      if (v13 + v7 >= 0) {
        break;
      }
LABEL_7:
      if (!++v7) {
        goto LABEL_8;
      }
    }
    v15 += v9;
    uint64_t v14 = v10;
LABEL_6:
    *(_DWORD *)((char *)*v4 + 4 * v7 + v12) = v14[v15];
    goto LABEL_7;
  }
LABEL_8:
  kaldi::Vector<float>::Destroy((uint64_t)&v16);
}

void sub_1B242E788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::ArbitraryResample::ArbitraryResample(uint64_t a1, int a2, uint64_t *a3, int a4, float a5, float a6)
{
  *(_DWORD *)a1 = a2;
  *(float *)(a1 + 4) = a5;
  *(float *)(a1 + 8) = a6;
  *(_DWORD *)(a1 + 12) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  kaldi::ArbitraryResample::SetIndexes(a1, (uint64_t)a3);
  kaldi::ArbitraryResample::SetWeights((kaldi::ArbitraryResample *)a1, a3);
  return a1;
}

void sub_1B242E7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 40);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v12 = *(void **)(v10 + 16);
  if (v12)
  {
    *(void *)(v10 + 24) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void kaldi::ArbitraryResample::SetIndexes(uint64_t a1, uint64_t a2)
{
  std::vector<unsigned int>::size_type v4 = *(int *)(a2 + 8);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 16), v4);
  std::vector<kaldi::Vector<float>>::resize((uint64_t *)(a1 + 40), v4);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0;
    float v6 = (double)*(int *)(a1 + 12) / (*(float *)(a1 + 8) + *(float *)(a1 + 8));
    do
    {
      float v7 = *(float *)(*(void *)a2 + 4 * v5);
      float v8 = *(float *)(a1 + 4);
      int v9 = vcvtps_s32_f32(v8 * (float)(v7 - v6));
      int v10 = vcvtms_s32_f32(v8 * (float)(v7 + v6));
      int v11 = v9 & ~(v9 >> 31);
      if (*(_DWORD *)a1 <= v10) {
        int v10 = *(_DWORD *)a1 - 1;
      }
      *(_DWORD *)(*(void *)(a1 + 16) + 4 * v5) = v11;
      kaldi::Vector<float>::Resize((void **)(*(void *)(a1 + 40) + 24 * v5++), (v10 - v11 + 1), 0);
    }
    while (v5 != v4);
  }
}

void kaldi::ArbitraryResample::SetWeights(kaldi::ArbitraryResample *this, uint64_t *a2)
{
  uint64_t v2 = *((void *)this + 5);
  if ((int)(-1431655765 * ((*((void *)this + 6) - v2) >> 3)) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *a2;
    uint64_t v6 = -1431655765 * ((*((void *)this + 6) - v2) >> 3);
    do
    {
      uint64_t v7 = v2 + 24 * v4;
      uint64_t v8 = *(unsigned int *)(v7 + 8);
      if ((int)v8 >= 1)
      {
        int v9 = *(_DWORD *)(*((void *)this + 2) + 4 * v4);
        int v10 = *(float **)v7;
        do
        {
          float v11 = *((float *)this + 1);
          *v10++ = kaldi::ArbitraryResample::FilterFunc(this, *(float *)(v5 + 4 * v4) - (float)((float)v9++ / v11))
                 / v11;
          --v8;
        }
        while (v8);
      }
      ++v4;
    }
    while (v4 != v6);
  }
}

void kaldi::ArbitraryResample::Resample(void *a1, uint64_t a2, uint64_t a3)
{
  kaldi::MatrixBase<float>::NumRows(a2);
  kaldi::MatrixBase<float>::NumRows(a3);
  kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::MatrixBase<float>::NumCols(a3);
  uint64_t v6 = kaldi::MatrixBase<float>::NumRows(a3);
  memset(v11, 0, sizeof(v11));
  kaldi::Vector<float>::Resize(v11, v6, 0);
  if ((int)(-1431655765 * ((a1[6] - a1[5]) >> 3)) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      int v9 = kaldi::MatrixBase<float>::NumRows(a2);
      kaldi::SubMatrix<float>::SubMatrix((uint64_t)v10, a2, 0, v9, *(_DWORD *)(a1[2] + 4 * v8), *(_DWORD *)(a1[5] + v7 + 8));
      kaldi::VectorBase<float>::AddMatVec((uint64_t)v11, v10, CblasNoTrans, a1[5] + v7, 1.0, 0.0);
      kaldi::MatrixBase<float>::CopyColFromVec(a3, (uint64_t)v11, v8);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v10);
      ++v8;
      v7 += 24;
    }
    while (v8 < (int)(-1431655765 * ((a1[6] - a1[5]) >> 3)));
  }
  kaldi::Vector<float>::Destroy((uint64_t)v11);
}

void sub_1B242EB24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  kaldi::Vector<float>::Destroy((uint64_t)va1);
  _Unwind_Resume(a1);
}

float kaldi::ArbitraryResample::FilterFunc(kaldi::ArbitraryResample *this, float a2)
{
  double v3 = fabsf(a2);
  double v4 = (double)*((int *)this + 3);
  float v5 = *((float *)this + 2);
  double v6 = v5;
  float v7 = 0.0;
  if (v4 / (v6 + v6) > v3) {
    float v7 = (cos(v6 * 6.28318531 / v4 * a2) + 1.0) * 0.5;
  }
  if (a2 == 0.0) {
    float v8 = v5 + v5;
  }
  else {
    float v8 = sin(v6 * 6.28318531 * a2) / (a2 * 3.14159265);
  }
  return v7 * v8;
}

void kaldi::Resampler::Resample(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  if (!*a1) {
    operator new();
  }
  kaldi::LinearResample::Resample(*a1, a2, a4, (void **)a3);
  uint64_t v7 = *(unsigned int *)(a3 + 8);
  if ((int)v7 >= 1)
  {
    float v8 = *(float **)a3;
    do
    {
      *float v8 = truncf(*v8);
      ++v8;
      --v7;
    }
    while (v7);
  }
  if (a4)
  {
    uint64_t v9 = *a1;
    int v10 = (void **)(*a1 + 88);
    *(void *)(v9 + 72) = 0;
    *(void *)(v9 + 80) = 0;
    kaldi::Vector<float>::Resize(v10, 0, 0);
  }
}

void sub_1B242ED18(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B0C40587FD9DDLL);
  _Unwind_Resume(a1);
}

std::string *quasar::corrective_reranking::OverridesDictionary::OverridesDictionary(std::string *this, const quasar::corrective_reranking::OverridesConfig *a2)
{
  void v14[3] = *MEMORY[0x1E4F143B8];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  double v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  quasar::PTree::PTree((quasar::PTree *)&this[3]);
  quasar::PTree::PTree((quasar::PTree *)&this[5].__r_.__value_.__r.__words[2]);
  std::string::basic_string[abi:ne180100]<0>(v11, ".");
  std::string::basic_string[abi:ne180100]<0>(v12, "!");
  std::string::basic_string[abi:ne180100]<0>(v13, "?");
  std::string::basic_string[abi:ne180100]<0>(v14, ",");
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[8].__r_.__value_.__l.__size_, (unsigned __int8 *)v11, 4);
  for (uint64_t i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v14[i + 2]) < 0) {
      operator delete((void *)v14[i]);
    }
  }
  uint64_t v9 = *((unsigned __int8 *)a2 + 23);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *((void *)a2 + 1);
  }
  if (v9) {
    quasar::corrective_reranking::OverridesDictionary::loadMetaTokensFile((uint64_t)this);
  }
  else {
    quasar::corrective_reranking::OverridesDictionary::loadOverrides((uint64_t)this);
  }
  return this;
}

void sub_1B242EF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*(char *)(v10 + 47) < 0) {
    operator delete(*v11);
  }
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::corrective_reranking::OverridesDictionary::loadMetaTokensFile(uint64_t this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  if (*(char *)(this + 23) < 0)
  {
    if (!*(void *)(this + 8)) {
      return this;
    }
LABEL_5:
    quasar::PTree::PTree((quasar::PTree *)v1);
    quasar::PTree::readJsonFromFile();
  }
  if (*(unsigned char *)(this + 23)) {
    goto LABEL_5;
  }
  return this;
}

void sub_1B242F6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  quasar::PTree::~PTree((quasar::PTree *)(v39 - 144));
  quasar::PTree::~PTree((quasar::PTree *)&a16);
  quasar::PTree::~PTree((quasar::PTree *)&a24);
  _Unwind_Resume(a1);
}

uint64_t quasar::corrective_reranking::OverridesDictionary::loadOverrides(uint64_t this)
{
  if (*(char *)(this + 71) < 0)
  {
    if (!*(void *)(this + 56)) {
      goto LABEL_6;
    }
LABEL_5:
    quasar::PTree::readJsonFromFile();
  }
  if (*(unsigned char *)(this + 71)) {
    goto LABEL_5;
  }
LABEL_6:
  if (*(char *)(this + 47) < 0)
  {
    if (!*(void *)(this + 32)) {
      return this;
    }
LABEL_10:
    quasar::PTree::readJsonFromFile();
  }
  if (*(unsigned char *)(this + 47)) {
    goto LABEL_10;
  }
  return this;
}

void sub_1B242FAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::corrective_reranking::OverridesDictionary::~OverridesDictionary(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void quasar::corrective_reranking::OverridesDictionary::findSlotOverride(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  long long v11 = 0uLL;
  uint64_t v12 = 0;
  int v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    double v6 = (char *)a2;
  }
  else {
    double v6 = *(char **)a2;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  quasar::utf8::convertToLowerCaseOrEmpty(v6, v7, &__p);
  uint64_t ChildWithoutSplit = quasar::PTree::getChildWithoutSplit(a1 + 72, (unsigned __int8 **)&__p);
  uint64_t v9 = ChildWithoutSplit;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!ChildWithoutSplit) {
      goto LABEL_12;
    }
LABEL_11:
    std::string::basic_string[abi:ne180100]<0>(&__p, "applicable_intents");
    quasar::PTree::getChildOptional(v9, (uint64_t)&__p);
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v9) {
    goto LABEL_11;
  }
LABEL_12:
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1B242FE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::string __p = &a16;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::OverridesDictionary::findPhraseOverride(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, long long *a4@<X8>)
{
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  int v8 = *(char *)(a2 + 23);
  if (v8 >= 0) {
    uint64_t v9 = (char *)a2;
  }
  else {
    uint64_t v9 = *(char **)a2;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  quasar::utf8::convertToLowerCaseOrEmpty(v9, v10, &v17);
  std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_18;
  }
  uint64_t v12 = (quasar::PTree *)(a1 + 136);
  if (a3)
  {
    uint64_t v13 = (unsigned __int8 *)quasar::PTree::begin(v12);
    for (uint64_t i = quasar::PTree::end(v12); v13 != (unsigned __int8 *)i; v13 += 88)
    {
      if (quasar::startsWith(v13, (unsigned __int8 *)a2))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "override");
        quasar::PTree::getString((uint64_t)(v13 + 24), (uint64_t)__p);
      }
    }
LABEL_18:
    *a4 = v18;
    *((void *)a4 + 2) = v19;
    a4 = &v18;
    goto LABEL_19;
  }
  uint64_t ChildWithoutSplit = quasar::PTree::getChildWithoutSplit((uint64_t)v12, (unsigned __int8 **)&v17);
  if (ChildWithoutSplit)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "override");
    quasar::PTree::getString(ChildWithoutSplit, (uint64_t)__p);
  }
LABEL_19:
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
}

void sub_1B2430134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  a17 = &a23;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

BOOL quasar::corrective_reranking::OverridesDictionary::slotOverrideStartsWith(uint64_t a1, uint64_t a2)
{
  int v3 = *(char *)(a2 + 23);
  if (v3 >= 0) {
    long long v4 = (char *)a2;
  }
  else {
    long long v4 = *(char **)a2;
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  quasar::utf8::convertToLowerCaseOrEmpty(v4, v5, &__p);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (!size
    || (uint64_t v7 = (quasar::PTree *)(a1 + 72),
        int v8 = (unsigned __int8 *)quasar::PTree::begin((quasar::PTree *)(a1 + 72)),
        uint64_t v9 = quasar::PTree::end(v7),
        v8 == (unsigned __int8 *)v9))
  {
    BOOL v11 = 0;
  }
  else
  {
    do
    {
      BOOL v10 = quasar::startsWith(v8, (unsigned __int8 *)&__p);
      BOOL v11 = v10;
      v8 += 88;
      char v12 = v8 == (unsigned __int8 *)v9 || v10;
    }
    while ((v12 & 1) == 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v11;
}

void sub_1B2430280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::corrective_reranking::OverridesDictionary::expandSlotOverrideDict@<X0>(const quasar::PTree *a1@<X1>, quasar::PTree *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (quasar::gLogLevel >= 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    quasar::PTree::writeJson();
  }
  quasar::PTree::PTree(a2);
  uint64_t v5 = quasar::PTree::begin(a1);
  uint64_t result = quasar::PTree::end(a1);
  if (v5 != result)
  {
    std::string::basic_string[abi:ne180100]<0>(&__v, "prefixes");
    quasar::PTree::getChildOptional(v5 + 24, (uint64_t)&__v);
  }
  if (quasar::gLogLevel > 5)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    quasar::PTree::writeJson();
  }
  return result;
}

void sub_1B2430E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, quasar::PTree *a6, uint64_t a7, void *__p, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::__split_buffer<std::wstring> *a14, quasar::PTree *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__pa, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,...)
{
  va_start(va, a59);
  if (SHIBYTE(a21) < 0) {
    operator delete(__pa);
  }
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a22);
  std::ostringstream::~ostringstream((uint64_t)va);
  quasar::PTree::~PTree(a15);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::corrective_reranking::Override>::__emplace_back_slow_path<char const(&)[9],BOOL>(uint64_t *a1, char *a2, std::string::value_type *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  std::string v17 = a1 + 2;
  if (v9) {
    BOOL v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(a1 + 2), v9);
  }
  else {
    BOOL v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = (std::string *)&v10[32 * v4];
  uint64_t v16 = &v10[32 * v9];
  std::allocator<quasar::corrective_reranking::Override>::construct[abi:ne180100]<quasar::corrective_reranking::Override,char const(&)[9],BOOL>(a1 + 16, v14, a2, a3);
  int v15 = &v14[1].__r_.__value_.__s.__data_[8];
  std::vector<quasar::corrective_reranking::Override>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B2431194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::corrective_reranking::Override>::construct[abi:ne180100]<quasar::corrective_reranking::Override,char const(&)[9],BOOL>(int a1, std::string *a2, char *__s, std::string::value_type *a4)
{
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  std::string::value_type v6 = *a4;
  if (SHIBYTE(v9) < 0)
  {
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    int v7 = SHIBYTE(v9);
    a2[1].__r_.__value_.__s.__data_[0] = v6;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    a2->__r_.__value_.__r.__words[2] = v9;
    a2[1].__r_.__value_.__s.__data_[0] = v6;
  }
}

void sub_1B2431224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::corrective_reranking::Override>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::corrective_reranking::Override>,std::reverse_iterator<quasar::corrective_reranking::Override*>,std::reverse_iterator<quasar::corrective_reranking::Override*>,std::reverse_iterator<quasar::corrective_reranking::Override*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::corrective_reranking::Override>,std::reverse_iterator<quasar::corrective_reranking::Override*>,std::reverse_iterator<quasar::corrective_reranking::Override*>,std::reverse_iterator<quasar::corrective_reranking::Override*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(unsigned char *)(v8 - 8) = *(unsigned char *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v8;
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::Override>,std::reverse_iterator<quasar::corrective_reranking::Override*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::Override>,std::reverse_iterator<quasar::corrective_reranking::Override*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<quasar::corrective_reranking::Override>::__emplace_back_slow_path<std::string const&,BOOL>(uint64_t *a1, long long *a2, char *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  int v21 = a1 + 2;
  if (v11) {
    char v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  }
  else {
    char v12 = 0;
  }
  char v13 = (std::string *)&v12[32 * v5];
  v18[0] = v12;
  v18[1] = v13;
  uint64_t v19 = v13;
  float v20 = &v12[32 * v11];
  char v14 = *a3;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    char v13 = v19;
  }
  else
  {
    long long v15 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v15;
  }
  v12[32 * v5 + 24] = v14;
  uint64_t v19 = (std::string *)((char *)v13 + 32);
  std::vector<quasar::corrective_reranking::Override>::__swap_out_circular_buffer(a1, v18);
  uint64_t v16 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v18);
  return v16;
}

void sub_1B24314A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void LMClient::LMClient(LMClient *this, Vocab *a2, const char *a3)
{
  int v3 = (LM *)MEMORY[0x1F4188790](this, a2);
  unsigned int v5 = v4;
  int v7 = v6;
  uint64_t v9 = v8;
  unint64_t v11 = v10;
  char v12 = v3;
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  LM::LM(v3, v10);
  *(void *)uint64_t v13 = &unk_1F0A34E38;
  *(_DWORD *)(v13 + 152) = v7;
  *(_DWORD *)(v13 + 416) = -1;
  *(_DWORD *)(v13 + 420) = v5;
  Ngram::Ngram((Ngram *)(v13 + 424), v11, v5);
  *((void *)v12 + 79) = 0;
  *((void *)v12 + 78) = 0;
  *((_DWORD *)v12 + 160) = 0;
  *((_DWORD *)v12 + 170) = 0;
  *(_OWORD *)((char *)v12 + 664) = 0u;
  if (v9)
  {
    int v14 = sscanf(v9, "%u@%255s", (char *)v12 + 412, (char *)v12 + 156);
    if (v14 != 2)
    {
      if (v14 == 1)
      {
        strcpy((char *)v12 + 156, "localhost");
      }
      else
      {
        if (sscanf(v9, "%64s", (char *)v12 + 156) != 1) {
          strcpy((char *)v12 + 156, "localhost");
        }
        *((_DWORD *)v12 + 103) = 2525;
      }
    }
  }
  else
  {
    strcpy((char *)v12 + 156, "localhost");
    *((_DWORD *)v12 + 103) = 2525;
  }
  if ((*((char *)v12 + 156) & 0x80000000) == 0
    && (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * *((unsigned __int8 *)v12 + 156) + 60) & 0x400) != 0)
  {
    in_addr_t v16 = inet_addr((const char *)v12 + 156);
    in_addr_t __dst = v16;
LABEL_14:
    *(_DWORD *)&v67.sa_leuint64_t n = 512;
    *(void *)&v67.sa_data[6] = 0;
    *(_DWORD *)&v67.sa_data[2] = v16;
    *(_WORD *)v67.sa_uint64_t data = bswap32(*((unsigned __int16 *)v12 + 206)) >> 16;
    int v17 = socket(2, 1, 0);
    *((_DWORD *)v12 + 104) = v17;
    if (v17 == -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"socket: server ", 15);
      int v33 = (void *)std::ostream::operator<<();
      uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"@", 1);
      size_t v35 = strlen((const char *)v12 + 156);
      unint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v12 + 156, v35);
      uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)": ", 2);
      unint64_t v38 = __error();
      uint64_t v39 = srilm_ts_strerror(*v38);
      size_t v40 = strlen(v39);
      int v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v39, v40);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v41);
    }
    else
    {
      if (connect(v17, &v67, 0x10u) != -1)
      {
        int v18 = recv(*((_DWORD *)v12 + 104), v66, 0xFFuLL, 0);
        if (v18 == -1)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"server ", 7);
          long long v51 = (void *)std::ostream::operator<<();
          long long v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"@", 1);
          size_t v53 = strlen((const char *)v12 + 156);
          long long v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v12 + 156, v53);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)": could not read banner\n", 24);
          close(*((_DWORD *)v12 + 104));
          *((_DWORD *)v12 + 104) = -1;
          exit(1);
        }
        if (!*((unsigned char *)v12 + 8) && (Debug::debugAll || *((_DWORD *)v12 + 3)))
        {
          v66[v18] = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"server ", 7);
          uint64_t v19 = (void *)std::ostream::operator<<();
          float v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"@", 1);
          size_t v21 = strlen((const char *)v12 + 156);
          uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v12 + 156, v21);
          uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
          size_t v24 = strlen(v66);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v66, v24);
        }
        snprintf(__str, 0x1388uLL, "%s\n", "_R_E_M_O_T_E_L_M_V=2");
        size_t v25 = strlen(__str);
        if (send(*((_DWORD *)v12 + 104), __str, v25, 0) == -1)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"send: server ", 13);
          long long v55 = (void *)std::ostream::operator<<();
          long long v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"@", 1);
          size_t v57 = strlen((const char *)v12 + 156);
          long long v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v12 + 156, v57);
          long long v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)": ", 2);
          uint64_t v60 = __error();
          long long v61 = srilm_ts_strerror(*v60);
          size_t v62 = strlen(v61);
          long long v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v61, v62);
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v63);
        }
        else
        {
          if (recv(*((_DWORD *)v12 + 104), __str, 0x1387uLL, 0) != -1
            && *(unsigned __int16 *)__str == 19279)
          {
            *((_DWORD *)v12 + 154) = -1;
            *(_DWORD *)Array<unsigned int>::operator[]((int *)v12 + 156, 0) = -1;
            *((void *)v12 + 81) = 0;
            *((_DWORD *)v12 + 164) = 0;
            *(_DWORD *)Array<unsigned int>::operator[]((int *)v12 + 166, 0) = -1;
            *((_DWORD *)v12 + 172) = 0;
            *((_DWORD *)v12 + 173) = 0;
            return;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"server ", 7);
          uint64_t v29 = (void *)std::ostream::operator<<();
          uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"@", 1);
          size_t v31 = strlen((const char *)v12 + 156);
          uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v12 + 156, v31);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)": protocol version 2 not supported\n", 35);
        }
        close(*((_DWORD *)v12 + 104));
        *((_DWORD *)v12 + 104) = -1;
        exit(1);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"connect: server ", 16);
      long long v42 = (void *)std::ostream::operator<<();
      long long v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"@", 1);
      size_t v44 = strlen((const char *)v12 + 156);
      unint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v12 + 156, v44);
      long long v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)": ", 2);
      long long v47 = __error();
      long long v48 = srilm_ts_strerror(*v47);
      size_t v49 = strlen(v48);
      long long v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v48, v49);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v50);
      close(*((_DWORD *)v12 + 104));
    }
    exit(1);
  }
  long long v15 = gethostbyname((const char *)v12 + 156);
  if (v15)
  {
    memcpy(&__dst, *(const void **)v15->h_addr_list, v15->h_length);
    in_addr_t v16 = __dst;
    goto LABEL_14;
  }
  std::string v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"server host ", 12);
  size_t v27 = strlen((const char *)v12 + 156);
  uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v12 + 156, v27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" not found\n", 11);
}

void sub_1B2431B84(_Unwind_Exception *a1)
{
  LM::~LM(v1);
  _Unwind_Resume(a1);
}

void LMClient::~LMClient(LMClient *this)
{
  *(void *)this = &unk_1F0A34E38;
  int v2 = *((_DWORD *)this + 104);
  if (v2 != -1) {
    close(v2);
  }
  uint64_t v3 = *((void *)this + 84);
  if (v3) {
    MEMORY[0x1B3EA8630](v3, 0x1000C8052888210);
  }
  uint64_t v4 = *((void *)this + 79);
  if (v4) {
    MEMORY[0x1B3EA8630](v4, 0x1000C8052888210);
  }
  *((void *)this + 53) = &unk_1F0A346B0;
  Trie<unsigned int,BOnode>::~Trie((char *)this + 576);
  LM::~LM((LMClient *)((char *)this + 424));
  LM::~LM(this);
}

{
  uint64_t vars8;

  LMClient::~LMClient(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t LMClient::wordProb(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(v2 + 416) == -1) {
    exit(1);
  }
  unsigned int v5 = (unsigned int *)v4;
  int v6 = v3;
  uint64_t v7 = v2;
  unsigned int v8 = Vocab::length(v4, v3);
  int v9 = *(_DWORD *)(v7 + 152);
  unsigned int v10 = v9 - 1;
  if (v8 < v9 - 1) {
    unsigned int v10 = v8;
  }
  if (v9) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = v8;
  }
  if (v11 >= *(_DWORD *)(v7 + 420))
  {
    int v14 = 0;
  }
  else
  {
    unsigned int v12 = v5[v11];
    v5[v11] = -1;
    uint64_t result = Ngram::insertProb((Ngram *)(v7 + 424), v6, v5);
    int v14 = (float *)result;
    float v15 = *(float *)result;
    v5[v11] = v12;
    if (v15 != 0.0) {
      return result;
    }
  }
  in_addr_t v16 = &__str[snprintf(__str, 0x1388uLL, "%s ", "W")];
  if ((int)v11 - 1 >= 0)
  {
    int v17 = &v5[(v11 - 1)];
    do
    {
      int v18 = (const char *)(*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 32))(*(void *)(v7 + 24), *v17);
      v16 += snprintf(v16, (char *)&v45 - v16, "%s ", v18);
      --v17;
      LODWORD(v11) = v11 - 1;
    }
    while (v11);
  }
  uint64_t v19 = (const char *)(*(uint64_t (**)(void, const unsigned int *))(**(void **)(v7 + 24) + 32))(*(void *)(v7 + 24), v6);
  int v20 = snprintf(v16, (char *)&v45 - v16, "%s\n", v19);
  if (send(*(_DWORD *)(v7 + 416), __str, &v16[v20] - __str, 0) == -1)
  {
    std::operator<<[abi:ne180100]<std::char_traits<char>>(MEMORY[0x1E4FBA240], "send: server ");
    size_t v27 = (void *)std::ostream::operator<<();
    uint64_t v28 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "@");
    uint64_t v29 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v28, (char *)(v7 + 156));
    uint64_t v30 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v29, ": ");
    size_t v31 = __error();
    uint64_t v32 = srilm_ts_strerror(*v31);
    int v33 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v30, v32);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v33);
    close(*(_DWORD *)(v7 + 416));
    *(_DWORD *)(v7 + 416) = -1;
    exit(1);
  }
  int v21 = recv(*(_DWORD *)(v7 + 416), __s, 0xFFuLL, 0);
  if (v21 == -1)
  {
    std::operator<<[abi:ne180100]<std::char_traits<char>>(MEMORY[0x1E4FBA240], "recv: server ");
    uint64_t v34 = (void *)std::ostream::operator<<();
    size_t v35 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v34, "@");
    unint64_t v36 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v35, (char *)(v7 + 156));
    uint64_t v37 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v36, ": ");
    unint64_t v38 = __error();
    uint64_t v39 = srilm_ts_strerror(*v38);
    size_t v40 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v37, v39);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v40);
    close(*(_DWORD *)(v7 + 416));
    exit(1);
  }
  __s[v21] = 0;
  if (*(unsigned __int16 *)__s != 19279 || (double v41 = 0.0, result = parseLogP(v43, &v41), !result))
  {
    std::operator<<[abi:ne180100]<std::char_traits<char>>(MEMORY[0x1E4FBA240], "server ");
    uint64_t v23 = (void *)std::ostream::operator<<();
    size_t v24 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "@");
    size_t v25 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, (char *)(v7 + 156));
    std::string v26 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, ": unexpected return: ");
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, __s);
    close(*(_DWORD *)(v7 + 416));
    exit(1);
  }
  if (v14)
  {
    float v22 = v41;
    *int v14 = v22;
  }
  return result;
}

void sub_1B243209C(_Unwind_Exception *a1)
{
  *(_DWORD *)(v2 + 4 * v3) = v1;
  _Unwind_Resume(a1);
}

uint64_t LMClient::contextID(LMClient *this, uint64_t a2, const unsigned int *a3, unsigned int *a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](this, a2);
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(v4 + 416) == -1) {
    exit(1);
  }
  unsigned int v8 = v7;
  int v9 = (unsigned int *)v6;
  unsigned int v10 = v5;
  uint64_t v11 = v4;
  unsigned int v12 = Vocab::length(v6, v5);
  int v14 = *(_DWORD *)(v11 + 152);
  unsigned int v15 = v14 - 1;
  if (v12 < v14 - 1) {
    unsigned int v15 = v12;
  }
  if (v14) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = v12;
  }
  unsigned int v17 = v9[v16];
  v9[v16] = -1;
  unsigned int v53 = v17;
  if (v16 < *(_DWORD *)(v11 + 420)
    && (Vocab::setCompareVocab(0, v13), *(_DWORD *)(v11 + 616) == v10)
    && !Vocab::compare((Vocab *)v9, (const unsigned int *)(*(void *)(v11 + 632) - 4 * *(int *)(v11 + 624)), v18))
  {
    *unsigned int v8 = *(_DWORD *)(v11 + 656);
    uint64_t result = *(void *)(v11 + 648);
  }
  else
  {
    uint64_t v19 = "C2";
    if (v10 == -1) {
      uint64_t v19 = "C1";
    }
    int v20 = &__str[snprintf(__str, 0x1388uLL, "%s ", v19)];
    if ((int)v16 - 1 >= 0)
    {
      int v21 = &v9[(v16 - 1)];
      int v22 = v16;
      do
      {
        unsigned int v23 = *v21--;
        size_t v24 = (const char *)(*(uint64_t (**)(void, void))(**(void **)(v11 + 24) + 32))(*(void *)(v11 + 24), v23);
        v20 += snprintf(v20, (char *)&v58 - v20, "%s ", v24);
        --v22;
      }
      while (v22 > 0);
    }
    if (v10 == -1)
    {
      int v25 = snprintf(v20, __str - v20 + 5000, "\n");
    }
    else
    {
      (*(void (**)(void, const unsigned int *))(**(void **)(v11 + 24) + 32))(*(void *)(v11 + 24), v10);
      int v25 = snprintf(v20, __str - v20 + 5000, "%s\n");
    }
    if (send(*(_DWORD *)(v11 + 416), __str, &v20[v25] - __str, 0) == -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"send: server ", 13);
      size_t v35 = (void *)std::ostream::operator<<();
      unint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"@", 1);
      size_t v37 = strlen((const char *)(v11 + 156));
      unint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v11 + 156, v37);
      uint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)": ", 2);
      size_t v40 = __error();
      double v41 = srilm_ts_strerror(*v40);
      size_t v42 = strlen(v41);
      long long v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v41, v42);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v43);
      close(*(_DWORD *)(v11 + 416));
      *(_DWORD *)(v11 + 416) = -1;
      exit(1);
    }
    unsigned int v17 = v53;
    int v26 = recv(*(_DWORD *)(v11 + 416), __s, 0xFFuLL, 0);
    if (v26 < 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"recv: server ", 13);
      size_t v44 = (void *)std::ostream::operator<<();
      uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"@", 1);
      size_t v46 = strlen((const char *)(v11 + 156));
      long long v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v11 + 156, v46);
      long long v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": ", 2);
      size_t v49 = __error();
      long long v50 = srilm_ts_strerror(*v49);
      size_t v51 = strlen(v50);
      long long v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v50, v51);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v52);
      close(*(_DWORD *)(v11 + 416));
      exit(1);
    }
    __s[v26] = 0;
    uint64_t v54 = 0;
    if (*(unsigned __int16 *)__s != 19279 || sscanf(v56, "%lu %u", &v54, v8) != 2)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"server ", 7);
      uint64_t v29 = (void *)std::ostream::operator<<();
      uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"@", 1);
      size_t v31 = strlen((const char *)(v11 + 156));
      uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v11 + 156, v31);
      int v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)": unexpected return: ", 21);
      size_t v34 = strlen(__s);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)__s, v34);
      close(*(_DWORD *)(v11 + 416));
      exit(1);
    }
    if (v16 >= *(_DWORD *)(v11 + 420))
    {
      uint64_t result = v54;
    }
    else
    {
      *(_DWORD *)(v11 + 616) = v10;
      *(_DWORD *)Array<unsigned int>::operator[]((int *)(v11 + 624), v16) = -1;
      Vocab::copy(*(void *)(v11 + 632) - 4 * *(int *)(v11 + 624), v9, v27);
      uint64_t result = v54;
      *(void *)(v11 + 648) = v54;
      *(_DWORD *)(v11 + 656) = *v8;
    }
  }
  v9[v16] = v17;
  return result;
}

void sub_1B2432590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  *(_DWORD *)(v13 + 4 * v14) = a13;
  _Unwind_Resume(a1);
}

float LMClient::contextBOW(LMClient *this, const unsigned int *a2)
{
  uint64_t v2 = MEMORY[0x1F4188790](this, a2);
  v53[0] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(v2 + 416) == -1) {
    exit(1);
  }
  int v5 = v4;
  uint64_t v6 = (unsigned int *)v3;
  uint64_t v7 = v2;
  unsigned int v8 = Vocab::length((uint64_t)v3, v3);
  int v10 = *(_DWORD *)(v7 + 152);
  unsigned int v11 = v10 - 1;
  if (v8 < v10 - 1) {
    unsigned int v11 = v8;
  }
  if (v10) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = v8;
  }
  unsigned int v13 = v6[v12];
  v6[v12] = -1;
  if (v12 < *(_DWORD *)(v7 + 420)
    && (Vocab::setCompareVocab(0, v9), *(_DWORD *)(v7 + 688) == v5)
    && !Vocab::compare((Vocab *)v6, (const unsigned int *)(*(void *)(v7 + 672) - 4 * *(int *)(v7 + 664)), v14))
  {
    float v22 = *(float *)(v7 + 692);
  }
  else
  {
    unsigned int v15 = &__str[snprintf(__str, 0x1388uLL, "%s ", "B")];
    if ((int)v12 - 1 >= 0)
    {
      uint64_t v16 = &v6[(v12 - 1)];
      int v17 = v12;
      do
      {
        unsigned int v18 = *v16--;
        uint64_t v19 = (const char *)(*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 32))(*(void *)(v7 + 24), v18);
        v15 += snprintf(v15, (char *)v53 - v15, "%s ", v19);
        --v17;
      }
      while (v17 > 0);
    }
    int v20 = snprintf(v15, (char *)v53 - v15, "%u\n", v5);
    if (send(*(_DWORD *)(v7 + 416), __str, &v15[v20] - __str, 0) == -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"server ", 7);
      size_t v31 = (void *)std::ostream::operator<<();
      uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"@", 1);
      size_t v33 = strlen((const char *)(v7 + 156));
      size_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v7 + 156, v33);
      size_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)": send ", 7);
      unint64_t v36 = __error();
      size_t v37 = srilm_ts_strerror(*v36);
      size_t v38 = strlen(v37);
      uint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v37, v38);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v39);
      close(*(_DWORD *)(v7 + 416));
      *(_DWORD *)(v7 + 416) = -1;
      exit(1);
    }
    int v21 = recv(*(_DWORD *)(v7 + 416), __s, 0xFFuLL, 0);
    if (v21 < 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"recv: server ", 13);
      size_t v40 = (void *)std::ostream::operator<<();
      double v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"@", 1);
      size_t v42 = strlen((const char *)(v7 + 156));
      long long v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, v7 + 156, v42);
      size_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": ", 2);
      uint64_t v45 = __error();
      size_t v46 = srilm_ts_strerror(*v45);
      size_t v47 = strlen(v46);
      long long v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v46, v47);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v48);
      close(*(_DWORD *)(v7 + 416));
      exit(1);
    }
    __s[v21] = 0;
    if (*(unsigned __int16 *)__s != 19279 || (double v49 = 0.0, !parseLogP(v51, &v49)))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"server ", 7);
      int v25 = (void *)std::ostream::operator<<();
      int v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"@", 1);
      size_t v27 = strlen((const char *)(v7 + 156));
      uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v7 + 156, v27);
      uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)": unexpected return: ", 21);
      size_t v30 = strlen(__s);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)__s, v30);
      close(*(_DWORD *)(v7 + 416));
      exit(1);
    }
    float v22 = v49;
    if (v12 < *(_DWORD *)(v7 + 420))
    {
      *(_DWORD *)Array<unsigned int>::operator[]((int *)(v7 + 664), v12) = -1;
      Vocab::copy(*(void *)(v7 + 672) - 4 * *(int *)(v7 + 664), v6, v23);
      *(_DWORD *)(v7 + 688) = v5;
      *(float *)(v7 + 692) = v22;
    }
  }
  v6[v12] = v13;
  return v22;
}

void sub_1B2432A14(_Unwind_Exception *a1)
{
  *(_DWORD *)(v1 + 4 * v2) = v3;
  _Unwind_Resume(a1);
}

uint64_t LMClient::addUnkWords(LMClient *this)
{
  return 1;
}

sdapi::SimpleStringMapper *sdapi::SimpleStringMapper::SimpleStringMapper(sdapi::SimpleStringMapper *this, const quasar::PTree *a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  uint64_t v4 = quasar::PTree::begin(a2);
  for (uint64_t i = quasar::PTree::end(a2); v4 != i; v4 += 88)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
    }
    else
    {
      long long v6 = *(_OWORD *)v4;
      v40.__r_.__value_.__r.__words[2] = *(void *)(v4 + 16);
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v6;
    }
    uint64_t String = quasar::PTree::getString((quasar::PTree *)(v4 + 24));
    if (*(char *)(String + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)String, *(void *)(String + 8));
    }
    else
    {
      long long v8 = *(_OWORD *)String;
      v39.__r_.__value_.__r.__words[2] = *(void *)(String + 16);
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v8;
    }
    unint64_t v36 = 0;
    size_t v37 = 0;
    unint64_t v38 = 0;
    std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v39.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      size_t v37 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v36, (long long *)&v39);
    }
    else
    {
      uint64_t v11 = quasar::PTree::begin((quasar::PTree *)(v4 + 24));
      uint64_t v12 = quasar::PTree::end((quasar::PTree *)(v4 + 24));
      while (v11 != v12)
      {
        uint64_t v13 = quasar::PTree::getString((quasar::PTree *)(v11 + 24));
        if (*(char *)(v13 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v13, *(void *)(v13 + 8));
        }
        else
        {
          long long v14 = *(_OWORD *)v13;
          *(void *)&long long v20 = *(void *)(v13 + 16);
          *(_OWORD *)std::string __p = v14;
        }
        unsigned int v15 = v37;
        if ((unint64_t)v37 >= v38)
        {
          int v17 = (long long *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v36, (long long *)__p);
        }
        else
        {
          if (SBYTE7(v20) < 0)
          {
            std::string::__init_copy_ctor_external(v37, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            long long v16 = *(_OWORD *)__p;
            v37->__r_.__value_.__r.__words[2] = v20;
            *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
          }
          int v17 = (long long *)&v15[1];
        }
        size_t v37 = (std::string *)v17;
        if (SBYTE7(v20) < 0) {
          operator delete(__p[0]);
        }
        v11 += 88;
      }
    }
    if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(this, (unsigned __int8 *)&v40))
    {
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"text mapper entries must be unique", 34);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    double v41 = &v40;
    int v10 = (std::vector<std::wstring> *)(std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this, (unsigned __int8 *)&v40, (uint64_t)&std::piecewise_construct, (long long **)&v41)+ 40);
    if (v10 != (std::vector<std::wstring> *)&v36) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v10, v36, (long long *)v37, 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v36) >> 3));
    }
    __p[0] = &v36;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
  }
  return this;
}

void sub_1B2432D14()
{
}

void sub_1B2432D1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  *(void *)(v15 - 176) = v14;
  if (a14 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B2432D48);
}

void sub_1B2432D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = (void **)(v10 - 184);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (*(char *)(v10 - 137) < 0) {
    operator delete(*(void **)(v10 - 160));
  }
  if (*(char *)(v10 - 105) < 0) {
    operator delete(*(void **)(v10 - 128));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(v9);
  _Unwind_Resume(a1);
}

std::string *sdapi::SimpleStringMapper::map@<X0>(void *a1@<X0>, std::vector<std::string>::value_type *a2@<X1>, std::string *a3@<X8>)
{
  int v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1, (unsigned __int8 *)a2);
  if (v5)
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    long long v6 = (long long *)*((void *)v5 + 5);
    uint64_t v7 = (long long *)*((void *)v5 + 6);
    return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a3, v6, v7, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 3));
  }
  else
  {
    return (std::string *)std::vector<std::string>::vector((std::vector<std::string> *)a3, 1uLL, a2);
  }
}

void sdapi::SdapiG2P::overrideParams(sdapi::SdapiUtil *a1, uint64_t a2, uint64_t a3, char *a4)
{
  SharedMutex = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(a1);
  std::recursive_mutex::lock(SharedMutex);
  std::string::basic_string[abi:ne180100]<0>(__p, a4);
  quasar::PTree::getChild(a3, (uint64_t)__p);
}

void sub_1B2433160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::recursive_mutex *a10, long long __p, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,long long a27)
{
  quasar::PTree::~PTree((quasar::PTree *)(v28 - 152));
  if (a2 == 1)
  {
    exception_ptr = (const quasar::PTree::BadPath *)__cxa_get_exception_ptr(a1);
    quasar::PTree::BadPath::BadPath((quasar::PTree::BadPath *)(v28 - 152), exception_ptr);
    __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 2)
    {
      a26 = 0u;
      a27 = 0u;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Overrides JSON does not contain section for '", 45);
      size_t v33 = strlen(v27);
      long long v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v27, v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"'.  Skipping.", 13);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
    }
    quasar::PTree::BadPath::~BadPath((std::exception *)(v28 - 152));
    __cxa_end_catch();
    JUMPOUT(0x1B2433138);
  }
  std::recursive_mutex::unlock(a10);
  _Unwind_Resume(a1);
}

quasar::PTree::BadPath *quasar::PTree::BadPath::BadPath(quasar::PTree::BadPath *this, const quasar::PTree::BadPath *a2)
{
  *(void *)this = &unk_1F0A58F38;
  int v3 = (std::string *)((char *)this + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 3);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return this;
}

void sub_1B2433354(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sdapi::SdapiG2P::SdapiG2P(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v7 = a6[1];
  v10[0] = *a6;
  v10[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = a7[1];
  v9[0] = *a7;
  v9[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  quasar::G2P::G2P(a1, v10, v9);
}

void sub_1B2434304(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::exception a23)
{
}

void sub_1B2434318()
{
}

void sub_1B2434320(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  if (a66 < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    exception_ptr = (const quasar::PTree::BadPath *)__cxa_get_exception_ptr(a1);
    quasar::PTree::BadPath::BadPath((quasar::PTree::BadPath *)v69, exception_ptr);
    __cxa_begin_catch(a1);
    quasar::PTree::BadPath::~BadPath(v69);
    __cxa_end_catch();
    JUMPOUT(0x1B2433870);
  }
  JUMPOUT(0x1B24343B4);
}

void sub_1B2434374(_Unwind_Exception *a1)
{
  if (v6 < 0) {
    operator delete(v5);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  quasar::PTree::~PTree((quasar::PTree *)&v11);
  quasar::PTree::~PTree((quasar::PTree *)&v12);
  quasar::PTree::~PTree((quasar::PTree *)&v13);
  std::recursive_mutex::unlock(v2);
  uint64_t v4 = *((void *)v1 + 42);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  quasar::G2P::~G2P(v1);
  _Unwind_Resume(a1);
}

void sdapi::SdapiG2P::~SdapiG2P(std::__shared_weak_count **this)
{
  *this = (std::__shared_weak_count *)&unk_1F0A51850;
  SharedMutex = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex((sdapi::SdapiUtil *)this);
  std::recursive_mutex::lock(SharedMutex);
  SDVoc_Delete();
  SDVoc_Delete();
  SDParamSetHolder_Delete();
  std::recursive_mutex::unlock(SharedMutex);
  int v3 = this[42];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  quasar::G2P::~G2P((quasar::G2P *)this);
}

{
  uint64_t vars8;

  sdapi::SdapiG2P::~SdapiG2P(this);
  JUMPOUT(0x1B3EA8670);
}

void sdapi::SdapiG2P::doG2P(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  SharedMutex = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex((sdapi::SdapiUtil *)a1);
  std::recursive_mutex::lock(SharedMutex);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v7 = *(void **)(a1 + 328);
  if (v7) {
    sdapi::SimpleStringMapper::map(v7, (std::vector<std::string>::value_type *)a2, (std::string *)&v72);
  }
  else {
    std::vector<std::string>::vector(&v72, 1uLL, (const std::vector<std::string>::value_type *)a2);
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    memset(__v, 0, sizeof(__v));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
    char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)"Generating pronunciations for orthography=", 42);
    int v9 = *(char *)(a2 + 23);
    if (v9 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *(void *)a2;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v11 = *(void *)(a2 + 8);
    }
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", spoken-form=", 14);
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)", ";
    __s.__r_.__value_.__l.__size_ = 2;
    quasar::join<std::vector<std::string>>((uint64_t *)&v72, (uint64_t *)&__s);
    if (SHIBYTE(__p.__end_cap_.__value_) >= 0) {
      std::vector<char>::pointer p_p = (std::vector<char>::pointer)&__p;
    }
    else {
      std::vector<char>::pointer p_p = __p.__begin_;
    }
    if (SHIBYTE(__p.__end_cap_.__value_) >= 0) {
      uint64_t value_high = HIBYTE(__p.__end_cap_.__value_);
    }
    else {
      uint64_t value_high = (uint64_t)__p.__end_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)p_p, value_high);
    if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
      operator delete(__p.__begin_);
    }
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__v);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v72.__end_ - (char *)v72.__begin_) >> 3) >= 4) {
    unint64_t v16 = 4;
  }
  else {
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v72.__end_ - (char *)v72.__begin_) >> 3);
  }
  if (v16)
  {
    uint64_t v17 = 0;
    unint64_t v46 = v16;
    do
    {
      uint64_t v55 = *(void *)(a1 + 312);
      uint64_t v56 = SDWord_New();
      uint64_t v54 = 0;
      unsigned int v18 = &v72.__begin_[v17];
      if (SHIBYTE(v18->__r_.__value_.__r.__words[2]) < 0) {
        unsigned int v18 = (std::string *)v18->__r_.__value_.__r.__words[0];
      }
      uint64_t v54 = v18;
      int v53 = 0;
      if (SDRecog_GuessPronsNonAcoustic() == 1)
      {
        unsigned int HumanReadableProns = SDWord_GetHumanReadableProns();
        std::vector<char>::vector(&__p, HumanReadableProns);
        SDWord_GetHumanReadableProns();
        begiuint64_t n = __p.__begin_;
        std::string::basic_string[abi:ne180100]<0>(&__s, __p.__begin_);
        v50[0] = 0;
        v50[1] = 0;
        size_t v51 = 0;
        while (1)
        {
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          {
            if (!__s.__r_.__value_.__l.__size_)
            {
LABEL_56:
              std::vector<quasar::PronChoice>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::PronChoice*>,std::__wrap_iter<quasar::PronChoice*>>(a3, a3[1], (uint64_t)v50[0], (uint64_t)v50[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)v50[1] - (char *)v50[0]) >> 3));
              *(void *)std::__split_buffer<std::string> __v = v50;
              std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
              unint64_t v16 = v46;
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__s.__r_.__value_.__l.__data_);
              }
              if (__p.__begin_)
              {
                __p.__end_ = __p.__begin_;
                operator delete(__p.__begin_);
              }
              break;
            }
            std::string::__init_copy_ctor_external(&v49, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else
          {
            if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
              goto LABEL_56;
            }
            std::string v49 = __s;
          }
          *(_DWORD *)std::__split_buffer<std::string> __v = 1;
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external((std::string *)&__v[8], v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
          }
          else {
            *(std::string *)&__v[8] = v49;
          }
          *(_DWORD *)&__v[32] = 0;
          long long v21 = (char *)v50[1];
          if (v50[1] >= v51)
          {
            long long v24 = (void *)std::vector<quasar::PronChoice>::__push_back_slow_path<quasar::PronChoice>((uint64_t *)v50, (uint64_t)__v);
          }
          else
          {
            *(_DWORD *)v50[1] = *(_DWORD *)__v;
            long long v22 = (std::string *)(v21 + 8);
            if ((__v[31] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)&__v[8], *(std::string::size_type *)&__v[16]);
            }
            else
            {
              long long v23 = *(_OWORD *)&__v[8];
              *((void *)v21 + 3) = *(void *)&__v[24];
              *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
            }
            *((_DWORD *)v21 + 8) = *(_DWORD *)&__v[32];
            long long v24 = v21 + 40;
          }
          v50[1] = v24;
          if ((__v[31] & 0x80000000) != 0) {
            operator delete(*(void **)&__v[8]);
          }
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v49.__r_.__value_.__l.__data_);
          }
          if (quasar::gLogLevel >= 5)
          {
            long long v70 = 0u;
            long long v71 = 0u;
            long long v68 = 0u;
            long long v69 = 0u;
            long long v66 = 0u;
            long long v67 = 0u;
            long long v64 = 0u;
            long long v65 = 0u;
            long long v62 = 0u;
            long long v63 = 0u;
            long long v60 = 0u;
            long long v61 = 0u;
            long long v58 = 0u;
            long long v59 = 0u;
            memset(__v, 0, sizeof(__v));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::vector<std::string>::pointer p_s = &__s;
            }
            else {
              std::vector<std::string>::pointer p_s = (std::vector<std::string>::pointer)__s.__r_.__value_.__r.__words[0];
            }
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
            }
            else {
              uint64_t size = __s.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)p_s, size);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__v);
          }
          begin += strlen(begin) + 1;
          MEMORY[0x1B3EA7B20](&__s, begin);
        }
      }
      SDWord_DeleteList();
      ++v17;
    }
    while (v17 != v16);
  }
  uint64_t v28 = *a3;
  uint64_t v27 = a3[1];
  if (*a3 != v27)
  {
    memset(&__s, 0, sizeof(__s));
    do
    {
      quasar::PronChoice::PronChoice(&__p, v28);
      if (quasar::gLogLevel >= 5)
      {
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        memset(__v, 0, sizeof(__v));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
        long long v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)"Orthography=", 12);
        int v30 = *(char *)(a2 + 23);
        if (v30 >= 0) {
          uint64_t v31 = a2;
        }
        else {
          uint64_t v31 = *(void *)a2;
        }
        if (v30 >= 0) {
          uint64_t v32 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v32 = *(void *)(a2 + 8);
        }
        size_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
        long long v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", Prons=", 8);
        quasar::PronChoice::toString((uint64_t *)v50, (quasar::PronChoice *)&__p);
        if (SHIBYTE(v51) >= 0) {
          long long v35 = v50;
        }
        else {
          long long v35 = (void **)v50[0];
        }
        if (SHIBYTE(v51) >= 0) {
          uint64_t v36 = HIBYTE(v51);
        }
        else {
          uint64_t v36 = (uint64_t)v50[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
        if (SHIBYTE(v51) < 0) {
          operator delete(v50[0]);
        }
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__v);
      }
      quasar::PronChoice::toString((uint64_t *)v50, (quasar::PronChoice *)&__p);
      std::vector<std::string>::pointer v37 = (std::vector<std::string>::pointer)__s.__r_.__value_.__l.__size_;
      if (__s.__r_.__value_.__l.__size_ >= __s.__r_.__value_.__r.__words[2])
      {
        unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__s.__r_.__value_.__l.__size_ - __s.__r_.__value_.__r.__words[0]) >> 3);
        unint64_t v40 = v39 + 1;
        if (v39 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556
           * ((uint64_t)(__s.__r_.__value_.__r.__words[2] - __s.__r_.__value_.__r.__words[0]) >> 3) > v40)
          unint64_t v40 = 0x5555555555555556
              * ((uint64_t)(__s.__r_.__value_.__r.__words[2] - __s.__r_.__value_.__r.__words[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(__s.__r_.__value_.__r.__words[2] - __s.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
          unint64_t v41 = 0xAAAAAAAAAAAAAAALL;
        else {
          unint64_t v41 = v40;
        }
        *(void *)&__v[32] = (char *)&__s.__r_.__value_.__l + 16;
        if (v41) {
          size_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&__s.__r_.__value_.__r.__words[2], v41);
        }
        else {
          size_t v42 = 0;
        }
        long long v43 = &v42[24 * v39];
        *(void *)std::__split_buffer<std::string> __v = v42;
        *(void *)&__v[8] = v43;
        *(void *)&__v[24] = &v42[24 * v41];
        long long v44 = *(_OWORD *)v50;
        *((void *)v43 + 2) = v51;
        *(_OWORD *)long long v43 = v44;
        v50[1] = 0;
        size_t v51 = 0;
        v50[0] = 0;
        *(void *)&__v[16] = v43 + 24;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&__s, (std::__split_buffer<std::string> *)__v);
        uint64_t v45 = (std::string *)__s.__r_.__value_.__l.__size_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
        __s.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
        if (SHIBYTE(v51) < 0) {
          operator delete(v50[0]);
        }
      }
      else
      {
        long long v38 = *(_OWORD *)v50;
        *(void *)(__s.__r_.__value_.__l.__size_ + 16) = v51;
        *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
        __s.__r_.__value_.__l.__size_ = (std::string::size_type)&v37[1];
      }
      if (v48 < 0) {
        operator delete(__p.__end_);
      }
      v28 += 40;
    }
    while (v28 != v27);
    (*(void (**)(void, uint64_t, std::string *))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), a2, &__s);
    *(void *)std::__split_buffer<std::string> __v = &__s;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
  }
  if (SDApi_HasErrored())
  {
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    memset(__v, 0, sizeof(__v));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)"Sdapi has errored. Dying.", 25);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__v);
  }
  *(void *)std::__split_buffer<std::string> __v = &v72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
  std::recursive_mutex::unlock(SharedMutex);
}

void sub_1B2434C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, void *a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__pa,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,void *a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,std::__split_buffer<std::wstring> *a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  if (SHIBYTE(a33) < 0) {
    operator delete(__pa);
  }
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a56);
  __pa = (void *)(v57 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  __pa = a25;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  std::recursive_mutex::unlock(v56);
  _Unwind_Resume(a1);
}

uint64_t sdapi::SdapiG2P::getG2PVersion(sdapi::SdapiG2P *this)
{
  return 1;
}

void sdapi::SdapiG2P::batchDoG2P()
{
  memset(v0, 0, sizeof(v0));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v0);
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, std::vector<std::string>::size_type __n, const std::vector<std::string>::value_type *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](this, __n);
    std::vector<std::string>::pointer end = this->__end_;
    std::vector<std::string>::size_type v7 = 3 * __n;
    char v8 = &end[__n];
    uint64_t v9 = 8 * v7;
    do
    {
      if (SHIBYTE(__x->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(end, __x->__r_.__value_.__l.__data_, __x->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v10 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
        end->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
      }
      ++end;
      v9 -= 24;
    }
    while (v9);
    this->__end_ = v8;
  }
  return this;
}

void sub_1B2434EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::allocate_shared[abi:ne180100]<sdapi::SimpleStringMapper,std::allocator<sdapi::SimpleStringMapper>,quasar::PTree &,void>@<X0>(const quasar::PTree *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x40uLL);
  uint64_t result = std::__shared_ptr_emplace<sdapi::SimpleStringMapper>::__shared_ptr_emplace[abi:ne180100]<quasar::PTree &,std::allocator<sdapi::SimpleStringMapper>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B2434F64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<sdapi::SimpleStringMapper>::__shared_ptr_emplace[abi:ne180100]<quasar::PTree &,std::allocator<sdapi::SimpleStringMapper>,0>(void *a1, const quasar::PTree *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F6B8;
  sdapi::SimpleStringMapper::SimpleStringMapper((sdapi::SimpleStringMapper *)(a1 + 3), a2);
  return a1;
}

void sub_1B2434FC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<sdapi::SimpleStringMapper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F6B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<sdapi::SimpleStringMapper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F6B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<sdapi::SimpleStringMapper>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(a1 + 24);
}

uint64_t quasar::SeevaBatchDecoder::SeevaBatchDecoder(uint64_t a1, long long *a2)
{
  uint64_t v3 = quasar::Decoder::Decoder(a1, a2);
  *(void *)uint64_t v3 = &unk_1F0A53CD0;
  *(void *)(v3 + 520) = 0;
  *(void *)(v3 + 504) = 0;
  *(void *)(v3 + 512) = 0;
  uint64_t v4 = v3 + 528;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 480) = 0u;
  *(void *)(v3 + 528) = &unk_1F0A51028;
  *(void *)(v3 + 536) = 0x203F000000;
  *(void *)(v3 + 544) = 0x200000002;
  *(unsigned char *)(a1 + 552) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(v3 + 560), "/cpu:0");
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 600) = 0;
  *(_WORD *)(a1 + 608) = 1;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 656) = 0;
  *(void *)(v4 + 84) = 0;
  *(void *)(v4 + 100) = 0;
  *(void *)(v4 + 92) = 0;
  *(void *)(v4 + 105) = 0;
  kaldi::quasar::SeevaInferenceTensorNames::SeevaInferenceTensorNames((kaldi::quasar::SeevaInferenceTensorNames *)(a1 + 672));
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(void *)(a1 + 944) = 0;
  *(_DWORD *)(a1 + 992) = 1065353216;
  *(void *)(a1 + 1000) = 0;
  *(unsigned char *)(a1 + 57) = 0;
  return a1;
}

void sub_1B2435164(_Unwind_Exception *a1)
{
  kaldi::quasar::SeevaStepInferenceConfig::~SeevaStepInferenceConfig(v2);
  if (*(char *)(v1 + 527) < 0) {
    operator delete(*(void **)(v1 + 504));
  }
  if (*(char *)(v1 + 495) < 0) {
    operator delete(*(void **)(v1 + 472));
  }
  if (*(char *)(v1 + 471) < 0) {
    operator delete(*(void **)(v1 + 448));
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)v1);
  _Unwind_Resume(a1);
}

void quasar::SeevaBatchDecoder::~SeevaBatchDecoder(quasar::SeevaBatchDecoder *this)
{
  *(void *)this = &unk_1F0A53CD0;
  uint64_t v2 = *((void *)this + 125);
  *((void *)this + 125) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)this + 960);
  if (*((char *)this + 951) < 0) {
    operator delete(*((void **)this + 116));
  }
  if (*((char *)this + 927) < 0) {
    operator delete(*((void **)this + 113));
  }
  if (*((char *)this + 903) < 0) {
    operator delete(*((void **)this + 110));
  }
  if (*((char *)this + 871) < 0) {
    operator delete(*((void **)this + 106));
  }
  uint64_t v3 = *((void *)this + 105);
  *((void *)this + 105) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 104);
  *((void *)this + 104) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 103);
  *((void *)this + 103) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 102);
  *((void *)this + 102) = 0;
  if (v6) {
    std::default_delete<kaldi::quasar::Vocab>::operator()[abi:ne180100]((uint64_t)this + 816, v6);
  }
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)this + 101, 0);
  *((void *)this + 84) = &unk_1F0A513C8;
  if (*((char *)this + 799) < 0) {
    operator delete(*((void **)this + 97));
  }
  if (*((char *)this + 775) < 0) {
    operator delete(*((void **)this + 94));
  }
  if (*((char *)this + 751) < 0) {
    operator delete(*((void **)this + 91));
  }
  if (*((char *)this + 727) < 0) {
    operator delete(*((void **)this + 88));
  }
  if (*((char *)this + 703) < 0) {
    operator delete(*((void **)this + 85));
  }
  *((void *)this + 66) = &unk_1F0A51028;
  if (*((char *)this + 671) < 0) {
    operator delete(*((void **)this + 81));
  }
  if (*((char *)this + 639) < 0) {
    operator delete(*((void **)this + 77));
  }
  if (*((char *)this + 607) < 0) {
    operator delete(*((void **)this + 73));
  }
  if (*((char *)this + 583) < 0) {
    operator delete(*((void **)this + 70));
  }
  if (*((char *)this + 527) < 0) {
    operator delete(*((void **)this + 63));
  }
  if (*((char *)this + 495) < 0) {
    operator delete(*((void **)this + 59));
  }
  if (*((char *)this + 471) < 0) {
    operator delete(*((void **)this + 56));
  }
  quasar::Decoder::~Decoder(this);
}

{
  uint64_t vars8;

  quasar::SeevaBatchDecoder::~SeevaBatchDecoder(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::SeevaBatchDecoder::registerParams(quasar::SeevaBatchDecoder *this, quasar::SystemConfig *a2)
{
  kaldi::quasar::SeevaInferenceConfig::Register((uint64_t)this + 528, (uint64_t)a2);
  kaldi::quasar::SeevaInferenceTensorNames::Register((uint64_t)this + 672, (uint64_t)a2);
  if (*((char *)a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v10, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else {
    std::string v10 = *(std::string *)((char *)a2 + 8);
  }
  uint64_t v4 = (void **)((char *)this + 928);
  if (*((char *)this + 951) < 0) {
    operator delete(*v4);
  }
  *(_OWORD *)uint64_t v4 = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
  *((void *)this + 118) = *((void *)&v10.__r_.__value_.__l + 2);
  std::string::basic_string[abi:ne180100]<0>(&v10, "seeva-batch");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 143, 0, (uint64_t)&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "seeva inference graph file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&v10.__r_.__value_.__l.__data_, (uint64_t)this + 448, (uint64_t)__p, 1, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "vocab-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "the vocab file that describes model output token");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&v10.__r_.__value_.__l.__data_, (uint64_t)this + 472, (uint64_t)__p, 1, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "vocab-is-binary");
  std::string::basic_string[abi:ne180100]<0>(__p, "vocab file is binary");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&v10.__r_.__value_.__l.__data_, (uint64_t)this + 496, (uint64_t)__p, 1, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "model-format-version");
  std::string::basic_string[abi:ne180100]<0>(__p, "model format version");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)&v10.__r_.__value_.__l.__data_, (uint64_t)this + 500, (uint64_t)__p, 1, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "transform-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "feature transform file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&v10.__r_.__value_.__l.__data_, (uint64_t)this + 504, (uint64_t)__p, 0, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "lm-rescore-chain");
  std::string::basic_string[abi:ne180100]<0>(__p, "the LM rescore decoder chain");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&v10.__r_.__value_.__l.__data_, (uint64_t)this + 848, (uint64_t)__p, 0, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "use-second-rescore");
  std::string::basic_string[abi:ne180100]<0>(__p, "use the LM rescoring decoder");
  uint64_t v5 = (char *)this + 873;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&v10.__r_.__value_.__l.__data_, (uint64_t)this + 873, (uint64_t)__p, 0, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "remove-unk");
  std::string::basic_string[abi:ne180100]<0>(__p, "remove the unknown word during rescoring");
  uint64_t v6 = (char *)this + 872;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&v10.__r_.__value_.__l.__data_, (uint64_t)this + 872, (uint64_t)__p, 0, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "unk-word");
  std::string::basic_string[abi:ne180100]<0>(__p, "map the OOV word to this word");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&v10.__r_.__value_.__l.__data_, (uint64_t)this + 880, (uint64_t)__p, 0, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "e2e-word-map-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "map the E2E word to Quasar");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&v10.__r_.__value_.__l.__data_, (uint64_t)this + 904, (uint64_t)__p, 0, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "lm-weight");
  std::string::basic_string[abi:ne180100]<0>(__p, "lm weight for LM rescoring");
  std::vector<std::string>::size_type v7 = (_DWORD *)((char *)this + 952);
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)&v10.__r_.__value_.__l.__data_, (uint64_t)v7, (uint64_t)__p, 0, 143, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  unsigned char *v6 = 0;
  _DWORD *v7 = 1045220557;
  *uint64_t v5 = 0;
}

void sub_1B2435A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::SeevaInferenceTensorNames::Register(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "source-input-str");
  std::string::basic_string[abi:ne180100]<0>(__p, "source input tensor name");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 40))(a2, v6, a1 + 8, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "source-catf-input-str");
  std::string::basic_string[abi:ne180100]<0>(__p, "source catf input tensor name");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 40))(a2, v6, a1 + 32, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "length-pen-wt-str");
  std::string::basic_string[abi:ne180100]<0>(__p, "length penalty weight tensor name");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 40))(a2, v6, a1 + 56, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "nbest-list-str");
  std::string::basic_string[abi:ne180100]<0>(__p, "nbest list tensor name");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 40))(a2, v6, a1 + 80, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "nbest-score-str");
  std::string::basic_string[abi:ne180100]<0>(__p, "nbest score tensor name");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 40))(a2, v6, a1 + 104, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B2435D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SeevaBatchDecoder::finishInit(quasar::SeevaBatchDecoder *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  std::fstream::basic_fstream(&v1, (const std::string *)((char *)this + 472), 8u);
  operator new();
}

void sub_1B2436508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19) {
    (*(void (**)(uint64_t))(*(void *)a19 + 8))(a19);
  }
  std::fstream::~fstream((void (__cdecl ***)(std::fstream *__hidden))&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

uint64_t quasar::SeevaBatchDecoder::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(kaldi::OnlineFeatureMatrix **)a2;
  char v5 = *(std::__shared_weak_count **)(a2 + 8);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = 0;
  unsigned int v118 = *((_DWORD *)v4 + 6);
  long long v117 = 0u;
  long long v116 = 0u;
  long long v115 = 0u;
  while (kaldi::OnlineFeatureMatrix::IsValidFrame((int32x2_t *)v4, v6, 1))
  {
    kaldi::OnlineFeatureMatrix::GetFrame(v4, v6, (uint64_t *)v119);
    v109.i32[0] = 0;
    std::deque<std::vector<float>>::emplace_back<int const&,int>(&v115, (int *)&v118, (int *)&v109);
    uint64_t v7 = (int)v118;
    if (v118)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      std::string::size_type v10 = v119[0].__r_.__value_.__r.__words[0];
      uint64_t v11 = *(void *)(*(void *)(*((void *)&v115 + 1)
                                  + 8 * ((*((void *)&v117 + 1) + (void)v117 - 1) / 0xAAuLL))
                      + 24 * ((*((void *)&v117 + 1) + (void)v117 - 1) % 0xAAuLL));
      do
      {
        *(_DWORD *)(v11 + 4 * v9++) = *(_DWORD *)(v10 + (v8 >> 30));
        v8 += 0x100000000;
      }
      while (v7 != v9);
    }
    uint64_t v6 = (v6 + 1);
  }
  uint64_t v12 = v6;
  if ((int)v6 < *(_DWORD *)(a1 + 540))
  {
    LODWORD(v12) = v6;
    do
    {
      std::deque<std::vector<float>>::push_back(&v115, *(void *)(*((void *)&v115 + 1) + 8 * ((*((void *)&v117 + 1) + (void)v117 - 1) / 0xAAuLL))+ 24 * ((*((void *)&v117 + 1) + (void)v117 - 1) % 0xAAuLL));
      uint64_t v12 = (v12 + 1);
    }
    while ((int)v12 < *(_DWORD *)(a1 + 540));
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v113, v12, v118, 0, 0);
  uint64_t v13 = (void **)*((void *)&v115 + 1);
  if (v12)
  {
    uint64_t v14 = 0;
    unsigned int v15 = v118;
    uint64_t v16 = v117;
    uint64_t v17 = *(void *)v113;
    if (v118 <= 1) {
      unsigned int v18 = 1;
    }
    else {
      unsigned int v18 = v118;
    }
    int v19 = v114;
    do
    {
      if (v15)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = *((void *)v13[(v16 + v14) / 0xAAuLL] + 3 * ((v16 + v14) % 0xAAuLL));
        do
        {
          *(_DWORD *)(v17 + 4 * v19 * (int)v14 + (v20 >> 30)) = *(_DWORD *)(v22 + 4 * v21++);
          v20 += 0x100000000;
        }
        while (v18 != v21);
      }
      ++v14;
    }
    while (v14 != v12);
  }
  long long v23 = (void **)v116;
  if ((void **)v116 == v13)
  {
    long long v23 = v13;
  }
  else
  {
    long long v24 = &v13[(unint64_t)v117 / 0xAA];
    unint64_t v25 = (unint64_t)*v24;
    unint64_t v26 = (unint64_t)*v24 + 24 * ((unint64_t)v117 % 0xAA);
    unint64_t v27 = (unint64_t)v13[(*((void *)&v117 + 1) + (void)v117) / 0xAAuLL]
        + 24 * ((*((void *)&v117 + 1) + (void)v117) % 0xAAuLL);
    if (v26 != v27)
    {
      do
      {
        uint64_t v28 = *(void **)v26;
        if (*(void *)v26)
        {
          *(void *)(v26 + 8) = v28;
          operator delete(v28);
          unint64_t v25 = (unint64_t)*v24;
        }
        v26 += 24;
        if (v26 - v25 == 4080)
        {
          unint64_t v29 = (unint64_t)v24[1];
          ++v24;
          unint64_t v25 = v29;
          unint64_t v26 = v29;
        }
      }
      while (v26 != v27);
      uint64_t v13 = (void **)*((void *)&v115 + 1);
      long long v23 = (void **)v116;
    }
  }
  *((void *)&v117 + 1) = 0;
  unint64_t v30 = (char *)v23 - (char *)v13;
  if ((unint64_t)((char *)v23 - (char *)v13) >= 0x11)
  {
    do
    {
      operator delete(*v13);
      uint64_t v13 = (void **)(*((void *)&v115 + 1) + 8);
      *((void *)&v115 + 1) = v13;
      unint64_t v30 = v116 - (void)v13;
    }
    while ((void)v116 - (void)v13 > 0x10uLL);
  }
  if (v30 >> 3 == 1)
  {
    uint64_t v31 = 85;
  }
  else
  {
    if (v30 >> 3 != 2) {
      goto LABEL_37;
    }
    uint64_t v31 = 170;
  }
  *(void *)&long long v117 = v31;
LABEL_37:
  uint64_t v82 = a1;
  if (*(void *)(a1 + 808))
  {
    memset(&v119[0].__r_.__value_.__r.__words[1], 0, 33);
    v119[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A51768;
    kaldi::CuMatrix<float>::operator=((int32x2_t *)v119, v113);
    long long v111 = 0u;
    long long v110 = 0u;
    int32x2_t v109 = (int32x2_t)&unk_1F0A51768;
    char v112 = 0;
    kaldi::nnet1::Nnet::Feedforward(*(uint64_t **)(a1 + 808), (uint64_t)v119, &v109, -1, 0);
    (*(void (**)(std::string **__return_ptr))(**(void **)(a1 + 824) + 32))(&v106);
    uint64_t v32 = v106;
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v109);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v119);
  }
  else
  {
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 824) + 40))(v119);
    uint64_t v32 = (std::string *)v119[0].__r_.__value_.__r.__words[0];
  }
  int32x2_t v109 = 0;
  long long v110 = 0uLL;
  size_t v33 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>((uint64_t *)&v109, (long long *)(v82 + 680), (uint64_t)v32);
  long long v34 = v33;
  *(void *)&long long v110 = v33;
  if (*(float *)(v82 + 536) > 0.0)
  {
    long long v35 = (long long *)(v82 + 728);
    std::string::size_type v36 = *(void *)(v82 + 832);
    if ((unint64_t)v33 >= *((void *)&v110 + 1))
    {
      long long v34 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>((uint64_t *)&v109, v35, *(void *)(v82 + 832));
    }
    else
    {
      if (*(char *)(v82 + 751) < 0)
      {
        std::string::__init_copy_ctor_external(v33, *(const std::string::value_type **)(v82 + 728), *(void *)(v82 + 736));
      }
      else
      {
        long long v37 = *v35;
        v33->__r_.__value_.__r.__words[2] = *(void *)(v82 + 744);
        *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v37;
      }
      v34[1].__r_.__value_.__r.__words[0] = v36;
      long long v34 = (std::string *)((char *)v34 + 32);
    }
    *(void *)&long long v110 = v34;
  }
  if ((*(char *)(v82 + 607) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v82 + 607)) {
      goto LABEL_60;
    }
LABEL_53:
    long long v38 = (long long *)(v82 + 704);
    std::string::size_type v39 = *(void *)(v82 + 840);
    if ((unint64_t)v34 >= *((void *)&v110 + 1))
    {
      p_uint64_t size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>((uint64_t *)&v109, v38, *(void *)(v82 + 840));
    }
    else
    {
      if (*(char *)(v82 + 727) < 0)
      {
        std::string::__init_copy_ctor_external(v34, *(const std::string::value_type **)(v82 + 704), *(void *)(v82 + 712));
      }
      else
      {
        long long v40 = *v38;
        v34->__r_.__value_.__r.__words[2] = *(void *)(v82 + 720);
        *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v40;
      }
      v34[1].__r_.__value_.__r.__words[0] = v39;
      p_uint64_t size = (uint64_t)&v34[1].__r_.__value_.__l.__size_;
    }
    *(void *)&long long v110 = p_size;
    goto LABEL_60;
  }
  if (*(void *)(v82 + 592)) {
    goto LABEL_53;
  }
LABEL_60:
  if (*(char *)(v82 + 775) < 0) {
    std::string::__init_copy_ctor_external(v119, *(const std::string::value_type **)(v82 + 752), *(void *)(v82 + 760));
  }
  else {
    v119[0] = *(std::string *)(v82 + 752);
  }
  if (*(char *)(v82 + 799) < 0) {
    std::string::__init_copy_ctor_external(&v119[1], *(const std::string::value_type **)(v82 + 776), *(void *)(v82 + 784));
  }
  else {
    v119[1] = *(std::string *)(v82 + 776);
  }
  long long v106 = 0;
  long long v107 = 0;
  long long v108 = 0;
  long long v103 = &v106;
  LOBYTE(v104) = 0;
  long long v106 = (std::string *)operator new(0x30uLL);
  long long v107 = v106;
  long long v108 = v106 + 2;
  unint64_t v42 = 0;
  long long v107 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v108, (long long *)v119, v120, v106);
  do
  {
    if (SHIBYTE(v119[v42 / 0x18 + 1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v119[v42 / 0x18 + 1].__r_.__value_.__l.__data_);
    }
    v42 -= 24;
  }
  while (v42 != -48);
  long long v103 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  uint64_t v43 = *(void *)(v82 + 824);
  memset(v119, 0, 24);
  (*(void (**)(uint64_t, int32x2_t *, std::string **, std::string *, std::string ***))(*(void *)v43 + 128))(v43, &v109, &v106, v119, &v103);
  long long v100 = (void **)v119;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v100);
  int v81 = (*(uint64_t (**)(std::string *, void))((*v103)->__r_.__value_.__r.__words[0] + 184))(*v103, 0);
  uint64_t v44 = (*(uint64_t (**)(std::string *, uint64_t))((*v103)->__r_.__value_.__r.__words[0] + 184))(*v103, 1);
  long long v100 = 0;
  long long v101 = 0;
  uint64_t v102 = 0;
  (*(void (**)(std::string *, void ***))((*v103)->__r_.__value_.__r.__words[0] + 48))(*v103, &v100);
  long long v98 = 0;
  uint64_t v99 = 0;
  long long v97 = 0;
  (*(void (**)(std::string *, void **))(v103[1]->__r_.__value_.__r.__words[0] + 56))(v103[1], &v97);
  long long v94 = 0;
  long long v95 = 0;
  uint64_t v96 = 0;
  long long v91 = 0;
  long long v92 = 0;
  uint64_t v93 = 0;
  if (*(char *)(v82 + 871) < 0)
  {
    if (*(void *)(v82 + 856)) {
      goto LABEL_72;
    }
  }
  else if (*(unsigned char *)(v82 + 871))
  {
LABEL_72:
    BOOL v80 = v5;
    std::vector<char> __p = 0;
    unint64_t v89 = 0;
    uint64_t v90 = 0;
    memset(v87, 0, sizeof(v87));
    std::vector<float>::vector(__dst, (int)v44);
    uint64_t v45 = (char *)v97 + 4 * (int)v44 * (v81 - 1);
    if (v98 != v45) {
      memmove(__dst[0], v45, v98 - v45);
    }
    if ((int)v44 >= 1)
    {
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      uint64_t v48 = 4 * (int)v44;
      uint64_t v49 = v44;
      do
      {
        kaldi::quasar::GetKthNBest(&v100, *(_DWORD *)(v82 + 800), v81, v44, v47, &v119[0].__r_.__value_.__l.__data_);
        std::vector<std::vector<int>>::emplace_back<std::vector<int>>((uint64_t *)&__p, (uint64_t)v119);
        uint64_t v50 = v44;
        if (v119[0].__r_.__value_.__r.__words[0])
        {
          v119[0].__r_.__value_.__l.__size_ = v119[0].__r_.__value_.__r.__words[0];
          operator delete(v119[0].__r_.__value_.__l.__data_);
        }
        uint64_t v52 = *(v89 - 3);
        uint64_t v51 = *(v89 - 2);
        int v85 = 0;
        std::vector<float>::vector(v119, (v51 - v52) >> 2, &v85);
        if (v51 != v52)
        {
          int v53 = (_DWORD *)v119[0].__r_.__value_.__r.__words[0];
          if ((unint64_t)((v51 - v52) >> 2) <= 1) {
            uint64_t v54 = 1;
          }
          else {
            uint64_t v54 = (v51 - v52) >> 2;
          }
          uint64_t v55 = (char *)v97 + v46;
          do
          {
            *v53++ = *v55;
            uint64_t v55 = (_DWORD *)((char *)v55 + v48);
            --v54;
          }
          while (v54);
        }
        std::vector<std::vector<float>>::emplace_back<std::vector<float>>((uint64_t *)v87, (uint64_t)v119);
        uint64_t v44 = v50;
        if (v119[0].__r_.__value_.__r.__words[0])
        {
          v119[0].__r_.__value_.__l.__size_ = v119[0].__r_.__value_.__r.__words[0];
          operator delete(v119[0].__r_.__value_.__l.__data_);
        }
        ++v47;
        v46 += 4;
      }
      while (v47 != v49);
    }
    quasar::RescoreWithLMs(*(void *)(v82 + 1000), *(kaldi::quasar::Vocab **)(v82 + 816), (void *)(v82 + 960), (long long *)(v82 + 848), (long long *)(v82 + 880), *(unsigned char *)(v82 + 872), *(unsigned char *)(v82 + 873), *(_DWORD *)(v82 + 500), (uint64_t **)&__p, v87, (uint64_t)__dst, (uint64_t *)&v94, (uint64_t)&v91);
    char v5 = v80;
    if (quasar::gLogLevel >= 5)
    {
      memset(v120, 0, sizeof(v120));
      memset(v119, 0, sizeof(v119));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v119);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"LM-SCORE-DEBUG: select beam ", 28);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v119);
    }
    if (__dst[0])
    {
      __dst[1] = __dst[0];
      operator delete(__dst[0]);
    }
    v119[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v87;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v119);
    v119[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v119);
    goto LABEL_106;
  }
  kaldi::quasar::GetKthNBest(&v100, *(_DWORD *)(v82 + 800), v81, v44, 0, &v119[0].__r_.__value_.__l.__data_);
  std::vector<char> __p = 0;
  unint64_t v89 = 0;
  uint64_t v90 = 0;
  LODWORD(v87[0]) = 0;
  std::vector<float>::resize((uint64_t)&__p, (uint64_t)(v119[0].__r_.__value_.__l.__size_ - v119[0].__r_.__value_.__r.__words[0]) >> 2, v87);
  if (v119[0].__r_.__value_.__l.__size_ != v119[0].__r_.__value_.__r.__words[0])
  {
    unint64_t v56 = (uint64_t)(v119[0].__r_.__value_.__l.__size_ - v119[0].__r_.__value_.__r.__words[0]) >> 2;
    uint64_t v57 = (float *)v97;
    long long v58 = (float *)__p;
    if (v56 <= 1) {
      unint64_t v56 = 1;
    }
    do
    {
      *v58++ = -*v57;
      v57 += (int)v44;
      --v56;
    }
    while (v56);
  }
  quasar::printOneBest(*(kaldi::quasar::Vocab **)(v82 + 816), *(_DWORD *)(v82 + 500), (uint64_t *)v119, &__p, (uint64_t *)&v94, (uint64_t)&v91);
  if (*(void *)(v82 + 984))
  {
    long long v60 = v94;
    for (uint64_t i = v95; v60 != i; ++v60)
    {
      long long v61 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(v82 + 960), (unsigned __int8 *)v60);
      if (v61) {
        std::string::operator=(v60, *((const std::string **)v61 + 5));
      }
    }
  }
  if (__p)
  {
    unint64_t v89 = __p;
    operator delete(__p);
  }
  if (v119[0].__r_.__value_.__r.__words[0])
  {
    v119[0].__r_.__value_.__l.__size_ = v119[0].__r_.__value_.__r.__words[0];
    operator delete(v119[0].__r_.__value_.__l.__data_);
  }
LABEL_106:
  LODWORD(__p) = 1;
  std::allocate_shared[abi:ne180100]<std::vector<std::vector<quasar::Token>>,std::allocator<std::vector<std::vector<quasar::Token>>>,int,void>((int *)&__p, v119);
  uint64_t v62 = *a3;
  long long v63 = *(_OWORD *)&v119[0].__r_.__value_.__l.__data_;
  *(_OWORD *)&v119[0].__r_.__value_.__l.__data_ = 0uLL;
  long long v64 = *(std::__shared_weak_count **)(v62 + 360);
  *(_OWORD *)(v62 + 352) = v63;
  if (v64)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
    if (v119[0].__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v119[0].__r_.__value_.__l.__size_);
    }
  }
  uint64_t v65 = (uint64_t)v94;
  if (v95 != v94)
  {
    uint64_t v66 = 0;
    unint64_t v67 = 0;
    do
    {
      long long v68 = (long long *)(v65 + v66);
      long long v69 = *v68;
      v119[0].__r_.__value_.__r.__words[2] = *((void *)v68 + 2);
      *(_OWORD *)&v119[0].__r_.__value_.__l.__data_ = v69;
      *((void *)v68 + 1) = 0;
      *((void *)v68 + 2) = 0;
      *(void *)long long v68 = 0;
      LODWORD(__p) = 0;
      LODWORD(__p) = expf(-v91[v67]);
      uint64_t v70 = *(void *)(*(void *)(*a3 + 352) + 8);
      LODWORD(v87[0]) = 0;
      int v85 = 0;
      LODWORD(__dst[0]) = 0;
      unsigned __int8 v84 = 0;
      unint64_t v71 = *(void *)(v70 - 16);
      if (v71 >= *(void *)(v70 - 8))
      {
        uint64_t v72 = std::vector<quasar::Token>::__emplace_back_slow_path<std::string,int,int,int,float const&,BOOL>((uint64_t *)(v70 - 24), (uint64_t)v119, (int *)v87, (int *)__dst, &v85, (float *)&__p, &v84);
      }
      else
      {
        std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,float const&,BOOL>(v70 - 8, *(std::string **)(v70 - 16), (uint64_t)v119, (int *)v87, (int *)__dst, &v85, (float *)&__p, &v84);
        uint64_t v72 = v71 + 224;
        *(void *)(v70 - 16) = v71 + 224;
      }
      *(void *)(v70 - 16) = v72;
      if (SHIBYTE(v119[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v119[0].__r_.__value_.__l.__data_);
      }
      ++v67;
      uint64_t v65 = (uint64_t)v94;
      v66 += 24;
    }
    while (v67 < 0xAAAAAAAAAAAAAAABLL * (((char *)v95 - (char *)v94) >> 3));
  }
  LODWORD(v87[0]) = 1;
  std::vector<char> __p = (void *)0x7FEFFFFFFFFFFFFFLL;
  std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,int,double,void>((int *)v87, &__p, v119);
  uint64_t v73 = *a3;
  long long v74 = (_OWORD *)(*a3 + 392);
  long long v75 = *(_OWORD *)&v119[0].__r_.__value_.__l.__data_;
  *(_OWORD *)&v119[0].__r_.__value_.__l.__data_ = 0uLL;
  long long v76 = *(std::__shared_weak_count **)(v73 + 400);
  *long long v74 = v75;
  if (v76)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v76);
    if (v119[0].__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v119[0].__r_.__value_.__l.__size_);
    }
  }
  uint64_t v77 = v91;
  uint64_t v78 = *a3;
  if (v91 != v92) {
    *(double *)(*(void *)(*(void *)(v78 + 392) + 8) - 8) = *(v92 - 1);
  }
  *(_DWORD *)(v78 + 576) = v6;
  *(_WORD *)(v78 + 580) = 257;
  if (v77)
  {
    long long v92 = v77;
    operator delete(v77);
  }
  v119[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v119);
  if (v97)
  {
    long long v98 = v97;
    operator delete(v97);
  }
  if (v100)
  {
    long long v101 = v100;
    operator delete(v100);
  }
  v119[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v119);
  v119[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v119);
  v119[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v119);
  (*(void (**)(std::string *))(v32->__r_.__value_.__r.__words[0] + 8))(v32);
  kaldi::Matrix<float>::~Matrix((uint64_t)v113);
  std::deque<std::vector<int>>::~deque[abi:ne180100](&v115);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return 0;
}

void sub_1B2437438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(v67 + 104) = v68;
  a67 = (void **)&a48;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a67);
  if (v69) {
    (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)&a54);
  std::deque<std::vector<int>>::~deque[abi:ne180100](&a59);
  if (v70) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
  }
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<int>>::emplace_back<std::vector<int>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v17[4] = v4;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v12);
    uint64_t v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    void v17[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, v17);
    uint64_t v8 = (void *)a1[1];
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    void *v7 = 0;
    v7[1] = 0;
    void v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    void v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_1B2437890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<float>>::emplace_back<std::vector<float>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v17[4] = v4;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v12);
    uint64_t v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    void v17[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v17);
    uint64_t v8 = (void *)a1[1];
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    void *v7 = 0;
    v7[1] = 0;
    void v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    void v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_1B24379D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::SeevaBatchDecoder::affectsRecognitionResults(quasar::SeevaBatchDecoder *this)
{
  return 1;
}

kaldi::quasar::SeevaInferenceTensorNames *kaldi::quasar::SeevaInferenceTensorNames::SeevaInferenceTensorNames(kaldi::quasar::SeevaInferenceTensorNames *this)
{
  *(void *)this = &unk_1F0A513C8;
  uint64_t v2 = (void *)((char *)this + 32);
  std::string::basic_string[abi:ne180100]<0>((void *)this + 1, "SeevaModel/__QNNI__source_input");
  std::string::basic_string[abi:ne180100]<0>(v2, "SeevaModel/__QNNI__source_catf_input");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 7, "SeevaModel/__QNNI__length_penalty_weight");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 10, "SeevaModel/__QNNO__nbest_list");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 13, "SeevaModel/__QNNO__nbest_score");
  return this;
}

void sub_1B2437AA0(_Unwind_Exception *exception_object)
{
  if (v1[103] < 0) {
    operator delete(*v5);
  }
  if (v1[79] < 0) {
    operator delete(*v4);
  }
  if (v1[55] < 0) {
    operator delete(*v3);
  }
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,0>(std::string *__str, std::string *a2, std::string *this)
{
  uint64_t v3 = this;
  uint64_t v4 = __str;
  if (__str != a2)
  {
    unint64_t v6 = this;
    do
    {
      std::string::operator=(v6++, v4++);
      ++v3;
    }
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

void *std::allocate_shared[abi:ne180100]<std::vector<std::vector<quasar::Token>>,std::allocator<std::vector<std::vector<quasar::Token>>>,int,void>@<X0>(int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  uint64_t result = std::__shared_ptr_emplace<std::vector<std::vector<quasar::Token>>>::__shared_ptr_emplace[abi:ne180100]<int,std::allocator<std::vector<std::vector<quasar::Token>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B2437BB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<std::vector<std::vector<quasar::Token>>>::__shared_ptr_emplace[abi:ne180100]<int,std::allocator<std::vector<std::vector<quasar::Token>>>,0>(void *a1, int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62A20;
  std::vector<std::vector<quasar::Token>>::vector(a1 + 3, *a2);
  return a1;
}

void sub_1B2437C14(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,int,double,void>@<X0>(int *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  unint64_t v6 = operator new(0x30uLL);
  uint64_t result = std::__shared_ptr_emplace<std::vector<double>>::__shared_ptr_emplace[abi:ne180100]<int,double,std::allocator<std::vector<double>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B2437C78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<std::vector<double>>::__shared_ptr_emplace[abi:ne180100]<int,double,std::allocator<std::vector<double>>,0>(void *a1, int *a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62C18;
  std::vector<double>::vector(a1 + 3, *a2, a3);
  return a1;
}

void sub_1B2437CD8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void quasar::lm::arpa2fst::ConvertToFST::create(quasar::lm *a1@<X0>, unsigned char *a2@<X3>, void *a3@<X8>)
{
  int v4 = (int)a1;
  *a3 = 0;
  if ((a1 - 2) >= 2)
  {
    if (a1 == 1)
    {
      if (a2[4])
      {
        quasar::lm::LogMessage::LogMessage(&v19, 5, "create", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst.cpp", 53);
        Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Arc sorting not supported when using ", 37);
        unint64_t v9 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)".", 1);
        quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v19);
      }
      else
      {
        quasar::lm::nullstream(a1);
      }
      operator new();
    }
    quasar::lm::LogMessage::LogMessage(&v19, 5, "create", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst.cpp", 81);
    unint64_t v10 = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Unknown ConvertToFST implementation: ", 37);
    std::ostream::operator<<();
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v19);
  }
  else
  {
    if (*a2)
    {
      quasar::lm::LogMessage::LogMessage(&v19, 5, "create", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst.cpp", 62);
      unint64_t v5 = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Explicit modeling of <s> and </s> is not supported when using ", 62);
      unint64_t v6 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)".", 1);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v19);
    }
    else
    {
      uint64_t v7 = (quasar::lm *)quasar::lm::nullstream(a1);
    }
    if (a2[1])
    {
      quasar::lm::LogMessage::LogMessage(&v19, 5, "create", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst.cpp", 64);
      unint64_t v11 = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Retention of disambiguation symbols is not supported when using ", 64);
      unint64_t v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)".", 1);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v19);
    }
    else
    {
      uint64_t v13 = (quasar::lm *)quasar::lm::nullstream(v7);
    }
    if (a2[2])
    {
      uint64_t v14 = (quasar::lm *)quasar::lm::nullstream(v13);
    }
    else
    {
      quasar::lm::LogMessage::LogMessage(&v19, 5, "create", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst.cpp", 66);
      uint64_t v15 = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Retention of redundant states is not supported when using ", 58);
      uint64_t v16 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)".", 1);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v19);
    }
    if (v4 == 3)
    {
      if (a2[3])
      {
        quasar::lm::LogMessage::LogMessage(&v19, 5, "create", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst.cpp", 73);
        uint64_t v17 = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Attaching symbol table is not supported when using ", 51);
        unsigned int v18 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)".", 1);
        quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v19);
      }
      else
      {
        quasar::lm::nullstream(v14);
      }
      operator new();
    }
    if (v4 == 2) {
      operator new();
    }
  }
}

void sub_1B24380CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x1B3EA8670](v11, 0x10E1C403A835E41);
  *unint64_t v10 = 0;
  _Unwind_Resume(a1);
}

void sub_1B24381AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B24381BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::lm::arpa2fst::ConvertToFST::create(quasar::lm *a1, uint64_t a2, uint64_t a3, char a4, char a5, unsigned __int8 a6)
{
  char v17 = 0;
  quasar::lm::fst_builder::Options<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Options((uint64_t)&v18);
  v15[0] = a4;
  v15[1] = a5;
  __int16 v16 = a6;
  uint64_t v11 = *(std::__shared_weak_count **)(a3 + 8);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::lm::arpa2fst::ConvertToFST::create(a1, v15, &v14);
  uint64_t v12 = v14;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return v12;
}

void sub_1B2438280(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::lm::arpa2fst::ConvertToFST::ConvertToFST(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_1F0A57E78;
  a1[1] = a2;
  a1[2] = 0;
  a1[3] = 0;
  (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)a2 + 88))(__p, a2, 0);
  if (v16 >= 0) {
    unint64_t v5 = __p;
  }
  else {
    unint64_t v5 = (void **)__p[0];
  }
  unint64_t v6 = (quasar::lm *)strcmp((const char *)v5, "<eps>");
  if (v6)
  {
    quasar::lm::LogMessage::LogMessage(v14, 5, "ConvertToFST", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst.cpp", 115);
    Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v14);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"The symbol with key 0 should be ", 32);
    unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<eps>", 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)".", 1);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v14);
  }
  else
  {
    quasar::lm::nullstream(v6);
  }
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = *a3;
  uint64_t v10 = a3[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (std::__shared_weak_count *)a1[3];
  a1[2] = v11;
  a1[3] = v10;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return a1;
}

void sub_1B24383E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(v17 + 24);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::PlaceholderOptions::options@<X0>(quasar::PlaceholderOptions *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = operator new(0x20uLL);
  a2[1] = result + 4;
  a2[2] = result + 4;
  *uint64_t result = (char *)this + 16;
  result[1] = (char *)this + 160;
  result[2] = (char *)this + 320;
  result[3] = (char *)this + 480;
  *a2 = result;
  return result;
}

void quasar::PlaceholderBlock::init(quasar::PlaceholderBlock *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v4, "PlaceholderBlock");
  uint64_t v2 = std::string::append(&v4, " config:");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  std::string::size_type v6 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::vector<char> __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  quasar::OptionsBase::debugLog((void (***)(void **__return_ptr, void))this + 1, (uint64_t)__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_1B243850C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'quasar::PlaceholderBlock::init(quasar::PlaceholderBlock *this)
{
}

void quasar::PlaceholderBlock::processBody(quasar::PlaceholderBlock *this)
{
  Value = (uint64_t *)quasar::ProcessingInput::getValue((quasar::PlaceholderBlock *)((char *)this + 640));
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  uint64_t v73 = 0;
  std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(&v73, *Value, Value[1], 0x8F5C28F5C28F5C29 * ((Value[1] - *Value) >> 3));
  long long v3 = (uint64_t *)quasar::ProcessingInput::getValue((quasar::PlaceholderBlock *)((char *)this + 696));
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(&v70, *v3, v3[1], 0x8F5C28F5C28F5C29 * ((v3[1] - *v3) >> 3));
  uint64_t v50 = this;
  if (!*(unsigned char *)quasar::OptionValue<BOOL>::value((void *)this + 3)) {
    goto LABEL_89;
  }
  int v4 = quasar::gLogLevel;
  if (v73 == v74 && quasar::gLogLevel >= 1)
  {
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    *(_OWORD *)std::vector<char> __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"empty nbest input received", 26);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    int v4 = quasar::gLogLevel;
  }
  if (v70 == v71 && v4 >= 1)
  {
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    *(_OWORD *)std::vector<char> __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"empty nbest (token) input received", 34);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
  }
  uint64_t v5 = quasar::OptionValue<std::string>::value((void *)this + 21);
  uint64_t v6 = v70;
  if (v71 == v70) {
    goto LABEL_57;
  }
  unint64_t v7 = 0;
  do
  {
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v54 = 0;
    uint64_t v8 = v6 + 200 * v7;
    uint64_t v10 = *(void *)(v8 + 136);
    uint64_t v9 = *(void *)(v8 + 144);
    if (v10 == v9) {
      goto LABEL_56;
    }
    do
    {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = *(unsigned __int8 *)(v10 + 23);
      }
      else {
        uint64_t v12 = *(void *)(v10 + 8);
      }
      uint64_t v13 = *(unsigned __int8 *)(v5 + 23);
      int v14 = (char)v13;
      if ((v13 & 0x80u) != 0) {
        uint64_t v13 = *(void *)(v5 + 8);
      }
      if (v12 == v13)
      {
        if (v14 >= 0) {
          uint64_t v15 = (char *)v5;
        }
        else {
          uint64_t v15 = *(char **)v5;
        }
        if ((v11 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v10, v15, *(void *)(v10 + 8))) {
            goto LABEL_51;
          }
LABEL_27:
          uint64_t v18 = __p[0];
          uint64_t v17 = __p[1];
          if (*(int *)quasar::OptionValue<int>::value((void *)v50 + 61) <= (unint64_t)((v17 - v18) >> 3))
          {
            if (*(char *)(v10 + 23) < 0) {
              size_t v22 = *(void *)(v10 + 8);
            }
            else {
              size_t v22 = *(unsigned __int8 *)(v10 + 23);
            }
            std::string::basic_string[abi:ne180100](&__b, v22, 46);
            if (*(char *)(v10 + 23) < 0) {
              operator delete(*(void **)v10);
            }
            long long v29 = __b;
            *(void *)(v10 + 16) = v52;
            *(_OWORD *)uint64_t v10 = v29;
          }
          else
          {
            uint64_t v19 = *(int *)(v10 + 128);
            uint64_t v20 = (char *)__p[1];
            if (__p[1] >= (void *)v54)
            {
              long long v23 = (char *)__p[0];
              int64_t v24 = ((char *)__p[1] - (char *)__p[0]) >> 3;
              unint64_t v25 = v24 + 1;
              if ((unint64_t)(v24 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v26 = v54 - (unint64_t)__p[0];
              if ((uint64_t)(v54 - (unint64_t)__p[0]) >> 2 > v25) {
                unint64_t v25 = v26 >> 2;
              }
              if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v27 = v25;
              }
              if (v27)
              {
                uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v54, v27);
                long long v23 = (char *)__p[0];
                uint64_t v20 = (char *)__p[1];
              }
              else
              {
                uint64_t v28 = 0;
              }
              unint64_t v30 = &v28[8 * v24];
              *(void *)unint64_t v30 = v19;
              uint64_t v21 = v30 + 8;
              while (v20 != v23)
              {
                uint64_t v31 = *((void *)v20 - 1);
                v20 -= 8;
                *((void *)v30 - 1) = v31;
                v30 -= 8;
              }
              __p[0] = v30;
              __p[1] = v21;
              *(void *)&long long v54 = &v28[8 * v27];
              if (v23) {
                operator delete(v23);
              }
            }
            else
            {
              *(void *)__p[1] = v19;
              uint64_t v21 = v20 + 8;
            }
            __p[1] = v21;
          }
          goto LABEL_51;
        }
        if (!*(unsigned char *)(v10 + 23)) {
          goto LABEL_27;
        }
        uint64_t v16 = 0;
        while (*(unsigned __int8 *)(v10 + v16) == v15[v16])
        {
          if (v11 == ++v16) {
            goto LABEL_27;
          }
        }
      }
LABEL_51:
      v10 += 136;
    }
    while (v10 != v9);
    uint64_t v32 = __p[1];
    if (__p[0] != __p[1])
    {
      quasar::PlaceholderBlock::insertPlaceholderMetainfo((uint64_t)v50, (quasar::MetaInfo::Impl **)(v73 + 200 * v7 + 192), (quasar ***)__p);
      uint64_t v32 = __p[0];
    }
    if (v32)
    {
      __p[1] = v32;
      operator delete(v32);
    }
LABEL_56:
    ++v7;
    uint64_t v6 = v70;
  }
  while (0x8F5C28F5C28F5C29 * ((v71 - v70) >> 3) > v7);
LABEL_57:
  if (v74 == v73) {
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  }
  size_t v33 = *(std::string **)(v73 + 136);
  long long v34 = *(char **)(v73 + 144);
  if (v33 != (std::string *)v34)
  {
    int v35 = 0;
    do
    {
      if (SHIBYTE(v33->__r_.__value_.__r.__words[2]) < 0)
      {
        long long v37 = (std::string *)v33->__r_.__value_.__r.__words[0];
        uint64_t size = v33->__r_.__value_.__l.__size_;
      }
      else
      {
        uint64_t size = HIBYTE(v33->__r_.__value_.__r.__words[2]);
        long long v37 = v33;
      }
      int v38 = *(char *)(v5 + 23);
      if (v38 >= 0) {
        std::string::size_type v39 = (char *)v5;
      }
      else {
        std::string::size_type v39 = *(char **)v5;
      }
      if (v38 >= 0) {
        int64_t v40 = *(unsigned __int8 *)(v5 + 23);
      }
      else {
        int64_t v40 = *(void *)(v5 + 8);
      }
      if (v40)
      {
        if (size >= v40)
        {
          unint64_t v41 = (char *)v37 + size;
          int v42 = *v39;
          uint64_t v43 = v37;
          do
          {
            uint64_t v44 = size - v40;
            if (v44 == -1) {
              break;
            }
            uint64_t v45 = (char *)memchr(v43, v42, v44 + 1);
            if (!v45) {
              break;
            }
            uint64_t v46 = v45;
            if (!memcmp(v45, v39, v40))
            {
              if (v46 != v41)
              {
                std::string::size_type v47 = v46 - (char *)v37;
                if (v46 - (char *)v37 != -1) {
                  goto LABEL_78;
                }
              }
              break;
            }
            uint64_t v43 = (std::string *)(v46 + 1);
            uint64_t size = v41 - (v46 + 1);
          }
          while (size >= v40);
        }
      }
      else
      {
        std::string::size_type v47 = 0;
LABEL_78:
        if (v35 >= *(_DWORD *)quasar::OptionValue<int>::value((void *)v50 + 61))
        {
          if (*(char *)(v5 + 23) >= 0) {
            std::string::size_type v48 = *(unsigned __int8 *)(v5 + 23);
          }
          else {
            std::string::size_type v48 = *(void *)(v5 + 8);
          }
          std::string::replace(v33, v47, v48, v48, 46);
        }
        ++v35;
      }
      size_t v33 = (std::string *)((char *)v33 + 136);
    }
    while (v33 != (std::string *)v34);
  }
LABEL_89:
  uint64_t v49 = *(void *)(*(void *)v50 - 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "tokens");
  quasar::ProcessingBlock::send((uint64_t)v50 + v49, (const void **)__p, (uint64_t)&v70, 1);
  if (SBYTE7(v54) < 0) {
    operator delete(__p[0]);
  }
  quasar::ProcessingBlock::send((uint64_t)v50 + *(void *)(*(void *)v50 - 24), (uint64_t)&v73, 0);
  __p[0] = &v70;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v73;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B2438AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
  std::vector<char> __p = (void *)(v20 - 144);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<char> __p = (void *)(v20 - 120);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::PlaceholderBlock::insertPlaceholderMetainfo(uint64_t a1, quasar::MetaInfo::Impl **a2, quasar ***a3)
{
  quasar::PTree::PTree((quasar::PTree *)v22);
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  if (*a3 != v6)
  {
    do
    {
      quasar::PTree::PTree((quasar::PTree *)v21);
      std::string::basic_string[abi:ne180100]<0>(__p, "begin");
      unint64_t v7 = *v5;
      int Type = quasar::getType(*v5);
      std::to_string(&v16, (unint64_t)v7);
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      char v20 = 1;
      quasar::PTree::putChild((uint64_t)v21, (uint64_t)__p, (uint64_t)&Type, 1);
      quasar::PTree::~PTree((quasar::PTree *)&Type);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "size");
      uint64_t v8 = quasar::OptionValue<std::string>::value((void *)(a1 + 328));
      quasar::PTree::PTree(&Type, v8);
      quasar::PTree::putChild((uint64_t)v21, (uint64_t)__p, (uint64_t)&Type, 1);
      quasar::PTree::~PTree((quasar::PTree *)&Type);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      quasar::PTree::addChild((quasar::PTree *)v22, (const quasar::PTree *)v21);
      quasar::PTree::~PTree((quasar::PTree *)v21);
      ++v5;
    }
    while (v5 != v6);
  }
  quasar::PTree::PTree((quasar::PTree *)v21);
  quasar::PTree::PTree((quasar::PTree *)&Type);
  std::string::basic_string[abi:ne180100]<0>(v13, "text");
  uint64_t v9 = quasar::OptionValue<std::string>::value((void *)(a1 + 168));
  quasar::PTree::PTree(__p, v9);
  quasar::PTree::putChild((uint64_t)&Type, (uint64_t)v13, (uint64_t)__p, 1);
  quasar::PTree::~PTree((quasar::PTree *)__p);
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "positions");
  quasar::PTree::putChild((uint64_t)&Type, (uint64_t)__p, (uint64_t)v22, 1);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "placeholders");
  quasar::PTree::putChild((uint64_t)v21, (uint64_t)__p, (uint64_t)&Type, 1);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  quasar::MetaInfo::update(a2, (const quasar::PTree *)v21);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  quasar::PTree::~PTree((quasar::PTree *)v21);
  quasar::PTree::~PTree((quasar::PTree *)v22);
}

void sub_1B2438DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  quasar::PTree::~PTree((quasar::PTree *)&a28);
  quasar::PTree::~PTree((quasar::PTree *)&a36);
  quasar::PTree::~PTree((quasar::PTree *)(v36 - 152));
  _Unwind_Resume(a1);
}

void non-virtual thunk to'quasar::PlaceholderBlock::processBody(quasar::PlaceholderBlock *this)
{
}

uint64_t quasar::PlaceholderBlock::minConfigVersion(quasar::PlaceholderBlock *this)
{
  return 246;
}

uint64_t virtual thunk to'quasar::PlaceholderBlock::minConfigVersion(quasar::PlaceholderBlock *this)
{
  return 246;
}

void quasar::ConfiguredProcessingBlock<quasar::PlaceholderOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  uint64_t *v11;

  long long v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
  (**v3)(&v10);
  int v4 = v10;
  uint64_t v5 = v11;
  if (v10 != v11)
  {
    do
    {
      uint64_t v6 = *v4;
      unint64_t v7 = (std::__shared_weak_count *)a2[1];
      uint64_t v8 = *a2;
      uint64_t v9 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      quasar::OptionValueBase::setContextProvider(v6, &v8);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      ++v4;
    }
    while (v4 != v5);
    int v4 = v10;
  }
  if (v4)
  {
    uint64_t v11 = v4;
    operator delete(v4);
  }
}

void sub_1B2438F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::PlaceholderOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::PlaceholderOptions>::setContextProvider(void *a1, uint64_t *a2)
{
}

uint64_t virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::PlaceholderOptions>::getOptions(void *a1)
{
  return (uint64_t)a1 + *(void *)(*a1 - 104) + 8;
}

void quasar::PlaceholderBlock::~PlaceholderBlock(quasar::PlaceholderBlock *this)
{
  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 752));
}

{
  uint64_t v1;
  uint64_t vars8;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 752));
  JUMPOUT(0x1B3EA8670);
}

const char *quasar::PlaceholderBlock::blockType(quasar::PlaceholderBlock *this)
{
  return "PlaceholderBlock";
}

void *quasar::PlaceholderBlock::inputs@<X0>(quasar::PlaceholderBlock *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *uint64_t result = (char *)this + 640;
  result[1] = (char *)this + 696;
  *a2 = result;
  return result;
}

void *non-virtual thunk to'quasar::PlaceholderBlock::inputs@<X0>(quasar::PlaceholderBlock *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *uint64_t result = (char *)this + 8;
  result[1] = (char *)this + 64;
  *a2 = result;
  return result;
}

void non-virtual thunk to'quasar::PlaceholderBlock::~PlaceholderBlock(char **this)
{
  quasar::ProcessingBlock::~ProcessingBlock(this + 15);
}

{
  uint64_t vars8;

  quasar::ProcessingBlock::~ProcessingBlock(this + 15);
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'quasar::PlaceholderBlock::~PlaceholderBlock(quasar::PlaceholderBlock *this)
{
  uint64_t v2 = (char **)(v1 + 752);
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char **v1;
  uint64_t vars8;

  uint64_t v1 = (char **)((char *)this + *(void *)(*(void *)this - 24));
  quasar::ProcessingBlock::~ProcessingBlock(v1 + 94);
  JUMPOUT(0x1B3EA8670);
}

const char *virtual thunk to'quasar::PlaceholderBlock::blockType(quasar::PlaceholderBlock *this)
{
  return "PlaceholderBlock";
}

void quasar::PlaceholderBlock::~PlaceholderBlock(quasar::PlaceholderBlock *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[5];
  *((void *)this + 79) = a2[6];
  uint64_t v6 = (void **)((char *)this + 728);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 719) < 0) {
    operator delete(*((void **)this + 87));
  }
  uint64_t v6 = (void **)((char *)this + 672);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 663) < 0) {
    operator delete(*((void **)this + 80));
  }
  uint64_t v5 = a2[1];
  *(void *)this = v5;
  *(void *)((char *)this + *(void *)(v5 - 24)) = a2[2];
  quasar::PlaceholderOptions::~PlaceholderOptions((quasar::PlaceholderBlock *)((char *)this + 8));
}

uint64_t TResGraphMaker::clear(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 16);
  if (v2)
  {
    if (*(unsigned char *)(v2 + 344))
    {
      uint64_t v3 = *(void *)(v2 + 64);
      if (v3 != v2 + 88 && v3 != 0) {
        MEMORY[0x1B3EA8630]();
      }
    }
    uint64_t v5 = *(void **)(v2 + 24);
    if (v5)
    {
      *(void *)(v2 + 32) = v5;
      operator delete(v5);
    }
    uint64_t v6 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v6;
      operator delete(v6);
    }
    this = MEMORY[0x1B3EA8670](v2, 0x1030C404962A615);
  }
  *(void *)(v1 + 16) = 0;
  return this;
}

void TResGraphMaker::add(TResGraphMaker *this, uint64_t **a2, int a3)
{
  uint64_t v3 = (const TGraph *)a2;
  uint64_t v4 = this;
  uint64_t v5 = (void *)*((void *)this + 2);
  if (!v5) {
    operator new();
  }
  uint64_t v6 = (uint64_t)(v5[1] - *v5) >> 4;
  unint64_t v7 = a2[10];
  uint64_t v8 = (char *)a2[11] - (char *)v7;
  unint64_t v9 = v8 >> 3;
  if (v8)
  {
    if (v9 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v8 >> 3;
    }
    do
    {
      uint64_t v11 = *v7++;
      if (!*(unsigned char *)(v11 + 32)) {
        ++v6;
      }
      --v10;
    }
    while (v10);
  }
  uint64_t v61 = -1;
  std::vector<unsigned long>::vector(__p, v9, &v61);
  uint64_t v12 = *((void *)v4 + 2);
  *((void *)__p[0] + *(void *)(*((void *)v3 + 8) + 40)) = *(void *)(v12 + 56);
  uint64_t v13 = *(void *)(v12 + 56);
  std::vector<quasar::PreTokenToPostTokenItnMap>::resize(v12, v6 - (v13 != 0));
  char v14 = (void *)*((void *)v4 + 2);
  uint64_t v15 = *((void *)v3 + 9);
  std::string v16 = __p[0];
  *((void *)__p[0] + *(void *)(v15 + 40)) = ((uint64_t)(v14[1] - *v14) >> 4) - 1;
  uint64_t v17 = *((void *)v3 + 10);
  if (*((void *)v3 + 11) != v17)
  {
    unint64_t v18 = 0;
    uint64_t v53 = *(void *)(*((void *)v3 + 8) + 24);
    long long v54 = v3;
    uint64_t v56 = v13 + 1;
    long long v60 = (uint64_t *)v4;
    do
    {
      uint64_t v19 = *(void *)(v17 + 8 * v18);
      if (!*(unsigned char *)(v19 + 32))
      {
        uint64_t v20 = *(void *)(v19 + 40);
        if (v16[v20] == -1) {
          v16[v20] = v56++;
        }
        uint64_t v57 = v14[3];
        uint64_t v58 = v14[4];
        uint64_t OutEdge = TVertex::getOutEdge(v19);
        if (OutEdge)
        {
LABEL_16:
          uint64_t v22 = *(void *)(OutEdge + 24);
          uint64_t v23 = *(void *)(v22 + 40);
          int64_t v24 = __p[0];
          uint64_t v25 = *((void *)__p[0] + v23);
          if (v25 == -1)
          {
            *((void *)__p[0] + v23) = v56;
            uint64_t v25 = v24[*(void *)(v22 + 40)];
            ++v56;
          }
          int v26 = *(_DWORD *)(*((void *)v4 + 2) + 80);
          uint64_t v27 = v24[*(void *)(v19 + 40)];
          uint64_t v28 = *(int *)(OutEdge + 48);
          if (v28 > 6) {
            int v29 = 1;
          }
          else {
            int v29 = dword_1B25B1AC0[v28];
          }
          int v59 = v29;
          TWord::getWordSpec(*(TWord **)(OutEdge + 56));
          uint64_t v31 = v30;
          TLocaleInfo::unicodeToMultiByte(v60[1], **(unsigned int ***)(OutEdge + 56), v60[2] + 64);
          uint64_t v32 = v60[2];
          LOBYTE(v61) = 0;
          TBuffer<char>::insert(v32 + 64, *(void *)(v32 + 80), (char *)&v61, 1uLL);
          size_t v33 = (void *)v60[2];
          unint64_t v34 = v33[4];
          unint64_t v35 = v33[5];
          if (v34 >= v35)
          {
            uint64_t v37 = v33[3];
            unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - v37) >> 3);
            unint64_t v39 = v38 + 1;
            if (v38 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - v37) >> 3);
            if (2 * v40 > v39) {
              unint64_t v39 = 2 * v40;
            }
            if (v40 >= 0x555555555555555) {
              unint64_t v41 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v41 = v39;
            }
            if (v41) {
              int v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(v33 + 5), v41);
            }
            else {
              int v42 = 0;
            }
            uint64_t v43 = &v42[24 * v38];
            *(_DWORD *)uint64_t v43 = v26;
            *((_DWORD *)v43 + 1) = v27;
            *((_DWORD *)v43 + 2) = v25;
            *((_DWORD *)v43 + 3) = v59;
            *((void *)v43 + 2) = v31;
            uint64_t v45 = (char *)v33[3];
            uint64_t v44 = (char *)v33[4];
            uint64_t v46 = v43;
            if (v44 == v45)
            {
              uint64_t v4 = (TResGraphMaker *)v60;
            }
            else
            {
              uint64_t v4 = (TResGraphMaker *)v60;
              do
              {
                long long v47 = *(_OWORD *)(v44 - 24);
                *((void *)v46 - 1) = *((void *)v44 - 1);
                *(_OWORD *)(v46 - 24) = v47;
                v46 -= 24;
                v44 -= 24;
              }
              while (v44 != v45);
              uint64_t v44 = (char *)v33[3];
            }
            uint64_t v36 = v43 + 24;
            v33[3] = v46;
            v33[4] = v43 + 24;
            _WORD v33[5] = &v42[24 * v41];
            if (v44) {
              operator delete(v44);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v34 = v26;
            *(_DWORD *)(v34 + 4) = v27;
            *(_DWORD *)(v34 + 8) = v25;
            *(_DWORD *)(v34 + 12) = v59;
            uint64_t v36 = (char *)(v34 + 24);
            *(void *)(v34 + 16) = v31;
            uint64_t v4 = (TResGraphMaker *)v60;
          }
          v33[4] = v36;
          while (1)
          {
            uint64_t OutEdge = *(void *)(OutEdge + 8);
            if (!OutEdge) {
              break;
            }
            if (!*(unsigned char *)(OutEdge + 32)) {
              goto LABEL_16;
            }
          }
        }
        char v14 = (void *)*((void *)v4 + 2);
        std::string v16 = __p[0];
        std::string::size_type v48 = (int *)(*v14 + 16 * *((void *)__p[0] + *(void *)(v19 + 40)));
        v48[2] = -1431655765 * ((v58 - v57) >> 3);
        v48[3] = 1431655765 * ((v58 - v57) >> 3) - 1431655765 * ((v14[4] - v14[3]) >> 3);
        uint64_t v49 = *(void *)(v19 + 16);
        uint64_t v3 = v54;
        if (v49) {
          int v50 = v49 + a3 - v53;
        }
        else {
          int v50 = -1;
        }
        int *v48 = v50;
        uint64_t v51 = *(void *)(v19 + 24);
        if (v51) {
          int v52 = v51 + a3 - v53;
        }
        else {
          int v52 = -1;
        }
        v48[1] = v52;
      }
      ++v18;
      uint64_t v17 = *((void *)v3 + 10);
    }
    while (v18 < (*((void *)v3 + 11) - v17) >> 3);
    uint64_t v15 = *((void *)v3 + 9);
  }
  v14[7] = v16[*(void *)(v15 + 40)];
  __p[1] = v16;
  operator delete(v16);
}

void sub_1B24399FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::DataFeedItem::regexsyms(uint64_t a1@<X8>)
{
  void v8[3] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v4, "[");
  std::string::basic_string[abi:ne180100]<0>(v5, "]");
  std::string::basic_string[abi:ne180100]<0>(v6, "(");
  std::string::basic_string[abi:ne180100]<0>(v7, ")");
  std::string::basic_string[abi:ne180100]<0>(v8, "|");
  std::unordered_set<std::string>::unordered_set(a1, (unsigned __int8 *)v4, 5);
  for (uint64_t i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v8[i + 2]) < 0) {
      operator delete((void *)v8[i]);
    }
  }
}

void sub_1B2439BD0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 119) < 0) {
      operator delete(*(void **)(v1 + v3 + 96));
    }
    v3 -= 24;
    if (v3 == -120) {
      _Unwind_Resume(exception_object);
    }
  }
}

float *quasar::DataFeedItem::setPrior(float *this, float a2)
{
  *this = a2;
  return this;
}

std::string *quasar::DataFeedItem::setField(uint64_t a1, long long *a2, const std::string *a3)
{
  uint64_t v6 = a2;
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 8), (const void **)a2, (uint64_t)&std::piecewise_construct, &v6);
  return std::string::operator=((std::string *)(v4 + 7), a3);
}

void quasar::DataFeedItem::getField(uint64_t a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 8, a2);
  if (a1 + 16 == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else if (*(char *)(v5 + 79) < 0)
  {
    unint64_t v7 = *(const std::string::value_type **)(v5 + 56);
    std::string::size_type v8 = *(void *)(v5 + 64);
    std::string::__init_copy_ctor_external(a3, v7, v8);
  }
  else
  {
    long long v6 = *(_OWORD *)(v5 + 56);
    a3->__r_.__value_.__r.__words[2] = *(void *)(v5 + 72);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
  }
}

void quasar::DataFeedItem::signatureStrWithoutPrior(quasar::DataFeedItem *this@<X0>, void *a2@<X8>)
{
  std::string v29[2] = *MEMORY[0x1E4F143B8];
  memset(&v27, 0, sizeof(v27));
  uint64_t v2 = (char *)*((void *)this + 1);
  uint64_t v3 = (char *)this + 16;
  if (v2 != (char *)this + 16)
  {
    do
    {
      if (v2[55] >= 0) {
        size_t v4 = v2[55];
      }
      else {
        size_t v4 = *((void *)v2 + 5);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v26, v4 + 1);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v5 = &v26;
      }
      else {
        uint64_t v5 = (std::string *)v26.__r_.__value_.__r.__words[0];
      }
      if (v4)
      {
        if (v2[55] >= 0) {
          long long v6 = v2 + 32;
        }
        else {
          long long v6 = (const void *)*((void *)v2 + 4);
        }
        memmove(v5, v6, v4);
      }
      *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 58;
      int v7 = v2[79];
      if (v7 >= 0) {
        std::string::size_type v8 = v2 + 56;
      }
      else {
        std::string::size_type v8 = (const std::string::value_type *)*((void *)v2 + 7);
      }
      if (v7 >= 0) {
        std::string::size_type v9 = v2[79];
      }
      else {
        std::string::size_type v9 = *((void *)v2 + 8);
      }
      uint64_t v10 = std::string::append(&v26, v8, v9);
      uint64_t v11 = (char *)v10->__r_.__value_.__r.__words[0];
      v29[0] = v10->__r_.__value_.__l.__size_;
      *(void *)((char *)v29 + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
      char v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      std::vector<std::string>::pointer end = v27.__end_;
      if (v27.__end_ >= v27.__end_cap_.__value_)
      {
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v27.__end_ - (char *)v27.__begin_) >> 3);
        unint64_t v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v27.__end_cap_.__value_ - (char *)v27.__begin_) >> 3) > v17) {
          unint64_t v17 = 0x5555555555555556 * (((char *)v27.__end_cap_.__value_ - (char *)v27.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v27.__end_cap_.__value_ - (char *)v27.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v17;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v27.__end_cap_;
        if (v18) {
          uint64_t v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v27.__end_cap_, v18);
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v20 = v19 + v16;
        __v.__first_ = v19;
        __v.__begin_ = v20;
        __v.__end_cap_.__value_ = &v19[v18];
        std::string::size_type v21 = v29[0];
        v20->__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
        v20->__r_.__value_.__l.__size_ = v21;
        *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v29 + 7);
        *((unsigned char *)&v20->__r_.__value_.__s + 23) = v12;
        __v.__end_ = v20 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v27, &__v);
        uint64_t v15 = v27.__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
      }
      else
      {
        std::string::size_type v14 = v29[0];
        v27.__end_->__r_.__value_.__l.__data_ = v11;
        end->__r_.__value_.__l.__size_ = v14;
        *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v29 + 7);
        *((unsigned char *)&end->__r_.__value_.__s + 23) = v12;
        uint64_t v15 = end + 1;
      }
      v27.__end_ = v15;
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      uint64_t v22 = (char *)*((void *)v2 + 1);
      if (v22)
      {
        do
        {
          uint64_t v23 = v22;
          uint64_t v22 = *(char **)v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          uint64_t v23 = (char *)*((void *)v2 + 2);
          BOOL v24 = *(void *)v23 == (void)v2;
          uint64_t v2 = v23;
        }
        while (!v24);
      }
      uint64_t v2 = v23;
    }
    while (v23 != v3);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  kaldi::JoinVectorToString<std::string>((uint64_t *)&v27, " ", (uint64_t)a2);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1B2439FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, __int16 a6, char a7, char a8, char a9, void **a10, char *a11, std::__split_buffer<std::wstring> *a12, uint64_t a13, char a14)
{
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*a10);
  }
  a11 = &a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

BOOL quasar::operator<(quasar::DataFeedItem *a1, quasar::DataFeedItem *a2)
{
  if (*(float *)a1 != *(float *)a2) {
    return *(float *)a1 < *(float *)a2;
  }
  quasar::DataFeedItem::signatureStrWithoutPrior(a1, __p);
  quasar::DataFeedItem::signatureStrWithoutPrior(a2, v14);
  int v3 = (char)v15;
  size_t v4 = (void *)v14[0];
  unsigned __int8 v5 = v17;
  if ((v17 & 0x80u) == 0) {
    size_t v6 = v17;
  }
  else {
    size_t v6 = (size_t)__p[1];
  }
  if ((v17 & 0x80u) == 0) {
    int v7 = __p;
  }
  else {
    int v7 = (void **)__p[0];
  }
  if ((v15 & 0x80u) == 0) {
    size_t v8 = v15;
  }
  else {
    size_t v8 = v14[1];
  }
  if ((v15 & 0x80u) == 0) {
    std::string::size_type v9 = v14;
  }
  else {
    std::string::size_type v9 = (void *)v14[0];
  }
  if (v8 >= v6) {
    size_t v10 = v6;
  }
  else {
    size_t v10 = v8;
  }
  int v11 = memcmp(v7, v9, v10);
  if (v11) {
    BOOL v12 = v11 < 0;
  }
  else {
    BOOL v12 = v6 < v8;
  }
  if (v3 < 0)
  {
    operator delete(v4);
    if ((v17 & 0x80) != 0) {
LABEL_25:
    }
      operator delete(__p[0]);
  }
  else if ((v5 & 0x80) != 0)
  {
    goto LABEL_25;
  }
  return v12;
}

void sub_1B243A128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL quasar::operator>(quasar::DataFeedItem *a1, quasar::DataFeedItem *a2)
{
  if (*(float *)a1 != *(float *)a2) {
    return *(float *)a1 > *(float *)a2;
  }
  quasar::DataFeedItem::signatureStrWithoutPrior(a1, __p);
  quasar::DataFeedItem::signatureStrWithoutPrior(a2, v14);
  unsigned __int8 v3 = v17;
  int v4 = (char)v15;
  unsigned __int8 v5 = (void *)v14[0];
  if ((v15 & 0x80u) == 0) {
    size_t v6 = v15;
  }
  else {
    size_t v6 = v14[1];
  }
  if ((v15 & 0x80u) == 0) {
    int v7 = v14;
  }
  else {
    int v7 = (void *)v14[0];
  }
  if ((v17 & 0x80u) == 0) {
    size_t v8 = v17;
  }
  else {
    size_t v8 = (size_t)__p[1];
  }
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v9 = __p;
  }
  else {
    std::string::size_type v9 = (void **)__p[0];
  }
  if (v8 >= v6) {
    size_t v10 = v6;
  }
  else {
    size_t v10 = v8;
  }
  int v11 = memcmp(v7, v9, v10);
  if (v11) {
    BOOL v12 = v11 < 0;
  }
  else {
    BOOL v12 = v6 < v8;
  }
  if (v4 < 0)
  {
    operator delete(v5);
    if ((v17 & 0x80) != 0) {
LABEL_25:
    }
      operator delete(__p[0]);
  }
  else if ((v3 & 0x80) != 0)
  {
    goto LABEL_25;
  }
  return v12;
}

void sub_1B243A228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::DataFeedItem::addOSym(quasar::DataFeedItem *this)
{
  uint64_t v1 = (uint64_t **)((char *)this + 8);
  uint64_t v2 = (char *)*((void *)this + 1);
  unsigned __int8 v3 = (char *)this + 16;
  if (v2 != (char *)this + 16)
  {
    do
    {
      quasar::DataFeedItem::addOsym((const std::string *)(v2 + 56));
      int v11 = (long long *)(v2 + 32);
      int v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v1, (const void **)v2 + 4, (uint64_t)&std::piecewise_construct, &v11);
      unsigned __int8 v5 = v4 + 7;
      if (*((char *)v4 + 79) < 0) {
        operator delete((void *)*v5);
      }
      *(_OWORD *)unsigned __int8 v5 = v9;
      v5[2] = v10;
      size_t v6 = (char *)*((void *)v2 + 1);
      if (v6)
      {
        do
        {
          int v7 = v6;
          size_t v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (char *)*((void *)v2 + 2);
          BOOL v8 = *(void *)v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
    }
    while (v7 != v3);
  }
}

void sub_1B243A31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::DataFeedItem::addOsym(const std::string *a1)
{
  quasar::DataFeedItem::regexsyms((uint64_t)v30);
  std::string::basic_string[abi:ne180100]<0>(&__v, " ");
  quasar::splitAndTrimNoEmpty(a1, (char *)&__v, &v28);
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  memset(&v27, 0, sizeof(v27));
  memset(&v26, 0, sizeof(v26));
  uint64_t v2 = v28;
  uint64_t v3 = v29;
  if (v28 == v29)
  {
    uint64_t v20 = 0;
    uint64_t v19 = 0;
    uint64_t v10 = 0;
    goto LABEL_37;
  }
  do
  {
    if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v30, (unsigned __int8 *)v2))
    {
LABEL_7:
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v26, v26.__end_, v27.__begin_, (long long *)v27.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v27.__end_ - (char *)v27.__begin_) >> 3));
      begiuint64_t n = v27.__begin_;
      for (std::vector<std::string>::pointer i = v27.__end_; i != begin; --i)
      {
        if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(i[-1].__r_.__value_.__l.__data_);
        }
      }
      v27.__end_ = begin;
      goto LABEL_13;
    }
    std::string::basic_string[abi:ne180100]<0>(&__v, "prior=");
    BOOL v4 = quasar::startsWith((unsigned __int8 *)v2, (unsigned __int8 *)&__v);
    BOOL v5 = v4;
    if (SHIBYTE(__v.__end_) < 0)
    {
      operator delete(__v.__first_);
      if (v5) {
        goto LABEL_7;
      }
    }
    else if (v4)
    {
      goto LABEL_7;
    }
    v24[0] = 0;
    v24[1] = 0;
    uint64_t v25 = 0;
    uint64_t v11 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v4);
    quasar::QsrText::encodeTokenQsrText(v11, v2, (uint64_t)v24);
    std::operator+<char>();
    std::vector<std::string>::pointer end = v27.__end_;
    if (v27.__end_ >= v27.__end_cap_.__value_)
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v27.__end_ - (char *)v27.__begin_) >> 3);
      unint64_t v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v27.__end_cap_.__value_ - (char *)v27.__begin_) >> 3) > v14) {
        unint64_t v14 = 0x5555555555555556 * (((char *)v27.__end_cap_.__value_ - (char *)v27.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v27.__end_cap_.__value_ - (char *)v27.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v15 = v14;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v27.__end_cap_;
      if (v15) {
        unint64_t v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v27.__end_cap_, v15);
      }
      else {
        unint64_t v16 = 0;
      }
      unsigned __int8 v17 = v16 + v13;
      __v.__first_ = v16;
      __v.__begin_ = v17;
      __v.__end_cap_.__value_ = &v16[v15];
      v17->__r_.__value_.__r.__words[2] = v23;
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      std::string::size_type v23 = 0;
      *(_OWORD *)std::vector<char> __p = 0uLL;
      __v.__end_ = v17 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v27, &__v);
      unint64_t v18 = v27.__end_;
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
      v27.__end_ = v18;
    }
    else
    {
      v27.__end_->__r_.__value_.__r.__words[2] = v23;
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v27.__end_ = end + 1;
    }
    if (SHIBYTE(v25) < 0) {
      operator delete(v24[0]);
    }
LABEL_13:
    std::vector<std::string>::pointer v8 = v26.__end_;
    if (v26.__end_ >= v26.__end_cap_.__value_)
    {
      uint64_t v10 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v26, (long long *)v2);
    }
    else
    {
      if (*(char *)(v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v26.__end_, *(const std::string::value_type **)v2, *(void *)(v2 + 8));
      }
      else
      {
        long long v9 = *(_OWORD *)v2;
        v26.__end_->__r_.__value_.__r.__words[2] = *(void *)(v2 + 16);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      uint64_t v10 = v8 + 1;
    }
    v26.__end_ = v10;
    v2 += 24;
  }
  while (v2 != v3);
  uint64_t v19 = v27.__begin_;
  uint64_t v20 = (long long *)v27.__end_;
LABEL_37:
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v26, v10, v19, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v19) >> 3));
  __v.__first_ = (std::__split_buffer<std::string>::pointer)" ";
  __v.__begin_ = (std::__split_buffer<std::string>::pointer)1;
  quasar::join<std::vector<std::string>>((uint64_t *)&v26, (uint64_t *)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v30);
}

void sub_1B243A6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char ***a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char **a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32)
{
  a17 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a23 = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a26 = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a32);
  _Unwind_Resume(a1);
}

uint64_t quasar::DataFeed::DataFeed(uint64_t a1, long long *a2, int a3, int a4, long long *a5, long long **a6, float a7)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v14 = *a2;
    *(void *)(a1 + 40) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 24) = v14;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 48), *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  *(_DWORD *)(a1 + 72) = quasar::DataFeed::nameToDataFeedType(a2);
  *(_DWORD *)(a1 + 76) = a3;
  *(_DWORD *)(a1 + 80) = a4;
  *(float *)(a1 + 84) = a7;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(unsigned char *)(a1 + 152) = 1;
  quasar::DataFeed::initializeEnumerators(a1, a5, (uint64_t *)a6);
  return a1;
}

void sub_1B243A890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::DataFeed::nameToDataFeedType(void *a1)
{
  int v2 = *((unsigned __int8 *)a1 + 23);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    uint64_t v3 = a1;
    switch(*((unsigned char *)a1 + 23))
    {
      case 5:
        if (*(_DWORD *)a1 != 1735290739 || *((unsigned char *)a1 + 4) != 115) {
          goto LABEL_67;
        }
        return 3;
      case 6:
        if (*(_DWORD *)a1 != 1969384545 || *((_WORD *)a1 + 2) != 29549) {
          goto LABEL_67;
        }
        return 2;
      case 7:
        if (*(_DWORD *)a1 != 1769239137 || *(_DWORD *)((char *)a1 + 3) != 1937011561) {
          goto LABEL_67;
        }
        return 1;
      case 0xD:
        if (*a1 != 0x72615F73676E6F73 || *(void *)((char *)a1 + 5) != 0x737473697472615FLL)
        {
          if (v2 != 13) {
            goto LABEL_67;
          }
          if (*a1 != 0x5F73747369747261 || *(void *)((char *)a1 + 5) != 0x73676E6F735F7374) {
            goto LABEL_67;
          }
        }
        return 4;
      case 0xE:
        goto LABEL_40;
      default:
        goto LABEL_67;
    }
  }
  uint64_t v5 = a1[1];
  if (v5 == 5)
  {
    if (*(_DWORD *)*a1 == 1735290739 && *(unsigned char *)(*a1 + 4) == 115) {
      return 3;
    }
    uint64_t v5 = a1[1];
  }
  else if (v5 == 7 && *(_DWORD *)*a1 == 1769239137 && *(_DWORD *)(*a1 + 3) == 1937011561)
  {
    return 1;
  }
  if (v5 == 6)
  {
    if (*(_DWORD *)*a1 == 1969384545 && *(_WORD *)(*a1 + 4) == 29549) {
      return 2;
    }
    uint64_t v5 = a1[1];
  }
  if (v5 != 13) {
    goto LABEL_38;
  }
  if (*(void *)*a1 == 0x72615F73676E6F73 && *(void *)(*a1 + 5) == 0x737473697472615FLL) {
    return 4;
  }
  uint64_t v5 = a1[1];
  if (v5 != 13)
  {
LABEL_38:
    if (v5 == 14)
    {
      uint64_t v3 = (uint64_t *)*a1;
LABEL_40:
      uint64_t v11 = *v3;
      uint64_t v12 = *(uint64_t *)((char *)v3 + 6);
      if (v11 == 0x615F736D75626C61 && v12 == 0x737473697472615FLL) {
        return 5;
      }
    }
    goto LABEL_67;
  }
  if (*(void *)*a1 == 0x5F73747369747261 && *(void *)(*a1 + 5) == 0x73676E6F735F7374) {
    return 4;
  }
  if ((v2 & 0x80) != 0) {
    goto LABEL_38;
  }
LABEL_67:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "artists_albums")) {
    return 5;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "playlists")) {
    return 8;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "radiostations")) {
    return 10;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "composers")) {
    return 6;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "genres")) {
    return 7;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "podcasts")) {
    return 9;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "movie_titles")) {
    return 11;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "tvshow_titles")) {
    return 12;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "audiobooks")) {
    return 13;
  }
  return 0;
}

uint64_t quasar::DataFeed::initializeEnumerators(uint64_t result, long long *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (*a3 != a3[1])
  {
    uint64_t v5 = result;
    size_t v6 = (const void *)(result + 24);
    if (*(char *)(result + 47) >= 0) {
      size_t v7 = *(unsigned __int8 *)(result + 47);
    }
    else {
      size_t v7 = *(void *)(result + 32);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v7 + 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::vector<char>::pointer p_p = &__p;
    }
    else {
      std::vector<char>::pointer p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v7)
    {
      if (*(char *)(v5 + 47) >= 0) {
        long long v9 = v6;
      }
      else {
        long long v9 = *(const void **)(v5 + 24);
      }
      memmove(p_p, v9, v7);
    }
    *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v7) = 46;
    int v10 = *(char *)(v3 + 23);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v3;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)v3;
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v3 + 23);
    }
    else {
      std::string::size_type v12 = *(void *)(v3 + 8);
    }
    unint64_t v13 = std::string::append(&__p, v11, v12);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    std::string::size_type v17 = v13->__r_.__value_.__r.__words[2];
    long long v16 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::allocate_shared[abi:ne180100]<quasar::PMRegexEnumerator,std::allocator<quasar::PMRegexEnumerator>,char const(&)[6],std::string const&,std::string&,void>((uint64_t)&v18, "Regex", a2, &v16);
  }
  return result;
}

void sub_1B243AF18()
{
  if (*(char *)(v0 - 105) < 0) {
    JUMPOUT(0x1B243AF5CLL);
  }
  JUMPOUT(0x1B243AF60);
}

void sub_1B243AF20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B243AF4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    JUMPOUT(0x1B243AF5CLL);
  }
  JUMPOUT(0x1B243AF60);
}

quasar::DataFeed *quasar::DataFeed::DataFeed(quasar::DataFeed *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 3, "unknown");
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *(void *)((char *)this + 76) = 0x1F400000001;
  *((_DWORD *)this + 21) = -1110651699;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 17) = 0;
  *((_DWORD *)this + 36) = 1065353216;
  *((unsigned char *)this + 152) = 1;
  return this;
}

void sub_1B243AFF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::DataFeed::DataFeed(uint64_t a1, _DWORD *a2, quasar::SystemConfig *a3)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 72) = *a2;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(unsigned char *)(a1 + 152) = 1;
  quasar::DataFeed::loadSystemConfig((quasar::DataFeed *)a1, a3);
}

void sub_1B243B0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v13 = v12;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(v13);
  if (*(char *)(v10 + 111) < 0) {
    operator delete(*v11);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 47) < 0) {
    operator delete(*(void **)(v10 + 24));
  }
  a10 = (void **)v10;
  std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void quasar::DataFeed::loadSystemConfig(quasar::DataFeed *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "phonetic-match-building");
  quasar::SystemConfig::getPtreeOptional((uint64_t)a2, (uint64_t)__p);
}

void sub_1B243B808(_Unwind_Exception *a1)
{
}

void sub_1B243B828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *quasar::DataFeed::dataFeedTypeToName@<X0>(_DWORD *a1@<X0>, void *a2@<X8>)
{
  unsigned int v4 = *a1 - 1;
  if (v4 > 0xC) {
    uint64_t v5 = "unknown";
  }
  else {
    uint64_t v5 = off_1E6000400[v4];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

void quasar::DataFeed::dataFeedTypeToFields(_DWORD *a1@<X0>, std::string **a2@<X8>)
{
  *(void *)&long long v22 = *MEMORY[0x1E4F143B8];
  switch(*a1)
  {
    case 1:
      std::string::basic_string[abi:ne180100]<0>(__p, "artist_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      uint64_t v3 = (std::string *)operator new(0x18uLL);
      *a2 = v3;
      a2[1] = v3;
      a2[2] = v3 + 1;
      unsigned int v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (long long *)__p, (long long *)v21, v3);
      goto LABEL_24;
    case 2:
      std::string::basic_string[abi:ne180100]<0>(__p, "album_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      uint64_t v13 = (std::string *)operator new(0x18uLL);
      *a2 = v13;
      a2[1] = v13;
      a2[2] = v13 + 1;
      unsigned int v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (long long *)__p, (long long *)v21, v13);
      goto LABEL_24;
    case 3:
      std::string::basic_string[abi:ne180100]<0>(__p, "song_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      uint64_t v5 = (std::string *)operator new(0x18uLL);
      *a2 = v5;
      a2[1] = v5;
      a2[2] = v5 + 1;
      unsigned int v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (long long *)__p, (long long *)v21, v5);
      goto LABEL_24;
    case 4:
      std::string::basic_string[abi:ne180100]<0>(__p, "song_name");
      std::string::basic_string[abi:ne180100]<0>(v21, "artist_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      size_t v6 = (std::string *)operator new(0x30uLL);
      *a2 = v6;
      a2[1] = v6;
      a2[2] = v6 + 2;
      uint64_t v7 = 0;
      a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (long long *)__p, &v22, v6);
      do
      {
        if (SHIBYTE(v21[v7 + 2]) < 0) {
          operator delete((void *)v21[v7]);
        }
        v7 -= 3;
      }
      while (v7 != -6);
      return;
    case 5:
      std::string::basic_string[abi:ne180100]<0>(__p, "album_name");
      std::string::basic_string[abi:ne180100]<0>(v21, "artist_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      std::vector<std::string>::pointer v8 = (std::string *)operator new(0x30uLL);
      *a2 = v8;
      a2[1] = v8;
      a2[2] = v8 + 2;
      uint64_t v9 = 0;
      a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (long long *)__p, &v22, v8);
      do
      {
        if (SHIBYTE(v21[v9 + 2]) < 0) {
          operator delete((void *)v21[v9]);
        }
        v9 -= 3;
      }
      while (v9 != -6);
      return;
    case 6:
      std::string::basic_string[abi:ne180100]<0>(__p, "composer_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      long long v14 = (std::string *)operator new(0x18uLL);
      *a2 = v14;
      a2[1] = v14;
      a2[2] = v14 + 1;
      unsigned int v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (long long *)__p, (long long *)v21, v14);
      goto LABEL_24;
    case 7:
      std::string::basic_string[abi:ne180100]<0>(__p, "genre_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      unint64_t v15 = (std::string *)operator new(0x18uLL);
      *a2 = v15;
      a2[1] = v15;
      a2[2] = v15 + 1;
      unsigned int v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (long long *)__p, (long long *)v21, v15);
      goto LABEL_24;
    case 8:
      std::string::basic_string[abi:ne180100]<0>(__p, "playlist_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      long long v16 = (std::string *)operator new(0x18uLL);
      *a2 = v16;
      a2[1] = v16;
      a2[2] = v16 + 1;
      unsigned int v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (long long *)__p, (long long *)v21, v16);
      goto LABEL_24;
    case 9:
      std::string::basic_string[abi:ne180100]<0>(__p, "podcast_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      std::string::size_type v17 = (std::string *)operator new(0x18uLL);
      *a2 = v17;
      a2[1] = v17;
      a2[2] = v17 + 1;
      unsigned int v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (long long *)__p, (long long *)v21, v17);
      goto LABEL_24;
    case 0xA:
      std::string::basic_string[abi:ne180100]<0>(__p, "radiostation_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      uint64_t v10 = (std::string *)operator new(0x18uLL);
      *a2 = v10;
      a2[1] = v10;
      a2[2] = v10 + 1;
      unsigned int v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (long long *)__p, (long long *)v21, v10);
      goto LABEL_24;
    case 0xB:
      std::string::basic_string[abi:ne180100]<0>(__p, "movie_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      char v18 = (std::string *)operator new(0x18uLL);
      *a2 = v18;
      a2[1] = v18;
      a2[2] = v18 + 1;
      unsigned int v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (long long *)__p, (long long *)v21, v18);
      goto LABEL_24;
    case 0xC:
      std::string::basic_string[abi:ne180100]<0>(__p, "show_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      uint64_t v11 = (std::string *)operator new(0x18uLL);
      *a2 = v11;
      a2[1] = v11;
      a2[2] = v11 + 1;
      unsigned int v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (long long *)__p, (long long *)v21, v11);
      goto LABEL_24;
    case 0xD:
      std::string::basic_string[abi:ne180100]<0>(__p, "audiobook_name");
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      uint64_t v12 = (std::string *)operator new(0x18uLL);
      *a2 = v12;
      a2[1] = v12;
      a2[2] = v12 + 1;
      unsigned int v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (long long *)__p, (long long *)v21, v12);
LABEL_24:
      a2[1] = v4;
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      break;
    default:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      break;
  }
}

void sub_1B243BDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v19 = v18;
  *(void *)(v17 + 8) = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

std::string *quasar::DataFeed::getFieldNames@<X0>(long long **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[6], this[7], 0xAAAAAAAAAAAAAAABLL * (((char *)this[7] - (char *)this[6]) >> 3));
}

BOOL quasar::DataFeed::appendItem(quasar::DataFeed *this, const void ***a2)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = (uint64_t)(v2 - *(void *)this) >> 5;
  unint64_t v4 = *((int *)this + 20);
  if (v3 < v4)
  {
    if (v2 >= *((void *)this + 2))
    {
      uint64_t v6 = std::vector<quasar::DataFeedItem>::__push_back_slow_path<quasar::DataFeedItem const&>((uint64_t *)this, (uint64_t)a2);
    }
    else
    {
      *(_DWORD *)unint64_t v2 = *(_DWORD *)a2;
      std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)(v2 + 8), a2 + 1);
      uint64_t v6 = v2 + 32;
      *((void *)this + 1) = v2 + 32;
    }
    *((void *)this + 1) = v6;
  }
  return v3 < v4;
}

void sub_1B243C010(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

BOOL quasar::DataFeed::full(quasar::DataFeed *this)
{
  return *((int *)this + 20) <= (unint64_t)((uint64_t)(*((void *)this + 1) - *(void *)this) >> 5);
}

uint64_t quasar::DataFeed::getLimit(quasar::DataFeed *this)
{
  return *((unsigned int *)this + 20);
}

void quasar::DataFeed::sortItemsByPriorDesc(quasar::DataFeed *this)
{
  uint64_t v1 = (quasar::DataFeedItem *)*((void *)this + 1);
  unint64_t v2 = 126 - 2 * __clz(((uint64_t)v1 - *(void *)this) >> 5);
  if (v1 == *(quasar::DataFeedItem **)this) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v2;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *,false>(*(int **)this, v1, (uint64_t)&v4, v3, 1);
}

void quasar::DataFeed::sortItemsByPriorAsc(quasar::DataFeed *this)
{
  uint64_t v1 = (quasar::DataFeedItem *)*((void *)this + 1);
  unint64_t v2 = 126 - 2 * __clz(((uint64_t)v1 - *(void *)this) >> 5);
  if (v1 == *(quasar::DataFeedItem **)this) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v2;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *,false>(*(int **)this, v1, (uint64_t)&v4, v3, 1);
}

float **quasar::DataFeed::normalizePriors(float **this)
{
  uint64_t v1 = *this;
  unint64_t v2 = this[1];
  if (*this != v2)
  {
    float v3 = 0.0;
    char v4 = *this;
    do
    {
      float v5 = *v4;
      v4 += 8;
      float v3 = v3 + v5;
    }
    while (v4 != v2);
    while (v1 != v2)
    {
      *uint64_t v1 = *v1 / v3;
      v1 += 8;
    }
  }
  return this;
}

void quasar::DataFeed::expDecayPriors(quasar::DataFeed *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  if (*(void *)this != v2)
  {
    unint64_t v3 = 0;
    char v4 = (const float *)((char *)this + 84);
    unint64_t v5 = (unint64_t)(v2 - v1 - 32) >> 5;
    uint64x2_t v12 = (uint64x2_t)vdupq_n_s64(v5);
    uint64_t v6 = (v5 + 2) & 0xFFFFFFFFFFFFFFELL;
    float32x2_t v7 = vld1_dup_f32(v4);
    std::vector<std::string>::pointer v8 = (float *)(v1 + 32);
    do
    {
      int32x2_t v15 = vmovn_s64((int64x2_t)vcgeq_u64(v12, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v3), (int8x16_t)xmmword_1B255FA20)));
      v9.i32[0] = v3;
      v9.i32[1] = v3 + 1;
      float32x2_t v10 = vmul_f32(v7, vcvt_f32_s32(v9));
      float v13 = v10.f32[0];
      float v14 = expf(v10.f32[1]);
      float v11 = expf(v13);
      if (v15.i8[0]) {
        *(v8 - 8) = v11;
      }
      if (v15.i8[4]) {
        *std::vector<std::string>::pointer v8 = v14;
      }
      v3 += 2;
      v8 += 16;
    }
    while (v6 != v3);
  }
}

void quasar::DataFeed::powerScalePriors(float **this)
{
  uint64_t v1 = *this;
  uint64_t v2 = this[1];
  if (*this != v2)
  {
    double v3 = (double)*((int *)this + 19);
    do
    {
      float v4 = pow(*v1, v3);
      *uint64_t v1 = v4;
      v1 += 8;
    }
    while (v1 != v2);
  }
}

void quasar::DataFeed::addOSym(quasar::DataFeedItem **this)
{
  uint64_t v1 = *this;
  uint64_t v2 = this[1];
  while (v1 != v2)
  {
    quasar::DataFeedItem::addOSym(v1);
    uint64_t v1 = (quasar::DataFeedItem *)((char *)v1 + 32);
  }
}

void quasar::DataFeed::applyRegexEnumerations(quasar::DataFeed *this)
{
  uint64_t v1 = *((void *)this + 6);
  uint64_t v2 = *((void *)this + 7);
  if (v1 != v2)
  {
    float v4 = (void *)((char *)this + 112);
    do
    {
      unint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v4, (unsigned __int8 *)v1);
      if (v5)
      {
        uint64_t v7 = *(void *)this;
        uint64_t v6 = *((void *)this + 1);
        if (*(void *)this != v6)
        {
          std::vector<std::string>::pointer v8 = v5;
          do
          {
            uint64_t v9 = *((void *)v8 + 5);
            quasar::DataFeedItem::getField(v7, (const void **)v1, &__p);
            quasar::PMRegexEnumerator::getEnumerationsRegexFormat(v9, &__p, (std::string *)__str);
            unint64_t v34 = (long long *)v1;
            float32x2_t v10 = (uint64_t **)(v7 + 8);
            float v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (const void **)v1, (uint64_t)&std::piecewise_construct, &v34);
            std::string::operator=((std::string *)(v11 + 7), (const std::string *)__str);
            if ((__str[23] & 0x80000000) != 0) {
              operator delete(*(void **)__str);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            uint64_t v7 = (uint64_t)(v10 + 3);
          }
          while (v7 != v6);
        }
      }
      else if (quasar::gLogLevel >= 5)
      {
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v19 = 0u;
        memset(__str, 0, sizeof(__str));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
        uint64x2_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Enumerator is not available for field [", 39);
        int v13 = *(char *)(v1 + 23);
        if (v13 >= 0) {
          uint64_t v14 = v1;
        }
        else {
          uint64_t v14 = *(void *)v1;
        }
        if (v13 >= 0) {
          uint64_t v15 = *(unsigned __int8 *)(v1 + 23);
        }
        else {
          uint64_t v15 = *(void *)(v1 + 8);
        }
        long long v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"]", 1);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__str);
      }
      v1 += 24;
    }
    while (v1 != v2);
  }
}

void sub_1B243C42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

uint64_t quasar::DataFeed::writeTSV(uint64_t a1, uint64_t a2)
{
  v34[19] = *MEMORY[0x1E4F143B8];
  std::ofstream::basic_ofstream(&v31);
  std::string::basic_string[abi:ne180100]<0>(__p, "Prior");
  memset(&v25, 0, sizeof(v25));
  long long v26 = (const char *)&v25;
  LOBYTE(v27) = 0;
  v25.__begin_ = (std::vector<std::string>::pointer)operator new(0x18uLL);
  v25.__end_ = v25.__begin_;
  v25.__end_cap_.__value_ = v25.__begin_ + 1;
  std::vector<std::string>::pointer end = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v25.__end_cap_, (long long *)__p, (long long *)((char *)v30 + 8), v25.__begin_);
  v25.__end_ = end;
  if (SBYTE7(v30[0]) < 0)
  {
    operator delete(__p[0]);
    std::vector<std::string>::pointer end = v25.__end_;
  }
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v25, end, *(std::string **)(a1 + 48), *(long long **)(a1 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3));
  if (v33)
  {
    long long v26 = "\t";
    uint64_t v27 = 1;
    quasar::join<std::vector<std::string>>((uint64_t *)&v25, (uint64_t *)&v26);
    if ((SBYTE7(v30[0]) & 0x80u) == 0) {
      unint64_t v5 = __p;
    }
    else {
      unint64_t v5 = (void **)__p[0];
    }
    if ((SBYTE7(v30[0]) & 0x80u) == 0) {
      uint64_t v6 = BYTE7(v30[0]);
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)v5, v6);
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
    std::vector<std::string>::pointer v8 = std::locale::use_facet(&v28, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(&v28);
    std::ostream::put();
    std::ostream::flush();
    if (SBYTE7(v30[0]) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = *(void *)a1;
    uint64_t v10 = *(void *)(a1 + 8);
    if (*(void *)a1 != v10)
    {
      float v11 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        uint64x2_t v12 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\t", 1);
        int v13 = *(const void ***)(a1 + 48);
        uint64_t v14 = *(const void ***)(a1 + 56);
        while (v13 != v14)
        {
          quasar::DataFeedItem::getField(v9, v13, (std::string *)__p);
          if ((SBYTE7(v30[0]) & 0x80u) == 0) {
            uint64_t v15 = __p;
          }
          else {
            uint64_t v15 = (void **)__p[0];
          }
          if ((SBYTE7(v30[0]) & 0x80u) == 0) {
            uint64_t v16 = BYTE7(v30[0]);
          }
          else {
            uint64_t v16 = (uint64_t)__p[1];
          }
          uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)v15, v16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\t", 1);
          if (SBYTE7(v30[0]) < 0) {
            operator delete(__p[0]);
          }
          v13 += 3;
        }
        std::ios_base::getloc((const std::ios_base *)&v32[*(void *)(v31 - 24) - 8]);
        uint64_t v18 = std::locale::use_facet((const std::locale *)__p, v11);
        ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
        v9 += 32;
      }
      while (v9 != v10);
    }
  }
  else
  {
    if (quasar::gLogLevel < 1) {
      goto LABEL_38;
    }
    memset(v30, 0, sizeof(v30));
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    long long v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unable to open the file to write: '", 35);
    int v20 = *(char *)(a2 + 23);
    if (v20 >= 0) {
      uint64_t v21 = a2;
    }
    else {
      uint64_t v21 = *(void *)a2;
    }
    if (v20 >= 0) {
      uint64_t v22 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v22 = *(void *)(a2 + 8);
    }
    long long v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"'", 1);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
  }
  if (v33 && !std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)&v32[*(void *)(v31 - 24) - 8], *(_DWORD *)&v32[*(void *)(v31 - 24) + 24] | 4);
  }
LABEL_38:
  __p[0] = &v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  uint64_t v31 = *MEMORY[0x1E4FBA400];
  *(void *)&v32[*(void *)(v31 - 24) - 8] = *(void *)(MEMORY[0x1E4FBA400] + 24);
  MEMORY[0x1B3EA7CF0](v32);
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](v34);
}

void sub_1B243C900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, std::locale a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  a12 = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::ofstream::~ofstream(&a52);
  _Unwind_Resume(a1);
}

uint64_t quasar::DataFeed::readTSV(std::vector<std::wstring> *a1, uint64_t a2, std::vector<std::wstring> *a3, uint64_t a4, int a5, int a6)
{
  v102[19] = *MEMORY[0x1E4F143B8];
  memset(&__str, 0, sizeof(__str));
  std::ifstream::basic_ifstream(v99);
  memset(&v94, 0, sizeof(v94));
  memset(v92, 0, sizeof(v92));
  int v93 = 1065353216;
  begiuint64_t n = a1->__begin_;
  std::vector<std::string>::pointer end = a1->__end_;
  if (end != a1->__begin_)
  {
    do
    {
      uint64_t v14 = (std::wstring *)((char *)end - 32);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&end[-1], (void *)end[-1].__r_.__value_.__l.__size_);
      std::vector<std::string>::pointer end = v14;
    }
    while (v14 != begin);
  }
  a1->__end_ = begin;
  if (&a1[2] != a3) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 2, (std::string *)a3->__begin_, (long long *)a3->__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)a3->__end_ - (char *)a3->__begin_) >> 3));
  }
  if (v101)
  {
    unint64_t v15 = a5;
    unsigned int v72 = -1;
    uint64_t v16 = (std::locale::id *)MEMORY[0x1E4FBA258];
    double v17 = (double)a6;
    uint64_t v18 = "#";
    long long v19 = " ";
    while (1)
    {
      while (1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v99 + *(void *)(v99[0] - 24)));
        int v20 = std::locale::use_facet(v73, v16);
        unsigned __int8 v21 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
        std::locale::~locale(v73);
        uint64_t v22 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v99, (uint64_t)&__str, v21);
        if ((*((unsigned char *)v22 + *(void *)(*v22 - 24) + 32) & 5) != 0
          || v15 <= ((char *)a1->__end_ - (char *)a1->__begin_) >> 5)
        {
          quasar::DataFeed::applyRegexEnumerations((quasar::DataFeed *)a1);
          uint64_t v53 = (quasar::DataFeedItem *)a1->__begin_;
          long long v54 = (quasar::DataFeedItem *)a1->__end_;
          while (v53 != v54)
          {
            quasar::DataFeedItem::addOSym(v53);
            uint64_t v53 = (quasar::DataFeedItem *)((char *)v53 + 32);
          }
          if (v101 && !std::filebuf::close()) {
            std::ios_base::clear((std::ios_base *)((char *)v99 + *(void *)(v99[0] - 24)), *(_DWORD *)&v100[*(void *)(v99[0] - 24) + 16] | 4);
          }
          uint64_t v55 = 1;
          goto LABEL_80;
        }
        std::string::basic_string[abi:ne180100]<0>(v73, v18);
        BOOL v23 = quasar::startsWith((unsigned __int8 *)&__str, (unsigned __int8 *)v73);
        BOOL v24 = v23;
        if ((SBYTE7(v74) & 0x80000000) == 0) {
          break;
        }
        operator delete(v73[0].__locale_);
        if (!v24) {
          goto LABEL_13;
        }
      }
      if (!v23)
      {
LABEL_13:
        std::string::basic_string[abi:ne180100]<0>(v73, "\t");
        quasar::splitAndTrim(&__str, (char *)v73, (uint64_t *)&v90);
        if (SBYTE7(v74) < 0) {
          operator delete(v73[0].__locale_);
        }
        if (v94.__end_ == v94.__begin_)
        {
          uint64_t v71 = a3;
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v94, v90, v91, 0xAAAAAAAAAAAAAAABLL * (((char *)v91 - (char *)v90) >> 3));
          std::vector<std::wstring>::pointer v34 = v94.__begin_;
          std::vector<std::wstring>::pointer v33 = v94.__end_;
          if (v94.__begin_ == v94.__end_)
          {
            std::vector<std::wstring>::pointer v37 = v94.__begin_;
          }
          else
          {
            do
            {
              std::string::basic_string[abi:ne180100]<0>(v73, v19);
              std::string::basic_string[abi:ne180100]<0>(__p, "_");
              quasar::replaceAll((uint64_t)v34, (uint64_t)v73, (char *)__p);
              if (v97 < 0) {
                operator delete(__p[0]);
              }
              if (SBYTE7(v74) < 0) {
                operator delete(v73[0].__locale_);
              }
              if (SHIBYTE(v34->__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v73, (const std::string::value_type *)v34->__r_.__value_.__l.__data_, v34->__r_.__value_.__l.__size_);
              }
              else
              {
                long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
                *(void *)&long long v74 = *((void *)&v34->__r_.__value_.__l + 2);
                *(_OWORD *)&v73[0].__locale_ = v35;
              }
              if (SHIBYTE(v34->__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v34->__r_.__value_.__l.__data_);
              }
              long long v36 = *(_OWORD *)&v73[0].__locale_;
              v34->__r_.__value_.__r.__words[2] = v74;
              *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v36;
              ++v34;
            }
            while (v34 != v33);
            std::vector<std::wstring>::pointer v37 = v94.__begin_;
            std::vector<std::wstring>::pointer v34 = v94.__end_;
          }
          uint64_t v44 = (std::wstring *)std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>((uint64_t)v37, (uint64_t)v34, (unsigned __int8 **)a4);
          if (v44 == v94.__end_)
          {
            if (quasar::gLogLevel >= 1)
            {
              long long v88 = 0u;
              long long v89 = 0u;
              long long v86 = 0u;
              long long v87 = 0u;
              long long v84 = 0u;
              long long v85 = 0u;
              long long v82 = 0u;
              long long v83 = 0u;
              long long v80 = 0u;
              long long v81 = 0u;
              long long v78 = 0u;
              long long v79 = 0u;
              long long v76 = 0u;
              long long v77 = 0u;
              long long v74 = 0u;
              long long v75 = 0u;
              *(_OWORD *)&v73[0].__locale_ = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
              uint64_t v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Could not find prior field '", 28);
              int v67 = *(char *)(a4 + 23);
              if (v67 >= 0) {
                long long v63 = (unsigned __int8 *)a4;
              }
              else {
                long long v63 = *(unsigned __int8 **)a4;
              }
              if (v67 >= 0) {
                uint64_t size = *(unsigned __int8 *)(a4 + 23);
              }
              else {
                uint64_t size = *(void *)(a4 + 8);
              }
LABEL_77:
              long long v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v63, size);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"' in the header", 15);
              quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v73);
            }
LABEL_78:
            v73[0].__locale_ = (std::locale::__imp *)&v90;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v73);
            goto LABEL_79;
          }
          uint64_t v69 = a4;
          unsigned int v72 = -1431655765 * ((unint64_t)((char *)v44 - (char *)v94.__begin_) >> 3);
          std::vector<std::wstring>::pointer v45 = v71->__begin_;
          uint64_t v46 = v71->__end_;
          if (v71->__begin_ != v46)
          {
            while (1)
            {
              long long v47 = (std::wstring *)std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>((uint64_t)v94.__begin_, (uint64_t)v94.__end_, (unsigned __int8 **)v45);
              if (v47 == v94.__end_) {
                break;
              }
              std::string::size_type v48 = v18;
              uint64_t v49 = v19;
              std::vector<std::wstring>::pointer v50 = v94.__begin_;
              v73[0].__locale_ = (std::locale::__imp *)v45;
              *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v92, (unsigned __int8 *)v45++, (uint64_t)&std::piecewise_construct, (long long **)v73)+ 10) = -1431655765 * ((unint64_t)((char *)v47 - (char *)v50) >> 3);
              long long v19 = v49;
              uint64_t v18 = v48;
              if (v45 == v46) {
                goto LABEL_49;
              }
            }
            if (quasar::gLogLevel >= 1)
            {
              long long v88 = 0u;
              long long v89 = 0u;
              long long v86 = 0u;
              long long v87 = 0u;
              long long v84 = 0u;
              long long v85 = 0u;
              long long v82 = 0u;
              long long v83 = 0u;
              long long v80 = 0u;
              long long v81 = 0u;
              long long v78 = 0u;
              long long v79 = 0u;
              long long v76 = 0u;
              long long v77 = 0u;
              long long v74 = 0u;
              long long v75 = 0u;
              *(_OWORD *)&v73[0].__locale_ = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
              uint64_t v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Could not find field '", 22);
              int v62 = SHIBYTE(v45->__r_.__value_.__r.__words[2]);
              if (v62 >= 0) {
                long long v63 = (unsigned __int8 *)v45;
              }
              else {
                long long v63 = (unsigned __int8 *)v45->__r_.__value_.__r.__words[0];
              }
              if (v62 >= 0) {
                uint64_t size = HIBYTE(v45->__r_.__value_.__r.__words[2]);
              }
              else {
                uint64_t size = v45->__r_.__value_.__l.__size_;
              }
              goto LABEL_77;
            }
            goto LABEL_78;
          }
LABEL_49:
          a4 = v69;
          a3 = v71;
        }
        else
        {
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v94.__end_ - (char *)v94.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v91 - (char *)v90) >> 3) == v25)
          {
            if ((v72 & 0x80000000) != 0 || v25 <= v72)
            {
              if (quasar::gLogLevel >= 1)
              {
                long long v88 = 0u;
                long long v89 = 0u;
                long long v86 = 0u;
                long long v87 = 0u;
                long long v84 = 0u;
                long long v85 = 0u;
                long long v82 = 0u;
                long long v83 = 0u;
                long long v80 = 0u;
                long long v81 = 0u;
                long long v78 = 0u;
                long long v79 = 0u;
                long long v76 = 0u;
                long long v77 = 0u;
                long long v74 = 0u;
                long long v75 = 0u;
                *(_OWORD *)&v73[0].__locale_ = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Prior field out of bound: ", 26);
                std::ostream::operator<<();
                quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v73);
              }
              goto LABEL_78;
            }
            uint64_t v68 = a4;
            float v26 = std::stof(&v90[v72], 0);
            float v27 = pow(v26, v17);
            long long v74 = 0uLL;
            v73[1].__locale_ = (std::locale::__imp *)&v74;
            *(float *)&v73[0].__locale_ = v27;
            uint64_t v70 = a3;
            std::locale v28 = (std::string *)a3->__begin_;
            long long v29 = (std::string *)a3->__end_;
            while (v28 != v29)
            {
              long long v98 = v28;
              int v30 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v92, (unsigned __int8 *)v28, (uint64_t)&std::piecewise_construct, (long long **)&v98)+ 10);
              uint64_t v31 = v90;
              long long v98 = v28;
              long long v32 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v73[1], (const void **)&v28->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v98);
              std::string::operator=((std::string *)(v32 + 7), &v31[v30]);
              ++v28;
            }
            std::vector<std::wstring>::pointer v51 = a1->__end_;
            if (v51 >= a1->__end_cap_.__value_)
            {
              p_uint64_t size = std::vector<quasar::DataFeedItem>::__push_back_slow_path<quasar::DataFeedItem const&>((uint64_t *)a1, (uint64_t)v73);
              a4 = v68;
              a3 = v70;
              long long v19 = " ";
            }
            else
            {
              v51->__r_.__value_.__s.__data_[0] = (std::wstring::value_type)v73[0].__locale_;
              std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)&v51->__r_.__value_.__l.__size_, (const void ***)&v73[1]);
              a3 = v70;
              long long v19 = " ";
              p_uint64_t size = (uint64_t)&v51[1].__r_.__value_.__l.__size_;
              a1->__end_ = (std::vector<std::wstring>::pointer)((char *)v51 + 32);
              a4 = v68;
            }
            a1->__end_ = (std::vector<std::wstring>::pointer)p_size;
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v73[1], (void *)v74);
          }
          else if (quasar::gLogLevel >= 5)
          {
            long long v88 = 0u;
            long long v89 = 0u;
            long long v86 = 0u;
            long long v87 = 0u;
            long long v84 = 0u;
            long long v85 = 0u;
            long long v82 = 0u;
            long long v83 = 0u;
            long long v80 = 0u;
            long long v81 = 0u;
            long long v78 = 0u;
            long long v79 = 0u;
            long long v76 = 0u;
            long long v77 = 0u;
            long long v74 = 0u;
            long long v75 = 0u;
            *(_OWORD *)&v73[0].__locale_ = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Expecting ", 10);
            unint64_t v38 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" fields, but found ", 19);
            unint64_t v39 = (void *)std::ostream::operator<<();
            unint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" at '", 5);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_str = &__str;
            }
            else {
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v42 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v42 = __str.__r_.__value_.__l.__size_;
            }
            uint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)p_str, v42);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"'", 1);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v73);
          }
        }
        v73[0].__locale_ = (std::locale::__imp *)&v90;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v73);
      }
    }
  }
  if (quasar::gLogLevel >= 1)
  {
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    *(_OWORD *)&v73[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
    uint64_t v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Unable to open the file to read: '", 34);
    int v57 = *(char *)(a2 + 23);
    if (v57 >= 0) {
      uint64_t v58 = a2;
    }
    else {
      uint64_t v58 = *(void *)a2;
    }
    if (v57 >= 0) {
      uint64_t v59 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v59 = *(void *)(a2 + 8);
    }
    long long v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, v58, v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"'", 1);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v73);
  }
LABEL_79:
  uint64_t v55 = 0;
LABEL_80:
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v92);
  v73[0].__locale_ = (std::locale::__imp *)&v94;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v73);
  v99[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v99 + *(void *)(v99[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1B3EA7CF0](v100);
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v102);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v55;
}

void sub_1B243D474(_Unwind_Exception *a1)
{
  uint64_t v6 = (void **)&v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v3);
  v3[0] = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v3);
  std::ifstream::~ifstream(&v7);
  if (v5 < 0) {
    operator delete(v4[3]);
  }
  _Unwind_Resume(a1);
}

void sub_1B243D5A0(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2);
  v2[0] = v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v2);
  std::ifstream::~ifstream(&v5);
  if (v4 < 0) {
    operator delete(v3[3]);
  }
  _Unwind_Resume(a1);
}

void sub_1B243D5A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15)
{
}

uint64_t quasar::DataFeed::readNT(std::vector<std::wstring> *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  v66[19] = *MEMORY[0x1E4F143B8];
  memset(&__str, 0, sizeof(__str));
  std::ifstream::basic_ifstream(v63);
  begiuint64_t n = a1->__begin_;
  std::vector<std::string>::pointer end = a1->__end_;
  if (end != a1->__begin_)
  {
    do
    {
      int v13 = (std::wstring *)((char *)end - 32);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&end[-1], (void *)end[-1].__r_.__value_.__l.__size_);
      std::vector<std::string>::pointer end = v13;
    }
    while (v13 != begin);
  }
  a1->__end_ = begin;
  if (&a1[2] != (std::vector<std::wstring> *)a3) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 2, *(std::string **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  }
  if (v65)
  {
    unint64_t v42 = a5;
    double v14 = (double)a6;
    unint64_t v15 = (std::locale::id *)MEMORY[0x1E4FBA258];
    while (1)
    {
      while (1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v63 + *(void *)(v63[0] - 24)));
        uint64_t v16 = std::locale::use_facet(v43, v15);
        unsigned __int8 v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale(v43);
        uint64_t v18 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v63, (uint64_t)&__str, v17);
        if ((*((unsigned char *)v18 + *(void *)(*v18 - 24) + 32) & 5) != 0
          || v42 <= ((char *)a1->__end_ - (char *)a1->__begin_) >> 5)
        {
          quasar::DataFeed::applyRegexEnumerations((quasar::DataFeed *)a1);
          unint64_t v41 = (quasar::DataFeedItem *)a1->__begin_;
          unint64_t v40 = (quasar::DataFeedItem *)a1->__end_;
          while (v41 != v40)
          {
            quasar::DataFeedItem::addOSym(v41);
            unint64_t v41 = (quasar::DataFeedItem *)((char *)v41 + 32);
          }
          if (v65 && !std::filebuf::close()) {
            std::ios_base::clear((std::ios_base *)((char *)v63 + *(void *)(v63[0] - 24)), *(_DWORD *)&v64[*(void *)(v63[0] - 24) + 16] | 4);
          }
          uint64_t v38 = 1;
          goto LABEL_42;
        }
        std::string::basic_string[abi:ne180100]<0>(v43, "#");
        BOOL v19 = quasar::startsWith((unsigned __int8 *)&__str, (unsigned __int8 *)v43);
        BOOL v20 = v19;
        if ((SBYTE7(v44) & 0x80000000) == 0) {
          break;
        }
        operator delete(v43[0].__locale_);
        if (!v20) {
          goto LABEL_13;
        }
      }
      if (!v19)
      {
LABEL_13:
        std::string::basic_string[abi:ne180100]<0>(v43, "prior=");
        BOOL v21 = quasar::startsWith((unsigned __int8 *)&__str, (unsigned __int8 *)v43);
        BOOL v22 = v21;
        if (SBYTE7(v44) < 0)
        {
          operator delete(v43[0].__locale_);
          if (!v22) {
            goto LABEL_20;
          }
        }
        else if (!v21)
        {
          goto LABEL_20;
        }
        std::string::basic_string((std::string *)v43, &__str, 6uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v60);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v43[0].__locale_;
        __str.__r_.__value_.__r.__words[2] = v44;
LABEL_20:
        std::string::basic_string[abi:ne180100]<0>(v43, "\t");
        quasar::splitAndTrim(&__str, (char *)v43, (uint64_t *)v60);
        if (SBYTE7(v44) < 0) {
          operator delete(v43[0].__locale_);
        }
        if (v60[1] == v60[0])
        {
          if (quasar::gLogLevel >= 1)
          {
            long long v58 = 0u;
            long long v59 = 0u;
            long long v56 = 0u;
            long long v57 = 0u;
            long long v54 = 0u;
            long long v55 = 0u;
            long long v52 = 0u;
            long long v53 = 0u;
            long long v50 = 0u;
            long long v51 = 0u;
            long long v48 = 0u;
            long long v49 = 0u;
            long long v46 = 0u;
            long long v47 = 0u;
            long long v44 = 0u;
            long long v45 = 0u;
            *(_OWORD *)&v43[0].__locale_ = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Prior field out of bound: ", 26);
            std::ostream::operator<<();
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v43);
          }
          v43[0].__locale_ = (std::locale::__imp *)v60;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v43);
          goto LABEL_41;
        }
        float v23 = std::stof(v60[0], 0);
        BOOL v24 = v15;
        long long v44 = 0uLL;
        v43[1].__locale_ = (std::locale::__imp *)&v44;
        float v25 = pow(v23, v14);
        *(float *)&v43[0].__locale_ = v25;
        float v27 = *(std::string **)a3;
        float v26 = *(std::string **)(a3 + 8);
        if (*(std::string **)a3 != v26)
        {
          uint64_t v28 = 1;
          do
          {
            long long v29 = v60[0];
            p_uint64_t data = (const void **)&v27[v28 - 1].__r_.__value_.__l.__data_;
            int v30 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v43[1], p_data, (uint64_t)&std::piecewise_construct, (long long **)&p_data);
            std::string::operator=((std::string *)(v30 + 7), &v29[v28++]);
          }
          while (&v27[v28 - 1] != v26);
        }
        std::vector<std::wstring>::pointer v31 = a1->__end_;
        if (v31 >= a1->__end_cap_.__value_)
        {
          p_uint64_t size = std::vector<quasar::DataFeedItem>::__push_back_slow_path<quasar::DataFeedItem const&>((uint64_t *)a1, (uint64_t)v43);
        }
        else
        {
          v31->__r_.__value_.__s.__data_[0] = (std::wstring::value_type)v43[0].__locale_;
          std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)&v31->__r_.__value_.__l.__size_, (const void ***)&v43[1]);
          p_uint64_t size = (uint64_t)&v31[1].__r_.__value_.__l.__size_;
          a1->__end_ = (std::vector<std::wstring>::pointer)((char *)v31 + 32);
        }
        unint64_t v15 = v24;
        a1->__end_ = (std::vector<std::wstring>::pointer)p_size;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v43[1], (void *)v44);
        v43[0].__locale_ = (std::locale::__imp *)v60;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v43);
      }
    }
  }
  if (quasar::gLogLevel >= 1)
  {
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    *(_OWORD *)&v43[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
    std::vector<std::wstring>::pointer v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Unable to open the file to read: '", 34);
    int v34 = *(char *)(a2 + 23);
    if (v34 >= 0) {
      uint64_t v35 = a2;
    }
    else {
      uint64_t v35 = *(void *)a2;
    }
    if (v34 >= 0) {
      uint64_t v36 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v36 = *(void *)(a2 + 8);
    }
    std::vector<std::wstring>::pointer v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"'", 1);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v43);
  }
LABEL_41:
  uint64_t v38 = 0;
LABEL_42:
  v63[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v63 + *(void *)(v63[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1B3EA7CF0](v64);
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v66);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v38;
}

void sub_1B243DC94(_Unwind_Exception *a1)
{
  uint64_t v2 = v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::ifstream::~ifstream(&v5);
  if (v4 < 0) {
    operator delete(v3[3]);
  }
  _Unwind_Resume(a1);
}

void sub_1B243DC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)va);
  __cxa_end_catch();
  char v4 = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::ifstream::~ifstream(&v7);
  if (v6 < 0) {
    operator delete(v5[3]);
  }
  _Unwind_Resume(a1);
}

void sub_1B243DCB8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B243DD80);
}

void sub_1B243DCF8()
{
}

void sub_1B243DD00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B243DD68);
}

void sub_1B243DD30(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
}

void sub_1B243DD40()
{
}

uint64_t quasar::DataFeed::merge(long long ***this, const quasar::DataFeed *a2)
{
  long long v24 = 0u;
  long long v25 = 0u;
  int v26 = 1065353216;
  char v4 = *this;
  uint64_t v5 = this[1];
  if (*this != v5)
  {
    char v6 = (long long *)(v4 + 2);
    do
    {
      quasar::DataFeedItem::signatureStrWithoutPrior((quasar::DataFeedItem *)v4, &__p);
      uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(&v24, (unsigned __int8 *)&__p);
      if (v7)
      {
        *((float *)v7 + 10) = *((float *)v7 + 10) + *(float *)v4;
      }
      else
      {
        v19[0] = &__p;
        std::vector<std::string>::pointer v8 = std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeedItem>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeedItem>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v24, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)v19);
        *((_DWORD *)v8 + 10) = *(_DWORD *)v4;
        if (v4 != (long long **)(v8 + 40)) {
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)v8 + 6, v4[1], v6);
        }
      }
      if (SHIBYTE(v23) < 0) {
        operator delete(__p);
      }
      v4 += 4;
      v6 += 2;
    }
    while (v4 != v5);
  }
  std::string __p = 0;
  BOOL v22 = 0;
  uint64_t v23 = 0;
  std::vector<quasar::DataFeedItem>::__init_with_size[abi:ne180100]<quasar::DataFeedItem*,quasar::DataFeedItem*>(&__p, *(void *)a2, *((void *)a2 + 1), (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 5);
  uint64_t v9 = (long long **)__p;
  uint64_t v10 = v22;
  if (__p != v22)
  {
    float v11 = (long long *)((char *)__p + 16);
    do
    {
      quasar::DataFeedItem::signatureStrWithoutPrior((quasar::DataFeedItem *)v9, v19);
      uint64x2_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(&v24, (unsigned __int8 *)v19);
      if (v12)
      {
        *((float *)v12 + 10) = *((float *)v12 + 10) + *(float *)v9;
      }
      else
      {
        float v27 = v19;
        int v13 = std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeedItem>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeedItem>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v24, (unsigned __int8 *)v19, (uint64_t)&std::piecewise_construct, (long long **)&v27);
        *((_DWORD *)v13 + 10) = *(_DWORD *)v9;
        if (v9 != (long long **)(v13 + 40)) {
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)v13 + 6, v9[1], v11);
        }
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      v9 += 4;
      v11 += 2;
    }
    while (v9 != v10);
  }
  v19[0] = &__p;
  std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100]((void ***)v19);
  unint64_t v15 = (unint64_t)*this;
  double v14 = this[1];
  if (v14 != *this)
  {
    do
    {
      uint64_t v16 = v14 - 4;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v14 - 3), *(v14 - 2));
      double v14 = v16;
    }
    while (v16 != (long long **)v15);
  }
  this[1] = (long long **)v15;
  for (std::vector<std::string>::pointer i = (uint64_t *)v25; i; std::vector<std::string>::pointer i = (uint64_t *)*i)
  {
    if (v15 >= (unint64_t)this[2])
    {
      unint64_t v15 = std::vector<quasar::DataFeedItem>::__push_back_slow_path<quasar::DataFeedItem const&>((uint64_t *)this, (uint64_t)(i + 5));
    }
    else
    {
      *(_DWORD *)unint64_t v15 = *((_DWORD *)i + 10);
      std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)(v15 + 8), (const void ***)i + 6);
      v15 += 32;
      this[1] = (long long **)v15;
    }
    this[1] = (long long **)v15;
  }
  return std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeedItem>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeedItem>>>::~__hash_table((uint64_t)&v24);
}

void sub_1B243DFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

void quasar::DataFeedFactory::loadDataFeedFromFile(long long *a1@<X0>, int a2@<W1>, int a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, long long **a7@<X7>, std::vector<std::wstring> *a8@<X8>, uint64_t a9, long long *a10)
{
  quasar::DataFeed::DataFeed((uint64_t)a8, a1, a3, a2, a10, a7, 0.0);
  if (*(char *)(a4 + 23) < 0)
  {
    uint64_t v21 = *(void *)(a4 + 8);
    if (v21 != 2)
    {
      if (v21 != 3) {
        goto LABEL_19;
      }
      if (**(_WORD **)a4 != 21332 || *(unsigned char *)(*(void *)a4 + 2) != 86) {
        goto LABEL_19;
      }
LABEL_38:
      char TSV = quasar::DataFeed::readTSV(a8, a5, (std::vector<std::wstring> *)a7, a6, a2, a3);
      if (quasar::gLogLevel < 1) {
        char v31 = 1;
      }
      else {
        char v31 = TSV;
      }
      if ((v31 & 1) == 0)
      {
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v36 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
        long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"An error occurred when reading TSV from: ", 41);
        int v33 = *(char *)(a5 + 23);
        if (v33 >= 0) {
          uint64_t v34 = a5;
        }
        else {
          uint64_t v34 = *(void *)a5;
        }
        if (v33 >= 0) {
          uint64_t v35 = *(unsigned __int8 *)(a5 + 23);
        }
        else {
          uint64_t v35 = *(void *)(a5 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v36);
      }
      return;
    }
    BOOL v19 = *(_WORD **)a4;
  }
  else
  {
    int v18 = *(unsigned __int8 *)(a4 + 23);
    BOOL v19 = (_WORD *)a4;
    if (v18 != 2)
    {
      if (v18 != 3) {
        goto LABEL_19;
      }
      if (*(_WORD *)a4 != 21332 || *(unsigned char *)(a4 + 2) != 86) {
        goto LABEL_19;
      }
      goto LABEL_38;
    }
  }
  if (*v19 != 21582)
  {
LABEL_19:
    if (quasar::gLogLevel < 1) {
      return;
    }
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v36 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Invalid DataFeed type ", 22);
    int v24 = *(char *)(a4 + 23);
    if (v24 >= 0) {
      uint64_t v25 = a4;
    }
    else {
      uint64_t v25 = *(void *)a4;
    }
    if (v24 >= 0) {
      uint64_t v26 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      uint64_t v26 = *(void *)(a4 + 8);
    }
    goto LABEL_26;
  }
  char NT = quasar::DataFeed::readNT(a8, a5, (uint64_t)a7, v17, a2, a3);
  if (quasar::gLogLevel < 1) {
    char v28 = 1;
  }
  else {
    char v28 = NT;
  }
  if ((v28 & 1) == 0)
  {
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v36 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"An error occurred when reading NT from: ", 40);
    int v29 = *(char *)(a5 + 23);
    if (v29 >= 0) {
      uint64_t v25 = a5;
    }
    else {
      uint64_t v25 = *(void *)a5;
    }
    if (v29 >= 0) {
      uint64_t v26 = *(unsigned __int8 *)(a5 + 23);
    }
    else {
      uint64_t v26 = *(void *)(a5 + 8);
    }
LABEL_26:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v36);
  }
}

void sub_1B243E314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  quasar::DataFeed::~DataFeed(v9);
  _Unwind_Resume(a1);
}

void quasar::DataFeedFactory::mergeDataFeedsByName(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      if (*(char *)(v3 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v3 + 24), *(void *)(v3 + 32));
      }
      else
      {
        long long v5 = *(_OWORD *)(v3 + 24);
        __p.__r_.__value_.__r.__words[2] = *(void *)(v3 + 40);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
      }
      if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)a2, (unsigned __int8 *)&__p))
      {
        std::vector<char>::pointer p_p = &__p;
        char v6 = std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeed>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeed>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
        quasar::DataFeed::merge((long long ***)v6 + 5, (const quasar::DataFeed *)v3);
      }
      else
      {
        std::vector<char>::pointer p_p = &__p;
        uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeed>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeed>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
        quasar::DataFeed::operator=((uint64_t)(v7 + 40), v3);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v3 += 160;
    }
    while (v3 != v4);
    for (std::vector<std::string>::pointer i = *(void **)(a2 + 16); i; std::vector<std::string>::pointer i = (void *)*i)
    {
      uint64_t v9 = (int *)i[5];
      uint64_t v10 = (quasar::DataFeedItem *)i[6];
      if (v9 != (int *)v10)
      {
        float v11 = 0.0;
        uint64x2_t v12 = (float *)i[5];
        do
        {
          float v13 = *v12;
          v12 += 8;
          float v11 = v11 + v13;
        }
        while (v12 != (float *)v10);
        double v14 = (float *)i[5];
        do
        {
          *double v14 = *v14 / v11;
          v14 += 8;
        }
        while (v14 != (float *)v10);
      }
      unint64_t v15 = 126 - 2 * __clz((v10 - (quasar::DataFeedItem *)v9) >> 5);
      if (v10 == (quasar::DataFeedItem *)v9) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = v15;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *,false>(v9, v10, (uint64_t)&__p, v16, 1);
    }
  }
}

void sub_1B243E4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeed>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeed>>>::~__hash_table(v14);
  _Unwind_Resume(a1);
}

uint64_t quasar::DataFeed::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    std::string::operator=((std::string *)(a1 + 88), (const std::string *)(a2 + 88));
  }
  else
  {
    std::vector<quasar::DataFeedItem>::__assign_with_size[abi:ne180100]<quasar::DataFeedItem*,quasar::DataFeedItem*>(a1, *(void *)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
    std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 48), *(std::string **)(a2 + 48), *(long long **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    std::string::operator=((std::string *)(a1 + 88), (const std::string *)(a2 + 88));
    *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *> *>>((void *)(a1 + 112), *(uint64_t **)(a2 + 128), 0);
  }
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  return a1;
}

void quasar::DataFeedFactory::fillSpokenFormSection(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  std::vector<quasar::SpokenFormLine>::__init_with_size[abi:ne180100]<quasar::SpokenFormLine*,quasar::SpokenFormLine*>((quasar::SpokenFormLine *)&v104, *(quasar::SpokenFormLine **)(a1 + 24), *(quasar::SpokenFormLine **)(a1 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4));
  uint64_t v3 = v104;
  long long v64 = v105;
  if (v104 == (char *)v105) {
    goto LABEL_149;
  }
  do
  {
    uint64_t v65 = (quasar::SpokenFormLine *)v3;
    if (v3[31] < 0)
    {
      std::string::__init_copy_ctor_external(&v103, *((const std::string::value_type **)v3 + 1), *((void *)v3 + 2));
    }
    else
    {
      long long v4 = *(_OWORD *)(v3 + 8);
      v103.__r_.__value_.__r.__words[2] = *((void *)v3 + 3);
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v4;
    }
    std::string::basic_string[abi:ne180100]<0>(&v102, "");
    uint64_t v99 = 0;
    long long v100 = 0;
    unint64_t v101 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, " ");
    quasar::splitAndTrim(&v103, (char *)&__p, (uint64_t *)&v70);
    if (SBYTE7(v79) < 0) {
      operator delete((void *)__p);
    }
    long long v5 = v70;
    uint64_t v6 = v71;
    while (v5 != (std::string *)v6)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "$");
      BOOL v7 = quasar::startsWith((unsigned __int8 *)v5, (unsigned __int8 *)&__p);
      BOOL v8 = v7;
      if (SBYTE7(v79) < 0)
      {
        operator delete((void *)__p);
        if (!v8) {
          goto LABEL_63;
        }
LABEL_13:
        std::string::basic_string[abi:ne180100]<0>(&__p, ".");
        quasar::splitAndTrim(v5, (char *)&__p, (uint64_t *)&v96);
        if (SBYTE7(v79) < 0) {
          operator delete((void *)__p);
        }
        if ((char *)v97 - (char *)v96 == 48)
        {
          if (SHIBYTE(v96->__r_.__value_.__r.__words[2]) < 0) {
            std::string::size_type size = v96->__r_.__value_.__l.__size_;
          }
          else {
            std::string::size_type size = HIBYTE(v96->__r_.__value_.__r.__words[2]);
          }
          std::string::basic_string(&__str, v96, 1uLL, size - 1, (std::allocator<char> *)&v69);
          uint64_t v10 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
          if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::size_type v11 = v102.__r_.__value_.__l.__size_;
            if (!v102.__r_.__value_.__l.__size_) {
              goto LABEL_38;
            }
LABEL_23:
            if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v12 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v12 = v11;
            }
            std::string::size_type v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v13 = __str.__r_.__value_.__l.__size_;
            }
            if (v12 == v13)
            {
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_str = &__str;
              }
              else {
                p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
              }
              if ((*((unsigned char *)&v102.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                if (!memcmp(v102.__r_.__value_.__l.__data_, p_str, v11)) {
                  goto LABEL_54;
                }
              }
              else
              {
                unint64_t v15 = &v102;
                while (v15->__r_.__value_.__s.__data_[0] == p_str->__r_.__value_.__s.__data_[0])
                {
                  unint64_t v15 = (std::string *)((char *)v15 + 1);
                  p_str = (std::string *)((char *)p_str + 1);
                  if (!--v10) {
                    goto LABEL_54;
                  }
                }
              }
            }
            if (quasar::gLogLevel >= 5)
            {
              long long v93 = 0u;
              long long v94 = 0u;
              long long v91 = 0u;
              long long v92 = 0u;
              long long v89 = 0u;
              long long v90 = 0u;
              long long v87 = 0u;
              long long v88 = 0u;
              long long v85 = 0u;
              long long v86 = 0u;
              long long v83 = 0u;
              long long v84 = 0u;
              long long v81 = 0u;
              long long v82 = 0u;
              long long v79 = 0u;
              long long v80 = 0u;
              long long __p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
              uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"More than one lists detected in ", 32);
              if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v17 = &v103;
              }
              else {
                uint64_t v17 = (std::string *)v103.__r_.__value_.__r.__words[0];
              }
              if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v18 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v18 = v103.__r_.__value_.__l.__size_;
              }
              BOOL v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
              char v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", only first list [", 19);
              if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v21 = &v102;
              }
              else {
                uint64_t v21 = (std::string *)v102.__r_.__value_.__r.__words[0];
              }
              if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v22 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v22 = v102.__r_.__value_.__l.__size_;
              }
              uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"] will be used.", 15);
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
            }
          }
          else
          {
            if (*((unsigned char *)&v102.__r_.__value_.__s + 23))
            {
              std::string::size_type v11 = v102.__r_.__value_.__l.__size_;
              goto LABEL_23;
            }
LABEL_38:
            std::string::operator=(&v102, &__str);
          }
LABEL_54:
          int v24 = (long long *)&v96[1];
          uint64_t v25 = v100;
          if ((unint64_t)v100 >= v101)
          {
            float v27 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v99, v24);
          }
          else
          {
            if (SHIBYTE(v96[1].__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v100, v96[1].__r_.__value_.__l.__data_, v96[1].__r_.__value_.__l.__size_);
            }
            else
            {
              long long v26 = *v24;
              v100->__r_.__value_.__r.__words[2] = v96[1].__r_.__value_.__r.__words[2];
              *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
            }
            float v27 = v25 + 1;
          }
          long long v100 = v27;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
        *(void *)&long long __p = &v96;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        goto LABEL_63;
      }
      if (v7) {
        goto LABEL_13;
      }
LABEL_63:
      ++v5;
    }
    *(void *)&long long __p = &v70;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    std::string::size_type v28 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v28 = v102.__r_.__value_.__l.__size_;
    }
    if (!v28 || v99 == v100)
    {
      unint64_t v52 = a3[1];
      if (v52 >= a3[2])
      {
        uint64_t v53 = std::vector<quasar::SpokenFormLine>::__push_back_slow_path<quasar::SpokenFormLine const&>(a3, v65);
        long long v54 = a3;
      }
      else
      {
        quasar::SpokenFormLine::SpokenFormLine((quasar::SpokenFormLine *)a3[1], v65);
        uint64_t v53 = v52 + 112;
        long long v54 = a3;
        a3[1] = v52 + 112;
      }
      v54[1] = v53;
    }
    else
    {
      int v29 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a2, (unsigned __int8 *)&v102);
      if (v29)
      {
        quasar::DataFeed::DataFeed((quasar::DataFeed *)&v70, (const quasar::DataFeed *)(v29 + 40));
        uint64_t v96 = 0;
        char v97 = 0;
        uint64_t v98 = 0;
        std::vector<quasar::DataFeedItem>::__init_with_size[abi:ne180100]<quasar::DataFeedItem*,quasar::DataFeedItem*>(&v96, (uint64_t)v70, v71, (v71 - (uint64_t)v70) >> 5);
        int v30 = v96;
        for (std::vector<std::string>::pointer i = v97; v30 != i; v30 = (const std::string *)((char *)v30 + 32))
        {
          if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&__str, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
          }
          else {
            std::string __str = v103;
          }
          uint64_t v32 = (uint64_t)v99;
          int v33 = v100;
          if (v99 == v100) {
            goto LABEL_108;
          }
          char v34 = 0;
          do
          {
            quasar::DataFeedItem::getField((uint64_t)v30, (const void **)v32, &v69);
            if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v35 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v35 = v69.__r_.__value_.__l.__size_;
            }
            if (v35)
            {
              std::operator+<char>();
              long long v36 = std::string::append(&v67, ".");
              long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
              v68.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v37;
              v36->__r_.__value_.__l.__size_ = 0;
              v36->__r_.__value_.__r.__words[2] = 0;
              v36->__r_.__value_.__r.__words[0] = 0;
              int v38 = *(char *)(v32 + 23);
              if (v38 >= 0) {
                long long v39 = (const std::string::value_type *)v32;
              }
              else {
                long long v39 = *(const std::string::value_type **)v32;
              }
              if (v38 >= 0) {
                std::string::size_type v40 = *(unsigned __int8 *)(v32 + 23);
              }
              else {
                std::string::size_type v40 = *(void *)(v32 + 8);
              }
              long long v41 = std::string::append(&v68, v39, v40);
              long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
              *(void *)&long long v79 = *((void *)&v41->__r_.__value_.__l + 2);
              long long __p = v42;
              v41->__r_.__value_.__l.__size_ = 0;
              v41->__r_.__value_.__r.__words[2] = 0;
              v41->__r_.__value_.__r.__words[0] = 0;
              quasar::replaceAll((uint64_t)&__str, (uint64_t)&__p, (char *)&v69);
              if (SBYTE7(v79) < 0) {
                operator delete((void *)__p);
              }
              if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v68.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v67.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              if (quasar::gLogLevel >= 5)
              {
                long long v93 = 0u;
                long long v94 = 0u;
                long long v91 = 0u;
                long long v92 = 0u;
                long long v89 = 0u;
                long long v90 = 0u;
                long long v87 = 0u;
                long long v88 = 0u;
                long long v85 = 0u;
                long long v86 = 0u;
                long long v83 = 0u;
                long long v84 = 0u;
                long long v81 = 0u;
                long long v82 = 0u;
                long long v79 = 0u;
                long long v80 = 0u;
                long long __p = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
                long long v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Field '", 7);
                int v44 = *(char *)(v32 + 23);
                if (v44 >= 0) {
                  long long v45 = (const std::string::value_type *)v32;
                }
                else {
                  long long v45 = *(const std::string::value_type **)v32;
                }
                if (v44 >= 0) {
                  uint64_t v46 = *(unsigned __int8 *)(v32 + 23);
                }
                else {
                  uint64_t v46 = *(void *)(v32 + 8);
                }
                long long v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v45, v46);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"' does not exist in data feed, skipping.", 40);
                quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
              }
              char v34 = 1;
            }
            if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v69.__r_.__value_.__l.__data_);
            }
            v32 += 24;
            if (v35) {
              BOOL v48 = v32 == (void)v33;
            }
            else {
              BOOL v48 = 1;
            }
          }
          while (!v48);
          if ((v34 & 1) == 0)
          {
LABEL_108:
            LODWORD(v68.__r_.__value_.__l.__data_) = v30->__r_.__value_.__l.__data_;
            quasar::SpokenFormLine::SpokenFormLine(&__p, &v68, &__str);
            unint64_t v49 = a3[1];
            if (v49 >= a3[2])
            {
              uint64_t v50 = std::vector<quasar::SpokenFormLine>::__push_back_slow_path<quasar::SpokenFormLine>(a3, (const quasar::SpokenFormLine *)&__p);
              long long v51 = a3;
            }
            else
            {
              quasar::SpokenFormLine::SpokenFormLine((quasar::SpokenFormLine *)a3[1], (const quasar::SpokenFormLine *)&__p);
              uint64_t v50 = v49 + 112;
              long long v51 = a3;
              a3[1] = v49 + 112;
            }
            v51[1] = v50;
            v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83 + 8;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
            if (SBYTE7(v83) < 0) {
              operator delete((void *)v82);
            }
            if (SBYTE7(v81) < 0) {
              operator delete((void *)v80);
            }
            if (SHIBYTE(v79) < 0) {
              operator delete(*((void **)&__p + 1));
            }
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
        *(void *)&long long __p = &v96;
        std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)&v77);
        if (v76 < 0) {
          operator delete(v75);
        }
        *(void *)&long long __p = &v74;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if (v73 < 0) {
          operator delete(v72);
        }
        *(void *)&long long __p = &v70;
        std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      }
      else if (quasar::gLogLevel >= 5)
      {
        long long v93 = 0u;
        long long v94 = 0u;
        long long v91 = 0u;
        long long v92 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        long long __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        long long v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Data feed [", 11);
        if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v56 = &v102;
        }
        else {
          long long v56 = (std::string *)v102.__r_.__value_.__r.__words[0];
        }
        if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v57 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v57 = v102.__r_.__value_.__l.__size_;
        }
        long long v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
        long long v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"] is not supplied, skipping the spoken form '", 45);
        if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v60 = &v103;
        }
        else {
          long long v60 = (std::string *)v103.__r_.__value_.__r.__words[0];
        }
        if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v61 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v61 = v103.__r_.__value_.__l.__size_;
        }
        int v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"'", 1);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
      }
    }
    *(void *)&long long __p = &v99;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v102.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v103.__r_.__value_.__l.__data_);
    }
    uint64_t v3 = (char *)v65 + 112;
  }
  while ((quasar::SpokenFormLine *)((char *)v65 + 112) != v64);
LABEL_149:
  *(void *)&long long __p = &v104;
  std::vector<quasar::SpokenFormLine>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1B243EE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  long long __p = a15;
  std::vector<quasar::SpokenFormLine>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::DataFeedFactory::loadFeedsDataFile(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  v96[19] = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  memset(&__str, 0, sizeof(__str));
  std::ifstream::basic_ifstream(v94);
  memset(&v89, 0, sizeof(v89));
  memset(v87, 0, sizeof(v87));
  int v88 = 1065353216;
  memset(&v86, 0, sizeof(v86));
  memset(&v85, 0, sizeof(v85));
  memset(&v84, 0, sizeof(v84));
  std::string::basic_string[abi:ne180100]<0>(&v83, "prior");
  memset(&v82, 0, sizeof(v82));
  memset(&v81, 0, sizeof(v81));
  if (v95[15])
  {
    uint64_t v3 = (std::locale::id *)MEMORY[0x1E4FBA258];
    while (1)
    {
      while (1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v94 + *(void *)(v94[0] - 24)));
        long long v4 = std::locale::use_facet(&v58, v3);
        unsigned __int8 v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
        std::locale::~locale(&v58);
        uint64_t v6 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v94, (uint64_t)&__str, v5);
        if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0) {
          goto LABEL_113;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "#");
        BOOL v7 = quasar::startsWith((unsigned __int8 *)&__str, (unsigned __int8 *)__p);
        BOOL v8 = v7;
        if ((SBYTE7(v63) & 0x80000000) == 0) {
          break;
        }
        operator delete(__p[0]);
        if (!v8) {
          goto LABEL_8;
        }
      }
      if (!v7)
      {
LABEL_8:
        std::string::basic_string[abi:ne180100]<0>(__p, "\t");
        quasar::splitAndTrim(&__str, (char *)__p, (uint64_t *)&v79);
        if (SBYTE7(v63) < 0) {
          operator delete(__p[0]);
        }
        if (v89.__begin_ != v89.__end_)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "name");
          v58.__locale_ = (std::locale::__imp *)__p;
          uint64_t v9 = (int *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v58);
          std::string::operator=(&v86, &v79[v9[10]]);
          if (SBYTE7(v63) < 0) {
            operator delete(__p[0]);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "type");
          v58.__locale_ = (std::locale::__imp *)__p;
          uint64_t v10 = (int *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v58);
          std::string::operator=(&v85, &v79[v10[10]]);
          if (SBYTE7(v63) < 0) {
            operator delete(__p[0]);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "url");
          v58.__locale_ = (std::locale::__imp *)__p;
          std::string::size_type v11 = (int *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v58);
          std::string::operator=(&v84, &v79[v11[10]]);
          if (SBYTE7(v63) < 0) {
            operator delete(__p[0]);
          }
          if (quasar::gLogLevel >= 5)
          {
            long long v77 = 0u;
            long long v78 = 0u;
            long long v75 = 0u;
            long long v76 = 0u;
            long long v73 = 0u;
            long long v74 = 0u;
            long long v71 = 0u;
            long long v72 = 0u;
            long long v69 = 0u;
            *(_OWORD *)uint64_t v70 = 0u;
            *(_OWORD *)std::string v67 = 0u;
            long long v68 = 0u;
            long long v65 = 0u;
            *(_OWORD *)long long v66 = 0u;
            long long v63 = 0u;
            *(_OWORD *)long long v64 = 0u;
            *(_OWORD *)long long __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            std::string::size_type v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Found feed: ", 12);
            if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v13 = &v86;
            }
            else {
              std::string::size_type v13 = (std::string *)v86.__r_.__value_.__r.__words[0];
            }
            if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v86.__r_.__value_.__l.__size_;
            }
            unint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, size);
            uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1);
            if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v17 = &v85;
            }
            else {
              uint64_t v17 = (std::string *)v85.__r_.__value_.__r.__words[0];
            }
            if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v18 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v18 = v85.__r_.__value_.__l.__size_;
            }
            BOOL v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
            char v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
            if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v21 = &v84;
            }
            else {
              uint64_t v21 = (std::string *)v84.__r_.__value_.__r.__words[0];
            }
            if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v22 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v22 = v84.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "limit");
          uint64_t v23 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v87, (unsigned __int8 *)__p);
          int v24 = v23;
          if (SBYTE7(v63) < 0)
          {
            operator delete(__p[0]);
            if (!v24) {
              goto LABEL_47;
            }
          }
          else if (!v23)
          {
LABEL_47:
            int v29 = 0x7FFFFFFF;
            goto LABEL_48;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "limit");
          long long v91 = __p;
          std::string::size_type v28 = (int *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v91);
          int v29 = std::stoi(&v79[v28[10]], 0, 10);
          if (SBYTE7(v63) < 0) {
            operator delete(__p[0]);
          }
LABEL_48:
          std::string::basic_string[abi:ne180100]<0>(__p, "min_popularity");
          int v30 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v87, (unsigned __int8 *)__p);
          char v31 = v30;
          if (SBYTE7(v63) < 0)
          {
            operator delete(__p[0]);
            if (!v31) {
              goto LABEL_54;
            }
          }
          else if (!v30)
          {
LABEL_54:
            int v33 = 0;
            goto LABEL_55;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "min_popularity");
          long long v92 = __p;
          uint64_t v32 = (int *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v92);
          int v33 = std::stoi(&v79[v32[10]], 0, 10);
          if (SBYTE7(v63) < 0) {
            operator delete(__p[0]);
          }
LABEL_55:
          std::string::basic_string[abi:ne180100]<0>(__p, "power_scale");
          char v34 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v87, (unsigned __int8 *)__p);
          std::string::size_type v35 = v34;
          if (SBYTE7(v63) < 0)
          {
            operator delete(__p[0]);
            if (!v35) {
              goto LABEL_61;
            }
          }
          else if (!v34)
          {
LABEL_61:
            int v37 = 1;
            goto LABEL_62;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "power_scale");
          long long v93 = __p;
          long long v36 = (int *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v93);
          int v37 = std::stoi(&v79[v36[10]], 0, 10);
          if (SBYTE7(v63) < 0) {
            operator delete(__p[0]);
          }
LABEL_62:
          MEMORY[0x1B3EA7B20](&v83, "prior");
          std::string::basic_string[abi:ne180100]<0>(__p, "prior_field");
          int v38 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v87, (unsigned __int8 *)__p);
          long long v39 = v38;
          if (SBYTE7(v63) < 0)
          {
            operator delete(__p[0]);
            if (!v39) {
              goto LABEL_68;
            }
          }
          else if (!v38)
          {
            goto LABEL_68;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "prior_field");
          v58.__locale_ = (std::locale::__imp *)__p;
          std::string::size_type v40 = (int *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v58);
          std::string::operator=(&v83, &v79[v40[10]]);
          if (SBYTE7(v63) < 0) {
            operator delete(__p[0]);
          }
LABEL_68:
          MEMORY[0x1B3EA7B20](&v82, "");
          std::string::basic_string[abi:ne180100]<0>(__p, "text_fields");
          long long v41 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v87, (unsigned __int8 *)__p);
          long long v42 = v41;
          if (SBYTE7(v63) < 0)
          {
            operator delete(__p[0]);
            if (!v42) {
              goto LABEL_74;
            }
          }
          else if (!v41)
          {
            goto LABEL_74;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "text_fields");
          v58.__locale_ = (std::locale::__imp *)__p;
          long long v43 = (int *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v58);
          std::string::operator=(&v82, &v79[v43[10]]);
          if (SBYTE7(v63) < 0) {
            operator delete(__p[0]);
          }
LABEL_74:
          MEMORY[0x1B3EA7B20](&v81, "");
          std::string::basic_string[abi:ne180100]<0>(__p, "date_field");
          int v44 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v87, (unsigned __int8 *)__p);
          long long v45 = v44;
          if (SBYTE7(v63) < 0)
          {
            operator delete(__p[0]);
            if (!v45)
            {
LABEL_80:
              std::string::basic_string[abi:ne180100]<0>(__p, ",");
              quasar::splitAndTrim(&v82, (char *)__p, (uint64_t *)v61);
              if (SBYTE7(v63) < 0) {
                operator delete(__p[0]);
              }
              quasar::filesystem::Path::Path(&v58, a1);
              quasar::filesystem::Path::parent_path((quasar::filesystem::Path *)&v58, __p);
              quasar::filesystem::Path::operator/((uint64_t)__p, (long long *)&v84, v56);
              __p[0] = &unk_1F0A51998;
              if (SHIBYTE(v63) < 0) {
                operator delete(__p[1]);
              }
              kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v56, &v55);
              quasar::FeedsDataItem::FeedsDataItem((std::string *)__p, (long long *)&v86, v29, v33, v37, (long long *)&v85, (long long *)&v55, (long long *)&v83, v61, (long long *)&v81);
              if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v55.__r_.__value_.__l.__data_);
              }
              unint64_t v47 = a2[1];
              if (v47 >= a2[2])
              {
                uint64_t v48 = std::vector<quasar::FeedsDataItem>::__push_back_slow_path<quasar::FeedsDataItem const&>(a2, (const quasar::FeedsDataItem *)__p);
              }
              else
              {
                quasar::FeedsDataItem::FeedsDataItem((std::string *)a2[1], (const quasar::FeedsDataItem *)__p);
                uint64_t v48 = v47 + 160;
                a2[1] = v47 + 160;
              }
              a2[1] = v48;
              if (SHIBYTE(v71) < 0) {
                operator delete(v70[1]);
              }
              v55.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
              if (SHIBYTE(v68) < 0) {
                operator delete(v67[1]);
              }
              if (SHIBYTE(v67[0]) < 0) {
                operator delete(v66[0]);
              }
              if (SHIBYTE(v65) < 0) {
                operator delete(v64[1]);
              }
              if (SBYTE7(v63) < 0) {
                operator delete(__p[0]);
              }
              v56[0] = &unk_1F0A51998;
              if (v57 < 0) {
                operator delete((void *)v56[1]);
              }
              v58.__locale_ = (std::locale::__imp *)&unk_1F0A51998;
              if (v60 < 0) {
                operator delete(v59);
              }
              __p[0] = v61;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_104;
            }
          }
          else if (!v44)
          {
            goto LABEL_80;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "date_field");
          v58.__locale_ = (std::locale::__imp *)__p;
          uint64_t v46 = (int *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v58);
          std::string::operator=(&v81, &v79[v46[10]]);
          if (SBYTE7(v63) < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_80;
        }
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v89, v79, v80, 0xAAAAAAAAAAAAAAABLL * (((char *)v80 - (char *)v79) >> 3));
        begiuint64_t n = (std::locale::__imp *)v89.__begin_;
        std::vector<std::wstring>::pointer end = v89.__end_;
        if (v89.__begin_ != v89.__end_)
        {
          int v27 = 0;
          do
          {
            v58.__locale_ = begin;
            *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)begin, (uint64_t)&std::piecewise_construct, (long long **)&v58)+ 10) = v27++;
            begiuint64_t n = (std::locale::__imp *)((char *)begin + 24);
          }
          while (begin != (std::locale::__imp *)end);
        }
LABEL_104:
        __p[0] = &v79;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      }
    }
  }
  if (quasar::gLogLevel >= 1)
  {
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    *(_OWORD *)uint64_t v70 = 0u;
    *(_OWORD *)std::string v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    *(_OWORD *)long long v66 = 0u;
    long long v63 = 0u;
    *(_OWORD *)long long v64 = 0u;
    *(_OWORD *)long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    unint64_t v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unable to open the file to read: '", 34);
    int v50 = *(char *)(a1 + 23);
    if (v50 >= 0) {
      uint64_t v51 = a1;
    }
    else {
      uint64_t v51 = *(void *)a1;
    }
    if (v50 >= 0) {
      uint64_t v52 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v52 = *(void *)(a1 + 8);
    }
    uint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, v51, v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"'", 1);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
  }
LABEL_113:
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v81.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v82.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v84.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v87);
  __p[0] = &v89;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v94[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v94 + *(void *)(v94[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1B3EA7CF0](v95);
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v96);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1B243FE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::locale a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,int a42,__int16 a43,char a44,char a45)
{
  v46[0] = v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v46);
  if (v48 < 0) {
    operator delete(v47[3]);
  }
  if (v50 < 0) {
    operator delete(v49);
  }
  if (v52 < 0) {
    operator delete(v51);
  }
  if (v54 < 0) {
    operator delete(v53);
  }
  if (v56 < 0) {
    operator delete(v55);
  }
  if (v58 < 0) {
    operator delete(v57);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v59);
  v46[0] = v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v46);
  std::ifstream::~ifstream(v62);
  if (v61 < 0) {
    operator delete(v60[3]);
  }
  std::vector<quasar::FeedsDataItem>::__destroy_vector::operator()[abi:ne180100](v62);
  _Unwind_Resume(a1);
}

void quasar::FeedsDataItem::~FeedsDataItem(void **this)
{
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  uint64_t v2 = this + 14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void quasar::DataFeedFactory::loadFeedsDataFile(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  quasar::filesystem::Path::Path(v39, a1);
  quasar::DataFeedFactory::loadFeedsDataFile(a1, (uint64_t *)&v37);
  uint64_t v6 = v38;
  if (v37 != v38)
  {
    BOOL v7 = v37 + 87;
    do
    {
      if (quasar::gLogLevel >= 5)
      {
        memset(v36, 0, sizeof(v36));
        *(_OWORD *)long long __p = 0u;
        long long v35 = 0u;
        memset(v33, 0, sizeof(v33));
        *(_OWORD *)char v31 = 0u;
        long long v32 = 0u;
        long long v30 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
        BOOL v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"Loading from ", 13);
        if (*v7 < 0)
        {
          std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)(v7 - 23), *(void *)(v7 - 15));
        }
        else
        {
          long long v9 = *(_OWORD *)(v7 - 23);
          v29.__r_.__value_.__r.__words[2] = *(void *)(v7 - 7);
          *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v9;
        }
        if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v10 = &v29;
        }
        else {
          uint64_t v10 = (std::string *)v29.__r_.__value_.__r.__words[0];
        }
        if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v29.__r_.__value_.__l.__size_;
        }
        std::string::size_type v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ... ", 5);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v29.__r_.__value_.__l.__data_);
        }
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v30);
      }
      if (*(v7 - 64) < 0)
      {
        std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)(v7 - 87), *(void *)(v7 - 79));
      }
      else
      {
        long long v13 = *(_OWORD *)(v7 - 87);
        v29.__r_.__value_.__r.__words[2] = *(void *)(v7 - 71);
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v13;
      }
      int v14 = *(_DWORD *)(v7 - 63);
      int v15 = *(_DWORD *)(v7 - 55);
      if (*(v7 - 24) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(v7 - 47), *(void *)(v7 - 39));
      }
      else
      {
        long long v16 = *(_OWORD *)(v7 - 47);
        v28.__r_.__value_.__r.__words[2] = *(void *)(v7 - 31);
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v16;
      }
      if (*v7 < 0)
      {
        std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(v7 - 23), *(void *)(v7 - 15));
      }
      else
      {
        long long v17 = *(_OWORD *)(v7 - 23);
        v27.__r_.__value_.__r.__words[2] = *(void *)(v7 - 7);
        *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v17;
      }
      if (v7[24] < 0)
      {
        std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(v7 + 1), *(void *)(v7 + 9));
      }
      else
      {
        long long v18 = *(_OWORD *)(v7 + 1);
        v26.__r_.__value_.__r.__words[2] = *(void *)(v7 + 17);
        *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v18;
      }
      memset(&v25, 0, sizeof(v25));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v25, *(long long **)(v7 + 25), *(long long **)(v7 + 33), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v7 + 33) - *(void *)(v7 + 25)) >> 3));
      if (v7[72] < 0)
      {
        std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(v7 + 49), *(void *)(v7 + 57));
      }
      else
      {
        long long v19 = *(_OWORD *)(v7 + 49);
        v24.__r_.__value_.__r.__words[2] = *(void *)(v7 + 65);
        *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v19;
      }
      quasar::DataFeedFactory::loadDataFeedFromFile((long long *)&v29, v14, v15, (uint64_t)&v28, (uint64_t)&v27, (uint64_t)&v26, (long long **)&v25, (std::vector<std::wstring> *)&v30, v23, a2);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      unint64_t v20 = a3[1];
      if (v20 >= a3[2])
      {
        uint64_t v21 = std::vector<quasar::DataFeed>::__push_back_slow_path<quasar::DataFeed const&>(a3, (const quasar::DataFeed *)&v30);
      }
      else
      {
        quasar::DataFeed::DataFeed((quasar::DataFeed *)a3[1], (const quasar::DataFeed *)&v30);
        uint64_t v21 = v20 + 160;
        a3[1] = v20 + 160;
      }
      a3[1] = v21;
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)v36);
      if (SHIBYTE(v35) < 0) {
        operator delete(__p[1]);
      }
      v29.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
      if (SHIBYTE(v32) < 0) {
        operator delete(v31[1]);
      }
      v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
      std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
      std::string::size_type v22 = v7 + 73;
      v7 += 160;
    }
    while (v22 != v6);
  }
  *(void *)&long long v30 = &v37;
  std::vector<quasar::FeedsDataItem>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  v39[0] = &unk_1F0A51998;
  if (v40 < 0) {
    operator delete((void *)v39[1]);
  }
}

void sub_1B2440600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48)
{
  *(void *)(v48 - 120) = &unk_1F0A51998;
  if (*(char *)(v48 - 89) < 0) {
    operator delete(*(void **)(v48 - 112));
  }
  std::vector<quasar::DataFeed>::__destroy_vector::operator()[abi:ne180100]((void ***)&a48);
  _Unwind_Resume(a1);
}

void std::vector<quasar::DataFeedItem>::__assign_with_size[abi:ne180100]<quasar::DataFeedItem*,quasar::DataFeedItem*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  long long v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)
  {
    std::vector<quasar::DataFeedItem>::__vdeallocate((void **)a1);
    if (a4 >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::DataFeedItem>,quasar::DataFeedItem*,quasar::DataFeedItem*,quasar::DataFeedItem*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5;
  if (v14 < a4)
  {
    uint64_t v15 = a2 + 32 * v14;
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::DataFeedItem *,quasar::DataFeedItem *,quasar::DataFeedItem *>((uint64_t)&v20, a2, v15, (uint64_t)v9);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::DataFeedItem>,quasar::DataFeedItem*,quasar::DataFeedItem*,quasar::DataFeedItem*>(v8, v15, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::DataFeedItem *,quasar::DataFeedItem *,quasar::DataFeedItem *>((uint64_t)&v21, a2, a3, (uint64_t)v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      uint64_t v19 = v18 - 32;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v18 - 24, *(void **)(v18 - 16));
      uint64_t v18 = v19;
    }
    while (v19 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_1B244088C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B2440894(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<quasar::DataFeedItem>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    long long v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        unsigned __int8 v5 = v3 - 32;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v3 - 24), *((void **)v3 - 2));
        uint64_t v3 = v5;
      }
      while (v5 != v1);
      long long v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::DataFeedItem *,quasar::DataFeedItem *,quasar::DataFeedItem *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    BOOL v7 = (long long *)(a2 + 16);
    do
    {
      *(_DWORD *)a4 = *(_DWORD *)v5;
      if (v5 != a4) {
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a4 + 8), *(long long **)(v5 + 8), v7);
      }
      v5 += 32;
      a4 += 32;
      v7 += 2;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  long long v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v10 = v8;
    }
    else
    {
      do
      {
        v12[0] = v8 + 2;
        v12[1] = v8 + 5;
        std::pair<std::string &,std::shared_ptr<void> &>::operator=[abi:ne180100]<std::string const,std::shared_ptr<void>,(void *)0>((uint64_t)v12, (const std::string *)(v4 + 2));
        uint64_t v10 = (void *)*v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v8);
        long long v4 = (uint64_t *)*v4;
        if (v10) {
          BOOL v11 = v4 == a3;
        }
        else {
          BOOL v11 = 1;
        }
        uint64_t v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__emplace_multi<std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>> const&>(a1, (long long *)v4 + 1);
    long long v4 = (uint64_t *)*v4;
  }
}

void sub_1B2440A68(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1B2440A84(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__emplace_multi<std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>> const&>(void *a1, long long *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>> const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_1B2440AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  BOOL v7 = (char *)operator new(0x38uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)BOOL v7 = 0;
  *((void *)v7 + 1) = 0;
  std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>>::pair[abi:ne180100]((std::string *)(v7 + 16), a2);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 16));
  *((void *)v7 + 1) = result;
  return result;
}

void sub_1B2440B80(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *quasar::FeedsDataItem::FeedsDataItem(std::string *this, long long *a2, int a3, int a4, int a5, long long *a6, long long *a7, long long *a8, long long **a9, long long *a10)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v17 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v17;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = a3;
  HIDWORD(this[1].__r_.__value_.__r.__words[0]) = a4;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = a5;
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *(const std::string::value_type **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v18 = *a6;
    this[2].__r_.__value_.__l.__size_ = *((void *)a6 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v18;
  }
  if (*((char *)a7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *(const std::string::value_type **)a7, *((void *)a7 + 1));
  }
  else
  {
    long long v19 = *a7;
    this[3].__r_.__value_.__l.__size_ = *((void *)a7 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = v19;
  }
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), *(const std::string::value_type **)a8, *((void *)a8 + 1));
  }
  else
  {
    long long v20 = *a8;
    this[4].__r_.__value_.__l.__size_ = *((void *)a8 + 2);
    *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = v20;
  }
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 112), *a9, a9[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a9[1] - (char *)*a9) >> 3));
  char v21 = (std::string *)((char *)this + 136);
  if (*((char *)a10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a10, *((void *)a10 + 1));
  }
  else
  {
    long long v22 = *a10;
    this[6].__r_.__value_.__l.__size_ = *((void *)a10 + 2);
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
  }
  return this;
}

void sub_1B2440D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v15 = v14;
  a10 = v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 111) < 0) {
    operator delete(*v13);
  }
  if (*(char *)(v10 + 87) < 0) {
    operator delete(*v12);
  }
  if (*(char *)(v10 + 63) < 0) {
    operator delete(*v11);
  }
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::SpokenFormLine>::__push_back_slow_path<quasar::SpokenFormLine const&>(uint64_t *a1, const quasar::SpokenFormLine *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x249249249249249) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x124924924924924) {
    unint64_t v9 = 0x249249249249249;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandInterpretation>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  unint64_t v14 = (quasar::SpokenFormLine *)&v10[112 * v4];
  uint64_t v16 = &v10[112 * v9];
  quasar::SpokenFormLine::SpokenFormLine(v14, a2);
  uint64_t v15 = (char *)v14 + 112;
  std::vector<quasar::SpokenFormLine>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::SpokenFormLine>::~__split_buffer(&v13);
  return v11;
}

void sub_1B2440E90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::SpokenFormLine>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<quasar::PMRegexEnumerator,std::allocator<quasar::PMRegexEnumerator>,char const(&)[6],std::string const&,std::string&,void>(uint64_t a1, char *a2, long long *a3, long long *a4)
{
  uint64_t v7 = operator new(0x80uLL);
  std::__shared_ptr_emplace<quasar::PMRegexEnumerator>::__shared_ptr_emplace[abi:ne180100]<char const(&)[6],std::string const&,std::string&,std::allocator<quasar::PMRegexEnumerator>,0>(v7, a2, a3, a4);
}

void sub_1B2440F04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::PMRegexEnumerator>::__shared_ptr_emplace[abi:ne180100]<char const(&)[6],std::string const&,std::string&,std::allocator<quasar::PMRegexEnumerator>,0>(void *a1, char *a2, long long *a3, long long *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A603A0;
  std::allocator<quasar::PMRegexEnumerator>::construct[abi:ne180100]<quasar::PMRegexEnumerator,char const(&)[6],std::string const&,std::string&>((int)&v4, (uint64_t)(a1 + 3), a2, a3, a4);
}

void sub_1B2440F7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::PMRegexEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A603A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::PMRegexEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A603A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::PMRegexEnumerator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<quasar::PMRegexEnumerator>::construct[abi:ne180100]<quasar::PMRegexEnumerator,char const(&)[6],std::string const&,std::string&>(int a1, uint64_t a2, char *__s, long long *a4, long long *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  quasar::PMRegexEnumerator::PMRegexEnumerator(a2, &__p, a4, a5);
}

void sub_1B2441094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::DataFeedItem>::__push_back_slow_path<quasar::DataFeedItem const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (uint64_t *)&v10[32 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[32 * v9];
  *(_DWORD *)uint64_t v11 = *(_DWORD *)a2;
  std::map<std::string,std::string>::map[abi:ne180100](v11 + 1, (const void ***)(a2 + 8));
  v15 += 4;
  std::vector<quasar::DataFeedItem>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<quasar::DataFeedItem>::~__split_buffer(v14);
  return v12;
}

void sub_1B244118C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::DataFeedItem>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::DataFeedItem>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::DataFeedItem>,std::reverse_iterator<quasar::DataFeedItem*>,std::reverse_iterator<quasar::DataFeedItem*>,std::reverse_iterator<quasar::DataFeedItem*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::DataFeedItem>,std::reverse_iterator<quasar::DataFeedItem*>,std::reverse_iterator<quasar::DataFeedItem*>,std::reverse_iterator<quasar::DataFeedItem*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v18 = a6;
  *((void *)&v18 + 1) = a7;
  long long v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  unsigned char v15[2] = &v18;
  if (a3 == a5)
  {
    uint64_t v13 = a6;
  }
  else
  {
    uint64_t v8 = a3 - 2;
    do
    {
      *(_DWORD *)(v7 - 32) = *((_DWORD *)v8 - 4);
      *(void *)(v7 - 24) = *(v8 - 1);
      uint64_t v9 = *v8;
      *(void *)(v7 - 16) = *v8;
      uint64_t v10 = v7 - 16;
      uint64_t v11 = v8[1];
      *(void *)(v7 - 8) = v11;
      if (v11)
      {
        *(void *)(v9 + 16) = v10;
        *(v8 - 1) = v8;
        *uint64_t v8 = 0;
        v8[1] = 0;
      }
      else
      {
        *(void *)(v7 - 24) = v10;
      }
      uint64_t v7 = *((void *)&v18 + 1) - 32;
      *((void *)&v18 + 1) -= 32;
      uint64_t v12 = v8 - 2;
      v8 -= 4;
    }
    while (v12 != a5);
    uint64_t v13 = v18;
  }
  char v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeedItem>,std::reverse_iterator<quasar::DataFeedItem*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeedItem>,std::reverse_iterator<quasar::DataFeedItem*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeedItem>,std::reverse_iterator<quasar::DataFeedItem*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeedItem>,std::reverse_iterator<quasar::DataFeedItem*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v1 != v2)
  {
    uint64_t v3 = v1 + 8;
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3, *(void **)(v3 + 8));
      uint64_t v4 = v3 + 24;
      v3 += 32;
    }
    while (v4 != v2);
  }
}

void **std::__split_buffer<quasar::DataFeedItem>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::DataFeedItem>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(i - 24, *(void **)(i - 16));
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *,false>(int *a1, quasar::DataFeedItem *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = a2;
  uint64_t v10 = a1;
  std::string v24 = a2;
  std::string v25 = a1;
LABEL_2:
  for (uint64_t i = 1 - a4; ; ++i)
  {
    uint64_t v12 = v9 - (quasar::DataFeedItem *)v10;
    unint64_t v13 = (v9 - (quasar::DataFeedItem *)v10) >> 5;
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          std::string v24 = (quasar::DataFeedItem *)((char *)v9 - 32);
          if (quasar::operator>((quasar::DataFeedItem *)((char *)v9 - 32), (quasar::DataFeedItem *)v10)) {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(&v25, (uint64_t *)&v24);
          }
          break;
        case 3uLL:
          std::string v24 = (quasar::DataFeedItem *)((char *)v9 - 32);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(v10, v10 + 8, (quasar::DataFeedItem *)((char *)v9 - 32));
          break;
        case 4uLL:
          std::string v24 = (quasar::DataFeedItem *)((char *)v9 - 32);
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(v10, v10 + 8, v10 + 16, (quasar::DataFeedItem *)((char *)v9 - 32));
          break;
        case 5uLL:
          std::string v24 = (quasar::DataFeedItem *)((char *)v9 - 32);
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(v10, v10 + 8, v10 + 16, v10 + 24, (quasar::DataFeedItem *)((char *)v9 - 32));
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 767)
    {
      if (a5) {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(v10, v9);
      }
      else {
        std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(v10, v9);
      }
      return;
    }
    if (i == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = (quasar::DataFeedItem *)((char *)v9 - 32);
    if ((unint64_t)v12 > 0x1000)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(v10, &v10[8 * (v13 >> 1)], v15);
      char v16 = v24;
      uint64_t v17 = 32 * v14 - 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(v25 + 8, (int *)((char *)v25 + v17), (quasar::DataFeedItem *)((char *)v24 - 64));
      uint64_t v18 = 32 * v14 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(v25 + 16, (int *)((char *)v25 + v18), (quasar::DataFeedItem *)((char *)v16 - 96));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>((int *)((char *)v25 + v17), &v25[8 * v14], (quasar::DataFeedItem *)((char *)v25 + v18));
      uint64_t v23 = &v25[8 * v14];
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(&v25, (uint64_t *)&v23);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(&v10[8 * (v13 >> 1)], v10, v15);
      if (a5)
      {
LABEL_13:
        uint64_t v9 = v24;
        goto LABEL_14;
      }
    }
    BOOL v19 = quasar::operator>((quasar::DataFeedItem *)(v25 - 8), (quasar::DataFeedItem *)v25);
    uint64_t v9 = v24;
    if (!v19)
    {
      uint64_t v10 = (int *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,quasar::DataFeedItem *,std::greater<void> &>((uint64_t)v25, v24);
LABEL_22:
      a5 = 0;
      std::string v25 = v10;
      a4 = -i;
      goto LABEL_2;
    }
LABEL_14:
    long long v20 = (int *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,quasar::DataFeedItem *,std::greater<void> &>(v25, v9);
    if ((v21 & 1) == 0) {
      goto LABEL_21;
    }
    int v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(v25, (uint64_t)v20);
    uint64_t v10 = v20 + 8;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(v20 + 8, (uint64_t)v9))
    {
      if (v22) {
        return;
      }
      std::string v24 = (quasar::DataFeedItem *)v20;
      uint64_t v10 = v25;
      uint64_t v9 = (quasar::DataFeedItem *)v20;
    }
    else
    {
      if (!v22)
      {
LABEL_21:
        std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *,false>(v25, v20, a3, -i, a5 & 1);
        uint64_t v10 = v20 + 8;
        goto LABEL_22;
      }
      std::string v25 = v20 + 8;
    }
  }
  if (v10 != (int *)v9) {
    std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *,quasar::DataFeedItem *>((quasar::DataFeedItem *)v10, (int *)v9, (int *)v9, a3);
  }
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(int **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  int v10 = **a1;
  uint64_t v4 = *a1 + 2;
  char v5 = v2 + 4;
  char v6 = (void *)*((void *)v2 + 2);
  uint64_t v11 = (void *)*((void *)v2 + 1);
  uint64_t v12 = v6;
  uint64_t v13 = *((void *)v2 + 3);
  if (v13)
  {
    v6[2] = &v12;
    void *v4 = v5;
    *char v5 = 0;
    *((void *)v2 + 3) = 0;
  }
  else
  {
    uint64_t v11 = &v12;
  }
  int *v2 = *(_DWORD *)v3;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)v4, (void *)(v3 + 8));
  *(_DWORD *)uint64_t v3 = v10;
  uint64_t v7 = v3 + 16;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3 + 8, *(void **)(v3 + 16));
  *(void *)(v3 + 8) = v11;
  uint64_t v8 = v12;
  *(void *)(v3 + 16) = v12;
  uint64_t v9 = v13;
  *(void *)(v3 + 24) = v13;
  if (v9)
  {
    uint64_t v8[2] = v7;
    uint64_t v11 = &v12;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    *(void *)(v3 + 8) = v7;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v11, v8);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(void *a1, _DWORD *a2)
{
  if (a1 != (void *)a2)
  {
    uint64_t v4 = (quasar::DataFeedItem *)(a1 + 4);
    if (a1 + 4 != (void *)a2)
    {
      uint64_t v5 = 0;
      char v6 = (quasar::DataFeedItem *)a1;
      do
      {
        uint64_t v7 = v4;
        if (quasar::operator>(v4, v6))
        {
          uint64_t v8 = (void *)((char *)v6 + 48);
          uint64_t v9 = (void *)*((void *)v6 + 6);
          int v18 = *(_DWORD *)v7;
          BOOL v19 = (void *)*((void *)v6 + 5);
          long long v20 = v9;
          uint64_t v21 = *((void *)v6 + 7);
          if (v21)
          {
            void v9[2] = &v20;
            *((void *)v6 + 5) = v8;
            *uint64_t v8 = 0;
            *((void *)v6 + 7) = 0;
          }
          else
          {
            BOOL v19 = &v20;
          }
          uint64_t v10 = v5;
          while (1)
          {
            uint64_t v11 = (char *)a1 + v10;
            *(_DWORD *)((char *)a1 + v10 + 32) = *(_DWORD *)((char *)a1 + v10);
            uint64_t v12 = (void *)((char *)a1 + v10 + 8);
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)a1 + v10 + 40, v12);
            if (!v10) {
              break;
            }
            v10 -= 32;
            if (!quasar::operator>((quasar::DataFeedItem *)&v18, (quasar::DataFeedItem *)(v11 - 32)))
            {
              uint64_t v13 = (uint64_t)a1 + v10 + 32;
              goto LABEL_13;
            }
          }
          uint64_t v13 = (uint64_t)a1;
LABEL_13:
          *(_DWORD *)uint64_t v13 = v18;
          uint64_t v14 = v13 + 16;
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v12, *(void **)(v13 + 16));
          uint64_t v15 = v20;
          *((void *)v11 + 1) = v19;
          *(void *)(v13 + 16) = v15;
          uint64_t v16 = v21;
          *(void *)(v13 + 24) = v21;
          if (v16)
          {
            uint64_t v17 = 0;
            unsigned char v15[2] = v14;
            BOOL v19 = &v20;
            long long v20 = 0;
            uint64_t v21 = 0;
          }
          else
          {
            *((void *)v11 + 1) = v14;
            uint64_t v17 = v20;
          }
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v19, v17);
        }
        uint64_t v4 = (quasar::DataFeedItem *)((char *)v7 + 32);
        v5 += 32;
        char v6 = v7;
      }
      while ((_DWORD *)((char *)v7 + 32) != a2);
    }
  }
}

void sub_1B2441924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(void *a1, _DWORD *a2)
{
  if (a1 != (void *)a2)
  {
    uint64_t v3 = (quasar::DataFeedItem *)a1;
    uint64_t v4 = (quasar::DataFeedItem *)(a1 + 4);
    if (a1 + 4 != (void *)a2)
    {
      uint64_t v5 = a1 + 7;
      do
      {
        char v6 = v4;
        if (quasar::operator>(v4, v3))
        {
          uint64_t v7 = (void *)((char *)v3 + 48);
          uint64_t v8 = (void *)*((void *)v3 + 6);
          int v15 = *(_DWORD *)v6;
          uint64_t v16 = (void *)*((void *)v3 + 5);
          uint64_t v17 = v8;
          uint64_t v18 = *((void *)v3 + 7);
          if (v18)
          {
            uint64_t v8[2] = &v17;
            *((void *)v3 + 5) = v7;
            void *v7 = 0;
            *((void *)v3 + 7) = 0;
          }
          else
          {
            uint64_t v16 = &v17;
          }
          uint64_t v9 = v5;
          do
          {
            *((_DWORD *)v9 - 6) = *((_DWORD *)v9 - 14);
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)(v9 - 2), v9 - 6);
            BOOL v10 = quasar::operator>((quasar::DataFeedItem *)&v15, (quasar::DataFeedItem *)(v9 - 11));
            v9 -= 4;
          }
          while (v10);
          *((_DWORD *)v9 - 6) = v15;
          uint64_t v11 = v9 - 1;
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v9 - 2), (void *)*(v9 - 1));
          uint64_t v12 = v17;
          *(v9 - 2) = v16;
          *(v9 - 1) = v12;
          uint64_t v13 = v18;
          *uint64_t v9 = v18;
          if (v13)
          {
            uint64_t v14 = 0;
            void v12[2] = v11;
            uint64_t v16 = &v17;
            uint64_t v17 = 0;
            uint64_t v18 = 0;
          }
          else
          {
            *(v9 - 2) = v11;
            uint64_t v14 = v17;
          }
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v16, v14);
        }
        uint64_t v4 = (quasar::DataFeedItem *)((char *)v6 + 32);
        v5 += 4;
        uint64_t v3 = v6;
      }
      while ((_DWORD *)((char *)v6 + 32) != a2);
    }
  }
}

void sub_1B2441A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(int *a1, int *a2, quasar::DataFeedItem *a3)
{
  BOOL v10 = (quasar::DataFeedItem *)a2;
  uint64_t v11 = (quasar::DataFeedItem *)a1;
  uint64_t v9 = a3;
  BOOL v5 = quasar::operator>((quasar::DataFeedItem *)a2, (quasar::DataFeedItem *)a1);
  uint64_t result = quasar::operator>(a3, (quasar::DataFeedItem *)a2);
  if (!v5)
  {
    if (!result) {
      return result;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v10, (uint64_t *)&v9);
    if (!quasar::operator>(v10, v11)) {
      return 1;
    }
    uint64_t v7 = &v11;
    uint64_t v8 = &v10;
    goto LABEL_9;
  }
  if (!result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v11, (uint64_t *)&v10);
    if (!quasar::operator>(v9, v10)) {
      return 1;
    }
    uint64_t v7 = &v10;
    uint64_t v8 = &v9;
LABEL_9:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)v7, (uint64_t *)v8);
    return 2;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v11, (uint64_t *)&v9);
  return 1;
}

quasar::DataFeedItem *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,quasar::DataFeedItem *,std::greater<void> &>(uint64_t a1, quasar::DataFeedItem *a2)
{
  uint64_t v21 = a2;
  int v22 = (quasar::DataFeedItem *)a1;
  int v17 = *(_DWORD *)a1;
  uint64_t v3 = (void *)(a1 + 8);
  uint64_t v4 = (void *)(a1 + 16);
  BOOL v5 = *(void **)(a1 + 16);
  uint64_t v18 = *(void **)(a1 + 8);
  BOOL v19 = v5;
  uint64_t v20 = *(void *)(a1 + 24);
  if (v20)
  {
    v5[2] = &v19;
    void *v3 = v4;
    void *v4 = 0;
    *(void *)(a1 + 24) = 0;
  }
  else
  {
    uint64_t v18 = &v19;
  }
  if (quasar::operator>((quasar::DataFeedItem *)&v17, (quasar::DataFeedItem *)((char *)a2 - 32)))
  {
    char v6 = (int *)a1;
    do
    {
      v6 += 8;
      int v22 = (quasar::DataFeedItem *)v6;
    }
    while (!quasar::operator>((quasar::DataFeedItem *)&v17, (quasar::DataFeedItem *)v6));
  }
  else
  {
    uint64_t v7 = (int *)(a1 + 32);
    do
    {
      char v6 = v7;
      int v22 = (quasar::DataFeedItem *)v7;
      if (v7 >= (int *)v21) {
        break;
      }
      BOOL v8 = quasar::operator>((quasar::DataFeedItem *)&v17, (quasar::DataFeedItem *)v7);
      uint64_t v7 = v6 + 8;
    }
    while (!v8);
  }
  uint64_t v9 = v21;
  if (v6 < (int *)v21)
  {
    do
    {
      uint64_t v9 = (quasar::DataFeedItem *)((char *)v9 - 32);
      uint64_t v21 = v9;
    }
    while (quasar::operator>((quasar::DataFeedItem *)&v17, v9));
    char v6 = (int *)v22;
  }
  if (v6 < (int *)v9)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v22, (uint64_t *)&v21);
      do
        int v22 = (quasar::DataFeedItem *)((char *)v22 + 32);
      while (!quasar::operator>((quasar::DataFeedItem *)&v17, v22));
      do
        uint64_t v21 = (quasar::DataFeedItem *)((char *)v21 - 32);
      while (quasar::operator>((quasar::DataFeedItem *)&v17, v21));
      char v6 = (int *)v22;
    }
    while (v22 < v21);
  }
  if (v6 - 8 != (int *)a1)
  {
    *(_DWORD *)a1 = *(v6 - 8);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)v3, (void *)v6 - 3);
  }
  uint64_t v11 = (void *)*((void *)v6 - 2);
  BOOL v10 = v6 - 4;
  *(v10 - 4) = v17;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v10 - 2), v11);
  *((void *)v10 - 1) = v18;
  uint64_t v12 = v19;
  *(void *)BOOL v10 = v19;
  uint64_t v13 = v20;
  *((void *)v10 + 1) = v20;
  if (v13)
  {
    uint64_t v14 = 0;
    void v12[2] = v10;
    uint64_t v18 = &v19;
    BOOL v19 = 0;
    uint64_t v20 = 0;
  }
  else
  {
    *((void *)v10 - 1) = v10;
    uint64_t v14 = v19;
  }
  int v15 = v22;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18, v14);
  return v15;
}

void sub_1B2441D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

char *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,quasar::DataFeedItem *,std::greater<void> &>(void *a1, quasar::DataFeedItem *a2)
{
  int v19 = *(_DWORD *)a1;
  uint64_t v3 = a1 + 1;
  uint64_t v4 = a1 + 2;
  BOOL v5 = (void *)a1[2];
  uint64_t v20 = (void *)a1[1];
  uint64_t v21 = v5;
  uint64_t v22 = a1[3];
  uint64_t v23 = a2;
  if (v22)
  {
    v5[2] = &v21;
    void *v3 = v4;
    void *v4 = 0;
    a1[3] = 0;
  }
  else
  {
    uint64_t v20 = &v21;
  }
  uint64_t v6 = 0;
  do
  {
    std::string v24 = (quasar::DataFeedItem *)&a1[v6 + 4];
    v6 += 4;
  }
  while (quasar::operator>(v24, (quasar::DataFeedItem *)&v19));
  uint64_t v7 = v23;
  if (v6 == 4)
  {
    BOOL v10 = (quasar::DataFeedItem *)(a1 + 4);
    do
    {
      if (v10 >= v7) {
        break;
      }
      uint64_t v7 = (quasar::DataFeedItem *)((char *)v7 - 32);
      uint64_t v23 = v7;
    }
    while (!quasar::operator>(v7, (quasar::DataFeedItem *)&v19));
  }
  else
  {
    BOOL v8 = (quasar::DataFeedItem *)((char *)v23 - 32);
    do
    {
      uint64_t v23 = v8;
      BOOL v9 = quasar::operator>(v8, (quasar::DataFeedItem *)&v19);
      BOOL v8 = (quasar::DataFeedItem *)((char *)v8 - 32);
    }
    while (!v9);
    BOOL v10 = v24;
  }
  uint64_t v11 = v10;
  if (v10 < v23)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v24, (uint64_t *)&v23);
      do
        std::string v24 = (quasar::DataFeedItem *)((char *)v24 + 32);
      while (quasar::operator>(v24, (quasar::DataFeedItem *)&v19));
      do
        uint64_t v23 = (quasar::DataFeedItem *)((char *)v23 - 32);
      while (!quasar::operator>(v23, (quasar::DataFeedItem *)&v19));
      uint64_t v11 = v24;
    }
    while (v24 < v23);
  }
  uint64_t v12 = (char *)v11 - 32;
  if ((void *)((char *)v11 - 32) != a1)
  {
    *(_DWORD *)a1 = *((_DWORD *)v11 - 8);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)v3, (void *)v11 - 3);
  }
  uint64_t v14 = (void *)*((void *)v11 - 2);
  uint64_t v13 = (void *)((char *)v11 - 16);
  *((_DWORD *)v13 - 4) = v19;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v13 - 1), v14);
  *(v13 - 1) = v20;
  int v15 = v21;
  *uint64_t v13 = v21;
  uint64_t v16 = v22;
  v13[1] = v22;
  if (v16)
  {
    int v17 = 0;
    unsigned char v15[2] = v13;
    uint64_t v20 = &v21;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
  }
  else
  {
    *(v13 - 1) = v13;
    int v17 = v21;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v20, v17);
  return v12;
}

void sub_1B2441F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(int *a1, uint64_t a2)
{
  uint64_t v20 = (void *)a2;
  uint64_t v21 = a1;
  BOOL v4 = 1;
  switch((a2 - (uint64_t)a1) >> 5)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      uint64_t v20 = (void *)(a2 - 32);
      if (quasar::operator>((quasar::DataFeedItem *)(a2 - 32), (quasar::DataFeedItem *)a1)) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(&v21, (uint64_t *)&v20);
      }
      return v4;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(a1, a1 + 8, (quasar::DataFeedItem *)(a2 - 32));
      return v4;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(a1, a1 + 8, a1 + 16, (quasar::DataFeedItem *)(a2 - 32));
      return v4;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(a1, a1 + 8, a1 + 16, a1 + 24, (quasar::DataFeedItem *)(a2 - 32));
      return v4;
    default:
      BOOL v5 = a1 + 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(a1, a1 + 8, (quasar::DataFeedItem *)(a1 + 16));
      uint64_t v6 = a1 + 24;
      if (a1 + 24 == (int *)a2) {
        return 1;
      }
      int v7 = 0;
      break;
  }
  while (!quasar::operator>((quasar::DataFeedItem *)v6, (quasar::DataFeedItem *)v5))
  {
LABEL_17:
    BOOL v5 = (int *)v6;
    v6 += 4;
    if (v6 == v20) {
      return 1;
    }
  }
  int v16 = *(_DWORD *)v6;
  BOOL v8 = v6 + 2;
  BOOL v9 = (void *)v6[2];
  int v17 = (void **)v6[1];
  uint64_t v18 = v9;
  uint64_t v19 = v6[3];
  if (v19)
  {
    void v9[2] = &v18;
    v6[1] = v8;
    *BOOL v8 = 0;
    void v6[3] = 0;
  }
  else
  {
    int v17 = &v18;
  }
  do
  {
    BOOL v10 = v5;
    v5[8] = *v5;
    uint64_t v11 = (uint64_t)(v5 + 2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)(v5 + 10), (void *)v5 + 1);
    if (v5 == v21) {
      break;
    }
    v5 -= 8;
  }
  while (quasar::operator>((quasar::DataFeedItem *)&v16, (quasar::DataFeedItem *)(v10 - 8)));
  *BOOL v10 = v16;
  uint64_t v12 = v10 + 4;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, *((void **)v10 + 2));
  *((void *)v10 + 1) = v17;
  uint64_t v13 = v18;
  *((void *)v10 + 2) = v18;
  uint64_t v14 = v19;
  *((void *)v10 + 3) = v19;
  if (v14)
  {
    long long v13[2] = v12;
    int v17 = &v18;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
  }
  else
  {
    *((void *)v10 + 1) = v12;
  }
  if (++v7 != 8)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v17, v18);
    goto LABEL_17;
  }
  BOOL v4 = v6 + 4 == v20;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v17, v18);
  return v4;
}

void sub_1B24421B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(int *a1, int *a2, int *a3, quasar::DataFeedItem *a4)
{
  BOOL v10 = (quasar::DataFeedItem *)a2;
  uint64_t v11 = a1;
  BOOL v8 = a4;
  BOOL v9 = (quasar::DataFeedItem *)a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(a1, a2, (quasar::DataFeedItem *)a3);
  if (quasar::operator>(a4, (quasar::DataFeedItem *)a3))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v9, (uint64_t *)&v8);
    if (quasar::operator>(v9, (quasar::DataFeedItem *)a2))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v10, (uint64_t *)&v9);
      if (quasar::operator>(v10, (quasar::DataFeedItem *)a1)) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(&v11, (uint64_t *)&v10);
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(int *a1, int *a2, int *a3, int *a4, quasar::DataFeedItem *a5)
{
  uint64_t v13 = (quasar::DataFeedItem *)a2;
  uint64_t v14 = a1;
  uint64_t v11 = (quasar::DataFeedItem *)a4;
  uint64_t v12 = (quasar::DataFeedItem *)a3;
  BOOL v10 = a5;
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(a1, a2, a3, (quasar::DataFeedItem *)a4);
  if (quasar::operator>(a5, (quasar::DataFeedItem *)a4))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v11, (uint64_t *)&v10);
    if (quasar::operator>(v11, (quasar::DataFeedItem *)a3))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v12, (uint64_t *)&v11);
      if (quasar::operator>(v12, (quasar::DataFeedItem *)a2))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v13, (uint64_t *)&v12);
        if (quasar::operator>(v13, (quasar::DataFeedItem *)a1)) {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(&v14, (uint64_t *)&v13);
        }
      }
    }
  }
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *,quasar::DataFeedItem *>(quasar::DataFeedItem *a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v18 = a1;
  if (a1 != (quasar::DataFeedItem *)a2)
  {
    uint64_t v6 = a2;
    int v7 = a1;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 5;
    if ((char *)a2 - (char *)a1 >= 33)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (void *)((char *)a1 + 32 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>((uint64_t)v7, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    int v17 = v6;
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      uint64_t v13 = (quasar::DataFeedItem *)v6;
      do
      {
        if (quasar::operator>(v13, v18))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(&v17, (uint64_t *)&v18);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>((uint64_t)v18, a4, v9, v18);
        }
        uint64_t v13 = (quasar::DataFeedItem *)(v17 + 8);
        int v17 = (int *)v13;
      }
      while (v13 != (quasar::DataFeedItem *)a3);
      int v7 = v18;
      uint64_t v8 = (char *)v6 - (char *)v18;
    }
    if (v8 >= 33)
    {
      unint64_t v14 = (unint64_t)v8 >> 5;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void>,quasar::DataFeedItem *>((uint64_t)v7, (uint64_t)v6, a4, v14);
        v6 -= 8;
      }
      while (v14-- > 2);
      return v17;
    }
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    BOOL v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - a1) >> 5)
    {
      uint64_t v9 = ((uint64_t)a4 - a1) >> 4;
      uint64_t v10 = v9 + 1;
      unint64_t v11 = (void *)(a1 + 32 * (v9 + 1));
      uint64_t v12 = v9 + 2;
      if (v9 + 2 < a3
        && quasar::operator>((quasar::DataFeedItem *)(a1 + 32 * (v9 + 1)), (quasar::DataFeedItem *)(v11 + 4)))
      {
        v11 += 4;
        uint64_t v10 = v12;
      }
      if (!quasar::operator>((quasar::DataFeedItem *)v11, (quasar::DataFeedItem *)v5))
      {
        int v22 = *(_DWORD *)v5;
        uint64_t v13 = v5 + 2;
        unint64_t v14 = (void *)v5[2];
        uint64_t v23 = (void *)v5[1];
        std::string v24 = v14;
        uint64_t v25 = v5[3];
        if (v25)
        {
          void v14[2] = &v24;
          v5[1] = v13;
          *uint64_t v13 = 0;
          void v5[3] = 0;
        }
        else
        {
          uint64_t v23 = &v24;
        }
        do
        {
          int v15 = v11;
          int v16 = v11 + 1;
          *(_DWORD *)BOOL v5 = *(_DWORD *)v11;
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)(v5 + 1), v11 + 1);
          if (v7 < v10) {
            break;
          }
          uint64_t v17 = (2 * v10) | 1;
          unint64_t v11 = (void *)(a1 + 32 * v17);
          uint64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            uint64_t v10 = v17;
          }
          else if (quasar::operator>((quasar::DataFeedItem *)(a1 + 32 * v17), (quasar::DataFeedItem *)(v11 + 4)))
          {
            v11 += 4;
          }
          else
          {
            uint64_t v10 = v17;
          }
          BOOL v5 = v15;
        }
        while (!quasar::operator>((quasar::DataFeedItem *)v11, (quasar::DataFeedItem *)&v22));
        *(_DWORD *)int v15 = v22;
        uint64_t v18 = v15 + 2;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v16, (void *)v15[2]);
        v15[1] = v23;
        uint64_t v19 = v24;
        unsigned char v15[2] = v24;
        uint64_t v20 = v25;
        void v15[3] = v25;
        if (v20)
        {
          uint64_t v21 = 0;
          void v19[2] = v18;
          uint64_t v23 = &v24;
          std::string v24 = 0;
          uint64_t v25 = 0;
        }
        else
        {
          *int v16 = v18;
          uint64_t v21 = v24;
        }
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v23, v21);
      }
    }
  }
}

void sub_1B244264C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void>,quasar::DataFeedItem *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    int v19 = *(_DWORD *)a1;
    uint64_t v7 = (void *)(a1 + 16);
    uint64_t v8 = *(void **)(a1 + 16);
    uint64_t v20 = *(void ***)(a1 + 8);
    uint64_t v21 = v8;
    uint64_t v22 = *(void *)(a1 + 24);
    if (v22)
    {
      uint64_t v8[2] = &v21;
      *(void *)(a1 + 8) = v7;
      void *v7 = 0;
      *(void *)(a1 + 24) = 0;
    }
    else
    {
      uint64_t v20 = &v21;
    }
    uint64_t v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>((_DWORD *)a1, a3, a4);
    uint64_t v10 = v9;
    unint64_t v11 = (void *)(v9 + 8);
    if (v9 == a2 - 32)
    {
      *(_DWORD *)uint64_t v9 = v19;
      int v16 = (void *)(v9 + 16);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v9 + 8, *(void **)(v9 + 16));
      *(void *)(v10 + 8) = v20;
      uint64_t v17 = v21;
      *int v16 = v21;
      uint64_t v18 = v22;
      *(void *)(v10 + 24) = v22;
      if (v18)
      {
        v17[2] = v16;
        uint64_t v20 = &v21;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
      }
      else
      {
        void *v11 = v16;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v9 = *(_DWORD *)(a2 - 32);
      uint64_t v12 = v9 + 32;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(v9 + 8, (void *)(a2 - 24));
      *(_DWORD *)(a2 - 32) = v19;
      uint64_t v13 = a2 - 16;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a2 - 24, *(void **)(a2 - 16));
      unint64_t v14 = v21;
      *(void *)(a2 - 24) = v20;
      uint64_t v15 = v22;
      *(void *)(a2 - 16) = v14;
      *(void *)(a2 - 8) = v15;
      if (v15)
      {
        void v14[2] = v13;
        uint64_t v20 = &v21;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
      }
      else
      {
        *(void *)(a2 - 24) = v13;
      }
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(a1, v12, a3, (v12 - a1) >> 5);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v20, v21);
  }
}

void sub_1B24427E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = (uint64_t)&a1[8 * v5 + 8];
    uint64_t v9 = (2 * v5) | 1;
    uint64_t v10 = 2 * v5 + 2;
    if (v10 < a3
      && quasar::operator>((quasar::DataFeedItem *)&a1[8 * v5 + 8], (quasar::DataFeedItem *)&a1[8 * v5 + 16]))
    {
      v8 += 32;
      uint64_t v9 = v10;
    }
    *a1 = *(_DWORD *)v8;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)(a1 + 2), (void *)(v8 + 8));
    a1 = (_DWORD *)v8;
    uint64_t v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,quasar::DataFeedItem *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (void *)(a1 + 32 * (v4 >> 1));
    uint64_t v9 = (_DWORD *)(a2 - 32);
    if (quasar::operator>((quasar::DataFeedItem *)v8, (quasar::DataFeedItem *)(a2 - 32)))
    {
      uint64_t v10 = (void *)(a2 - 16);
      uint64_t v11 = *(void **)(a2 - 16);
      int v17 = *(_DWORD *)(a2 - 32);
      uint64_t v18 = *(void **)(a2 - 24);
      int v19 = v11;
      uint64_t v20 = *(void *)(a2 - 8);
      if (v20)
      {
        double v11[2] = &v19;
        *(void *)(a2 - 24) = v10;
        *uint64_t v10 = 0;
        *(void *)(a2 - 8) = 0;
      }
      else
      {
        uint64_t v18 = &v19;
      }
      do
      {
        uint64_t v12 = v8;
        uint64_t v13 = v8 + 1;
        *uint64_t v9 = *(_DWORD *)v8;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)(v9 + 2), v8 + 1);
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (void *)(a1 + 32 * v7);
        uint64_t v9 = v12;
      }
      while (quasar::operator>((quasar::DataFeedItem *)v8, (quasar::DataFeedItem *)&v17));
      *(_DWORD *)uint64_t v12 = v17;
      unint64_t v14 = v12 + 2;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v13, (void *)v12[2]);
      uint64_t v15 = v19;
      v12[1] = v18;
      void v12[2] = v15;
      uint64_t v16 = v20;
      void v12[3] = v20;
      if (v16)
      {
        unsigned char v15[2] = v14;
        uint64_t v18 = &v19;
        int v19 = 0;
        uint64_t v20 = 0;
        uint64_t v15 = 0;
      }
      else
      {
        *uint64_t v13 = v14;
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18, v15);
    }
  }
}

void sub_1B24429EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *,false>(int *a1, quasar::DataFeedItem *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = a2;
  uint64_t v10 = a1;
  std::string v24 = a2;
  uint64_t v25 = a1;
LABEL_2:
  for (uint64_t i = 1 - a4; ; ++i)
  {
    uint64_t v12 = v9 - (quasar::DataFeedItem *)v10;
    unint64_t v13 = (v9 - (quasar::DataFeedItem *)v10) >> 5;
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          std::string v24 = (quasar::DataFeedItem *)((char *)v9 - 32);
          if (quasar::operator<((quasar::DataFeedItem *)((char *)v9 - 32), (quasar::DataFeedItem *)v10)) {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(&v25, (uint64_t *)&v24);
          }
          break;
        case 3uLL:
          std::string v24 = (quasar::DataFeedItem *)((char *)v9 - 32);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(v10, v10 + 8, (quasar::DataFeedItem *)((char *)v9 - 32));
          break;
        case 4uLL:
          std::string v24 = (quasar::DataFeedItem *)((char *)v9 - 32);
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(v10, v10 + 8, v10 + 16, (quasar::DataFeedItem *)((char *)v9 - 32));
          break;
        case 5uLL:
          std::string v24 = (quasar::DataFeedItem *)((char *)v9 - 32);
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(v10, v10 + 8, v10 + 16, v10 + 24, (quasar::DataFeedItem *)((char *)v9 - 32));
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 767)
    {
      if (a5) {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(v10, v9);
      }
      else {
        std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(v10, v9);
      }
      return;
    }
    if (i == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = (quasar::DataFeedItem *)((char *)v9 - 32);
    if ((unint64_t)v12 > 0x1000)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(v10, &v10[8 * (v13 >> 1)], v15);
      uint64_t v16 = v24;
      uint64_t v17 = 32 * v14 - 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(v25 + 8, (int *)((char *)v25 + v17), (quasar::DataFeedItem *)((char *)v24 - 64));
      uint64_t v18 = 32 * v14 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(v25 + 16, (int *)((char *)v25 + v18), (quasar::DataFeedItem *)((char *)v16 - 96));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>((int *)((char *)v25 + v17), &v25[8 * v14], (quasar::DataFeedItem *)((char *)v25 + v18));
      uint64_t v23 = &v25[8 * v14];
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(&v25, (uint64_t *)&v23);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(&v10[8 * (v13 >> 1)], v10, v15);
      if (a5)
      {
LABEL_13:
        uint64_t v9 = v24;
        goto LABEL_14;
      }
    }
    BOOL v19 = quasar::operator<((quasar::DataFeedItem *)(v25 - 8), (quasar::DataFeedItem *)v25);
    uint64_t v9 = v24;
    if (!v19)
    {
      uint64_t v10 = (int *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,quasar::DataFeedItem *,std::__less<void,void> &>((uint64_t)v25, v24);
LABEL_22:
      a5 = 0;
      uint64_t v25 = v10;
      a4 = -i;
      goto LABEL_2;
    }
LABEL_14:
    uint64_t v20 = (int *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,quasar::DataFeedItem *,std::__less<void,void> &>(v25, v9);
    if ((v21 & 1) == 0) {
      goto LABEL_21;
    }
    int v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(v25, (uint64_t)v20);
    uint64_t v10 = v20 + 8;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(v20 + 8, (uint64_t)v9))
    {
      if (v22) {
        return;
      }
      std::string v24 = (quasar::DataFeedItem *)v20;
      uint64_t v10 = v25;
      uint64_t v9 = (quasar::DataFeedItem *)v20;
    }
    else
    {
      if (!v22)
      {
LABEL_21:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *,false>(v25, v20, a3, -i, a5 & 1);
        uint64_t v10 = v20 + 8;
        goto LABEL_22;
      }
      uint64_t v25 = v20 + 8;
    }
  }
  if (v10 != (int *)v9) {
    std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *,quasar::DataFeedItem *>((quasar::DataFeedItem *)v10, (int *)v9, (int *)v9, a3);
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(void *a1, _DWORD *a2)
{
  if (a1 != (void *)a2)
  {
    unint64_t v4 = (quasar::DataFeedItem *)(a1 + 4);
    if (a1 + 4 != (void *)a2)
    {
      uint64_t v5 = 0;
      char v6 = (quasar::DataFeedItem *)a1;
      do
      {
        unint64_t v7 = v4;
        if (quasar::operator<(v4, v6))
        {
          uint64_t v8 = (void *)((char *)v6 + 48);
          uint64_t v9 = (void *)*((void *)v6 + 6);
          int v18 = *(_DWORD *)v7;
          BOOL v19 = (void *)*((void *)v6 + 5);
          uint64_t v20 = v9;
          uint64_t v21 = *((void *)v6 + 7);
          if (v21)
          {
            void v9[2] = &v20;
            *((void *)v6 + 5) = v8;
            *uint64_t v8 = 0;
            *((void *)v6 + 7) = 0;
          }
          else
          {
            BOOL v19 = &v20;
          }
          uint64_t v10 = v5;
          while (1)
          {
            uint64_t v11 = (char *)a1 + v10;
            *(_DWORD *)((char *)a1 + v10 + 32) = *(_DWORD *)((char *)a1 + v10);
            uint64_t v12 = (void *)((char *)a1 + v10 + 8);
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)a1 + v10 + 40, v12);
            if (!v10) {
              break;
            }
            v10 -= 32;
            if (!quasar::operator<((quasar::DataFeedItem *)&v18, (quasar::DataFeedItem *)(v11 - 32)))
            {
              uint64_t v13 = (uint64_t)a1 + v10 + 32;
              goto LABEL_13;
            }
          }
          uint64_t v13 = (uint64_t)a1;
LABEL_13:
          *(_DWORD *)uint64_t v13 = v18;
          uint64_t v14 = v13 + 16;
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v12, *(void **)(v13 + 16));
          uint64_t v15 = v20;
          *((void *)v11 + 1) = v19;
          *(void *)(v13 + 16) = v15;
          uint64_t v16 = v21;
          *(void *)(v13 + 24) = v21;
          if (v16)
          {
            uint64_t v17 = 0;
            unsigned char v15[2] = v14;
            BOOL v19 = &v20;
            uint64_t v20 = 0;
            uint64_t v21 = 0;
          }
          else
          {
            *((void *)v11 + 1) = v14;
            uint64_t v17 = v20;
          }
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v19, v17);
        }
        unint64_t v4 = (quasar::DataFeedItem *)((char *)v7 + 32);
        v5 += 32;
        char v6 = v7;
      }
      while ((_DWORD *)((char *)v7 + 32) != a2);
    }
  }
}

void sub_1B2442E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(void *a1, _DWORD *a2)
{
  if (a1 != (void *)a2)
  {
    uint64_t v3 = (quasar::DataFeedItem *)a1;
    unint64_t v4 = (quasar::DataFeedItem *)(a1 + 4);
    if (a1 + 4 != (void *)a2)
    {
      uint64_t v5 = a1 + 7;
      do
      {
        char v6 = v4;
        if (quasar::operator<(v4, v3))
        {
          unint64_t v7 = (void *)((char *)v3 + 48);
          uint64_t v8 = (void *)*((void *)v3 + 6);
          int v15 = *(_DWORD *)v6;
          uint64_t v16 = (void *)*((void *)v3 + 5);
          uint64_t v17 = v8;
          uint64_t v18 = *((void *)v3 + 7);
          if (v18)
          {
            uint64_t v8[2] = &v17;
            *((void *)v3 + 5) = v7;
            void *v7 = 0;
            *((void *)v3 + 7) = 0;
          }
          else
          {
            uint64_t v16 = &v17;
          }
          uint64_t v9 = v5;
          do
          {
            *((_DWORD *)v9 - 6) = *((_DWORD *)v9 - 14);
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)(v9 - 2), v9 - 6);
            BOOL v10 = quasar::operator<((quasar::DataFeedItem *)&v15, (quasar::DataFeedItem *)(v9 - 11));
            v9 -= 4;
          }
          while (v10);
          *((_DWORD *)v9 - 6) = v15;
          uint64_t v11 = v9 - 1;
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v9 - 2), (void *)*(v9 - 1));
          uint64_t v12 = v17;
          *(v9 - 2) = v16;
          *(v9 - 1) = v12;
          uint64_t v13 = v18;
          *uint64_t v9 = v18;
          if (v13)
          {
            uint64_t v14 = 0;
            void v12[2] = v11;
            uint64_t v16 = &v17;
            uint64_t v17 = 0;
            uint64_t v18 = 0;
          }
          else
          {
            *(v9 - 2) = v11;
            uint64_t v14 = v17;
          }
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v16, v14);
        }
        unint64_t v4 = (quasar::DataFeedItem *)((char *)v6 + 32);
        v5 += 4;
        uint64_t v3 = v6;
      }
      while ((_DWORD *)((char *)v6 + 32) != a2);
    }
  }
}

void sub_1B2442FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(int *a1, int *a2, quasar::DataFeedItem *a3)
{
  BOOL v10 = (quasar::DataFeedItem *)a2;
  uint64_t v11 = (quasar::DataFeedItem *)a1;
  uint64_t v9 = a3;
  BOOL v5 = quasar::operator<((quasar::DataFeedItem *)a2, (quasar::DataFeedItem *)a1);
  uint64_t result = quasar::operator<(a3, (quasar::DataFeedItem *)a2);
  if (!v5)
  {
    if (!result) {
      return result;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v10, (uint64_t *)&v9);
    if (!quasar::operator<(v10, v11)) {
      return 1;
    }
    unint64_t v7 = &v11;
    uint64_t v8 = &v10;
    goto LABEL_9;
  }
  if (!result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v11, (uint64_t *)&v10);
    if (!quasar::operator<(v9, v10)) {
      return 1;
    }
    unint64_t v7 = &v10;
    uint64_t v8 = &v9;
LABEL_9:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)v7, (uint64_t *)v8);
    return 2;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v11, (uint64_t *)&v9);
  return 1;
}

quasar::DataFeedItem *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,quasar::DataFeedItem *,std::__less<void,void> &>(uint64_t a1, quasar::DataFeedItem *a2)
{
  uint64_t v21 = a2;
  int v22 = (quasar::DataFeedItem *)a1;
  int v17 = *(_DWORD *)a1;
  uint64_t v3 = (void *)(a1 + 8);
  unint64_t v4 = (void *)(a1 + 16);
  BOOL v5 = *(void **)(a1 + 16);
  uint64_t v18 = *(void **)(a1 + 8);
  BOOL v19 = v5;
  uint64_t v20 = *(void *)(a1 + 24);
  if (v20)
  {
    v5[2] = &v19;
    void *v3 = v4;
    void *v4 = 0;
    *(void *)(a1 + 24) = 0;
  }
  else
  {
    uint64_t v18 = &v19;
  }
  if (quasar::operator<((quasar::DataFeedItem *)&v17, (quasar::DataFeedItem *)((char *)a2 - 32)))
  {
    char v6 = (int *)a1;
    do
    {
      v6 += 8;
      int v22 = (quasar::DataFeedItem *)v6;
    }
    while (!quasar::operator<((quasar::DataFeedItem *)&v17, (quasar::DataFeedItem *)v6));
  }
  else
  {
    unint64_t v7 = (int *)(a1 + 32);
    do
    {
      char v6 = v7;
      int v22 = (quasar::DataFeedItem *)v7;
      if (v7 >= (int *)v21) {
        break;
      }
      BOOL v8 = quasar::operator<((quasar::DataFeedItem *)&v17, (quasar::DataFeedItem *)v7);
      unint64_t v7 = v6 + 8;
    }
    while (!v8);
  }
  uint64_t v9 = v21;
  if (v6 < (int *)v21)
  {
    do
    {
      uint64_t v9 = (quasar::DataFeedItem *)((char *)v9 - 32);
      uint64_t v21 = v9;
    }
    while (quasar::operator<((quasar::DataFeedItem *)&v17, v9));
    char v6 = (int *)v22;
  }
  if (v6 < (int *)v9)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v22, (uint64_t *)&v21);
      do
        int v22 = (quasar::DataFeedItem *)((char *)v22 + 32);
      while (!quasar::operator<((quasar::DataFeedItem *)&v17, v22));
      do
        uint64_t v21 = (quasar::DataFeedItem *)((char *)v21 - 32);
      while (quasar::operator<((quasar::DataFeedItem *)&v17, v21));
      char v6 = (int *)v22;
    }
    while (v22 < v21);
  }
  if (v6 - 8 != (int *)a1)
  {
    *(_DWORD *)a1 = *(v6 - 8);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)v3, (void *)v6 - 3);
  }
  uint64_t v11 = (void *)*((void *)v6 - 2);
  BOOL v10 = v6 - 4;
  *(v10 - 4) = v17;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v10 - 2), v11);
  *((void *)v10 - 1) = v18;
  uint64_t v12 = v19;
  *(void *)BOOL v10 = v19;
  uint64_t v13 = v20;
  *((void *)v10 + 1) = v20;
  if (v13)
  {
    uint64_t v14 = 0;
    void v12[2] = v10;
    uint64_t v18 = &v19;
    BOOL v19 = 0;
    uint64_t v20 = 0;
  }
  else
  {
    *((void *)v10 - 1) = v10;
    uint64_t v14 = v19;
  }
  int v15 = v22;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18, v14);
  return v15;
}

void sub_1B2443268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

char *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,quasar::DataFeedItem *,std::__less<void,void> &>(void *a1, quasar::DataFeedItem *a2)
{
  int v19 = *(_DWORD *)a1;
  uint64_t v3 = a1 + 1;
  unint64_t v4 = a1 + 2;
  BOOL v5 = (void *)a1[2];
  uint64_t v20 = (void *)a1[1];
  uint64_t v21 = v5;
  uint64_t v22 = a1[3];
  uint64_t v23 = a2;
  if (v22)
  {
    v5[2] = &v21;
    void *v3 = v4;
    void *v4 = 0;
    a1[3] = 0;
  }
  else
  {
    uint64_t v20 = &v21;
  }
  uint64_t v6 = 0;
  do
  {
    std::string v24 = (quasar::DataFeedItem *)&a1[v6 + 4];
    v6 += 4;
  }
  while (quasar::operator<(v24, (quasar::DataFeedItem *)&v19));
  unint64_t v7 = v23;
  if (v6 == 4)
  {
    BOOL v10 = (quasar::DataFeedItem *)(a1 + 4);
    do
    {
      if (v10 >= v7) {
        break;
      }
      unint64_t v7 = (quasar::DataFeedItem *)((char *)v7 - 32);
      uint64_t v23 = v7;
    }
    while (!quasar::operator<(v7, (quasar::DataFeedItem *)&v19));
  }
  else
  {
    BOOL v8 = (quasar::DataFeedItem *)((char *)v23 - 32);
    do
    {
      uint64_t v23 = v8;
      BOOL v9 = quasar::operator<(v8, (quasar::DataFeedItem *)&v19);
      BOOL v8 = (quasar::DataFeedItem *)((char *)v8 - 32);
    }
    while (!v9);
    BOOL v10 = v24;
  }
  uint64_t v11 = v10;
  if (v10 < v23)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v24, (uint64_t *)&v23);
      do
        std::string v24 = (quasar::DataFeedItem *)((char *)v24 + 32);
      while (quasar::operator<(v24, (quasar::DataFeedItem *)&v19));
      do
        uint64_t v23 = (quasar::DataFeedItem *)((char *)v23 - 32);
      while (!quasar::operator<(v23, (quasar::DataFeedItem *)&v19));
      uint64_t v11 = v24;
    }
    while (v24 < v23);
  }
  uint64_t v12 = (char *)v11 - 32;
  if ((void *)((char *)v11 - 32) != a1)
  {
    *(_DWORD *)a1 = *((_DWORD *)v11 - 8);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)v3, (void *)v11 - 3);
  }
  uint64_t v14 = (void *)*((void *)v11 - 2);
  uint64_t v13 = (void *)((char *)v11 - 16);
  *((_DWORD *)v13 - 4) = v19;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v13 - 1), v14);
  *(v13 - 1) = v20;
  int v15 = v21;
  *uint64_t v13 = v21;
  uint64_t v16 = v22;
  v13[1] = v22;
  if (v16)
  {
    int v17 = 0;
    unsigned char v15[2] = v13;
    uint64_t v20 = &v21;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
  }
  else
  {
    *(v13 - 1) = v13;
    int v17 = v21;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v20, v17);
  return v12;
}

void sub_1B2443470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(int *a1, uint64_t a2)
{
  uint64_t v20 = (void *)a2;
  uint64_t v21 = a1;
  BOOL v4 = 1;
  switch((a2 - (uint64_t)a1) >> 5)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      uint64_t v20 = (void *)(a2 - 32);
      if (quasar::operator<((quasar::DataFeedItem *)(a2 - 32), (quasar::DataFeedItem *)a1)) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(&v21, (uint64_t *)&v20);
      }
      return v4;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(a1, a1 + 8, (quasar::DataFeedItem *)(a2 - 32));
      return v4;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(a1, a1 + 8, a1 + 16, (quasar::DataFeedItem *)(a2 - 32));
      return v4;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(a1, a1 + 8, a1 + 16, a1 + 24, (quasar::DataFeedItem *)(a2 - 32));
      return v4;
    default:
      BOOL v5 = a1 + 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(a1, a1 + 8, (quasar::DataFeedItem *)(a1 + 16));
      uint64_t v6 = a1 + 24;
      if (a1 + 24 == (int *)a2) {
        return 1;
      }
      int v7 = 0;
      break;
  }
  while (!quasar::operator<((quasar::DataFeedItem *)v6, (quasar::DataFeedItem *)v5))
  {
LABEL_17:
    BOOL v5 = (int *)v6;
    v6 += 4;
    if (v6 == v20) {
      return 1;
    }
  }
  int v16 = *(_DWORD *)v6;
  BOOL v8 = v6 + 2;
  BOOL v9 = (void *)v6[2];
  int v17 = (void **)v6[1];
  uint64_t v18 = v9;
  uint64_t v19 = v6[3];
  if (v19)
  {
    void v9[2] = &v18;
    v6[1] = v8;
    *BOOL v8 = 0;
    void v6[3] = 0;
  }
  else
  {
    int v17 = &v18;
  }
  do
  {
    BOOL v10 = v5;
    v5[8] = *v5;
    uint64_t v11 = (uint64_t)(v5 + 2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)(v5 + 10), (void *)v5 + 1);
    if (v5 == v21) {
      break;
    }
    v5 -= 8;
  }
  while (quasar::operator<((quasar::DataFeedItem *)&v16, (quasar::DataFeedItem *)(v10 - 8)));
  *BOOL v10 = v16;
  uint64_t v12 = v10 + 4;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, *((void **)v10 + 2));
  *((void *)v10 + 1) = v17;
  uint64_t v13 = v18;
  *((void *)v10 + 2) = v18;
  uint64_t v14 = v19;
  *((void *)v10 + 3) = v19;
  if (v14)
  {
    long long v13[2] = v12;
    int v17 = &v18;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
  }
  else
  {
    *((void *)v10 + 1) = v12;
  }
  if (++v7 != 8)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v17, v18);
    goto LABEL_17;
  }
  BOOL v4 = v6 + 4 == v20;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v17, v18);
  return v4;
}

void sub_1B24436E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(int *a1, int *a2, int *a3, quasar::DataFeedItem *a4)
{
  BOOL v10 = (quasar::DataFeedItem *)a2;
  uint64_t v11 = a1;
  BOOL v8 = a4;
  BOOL v9 = (quasar::DataFeedItem *)a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(a1, a2, (quasar::DataFeedItem *)a3);
  if (quasar::operator<(a4, (quasar::DataFeedItem *)a3))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v9, (uint64_t *)&v8);
    if (quasar::operator<(v9, (quasar::DataFeedItem *)a2))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v10, (uint64_t *)&v9);
      if (quasar::operator<(v10, (quasar::DataFeedItem *)a1)) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(&v11, (uint64_t *)&v10);
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(int *a1, int *a2, int *a3, int *a4, quasar::DataFeedItem *a5)
{
  uint64_t v13 = (quasar::DataFeedItem *)a2;
  uint64_t v14 = a1;
  uint64_t v11 = (quasar::DataFeedItem *)a4;
  uint64_t v12 = (quasar::DataFeedItem *)a3;
  BOOL v10 = a5;
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(a1, a2, a3, (quasar::DataFeedItem *)a4);
  if (quasar::operator<(a5, (quasar::DataFeedItem *)a4))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v11, (uint64_t *)&v10);
    if (quasar::operator<(v11, (quasar::DataFeedItem *)a3))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v12, (uint64_t *)&v11);
      if (quasar::operator<(v12, (quasar::DataFeedItem *)a2))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>((int **)&v13, (uint64_t *)&v12);
        if (quasar::operator<(v13, (quasar::DataFeedItem *)a1)) {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(&v14, (uint64_t *)&v13);
        }
      }
    }
  }
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *,quasar::DataFeedItem *>(quasar::DataFeedItem *a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v18 = a1;
  if (a1 != (quasar::DataFeedItem *)a2)
  {
    uint64_t v6 = a2;
    int v7 = a1;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 5;
    if ((char *)a2 - (char *)a1 >= 33)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (void *)((char *)a1 + 32 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>((uint64_t)v7, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    int v17 = v6;
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      uint64_t v13 = (quasar::DataFeedItem *)v6;
      do
      {
        if (quasar::operator<(v13, v18))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::DataFeedItem *&,quasar::DataFeedItem *&>(&v17, (uint64_t *)&v18);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>((uint64_t)v18, a4, v9, v18);
        }
        uint64_t v13 = (quasar::DataFeedItem *)(v17 + 8);
        int v17 = (int *)v13;
      }
      while (v13 != (quasar::DataFeedItem *)a3);
      int v7 = v18;
      uint64_t v8 = (char *)v6 - (char *)v18;
    }
    if (v8 >= 33)
    {
      unint64_t v14 = (unint64_t)v8 >> 5;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,quasar::DataFeedItem *>((uint64_t)v7, (uint64_t)v6, a4, v14);
        v6 -= 8;
      }
      while (v14-- > 2);
      return v17;
    }
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    BOOL v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - a1) >> 5)
    {
      uint64_t v9 = ((uint64_t)a4 - a1) >> 4;
      uint64_t v10 = v9 + 1;
      unint64_t v11 = (void *)(a1 + 32 * (v9 + 1));
      uint64_t v12 = v9 + 2;
      if (v9 + 2 < a3
        && quasar::operator<((quasar::DataFeedItem *)(a1 + 32 * (v9 + 1)), (quasar::DataFeedItem *)(v11 + 4)))
      {
        v11 += 4;
        uint64_t v10 = v12;
      }
      if (!quasar::operator<((quasar::DataFeedItem *)v11, (quasar::DataFeedItem *)v5))
      {
        int v22 = *(_DWORD *)v5;
        uint64_t v13 = v5 + 2;
        unint64_t v14 = (void *)v5[2];
        uint64_t v23 = (void *)v5[1];
        std::string v24 = v14;
        uint64_t v25 = v5[3];
        if (v25)
        {
          void v14[2] = &v24;
          v5[1] = v13;
          *uint64_t v13 = 0;
          void v5[3] = 0;
        }
        else
        {
          uint64_t v23 = &v24;
        }
        do
        {
          int v15 = v11;
          int v16 = v11 + 1;
          *(_DWORD *)BOOL v5 = *(_DWORD *)v11;
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)(v5 + 1), v11 + 1);
          if (v7 < v10) {
            break;
          }
          uint64_t v17 = (2 * v10) | 1;
          unint64_t v11 = (void *)(a1 + 32 * v17);
          uint64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            uint64_t v10 = v17;
          }
          else if (quasar::operator<((quasar::DataFeedItem *)(a1 + 32 * v17), (quasar::DataFeedItem *)(v11 + 4)))
          {
            v11 += 4;
          }
          else
          {
            uint64_t v10 = v17;
          }
          BOOL v5 = v15;
        }
        while (!quasar::operator<((quasar::DataFeedItem *)v11, (quasar::DataFeedItem *)&v22));
        *(_DWORD *)int v15 = v22;
        uint64_t v18 = v15 + 2;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v16, (void *)v15[2]);
        v15[1] = v23;
        uint64_t v19 = v24;
        unsigned char v15[2] = v24;
        uint64_t v20 = v25;
        void v15[3] = v25;
        if (v20)
        {
          uint64_t v21 = 0;
          void v19[2] = v18;
          uint64_t v23 = &v24;
          std::string v24 = 0;
          uint64_t v25 = 0;
        }
        else
        {
          *int v16 = v18;
          uint64_t v21 = v24;
        }
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v23, v21);
      }
    }
  }
}

void sub_1B2443B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,quasar::DataFeedItem *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    int v19 = *(_DWORD *)a1;
    uint64_t v7 = (void *)(a1 + 16);
    uint64_t v8 = *(void **)(a1 + 16);
    uint64_t v20 = *(void ***)(a1 + 8);
    uint64_t v21 = v8;
    uint64_t v22 = *(void *)(a1 + 24);
    if (v22)
    {
      uint64_t v8[2] = &v21;
      *(void *)(a1 + 8) = v7;
      void *v7 = 0;
      *(void *)(a1 + 24) = 0;
    }
    else
    {
      uint64_t v20 = &v21;
    }
    uint64_t v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>((_DWORD *)a1, a3, a4);
    uint64_t v10 = v9;
    unint64_t v11 = (void *)(v9 + 8);
    if (v9 == a2 - 32)
    {
      *(_DWORD *)uint64_t v9 = v19;
      int v16 = (void *)(v9 + 16);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v9 + 8, *(void **)(v9 + 16));
      *(void *)(v10 + 8) = v20;
      uint64_t v17 = v21;
      *int v16 = v21;
      uint64_t v18 = v22;
      *(void *)(v10 + 24) = v22;
      if (v18)
      {
        v17[2] = v16;
        uint64_t v20 = &v21;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
      }
      else
      {
        void *v11 = v16;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v9 = *(_DWORD *)(a2 - 32);
      uint64_t v12 = v9 + 32;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(v9 + 8, (void *)(a2 - 24));
      *(_DWORD *)(a2 - 32) = v19;
      uint64_t v13 = a2 - 16;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a2 - 24, *(void **)(a2 - 16));
      unint64_t v14 = v21;
      *(void *)(a2 - 24) = v20;
      uint64_t v15 = v22;
      *(void *)(a2 - 16) = v14;
      *(void *)(a2 - 8) = v15;
      if (v15)
      {
        void v14[2] = v13;
        uint64_t v20 = &v21;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
      }
      else
      {
        *(void *)(a2 - 24) = v13;
      }
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(a1, v12, a3, (v12 - a1) >> 5);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v20, v21);
  }
}

void sub_1B2443D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = (uint64_t)&a1[8 * v5 + 8];
    uint64_t v9 = (2 * v5) | 1;
    uint64_t v10 = 2 * v5 + 2;
    if (v10 < a3
      && quasar::operator<((quasar::DataFeedItem *)&a1[8 * v5 + 8], (quasar::DataFeedItem *)&a1[8 * v5 + 16]))
    {
      v8 += 32;
      uint64_t v9 = v10;
    }
    *a1 = *(_DWORD *)v8;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)(a1 + 2), (void *)(v8 + 8));
    a1 = (_DWORD *)v8;
    uint64_t v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::DataFeedItem *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (void *)(a1 + 32 * (v4 >> 1));
    uint64_t v9 = (_DWORD *)(a2 - 32);
    if (quasar::operator<((quasar::DataFeedItem *)v8, (quasar::DataFeedItem *)(a2 - 32)))
    {
      uint64_t v10 = (void *)(a2 - 16);
      uint64_t v11 = *(void **)(a2 - 16);
      int v17 = *(_DWORD *)(a2 - 32);
      uint64_t v18 = *(void **)(a2 - 24);
      int v19 = v11;
      uint64_t v20 = *(void *)(a2 - 8);
      if (v20)
      {
        double v11[2] = &v19;
        *(void *)(a2 - 24) = v10;
        *uint64_t v10 = 0;
        *(void *)(a2 - 8) = 0;
      }
      else
      {
        uint64_t v18 = &v19;
      }
      do
      {
        uint64_t v12 = v8;
        uint64_t v13 = v8 + 1;
        *uint64_t v9 = *(_DWORD *)v8;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)(v9 + 2), v8 + 1);
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (void *)(a1 + 32 * v7);
        uint64_t v9 = v12;
      }
      while (quasar::operator<((quasar::DataFeedItem *)v8, (quasar::DataFeedItem *)&v17));
      *(_DWORD *)uint64_t v12 = v17;
      unint64_t v14 = v12 + 2;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v13, (void *)v12[2]);
      uint64_t v15 = v19;
      v12[1] = v18;
      void v12[2] = v15;
      uint64_t v16 = v20;
      void v12[3] = v20;
      if (v16)
      {
        unsigned char v15[2] = v14;
        uint64_t v18 = &v19;
        int v19 = 0;
        uint64_t v20 = 0;
        uint64_t v15 = 0;
      }
      else
      {
        *uint64_t v13 = v14;
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18, v15);
    }
  }
}

void sub_1B2443F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeedItem>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeedItem>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeedItem>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeedItem>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeedItem>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeedItem>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::DataFeedItem>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::DataFeedItem>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 32, *(void **)(a1 + 40));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeedItem>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeedItem>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeedItem>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeedItem>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeedItem>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeedItem>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1B2444288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeedItem>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeedItem>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeedItem>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeedItem>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeedItem>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = (char *)operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  double result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  unint64_t v13 = v8 + 56;
  *((_OWORD *)v13 - 1) = 0u;
  *((void *)v13 - 1) = v13;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B2444334(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeedItem>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeedItem>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeedItem>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeedItem>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::DataFeedItem>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeed>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeed>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeed>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeed>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeed>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeed>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1B2444628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeed>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeed>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeed>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeed>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = (char *)operator new(0xC8uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  double result = std::pair<std::string const,quasar::DataFeed>::pair[abi:ne180100]<std::string const&>((std::string *)(v8 + 16), *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B2444698(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeed>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeed>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::DataFeed>::pair[abi:ne180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  quasar::DataFeed::DataFeed((quasar::DataFeed *)&this[1]);
  return this;
}

void sub_1B2444708(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeed>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::DataFeed>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::DataFeed>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::vector<quasar::FeedsDataItem>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 160;
        std::allocator<quasar::FeedsDataItem>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::FeedsDataItem>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 159) < 0) {
    operator delete(*(void **)(a2 + 136));
  }
  long long v3 = (void **)(a2 + 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 111) < 0) {
    operator delete(*(void **)(a2 + 88));
  }
  if (*(char *)(a2 + 87) < 0) {
    operator delete(*(void **)(a2 + 64));
  }
  if (*(char *)(a2 + 63) < 0) {
    operator delete(*(void **)(a2 + 40));
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

uint64_t std::vector<quasar::FeedsDataItem>::__push_back_slow_path<quasar::FeedsDataItem const&>(uint64_t *a1, const quasar::FeedsDataItem *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x199999999999999) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v9 = 0x199999999999999;
  }
  else {
    unint64_t v9 = v5;
  }
  float v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::DataFeed>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v13 = v10;
  unint64_t v14 = (std::string *)&v10[160 * v4];
  unint64_t v16 = &v10[160 * v9];
  quasar::FeedsDataItem::FeedsDataItem(v14, a2);
  uint64_t v15 = &v14[6].__r_.__value_.__s.__data_[16];
  std::vector<quasar::FeedsDataItem>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::FeedsDataItem>::~__split_buffer(&v13);
  return v11;
}

void sub_1B2444990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::FeedsDataItem>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

std::string *quasar::FeedsDataItem::FeedsDataItem(std::string *this, const quasar::FeedsDataItem *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::string::size_type v5 = *((void *)a2 + 3);
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 8);
  this[1].__r_.__value_.__r.__words[0] = v5;
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 40);
    this[2].__r_.__value_.__l.__size_ = *((void *)a2 + 7);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v6;
  }
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 4);
    this[3].__r_.__value_.__l.__size_ = *((void *)a2 + 10);
    *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = v7;
  }
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
  }
  else
  {
    long long v8 = *(_OWORD *)((char *)a2 + 88);
    this[4].__r_.__value_.__l.__size_ = *((void *)a2 + 13);
    *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = v8;
  }
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 112), *((long long **)a2 + 14), *((long long **)a2 + 15), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 15) - *((void *)a2 + 14)) >> 3));
  unint64_t v9 = (std::string *)((char *)this + 136);
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 17), *((void *)a2 + 18));
  }
  else
  {
    long long v10 = *(_OWORD *)((char *)a2 + 136);
    this[6].__r_.__value_.__l.__size_ = *((void *)a2 + 19);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return this;
}

void sub_1B2444B04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 111) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v2 + 87) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v2 + 63) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::FeedsDataItem>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::FeedsDataItem>,std::reverse_iterator<quasar::FeedsDataItem*>,std::reverse_iterator<quasar::FeedsDataItem*>,std::reverse_iterator<quasar::FeedsDataItem*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::FeedsDataItem>,std::reverse_iterator<quasar::FeedsDataItem*>,std::reverse_iterator<quasar::FeedsDataItem*>,std::reverse_iterator<quasar::FeedsDataItem*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 160);
      *(void *)(v7 - 144) = *(void *)(a3 - 144);
      *(_OWORD *)(v7 - 160) = v8;
      *(void *)(a3 - 152) = 0;
      *(void *)(a3 - 144) = 0;
      *(void *)(a3 - 160) = 0;
      uint64_t v9 = *(void *)(a3 - 136);
      *(_DWORD *)(v7 - 128) = *(_DWORD *)(a3 - 128);
      *(void *)(v7 - 136) = v9;
      long long v10 = *(_OWORD *)(a3 - 120);
      *(void *)(v7 - 104) = *(void *)(a3 - 104);
      *(_OWORD *)(v7 - 120) = v10;
      *(void *)(a3 - 112) = 0;
      *(void *)(a3 - 104) = 0;
      *(void *)(a3 - 120) = 0;
      long long v11 = *(_OWORD *)(a3 - 96);
      *(void *)(v7 - 80) = *(void *)(a3 - 80);
      *(_OWORD *)(v7 - 96) = v11;
      *(void *)(a3 - 96) = 0;
      *(void *)(a3 - 88) = 0;
      *(void *)(a3 - 80) = 0;
      long long v12 = *(_OWORD *)(a3 - 72);
      *(void *)(v7 - 56) = *(void *)(a3 - 56);
      *(_OWORD *)(v7 - 72) = v12;
      *(void *)(a3 - 72) = 0;
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 - 48);
      *(void *)(v7 - 32) = *(void *)(a3 - 32);
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      long long v13 = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v7 - 24) = v13;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v19 + 1) - 160;
      *((void *)&v19 + 1) -= 160;
      a3 -= 160;
    }
    while (a3 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::FeedsDataItem>,std::reverse_iterator<quasar::FeedsDataItem*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::FeedsDataItem>,std::reverse_iterator<quasar::FeedsDataItem*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::FeedsDataItem>,std::reverse_iterator<quasar::FeedsDataItem*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::FeedsDataItem>,std::reverse_iterator<quasar::FeedsDataItem*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::FeedsDataItem>::destroy[abi:ne180100](v3, v1);
      v1 += 160;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::FeedsDataItem>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::FeedsDataItem>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 160;
    std::allocator<quasar::FeedsDataItem>::destroy[abi:ne180100](v4, i - 160);
  }
}

uint64_t std::vector<quasar::DataFeed>::__push_back_slow_path<quasar::DataFeed const&>(uint64_t *a1, const quasar::DataFeed *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x199999999999999) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v9 = 0x199999999999999;
  }
  else {
    unint64_t v9 = v5;
  }
  char v17 = a1 + 2;
  if (v9) {
    long long v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::DataFeed>>(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  long long v13 = v10;
  uint64_t v14 = (quasar::DataFeed *)&v10[160 * v4];
  unint64_t v16 = &v10[160 * v9];
  quasar::DataFeed::DataFeed(v14, a2);
  uint64_t v15 = (char *)v14 + 160;
  std::vector<quasar::DataFeed>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::DataFeed>::~__split_buffer(&v13);
  return v11;
}

void sub_1B2444F24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::DataFeed>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void TIntegrityChecker::operator()(unsigned char *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if ((v3 & 3) != 2) {
    goto LABEL_8;
  }
  if (*(void *)(*(void *)a1 + 8) != a2)
  {
    if ((v3 & 4) == 0)
    {
      loggableUnicode(*(unsigned int **)(a2 + 16), __p);
      if (v10 >= 0) {
        unint64_t v5 = __p;
      }
      else {
        unint64_t v5 = (void **)__p[0];
      }
      tknPrintf("Error: %s : Non-terminal is used but not defined\n", v4, v5);
      goto LABEL_13;
    }
LABEL_8:
    char v6 = 0;
    goto LABEL_16;
  }
  loggableUnicode(*(unsigned int **)(a2 + 16), __p);
  if (v10 >= 0) {
    unint64_t v8 = __p;
  }
  else {
    unint64_t v8 = (void **)__p[0];
  }
  tknPrintf("Error: %s : Top symbol cannot be used on right hand side of rules\n", v7, v8);
LABEL_13:
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  char v6 = 1;
LABEL_16:
  a1[8] |= v6;
}

void sub_1B2445010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void TGrammarCompiler::TGrammarCompiler(TGrammarCompiler *this, const TLocaleInfo *a2)
{
  *(void *)this = &unk_1F0A33FA0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  operator new();
}

void sub_1B2445494(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x30C40773F8FACLL);
  unint64_t v5 = (void *)v1[4];
  if (v5)
  {
    v1[5] = v5;
    operator delete(v5);
  }
  char v6 = *v3;
  if (*v3)
  {
    _OWORD v1[2] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void TGrammarCompiler::~TGrammarCompiler(TGrammarCompiler *this)
{
  *(void *)this = &unk_1F0A33FA0;
  uint64_t v2 = (TGrammar *)*((void *)this + 7);
  if (v2)
  {
    TGrammar::~TGrammar(v2);
    MEMORY[0x1B3EA8670]();
  }
  uint64_t v3 = (TLexerLexicon *)*((void *)this + 8);
  if (v3)
  {
    TLexerLexicon::~TLexerLexicon(v3);
    MEMORY[0x1B3EA8670]();
  }
  uint64_t v5 = *((void *)this + 1);
  uint64_t v4 = *((void *)this + 2);
  if (v4 != v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        if (*(char *)(v7 + 23) < 0) {
          operator delete(*(void **)v7);
        }
        MEMORY[0x1B3EA8670](v7, 0x1092C40D41393B2);
        uint64_t v5 = *((void *)this + 1);
        uint64_t v4 = *((void *)this + 2);
      }
      ++v6;
    }
    while (v6 < (v4 - v5) >> 3);
  }
  unint64_t v8 = (unsigned char *)*((void *)this + 4);
  unint64_t v9 = (unsigned char *)*((void *)this + 5);
  if (v9 == v8)
  {
    unint64_t v8 = (unsigned char *)*((void *)this + 5);
    if (v9)
    {
LABEL_18:
      *((void *)this + 5) = v8;
      operator delete(v8);
    }
  }
  else
  {
    unint64_t v10 = 0;
    do
    {
      if (*(void *)&v8[8 * v10])
      {
        MEMORY[0x1B3EA8630](*(void *)&v8[8 * v10], 0x1000C8052888210);
        unint64_t v8 = (unsigned char *)*((void *)this + 4);
        unint64_t v9 = (unsigned char *)*((void *)this + 5);
      }
      ++v10;
    }
    while (v10 < (v9 - v8) >> 3);
    if (v8) {
      goto LABEL_18;
    }
  }
  uint64_t v11 = (void *)*((void *)this + 1);
  if (v11)
  {
    *((void *)this + 2) = v11;
    operator delete(v11);
  }
}

{
  uint64_t vars8;

  TGrammarCompiler::~TGrammarCompiler(this);
  JUMPOUT(0x1B3EA8670);
}

void TGrammarCompiler::registerFunction()
{
}

void sub_1B24457C0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1092C40D41393B2);
  _Unwind_Resume(a1);
}

void TGrammarCompiler::loadRule(uint64_t a1, TLexer *a2, uint64_t a3)
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  Tokeuint64_t n = nextToken(a2, (uint64_t)a2);
  if (*(void *)Token != 1)
  {
    loggableToken((uint64_t)a2);
    if (v73 >= 0) {
      std::vector<char>::pointer p_p = &__p;
    }
    else {
      std::vector<char>::pointer p_p = __p;
    }
    tknPrintf("Error: %sExpected a rule symbol\n", v53, p_p);
    if (SHIBYTE(v73) < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(v86, "");
    TException::TException(&__p, (long long *)v86);
    long long __p = &unk_1F0A33FD8;
    if (v75 >= 0) {
      std::string v55 = (const char *)&v73;
    }
    else {
      std::string v55 = (const char *)v73;
    }
    conditionalAssert(v55, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 855);
    TException::~TException((std::exception *)&__p);
    if (SBYTE7(v87) < 0) {
      operator delete(v86[0]);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    TException::TException(exception, (long long *)&__p);
    *exceptiouint64_t n = &unk_1F0A33FD8;
  }
  uint64_t v66 = *(void *)(Token + 16);
  long long v65 = TGrammar::addNonTerminal(*(void *)(a1 + 56), *(__int32 **)(Token + 8), 1);
  if (*(void *)nextToken(a2, v7) != 11)
  {
    loggableToken((uint64_t)a2);
    if (v73 >= 0) {
      char v58 = &__p;
    }
    else {
      char v58 = __p;
    }
    tknPrintf("Error: %sExpected '=' after LHS\n", v57, v58);
    if (SHIBYTE(v73) < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(v86, "");
    TException::TException(&__p, (long long *)v86);
    long long __p = &unk_1F0A33FD8;
    if (v75 >= 0) {
      uint64_t v59 = (const char *)&v73;
    }
    else {
      uint64_t v59 = (const char *)v73;
    }
    conditionalAssert(v59, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 867);
    TException::~TException((std::exception *)&__p);
    if (SBYTE7(v87) < 0) {
      operator delete(v86[0]);
    }
    char v60 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    TException::TException(v60, (long long *)&__p);
    *char v60 = &unk_1F0A33FD8;
  }
  size_t v9 = 0;
  uint64_t v10 = 0;
  v84[1] = 0;
  v84[0] = 0;
  std::string v83 = v84;
  std::string v81 = 0;
  long long v80 = 0;
  unint64_t v82 = 0;
  long long v117 = 0u;
  long long v116 = 0u;
  long long v115 = 0u;
  long long v114 = 0u;
  long long v113 = 0u;
  long long v112 = 0u;
  long long v111 = 0u;
  long long v110 = 0u;
  long long v109 = 0u;
  long long v108 = 0u;
  long long v107 = 0u;
  long long v106 = 0u;
  long long v105 = 0u;
  long long v104 = 0u;
  long long v103 = 0u;
  long long v102 = 0u;
  long long v101 = 0u;
  long long v100 = 0u;
  long long v99 = 0u;
  long long v98 = 0u;
  long long v97 = 0u;
  long long v96 = 0u;
  long long v95 = 0u;
  long long v94 = 0u;
  long long v93 = 0u;
  long long v92 = 0u;
  long long v91 = 0u;
  long long v90 = 0u;
  long long v89 = 0u;
  long long v88 = 0u;
  long long v87 = 0u;
  *(_OWORD *)std::string v86 = 0u;
  uint64_t v78 = 0;
  long long v77 = 0;
  uint64_t v79 = 0;
  while (1)
  {
    while (1)
    {
      uint64_t v11 = nextToken(a2, v8);
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)v11;
      if (*(uint64_t *)v11 > 11) {
        break;
      }
      if (v13 == 1)
      {
        v86[v9] = TGrammar::addNonTerminal(*(void *)(a1 + 56), *(__int32 **)(v11 + 8), 0);
        long long __p = *(void **)(v12 + 8);
        std::__tree<wchar_t const*,TWideCharCompare,std::allocator<wchar_t const*>>::__emplace_unique_key_args<wchar_t const*,wchar_t const* const&>(&v83, (const __int32 **)&__p, (uint64_t *)&__p);
      }
      else
      {
        if (v13 != 2) {
          goto LABEL_81;
        }
        long long __p = v74;
        long long v73 = xmmword_1B25607E0;
        char v76 = 1;
        TRegExp::stringToRegExp(*(void *)(v11 + 8), (uint64_t)&__p, 0, 0);
        uint64_t v14 = *(uint64_t **)(a1 + 56);
        if (*((void *)&v73 + 1) >= (unint64_t)v73)
        {
          if (v76)
          {
            LODWORD(v69[0].__vftable) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v73 + 1), (int *)v69, 1uLL);
            uint64_t v15 = (__int32 *)__p;
            --*((void *)&v73 + 1);
          }
          else
          {
            uint64_t v15 = (__int32 *)__p;
            if ((void)v73) {
              *((_DWORD *)__p + v73 - 1) = 0;
            }
          }
        }
        else
        {
          uint64_t v15 = (__int32 *)__p;
          *((_DWORD *)__p + *((void *)&v73 + 1)) = 0;
        }
        v86[v9] = (void *)TGrammar::addTerminal(v14, v15);
        if (v76 && __p != v74 && __p) {
          MEMORY[0x1B3EA8630]();
        }
      }
LABEL_20:
      if (a3 && *(void *)v12 != 1)
      {
        if ((*(unsigned int (**)(uint64_t, void, BOOL, void **))(*(void *)a3 + 16))(a3, *(void *)(v12 + 8), *(void *)v12 == 17, &v77))
        {
          if (v79 >= 0) {
            unint64_t v49 = (char *)&v77;
          }
          else {
            unint64_t v49 = (char *)v77;
          }
          std::string::basic_string[abi:ne180100]<0>(v69, v49);
          TException::TException(&__p, (long long *)v69);
          long long __p = &unk_1F0A340F0;
          if (v75 >= 0) {
            char v50 = (const char *)&v73;
          }
          else {
            char v50 = (const char *)v73;
          }
          conditionalAssert(v50, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 910);
          TException::~TException((std::exception *)&__p);
          if (v70 < 0) {
            operator delete(v69[0].__vftable);
          }
          uint64_t v51 = __cxa_allocate_exception(0x20uLL);
          if (v79 >= 0) {
            char v52 = (char *)&v77;
          }
          else {
            char v52 = (char *)v77;
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, v52);
          TException::TException(v51, (long long *)&__p);
          void *v51 = &unk_1F0A340F0;
        }
        uint64_t v17 = HIBYTE(v79);
        if (v79 < 0) {
          uint64_t v17 = v78;
        }
        if (v17)
        {
          loggableToken((uint64_t)a2);
          long long v19 = &__p;
          if (v73 < 0) {
            long long v19 = __p;
          }
          unint64_t v20 = &v77;
          if (v79 < 0) {
            unint64_t v20 = v77;
          }
          tknPrintf("Warning: %s%s\n", v18, v19, v20);
          if (SHIBYTE(v73) < 0) {
            operator delete(__p);
          }
        }
      }
      v85[v9] = 0;
      unint64_t v21 = (void *)nextToken(a2, v16);
      uint64_t v22 = *((void *)a2 + 3);
      if (*v21 == 25)
      {
        v84[v10 + 66] = v22;
        v84[v10++ + 2] = v9;
      }
      else if (v22)
      {
        *((void *)a2 + 3) = v22 - 1;
      }
      ++v9;
    }
    if (v13 == 17)
    {
      v86[v9] = (void *)TGrammar::addTerminal(*(uint64_t **)(a1 + 56), *(__int32 **)(v11 + 8));
      goto LABEL_20;
    }
    if (v13 != 12 && v13 != 14)
    {
LABEL_81:
      loggableToken((uint64_t)a2);
      int v42 = SHIBYTE(v73);
      long long v43 = (void **)__p;
      loggableUnicode(*(unsigned int **)(v12 + 8), v69);
      long long v45 = &__p;
      if (v42 < 0) {
        long long v45 = v43;
      }
      if (v70 >= 0) {
        uint64_t v46 = v69;
      }
      else {
        uint64_t v46 = v69[0].__vftable;
      }
      tknPrintf("Error: %sUnexpected RHS symbol '%s'\n", v44, v45, v46);
      if (v70 < 0) {
        operator delete(v69[0].__vftable);
      }
      if (SHIBYTE(v73) < 0) {
        operator delete(__p);
      }
      std::string::basic_string[abi:ne180100]<0>(v69, "");
      TException::TException(&__p, (long long *)v69);
      long long __p = &unk_1F0A33FD8;
      if (v75 >= 0) {
        unint64_t v47 = (const char *)&v73;
      }
      else {
        unint64_t v47 = (const char *)v73;
      }
      conditionalAssert(v47, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 985);
      TException::~TException((std::exception *)&__p);
      if (v70 < 0) {
        operator delete(v69[0].__vftable);
      }
      uint64_t v48 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      TException::TException(v48, (long long *)&__p);
      void *v48 = &unk_1F0A33FD8;
    }
    uint64_t v24 = 0;
    if (v9)
    {
      while (v85[v24])
      {
        if (v9 == ++v24) {
          goto LABEL_70;
        }
      }
    }
    if (v24 == v9)
    {
LABEL_70:
      loggableToken((uint64_t)a2);
      if (v73 >= 0) {
        long long v39 = &__p;
      }
      else {
        long long v39 = __p;
      }
      tknPrintf("Error: %sRight hand side must consist of at least one non-optional symbol\n", v38, v39);
      if (SHIBYTE(v73) < 0) {
        operator delete(__p);
      }
      std::string::basic_string[abi:ne180100]<0>(v69, "");
      TException::TException(&__p, (long long *)v69);
      long long __p = &unk_1F0A33FD8;
      if (v75 >= 0) {
        char v40 = (const char *)&v73;
      }
      else {
        char v40 = (const char *)v73;
      }
      conditionalAssert(v40, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 951);
      TException::~TException((std::exception *)&__p);
      if (v70 < 0) {
        operator delete(v69[0].__vftable);
      }
      long long v41 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      TException::TException(v41, (long long *)&__p);
      *long long v41 = &unk_1F0A33FD8;
    }
    uint64_t v25 = TGrammar::addRule(*(void *)(a1 + 56), v66, (uint64_t)v65, v86, v85, v9);
    std::string v26 = v25;
    std::string v27 = (char *)v81;
    if ((unint64_t)v81 >= v82)
    {
      int64_t v29 = ((unsigned char *)v81 - (unsigned char *)v80) >> 3;
      if ((unint64_t)(v29 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v30 = (uint64_t)(v82 - (void)v80) >> 2;
      if (v30 <= v29 + 1) {
        unint64_t v30 = v29 + 1;
      }
      if (v82 - (unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v8 = v30;
      }
      if (v8) {
        char v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v82, v8);
      }
      else {
        char v31 = 0;
      }
      long long v32 = &v31[8 * v29];
      *(void *)long long v32 = v26;
      std::string v28 = v32 + 8;
      int v33 = (char *)v81;
      char v34 = (char *)v80;
      if (v81 != v80)
      {
        do
        {
          uint64_t v35 = *((void *)v33 - 1);
          v33 -= 8;
          *((void *)v32 - 1) = v35;
          v32 -= 8;
        }
        while (v33 != v34);
        int v33 = (char *)v80;
      }
      long long v80 = v32;
      std::string v81 = v28;
      unint64_t v82 = (unint64_t)&v31[8 * v8];
      if (v33) {
        operator delete(v33);
      }
    }
    else
    {
      *(void *)std::string v81 = v25;
      std::string v28 = v27 + 8;
    }
    std::string v81 = v28;
    if (v10)
    {
      *((void *)a2 + 3) = v84[--v10 + 66];
      uint64_t v36 = v84[v10 + 2];
      size_t v9 = v36 + 1;
      v85[v36] = 1;
    }
    else
    {
      size_t v9 = 0;
      if (*(void *)v12 == 14)
      {
        uint64_t v37 = *((void *)a2 + 3);
        if (v37) {
          *((void *)a2 + 3) = v37 - 1;
        }
        long long __p = v74;
        long long v73 = xmmword_1B25607E0;
        char v76 = 1;
        compileCode(a2, &__p, (uint64_t)&v83, (uint64_t *)(a1 + 8));
        if ((unint64_t)(*((void *)&v73 + 1) + 1) < 0x7FFFFFFF) {
          operator new[]();
        }
        loggableToken((uint64_t)a2);
        if (v70 >= 0) {
          int v62 = v69;
        }
        else {
          int v62 = v69[0].__vftable;
        }
        tknPrintf("Error: %sRule is too large\n", v61, v62);
        if (v70 < 0) {
          operator delete(v69[0].__vftable);
        }
        std::string::basic_string[abi:ne180100]<0>(v67, "");
        TException::TException(v69, (long long *)v67);
        v69[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
        if (v71 >= 0) {
          long long v63 = (std::exception_vtbl *)&v69[1];
        }
        else {
          long long v63 = v69[1].__vftable;
        }
        conditionalAssert((const char *)v63, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 1007);
        TException::~TException(v69);
        if (v68 < 0) {
          operator delete(v67[0]);
        }
        long long v64 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v69, "");
        TException::TException(v64, (long long *)v69);
        *long long v64 = &unk_1F0A33FD8;
      }
    }
  }
}

void sub_1B2446628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,std::exception a27)
{
  if (a25 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v28)
  {
LABEL_6:
    if (LOBYTE(STACK[0x490]) && a27.__vftable != v29 && a27.__vftable) {
      MEMORY[0x1B3EA8630]();
    }
    if (SLOBYTE(STACK[0x4AF]) < 0) {
      operator delete((void *)STACK[0x498]);
    }
    char v31 = (void *)STACK[0x4B0];
    if (STACK[0x4B0])
    {
      STACK[0x4B8] = (unint64_t)v31;
      operator delete(v31);
    }
    std::__tree<int>::destroy((uint64_t)&STACK[0x4C8], (void *)STACK[0x4D0]);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

void sub_1B244675C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
  {
    operator delete(__p);
    if ((v33 & 1) == 0)
    {
LABEL_6:
      if (SLOBYTE(STACK[0x4AF]) < 0) {
        operator delete((void *)STACK[0x498]);
      }
      uint64_t v35 = (void *)STACK[0x4B0];
      if (STACK[0x4B0])
      {
        STACK[0x4B8] = (unint64_t)v35;
        operator delete(v35);
      }
      std::__tree<int>::destroy((uint64_t)&STACK[0x4C8], (void *)STACK[0x4D0]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v32);
  goto LABEL_6;
}

void sub_1B24467B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_6:
      if (a2 == 1)
      {
        char v34 = __cxa_begin_catch(a1);
        loggableToken(v29);
        (*(void (**)(void *))(*(void *)v34 + 16))(v34);
        tknPrintf("Error : %s%s\n", v35);
        if (a29 < 0) {
          operator delete(__p);
        }
        __cxa_rethrow();
      }
      if (SLOBYTE(STACK[0x4AF]) < 0) {
        operator delete((void *)STACK[0x498]);
      }
      uint64_t v36 = (void *)STACK[0x4B0];
      if (STACK[0x4B0])
      {
        STACK[0x4B8] = (unint64_t)v36;
        operator delete(v36);
      }
      std::__tree<int>::destroy((uint64_t)&STACK[0x4C8], (void *)STACK[0x4D0]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

void sub_1B244680C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,std::exception a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  TException::~TException(&a27);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    uint64_t v35 = __cxa_begin_catch(a1);
    loggableToken(v32);
    (*(void (**)(void *))(*(void *)v35 + 16))(v35);
    tknPrintf("Error : %s%s\n", v36);
    if (a32 < 0) {
      operator delete(a27.__vftable);
    }
    __cxa_rethrow();
  }
  if (SLOBYTE(STACK[0x4AF]) < 0) {
    operator delete((void *)STACK[0x498]);
  }
  uint64_t v37 = (void *)STACK[0x4B0];
  if (STACK[0x4B0])
  {
    STACK[0x4B8] = (unint64_t)v37;
    operator delete(v37);
  }
  std::__tree<int>::destroy((uint64_t)&STACK[0x4C8], (void *)STACK[0x4D0]);
  _Unwind_Resume(a1);
}

void sub_1B2446854()
{
}

#error "1B244693C: call analysis failed (funcsize=37)"

void sub_1B24468A0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (LOBYTE(STACK[0x490])) {
    TClitics::isValidRoot((uint64_t *)&a24, v30);
  }
  if (a2 == 1)
  {
    int v33 = __cxa_begin_catch(a1);
    loggableToken(v29);
    (*(void (**)(void *))(*(void *)v33 + 16))(v33);
    tknPrintf("Error : %s%s\n", v34);
    if (a29 < 0) {
      operator delete(a24);
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x1B2446994);
}

void sub_1B24468C0()
{
}

void sub_1B24468C8()
{
}

void sub_1B2446958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  __cxa_end_catch();
  if (SLOBYTE(STACK[0x4AF]) < 0) {
    operator delete((void *)STACK[0x498]);
  }
  uint64_t v30 = (void *)STACK[0x4B0];
  if (STACK[0x4B0])
  {
    STACK[0x4B8] = (unint64_t)v30;
    operator delete(v30);
  }
  std::__tree<int>::destroy((uint64_t)&STACK[0x4C8], (void *)STACK[0x4D0]);
  _Unwind_Resume(a1);
}

void sub_1B2446980(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B24469C0);
}

void sub_1B2446C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

void *compileCode(TLexer *a1, void *a2, uint64_t a3, uint64_t *a4)
{
  nextToken(a1, (uint64_t)a2);
  while (1)
  {
    uint64_t result = (void *)nextToken(a1, v8);
    if (*result == 13) {
      break;
    }
    uint64_t v10 = *((void *)a1 + 3);
    if (v10) {
      *((void *)a1 + 3) = v10 - 1;
    }
    compileInstruction(a1, a2, a3, a4);
  }
  return result;
}

uint64_t TGrammarCompiler::loadRules(uint64_t result, TLexer *a2, uint64_t a3)
{
  if (*((void *)a2 + 3) < (unint64_t)((uint64_t)(*((void *)a2 + 12) - *((void *)a2 + 11)) >> 3)) {
    TGrammarCompiler::loadRule(result, a2, a3);
  }
  return result;
}

void sub_1B24472C0(_Unwind_Exception *a1)
{
}

void sub_1B24472D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void sub_1B2447308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::exception a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void TGrammarCompiler::registerRules(uint64_t a1, TInputStream *this, uint64_t a3)
{
  if (*((unsigned char *)this + 8))
  {
    if (TInputStream::verifyVersion(this, "GrammarFormatVersion", 2uLL, 2uLL, 2uLL))
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v7, "");
      TException::TException(exception, v7);
      *exceptiouint64_t n = &unk_1F0A33B90;
    }
    TLexer::TLexer((TLexer *)v7, this, 1uLL, *(const TLexerLexicon **)(a1 + 64), 0);
    TGrammarCompiler::loadRules(a1, (TLexer *)v7, a3);
    TLexer::~TLexer((TLexer *)v7);
  }
}

void sub_1B2447434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

TLexerLexicon *TGrammarCompiler::finalize(TGrammarCompiler *this)
{
  uint64_t v2 = *((void *)this + 7);
  uint64_t v10 = v2;
  char v11 = 0;
  TGrammar::forEachNonTerminal<TIntegrityChecker>(v2, &v10);
  TGrammar::forEachTerminal<TIntegrityChecker>(v2, &v10);
  if (v11)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v8, (long long *)__p);
    v8[0].__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
    if (v9 >= 0) {
      uint64_t v4 = (std::exception_vtbl *)&v8[1];
    }
    else {
      uint64_t v4 = v8[1].__vftable;
    }
    conditionalAssert((const char *)v4, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 1080);
    TException::~TException(v8);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "");
    TException::TException(exception, (long long *)v8);
    *exceptiouint64_t n = &unk_1F0A340F0;
  }
  TGrammar::finalize(*((TGrammar **)this + 7));
  uint64_t result = (TLexerLexicon *)*((void *)this + 8);
  if (result)
  {
    TLexerLexicon::~TLexerLexicon(result);
    uint64_t result = (TLexerLexicon *)MEMORY[0x1B3EA8670]();
  }
  *((void *)this + 8) = 0;
  return result;
}

void sub_1B24475EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

uint64_t TGrammarCompiler::getAttributeValue(uint64_t a1, __int32 *a2, TAllocator *a3, unsigned char *a4)
{
  if (!wcscmp(a2, dword_1B25B1B48))
  {
    unint64_t v21 = (__int32 *)v23;
    long long v22 = xmmword_1B25607E0;
    char v24 = 1;
    unint64_t v10 = *(void *)(a1 + 8);
    {
      operator new();
    }
    TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v10, (uint64_t)&v21, 0);
    if ((unint64_t)(*((void *)&v22 + 1) + 1) >> 62) {
      uint64_t v11 = -1;
    }
    else {
      uint64_t v11 = 4 * (*((void *)&v22 + 1) + 1);
    }
    uint64_t v12 = (__int32 *)TAllocator::allocate(a3, v11);
    if (*((void *)&v22 + 1) >= (unint64_t)v22)
    {
      if (v24)
      {
        int v25 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v21, *((unint64_t *)&v22 + 1), &v25, 1uLL);
        uint64_t v13 = v21;
        --*((void *)&v22 + 1);
      }
      else
      {
        uint64_t v13 = v21;
        if ((void)v22) {
          v21[(void)v22 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v13 = v21;
      v21[*((void *)&v22 + 1)] = 0;
    }
    wcscpy(v12, v13);
    if (a4) {
      *a4 = 1;
    }
    if (!v24) {
      return 1;
    }
    unint64_t v20 = v21;
    if (v21 == (__int32 *)v23) {
      return 1;
    }
LABEL_41:
    if (v20) {
      MEMORY[0x1B3EA8630](v20, 0x1000C8052888210);
    }
    return 1;
  }
  if (!wcscmp(a2, dword_1B25B1B60))
  {
    unint64_t v21 = (__int32 *)v23;
    long long v22 = xmmword_1B25607E0;
    char v24 = 1;
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(a1 + 16);
    {
      operator new();
    }
    TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v15 + v14, (uint64_t)&v21, 0);
    if ((unint64_t)(*((void *)&v22 + 1) + 1) >> 62) {
      uint64_t v16 = -1;
    }
    else {
      uint64_t v16 = 4 * (*((void *)&v22 + 1) + 1);
    }
    uint64_t v17 = (__int32 *)TAllocator::allocate(a3, v16);
    if (*((void *)&v22 + 1) >= (unint64_t)v22)
    {
      if (v24)
      {
        int v25 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v21, *((unint64_t *)&v22 + 1), &v25, 1uLL);
        uint64_t v18 = v21;
        --*((void *)&v22 + 1);
      }
      else
      {
        uint64_t v18 = v21;
        if ((void)v22) {
          v21[(void)v22 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v18 = v21;
      v21[*((void *)&v22 + 1)] = 0;
    }
    wcscpy(v17, v18);
    if (a4) {
      *a4 = 1;
    }
    if (!v24) {
      return 1;
    }
    unint64_t v20 = v21;
    if (v21 == (__int32 *)v23) {
      return 1;
    }
    goto LABEL_41;
  }
  uint64_t v8 = *(void *)(a1 + 24);
  if (v8) {
    uint64_t v9 = *(void *)(v8 + 16) + 8 * *(void *)(a1 + 32);
  }
  else {
    uint64_t v9 = a1 + 48;
  }
  if ((*(unsigned char *)(*(void *)v9 + 8) & 4) != 0 || wcscmp(a2, dword_1B25B1B70)) {
    return getAttributeValue(a2, *(const __int32 ****)(a1 + 40), a4);
  }
  if (a4) {
    *a4 = 1;
  }
  return 1;
}

void sub_1B24479E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  MEMORY[0x1B3EA8670](v10, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x420]) && a10 != v11)
  {
    if (a10) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t getAttributeValue(__int32 *a1, const __int32 ***a2, unsigned char *a3)
{
  if (a3) {
    *a3 = 0;
  }
  if (!a2) {
    return 1;
  }
  uint64_t v5 = *a2;
  if (!*a2) {
    return 1;
  }
  unint64_t v6 = a2 + 1;
  uint64_t v7 = 1;
  while (wcscmp(a1, *v5))
  {
    uint64_t v8 = *v6++;
    uint64_t v5 = v8;
    if (!v8) {
      return v7;
    }
  }
  if (a3) {
    *a3 = 1;
  }
  return (uint64_t)(*(v6 - 1))[1];
}

uint64_t TGrammarCompiler::compareData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(const __int32 ****)(a2 + 40);
  uint64_t v4 = *(uint64_t **)(a3 + 40);
  if (v3)
  {
    uint64_t v5 = *v3;
    if (*v3)
    {
      uint64_t v6 = 0;
      uint64_t v7 = v3 + 1;
      while (1)
      {
        uint64_t v8 = v5[1];
        if (!v8) {
          goto LABEL_7;
        }
        if (v8 != (const __int32 *)1) {
          break;
        }
        if (*v5[2]) {
          goto LABEL_7;
        }
LABEL_8:
        uint64_t v9 = *v7++;
        uint64_t v5 = v9;
        if (!v9) {
          goto LABEL_13;
        }
      }
      if (!v5[2]) {
        goto LABEL_8;
      }
LABEL_7:
      ++v6;
      goto LABEL_8;
    }
  }
  uint64_t v6 = 0;
LABEL_13:
  if (v4)
  {
    uint64_t v10 = *v4;
    if (*v4)
    {
      uint64_t v11 = 0;
      uint64_t v12 = v4 + 1;
      while (1)
      {
        uint64_t v13 = *(void *)(v10 + 8);
        if (v13)
        {
          if (v13 == 1)
          {
            if (!**(_DWORD **)(v10 + 16)) {
              goto LABEL_28;
            }
          }
          else if (!*(void *)(v10 + 16))
          {
            goto LABEL_28;
          }
        }
        uint64_t AttributeValue = getAttributeValue(*(__int32 **)v10, v3, 0);
        uint64_t v16 = *(v12 - 1);
        if (AttributeValue != *(void *)(v16 + 8)) {
          goto LABEL_32;
        }
        if (AttributeValue)
        {
          if (AttributeValue == 1)
          {
            if (wcscmp(v15, *(const __int32 **)(v16 + 16))) {
              goto LABEL_32;
            }
          }
          else if (*(const __int32 **)(v16 + 16) != v15)
          {
LABEL_32:
            unsigned int v18 = 0;
            goto LABEL_33;
          }
        }
        ++v11;
LABEL_28:
        uint64_t v17 = *v12++;
        uint64_t v10 = v17;
        if (!v17) {
          goto LABEL_31;
        }
      }
    }
  }
  uint64_t v11 = 0;
LABEL_31:
  unsigned int v18 = 1;
LABEL_33:
  if (v6 == v11) {
    return v18;
  }
  else {
    return 0;
  }
}

void *TGrammarCompiler::logData(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(uint64_t **)(a2 + 40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"{ ", 2);
  if (v4)
  {
    uint64_t v5 = *v4;
    if (*v4)
    {
      uint64_t v6 = v4 + 1;
      do
      {
        uint64_t v7 = *(void *)(v5 + 8);
        uint64_t v8 = operator<<(a3, *(unsigned int **)v5);
        if (v7 == 1)
        {
          uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" = \"", 4);
          uint64_t v8 = operator<<(v9, *(unsigned int **)(*(v6 - 1) + 16));
          uint64_t v10 = "\"; ";
          uint64_t v11 = 3;
        }
        else
        {
          uint64_t v10 = " = [non-serializable object]; ";
          uint64_t v11 = 30;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, v11);
        uint64_t v12 = *v6++;
        uint64_t v5 = v12;
      }
      while (v12);
    }
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"}", 1);
}

void TGrammarCompiler::makeData(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (TLocaleInfo *)a2;
  uint64_t v227 = *MEMORY[0x1E4F143B8];
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 424) = 0;
  int v216 = *(int **)(*(void *)(a2 + 408) + 40);
  uint64_t v4 = (uint64_t)(v216 + 1);
  unint64_t v3 = *v216;
  memset(__src, 0, 512);
  long long __p = 0;
  long long v218 = 0;
  int64_t v219 = 0;
  std::vector<TGrammarCompiler::TArgument>::resize((uint64_t)&__p, 0);
  unint64_t v215 = v3;
  if (v3 < 2) {
    goto LABEL_440;
  }
  while (2)
  {
    __int32 v7 = *(_DWORD *)v4;
    switch(*(_DWORD *)v4)
    {
      case 1:
        int v18 = *(_DWORD *)(v4 + 4);
        int v19 = (const __int32 *)(v4 + 8);
        unint64_t v20 = (__int32 *)(v4 + 8 + 4 * wcslen((const __int32 *)(v4 + 8)) + 4);
        size_t v21 = wcslen(v20);
        if ((unint64_t)*(v218 - 2) >= 2) {
          goto LABEL_451;
        }
        size_t v22 = v21;
        uint64_t v23 = (unsigned int *)*(v218 - 1);
        v218 -= 2;
        int64_t v220 = 0;
        {
          operator new();
        }
        unint64_t AttributeValue = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v23, (unsigned int **)&v220);
        unsigned int v24 = AttributeValue;
        uint64_t v25 = *((void *)v2 + 51);
        uint64_t v26 = *(void *)(v25 + 8);
        uint64_t v27 = v26 - 1;
        if (v26 - 1 < (unint64_t)AttributeValue) {
          goto LABEL_16;
        }
        unint64_t AttributeValue = wcscmp(v19, (const __int32 *)"R");
        if (!AttributeValue)
        {
          if (v18) {
            uint64_t v64 = v27 + ~(unint64_t)v24;
          }
          else {
            uint64_t v64 = v24;
          }
LABEL_128:
          if (v64 != v27)
          {
            unint64_t AttributeValue = *((void *)v2 + v64 + 1);
            if (AttributeValue)
            {
              unint64_t AttributeValue = TGrammarCompiler::getAttributeValue(AttributeValue, v20, *((TAllocator **)v2 + 52), 0);
              uint64_t v29 = AttributeValue;
              int v28 = (void *)v6;
              goto LABEL_17;
            }
          }
LABEL_16:
          int v28 = &unk_1B25B1DB0;
          uint64_t v29 = 1;
          goto LABEL_17;
        }
        if (v26 == 1) {
          goto LABEL_16;
        }
        uint64_t v213 = v2;
        uint64_t v64 = 0;
        int v65 = 0;
        uint64_t v66 = v26 - 2;
        do
        {
          if (v18) {
            uint64_t v67 = v66;
          }
          else {
            uint64_t v67 = v64;
          }
          uint64_t v68 = *(void *)(*(void *)(v25 + 16) + 8 * v67);
          if ((*(unsigned char *)(v68 + 8) & 4) == 0)
          {
            unint64_t AttributeValue = wcscmp(v19, *(const __int32 **)(v68 + 16));
            if (!AttributeValue)
            {
              if (v65 == v24)
              {
                uint64_t v2 = v213;
                goto LABEL_128;
              }
              ++v65;
            }
          }
          ++v64;
          --v66;
        }
        while (v27 != v64);
        int v28 = &unk_1B25B1DB0;
        uint64_t v29 = 1;
        uint64_t v2 = v213;
LABEL_17:
        uint64_t v30 = v218;
        if (v218 < v219)
        {
LABEL_27:
          *uint64_t v30 = v29;
          v30[1] = (uint64_t)v28;
          uint64_t v34 = v30 + 2;
        }
        else
        {
          uint64_t v31 = ((char *)v218 - (unsigned char *)__p) >> 4;
          unint64_t v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v33 = (char *)v219 - (unsigned char *)__p;
          if (((char *)v219 - (unsigned char *)__p) >> 3 > v32) {
            unint64_t v32 = v33 >> 3;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v6 = v32;
          }
          if (v6) {
            unint64_t AttributeValue = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v219, v6);
          }
          else {
            unint64_t AttributeValue = 0;
          }
          long long v91 = (uint64_t *)(AttributeValue + 16 * v31);
          *long long v91 = v29;
          v91[1] = (uint64_t)v28;
          long long v99 = (char *)__p;
          long long v92 = (char *)v218;
          long long v94 = v91;
          if (v218 != __p)
          {
            do
            {
              *((_OWORD *)v94 - 1) = *((_OWORD *)v92 - 1);
              v94 -= 2;
              v92 -= 16;
            }
            while (v92 != v99);
LABEL_140:
            long long v92 = (char *)__p;
          }
LABEL_141:
          uint64_t v34 = v91 + 2;
          long long __p = v94;
          long long v218 = v91 + 2;
          int64_t v219 = (uint64_t *)(AttributeValue + 16 * v6);
          if (v92) {
            operator delete(v92);
          }
        }
        uint64_t v4 = (uint64_t)&v20[v22 + 1];
LABEL_144:
        long long v218 = v34;
LABEL_178:
        if (v215 <= (v4 - (uint64_t)v216) >> 2)
        {
LABEL_440:
          if (*(void *)&__src[0])
          {
            unint64_t v195 = 0;
            while (*((void *)__src + v195++))
              ;
            size_t v197 = 8 * v195;
            if (v195 >> 61) {
              uint64_t v198 = -1;
            }
            else {
              uint64_t v198 = 8 * v195;
            }
            id v199 = v2;
            id v200 = (void *)TAllocator::allocate(*((TAllocator **)v2 + 52), v198);
            memcpy(v200, __src, v197);
            *(void *)id v199 = v200;
          }
          goto LABEL_447;
        }
        continue;
      case 2:
        uint64_t v15 = v4 + 4;
        uint64_t v16 = v218;
        if (v218 >= v219)
        {
          uint64_t v52 = ((char *)v218 - (unsigned char *)__p) >> 4;
          unint64_t v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v54 = (char *)v219 - (unsigned char *)__p;
          if (((char *)v219 - (unsigned char *)__p) >> 3 > v53) {
            unint64_t v53 = v54 >> 3;
          }
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v55 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v55 = v53;
          }
          if (v55) {
            char v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v219, v55);
          }
          else {
            char v56 = 0;
          }
          std::string v83 = &v56[16 * v52];
          *(void *)std::string v83 = 1;
          *((void *)v83 + 1) = v15;
          std::string v85 = (char *)__p;
          std::string v84 = (char *)v218;
          std::string v86 = v83;
          if (v218 != __p)
          {
            do
            {
              *((_OWORD *)v86 - 1) = *((_OWORD *)v84 - 1);
              v86 -= 16;
              v84 -= 16;
            }
            while (v84 != v85);
            std::string v84 = (char *)__p;
          }
          uint64_t v17 = (uint64_t *)(v83 + 16);
          long long __p = v86;
          long long v218 = (uint64_t *)(v83 + 16);
          int64_t v219 = (uint64_t *)&v56[16 * v55];
          if (v84) {
            operator delete(v84);
          }
        }
        else
        {
          *long long v218 = 1;
          v16[1] = v15;
          uint64_t v17 = v16 + 2;
        }
        long long v218 = v17;
        unint64_t AttributeValue = wcslen((const __int32 *)v4);
        v4 += 4 * AttributeValue + 4;
        goto LABEL_178;
      case 3:
        unint64_t v35 = *(v218 - 2);
        uint64_t v36 = (unsigned int *)*(v218 - 1);
        v218 -= 2;
        uint64_t v37 = (const __int32 *)*(v218 - 1);
        unint64_t v38 = *(v218 - 2);
        v218 -= 2;
        uint64_t v39 = *(unsigned int *)(v4 + 4);
        if (v38 > 1)
        {
          int v40 = v37 != 0;
          if (v35 == 1)
          {
            BOOL v41 = *v36 == 0;
            goto LABEL_150;
          }
LABEL_149:
          BOOL v41 = v36 == 0;
LABEL_150:
          int v100 = !v41;
          switch((int)v39)
          {
            case 10:
            case 16:
              if (v40 != v100) {
                unint64_t v82 = (__int32 *)&unk_1B25B1B8C;
              }
              else {
                unint64_t v82 = (__int32 *)&unk_1B25B1B94;
              }
              goto LABEL_160;
            case 11:
            case 17:
              if (v40 != v100) {
                unint64_t v82 = (__int32 *)&unk_1B25B1B94;
              }
              else {
                unint64_t v82 = (__int32 *)&unk_1B25B1B8C;
              }
              goto LABEL_160;
            default:
              tknPrintf("Error: invalid operator used on objects\n", v6);
              goto LABEL_451;
          }
        }
        if (v35 >= 2)
        {
          if (v38 == 1) {
            BOOL v57 = *v37 == 0;
          }
          else {
            BOOL v57 = v37 == 0;
          }
          int v40 = !v57;
          goto LABEL_149;
        }
        uint64_t v78 = (TAllocator *)*((void *)v2 + 52);
        switch((int)v39)
        {
          case 1:
            int64_t v220 = 0;
            {
              operator new();
            }
            unint64_t v79 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v36, (unsigned int **)&v220);
            unint64_t AttributeValue = wcslen(v37);
            uint64_t v80 = v79 - AttributeValue;
            if (v79 > AttributeValue)
            {
              std::string v81 = (void *)TAllocator::allocate(v78, 4 * v79 + 4);
              memset_pattern16(v81, "0", 4 * v80);
              unint64_t AttributeValue = (unint64_t)wcscpy((__int32 *)v81 + v80, v37);
              uint64_t v37 = (const __int32 *)v81;
            }
            unint64_t v82 = (__int32 *)v37;
            goto LABEL_160;
          case 2:
            size_t v110 = wcslen(v37);
            size_t v111 = v110 + wcslen((const __int32 *)v36) + 1;
            if (v111 >> 62) {
              uint64_t v112 = -1;
            }
            else {
              uint64_t v112 = 4 * v111;
            }
            unint64_t v82 = (__int32 *)TAllocator::allocate(v78, v112);
            wcscpy(v82, v37);
            unint64_t AttributeValue = (unint64_t)wcscpy(&v82[v110], (const __int32 *)v36);
            goto LABEL_160;
          case 14:
            unint64_t AttributeValue = wcscmp(v37, (const __int32 *)v36);
            if ((int)AttributeValue <= 0) {
              unint64_t v82 = (__int32 *)&unk_1B25B1B8C;
            }
            else {
              unint64_t v82 = (__int32 *)&unk_1B25B1B94;
            }
            goto LABEL_160;
          case 15:
            unint64_t AttributeValue = wcscmp(v37, (const __int32 *)v36);
            BOOL v113 = (AttributeValue & 0x80000000) != 0;
            goto LABEL_197;
          case 16:
            unint64_t AttributeValue = wcscmp(v37, (const __int32 *)v36);
            if (AttributeValue) {
              unint64_t v82 = (__int32 *)&unk_1B25B1B8C;
            }
            else {
              unint64_t v82 = (__int32 *)&unk_1B25B1B94;
            }
            goto LABEL_160;
          case 17:
            unint64_t AttributeValue = wcscmp(v37, (const __int32 *)v36);
LABEL_182:
            if (AttributeValue) {
              unint64_t v82 = (__int32 *)&unk_1B25B1B94;
            }
            else {
              unint64_t v82 = (__int32 *)&unk_1B25B1B8C;
            }
            goto LABEL_160;
          case 18:
            unint64_t AttributeValue = wcscmp(v37, (const __int32 *)v36);
            BOOL v113 = (int)AttributeValue < 1;
LABEL_197:
            if (v113) {
              unint64_t v82 = (__int32 *)&unk_1B25B1B94;
            }
            else {
              unint64_t v82 = (__int32 *)&unk_1B25B1B8C;
            }
            goto LABEL_160;
          case 19:
            unint64_t AttributeValue = wcscmp(v37, (const __int32 *)v36);
            if ((AttributeValue & 0x80000000) != 0) {
              unint64_t v82 = (__int32 *)&unk_1B25B1B8C;
            }
            else {
              unint64_t v82 = (__int32 *)&unk_1B25B1B94;
            }
            goto LABEL_160;
          default:
            goto LABEL_211;
        }
        do
        {
LABEL_211:
          long long v114 = v37;
          unsigned int v115 = *v37;
          if (!*v37) {
            break;
          }
          ++v37;
          if (!v114[1]) {
            break;
          }
          {
            operator new();
          }
          unint64_t AttributeValue = v115 - 48;
          if ((int)v115 < 48) {
            break;
          }
          if (v115 > 0x39)
          {
            if (v115 < 0x660) {
              break;
            }
            unint64_t AttributeValue = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v115);
          }
        }
        while (!AttributeValue);
        unsigned int v116 = 0;
        for (uint64_t i = 0; ; ++i)
        {
          unsigned int v118 = v114[i];
          {
            if (AttributeValue) {
              operator new();
            }
          }
          if ((int)v118 < 48) {
            break;
          }
          if (v118 >= 0x3A)
          {
            if (v118 < 0x660) {
              break;
            }
            unint64_t AttributeValue = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v118);
            if (AttributeValue == -1) {
              break;
            }
          }
          ++v116;
        }
        unsigned int v211 = v116;
        if (i <= 1) {
          size_t v119 = 1;
        }
        else {
          size_t v119 = i;
        }
        BOOL v120 = (__int32 *)&unk_1B25B1B8C;
        if (i) {
          BOOL v120 = (__int32 *)v114;
        }
        int v212 = v120;
        do
        {
          uint64_t v121 = v36;
          int v122 = *v36;
          if (!*v36) {
            break;
          }
          ++v36;
          if (!v121[1]) {
            break;
          }
          {
            operator new();
          }
          unint64_t AttributeValue = (v122 - 48);
          if (v122 < 48) {
            break;
          }
          if (v122 > 0x39)
          {
            if (v122 < 0x660) {
              break;
            }
            unint64_t AttributeValue = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v122);
          }
        }
        while (!AttributeValue);
        unsigned int v123 = 0;
        for (uint64_t j = 0; ; ++j)
        {
          unsigned int v125 = v121[j];
          {
            if (AttributeValue) {
              operator new();
            }
          }
          if ((int)v125 < 48) {
            break;
          }
          if (v125 >= 0x3A)
          {
            if (v125 < 0x660) {
              break;
            }
            unint64_t AttributeValue = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v125);
            if (AttributeValue == -1) {
              break;
            }
          }
          ++v123;
        }
        int v126 = (const __int32 *)&unk_1B25B1B8C;
        if (j) {
          int v126 = (const __int32 *)v121;
        }
        uint64_t v214 = (__int32 *)v126;
        if (j <= 1) {
          size_t v127 = 1;
        }
        else {
          size_t v127 = j;
        }
        break;
      case 4:
        uint64_t v13 = *(int *)(v4 + 12);
        if (v13) {
          uint64_t v14 = (char *)__p + 16 * (((unint64_t)((char *)v218 - (unsigned char *)__p) >> 4) - v13);
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v70 = (*(uint64_t (**)(char *, void, void, void, void))(*(void *)(v4 + 4) + 24))(v14, *(int *)(v4 + 12), *(void *)(*(void *)(v4 + 4) + 48), *(void *)(*(void *)(v4 + 4) + 56), *((void *)v2 + 52));
        if (!v70) {
          goto LABEL_451;
        }
        uint64_t v71 = v69;
        std::vector<TGrammarCompiler::TArgument>::resize((uint64_t)&__p, (((char *)v218 - (unsigned char *)__p) >> 4) - v13);
        v4 += 16;
        long long v72 = v218;
        if (v218 < v219)
        {
          *long long v218 = v70;
          v72[1] = v71;
          long long v73 = v72 + 2;
          goto LABEL_101;
        }
        uint64_t v74 = ((char *)v218 - (unsigned char *)__p) >> 4;
        unint64_t v75 = v74 + 1;
        if ((unint64_t)(v74 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v76 = (char *)v219 - (unsigned char *)__p;
        if (((char *)v219 - (unsigned char *)__p) >> 3 > v75) {
          unint64_t v75 = v76 >> 3;
        }
        if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v6 = v75;
        }
        if (v6) {
          unint64_t AttributeValue = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v219, v6);
        }
        else {
          unint64_t AttributeValue = 0;
        }
        long long v95 = (uint64_t *)(AttributeValue + 16 * v74);
        *long long v95 = v70;
        v95[1] = v71;
        long long v97 = (char *)__p;
        long long v96 = (char *)v218;
        long long v98 = v95;
        if (v218 != __p)
        {
          do
          {
            *((_OWORD *)v98 - 1) = *((_OWORD *)v96 - 1);
            v98 -= 2;
            v96 -= 16;
          }
          while (v96 != v97);
          long long v96 = (char *)__p;
        }
        uint64_t v34 = v95 + 2;
        long long __p = v98;
        long long v218 = v95 + 2;
        int64_t v219 = (uint64_t *)(AttributeValue + 16 * v6);
        if (v96) {
          operator delete(v96);
        }
        goto LABEL_144;
      case 5:
        int v42 = (const __int32 *)(v4 + 4);
        size_t v43 = wcslen(v42);
        uint64_t v44 = v218 - 2;
        long long v45 = v2;
        uint64_t v46 = (TAllocator *)*((void *)v2 + 52);
        unint64_t v47 = *(const __int32 ***)&__src[0];
        if (*(void *)&__src[0])
        {
          uint64_t v48 = 0;
          do
          {
            unint64_t AttributeValue = wcscmp(*v47, v42);
            if (!AttributeValue)
            {
              *(_OWORD *)(*((void *)__src + v48) + 8) = *(_OWORD *)v44;
LABEL_100:
              uint64_t v2 = v45;
              uint64_t v4 = (uint64_t)&v42[v43 + 1];
              long long v73 = v218 - 2;
LABEL_101:
              long long v218 = v73;
              goto LABEL_178;
            }
            uint64_t v49 = v48 + 1;
            unint64_t v47 = (const __int32 **)*((void *)__src + ++v48);
          }
          while (v47);
        }
        else
        {
          uint64_t v49 = 0;
        }
        unint64_t AttributeValue = TAllocator::allocate(v46, 24);
        *(void *)unint64_t AttributeValue = v42;
        long long v77 = (unint64_t *)__src + v49;
        *(_OWORD *)(AttributeValue + 8) = *(_OWORD *)v44;
        *long long v77 = AttributeValue;
        v77[1] = 0;
        goto LABEL_100;
      case 6:
        unint64_t v20 = (__int32 *)(v4 + 4);
        size_t v22 = wcslen(v20);
        unint64_t AttributeValue = getAttributeValue(v20, (const __int32 ***)__src, 0);
        uint64_t v29 = AttributeValue;
        int v28 = (void *)v6;
        uint64_t v30 = v218;
        if (v218 < v219) {
          goto LABEL_27;
        }
        uint64_t v61 = ((char *)v218 - (unsigned char *)__p) >> 4;
        unint64_t v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v63 = (char *)v219 - (unsigned char *)__p;
        if (((char *)v219 - (unsigned char *)__p) >> 3 > v62) {
          unint64_t v62 = v63 >> 3;
        }
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v6 = v62;
        }
        if (v6) {
          unint64_t AttributeValue = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v219, v6);
        }
        else {
          unint64_t AttributeValue = 0;
        }
        long long v91 = (uint64_t *)(AttributeValue + 16 * v61);
        *long long v91 = v29;
        v91[1] = (uint64_t)v28;
        long long v93 = (char *)__p;
        long long v92 = (char *)v218;
        long long v94 = v91;
        if (v218 == __p) {
          goto LABEL_141;
        }
        do
        {
          *((_OWORD *)v94 - 1) = *((_OWORD *)v92 - 1);
          v94 -= 2;
          v92 -= 16;
        }
        while (v92 != v93);
        goto LABEL_140;
      case 7:
        v218 -= 2;
        v4 += 4;
        goto LABEL_178;
      case 8:
        goto LABEL_39;
      case 9:
      case 0xA:
        if (*(v218 - 2) == 1)
        {
          int64_t v220 = 0;
          uint64_t v8 = (unsigned int *)*(v218 - 1);
          {
            operator new();
          }
          unint64_t AttributeValue = TLocaleInfo::stringToInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v8, (unsigned int **)&v220);
          BOOL v9 = AttributeValue != 0;
          __int32 v7 = *(_DWORD *)v4;
        }
        else
        {
          BOOL v9 = *(v218 - 1) != 0;
        }
        if (v9 == (v7 != 10)) {
          goto LABEL_177;
        }
LABEL_39:
        v4 += 4 * *(int *)(v4 + 4);
        goto LABEL_178;
      case 0xB:
        goto LABEL_451;
      case 0xC:
        uint64_t v10 = v218;
        if (*(v218 - 2) == 1)
        {
          int64_t v220 = 0;
          uint64_t v11 = (unsigned int *)*(v218 - 1);
          {
            operator new();
          }
          unint64_t AttributeValue = TLocaleInfo::stringToInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v11, (unsigned int **)&v220);
          uint64_t v12 = (int)AttributeValue;
          uint64_t v10 = v218;
        }
        else
        {
          uint64_t v12 = *(v218 - 1) != 0;
        }
        char v50 = v10 - 2;
        long long v218 = v10 - 2;
        if (v12) {
          uint64_t v51 = &unk_1B25B1B8C;
        }
        else {
          uint64_t v51 = &unk_1B25B1B94;
        }
        if (v50 >= v219)
        {
          uint64_t v58 = ((char *)v50 - (unsigned char *)__p) >> 4;
          unint64_t v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v60 = (char *)v219 - (unsigned char *)__p;
          if (((char *)v219 - (unsigned char *)__p) >> 3 > v59) {
            unint64_t v59 = v60 >> 3;
          }
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v6 = v59;
          }
          if (v6) {
            unint64_t AttributeValue = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v219, v6);
          }
          else {
            unint64_t AttributeValue = 0;
          }
          long long v87 = (void *)(AttributeValue + 16 * v58);
          *long long v87 = 1;
          v87[1] = v51;
          long long v89 = (char *)__p;
          long long v88 = (char *)v218;
          long long v90 = (char *)v87;
          if (v218 != __p)
          {
            do
            {
              *((_OWORD *)v90 - 1) = *((_OWORD *)v88 - 1);
              v90 -= 16;
              v88 -= 16;
            }
            while (v88 != v89);
            long long v88 = (char *)__p;
          }
          uint64_t v10 = v87 + 2;
          long long __p = v90;
          long long v218 = v87 + 2;
          int64_t v219 = (uint64_t *)(AttributeValue + 16 * v6);
          if (v88) {
            operator delete(v88);
          }
        }
        else
        {
          *(v10 - 2) = 1;
          *(v10 - 1) = (uint64_t)v51;
        }
        long long v218 = v10;
        goto LABEL_177;
      default:
        goto LABEL_178;
    }
    break;
  }
  switch((int)v39)
  {
    case 3:
      uint64_t v128 = v39;
      unsigned int v129 = *v212;
      unint64_t AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
      unsigned int v130 = v129 - 48;
      if ((int)v129 < 48) {
        goto LABEL_265;
      }
      if (v129 <= 0x39) {
        goto LABEL_264;
      }
      if (v129 >= 0x660)
      {
        unint64_t AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v129);
        unsigned int v130 = AttributeValue;
LABEL_264:
        if (!v130) {
          goto LABEL_323;
        }
      }
LABEL_265:
      unsigned int v131 = *v214;
      unint64_t AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
      unsigned int v132 = v131 - 48;
      if ((int)v131 < 48) {
        goto LABEL_270;
      }
      if (v131 <= 0x39) {
        goto LABEL_269;
      }
      if (v131 >= 0x660)
      {
        unint64_t AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v131);
        unsigned int v132 = AttributeValue;
LABEL_269:
        if (!v132) {
          goto LABEL_323;
        }
      }
LABEL_270:
      unsigned int v133 = *v214;
      uint64_t GlobalLocaleInfo = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
      unsigned int v135 = v133 - 48;
      if ((int)v133 < 48) {
        goto LABEL_285;
      }
      if (v133 <= 0x39) {
        goto LABEL_274;
      }
      if (v133 < 0x660) {
        goto LABEL_285;
      }
      uint64_t GlobalLocaleInfo = TLocaleInfo::getDigitExtended(GlobalLocaleInfo, v133);
      unsigned int v135 = GlobalLocaleInfo;
LABEL_274:
      if (v135 != 1) {
        goto LABEL_285;
      }
      int v136 = (unsigned int *)(v214 + 1);
      do
      {
        char v137 = v136;
        unsigned int v138 = *v136;
        uint64_t v139 = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)GlobalLocaleInfo);
        uint64_t GlobalLocaleInfo = v138 - 48;
        if ((int)v138 < 48) {
          break;
        }
        if (v138 > 0x39)
        {
          if (v138 < 0x660) {
            break;
          }
          uint64_t GlobalLocaleInfo = TLocaleInfo::getDigitExtended(v139, v138);
        }
        int v136 = v137 + 1;
      }
      while (!GlobalLocaleInfo);
      unsigned int v140 = *v137;
      uint64_t GlobalLocaleInfo = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)GlobalLocaleInfo);
      if ((int)v140 < 48
        || v140 >= 0x3A
        && (v140 < 0x660
         || (uint64_t GlobalLocaleInfo = TLocaleInfo::getDigitExtended(GlobalLocaleInfo, v140), GlobalLocaleInfo == -1)))
      {
        int v173 = v127 + v119;
        unint64_t v82 = (__int32 *)TAllocator::allocate(v78, 4 * (v127 + v119));
        unint64_t AttributeValue = (unint64_t)wcsncpy(v82, v212, v119);
        if (v127 != 1)
        {
          if (v123 <= 1) {
            int v174 = 1;
          }
          else {
            int v174 = v123;
          }
          uint64_t v175 = (v174 - 1);
          unsigned int v176 = v211;
          if (v211 <= 1) {
            unsigned int v176 = 1;
          }
          do
          {
            v82[v176++] = 48;
            --v175;
          }
          while (v175);
        }
        goto LABEL_419;
      }
LABEL_285:
      unsigned int v141 = *v212;
      unint64_t AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)GlobalLocaleInfo);
      unsigned int v142 = v141 - 48;
      if ((int)v141 < 48) {
        goto LABEL_298;
      }
      if (v141 <= 0x39) {
        goto LABEL_289;
      }
      if (v141 < 0x660) {
        goto LABEL_298;
      }
      unint64_t AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v141);
      unsigned int v142 = AttributeValue;
LABEL_289:
      if (v142 != 1)
      {
LABEL_298:
        uint64_t v39 = v128;
        goto LABEL_391;
      }
      size_t v143 = (unsigned int *)(v212 + 1);
      do
      {
        int v144 = v143;
        unsigned int v145 = *v143;
        uint64_t v146 = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
        unint64_t AttributeValue = v145 - 48;
        if ((int)v145 < 48) {
          break;
        }
        if (v145 > 0x39)
        {
          if (v145 < 0x660) {
            break;
          }
          unint64_t AttributeValue = TLocaleInfo::getDigitExtended(v146, v145);
        }
        size_t v143 = v144 + 1;
      }
      while (!AttributeValue);
      unsigned int v147 = *v144;
      unint64_t AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
      if ((int)v147 < 48) {
        goto LABEL_412;
      }
      if (v147 < 0x3A) {
        goto LABEL_298;
      }
      if (v147 < 0x660
        || (unint64_t AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v147),
            uint64_t v39 = v128,
            AttributeValue == -1))
      {
LABEL_412:
        int v173 = v127 + v119;
        unint64_t v82 = (__int32 *)TAllocator::allocate(v78, 4 * (v127 + v119));
        unint64_t AttributeValue = (unint64_t)wcsncpy(v82, v214, v127);
        if (v119 != 1)
        {
          int v186 = v211;
          if (v211 <= 1) {
            int v186 = 1;
          }
          uint64_t v187 = (v186 - 1);
          if (v123 <= 1) {
            unsigned int v188 = 1;
          }
          else {
            unsigned int v188 = v123;
          }
          do
          {
            v82[v188++] = 48;
            --v187;
          }
          while (v187);
        }
LABEL_419:
        v82[v173 - 1] = 0;
        goto LABEL_160;
      }
      goto LABEL_391;
    case 4:
      int v148 = v119 - v127;
      if (v119 < v127
        || v119 == v127
        && (unint64_t AttributeValue = wcsncmp(v212, v126, v119), (AttributeValue & 0x80000000) != 0))
      {
        unint64_t AttributeValue = TAllocator::allocate(v78, 8);
        unint64_t v82 = (__int32 *)AttributeValue;
        *(void *)unint64_t AttributeValue = 48;
        goto LABEL_160;
      }
      uint64_t v164 = v39;
      unsigned int v165 = *v214;
      unint64_t AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
      unsigned int v166 = v165 - 48;
      if ((int)v165 < 48) {
        goto LABEL_370;
      }
      if (v165 <= 0x39) {
        goto LABEL_361;
      }
      if (v165 < 0x660) {
        goto LABEL_370;
      }
      unint64_t AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v165);
      unsigned int v166 = AttributeValue;
LABEL_361:
      if (v166 != 1) {
        goto LABEL_370;
      }
      int v167 = (unsigned int *)(v214 + 1);
      do
      {
        double v168 = v167;
        unsigned int v169 = *v167;
        uint64_t v170 = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
        unint64_t AttributeValue = v169 - 48;
        if ((int)v169 < 48) {
          break;
        }
        if (v169 > 0x39)
        {
          if (v169 < 0x660) {
            break;
          }
          unint64_t AttributeValue = TLocaleInfo::getDigitExtended(v170, v169);
        }
        int v167 = v168 + 1;
      }
      while (!AttributeValue);
      unsigned int v171 = *v168;
      unint64_t AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
      if ((int)v171 < 48) {
        goto LABEL_431;
      }
      if (v171 >= 0x3A)
      {
        if (v171 < 0x660
          || (unint64_t AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v171),
              uint64_t v39 = v164,
              AttributeValue == -1))
        {
LABEL_431:
          unint64_t v82 = (__int32 *)TAllocator::allocate(v78, 4 * (v148 + 2));
          unint64_t AttributeValue = (unint64_t)wcsncpy(v82, v212, (v148 + 1));
          v82[v148 + 1] = 0;
          goto LABEL_160;
        }
      }
      else
      {
LABEL_370:
        uint64_t v39 = v164;
      }
      goto LABEL_391;
    case 5:
      if (v119 < v127
        || (uint64_t v210 = v39, v119 == v127)
        && (unint64_t AttributeValue = wcsncmp(v212, v126, v119), (AttributeValue & 0x80000000) != 0))
      {
        unint64_t v82 = v212;
        goto LABEL_160;
      }
      unsigned int v149 = *v214;
      unint64_t AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
      unsigned int v150 = v149 - 48;
      if ((int)v149 < 48) {
        goto LABEL_371;
      }
      if (v149 <= 0x39) {
        goto LABEL_330;
      }
      if (v149 < 0x660) {
        goto LABEL_371;
      }
      unint64_t AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v149);
      unsigned int v150 = AttributeValue;
LABEL_330:
      if (v150 != 1)
      {
LABEL_371:
        if (j > 1 || v119 < 3) {
          goto LABEL_391;
        }
        unsigned int v172 = *v214;
        unint64_t AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
        if ((int)v172 > 47)
        {
          if (v172 <= 0x39)
          {
            unint64_t AttributeValue = v172 - 48;
LABEL_386:
            switch(AttributeValue)
            {
              case 2:
                goto LABEL_389;
              case 4:
                v212 += (v119 - 2);
                unsigned int v193 = *v212;
                unint64_t AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
                unsigned int v194 = v193 - 48;
                if ((int)v193 < 48) {
                  goto LABEL_394;
                }
                if (v193 > 0x39)
                {
                  if (v193 < 0x660) {
                    goto LABEL_394;
                  }
                  unint64_t AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v193);
                  unsigned int v194 = AttributeValue;
                }
                v212 += v194 == 0;
                goto LABEL_394;
              case 5:
LABEL_389:
                v212 += (v119 - 1);
LABEL_394:
                v224[0] = 0;
                uint64_t v177 = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
                long long v178 = (TLocaleInfo *)TLocaleInfo::stringToUInt(v177, (unsigned int *)v212, (unsigned int **)v224);
                unsigned int v179 = v178;
                uint64_t v180 = TLocaleInfo::getGlobalLocaleInfo(v178);
                uint64_t v181 = (TLocaleInfo *)TLocaleInfo::stringToUInt(v180, (unsigned int *)v214, (unsigned int **)v224);
                switch((int)v210)
                {
                  case 3:
                    unint64_t v182 = v181 * (unint64_t)v179;
                    break;
                  case 4:
                    if (!v181) {
                      goto LABEL_451;
                    }
                    unint64_t v182 = v179 / v181;
                    break;
                  case 5:
                    if (!v181) {
                      goto LABEL_451;
                    }
                    unint64_t v182 = v179 % v181;
                    break;
                  case 6:
                    unint64_t v182 = v181 + (unint64_t)v179;
                    break;
                  case 7:
                    if (v179 < v181) {
                      goto LABEL_451;
                    }
                    unint64_t v182 = v179 - (unint64_t)v181;
                    break;
                  default:
                    goto LABEL_451;
                }
                int64_t v220 = v222;
                long long v221 = xmmword_1B25607E0;
                char v223 = 1;
                uint64_t v183 = TLocaleInfo::getGlobalLocaleInfo(v181);
                TLocaleInfo::valueToString(v183, v182, (uint64_t)&v220, 0);
                if ((unint64_t)(*((void *)&v221 + 1) + 1) >> 62) {
                  uint64_t v184 = -1;
                }
                else {
                  uint64_t v184 = 4 * (*((void *)&v221 + 1) + 1);
                }
                unint64_t v82 = (__int32 *)TAllocator::allocate(v78, v184);
                id v185 = (const __int32 *)TBuffer<wchar_t>::c_str((uint64_t)&v220);
                unint64_t AttributeValue = (unint64_t)wcscpy(v82, v185);
                if (v223)
                {
                  unint64_t AttributeValue = (unint64_t)v220;
                  if (v220 != v222)
                  {
                    if (v220) {
                      unint64_t AttributeValue = MEMORY[0x1B3EA8630]();
                    }
                  }
                }
                goto LABEL_160;
            }
            goto LABEL_390;
          }
          if (v172 > 0x65F)
          {
            unint64_t AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v172);
            goto LABEL_386;
          }
        }
LABEL_390:
        LODWORD(v119) = i;
        goto LABEL_391;
      }
      unint64_t v151 = (unsigned int *)(v214 + 1);
      do
      {
        id v152 = v151;
        unsigned int v153 = *v151;
        uint64_t v154 = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
        unint64_t AttributeValue = v153 - 48;
        if ((int)v153 < 48) {
          break;
        }
        if (v153 > 0x39)
        {
          if (v153 < 0x660) {
            break;
          }
          unint64_t AttributeValue = TLocaleInfo::getDigitExtended(v154, v153);
        }
        unint64_t v151 = v152 + 1;
      }
      while (!AttributeValue);
      unsigned int v155 = *v152;
      unint64_t AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
      uint64_t v39 = v210;
      if ((int)v155 < 48
        || v155 >= 0x3A
        && (v155 < 0x660
         || (unint64_t AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v155),
             uint64_t v39 = v210,
             AttributeValue == -1)))
      {
        if (v127 == 1)
        {
LABEL_323:
          unint64_t v82 = (__int32 *)&unk_1B25B1B8C;
        }
        else
        {
          uint64_t v156 = 0;
          if (v123 <= 1) {
            int v157 = 1;
          }
          else {
            int v157 = v123;
          }
          unsigned int v158 = v157 - 1;
          uint64_t v159 = 4 * (v157 - 1);
          uint64_t v160 = v211;
          if (v211 <= 1uLL) {
            uint64_t v160 = 1;
          }
          uint64_t v161 = (uint64_t)&v212[v160 - v158];
          while (1)
          {
            unsigned int v162 = *(_DWORD *)(v161 + 4 * v156);
            unint64_t AttributeValue = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)AttributeValue);
            unsigned int v163 = v162 - 48;
            if ((int)v162 < 48) {
              break;
            }
            if (v162 > 0x39)
            {
              if (v162 < 0x660) {
                break;
              }
              unint64_t AttributeValue = TLocaleInfo::getDigitExtended(AttributeValue, v162);
              unsigned int v163 = AttributeValue;
            }
            if (v163) {
              break;
            }
            ++v156;
            v159 -= 4;
            unint64_t v82 = (__int32 *)&unk_1B25B1B8C;
            if (v158 == v156) {
              goto LABEL_160;
            }
          }
          int v189 = v123;
          if (v123 <= 1uLL) {
            int v189 = 1;
          }
          if (v211 <= 1uLL) {
            uint64_t v190 = 1;
          }
          else {
            uint64_t v190 = v211;
          }
          id v191 = (__int32 *)TAllocator::allocate(v78, 4 * (v189 - v156));
          unint64_t v82 = v191;
          if (v123 <= 1) {
            int v192 = 1;
          }
          else {
            int v192 = v123;
          }
          unint64_t AttributeValue = (unint64_t)wcsncpy(v191, &v212[v190 + v159 / 0xFFFFFFFFFFFFFFFCLL], (v192 - 1) - v156);
          v82[(unint64_t)v159 / 4] = 0;
        }
LABEL_160:
        long long v101 = v218;
        if (v218 >= v219)
        {
          uint64_t v103 = ((char *)v218 - (unsigned char *)__p) >> 4;
          unint64_t v104 = v103 + 1;
          if ((unint64_t)(v103 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v105 = (char *)v219 - (unsigned char *)__p;
          if (((char *)v219 - (unsigned char *)__p) >> 3 > v104) {
            unint64_t v104 = v105 >> 3;
          }
          if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v6 = v104;
          }
          if (v6) {
            unint64_t AttributeValue = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v219, v6);
          }
          else {
            unint64_t AttributeValue = 0;
          }
          long long v106 = (void *)(AttributeValue + 16 * v103);
          *long long v106 = 1;
          v106[1] = v82;
          long long v108 = (char *)__p;
          long long v107 = (char *)v218;
          long long v109 = (char *)v106;
          if (v218 != __p)
          {
            do
            {
              *((_OWORD *)v109 - 1) = *((_OWORD *)v107 - 1);
              v109 -= 16;
              v107 -= 16;
            }
            while (v107 != v108);
            long long v107 = (char *)__p;
          }
          long long v102 = v106 + 2;
          long long __p = v109;
          long long v218 = v106 + 2;
          int64_t v219 = (uint64_t *)(AttributeValue + 16 * v6);
          if (v107) {
            operator delete(v107);
          }
        }
        else
        {
          *long long v218 = 1;
          v101[1] = (uint64_t)v82;
          long long v102 = v101 + 2;
        }
        long long v218 = v102;
LABEL_177:
        v4 += 8;
        goto LABEL_178;
      }
LABEL_391:
      if (v119 >= 0xA)
      {
        uint64_t v201 = v39;
        loggableUnicode((unsigned int *)v212, &v220);
        id v202 = v2;
        int v203 = SHIBYTE(v221);
        int v204 = (void **)v220;
        loggableUnicode((unsigned int *)v214, v224);
        float v206 = &v220;
        if (v203 < 0) {
          float v206 = v204;
        }
        if (v225 >= 0) {
          uint64_t v207 = v224;
        }
        else {
          uint64_t v207 = (void **)v224[0];
        }
      }
      else
      {
        if (v127 < 0xA)
        {
          LODWORD(v210) = v39;
          goto LABEL_394;
        }
        uint64_t v201 = v39;
        loggableUnicode((unsigned int *)v212, &v220);
        id v202 = v2;
        int v208 = SHIBYTE(v221);
        id v209 = (void **)v220;
        loggableUnicode((unsigned int *)v214, v224);
        float v206 = &v220;
        if (v208 < 0) {
          float v206 = v209;
        }
        if (v225 >= 0) {
          uint64_t v207 = v224;
        }
        else {
          uint64_t v207 = (void **)v224[0];
        }
      }
      tknPrintf("Warning: (%s,%s,%llu)  : Operand out of bounds, overflow\n", v205, v206, v207, v201);
      uint64_t v2 = v202;
      if (v225 < 0) {
        operator delete(v224[0]);
      }
      if (SHIBYTE(v221) < 0) {
        operator delete(v220);
      }
LABEL_451:
      *((unsigned char *)v2 + 424) = 1;
LABEL_447:
      if (__p)
      {
        long long v218 = (uint64_t *)__p;
        operator delete(__p);
      }
      return;
    case 8:
      unint64_t v82 = (__int32 *)&unk_1B25B1B94;
      if (v119 <= v127)
      {
        if (v119 != v127) {
          goto LABEL_323;
        }
        unint64_t AttributeValue = wcsncmp(v212, v126, v119);
        if ((int)AttributeValue <= 0) {
          goto LABEL_323;
        }
      }
      goto LABEL_160;
    case 9:
      unint64_t v82 = (__int32 *)&unk_1B25B1B94;
      if (v119 < v127) {
        goto LABEL_160;
      }
      if (v119 == v127)
      {
        unint64_t AttributeValue = wcsncmp(v212, v126, v119);
        if ((AttributeValue & 0x80000000) != 0) {
          goto LABEL_160;
        }
      }
      goto LABEL_323;
    case 10:
      if (v119 != v127) {
        goto LABEL_323;
      }
      unint64_t AttributeValue = wcsncmp(v212, v126, v119);
      if (AttributeValue) {
        goto LABEL_323;
      }
      unint64_t v82 = (__int32 *)&unk_1B25B1B94;
      goto LABEL_160;
    case 11:
      unint64_t v82 = (__int32 *)&unk_1B25B1B94;
      if (v119 != v127) {
        goto LABEL_160;
      }
      unint64_t AttributeValue = wcsncmp(v212, v126, v119);
      goto LABEL_182;
    case 12:
      unint64_t v82 = (__int32 *)&unk_1B25B1B94;
      if (v119 < v127) {
        goto LABEL_160;
      }
      if (v119 == v127)
      {
        unint64_t AttributeValue = wcsncmp(v212, v126, v119);
        if ((int)AttributeValue < 1) {
          goto LABEL_160;
        }
      }
      goto LABEL_323;
    case 13:
      unint64_t v82 = (__int32 *)&unk_1B25B1B94;
      if (v119 <= v127)
      {
        if (v119 != v127) {
          goto LABEL_323;
        }
        unint64_t AttributeValue = wcsncmp(v212, v126, v119);
        if ((AttributeValue & 0x80000000) != 0) {
          goto LABEL_323;
        }
      }
      goto LABEL_160;
    default:
      goto LABEL_391;
  }
}

void sub_1B24497C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (SLOBYTE(STACK[0x4BF]) < 0) {
    operator delete((void *)STACK[0x4A8]);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

void std::vector<TGrammarCompiler::TArgument>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<TGrammarCompiler::TArgument>::__append((void **)a1, a2 - v2);
  }
}

uint64_t TGrammarCompiler::makeClientData(uint64_t *a1, long long *a2, uint64_t a3, TAllocator *this)
{
  if ((unint64_t)(a3 + 1) >> 61) {
    uint64_t v8 = -1;
  }
  else {
    uint64_t v8 = 8 * (a3 + 1);
  }
  uint64_t v9 = TAllocator::allocate(this, v8);
  uint64_t v10 = v9;
  if (a3)
  {
    uint64_t v11 = (uint64_t *)v9;
    uint64_t v12 = a3;
    do
    {
      uint64_t v13 = TAllocator::allocate(this, 24);
      uint64_t v14 = *a1++;
      *(void *)uint64_t v13 = v14;
      long long v15 = *a2++;
      *(_OWORD *)(v13 + 8) = v15;
      *v11++ = v13;
      --v12;
    }
    while (v12);
  }
  *(void *)(v10 + 8 * a3) = 0;
  return v10;
}

void *TFunctionDescr::TFunctionDescr(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  MEMORY[0x1B3EA7C30]();
  a1[3] = a3;
  a1[4] = a4;
  a1[5] = a5;
  a1[6] = a6;
  a1[7] = a7;
  return a1;
}

void sub_1B2449B58(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t compileInstruction(TLexer *a1, void *a2, uint64_t a3, uint64_t *a4)
{
  Tokeuint64_t n = (uint64_t *)nextToken(a1, (uint64_t)a2);
  uint64_t v9 = *Token;
  if (*Token > 17)
  {
    if (v9 != 20)
    {
      if (v9 != 18)
      {
LABEL_42:
        loggableToken((uint64_t)a1);
        if (v67 >= 0) {
          uint64_t v34 = __p;
        }
        else {
          uint64_t v34 = (void **)__p[0];
        }
        tknPrintf("Error: %sExpected an attribute or a condition\n", v33, v34);
        if (v67 < 0) {
          operator delete(__p[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v64, "");
        TException::TException(__p, (long long *)v64);
        __p[0] = &unk_1F0A33FD8;
        if (v68 >= 0) {
          unint64_t v35 = (const char *)&__p[1];
        }
        else {
          unint64_t v35 = (const char *)__p[1];
        }
        conditionalAssert(v35, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 712);
        TException::~TException((std::exception *)__p);
        if (v65 < 0) {
          operator delete(v64[0]);
        }
        exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        TException::TException(exception, (long long *)__p);
        *exceptiouint64_t n = &unk_1F0A33FD8;
      }
      uint64_t v12 = *((void *)a1 + 3);
      if (v12) {
        *((void *)a1 + 3) = v12 - 1;
      }
      nextToken(a1, (uint64_t)Token);
      if (*(void *)nextToken(a1, v13) != 6)
      {
        loggableToken((uint64_t)a1);
        if (v67 >= 0) {
          unint64_t v38 = __p;
        }
        else {
          unint64_t v38 = (void **)__p[0];
        }
        tknPrintf("Error: %sExpected '(' after 'if'\n", v37, v38);
        if (v67 < 0) {
          operator delete(__p[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v64, "");
        TException::TException(__p, (long long *)v64);
        __p[0] = &unk_1F0A33FD8;
        if (v68 >= 0) {
          uint64_t v39 = (const char *)&__p[1];
        }
        else {
          uint64_t v39 = (const char *)__p[1];
        }
        conditionalAssert(v39, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 566);
        TException::~TException((std::exception *)__p);
        if (v65 < 0) {
          operator delete(v64[0]);
        }
        int v40 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        TException::TException(v40, (long long *)__p);
        *int v40 = &unk_1F0A33FD8;
      }
      compileExpression(a1, a2, a3, a4);
      if (*(void *)nextToken(a1, v14) != 7)
      {
        loggableToken((uint64_t)a1);
        if (v67 >= 0) {
          char v50 = __p;
        }
        else {
          char v50 = (void **)__p[0];
        }
        tknPrintf("Error: %s() mismatch\n", v49, v50);
        if (v67 < 0) {
          operator delete(__p[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v64, "");
        TException::TException(__p, (long long *)v64);
        __p[0] = &unk_1F0A33FD8;
        if (v68 >= 0) {
          uint64_t v51 = (const char *)&__p[1];
        }
        else {
          uint64_t v51 = (const char *)__p[1];
        }
        conditionalAssert(v51, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 577);
        TException::~TException((std::exception *)__p);
        if (v65 < 0) {
          operator delete(v64[0]);
        }
        uint64_t v52 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        TException::TException(v52, (long long *)__p);
        *uint64_t v52 = &unk_1F0A33FD8;
      }
      LODWORD(__p[0]) = 9;
      TBuffer<wchar_t>::insert((uint64_t)a2, a2[2], (int *)__p, 1uLL);
      unint64_t v15 = a2[2];
      LODWORD(__p[0]) = 0;
      TBuffer<wchar_t>::insert((uint64_t)a2, v15, (int *)__p, 1uLL);
      uint64_t v17 = (void *)nextToken(a1, v16);
      uint64_t v18 = *((void *)a1 + 3);
      if (v18) {
        *((void *)a1 + 3) = v18 - 1;
      }
      if (*v17 == 14) {
        compileCode(a1, a2, a3, a4);
      }
      else {
        compileInstruction(a1, a2, a3, a4);
      }
      if (*(void *)nextToken(a1, v19) == 19)
      {
        LODWORD(__p[0]) = 8;
        TBuffer<wchar_t>::insert((uint64_t)a2, a2[2], (int *)__p, 1uLL);
        unint64_t v28 = a2[2];
        LODWORD(__p[0]) = 0;
        TBuffer<wchar_t>::insert((uint64_t)a2, v28, (int *)__p, 1uLL);
        *(_DWORD *)(*a2 + 4 * v15) = *((_DWORD *)a2 + 4) - v15 + 1;
        uint64_t v30 = (void *)nextToken(a1, v29);
        uint64_t v31 = *((void *)a1 + 3);
        if (v31) {
          *((void *)a1 + 3) = v31 - 1;
        }
        if (*v30 == 14) {
          compileCode(a1, a2, a3, a4);
        }
        else {
          compileInstruction(a1, a2, a3, a4);
        }
        unint64_t v27 = a2[2];
        *(_DWORD *)(*a2 + 4 * v28) = v27 - v28 + 1;
      }
      else
      {
        unint64_t v27 = a2[2];
        *(_DWORD *)(*a2 + 4 * v15) = v27 - v15 + 1;
        uint64_t v32 = *((void *)a1 + 3);
        if (v32) {
          *((void *)a1 + 3) = v32 - 1;
        }
      }
      LODWORD(__p[0]) = 7;
      return TBuffer<wchar_t>::insert((uint64_t)a2, v27, (int *)__p, 1uLL);
    }
    if (*(void *)nextToken(a1, (uint64_t)Token) != 10)
    {
      loggableToken((uint64_t)a1);
      if (v67 >= 0) {
        uint64_t v46 = __p;
      }
      else {
        uint64_t v46 = (void **)__p[0];
      }
      tknPrintf("Error: %sMissing ';'\n", v45, v46);
      if (v67 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v64, "");
      TException::TException(__p, (long long *)v64);
      __p[0] = &unk_1F0A33FD8;
      if (v68 >= 0) {
        unint64_t v47 = (const char *)&__p[1];
      }
      else {
        unint64_t v47 = (const char *)__p[1];
      }
      conditionalAssert(v47, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 694);
      TException::~TException((std::exception *)__p);
      if (v65 < 0) {
        operator delete(v64[0]);
      }
      uint64_t v48 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      TException::TException(v48, (long long *)__p);
      void *v48 = &unk_1F0A33FD8;
    }
    LODWORD(__p[0]) = 11;
LABEL_29:
    unint64_t v27 = a2[2];
    return TBuffer<wchar_t>::insert((uint64_t)a2, v27, (int *)__p, 1uLL);
  }
  if (v9 == 1)
  {
    uint64_t v20 = *((void *)a1 + 3);
    if (v20) {
      *((void *)a1 + 3) = v20 - 1;
    }
    uint64_t v21 = nextToken(a1, (uint64_t)Token);
    __p[0] = *(void **)(v21 + 8);
    if (a3 + 8 != std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::find<wchar_t const*>(a3, (const __int32 **)__p))
    {
      loggableToken((uint64_t)a1);
      if (v67 >= 0) {
        int v42 = __p;
      }
      else {
        int v42 = (void **)__p[0];
      }
      tknPrintf("Error: %sIllegal array assignment.\n", v41, v42);
      if (v67 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v64, "");
      TException::TException(__p, (long long *)v64);
      __p[0] = &unk_1F0A33FD8;
      if (v68 >= 0) {
        size_t v43 = (const char *)&__p[1];
      }
      else {
        size_t v43 = (const char *)__p[1];
      }
      conditionalAssert(v43, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 646);
      TException::~TException((std::exception *)__p);
      if (v65 < 0) {
        operator delete(v64[0]);
      }
      uint64_t v44 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      TException::TException(v44, (long long *)__p);
      void *v44 = &unk_1F0A33FD8;
    }
    if (*(void *)nextToken(a1, v22) != 11)
    {
      loggableToken((uint64_t)a1);
      int v53 = v67;
      uint64_t v54 = (void **)__p[0];
      loggableUnicode(*(unsigned int **)(v21 + 8), v64);
      if (v53 >= 0) {
        char v56 = __p;
      }
      else {
        char v56 = v54;
      }
      if (v65 >= 0) {
        BOOL v57 = v64;
      }
      else {
        BOOL v57 = (void **)v64[0];
      }
      tknPrintf("Error: %sExpected '=' after %s\n", v55, v56, v57);
      if (v65 < 0) {
        operator delete(v64[0]);
      }
      if (v67 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v64, "");
      TException::TException(__p, (long long *)v64);
      __p[0] = &unk_1F0A33FD8;
      if (v68 >= 0) {
        uint64_t v58 = (const char *)&__p[1];
      }
      else {
        uint64_t v58 = (const char *)__p[1];
      }
      conditionalAssert(v58, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 654);
      TException::~TException((std::exception *)__p);
      if (v65 < 0) {
        operator delete(v64[0]);
      }
      unint64_t v59 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      TException::TException(v59, (long long *)__p);
      *unint64_t v59 = &unk_1F0A33FD8;
    }
    compileExpression(a1, a2, a3, a4);
    if (*(void *)nextToken(a1, v23) != 10)
    {
      loggableToken((uint64_t)a1);
      if (v67 >= 0) {
        uint64_t v61 = __p;
      }
      else {
        uint64_t v61 = (void **)__p[0];
      }
      tknPrintf("Error: %sMissing ';'\n", v60, v61);
      if (v67 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v64, "");
      TException::TException(__p, (long long *)v64);
      __p[0] = &unk_1F0A33FD8;
      if (v68 >= 0) {
        unint64_t v62 = (const char *)&__p[1];
      }
      else {
        unint64_t v62 = (const char *)__p[1];
      }
      conditionalAssert(v62, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 665);
      TException::~TException((std::exception *)__p);
      if (v65 < 0) {
        operator delete(v64[0]);
      }
      uint64_t v63 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      TException::TException(v63, (long long *)__p);
      *uint64_t v63 = &unk_1F0A33FD8;
    }
    LODWORD(__p[0]) = 5;
    TBuffer<wchar_t>::insert((uint64_t)a2, a2[2], (int *)__p, 1uLL);
    uint64_t v24 = 0;
    uint64_t v25 = *(int **)(v21 + 8);
    while (v25[v24++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)a2, a2[2], v25, v24 - 1);
    LODWORD(__p[0]) = 0;
    goto LABEL_29;
  }
  if (v9 != 14) {
    goto LABEL_42;
  }
  uint64_t v10 = *((void *)a1 + 3);
  if (v10) {
    *((void *)a1 + 3) = v10 - 1;
  }
  return compileCode(a1, a2, a3, a4);
}

void sub_1B244A738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

uint64_t compileExpression(TLexer *a1, void *Token, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = Token;
  uint64_t v7 = 0;
  uint64_t v152 = *MEMORY[0x1E4F143B8];
  do
  {
    uint64_t v8 = &v151[v7];
    *(_DWORD *)uint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    v7 += 16;
  }
  while (v7 != 2048);
  char v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  uint64_t v141 = a3 + 8;
  while (2)
  {
    char v144 = v9;
    while (1)
    {
      uint64_t result = nextToken(a1, (uint64_t)Token);
      uint64_t v14 = (void *)result;
      uint64_t v15 = *(void *)result;
      if (*(void *)result != 5) {
        break;
      }
      if ((v10 & 1) == 0)
      {
        loggableToken((uint64_t)a1);
        if (v149 >= 0) {
          uint64_t v71 = v148;
        }
        else {
          uint64_t v71 = v148[0].__vftable;
        }
        tknPrintf("Error: %sExpected an operand\n", v70, v71);
        if (v149 < 0) {
          operator delete(v148[0].__vftable);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        TException::TException(v148, (long long *)__p);
        v148[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
        if (v150 >= 0) {
          long long v72 = (std::exception_vtbl *)&v148[1];
        }
        else {
          long long v72 = v148[1].__vftable;
        }
        conditionalAssert((const char *)v72, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 363);
        TException::~TException(v148);
        if (v147 < 0) {
          operator delete(__p[0]);
        }
        exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v148, "");
        TException::TException(exception, (long long *)v148);
        *exceptiouint64_t n = &unk_1F0A33FD8;
      }
      int OperatorId = getOperatorId(*(const __int32 **)(result + 8));
      uint64_t v17 = &v151[16 * v11];
      if (v11 >= 1)
      {
        while (1)
        {
          int v18 = *((_DWORD *)v17 - 4);
          if (v18 > OperatorId) {
            break;
          }
          if ((v18 & 0xFFFFFFFE) == 0x14)
          {
            *(_DWORD *)(*v5 + 4 * *((void *)v17 - 1) + 4) = *((_DWORD *)v5 + 4) - *((void *)v17 - 1);
          }
          else
          {
            LODWORD(v148[0].__vftable) = 3;
            TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
            LODWORD(v148[0].__vftable) = *((_DWORD *)v17 - 4);
            TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
          }
          v17 -= 16;
          if (v11-- <= 1)
          {
            uint64_t v11 = 0;
            uint64_t v17 = v151;
            break;
          }
        }
      }
      *(_DWORD *)uint64_t v17 = OperatorId;
      Tokeuint64_t n = (void *)v5[2];
      *(void *)&v151[16 * v11 + 8] = Token;
      if (OperatorId == 20)
      {
        LODWORD(v148[0].__vftable) = 9;
        TBuffer<wchar_t>::insert((uint64_t)v5, (unint64_t)Token, (int *)v148, 1uLL);
        LODWORD(v148[0].__vftable) = 0;
        TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
        LODWORD(v148[0].__vftable) = 7;
        TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
      }
      else if (OperatorId == 21)
      {
        LODWORD(v148[0].__vftable) = 10;
        TBuffer<wchar_t>::insert((uint64_t)v5, (unint64_t)Token, (int *)v148, 1uLL);
        LODWORD(v148[0].__vftable) = 0;
        TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
        LODWORD(v148[0].__vftable) = 7;
        TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
      }
      if (v11 >= 127)
      {
        loggableToken((uint64_t)a1);
        if (v149 >= 0) {
          unint64_t v75 = v148;
        }
        else {
          unint64_t v75 = v148[0].__vftable;
        }
        tknPrintf("Error: %sExpression contains too many operators\n", v74, v75);
        if (v149 < 0) {
          operator delete(v148[0].__vftable);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        TException::TException(v148, (long long *)__p);
        v148[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
        if (v150 >= 0) {
          uint64_t v76 = (std::exception_vtbl *)&v148[1];
        }
        else {
          uint64_t v76 = v148[1].__vftable;
        }
        conditionalAssert((const char *)v76, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 411);
        TException::~TException(v148);
        if (v147 < 0) {
          operator delete(__p[0]);
        }
        long long v77 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v148, "");
        TException::TException(v77, (long long *)v148);
        *long long v77 = &unk_1F0A33FD8;
      }
      char v10 = 0;
      ++v11;
    }
    switch(v15)
    {
      case 1:
        goto LABEL_30;
      case 2:
      case 4:
        if (v10)
        {
          loggableToken((uint64_t)a1);
          if (v149 >= 0) {
            long long v94 = v148;
          }
          else {
            long long v94 = v148[0].__vftable;
          }
          tknPrintf("Error: %sExpected an operator\n", v93, v94);
          if (v149 < 0) {
            operator delete(v148[0].__vftable);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          TException::TException(v148, (long long *)__p);
          v148[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
          if (v150 >= 0) {
            long long v95 = (std::exception_vtbl *)&v148[1];
          }
          else {
            long long v95 = v148[1].__vftable;
          }
          conditionalAssert((const char *)v95, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 350);
          TException::~TException(v148);
          if (v147 < 0) {
            operator delete(__p[0]);
          }
          long long v96 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v148, "");
          TException::TException(v96, (long long *)v148);
          *long long v96 = &unk_1F0A33FD8;
        }
        LODWORD(v148[0].__vftable) = 2;
        TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
        uint64_t v20 = 0;
        uint64_t v21 = (int *)v14[1];
        unint64_t v22 = v5[2];
        while (v21[v20++])
          ;
        goto LABEL_25;
      case 3:
      case 5:
      case 7:
      case 8:
        goto LABEL_98;
      case 6:
        if (v10)
        {
          loggableToken((uint64_t)a1);
          if (v149 >= 0) {
            unsigned int v118 = v148;
          }
          else {
            unsigned int v118 = v148[0].__vftable;
          }
          tknPrintf("Error: %sExpected an operator\n", v117, v118);
          if (v149 < 0) {
            operator delete(v148[0].__vftable);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          TException::TException(v148, (long long *)__p);
          v148[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
          if (v150 >= 0) {
            size_t v119 = (std::exception_vtbl *)&v148[1];
          }
          else {
            size_t v119 = v148[1].__vftable;
          }
          conditionalAssert((const char *)v119, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 421);
          TException::~TException(v148);
          if (v147 < 0) {
            operator delete(__p[0]);
          }
          BOOL v120 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v148, "");
          TException::TException(v120, (long long *)v148);
          *BOOL v120 = &unk_1F0A33FD8;
        }
        compileExpression(a1, v5, a3, a4);
        Tokeuint64_t n = (void *)nextToken(a1, v28);
        if (*Token != 7)
        {
          loggableToken((uint64_t)a1);
          if (v149 >= 0) {
            long long v114 = v148;
          }
          else {
            long long v114 = v148[0].__vftable;
          }
          tknPrintf("Error: %s() mismatch\n", v113, v114);
          if (v149 < 0) {
            operator delete(v148[0].__vftable);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          TException::TException(v148, (long long *)__p);
          v148[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
          if (v150 >= 0) {
            unsigned int v115 = (std::exception_vtbl *)&v148[1];
          }
          else {
            unsigned int v115 = v148[1].__vftable;
          }
          conditionalAssert((const char *)v115, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 430);
          TException::~TException(v148);
          if (v147 < 0) {
            operator delete(__p[0]);
          }
          unsigned int v116 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v148, "");
          TException::TException(v116, (long long *)v148);
          void *v116 = &unk_1F0A33FD8;
        }
        goto LABEL_96;
      case 9:
        if (v10)
        {
          loggableToken((uint64_t)a1);
          if (v149 >= 0) {
            size_t v110 = v148;
          }
          else {
            size_t v110 = v148[0].__vftable;
          }
          tknPrintf("Error: %sExpected an operator\n", v109, v110);
          if (v149 < 0) {
            operator delete(v148[0].__vftable);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          TException::TException(v148, (long long *)__p);
          v148[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
          if (v150 >= 0) {
            size_t v111 = (std::exception_vtbl *)&v148[1];
          }
          else {
            size_t v111 = v148[1].__vftable;
          }
          conditionalAssert((const char *)v111, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 440);
          TException::~TException(v148);
          if (v147 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v112 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v148, "");
          TException::TException(v112, (long long *)v148);
          *uint64_t v112 = &unk_1F0A33FD8;
        }
        uint64_t v142 = nextToken(a1, v13);
        if (*(void *)v142 != 1)
        {
          loggableToken((uint64_t)a1);
          if (v149 >= 0) {
            long long v106 = v148;
          }
          else {
            long long v106 = v148[0].__vftable;
          }
          tknPrintf("Error: %sExpected a function name after '$'\n", v105, v106);
          if (v149 < 0) {
            operator delete(v148[0].__vftable);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          TException::TException(v148, (long long *)__p);
          v148[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
          if (v150 >= 0) {
            long long v107 = (std::exception_vtbl *)&v148[1];
          }
          else {
            long long v107 = v148[1].__vftable;
          }
          conditionalAssert((const char *)v107, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 447);
          TException::~TException(v148);
          if (v147 < 0) {
            operator delete(__p[0]);
          }
          long long v108 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v148, "");
          TException::TException(v108, (long long *)v148);
          *long long v108 = &unk_1F0A33FD8;
        }
        uint64_t v145 = 0;
        uint64_t v30 = *a4;
        uint64_t v29 = a4[1];
        if (v29 == *a4) {
          goto LABEL_108;
        }
        uint64_t v31 = 0;
        uint64_t v32 = *(const __int32 **)(v142 + 8);
        while (2)
        {
          uint64_t v33 = *(void *)(v30 + 8 * v31);
          size_t v34 = wcslen(v32);
          size_t v36 = v34;
          if (*(char *)(v33 + 23) < 0)
          {
            if (v34 != *(void *)(v33 + 8)) {
              goto LABEL_55;
            }
            if (v34 == -1) {
LABEL_146:
            }
              std::string::__throw_out_of_range[abi:ne180100]();
            uint64_t v37 = *(const __int32 **)v33;
            if (!v36)
            {
LABEL_58:
              uint64_t v145 = *(void *)(v30 + 8 * v31);
              goto LABEL_60;
            }
          }
          else
          {
            if (v34 != *(unsigned __int8 *)(v33 + 23)) {
              goto LABEL_55;
            }
            uint64_t v37 = *(const __int32 **)(v30 + 8 * v31);
            if (v36 == -1) {
              goto LABEL_146;
            }
            if (!v36) {
              goto LABEL_58;
            }
          }
          int v38 = wmemcmp(v37, v32, v36);
          uint64_t v30 = *a4;
          if (v38)
          {
            uint64_t v29 = a4[1];
LABEL_55:
            if (++v31 >= (unint64_t)((v29 - v30) >> 3))
            {
LABEL_108:
              uint64_t v145 = 0;
LABEL_109:
              loggableToken((uint64_t)a1);
              int v63 = v149;
              uint64_t v64 = v148[0].__vftable;
              loggableUnicode(*(unsigned int **)(v142 + 8), __p);
              uint64_t v66 = v148;
              if (v63 < 0) {
                uint64_t v66 = (std::exception *)v64;
              }
              if (v147 >= 0) {
                char v67 = __p;
              }
              else {
                char v67 = (void **)__p[0];
              }
              tknPrintf("Error: %s$%s : Invalid function name\n", v65, v66, v67);
              if (v147 < 0) {
                operator delete(__p[0]);
              }
              if (v149 < 0) {
                operator delete(v148[0].__vftable);
              }
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              TException::TException(v148, (long long *)__p);
              v148[0].__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
              if (v150 >= 0) {
                char v68 = (std::exception_vtbl *)&v148[1];
              }
              else {
                char v68 = v148[1].__vftable;
              }
              conditionalAssert((const char *)v68, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 454);
              TException::~TException(v148);
              if (v147 < 0) {
                operator delete(__p[0]);
              }
              uint64_t v69 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(v148, "");
              TException::TException(v69, (long long *)v148);
              *uint64_t v69 = &unk_1F0A340F0;
            }
            continue;
          }
          break;
        }
        uint64_t v145 = *(void *)(v30 + 8 * v31);
        if (!v145) {
          goto LABEL_109;
        }
LABEL_60:
        if (*(void *)nextToken(a1, v35) != 6)
        {
          uint64_t v46 = *((void *)a1 + 3);
          if (v46)
          {
            unint64_t v45 = 0;
            *((void *)a1 + 3) = v46 - 1;
            goto LABEL_75;
          }
LABEL_74:
          unint64_t v45 = 0;
          goto LABEL_75;
        }
        uint64_t v41 = *(void *)nextToken(a1, v40);
        if (v41 == 7) {
          goto LABEL_74;
        }
        uint64_t v42 = 0;
        do
        {
          if (v42)
          {
            if (v41 != 8)
            {
              loggableToken((uint64_t)a1);
              if (v149 >= 0) {
                unint64_t v79 = v148;
              }
              else {
                unint64_t v79 = v148[0].__vftable;
              }
              tknPrintf("Error: %sMissing ',' between function parameters\n", v78, v79);
              if (v149 < 0) {
                operator delete(v148[0].__vftable);
              }
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              TException::TException(v148, (long long *)__p);
              v148[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
              if (v150 >= 0) {
                uint64_t v80 = (std::exception_vtbl *)&v148[1];
              }
              else {
                uint64_t v80 = v148[1].__vftable;
              }
              conditionalAssert((const char *)v80, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 480);
              TException::~TException(v148);
              if (v147 < 0) {
                operator delete(__p[0]);
              }
              std::string v81 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(v148, "");
              TException::TException(v81, (long long *)v148);
              *std::string v81 = &unk_1F0A33FD8;
            }
          }
          else
          {
            uint64_t v43 = *((void *)a1 + 3);
            if (v43) {
              *((void *)a1 + 3) = v43 - 1;
            }
          }
          compileExpression(a1, v5, a3, a4);
          uint64_t v41 = *(void *)nextToken(a1, v44);
          --v42;
        }
        while (v41 != 7);
        unint64_t v45 = -v42;
LABEL_75:
        if (v45 < *(void *)(v145 + 32) || v45 > *(void *)(v145 + 40))
        {
          loggableToken((uint64_t)a1);
          int v86 = v149;
          long long v87 = v148[0].__vftable;
          loggableUnicode(*(unsigned int **)(v142 + 8), __p);
          long long v89 = v148;
          if (v86 < 0) {
            long long v89 = (std::exception *)v87;
          }
          if (v147 >= 0) {
            long long v90 = __p;
          }
          else {
            long long v90 = (void **)__p[0];
          }
          tknPrintf("Error: %s$%s : Function takes between %llu and %llu parameters\n", v88, v89, v90, *(void *)(v145 + 32), *(void *)(v145 + 40));
          if (v147 < 0) {
            operator delete(__p[0]);
          }
          if (v149 < 0) {
            operator delete(v148[0].__vftable);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          TException::TException(v148, (long long *)__p);
          v148[0].__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
          if (v150 >= 0) {
            long long v91 = (std::exception_vtbl *)&v148[1];
          }
          else {
            long long v91 = v148[1].__vftable;
          }
          conditionalAssert((const char *)v91, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 493);
          TException::~TException(v148);
          if (v147 < 0) {
            operator delete(__p[0]);
          }
          long long v92 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v148, "");
          TException::TException(v92, (long long *)v148);
          *long long v92 = &unk_1F0A340F0;
        }
        LODWORD(v148[0].__vftable) = 4;
        TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
        TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)&v145, 2uLL);
        LODWORD(v148[0].__vftable) = v45;
        TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
        goto LABEL_96;
      default:
        if (v15 == 24)
        {
LABEL_30:
          if (v10)
          {
            loggableToken((uint64_t)a1);
            if (v149 >= 0) {
              long long v98 = v148;
            }
            else {
              long long v98 = v148[0].__vftable;
            }
            tknPrintf("Error: %sExpected a binary operator\n", v97, v98);
            if (v149 < 0) {
              operator delete(v148[0].__vftable);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            TException::TException(v148, (long long *)__p);
            v148[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
            if (v150 >= 0) {
              long long v99 = (std::exception_vtbl *)&v148[1];
            }
            else {
              long long v99 = v148[1].__vftable;
            }
            conditionalAssert((const char *)v99, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 262);
            TException::~TException(v148);
            if (v147 < 0) {
              operator delete(__p[0]);
            }
            int v100 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v148, "");
            TException::TException(v100, (long long *)v148);
            *int v100 = &unk_1F0A33FD8;
          }
          uint64_t v25 = (void *)nextToken(a1, v13);
          if (*v25 == 3)
          {
            LODWORD(v148[0].__vftable) = 2;
            TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
            LODWORD(v148[0].__vftable) = 48;
            TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
            LODWORD(v148[0].__vftable) = 0;
            TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
            int v27 = 0;
          }
          else
          {
            if (*v25 != 15) {
              goto LABEL_90;
            }
            if (*v14 == 1)
            {
              v148[0] = (std::exception)v14[1];
              if (v141 == std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::find<wchar_t const*>(a3, (const __int32 **)v148))
              {
                loggableToken((uint64_t)a1);
                if (v149 >= 0) {
                  unsigned int v130 = v148;
                }
                else {
                  unsigned int v130 = v148[0].__vftable;
                }
                tknPrintf("Error: %sIllegal use of '[]' on an attribute.\n", v129, v130);
                if (v149 < 0) {
                  operator delete(v148[0].__vftable);
                }
                std::string::basic_string[abi:ne180100]<0>(__p, "");
                TException::TException(v148, (long long *)__p);
                v148[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
                if (v150 >= 0) {
                  unsigned int v131 = (std::exception_vtbl *)&v148[1];
                }
                else {
                  unsigned int v131 = v148[1].__vftable;
                }
                conditionalAssert((const char *)v131, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 273);
                TException::~TException(v148);
                if (v147 < 0) {
                  operator delete(__p[0]);
                }
                unsigned int v132 = __cxa_allocate_exception(0x20uLL);
                std::string::basic_string[abi:ne180100]<0>(v148, "");
                TException::TException(v132, (long long *)v148);
                *unsigned int v132 = &unk_1F0A33FD8;
              }
            }
            uint64_t v26 = nextToken(a1, v24);
            if (*(void *)v26 == 5 && getOperatorId(*(const __int32 **)(v26 + 8)) == 7)
            {
              int v27 = 1;
            }
            else
            {
              uint64_t v47 = *((void *)a1 + 3);
              int v27 = 0;
              if (v47) {
                *((void *)a1 + 3) = v47 - 1;
              }
            }
            compileExpression(a1, v5, a3, a4);
            uint64_t v49 = (void *)nextToken(a1, v48);
            if (*v49 != 16)
            {
              loggableToken((uint64_t)a1);
              if (v149 >= 0) {
                int v126 = v148;
              }
              else {
                int v126 = v148[0].__vftable;
              }
              tknPrintf("Error: %s[] mismatch\n", v125, v126);
              if (v149 < 0) {
                operator delete(v148[0].__vftable);
              }
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              TException::TException(v148, (long long *)__p);
              v148[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
              if (v150 >= 0) {
                size_t v127 = (std::exception_vtbl *)&v148[1];
              }
              else {
                size_t v127 = v148[1].__vftable;
              }
              conditionalAssert((const char *)v127, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 287);
              TException::~TException(v148);
              if (v147 < 0) {
                operator delete(__p[0]);
              }
              uint64_t v128 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(v148, "");
              TException::TException(v128, (long long *)v148);
              *uint64_t v128 = &unk_1F0A33FD8;
            }
            uint64_t v25 = (void *)nextToken(a1, (uint64_t)v49);
          }
          if (*v25 != 3)
          {
LABEL_90:
            if (*v14 == 24
              || (v148[0] = (std::exception)v14[1],
                  v141 != std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::find<wchar_t const*>(a3, (const __int32 **)v148)))
            {
              loggableToken((uint64_t)a1);
              if (v149 >= 0) {
                std::string v83 = v148;
              }
              else {
                std::string v83 = v148[0].__vftable;
              }
              tknPrintf("Error: %sExpected '.' after reference to array.\n", v82, v83);
              if (v149 < 0) {
                operator delete(v148[0].__vftable);
              }
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              TException::TException(v148, (long long *)__p);
              v148[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
              if (v150 >= 0) {
                std::string v84 = (std::exception_vtbl *)&v148[1];
              }
              else {
                std::string v84 = v148[1].__vftable;
              }
              conditionalAssert((const char *)v84, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 305);
              TException::~TException(v148);
              if (v147 < 0) {
                operator delete(__p[0]);
              }
              std::string v85 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(v148, "");
              TException::TException(v85, (long long *)v148);
              *std::string v85 = &unk_1F0A33FD8;
            }
            LODWORD(v148[0].__vftable) = 6;
            TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
            uint64_t v55 = 0;
            char v56 = (int *)v14[1];
            while (v56[v55++])
              ;
            TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], v56, v55 - 1);
            LODWORD(v148[0].__vftable) = 0;
            TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
            uint64_t v58 = *((void *)a1 + 3);
            if (v58) {
              *((void *)a1 + 3) = v58 - 1;
            }
            goto LABEL_96;
          }
          if (*v14 == 1)
          {
            v148[0] = (std::exception)v14[1];
            if (v141 == std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::find<wchar_t const*>(a3, (const __int32 **)v148))
            {
              loggableToken((uint64_t)a1);
              if (v149 >= 0) {
                id v134 = v148;
              }
              else {
                id v134 = v148[0].__vftable;
              }
              tknPrintf("Error: %sIllegal use of '.' on an attribute.\n", v133, v134);
              if (v149 < 0) {
                operator delete(v148[0].__vftable);
              }
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              TException::TException(v148, (long long *)__p);
              v148[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
              if (v150 >= 0) {
                unsigned int v135 = (std::exception_vtbl *)&v148[1];
              }
              else {
                unsigned int v135 = v148[1].__vftable;
              }
              conditionalAssert((const char *)v135, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 321);
              TException::~TException(v148);
              if (v147 < 0) {
                operator delete(__p[0]);
              }
              int v136 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(v148, "");
              TException::TException(v136, (long long *)v148);
              *int v136 = &unk_1F0A33FD8;
            }
          }
          char v50 = (void *)nextToken(a1, v39);
          if ((unint64_t)(*v50 - 21) >= 3 && *v50 != 1)
          {
            loggableToken((uint64_t)a1);
            if (v149 >= 0) {
              unsigned int v138 = v148;
            }
            else {
              unsigned int v138 = v148[0].__vftable;
            }
            tknPrintf("Error: %sExpected an identifier\n", v137, v138);
            if (v149 < 0) {
              operator delete(v148[0].__vftable);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            TException::TException(v148, (long long *)__p);
            v148[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
            if (v150 >= 0) {
              uint64_t v139 = (std::exception_vtbl *)&v148[1];
            }
            else {
              uint64_t v139 = v148[1].__vftable;
            }
            conditionalAssert((const char *)v139, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 332);
            TException::~TException(v148);
            if (v147 < 0) {
              operator delete(__p[0]);
            }
            unsigned int v140 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v148, "");
            TException::TException(v140, (long long *)v148);
            *unsigned int v140 = &unk_1F0A33FD8;
          }
          LODWORD(v148[0].__vftable) = 1;
          TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
          LODWORD(v148[0].__vftable) = v27;
          TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
          uint64_t v51 = 0;
          uint64_t v52 = (int *)v14[1];
          while (v52[v51++])
            ;
          TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], v52, v51 - 1);
          LODWORD(v148[0].__vftable) = 0;
          TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
          uint64_t v20 = 0;
          uint64_t v21 = (int *)v50[1];
          unint64_t v22 = v5[2];
          while (v21[v20++])
            ;
LABEL_25:
          TBuffer<wchar_t>::insert((uint64_t)v5, v22, v21, v20 - 1);
          LODWORD(v148[0].__vftable) = 0;
          TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
LABEL_96:
          char v9 = 0;
          char v10 = 1;
          if (v144)
          {
            LODWORD(v148[0].__vftable) = 12;
            TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
            LODWORD(v148[0].__vftable) = 1;
            TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
            char v9 = 0;
          }
          continue;
        }
        if (v15 == 26)
        {
          if (v10)
          {
            loggableToken((uint64_t)a1);
            if (v149 >= 0) {
              int v122 = v148;
            }
            else {
              int v122 = v148[0].__vftable;
            }
            tknPrintf("Error: %sExpected a binary operator\n", v121, v122);
            if (v149 < 0) {
              operator delete(v148[0].__vftable);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            TException::TException(v148, (long long *)__p);
            v148[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
            if (v150 >= 0) {
              unsigned int v123 = (std::exception_vtbl *)&v148[1];
            }
            else {
              unsigned int v123 = v148[1].__vftable;
            }
            conditionalAssert((const char *)v123, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 251);
            TException::~TException(v148);
            if (v147 < 0) {
              operator delete(__p[0]);
            }
            std::string v124 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v148, "");
            TException::TException(v124, (long long *)v148);
            *std::string v124 = &unk_1F0A33FD8;
          }
          wcscmp(*(const __int32 **)(result + 8), (const __int32 *)"!");
          char v10 = 0;
          char v9 = 1;
          continue;
        }
LABEL_98:
        uint64_t v59 = *((void *)a1 + 3);
        if (v59) {
          *((void *)a1 + 3) = v59 - 1;
        }
        if (v11 >= 1)
        {
          uint64_t v60 = &v151[16 * v11];
          uint64_t v61 = v60;
          do
          {
            int v62 = *((_DWORD *)v61 - 4);
            v61 -= 16;
            if ((v62 & 0xFFFFFFFE) == 0x14)
            {
              *(_DWORD *)(*v5 + 4 * *((void *)v60 - 1) + 4) = *((_DWORD *)v5 + 4) - *((void *)v60 - 1);
            }
            else
            {
              LODWORD(v148[0].__vftable) = 3;
              TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
              LODWORD(v148[0].__vftable) = *((_DWORD *)v60 - 4);
              uint64_t result = TBuffer<wchar_t>::insert((uint64_t)v5, v5[2], (int *)v148, 1uLL);
            }
            uint64_t v60 = v61;
          }
          while (v61 > v151);
        }
        if (v144 & 1 | ((v10 & 1) == 0))
        {
          loggableToken((uint64_t)a1);
          if (v149 >= 0) {
            long long v102 = v148;
          }
          else {
            long long v102 = v148[0].__vftable;
          }
          tknPrintf("Error: %sMissing operand\n", v101, v102);
          if (v149 < 0) {
            operator delete(v148[0].__vftable);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          TException::TException(v148, (long long *)__p);
          v148[0].__vftable = (std::exception_vtbl *)&unk_1F0A33FD8;
          if (v150 >= 0) {
            uint64_t v103 = (std::exception_vtbl *)&v148[1];
          }
          else {
            uint64_t v103 = v148[1].__vftable;
          }
          conditionalAssert((const char *)v103, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 535);
          TException::~TException(v148);
          if (v147 < 0) {
            operator delete(__p[0]);
          }
          unint64_t v104 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v148, "");
          TException::TException(v104, (long long *)v148);
          *unint64_t v104 = &unk_1F0A33FD8;
        }
        return result;
    }
  }
}

void sub_1B244C6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
  {
    operator delete(__p);
    if ((v30 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v29);
  goto LABEL_6;
}

uint64_t getOperatorId(const __int32 *a1)
{
  if (!wcscmp(a1, (const __int32 *)"=")) {
    return 10;
  }
  if (!wcscmp(a1, (const __int32 *)"!")) {
    return 11;
  }
  if (!wcscmp(a1, (const __int32 *)"<")) {
    return 9;
  }
  if (!wcscmp(a1, (const __int32 *)">")) {
    return 8;
  }
  if (!wcscmp(a1, (const __int32 *)">")) {
    return 13;
  }
  if (!wcscmp(a1, (const __int32 *)"<")) {
    return 12;
  }
  if (!wcscmp(a1, (const __int32 *)"|")) {
    return 21;
  }
  if (!wcscmp(a1, (const __int32 *)"&")) {
    return 20;
  }
  if (!wcscmp(a1, (const __int32 *)"+")) {
    return 6;
  }
  if (!wcscmp(a1, (const __int32 *)"-")) {
    return 7;
  }
  if (!wcscmp(a1, (const __int32 *)"*")) {
    return 3;
  }
  if (!wcscmp(a1, (const __int32 *)"/")) {
    return 4;
  }
  if (!wcscmp(a1, (const __int32 *)"%")) {
    return 5;
  }
  if (!wcscmp(a1, (const __int32 *)":")) {
    return 1;
  }
  if (!wcscmp(a1, (const __int32 *)"^")) {
    return 2;
  }
  if (!wcscmp(a1, (const __int32 *)"e")) {
    return 16;
  }
  if (!wcscmp(a1, (const __int32 *)"n")) {
    return 17;
  }
  if (!wcscmp(a1, (const __int32 *)"g")) {
    return 14;
  }
  if (!wcscmp(a1, (const __int32 *)"l")) {
    return 15;
  }
  if (!wcscmp(a1, (const __int32 *)"g")) {
    return 19;
  }
  if (!wcscmp(a1, (const __int32 *)"l")) {
    return 18;
  }
  return 10;
}

void TGrammar::forEachNonTerminal<TIntegrityChecker>(uint64_t a1, unsigned char *a2)
{
  unint64_t v2 = *(void **)(a1 + 40);
  unint64_t v3 = (void *)(a1 + 48);
  if (v2 != (void *)(a1 + 48))
  {
    do
    {
      TIntegrityChecker::operator()(a2, v2[5]);
      uint64_t v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          unint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          unint64_t v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          unint64_t v2 = v6;
        }
        while (!v7);
      }
      unint64_t v2 = v6;
    }
    while (v6 != v3);
  }
}

void TGrammar::forEachTerminal<TIntegrityChecker>(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = *(void *)(a1 + 144);
  if (*(void *)(a1 + 152) != v2)
  {
    unint64_t v5 = 0;
    do
    {
      TIntegrityChecker::operator()(a2, *(void *)(v2 + 8 * v5++));
      uint64_t v2 = *(void *)(a1 + 144);
    }
    while (v5 < (*(void *)(a1 + 152) - v2) >> 3);
  }
}

void std::vector<TGrammarCompiler::TArgument>::__append(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  BOOL v7 = *(void **)(v4 - 8);
  if (a2 <= (v6 - (unsigned char *)v7) >> 4)
  {
    if (a2)
    {
      uint64_t v14 = 16 * a2;
      uint64_t v15 = &v7[2 * a2];
      do
      {
        void *v7 = 0;
        v7 += 2;
        v14 -= 16;
      }
      while (v14);
      BOOL v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = (char *)v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v16 = &v13[16 * v10];
    uint64_t v17 = &v16[16 * a2];
    uint64_t v18 = 16 * a2;
    uint64_t v19 = v16;
    do
    {
      *(void *)uint64_t v19 = 0;
      v19 += 16;
      v18 -= 16;
    }
    while (v18);
    uint64_t v20 = &v13[16 * v12];
    unint64_t v22 = (char *)*a1;
    uint64_t v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v21 - 1);
        v16 -= 16;
        v21 -= 16;
      }
      while (v21 != v22);
      uint64_t v21 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v20;
    if (v21)
    {
      operator delete(v21);
    }
  }
}

uint64_t kaldi::ReconstructLattice(void *a1, kaldi::LatticeScoreCache *a2, uint64_t *a3, kaldi::TransitionModel *a4, int a5, void *a6, int a7, uint64_t a8, float a9, float a10)
{
  uint64_t v17 = (std::__shared_weak_count *)a3[1];
  uint64_t v90 = *a3;
  long long v91 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheDeterministicOnDemandFst(&v92, &v90, 0x20000uLL);
  if (v91) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v91);
  }
  long long v89 = 0u;
  memset(v88, 0, sizeof(v88));
  (*(void (**)(uint64_t))(*(void *)a8 + 224))(a8);
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a8 + 200))(a8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a8 + 176))(a8, v18);
  memset(v86, 0, sizeof(v86));
  int v87 = 1065353216;
  uint64_t v61 = a1;
  unsigned int v19 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  unsigned int v20 = (**v93)(v93);
  unsigned int v21 = (*(uint64_t (**)(uint64_t))(*(void *)a8 + 24))(a8);
  v84.n128_u64[0] = __PAIR64__(v20, v19);
  v84.n128_u64[1] = v21;
  char v85 = 0;
  __n128 v22 = std::deque<kaldi::Tuple>::push_back(v88, &v84);
  int v23 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)a8 + 24))(a8, v22);
  unsigned int v24 = (*(uint64_t (**)(void *))(*v61 + 24))(v61);
  v79.n128_u64[0] = __PAIR64__((**v93)(v93), v24);
  v79.n128_u8[8] = 0;
  v70[0] = &v79;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::StateMapKey,int>,std::__unordered_map_hasher<kaldi::StateMapKey,std::__hash_value_type<kaldi::StateMapKey,int>,kaldi::KeyHash,kaldi::KeyEquality,true>,std::__unordered_map_equal<kaldi::StateMapKey,std::__hash_value_type<kaldi::StateMapKey,int>,kaldi::KeyEquality,kaldi::KeyHash,true>,std::allocator<std::__hash_value_type<kaldi::StateMapKey,int>>>::__emplace_unique_key_args<kaldi::StateMapKey,std::piecewise_construct_t const&,std::tuple<kaldi::StateMapKey&&>,std::tuple<>>((uint64_t)v86, (int *)&v79, (uint64_t)&std::piecewise_construct, v70)+ 7) = v23;
  uint64_t v25 = *((void *)&v89 + 1);
  if (!*((void *)&v89 + 1))
  {
LABEL_60:
    uint64_t v54 = 1;
    goto LABEL_66;
  }
  float v26 = a9 + 0.0;
  int v58 = a7;
  while (1)
  {
    if (a7 < 1) {
      goto LABEL_10;
    }
    if ((*(int (**)(uint64_t))(*(void *)a8 + 160))(a8) > a7) {
      break;
    }
    uint64_t v25 = *((void *)&v89 + 1);
LABEL_10:
    int v27 = (int *)(*(void *)(*((void *)&v88[0] + 1) + 8 * ((unint64_t)v89 / 0xCC))
                + 20 * ((unint64_t)v89 % 0xCC));
    uint64_t v28 = *v27;
    int v29 = v27[3];
    unsigned int v63 = v27[2];
    unsigned int v64 = v27[1];
    char v30 = *((unsigned char *)v27 + 16);
    *((void *)&v89 + 1) = v25 - 1;
    *(void *)&long long v89 = v89 + 1;
    if ((unint64_t)v89 >= 0x198)
    {
      operator delete(**((void ***)&v88[0] + 1));
      *((void *)&v88[0] + 1) += 8;
      *(void *)&long long v89 = v89 - 204;
    }
    unint64_t v75 = &unk_1F0A3E980;
    unint64_t v78 = 0;
    fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck((uint64_t)v61);
    uint64_t v31 = v61[1];
    uint64_t v76 = *(void *)(*(void *)(v31 + 64) + 8 * v28);
    uint64_t v77 = v31 + 8;
    unint64_t v32 = v78;
    uint64_t v33 = *(void *)(v76 + 48);
    if (v78 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v76 + 56) - v33) >> 4))
    {
      int v60 = -(v30 & 1);
      while (1)
      {
        uint64_t v34 = v33 + 48 * v32;
        v70[0] = *(void **)v34;
        v70[1] = *(void **)(v34 + 8);
        long long v72 = 0;
        uint64_t v73 = 0;
        uint64_t v71 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v71, *(const void **)(v34 + 16), *(void *)(v34 + 24), (uint64_t)(*(void *)(v34 + 24) - *(void *)(v34 + 16)) >> 2);
        unsigned int v74 = *(_DWORD *)(v33 + 48 * v32 + 40);
        uint64_t v35 = v71;
        if (v72 == v71)
        {
          float v37 = 0.0;
        }
        else
        {
          unint64_t v36 = 0;
          float v37 = 0.0;
          do
          {
            int v38 = kaldi::TransitionModel::TransitionIdToTransitionState(a4, v35[v36]);
            int v39 = kaldi::TransitionModel::TransitionStateToForwardPdf(a4, v38);
            float v37 = v37 + kaldi::LatticeScoreCache::GetScore(a2, v29 + v36++, v39);
            uint64_t v35 = v71;
          }
          while (v36 < (v72 - (unsigned char *)v71) >> 2);
        }
        if (HIDWORD(v70[0])) {
          BOOL v40 = HIDWORD(v70[0]) == a5;
        }
        else {
          BOOL v40 = 1;
        }
        int v41 = v40;
        float v42 = v26;
        uint64_t v43 = v64;
        if (!v40)
        {
          v79.n128_u64[0] = SHIDWORD(v70[0]);
          uint64_t v44 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a6, v79.n128_u64);
          if (v44) {
            int v45 = *((_DWORD *)v44 + 6);
          }
          else {
            int v45 = 1;
          }
          int v46 = v45 + v60;
          if (v71 == v72) {
            float v47 = 0.0;
          }
          else {
            float v47 = (float)v46;
          }
          if ((fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetArc((uint64_t)&v92, v64, HIDWORD(v70[0]), (uint64_t)&v67) & 1) == 0)
          {
            if (kaldi::g_kaldi_verbose_level >= -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v79);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)"Could not find arc for input_state ", 35);
              uint64_t v55 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" olabel ", 8);
              char v56 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" in LM. Failed to reconstruct lattice (incompatible LM?).", 57);
              kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v79);
            }
            if (v71)
            {
              long long v72 = v71;
              operator delete(v71);
            }
            goto LABEL_65;
          }
          float v42 = (float)((float)(v47 * a10) + 0.0) + v68;
          uint64_t v43 = v69;
        }
        char v67 = (uint64_t *)__PAIR64__(v43, v74);
        LOBYTE(v68) = v41;
        uint64_t v48 = std::__hash_table<std::__hash_value_type<kaldi::StateMapKey,int>,std::__unordered_map_hasher<kaldi::StateMapKey,std::__hash_value_type<kaldi::StateMapKey,int>,kaldi::KeyHash,kaldi::KeyEquality,true>,std::__unordered_map_equal<kaldi::StateMapKey,std::__hash_value_type<kaldi::StateMapKey,int>,kaldi::KeyEquality,kaldi::KeyHash,true>,std::allocator<std::__hash_value_type<kaldi::StateMapKey,int>>>::find<kaldi::StateMapKey>(v86, &v67);
        if (v48)
        {
          uint64_t v49 = *((unsigned int *)v48 + 7);
        }
        else
        {
          uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)a8 + 200))(a8);
          v79.n128_u64[0] = (unint64_t)&v67;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::StateMapKey,int>,std::__unordered_map_hasher<kaldi::StateMapKey,std::__hash_value_type<kaldi::StateMapKey,int>,kaldi::KeyHash,kaldi::KeyEquality,true>,std::__unordered_map_equal<kaldi::StateMapKey,std::__hash_value_type<kaldi::StateMapKey,int>,kaldi::KeyEquality,kaldi::KeyHash,true>,std::allocator<std::__hash_value_type<kaldi::StateMapKey,int>>>::__emplace_unique_key_args<kaldi::StateMapKey,std::piecewise_construct_t const&,std::tuple<kaldi::StateMapKey&&>,std::tuple<>>((uint64_t)v86, (int *)&v67, (uint64_t)&std::piecewise_construct, &v79)+ 7) = v49;
          v79.n128_u64[0] = __PAIR64__(v43, v74);
          v79.n128_u32[2] = v49;
          v79.n128_u32[3] = v29 + ((unint64_t)(v72 - (unsigned char *)v71) >> 2);
          LOBYTE(v80) = v41;
          std::deque<kaldi::Tuple>::push_back(v88, &v79);
        }
        v79.n128_u32[0] = fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Final((uint64_t)&v92, v43);
        unsigned __int32 v97 = 2139095040;
        if (v79.n128_f32[0] != INFINITY) {
          break;
        }
LABEL_48:
        uint64_t v80 = 0;
        std::string v81 = 0;
        uint64_t v82 = 0;
        v79.n128_u64[0] = (unint64_t)v70[0];
        int v83 = v49;
        v79.n128_u64[1] = __PAIR64__(LODWORD(v37), LODWORD(v42));
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v80, (char *)v71, (uint64_t)v72, (v72 - (unsigned char *)v71) >> 2);
        (*(void (**)(uint64_t, void, __n128 *))(*(void *)a8 + 208))(a8, v63, &v79);
        if (v80)
        {
          std::string v81 = v80;
          operator delete(v80);
        }
        if (v71)
        {
          long long v72 = v71;
          operator delete(v71);
        }
        unint64_t v32 = v78 + 1;
        unint64_t v78 = v32;
        uint64_t v33 = *(void *)(v76 + 48);
        if (v32 >= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v76 + 56) - v33) >> 4)) {
          goto LABEL_59;
        }
      }
      (*(void (**)(__n128 *__return_ptr))(*v61 + 32))(&v79);
      float v96 = v79.n128_f32[1];
      unsigned __int32 v97 = v79.n128_u32[0];
      int v95 = 2139095040;
      float v94 = INFINITY;
      if (v79.n128_f32[0] != INFINITY)
      {
        BOOL v50 = 1;
        uint64_t v51 = (void *)v79.n128_u64[1];
        if (v79.n128_u64[1]) {
          goto LABEL_40;
        }
LABEL_41:
        if (v50)
        {
          float v52 = fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Final((uint64_t)&v92, v43);
          *(_OWORD *)uint64_t v65 = 0u;
          long long v66 = 0u;
          (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a8 + 184))(a8, v49, v65);
          if (v65[1])
          {
            *(void **)&long long v66 = v65[1];
            operator delete(v65[1]);
          }
          if (v41) {
            float v53 = -0.0;
          }
          else {
            float v53 = a10;
          }
          float v42 = v53 + (float)(v42 + v52);
        }
        goto LABEL_48;
      }
      uint64_t v51 = (void *)v79.n128_u64[1];
      if (v96 == v94)
      {
        BOOL v50 = v80 != (void *)v79.n128_u64[1];
        if (!v79.n128_u64[1]) {
          goto LABEL_41;
        }
      }
      else
      {
        BOOL v50 = 1;
        if (!v79.n128_u64[1]) {
          goto LABEL_41;
        }
      }
LABEL_40:
      uint64_t v80 = v51;
      operator delete(v51);
      goto LABEL_41;
    }
LABEL_59:
    uint64_t v25 = *((void *)&v89 + 1);
    a7 = v58;
    if (!*((void *)&v89 + 1)) {
      goto LABEL_60;
    }
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v79);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)"Number of output lattice states is getting out of hand, aborting conversion", 75);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v79);
  }
LABEL_65:
  uint64_t v54 = 0;
LABEL_66:
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v86);
  std::deque<kaldi::Tuple>::~deque[abi:ne180100](v88);
  fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheDeterministicOnDemandFst(&v92);
  return v54;
}

void sub_1B244D604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a32);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a69);
  std::deque<kaldi::Tuple>::~deque[abi:ne180100](&STACK[0x210]);
  fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheDeterministicOnDemandFst((void *)(v69 - 240));
  _Unwind_Resume(a1);
}

__n128 std::deque<kaldi::Tuple>::push_back(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 204 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<kaldi::Tuple>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  uint64_t v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xCC)) + 20 * (v7 % 0xCC));
  __n128 result = *a2;
  v8[1].n128_u32[0] = a2[1].n128_u32[0];
  *uint64_t v8 = result;
  ++a1[5];
  return result;
}

double quasar::ErrorBlamingDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  kaldi::TrainingGraphCompilerOptions::Register((uint64_t)this + 1140, (uint64_t)a2);
  quasar::QsrTextSymbolTable::Register(this[111], a2, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(v27, "am-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Acoustic model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 100), (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "tree-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Tree file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 97), (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "phone-syms-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Phone table file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 64), (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "base-dict-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Base lexicon file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 67), (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "unpronounced-word-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing newline-separated list of words with no pronunciation.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 106), (uint64_t)__p, 0, 20, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "optional-silence");
  std::string::basic_string[abi:ne180100]<0>(__p, "Optional silence phone");
  int v23 = (char *)(this + 94);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 94), (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "silence-prob");
  std::string::basic_string[abi:ne180100]<0>(__p, "Silence probability (0.0 to 1.0)");
  __n128 v22 = this + 63;
  quasar::SystemConfig::Register<float>((uint64_t)a2, v27, (uint64_t)(this + 63), (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoding beam");
  unsigned int v21 = (_DWORD *)this + 281;
  quasar::SystemConfig::Register<float>((uint64_t)a2, v27, (uint64_t)this + 1124, (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "retry-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Fall-back decoding beam");
  unsigned int v20 = (_DWORD *)this + 283;
  quasar::SystemConfig::Register<float>((uint64_t)a2, v27, (uint64_t)this + 1132, (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "max-total-extra-weight");
  std::string::basic_string[abi:ne180100]<0>(__p, "Max first pass weight for limiting total weight of all extra LMs in the first pass - all-app LM and possibly one more app specific LM");
  unsigned int v19 = this + 142;
  quasar::SystemConfig::Register<float>((uint64_t)a2, v27, (uint64_t)(this + 142), (uint64_t)__p, 0, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  kaldi::WordBoundaryInfoNewOpts::Register((uint64_t)(this + 144), (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(v27, "word-boundary-int-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Word boundary file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 103), (uint64_t)__p, 1, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "align-lattice-expand-limit");
  std::string::basic_string[abi:ne180100]<0>(__p, "Lattice expansion limit when doing word alignment(0 for none)");
  uint64_t v18 = this + 139;
  quasar::SystemConfig::Register<int>((uint64_t)a2, v27, (uint64_t)(this + 139), (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "reconstruct-lattice-expand-limit");
  std::string::basic_string[abi:ne180100]<0>(__p, "Lattice expansion limit when doing lattice reconstruction(0 for none)");
  quasar::SystemConfig::Register<int>((uint64_t)a2, v27, (uint64_t)this + 1116, (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "big-g-fst-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "list of BigGrammar FST filename, use comma to separate multiple ones");
  unsigned int v24 = (char *)(this + 70);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 70), (uint64_t)__p, 1, 14, 0, 143, 0);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "big-g-fst-file-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "list of BigGrammar FST filename, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)v24, (uint64_t)__p, 1, 144, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "big-g-fst-weight-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "the interpolation weights for the FST LMs, use comma to separate multiple ones");
  uint64_t v17 = (char *)(this + 76);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 76), (uint64_t)__p, 0, 144, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "big-g-nnet-file-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "list of BigGrammar NNLM filename, use comma to separate multiple ones");
  uint64_t v16 = (char *)(this + 73);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 73), (uint64_t)__p, 0, 144, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "big-g-nnet-weight-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "the interpolation weights for the NNLMs, use comma to separate multiple ones");
  uint64_t v15 = (char *)(this + 79);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 79), (uint64_t)__p, 0, 144, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "nnlm-nce-norm-factor-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "the normalization factor for NCE trained NNLMs, use comma to separate multiple ones");
  uint64_t v14 = (char *)(this + 82);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 82), (uint64_t)__p, 0, 144, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "rnnlm-max-context-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "maximal context for RNN style LM, no-op for other style of LMs");
  uint64_t v4 = this + 140;
  quasar::SystemConfig::Register<int>((uint64_t)a2, v27, (uint64_t)(this + 140), (uint64_t)__p, 0, 144, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "nnet-map-file-ext");
  std::string::basic_string[abi:ne180100]<0>(__p, "the file extension name of the corresponding NNLM word map file");
  uint64_t v5 = (char *)(this + 85);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 85), (uint64_t)__p, 0, 144, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Map FST/NNLM models into memory (requires aligned models)");
  uint64_t v6 = (char *)this + 508;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, v27, (uint64_t)this + 508, (uint64_t)__p, 0, 144, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "inv-g-fst-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Negative SmallG FST filename");
  unint64_t v7 = (char *)(this + 88);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 88), (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "raw-smallg-fst-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "SmallG FST (with no phone or word loops for nonterminals) filename");
  uint64_t v8 = (char *)(this + 91);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, v27, (uint64_t)(this + 91), (uint64_t)__p, 0, 107, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "extended-report");
  std::string::basic_string[abi:ne180100]<0>(__p, "Set to false if only the concise error-report should be generated.");
  unint64_t v9 = (char *)this + 497;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, v27, (uint64_t)this + 497, (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "lm-context-length");
  std::string::basic_string[abi:ne180100]<0>(__p, "Language model context length (e.g. 4-gram has length 3)");
  uint64_t v10 = (_DWORD *)this + 125;
  quasar::SystemConfig::Register<int>((uint64_t)a2, v27, (uint64_t)this + 500, (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "overlap-percentage");
  std::string::basic_string[abi:ne180100]<0>(__p, "Required overlap in percent of two regions in reference and hypothesis to be viewed as the same region.");
  uint64_t v11 = this + 141;
  quasar::SystemConfig::Register<float>((uint64_t)a2, v27, (uint64_t)(this + 141), (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "json-output-format");
  std::string::basic_string[abi:ne180100]<0>(__p, "True if error reports should be formatted as JSON file.");
  unint64_t v12 = this + 62;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, v27, (uint64_t)v12, (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  *unint64_t v12 = 0;
  *unint64_t v9 = 1;
  *unsigned int v21 = 1128792064;
  *unsigned int v20 = 0;
  MEMORY[0x1B3EA7B20](v23, "sil");
  _DWORD *v22 = 1056964608;
  *unsigned int v19 = 1065353216;
  MEMORY[0x1B3EA7B20](v24, "");
  MEMORY[0x1B3EA7B20](v17, "");
  MEMORY[0x1B3EA7B20](v16, "");
  MEMORY[0x1B3EA7B20](v15, "");
  MEMORY[0x1B3EA7B20](v14, "");
  MEMORY[0x1B3EA7B20](v5, "wordmap");
  unsigned char *v6 = 1;
  _DWORD *v4 = 7;
  MEMORY[0x1B3EA7B20](v7, "");
  MEMORY[0x1B3EA7B20](v8, "");
  *uint64_t v10 = 3;
  _DWORD *v11 = 1065353216;
  *(void *)&double result = 0xA00000000;
  *uint64_t v18 = 0xA00000000;
  return result;
}

void sub_1B244E50C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 81) < 0) {
    operator delete(*(void **)(v26 - 104));
  }
  _Unwind_Resume(exception_object);
}

void quasar::ErrorBlamingDecoder::finishInit(quasar::ErrorBlamingDecoder *this)
{
  v165[4] = *MEMORY[0x1E4F143B8];
  quasar::ModelLoader::readContextDependency(*((void *)this + 46), (unsigned __int8 *)this + 776, &__str);
  long long v2 = __str;
  long long __str = 0uLL;
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 147);
  *((_OWORD *)this + 73) = v2;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    if (*((void *)&__str + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__str + 1));
    }
  }
  if (*((char *)this + 823) < 0)
  {
    if (!*((void *)this + 101)) {
      goto LABEL_11;
    }
  }
  else if (!*((unsigned char *)this + 823))
  {
    goto LABEL_11;
  }
  quasar::ModelLoader::readTransitionModel(*((void *)this + 46), (unsigned __int8 *)this + 800, 0, &__str);
  long long v4 = __str;
  long long __str = 0uLL;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 149);
  *((_OWORD *)this + 74) = v4;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    if (*((void *)&__str + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__str + 1));
    }
  }
LABEL_11:
  quasar::ModelLoader::readSymbolTable(*((void *)this + 46), (uint64_t)this + 512, 4, 0, &__str);
  uint64_t v6 = (void *)((char *)this + 872);
  long long v7 = __str;
  long long __str = 0uLL;
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 110);
  *(_OWORD *)((char *)this + 872) = v7;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    if (*((void *)&__str + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__str + 1));
    }
  }
  quasar::QsrTextSymbolTable::init(*((const std::string **)this + 111), (quasar::ErrorBlamingDecoder *)((char *)this + 32), 0, *((unsigned __int8 *)this + 441), 1);
  uint64_t v9 = quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 111), "<?>");
  int v10 = v9;
  if (v9 != -1)
  {
    uint64_t v11 = *((int *)this + 288);
    if (v11 && v9 != v11 && quasar::gLogLevel >= 5)
    {
      long long v157 = 0u;
      long long v158 = 0u;
      long long v155 = 0u;
      long long v156 = 0u;
      long long v153 = 0u;
      long long v154 = 0u;
      long long v151 = 0u;
      long long v152 = 0u;
      long long v149 = 0u;
      long long v150 = 0u;
      long long v147 = 0u;
      long long v148 = 0u;
      long long v145 = 0u;
      long long v146 = 0u;
      long long __str_16 = 0u;
      long long v144 = 0u;
      long long __str = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Silence label is set to ", 24);
      unint64_t v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" but does not match the auto-determined silence label ", 54);
      uint64_t v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)". Will use latter.", 18);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__str);
    }
    *((_DWORD *)this + 288) = v10;
  }
  quasar::ModelLoader::readWordBoundaryInfo(*((void **)this + 46), (unsigned int *)this + 288, (uint64_t)this + 824, (uint64_t)this + 848, (uint64_t *)&__str);
  long long v14 = __str;
  long long __str = 0uLL;
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 130);
  *(_OWORD *)((char *)this + 1032) = v14;
  if (v15)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    if (*((void *)&__str + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__str + 1));
    }
  }
  if (*((char *)this + 871) < 0)
  {
    if (*((void *)this + 107)) {
      goto LABEL_29;
    }
  }
  else if (*((unsigned char *)this + 871))
  {
    goto LABEL_29;
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v157 = 0u;
    long long v158 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v151 = 0u;
    long long v152 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    long long v145 = 0u;
    long long v146 = 0u;
    long long __str_16 = 0u;
    long long v144 = 0u;
    long long __str = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"You have not specified unpronounced-word-file. This will prevent you from using class LM tags ", 94);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"like \\CS-GeoBizName-start and \\CS-GeoBizName-end in the ref transcription for error blamer. ", 92);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__str);
  }
LABEL_29:
  v122[0] = 0;
  if ((kaldi::Input::OpenInternal(v122, (uint64_t)this + 536, 0, 0) & 1) == 0)
  {
    long long v157 = 0u;
    long long v158 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v151 = 0u;
    long long v152 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    long long v145 = 0u;
    long long v146 = 0u;
    long long __str_16 = 0u;
    long long v144 = 0u;
    long long __str = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
    unsigned int v118 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"can not open ", 13);
    int v119 = *((char *)this + 559);
    if (v119 >= 0) {
      BOOL v120 = (char *)this + 536;
    }
    else {
      BOOL v120 = (char *)*((void *)this + 67);
    }
    if (v119 >= 0) {
      uint64_t v121 = *((unsigned __int8 *)this + 559);
    }
    else {
      uint64_t v121 = *((void *)this + 68);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)v120, v121);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__str);
  }
  memset(&v163, 0, sizeof(v163));
  long long v161 = 0uLL;
  uint64_t v162 = 0;
  uint64_t v17 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    uint64_t v18 = (void *)kaldi::Input::Stream((kaldi::Input *)v122);
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
    unsigned int v19 = std::locale::use_facet(v125, v17);
    unsigned __int8 v20 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(v125);
    unsigned int v21 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v18, (uint64_t)&v161, v20);
    if ((*((unsigned char *)v21 + *(void *)(*v21 - 24) + 32) & 5) != 0) {
      break;
    }
    v125[0].__locale_ = 0;
    v125[1].__locale_ = 0;
    *(void *)&long long v126 = 0;
    long long v159 = 0uLL;
    uint64_t v160 = 0;
    kaldi::SplitStringOnFirstSpace((uint64_t)&v161, (uint64_t)v125, (uint64_t)&v159);
    std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)&__str, (long long *)v125, &v159);
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v163, &__str);
    if (SHIBYTE(v144) < 0) {
      operator delete(*((void **)&__str_16 + 1));
    }
    if (SBYTE7(__str_16) < 0) {
      operator delete((void *)__str);
    }
    if (SHIBYTE(v160) < 0) {
      operator delete((void *)v159);
    }
    if (SBYTE7(v126) < 0) {
      operator delete(v125[0].__locale_);
    }
  }
  kaldi::Input::Close((kaldi::Input *)v122);
  kaldi::quasar::Lexicon::Lexicon(&__str, &v163, 1, 0, 0);
  kaldi::quasar::Lexicon::SetPronView((uint64_t)&__str, 2u, 0);
  LOBYTE(v124) = 0;
  std::allocate_shared[abi:ne180100]<kaldi::quasar::LexiconFst,std::allocator<kaldi::quasar::LexiconFst>,float &,std::string &,BOOL,void>((float *)this + 126, (uint64_t)this + 752, (unsigned __int8 *)&v124, v125);
  long long v22 = *(_OWORD *)&v125[0].__locale_;
  v125[0].__locale_ = 0;
  v125[1].__locale_ = 0;
  int v23 = (std::__shared_weak_count *)*((void *)this + 114);
  *(_OWORD *)((char *)this + 904) = v22;
  if (v23)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    if (v125[1].__locale_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v125[1].__locale_);
    }
  }
  unsigned int v24 = (kaldi::quasar::LexiconFst *)*((void *)this + 113);
  uint64_t v25 = (fst::SymbolTable *)*((void *)this + 109);
  uint64_t v26 = *((void *)this + 111);
  int v27 = *(fst::SymbolTable **)(v26 + 96);
  char v28 = *(std::__shared_weak_count **)(v26 + 104);
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  kaldi::quasar::LexiconFst::CreateFst(v24, (const kaldi::quasar::Lexicon *)&__str, v25, v27, 0);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  quasar::Bitmap::~Bitmap(*((quasar::Bitmap **)this + 113));
  fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v29);
  if (quasar::gLogLevel >= 4)
  {
    long long v140 = 0u;
    long long v141 = 0u;
    long long v138 = 0u;
    long long v139 = 0u;
    long long v136 = 0u;
    long long v137 = 0u;
    long long v134 = 0u;
    long long v135 = 0u;
    long long v132 = 0u;
    long long v133 = 0u;
    long long v131 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v127 = 0u;
    long long v128 = 0u;
    *(_OWORD *)&v125[0].__locale_ = 0u;
    long long v126 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v125);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)"Created lexicon FST", 19);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v125);
  }
  kaldi::quasar::Lexicon::~Lexicon((kaldi::quasar::Lexicon *)&__str);
  if (SHIBYTE(v162) < 0) {
    operator delete((void *)v161);
  }
  *(void *)&long long __str = &v163;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  kaldi::Input::~Input((kaldi::Input *)v122);
  int v30 = 0;
  if (quasar::QsrTextSymbolTable::NumSymbols(*((quasar::QsrTextSymbolTable **)this + 111)))
  {
    uint64_t v31 = 0;
    unint64_t v32 = (char **)((char *)this + 1088);
    while (1)
    {
      unsigned int NthKey = quasar::QsrTextSymbolTable::GetNthKey(*((quasar::QsrTextSymbolTable **)this + 111));
      uint64_t v34 = (quasar::QsrTextSymbolTable *)*((void *)this + 111);
      quasar::QsrTextSymbolTable::GetNthKey(v34);
      quasar::QsrTextSymbolTable::Find(v34, &__str);
      uint64_t v35 = BYTE7(__str_16);
      if (SBYTE7(__str_16) < 0) {
        break;
      }
      if (__str == 47)
      {
        uint64_t v36 = BYTE7(__str_16);
        goto LABEL_58;
      }
LABEL_90:
      if (++v31 >= (unint64_t)quasar::QsrTextSymbolTable::NumSymbols(*((quasar::QsrTextSymbolTable **)this + 111))) {
        goto LABEL_91;
      }
    }
    if (*(unsigned char *)__str == 47)
    {
      uint64_t v36 = *((void *)&__str + 1);
LABEL_58:
      uint64_t v37 = v36 - 1;
      if ((BYTE7(__str_16) & 0x80) == 0)
      {
        if (*((unsigned char *)&__str + v37) != 47) {
          goto LABEL_90;
        }
LABEL_63:
        std::string::basic_string((std::string *)v125, (const std::string *)&__str, 1uLL, v35 - 2, (std::allocator<char> *)&v163);
        std::string::basic_string[abi:ne180100]<0>(&v163, "WORD-DIS-");
        BOOL v38 = quasar::startsWith((unsigned __int8 *)v125, (unsigned __int8 *)&v163);
        BOOL v39 = v38;
        if (SHIBYTE(v163.__end_cap_.__value_) < 0)
        {
          operator delete(v163.__begin_);
          if (!v39) {
            goto LABEL_68;
          }
        }
        else if (!v38)
        {
LABEL_68:
          uint64_t v40 = (*(uint64_t (**)(void, std::locale *))(*(void *)*v6 + 96))(*v6, v125);
          unsigned int v41 = v40;
          if (v40 != -1)
          {
            float v42 = v6;
            uint64_t v43 = (unint64_t *)*((void *)this + 137);
            unint64_t v44 = *((void *)this + 138);
            if ((unint64_t)v43 >= v44)
            {
              uint64_t v46 = ((char *)v43 - *v32) >> 3;
              if ((unint64_t)(v46 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v47 = v44 - (void)*v32;
              uint64_t v48 = v47 >> 2;
              if (v47 >> 2 <= (unint64_t)(v46 + 1)) {
                uint64_t v48 = v46 + 1;
              }
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v49 = v48;
              }
              if (v49) {
                BOOL v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 1104, v49);
              }
              else {
                BOOL v50 = 0;
              }
              uint64_t v51 = (unint64_t *)&v50[8 * v46];
              unint64_t *v51 = NthKey | ((unint64_t)v41 << 32);
              int v45 = v51 + 1;
              float v52 = (char *)*((void *)this + 137);
              float v53 = (char *)*((void *)this + 136);
              if (v52 != v53)
              {
                do
                {
                  unint64_t v54 = *((void *)v52 - 1);
                  v52 -= 8;
                  *--uint64_t v51 = v54;
                }
                while (v52 != v53);
                float v52 = *v32;
              }
              *((void *)this + 136) = v51;
              *((void *)this + 137) = v45;
              *((void *)this + 138) = &v50[8 * v49];
              if (v52) {
                operator delete(v52);
              }
            }
            else
            {
              *uint64_t v43 = NthKey | ((unint64_t)v40 << 32);
              int v45 = v43 + 1;
            }
            *((void *)this + 137) = v45;
            ++v30;
            uint64_t v6 = v42;
          }
          if (SBYTE7(v126) < 0) {
            operator delete(v125[0].__locale_);
          }
          if ((SBYTE7(__str_16) & 0x80000000) == 0) {
            goto LABEL_90;
          }
          goto LABEL_89;
        }
        MEMORY[0x1B3EA7B20](v125, "<eps>");
        goto LABEL_68;
      }
      if (*(unsigned char *)(__str + v37) == 47)
      {
        uint64_t v35 = *((void *)&__str + 1);
        goto LABEL_63;
      }
    }
LABEL_89:
    operator delete((void *)__str);
    goto LABEL_90;
  }
LABEL_91:
  if (quasar::gLogLevel > 3)
  {
    long long v157 = 0u;
    long long v158 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v151 = 0u;
    long long v152 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    long long v145 = 0u;
    long long v146 = 0u;
    long long __str_16 = 0u;
    long long v144 = 0u;
    long long __str = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Found ", 6);
    uint64_t v55 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" phone words (including word disambig symbols) in base word table", 65);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__str);
  }
  uint64_t v56 = *v6;
  unint64_t v57 = (*(uint64_t (**)(void))(*(void *)*v6 + 120))(*v6);
  uint64_t v58 = (*(uint64_t (**)(uint64_t, void))(*(void *)v56 + 128))(v56, 0);
  if (v57)
  {
    uint64_t v59 = (std::pair<std::string, std::string> *)v58;
    uint64_t v60 = 0;
    do
    {
      (*(void (**)(long long *__return_ptr, uint64_t, std::pair<std::string, std::string> *))(*(void *)v56 + 88))(&__str, v56, v59);
      v163.__begin_ = v59;
      v125[0].__locale_ = (std::locale::__imp *)&v163;
      uint64_t v61 = std::__hash_table<std::__hash_value_type<long long,std::string>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::string>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::string>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::string>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>((uint64_t)this + 1048, (unint64_t *)&v163, (uint64_t)&std::piecewise_construct, (uint64_t **)v125);
      int v62 = (void **)(v61 + 3);
      if (*((char *)v61 + 47) < 0) {
        operator delete(*v62);
      }
      *(_OWORD *)int v62 = __str;
      v62[2] = (void *)__str_16;
      if (++v60 < v57) {
        uint64_t v59 = (std::pair<std::string, std::string> *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v56 + 128))(v56, v60);
      }
    }
    while (v57 != v60);
  }
  if (*((char *)this + 727) < 0)
  {
    if (!*((void *)this + 89)) {
      goto LABEL_108;
    }
  }
  else if (!*((unsigned char *)this + 727))
  {
    goto LABEL_108;
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v157 = 0u;
    long long v158 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v151 = 0u;
    long long v152 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    long long v145 = 0u;
    long long v146 = 0u;
    long long __str_16 = 0u;
    long long v144 = 0u;
    long long __str = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
    unsigned int v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"inv-g-fst-file is now ignored because it does not work with class LMs. ", 71);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"Please use raw-smallg-fst-file.", 31);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__str);
  }
  unsigned int v64 = (std::__shared_weak_count *)*((void *)this + 128);
  v6[18] = 0;
  v6[19] = 0;
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
LABEL_108:
  if (*((char *)this + 751) < 0)
  {
    if (!*((void *)this + 92)) {
      goto LABEL_113;
    }
LABEL_112:
    uint64_t v65 = (*(void *(**)(std::locale *__return_ptr))(**((void **)this + 46) + 16))(v125);
    quasar::ErrorBlamingDecoder::convertFst((uint64_t)v65, (uint64_t)v125[0].__locale_);
  }
  if (*((unsigned char *)this + 751)) {
    goto LABEL_112;
  }
LABEL_113:
  v125[0].__locale_ = 0;
  v125[1].__locale_ = 0;
  *(void *)&long long v126 = 0;
  kaldi::SplitStringToVector((const std::string *)((char *)this + 560), ",", 1, (uint64_t)v125);
  locale = v125[0].__locale_;
  char v67 = v125[1].__locale_;
  if (v125[0].__locale_ != v125[1].__locale_)
  {
    float v68 = (void *)((char *)this + 920);
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v163, "");
      MultiChainMultiAudioBuffer = (uint64_t *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*((quasar::SpeechRequestData **)this + 51));
      v165[0] = &unk_1F0A5B308;
      v165[1] = this;
      v165[3] = v165;
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::loadMasterLmOrCreatePlaceholder((uint64_t)locale, (uint64_t)&v163, MultiChainMultiAudioBuffer, (uint64_t)v165, &v161);
      uint64_t v70 = (_OWORD *)*((void *)this + 116);
      unint64_t v71 = *((void *)this + 117);
      if ((unint64_t)v70 >= v71)
      {
        uint64_t v72 = ((uint64_t)v70 - *v68) >> 4;
        unint64_t v73 = v72 + 1;
        if ((unint64_t)(v72 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v74 = v71 - *v68;
        if (v74 >> 3 > v73) {
          unint64_t v73 = v74 >> 3;
        }
        if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v75 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v75 = v73;
        }
        *(void *)&long long v144 = (char *)this + 936;
        uint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 936, v75);
        uint64_t v77 = &v76[16 * v72];
        *(void *)&long long __str = v76;
        *((void *)&__str + 1) = v77;
        *((void *)&__str_16 + 1) = &v76[16 * v78];
        *(_OWORD *)uint64_t v77 = v161;
        long long v161 = 0uLL;
        *(void *)&long long __str_16 = v77 + 16;
        std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__swap_out_circular_buffer((uint64_t *)this + 115, &__str);
        uint64_t v79 = *((void *)this + 116);
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)&__str);
        uint64_t v80 = (std::__shared_weak_count *)*((void *)&v161 + 1);
        *((void *)this + 116) = v79;
        if (v80) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v80);
        }
      }
      else
      {
        *uint64_t v70 = v161;
        long long v161 = 0uLL;
        *((void *)this + 116) = v70 + 1;
      }
      std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::~__value_func[abi:ne180100](v165);
      if (SHIBYTE(v163.__end_cap_.__value_) < 0) {
        operator delete(v163.__begin_);
      }
      locale = (std::locale::__imp *)((char *)locale + 24);
    }
    while (locale != v67);
  }
  memset(&v163, 0, sizeof(v163));
  long long v161 = 0uLL;
  uint64_t v162 = 0;
  if ((kaldi::SplitStringToFloats<float>((uint64_t)this + 608, ",", 1, &v163) & 1) == 0)
  {
    long long v157 = 0u;
    long long v158 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v151 = 0u;
    long long v152 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    long long v145 = 0u;
    long long v146 = 0u;
    long long __str_16 = 0u;
    long long v144 = 0u;
    long long __str = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Could not read FST LM interpolation weight info", 47);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__str);
  }
  long long v159 = 0uLL;
  uint64_t v160 = 0;
  kaldi::SplitStringToVector((const std::string *)((char *)this + 584), ",", 1, (uint64_t)&v159);
  if (*((char *)this + 679) < 0) {
    uint64_t v81 = *((void *)this + 83);
  }
  else {
    uint64_t v81 = *((unsigned __int8 *)this + 679);
  }
  if (v81)
  {
    if ((kaldi::SplitStringToFloats<float>((uint64_t)this + 656, ",", 1, (void *)this + 121) & 1) == 0)
    {
      long long v157 = 0u;
      long long v158 = 0u;
      long long v155 = 0u;
      long long v156 = 0u;
      long long v153 = 0u;
      long long v154 = 0u;
      long long v151 = 0u;
      long long v152 = 0u;
      long long v149 = 0u;
      long long v150 = 0u;
      long long v147 = 0u;
      long long v148 = 0u;
      long long v145 = 0u;
      long long v146 = 0u;
      long long __str_16 = 0u;
      long long v144 = 0u;
      long long __str = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Could not read the NNLM normalization factor info", 49);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__str);
    }
    uint64_t v82 = *((void *)&v159 + 1);
    uint64_t v83 = v159;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v159 + 1) - v159) >> 3) != (uint64_t)(*((void *)this + 122)
                                                                                           - *((void *)this + 121)) >> 2)
    {
      long long v157 = 0u;
      long long v158 = 0u;
      long long v155 = 0u;
      long long v156 = 0u;
      long long v153 = 0u;
      long long v154 = 0u;
      long long v151 = 0u;
      long long v152 = 0u;
      long long v149 = 0u;
      long long v150 = 0u;
      long long v147 = 0u;
      long long v148 = 0u;
      long long v145 = 0u;
      long long v146 = 0u;
      long long __str_16 = 0u;
      long long v144 = 0u;
      long long __str = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"the number of NNLM files and the number of NNLM norm factors do not match", 73);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__str);
    }
  }
  else
  {
    LODWORD(__str) = 0;
    std::vector<float>::assign((char **)this + 121, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v159 + 1) - v159) >> 3), &__str);
    uint64_t v82 = *((void *)&v159 + 1);
    uint64_t v83 = v159;
  }
  if (v82 != v83)
  {
    uint64_t v84 = 0;
    unint64_t v85 = 0;
    int v86 = (void *)((char *)this + 944);
    do
    {
      uint64_t v87 = *(unsigned int *)(*((void *)this + 121) + 4 * v85);
      std::string::basic_string[abi:ne180100]<0>(v122, "");
      uint64_t v88 = (uint64_t *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*((quasar::SpeechRequestData **)this + 51));
      v164[0] = &unk_1F0A5B360;
      v164[1] = this;
      v164[2] = v87;
      v164[3] = v164;
      quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::loadMasterLmOrCreatePlaceholder(v83 + v84, (uint64_t)v122, v88, (uint64_t)v164, &v124);
      long long v89 = (_OWORD *)*((void *)this + 119);
      unint64_t v90 = *((void *)this + 120);
      if ((unint64_t)v89 >= v90)
      {
        uint64_t v91 = ((uint64_t)v89 - *v86) >> 4;
        unint64_t v92 = v91 + 1;
        if ((unint64_t)(v91 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v93 = v90 - *v86;
        if (v93 >> 3 > v92) {
          unint64_t v92 = v93 >> 3;
        }
        if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v94 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v94 = v92;
        }
        *(void *)&long long v144 = (char *)this + 960;
        int v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 960, v94);
        float v96 = &v95[16 * v91];
        *(void *)&long long __str = v95;
        *((void *)&__str + 1) = v96;
        *((void *)&__str_16 + 1) = &v95[16 * v97];
        *(_OWORD *)float v96 = v124;
        long long v124 = 0uLL;
        *(void *)&long long __str_16 = v96 + 16;
        std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>::__swap_out_circular_buffer((uint64_t *)this + 118, &__str);
        uint64_t v98 = *((void *)this + 119);
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)&__str);
        long long v99 = (std::__shared_weak_count *)*((void *)&v124 + 1);
        *((void *)this + 119) = v98;
        if (v99) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v99);
        }
      }
      else
      {
        _OWORD *v89 = v124;
        long long v124 = 0uLL;
        *((void *)this + 119) = v89 + 1;
      }
      std::__function::__value_func<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__value_func[abi:ne180100](v164);
      if (v123 < 0) {
        operator delete(v122[0]);
      }
      ++v85;
      uint64_t v83 = v159;
      v84 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v159 + 1) - v159) >> 3) > v85);
  }
  if ((kaldi::SplitStringToFloats<float>((uint64_t)this + 632, ",", 1, &v161) & 1) == 0)
  {
    long long v157 = 0u;
    long long v158 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v151 = 0u;
    long long v152 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    long long v145 = 0u;
    long long v146 = 0u;
    long long __str_16 = 0u;
    long long v144 = 0u;
    long long __str = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Could not read NN LM interpolation weight info", 46);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__str);
  }
  uint64_t v100 = *((void *)this + 124);
  *((void *)this + 125) = v100;
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)this + 992, v100, (char *)v163.__begin_, (char *)v163.__end_, ((char *)v163.__end_ - (char *)v163.__begin_) >> 2);
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)this + 992, *((void *)this + 125), (char *)v161, *((char **)&v161 + 1), (uint64_t)(*((void *)&v161 + 1) - v161) >> 2);
  uint64_t v101 = (float *)*((void *)this + 124);
  long long v102 = (float *)*((void *)this + 125);
  if (v101 == v102)
  {
    unint64_t v103 = *((void *)this + 126);
    if ((unint64_t)v101 >= v103)
    {
      uint64_t v104 = v103 - (void)v101;
      uint64_t v105 = v104 >> 1;
      if ((unint64_t)(v104 >> 1) <= 1) {
        uint64_t v105 = 1;
      }
      if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v106 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v106 = v105;
      }
      long long v107 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 1008, v106);
      long long v108 = (char *)*((void *)this + 125);
      uint64_t v109 = (char *)*((void *)this + 124);
      size_t v111 = &v107[v110];
      *long long v107 = 1065353216;
      long long v102 = (float *)(v107 + 1);
      while (v108 != v109)
      {
        int v112 = *((_DWORD *)v108 - 1);
        v108 -= 4;
        *--long long v107 = v112;
      }
      *((void *)this + 124) = v107;
      *((void *)this + 125) = v102;
      *((void *)this + 126) = v111;
      if (v109) {
        operator delete(v109);
      }
    }
    else
    {
      *uint64_t v101 = 1.0;
      long long v102 = v101 + 1;
    }
    *((void *)this + 125) = v102;
    uint64_t v101 = (float *)*((void *)this + 124);
  }
  uint64_t v113 = (char *)v102 - (char *)v101;
  if ((char *)v102 - (char *)v101 == 4 && *v101 != 1.0)
  {
    long long v157 = 0u;
    long long v158 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v151 = 0u;
    long long v152 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    long long v145 = 0u;
    long long v146 = 0u;
    long long __str_16 = 0u;
    long long v144 = 0u;
    long long __str = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Language model weight must be 1 when using a single LM", 54);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__str);
  }
  uint64_t v114 = *((void *)this + 116) - *((void *)this + 115);
  uint64_t v115 = v114 >> 4;
  if ((unint64_t)v114 >= 0x11 && v115 != ((char *)v163.__end_ - (char *)v163.__begin_) >> 2)
  {
    long long v157 = 0u;
    long long v158 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v151 = 0u;
    long long v152 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    long long v145 = 0u;
    long long v146 = 0u;
    long long __str_16 = 0u;
    long long v144 = 0u;
    long long __str = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"The number of big FST LMs and the number of weights mismatch", 60);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__str);
  }
  uint64_t v116 = *((void *)this + 119) - *((void *)this + 118);
  uint64_t v117 = v116 >> 4;
  if ((unint64_t)v116 >= 0x11 && v117 != (uint64_t)(*((void *)&v161 + 1) - v161) >> 2)
  {
    long long v157 = 0u;
    long long v158 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v151 = 0u;
    long long v152 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    long long v145 = 0u;
    long long v146 = 0u;
    long long __str_16 = 0u;
    long long v144 = 0u;
    long long __str = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"The number of big NN LMs and the number of weights mismatch", 59);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__str);
  }
  if (v117 + v115 != v113 >> 2)
  {
    long long v157 = 0u;
    long long v158 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v151 = 0u;
    long long v152 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    long long v145 = 0u;
    long long v146 = 0u;
    long long __str_16 = 0u;
    long long v144 = 0u;
    long long __str = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"The number of big FST LMs + NN LMs doesn't match the number of weights (FST LMs + NN LMs)", 89);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__str);
  }
  *(void *)&long long __str = &v159;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if ((void)v161)
  {
    *((void *)&v161 + 1) = v161;
    operator delete((void *)v161);
  }
  if (v163.__begin_)
  {
    v163.__end_ = v163.__begin_;
    operator delete(v163.__begin_);
  }
  *(void *)&long long __str = v125;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
}