void OUTLINED_FUNCTION_6(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  uint64_t v9;

  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_4_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_0_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_impl(a1, v9, OS_LOG_TYPE_DEFAULT, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_3(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_1_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_0_2()
{
  JUMPOUT(0x1B3EA8630);
}

void OUTLINED_FUNCTION_0_3(_DWORD *a1@<X8>)
{
}

void OUTLINED_FUNCTION_0_4()
{
}

void OUTLINED_FUNCTION_0_5()
{
  JUMPOUT(0x1B3EA8630);
}

void OUTLINED_FUNCTION_0_6(uint64_t a1, uint64_t a2)
{
}

void OUTLINED_FUNCTION_0_8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_1_1(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x12u);
}

void OUTLINED_FUNCTION_1_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_impl(a1, a2, OS_LOG_TYPE_DEFAULT, a4, &a9, 2u);
}

uint64_t OUTLINED_FUNCTION_3_0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_1_3(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t OUTLINED_FUNCTION_1_4(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

uint64_t OUTLINED_FUNCTION_1_5(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_1_6(uint64_t a1)
{
  return *(void *)a1;
}

void OUTLINED_FUNCTION_1_8()
{
  JUMPOUT(0x1B3EA8670);
}

uint64_t OUTLINED_FUNCTION_2_1(uint64_t a1)
{
  return *(void *)a1;
}

void OUTLINED_FUNCTION_2_2()
{
  *(void *)uint64_t v0 = v2;
  *(_DWORD *)(v0 + 8) = v1;
}

uint64_t OUTLINED_FUNCTION_3_1()
{
  uint64_t result = *v0;
  *uint64_t v0 = 0;
  return result;
}

void OUTLINED_FUNCTION_3_2(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::wstring> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

uint64_t std::unordered_map<std::string,std::string>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 48 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(a1, a2, (long long *)a2);
      a2 += 48;
      v5 -= 48;
    }
    while (v5);
  }
  return a1;
}

void sub_1B1A88170(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1B1A883F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1A88468(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,int> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::pair<std::string const,int> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void *std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        unint64_t v8 = (void *)v4;
        uint64_t v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

const void **std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(void *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  uint64_t v9 = (const void **)(a1 + 1);
  if (a1 + 1 != a2 && !std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
    {
      *a3 = (const void **)a2;
      *a4 = (uint64_t)a2;
      return (const void **)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      v14 = (const void **)a2[1];
      do
      {
        unint64_t v15 = v14;
        v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      BOOL v18 = (const void **)a2;
      do
      {
        unint64_t v15 = (const void **)v18[2];
        BOOL v17 = *v15 == v18;
        BOOL v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    unint64_t v12 = (const void **)a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = (const void **)a2;
      return (const void **)a2;
    }
  }
  uint8x8_t v11 = (const void **)*a2;
  if (*a2)
  {
    do
    {
      unint64_t v12 = v11;
      uint8x8_t v11 = (const void **)v11[1];
    }
    while (v11);
  }
  else
  {
    float v16 = a2;
    do
    {
      unint64_t v12 = (const void **)v16[2];
      BOOL v17 = *v12 == v16;
      float v16 = (uint64_t *)v12;
    }
    while (v17);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:
  return (const void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::pair<std::string const,int> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  *((_DWORD *)v6 + 14) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B1A887DC(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    unint64_t v10 = (char *)*a1;
    uint8x8_t v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t *std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  v6 = std::__tree<unsigned int>::__find_equal<unsigned int>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<unsigned int>::__find_equal<unsigned int>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  int64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unsigned int v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          BOOL v17 = (uint64_t *)v16;
          unsigned int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          int64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        int64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      BOOL v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    unint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      unint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    unint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      unint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          size_t v21 = (uint64_t *)v20;
          unsigned int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          int64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        int64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      size_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(std::regex_iterator<std::__wrap_iter<const char *>, char> *this, std::__wrap_iter<const char *> __a, std::__wrap_iter<const char *> __b, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *__re, std::regex_constants::match_flag_type __m)
{
  __int16 v5 = __m;
  this->__begin_ = __a;
  this->__end_ = __b;
  this->__pregex_ = __re;
  this->__flags_ = __m;
  *(_OWORD *)&this->__match_.__matches_.__begin_ = 0u;
  p_match = &this->__match_;
  this->__match_.__prefix_.first.__i_ = 0;
  this->__match_.__prefix_.second.__i_ = 0;
  this->__match_.__prefix_.matched = 0;
  this->__match_.__suffix_.first.__i_ = 0;
  this->__match_.__suffix_.second.__i_ = 0;
  this->__match_.__suffix_.matched = 0;
  this->__match_.__ready_ = 0;
  this->__match_.__position_start_.__i_ = 0;
  *(_OWORD *)&this->__match_.__matches_.__end_cap_.__value_ = 0u;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)((char *)&this->__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>
                                                                               + 1) = 0u;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)__re, (__int32 *)__a.__i_, (__int32 *)__b.__i_, &__p, __m);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::wssub_match> *)p_match, (uint64_t)__a.__i_, (std::sub_match<std::__wrap_iter<const wchar_t *>> *)__b.__i_, (uint64_t *)&__p, (v5 & 0x800) != 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  return this;
}

void sub_1B1A88BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v13 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 40) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, __int32 *__f, __int32 *__l, std::match_results<const wchar_t *> *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  std::match_results<char const*>::__init(this, *(_DWORD *)(a1 + 28) + 1, __f, __l, (unsigned __int16)(v9 & 0x800) >> 11);
  if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __f, __l, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (this->__matches_.__end_ == this->__matches_.__begin_) {
      p_unmatched = &this->__unmatched_;
    }
    else {
      p_unmatched = this->__matches_.__begin_;
    }
LABEL_8:
    first = p_unmatched->first;
    this->__prefix_.second = p_unmatched->first;
    this->__prefix_.matched = this->__prefix_.first != first;
    second = p_unmatched->second;
    this->__suffix_.first = second;
    this->__suffix_.matched = second != this->__suffix_.second;
    return 1;
  }
  if (__f != __l && (v9 & 0x40) == 0)
  {
    int v14 = v9 | 0x80;
    unsigned int v15 = (__int32 *)((char *)__f + 1);
    if (v15 != __l)
    {
      while (1)
      {
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
        int v16 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v15, __l, (uint64_t *)this, v14, 0);
        std::vector<std::wcsub_match>::pointer begin = this->__matches_.__begin_;
        std::vector<std::wcsub_match>::pointer end = this->__matches_.__end_;
        if (v16) {
          break;
        }
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), &this->__unmatched_);
        unsigned int v15 = (const __int32 *)((char *)v15 + 1);
        if (v15 == __l) {
          goto LABEL_14;
        }
      }
      if (end == begin) {
        p_unmatched = &this->__unmatched_;
      }
      else {
        p_unmatched = this->__matches_.__begin_;
      }
      goto LABEL_8;
    }
LABEL_14:
    std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __l, __l, (uint64_t *)this, v14, 0))
    {
      if (this->__matches_.__end_ == this->__matches_.__begin_) {
        p_unmatched = &this->__unmatched_;
      }
      else {
        p_unmatched = this->__matches_.__begin_;
      }
      goto LABEL_8;
    }
  }
  uint64_t result = 0;
  this->__matches_.__end_ = this->__matches_.__begin_;
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const __int32 *a2, const __int32 *a3, uint64_t *a4, int a5, char a6)
{
  v41 = 0;
  v42 = 0;
  unint64_t v43 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)v37 = 0;
    memset(&v37[8], 0, 48);
    *(_OWORD *)std::match_results<const wchar_t *> __p = 0u;
    memset(v39, 0, 21);
    v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v37[32])
    {
      *(void *)&v37[40] = *(void *)&v37[32];
      operator delete(*(void **)&v37[32]);
    }
    v35 = a4;
    unint64_t v12 = v42;
    *((_DWORD *)v42 - 24) = 0;
    *((void *)v12 - 11) = a2;
    *((void *)v12 - 10) = a2;
    *((void *)v12 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::wcsub_match> *)(v12 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const wchar_t *>> *)((char *)v42 - 40), *(unsigned int *)(a1 + 32));
    uint64_t v13 = v42;
    *((void *)v42 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *((unsigned char *)v13 - 4) = a6;
    unsigned int v14 = 1;
    while (2)
    {
      if ((v14 & 0xFFF) == 0 && (int)(v14 >> 12) >= (int)a3 - (int)a2) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      int v16 = v13 - 1;
      uint64_t v15 = *((void *)v13 - 2);
      BOOL v17 = v13 - 6;
      if (v15) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v15 + 16))(v15, v13 - 6);
      }
      switch(*(_DWORD *)v17)
      {
        case 0xFFFFFC18:
          unsigned int v18 = (const __int32 *)*((void *)v13 - 10);
          if ((a5 & 0x20) != 0 && v18 == a2 || (a5 & 0x1000) != 0 && v18 != a3) {
            goto LABEL_16;
          }
          uint64_t v26 = *v35;
          *(void *)uint64_t v26 = a2;
          *(void *)(v26 + 8) = v18;
          *(unsigned char *)(v26 + 16) = 1;
          uint64_t v27 = *((void *)v13 - 8);
          uint64_t v28 = *((void *)v13 - 7) - v27;
          if (v28)
          {
            unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (v28 >> 3);
            v30 = (unsigned char *)(v27 + 16);
            unsigned int v31 = 1;
            do
            {
              uint64_t v32 = v26 + 24 * v31;
              *(_OWORD *)uint64_t v32 = *((_OWORD *)v30 - 1);
              char v33 = *v30;
              v30 += 24;
              *(unsigned char *)(v32 + 16) = v33;
            }
            while (v29 > v31++);
          }
          uint64_t v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          unint64_t v19 = v42 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v43, (void *)v42 - 12);
          v42 = v19;
          goto LABEL_23;
        case 0xFFFFFC20:
          long long v20 = *(v13 - 5);
          *(_OWORD *)v37 = *v17;
          *(_OWORD *)&v37[16] = v20;
          memset(&v37[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v37[32], *((long long **)v13 - 8), *((long long **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 - 7) - *((void *)v13 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v39[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v13 - 5), *((long long **)v13 - 4), (uint64_t)(*((void *)v13 - 4) - *((void *)v13 - 5)) >> 4);
          uint64_t v21 = *v16;
          *(void *)((char *)&v39[1] + 5) = *(void *)((char *)v13 - 11);
          v39[1] = v21;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v16 + 24))(*v16, 1, v13 - 6);
          (*(void (**)(void, void, unsigned char *))(*(void *)v39[1] + 24))(v39[1], 0, v37);
          unsigned int v22 = v42;
          if ((unint64_t)v42 >= v43)
          {
            v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v23 = *(_OWORD *)&v37[16];
            _OWORD *v42 = *(_OWORD *)v37;
            v22[1] = v23;
            *((void *)v22 + 4) = 0;
            *((void *)v22 + 5) = 0;
            *((void *)v22 + 6) = 0;
            *((void *)v22 + 7) = 0;
            v22[2] = *(_OWORD *)&v37[32];
            *((void *)v22 + 6) = *(void *)&v37[48];
            memset(&v37[32], 0, 24);
            *((void *)v22 + 8) = 0;
            *((void *)v22 + 9) = 0;
            *(_OWORD *)((char *)v22 + 56) = *(_OWORD *)__p;
            *((void *)v22 + 9) = v39[0];
            __p[0] = 0;
            __p[1] = 0;
            v39[0] = 0;
            uint64_t v24 = v39[1];
            *(void *)((char *)v22 + 85) = *(void *)((char *)&v39[1] + 5);
            *((void *)v22 + 10) = v24;
            v42 = v22 + 6;
          }
          if (*(void *)&v37[32])
          {
            *(void *)&v37[40] = *(void *)&v37[32];
            operator delete(*(void **)&v37[32]);
          }
LABEL_23:
          uint64_t v13 = v42;
          ++v14;
          if (v41 != v42) {
            continue;
          }
          uint64_t v6 = 0;
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  *(void *)v37 = &v41;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  return v6;
}

void sub_1B1A891A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  std::__state<char>::~__state(&a13);
  a13 = v18 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v37 = 0;
    BOOL negate = this->__negate_;
    goto LABEL_221;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_58;
  }
  signed __int8 v6 = *current;
  unsigned __int8 v125 = *current;
  signed __int8 v7 = current[1];
  unsigned __int8 v126 = v7;
  if (this->__icase_)
  {
    unsigned __int8 v125 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    unsigned __int8 v126 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  if ((v124 & 0x80000000) == 0)
  {
    if (v124) {
      goto LABEL_8;
    }
LABEL_58:
    BOOL negate = 0;
    uint64_t v37 = 1;
    goto LABEL_59;
  }
  size_t v38 = v123;
  operator delete(__p);
  if (!v38) {
    goto LABEL_58;
  }
LABEL_8:
  std::vector<std::pair<char, char>>::pointer begin = this->__digraphs_.__begin_;
  uint64_t v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    p_second = &begin->second;
    do
    {
      if (v125 == *(p_second - 1) && v126 == *p_second) {
        goto LABEL_218;
      }
      p_second += 2;
      --v11;
    }
    while (v11);
  }
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    BOOL negate = 0;
  }
  else
  {
    std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v127);
    std::vector<std::pair<std::string, std::string>>::pointer v14 = this->__ranges_.__begin_;
    char v15 = v124;
    int64_t v16 = (char *)this->__ranges_.__end_ - (char *)v14;
    if (v16)
    {
      uint64_t v17 = 0;
      unint64_t v18 = v16 / 48;
      char v113 = v124;
      if (v124 >= 0) {
        size_t v19 = v124;
      }
      else {
        size_t v19 = v123;
      }
      if (v124 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (v18 <= 1) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = v16 / 48;
      }
      BOOL v22 = 1;
      while (1)
      {
        int v23 = SHIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        if (v23 >= 0) {
          std::string::size_type size = HIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v14->first.__r_.__value_.__l.__size_;
        }
        if (v23 >= 0) {
          std::vector<std::pair<std::string, std::string>>::pointer v25 = v14;
        }
        else {
          std::vector<std::pair<std::string, std::string>>::pointer v25 = (std::vector<std::pair<std::string, std::string>>::pointer)v14->first.__r_.__value_.__r.__words[0];
        }
        if (size >= v19) {
          size_t v26 = v19;
        }
        else {
          size_t v26 = size;
        }
        int v27 = memcmp(p_p, v25, v26);
        BOOL v28 = v19 >= size;
        if (v27) {
          BOOL v28 = v27 >= 0;
        }
        if (v28)
        {
          int v29 = SHIBYTE(v14->second.__r_.__value_.__r.__words[2]);
          if (v29 >= 0) {
            std::string::size_type v30 = HIBYTE(v14->second.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v30 = v14->second.__r_.__value_.__l.__size_;
          }
          if (v29 >= 0) {
            data = &v14->second;
          }
          else {
            data = (std::string *)v14->second.__r_.__value_.__l.__data_;
          }
          if (v19 >= v30) {
            size_t v32 = v30;
          }
          else {
            size_t v32 = v19;
          }
          int v33 = memcmp(data, p_p, v32);
          BOOL v34 = v30 >= v19;
          if (v33) {
            BOOL v34 = v33 >= 0;
          }
          if (v34) {
            break;
          }
        }
        BOOL v22 = ++v17 < v18;
        ++v14;
        if (v21 == v17)
        {
          int v35 = 0;
          BOOL negate = 0;
          goto LABEL_162;
        }
      }
      BOOL negate = 1;
      int v35 = 5;
LABEL_162:
      p_traits = &this->__traits_;
      char v15 = v113;
    }
    else
    {
      BOOL v22 = 0;
      int v35 = 0;
      BOOL negate = 0;
    }
    if (v15 < 0) {
      operator delete(__p);
    }
    if (v22) {
      goto LABEL_195;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_200;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)p_traits, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  std::vector<std::string>::pointer v89 = this->__equivalences_.__begin_;
  uint64_t v90 = v124;
  int64_t v91 = (char *)this->__equivalences_.__end_ - (char *)v89;
  if (v91)
  {
    uint64_t v92 = 0;
    unint64_t v93 = v91 / 24;
    v95 = __p;
    size_t v94 = v123;
    if (v124 >= 0) {
      size_t v96 = v124;
    }
    else {
      size_t v96 = v123;
    }
    if (v93 <= 1) {
      uint64_t v97 = 1;
    }
    else {
      uint64_t v97 = v91 / 24;
    }
    BOOL v98 = 1;
    while (1)
    {
      v99 = &v89[v92];
      std::string::size_type v100 = HIBYTE(v99->__r_.__value_.__r.__words[2]);
      int v101 = (char)v100;
      if ((v100 & 0x80u) != 0) {
        std::string::size_type v100 = v99->__r_.__value_.__l.__size_;
      }
      if (v96 == v100)
      {
        if (v101 >= 0) {
          v102 = &v89[v92];
        }
        else {
          v102 = (std::string *)v99->__r_.__value_.__r.__words[0];
        }
        if ((v90 & 0x80) == 0)
        {
          if (v90)
          {
            v103 = &__p;
            uint64_t v104 = v90;
            do
            {
              if (*(unsigned __int8 *)v103 != v102->__r_.__value_.__s.__data_[0]) {
                goto LABEL_188;
              }
              v103 = (void **)((char *)v103 + 1);
              v102 = (std::string *)((char *)v102 + 1);
              --v104;
            }
            while (v104);
            BOOL negate = 1;
            int v35 = 5;
            goto LABEL_192;
          }
          BOOL negate = 1;
          if (v98) {
            goto LABEL_220;
          }
LABEL_200:
          if ((char)v125 < 0)
          {
            neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
            goto LABEL_213;
          }
          std::regex_traits<char>::char_class_type mask = this->__mask_;
          tab = this->__traits_.__ct_->__tab_;
          std::ctype_base::mask v108 = tab[v125];
          if ((v108 & mask) == 0 && (v125 != 95 || (mask & 0x80) == 0)
            || (char)v126 < 0
            || (tab[v126] & mask) == 0 && ((mask & 0x80) == 0 || v126 != 95))
          {
            neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
            if ((v108 & neg_mask) != 0 || v125 == 95 && (neg_mask & 0x80) != 0)
            {
LABEL_217:
              int v110 = negate;
              goto LABEL_219;
            }
LABEL_213:
            if (((char)v126 & 0x80000000) == 0)
            {
              if ((this->__traits_.__ct_->__tab_[v126] & neg_mask) != 0) {
                goto LABEL_217;
              }
              int v110 = 1;
              if (v126 == 95 && (neg_mask & 0x80) != 0) {
                goto LABEL_217;
              }
LABEL_219:
              BOOL negate = v110;
LABEL_220:
              uint64_t v37 = 2;
              goto LABEL_221;
            }
          }
LABEL_218:
          int v110 = 1;
          goto LABEL_219;
        }
        unint64_t v118 = v93;
        uint64_t v121 = v90;
        int v105 = memcmp(v95, v102, v94);
        unint64_t v93 = v118;
        uint64_t v90 = v121;
        if (!v105) {
          break;
        }
      }
LABEL_188:
      BOOL v98 = ++v92 < v93;
      if (v92 == v97) {
        goto LABEL_191;
      }
    }
    int v35 = 5;
    BOOL negate = 1;
    goto LABEL_193;
  }
  BOOL v98 = 0;
LABEL_191:
  int v35 = 0;
LABEL_192:
  if ((v90 & 0x80) != 0) {
LABEL_193:
  }
    operator delete(__p);
  if (!v98) {
    goto LABEL_200;
  }
LABEL_195:
  if (v35) {
    goto LABEL_220;
  }
  uint64_t v37 = 2;
LABEL_59:
  unsigned __int8 v39 = *a2->__current_;
  unsigned __int8 v125 = v39;
  if (this->__icase_)
  {
    unsigned __int8 v39 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v39);
    unsigned __int8 v125 = v39;
  }
  std::vector<char>::pointer v40 = this->__chars_.__begin_;
  unint64_t v41 = this->__chars_.__end_ - v40;
  if (v41)
  {
    if (v41 <= 1) {
      unint64_t v41 = 1;
    }
    while (1)
    {
      int v42 = *v40++;
      if (v42 == v39) {
        break;
      }
      if (!--v41) {
        goto LABEL_66;
      }
    }
LABEL_77:
    BOOL negate = 1;
    goto LABEL_221;
  }
LABEL_66:
  std::regex_traits<char>::char_class_type v43 = this->__neg_mask_;
  if (v43 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v39 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v39] & v43) == 0) {
      int v44 = (v39 == 95) & (v43 >> 7);
    }
    else {
      LOBYTE(v44) = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v46 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v39, end - this->__neg_chars_.__begin_);
    v47 = v46 ? v46 : end;
    if ((v44 & 1) == 0 && v47 == end) {
      goto LABEL_77;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v49 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v48 = this->__ranges_.__end_;
  if (v49 != v48)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v126);
      std::vector<std::pair<std::string, std::string>>::pointer v49 = this->__ranges_.__begin_;
      std::vector<std::pair<std::string, std::string>>::pointer v48 = this->__ranges_.__end_;
    }
    else
    {
      char v124 = 1;
      LOWORD(__p) = v39;
    }
    int64_t v50 = (char *)v48 - (char *)v49;
    if (v50)
    {
      uint64_t v119 = v37;
      BOOL v116 = negate;
      uint64_t v51 = 0;
      unint64_t v52 = v50 / 48;
      char v114 = v124;
      if (v124 >= 0) {
        size_t v53 = v124;
      }
      else {
        size_t v53 = v123;
      }
      if (v124 >= 0) {
        v54 = &__p;
      }
      else {
        v54 = __p;
      }
      if (v52 <= 1) {
        uint64_t v55 = 1;
      }
      else {
        uint64_t v55 = v50 / 48;
      }
      BOOL v56 = 1;
      while (1)
      {
        int v57 = SHIBYTE(v49->first.__r_.__value_.__r.__words[2]);
        if (v57 >= 0) {
          std::string::size_type v58 = HIBYTE(v49->first.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v58 = v49->first.__r_.__value_.__l.__size_;
        }
        if (v57 >= 0) {
          std::vector<std::pair<std::string, std::string>>::pointer v59 = v49;
        }
        else {
          std::vector<std::pair<std::string, std::string>>::pointer v59 = (std::vector<std::pair<std::string, std::string>>::pointer)v49->first.__r_.__value_.__r.__words[0];
        }
        if (v58 >= v53) {
          size_t v60 = v53;
        }
        else {
          size_t v60 = v58;
        }
        int v61 = memcmp(v54, v59, v60);
        BOOL v62 = v53 >= v58;
        if (v61) {
          BOOL v62 = v61 >= 0;
        }
        if (v62)
        {
          int v63 = SHIBYTE(v49->second.__r_.__value_.__r.__words[2]);
          if (v63 >= 0) {
            std::string::size_type v64 = HIBYTE(v49->second.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v64 = v49->second.__r_.__value_.__l.__size_;
          }
          if (v63 >= 0) {
            v65 = &v49->second;
          }
          else {
            v65 = (std::string *)v49->second.__r_.__value_.__l.__data_;
          }
          if (v53 >= v64) {
            size_t v66 = v64;
          }
          else {
            size_t v66 = v53;
          }
          int v67 = memcmp(v65, v54, v66);
          BOOL v68 = v64 >= v53;
          if (v67) {
            BOOL v68 = v67 >= 0;
          }
          if (v68) {
            break;
          }
        }
        BOOL v56 = ++v51 < v52;
        ++v49;
        if (v55 == v51)
        {
          BOOL negate = v116;
          goto LABEL_123;
        }
      }
      BOOL negate = 1;
LABEL_123:
      uint64_t v37 = v119;
      if ((v114 & 0x80) == 0) {
        goto LABEL_125;
      }
    }
    else
    {
      BOOL v56 = 0;
      if ((v124 & 0x80) == 0) {
        goto LABEL_125;
      }
    }
    operator delete(__p);
LABEL_125:
    if (v56) {
      goto LABEL_221;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_154;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v126, (uint64_t)&__p);
  std::vector<std::string>::pointer v69 = this->__equivalences_.__begin_;
  uint64_t v70 = v124;
  int64_t v71 = (char *)this->__equivalences_.__end_ - (char *)v69;
  if (v71)
  {
    uint64_t v120 = v37;
    uint64_t v72 = 0;
    unint64_t v73 = v71 / 24;
    v74 = __p;
    size_t v75 = v123;
    if (v124 >= 0) {
      size_t v76 = v124;
    }
    else {
      size_t v76 = v123;
    }
    if (v73 <= 1) {
      uint64_t v77 = 1;
    }
    else {
      uint64_t v77 = v71 / 24;
    }
    BOOL v78 = 1;
    while (1)
    {
      v79 = &v69[v72];
      std::string::size_type v80 = HIBYTE(v79->__r_.__value_.__r.__words[2]);
      int v81 = (char)v80;
      if ((v80 & 0x80u) != 0) {
        std::string::size_type v80 = v79->__r_.__value_.__l.__size_;
      }
      if (v76 == v80)
      {
        if (v81 >= 0) {
          v82 = &v69[v72];
        }
        else {
          v82 = (std::string *)v79->__r_.__value_.__r.__words[0];
        }
        if ((v70 & 0x80) != 0)
        {
          BOOL v117 = negate;
          unint64_t v85 = v73;
          uint64_t v115 = v77;
          int v86 = memcmp(v74, v82, v75);
          uint64_t v77 = v115;
          unint64_t v73 = v85;
          BOOL negate = v117;
          if (!v86)
          {
            BOOL negate = 1;
            uint64_t v37 = v120;
            goto LABEL_152;
          }
        }
        else
        {
          if (!v70)
          {
            BOOL negate = 1;
            uint64_t v37 = v120;
            if (!v78) {
              goto LABEL_154;
            }
            goto LABEL_221;
          }
          v83 = &__p;
          uint64_t v84 = v70;
          while (*(unsigned __int8 *)v83 == v82->__r_.__value_.__s.__data_[0])
          {
            v83 = (void **)((char *)v83 + 1);
            v82 = (std::string *)((char *)v82 + 1);
            if (!--v84)
            {
              BOOL negate = 1;
              goto LABEL_149;
            }
          }
        }
      }
      BOOL v78 = ++v72 < v73;
      if (v72 == v77)
      {
LABEL_149:
        uint64_t v37 = v120;
        if ((v70 & 0x80) == 0) {
          goto LABEL_153;
        }
        goto LABEL_152;
      }
    }
  }
  BOOL v78 = 0;
  if (v124 < 0) {
LABEL_152:
  }
    operator delete(__p);
LABEL_153:
  if (!v78)
  {
LABEL_154:
    if ((char)v125 < 0) {
      goto LABEL_221;
    }
    std::regex_traits<char>::char_class_type v87 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v125] & v87) == 0)
    {
      int v88 = (v87 >> 7) & 1;
      if (v125 != 95) {
        int v88 = 0;
      }
      if (v88 != 1) {
        goto LABEL_221;
      }
    }
    goto LABEL_77;
  }
LABEL_221:
  if (negate == this->__negate_)
  {
    first = 0;
    int v112 = -993;
  }
  else
  {
    a2->__current_ += v37;
    first = this->__first_;
    int v112 = -995;
  }
  a2->__do_ = v112;
  a2->__node_ = first;
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const wchar_t *>> *this, std::vector<std::pair<unsigned long, const wchar_t *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const wchar_t *>>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(this, __sz - v2);
  }
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  uint64_t v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    *uint64_t v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *uint64_t v4 = 0;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::wcsub_match> *this, std::vector<std::wcsub_match>::size_type __n, std::vector<std::wcsub_match>::const_reference __u)
{
  value = this->__end_cap_.__value_;
  std::vector<std::pair<char, char>>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    std::vector<std::wcsub_match>::pointer end = this->__end_;
    std::vector<std::wcsub_match>::size_type v16 = end - begin;
    if (v16 >= __n) {
      std::vector<std::wcsub_match>::size_type v17 = __n;
    }
    else {
      std::vector<std::wcsub_match>::size_type v17 = end - begin;
    }
    if (v17)
    {
      unint64_t v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      size_t v19 = &end[__n - v16];
      std::vector<std::wcsub_match>::size_type v20 = 24 * __n - 24 * v16;
      do
      {
        std::pair<const wchar_t *, const wchar_t *> v21 = __u->std::pair<const wchar_t *, const wchar_t *>;
        *(void *)&end->matched = *(void *)&__u->matched;
        end->std::pair<const wchar_t *, const wchar_t *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::wcsub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::wcsub_match>::size_type v9 = __n;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<std::string>::__vallocate[abi:ne180100](this, v10);
    std::vector<std::wcsub_match>::pointer v11 = this->__end_;
    unint64_t v12 = &v11[__n];
    std::vector<std::wcsub_match>::size_type v13 = 24 * __n;
    do
    {
      std::pair<const wchar_t *, const wchar_t *> v14 = __u->std::pair<const wchar_t *, const wchar_t *>;
      *(void *)&v11->matched = *(void *)&__u->matched;
      v11->std::pair<const wchar_t *, const wchar_t *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

void **std::__split_buffer<std::__state<char>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t std::vector<std::__state<char>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::wcsub_match> *this, std::vector<std::wcsub_match>::size_type __sz, std::vector<std::wcsub_match>::const_reference __x)
{
  std::vector<std::wcsub_match>::size_type v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  BOOL v4 = __sz >= v3;
  std::vector<std::wcsub_match>::size_type v5 = __sz - v3;
  if (v5 != 0 && v4)
  {
    std::vector<std::sub_match<char const*>>::__append(this, v5, __x);
  }
  else if (!v4)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const __int32 *a2, const __int32 *a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0) {
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  }
  if (*(_DWORD *)(a1 + 28)) {
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6);
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const wchar_t *>> *this, std::vector<std::pair<unsigned long, const wchar_t *>>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  std::vector<std::wcsub_match>::size_type v5 = value;
  uint64_t v7 = p_end_cap[-1].__value_;
  if (__n <= value - v7)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 16 * __n);
      v7 += __n;
    }
    this->__end_ = v7;
  }
  else
  {
    uint64_t v8 = (char *)v7 - (char *)this->__begin_;
    unint64_t v9 = __n + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = (char *)v5 - (char *)this->__begin_;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      std::vector<std::wcsub_match>::size_type v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)p_end_cap, v12);
    }
    else {
      std::vector<std::wcsub_match>::size_type v13 = 0;
    }
    std::pair<const wchar_t *, const wchar_t *> v14 = (std::pair<unsigned long, const wchar_t *> *)&v13[16 * v10];
    char v15 = (std::pair<unsigned long, const wchar_t *> *)&v13[16 * v12];
    bzero(v14, 16 * __n);
    std::vector<std::wcsub_match>::size_type v16 = &v14[__n];
    std::vector<std::pair<unsigned long, const wchar_t *>>::pointer begin = this->__begin_;
    std::vector<std::wcsub_match>::pointer end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v14[-1] = end[-1];
        --v14;
        --end;
      }
      while (end != begin);
      std::vector<std::wcsub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
    {
      operator delete(end);
    }
  }
}

void std::match_results<char const*>::__init(std::match_results<const wchar_t *> *this, unsigned int __s, const __int32 *__f, const __int32 *__l, BOOL __no_update_pos)
{
  this->__unmatched_.first = __l;
  p_unmatched = &this->__unmatched_;
  this->__unmatched_.second = __l;
  this->__unmatched_.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&this->__matches_, __s, &this->__unmatched_);
  this->__prefix_.first = __f;
  this->__prefix_.second = __f;
  this->__prefix_.matched = 0;
  this->__suffix_ = *p_unmatched;
  if (!__no_update_pos) {
    this->__position_start_ = __f;
  }
  this->__ready_ = 1;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::resize(std::vector<std::wssub_match> *this, std::vector<std::wssub_match>::size_type __sz)
{
  std::vector<std::wssub_match>::size_type v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  BOOL v3 = __sz >= v2;
  std::vector<std::wssub_match>::size_type v4 = __sz - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v4);
  }
  else if (!v3)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

BOOL std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(const std::regex_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_iterator<std::__wrap_iter<const char *>, char> *__x)
{
  p_match = &this->__match_;
  std::vector<std::ssub_match>::pointer begin = this->__match_.__matches_.__begin_;
  std::vector<std::wcsub_match>::pointer end = p_match->__matches_.__end_;
  unint64_t v9 = &__x->__match_;
  std::vector<std::ssub_match>::pointer v7 = __x->__match_.__matches_.__begin_;
  uint64_t v8 = v9->__matches_.__end_;
  BOOL v10 = v8 == v7 && end == begin;
  if (end != begin && v8 != v7) {
    return this->__begin_.__i_ == __x->__begin_.__i_
  }
        && this->__end_.__i_ == __x->__end_.__i_
        && this->__pregex_ == __x->__pregex_
        && this->__flags_ == __x->__flags_
        && std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100]((uint64_t)begin, (uint64_t)v7) == 0;
  return v10;
}

void std::vector<int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, __n);
    std::vector<std::ssub_match>::pointer v7 = (unsigned int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v9 = (unsigned int *)&v6[4 * v8];
    std::vector<unsigned int>::pointer begin = this->__begin_;
    std::vector<std::wcsub_match>::pointer end = this->__end_;
    unint64_t v12 = v7;
    if (end != this->__begin_)
    {
      unint64_t v12 = v7;
      do
      {
        unsigned int v13 = *--end;
        *--unint64_t v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n, const std::vector<char>::value_type *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<char>::size_type v5 = __n;
    std::vector<quasar::rescoring::FeatureType>::__vallocate[abi:ne180100](this, __n);
    std::vector<char>::pointer end = this->__end_;
    std::vector<std::ssub_match>::pointer v7 = &end[v5];
    do
    {
      *end++ = *__x;
      --v5;
    }
    while (v5);
    this->__end_ = v7;
  }
  return this;
}

void sub_1B1A8A1D4(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    std::pair<const wchar_t *, const wchar_t *> v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  int v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *int v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_1B1A8A464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        }
        else {
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void std::vector<std::vector<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint8x8_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      uint8x8_t v12 = 0;
    }
    char v15 = v12;
    unint64_t v16 = &v12[24 * v8];
    float v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    float v17 = &v16[v14];
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1B1A8A6B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::vector<int>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      size_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v12);
    }
    else {
      size_t v13 = 0;
    }
    size_t v14 = &v13[8 * v10];
    char v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    unint64_t v16 = &v14[8 * a2];
    float v18 = (char *)*a1;
    float v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      float v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);
  JUMPOUT(0x1B3EA8670);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F0A5D8F8;
  std::vector<std::wssub_match>::size_type v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  BOOL v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
}

void std::__end_state<char>::~__end_state()
{
}

uint64_t std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    uint64_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      uint64_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  BOOL v7 = (std::string *)(v6 + 32);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_DWORD *)v6 + 14) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B1A8AC60(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    BOOL v7 = &end[__n];
    std::vector<int>::size_type v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_1B1A8AD68(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  BOOL v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    std::vector<int>::size_type v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      size_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v4, v13);
      std::vector<int>::size_type v8 = *a1;
      BOOL v7 = a1[1];
    }
    else
    {
      size_t v14 = 0;
    }
    char v15 = &v14[4 * v11];
    unint64_t v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    float v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void std::vector<long long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v3, a2);
    BOOL v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    unint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::vector<int>::pointer end = a1->__end_;
  BOOL v7 = a2;
  do
  {
    uint64_t v8 = v7;
    BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2) {
    operator new();
  }
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    uint64_t v9 = a1->__end_;
    unint64_t v10 = v8 + 1;
    uint64_t v11 = v8 + 1;
    do
    {
      uint64_t v8 = v11;
      uint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v11, a3);
    }
    while (v11 != v8);
    if (v8 == v10) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    std::vector<int>::pointer end = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, a2, a3);
    uint64_t result = (unsigned __int8 *)a2;
    if (v9 != (unsigned __int8 *)a2)
    {
      size_t v10 = a1->__marked_count_ + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, v10);
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    int64_t v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if (v5 == a3) {
      goto LABEL_20;
    }
    BOOL v7 = (uint64_t *)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if (v5 == a3) {
      goto LABEL_20;
    }
    do
    {
      uint64_t v8 = v5;
      int64_t v5 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v5, a3, v7);
    }
    while (v5 != v8);
    if (v8 == a3) {
      goto LABEL_20;
    }
    if (*v8 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v8 + 1;
  }
  return a2;
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  uint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  int v5 = *a2;
  if (v5 == 93) {
    return v4;
  }
  uint64_t v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  int v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_34;
    }
    if (v9 == 61)
    {
      uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
LABEL_34:
      uint64_t v6 = v10;
      char v20 = 0;
      goto LABEL_38;
    }
    goto LABEL_9;
  }
  uint64_t v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, a2 + 2, a3, (uint64_t)&v26);
  uint64_t v4 = (unsigned char *)v18;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  size_t v14 = (char *)v18;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      int v12 = *v4;
      if (v12 == 92)
      {
        uint64_t v13 = v4 + 1;
        if (v11)
        {
          size_t v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v13, a3, &v26);
        }
        else
        {
          size_t v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, &v26, v6);
          int v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    size_t v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (int v15 = *v14, v15 == 93)
    || (unint64_t v16 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v16 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          float v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_36:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0], v17->__r_.__value_.__s.__data_[1]);
          goto LABEL_37;
        }
        float v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_28;
      }
    }
    else if (*((unsigned char *)&v26.__r_.__value_.__s + 23))
    {
      float v17 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1) {
        goto LABEL_36;
      }
LABEL_28:
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0]);
    }
LABEL_37:
    char v20 = 1;
    uint64_t v4 = v14;
    goto LABEL_38;
  }
  memset(&v25, 0, sizeof(v25));
  uint64_t v4 = v14 + 2;
  if (v14 + 2 != a3 && *v16 == 91 && *v4 == 46)
  {
    uint64_t v22 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    uint64_t v4 = (unsigned char *)v22;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v16) = *v16;
    if (v16 == 92)
    {
      if (v11) {
        uint64_t v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v14 + 2, a3, &v25);
      }
      else {
        uint64_t v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v14 + 2), (std::basic_regex<char> *)a3, &v25, v6);
      }
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v16) = *v16;
  }
  std::string::operator=(&v25, (std::string::value_type)v16);
LABEL_56:
  std::string v24 = v26;
  memset(&v26, 0, sizeof(v26));
  std::string __p = v25;
  memset(&v25, 0, sizeof(v25));
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  char v20 = 1;
LABEL_38:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v20) {
    return v4;
  }
  return (unsigned char *)v6;
}

void sub_1B1A8B5B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 - 49) < 0) {
    operator delete(*(void **)(v28 - 72));
  }
  _Unwind_Resume(exception_object);
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::wstring, std::wstring>> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
}

void sub_1B1A8B6C0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  std::vector<unsigned int>::pointer begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::vector<int>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      uint64_t v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        uint64_t v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123) {
      return a2;
    }
    int v15 = a2 + 1;
    unint64_t v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a1, a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            uint64_t v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              uint64_t v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              unint64_t v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            unint64_t v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        int v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          uint64_t v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            uint64_t v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1;
          goto LABEL_45;
        }
        int v27 = -1;
        std::string v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v10, v23, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            uint64_t v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                uint64_t v13 = v25 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            unint64_t v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    uint64_t v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      uint64_t v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    uint64_t v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      uint64_t v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
}

void sub_1B1A8BBB8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      BOOL v8 = v6 == 40;
      unsigned int v7 = a2 + 1;
      BOOL v8 = !v8 || v7 == a3;
      if (!v8)
      {
        BOOL v8 = *v7 == 63;
        int v9 = a2 + 2;
        if (v8 && v9 != a3)
        {
          int v11 = *v9;
          if (v11 == 33)
          {
            std::regex_traits<char>::regex_traits(&v18.__traits_);
            memset(&v18.__flags_, 0, 40);
            v18.__flags_ = this->__flags_;
            int v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v18, v3 + 3, a3);
            unsigned int marked_count = v18.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v18, 1, this->__marked_count_);
            this->__marked_count_ += marked_count;
            if (v12 == a3 || *v12 != 41) {
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            }
            goto LABEL_31;
          }
          if (v11 == 61)
          {
            std::regex_traits<char>::regex_traits(&v18.__traits_);
            memset(&v18.__flags_, 0, 40);
            v18.__flags_ = this->__flags_;
            int v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v18, v3 + 3, a3);
            unsigned int v13 = v18.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v18, 0, this->__marked_count_);
            this->__marked_count_ += v13;
            if (v12 == a3 || *v12 != 41) {
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            }
LABEL_31:
            uint64_t v3 = v12 + 1;
            std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v18.__traits_.__loc_);
            return v3;
          }
        }
      }
      return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94) {
      return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    return ++v3;
  }
  if (a2 + 1 != a3)
  {
    int v15 = a2[1];
    if (v15 == 66)
    {
      BOOL v16 = 1;
    }
    else
    {
      if (v15 != 98) {
        return v3;
      }
      BOOL v16 = 0;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v16);
    v3 += 2;
  }
  return v3;
}

void sub_1B1A8BEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return (unsigned __int8 *)v3;
  }
  int v6 = *a2;
  if (v6 <= 62)
  {
    if (v6 != 40)
    {
      if (v6 == 46) {
        operator new();
      }
      if ((v6 - 42) >= 2) {
        goto LABEL_28;
      }
LABEL_34:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
    }
    if (a2 + 1 != a3)
    {
      if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
      {
        p_open_count = &this->__open_count_;
        ++this->__open_count_;
        int v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
        if (v9 == a3) {
          goto LABEL_35;
        }
        uint64_t v10 = v9;
        if (*v9 != 41) {
          goto LABEL_35;
        }
        goto LABEL_25;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
      unsigned int marked_count = this->__marked_count_;
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      int v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, v3 + 1, a3);
      if (v12 != a3)
      {
        uint64_t v10 = v12;
        if (*v12 == 41)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, marked_count);
LABEL_25:
          --*p_open_count;
          return (unsigned __int8 *)(v10 + 1);
        }
      }
    }
LABEL_35:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
  if (v6 <= 91)
  {
    if (v6 == 91)
    {
      return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    }
    if (v6 == 63) {
      goto LABEL_34;
    }
LABEL_28:
    return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
  }
  if (v6 != 92)
  {
    if (v6 == 123) {
      goto LABEL_34;
    }
    goto LABEL_28;
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>()
{
}

void sub_1B1A8C310(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  if (a2 != a3)
  {
    int v4 = *a2;
    if ((v4 & 0xF8) == 0x30 || (v4 & 0xFE) == 0x38)
    {
      int v5 = v4 - 48;
      *a4 = v5;
      if (++a2 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          int v6 = *a2;
          if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38) {
            break;
          }
          if (v5 >= 214748364) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          }
          int v5 = v6 + 10 * v5 - 48;
          *a4 = v5;
          if (++a2 == a3) {
            return a3;
          }
        }
      }
    }
  }
  return a2;
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  uint64_t v2 = (const std::locale *)MEMORY[0x1B3EA83E0]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x1E4FBA258]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x1E4FBA280]);
  return this;
}

void sub_1B1A8C430(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    int v4 = (char)*a2;
    BOOL v5 = (v4 - 36) > 0x3A || ((1 << (*a2 - 36)) & 0x7800000080004F1) == 0;
    if (v5 && (v4 - 123) >= 3)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      ++v3;
    }
  }
  return v3;
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
  }
}

void sub_1B1A8C558(_Unwind_Exception *a1, std::__split_buffer<std::wstring> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    std::vector<quasar::rescoring::FeatureType>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (unsigned char *)a1[1];
    unsigned int v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B1A8C5D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  size_t v5 = v6;
  unsigned int v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    BOOL v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      size_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v13);
      BOOL v8 = *a1;
      unsigned int v7 = a1[1];
    }
    else
    {
      size_t v14 = 0;
    }
    int v15 = &v14[8 * v11];
    BOOL v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    int v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    std::vector<unsigned int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1B1A8C764(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1B1A8C7E0(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned int v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  BOOL v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1B1A8CA54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x28uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1B1A8CB00(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B1A8CBB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::wstring> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

void std::vector<BOOL>::push_back(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    std::vector<BOOL>::reserve((char **)a1, v7);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v4 + 1;
  uint64_t v8 = *(char **)a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)&v8[8 * v9] | v10;
  }
  else {
    uint64_t v11 = *(void *)&v8[8 * v9] & ~v10;
  }
  *(void *)&v8[8 * v9] = v11;
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 0;
    long long v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    unint64_t v3 = (unint64_t)a1[1];
    uint64_t v8 = *a1;
    int v9 = 0;
    unint64_t v6 = &v8[8 * (v3 >> 6)];
    int v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    unint64_t v4 = *a1;
    *a1 = v10;
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    long long v11 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_1B1A8CD5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  long long v5 = value;
  std::vector<unsigned int>::pointer end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<unsigned int>::pointer begin = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      size_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v13);
      std::vector<unsigned int>::pointer begin = this->__begin_;
      std::vector<unsigned int>::pointer end = this->__end_;
    }
    else
    {
      size_t v14 = 0;
    }
    unint64_t v15 = &v14[4 * v11];
    float v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    float v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    *unint64_t v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    unint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B1A8D098(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            void *v7 = *v11;
            *unint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    unint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void std::vector<std::vector<unsigned int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    unint64_t v15 = v12;
    unint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    size_t v17 = &v16[v14];
    std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1B1A8D44C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *applesauce::CF::details::CFString_get_value<true>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  CStringPtr = (char *)CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    return std::string::basic_string[abi:ne180100]<0>((void *)a2, CStringPtr);
  }
  else
  {
    CFIndex Length = CFStringGetLength(a1);
    CFIndex maxBufLen = 0;
    v10.location = 0;
    v10.length = Length;
    CFStringGetBytes(a1, v10, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
    std::string::basic_string[abi:ne180100]((void *)a2, maxBufLen, 0);
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v7 = (UInt8 *)a2;
    }
    else {
      uint64_t v7 = *(UInt8 **)a2;
    }
    v11.location = 0;
    v11.length = Length;
    return (void *)CFStringGetBytes(a1, v11, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
  }
}

void sub_1B1A8D5CC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v8 = (void **)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      CFRange v10 = v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 2), (const std::string *)(v4 + 2));
        CFRange v10 = (void **)*v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v8);
        uint64_t v4 = (uint64_t *)*v4;
        if (v10) {
          BOOL v11 = v4 == a3;
        }
        else {
          BOOL v11 = 1;
        }
        uint64_t v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((int)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_multi<std::string const&>(a1, (uint64_t)(v4 + 2));
    uint64_t v4 = (uint64_t *)*v4;
  }
}

void sub_1B1A8D6B4(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1B1A8D6D0(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_multi<std::string const&>(void *a1, uint64_t a2)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node<std::string const&>((uint64_t)a1, a2, (uint64_t)&v4);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v4);
}

void sub_1B1A8D720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(void *a1, void *a2)
{
  uint64_t v4 = (unsigned __int8 *)(a2 + 2);
  unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)(a2 + 2));
  a2[1] = v5;
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6 = a1 + 32;
  float v7 = *(float *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 8);
  float v9 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  if (!v8 || (float)(v7 * (float)v8) < v9)
  {
    BOOL v10 = 1;
    if (v8 >= 3) {
      BOOL v10 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v11 = v10 | (2 * v8);
    unint64_t v12 = vcvtps_u32_f32(v9 / v7);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<false>(a1, v13);
    unint64_t v8 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v14.i16[0] = vaddlv_u8(v14);
  unint64_t v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v16 = a2;
    if (v8 <= a2) {
      unint64_t v16 = a2 % v8;
    }
  }
  else
  {
    unint64_t v16 = (v8 - 1) & a2;
  }
  size_t v17 = *(unsigned __int8 **)(*(void *)a1 + 8 * v16);
  if (v17)
  {
    uint64_t v18 = *(unsigned __int8 **)v17;
    if (*(void *)v17)
    {
      int v19 = 0;
      do
      {
        unint64_t v20 = *((void *)v18 + 1);
        if (v15 > 1)
        {
          unint64_t v21 = *((void *)v18 + 1);
          if (v20 >= v8) {
            unint64_t v21 = v20 % v8;
          }
        }
        else
        {
          unint64_t v21 = v20 & (v8 - 1);
        }
        if (v21 != v16) {
          break;
        }
        int v22 = v20 == a2 ? std::equal_to<std::string>::operator()[abi:ne180100](v6, v18 + 16, a3) : 0;
        if (v19 & (v22 ^ 1)) {
          break;
        }
        v19 |= v22;
        size_t v17 = *(unsigned __int8 **)v17;
        uint64_t v18 = *(unsigned __int8 **)v17;
      }
      while (*(void *)v17);
    }
  }
  return v17;
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, const std::vector<unsigned int>::value_type *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    std::vector<unsigned int>::pointer end = this->__end_;
    float v7 = &end[__n];
    std::vector<unsigned int>::size_type v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_1B1A8D984(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  float v7 = *v6;
  if (!*v6)
  {
    std::vector<unsigned int>::size_type v8 = (uint64_t **)v6;
    float v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    float v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *float v9 = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 9) = 0;
    *((void *)v7 + 7) = 0;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<quasar::rescoring::FeatureType>::__vallocate[abi:ne180100](this, __n);
    std::vector<char>::pointer end = this->__end_;
    unint64_t v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_1B1A8DAC0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](this, __n);
    std::vector<std::string>::pointer end = this->__end_;
    size_t v5 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(end, v5);
    this->__end_ = (std::vector<std::string>::pointer)((char *)end + v5);
  }
  return this;
}

void sub_1B1A8DB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t **std::__tree<unsigned int>::__assign_multi<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(uint64_t **result, unsigned int *a2, unsigned int *a3)
{
  size_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    float v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      std::vector<unsigned int>::size_type v8 = (uint64_t *)v6[1];
    }
    else {
      std::vector<unsigned int>::size_type v8 = v6;
    }
    uint64_t v14 = result;
    unint64_t v15 = v8;
    unint64_t v16 = v8;
    if (v8)
    {
      unint64_t v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        float v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = v9[7];
          std::__tree<unsigned int>::__node_insert_multi(v5, (uint64_t)v8);
          std::vector<unsigned int>::size_type v8 = v15;
          unint64_t v16 = v15;
          if (v15) {
            unint64_t v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          uint64_t v10 = (unsigned int *)*((void *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = *(unsigned int **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (unsigned int *)*((void *)v9 + 2);
              BOOL v11 = *(void *)a2 == (void)v9;
              float v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          float v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<unsigned int>::__emplace_multi<unsigned int const&>(v5, a2 + 7);
      unint64_t v12 = (unsigned int *)*((void *)a2 + 1);
      if (v12)
      {
        do
        {
          char v13 = v12;
          unint64_t v12 = *(unsigned int **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          char v13 = (unsigned int *)*((void *)a2 + 2);
          BOOL v11 = *(void *)v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1B1A8DCD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned int>::__emplace_multi<unsigned int const&>(uint64_t **a1, unsigned int *a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x20uLL);
  unsigned int v5 = *a2;
  *((_DWORD *)v4 + 7) = *a2;
  uint64_t v6 = a1 + 1;
  float v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v7;
        if (v5 >= *((_DWORD *)v7 + 7)) {
          break;
        }
        float v7 = (uint64_t *)*v7;
        std::vector<unsigned int>::size_type v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      float v7 = (uint64_t *)v7[1];
    }
    while (v7);
    std::vector<unsigned int>::size_type v8 = v6 + 1;
  }
  else
  {
    std::vector<unsigned int>::size_type v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t kaldi::quasar::ShortlistDataInManyFiles::ShortlistDataInManyFiles(uint64_t a1, long long *a2, long long *a3, uint64_t *a4)
{
  *(void *)a1 = &unk_1F0A51348;
  long long v5 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v5;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v6 = *a3;
  *(void *)(a1 + 48) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 32) = v6;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table(a1 + 56, a4);
  return a1;
}

double kaldi::quasar::ShortlistDataInManyFiles::GetConstrainedWordIds@<D0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v13 = a4;
  int v12 = a5;
  std::vector<unsigned int>::size_type v8 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 56), a2);
  if (v8)
  {
    v11[0] = a3;
    v11[1] = &v13;
    v11[2] = &v12;
    uint64_t v9 = *((unsigned int *)v8 + 14);
    if (v9 == -1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    uint64_t v14 = v11;
    ((void (*)(void **, unsigned __int8 *))off_1F0A63F58[v9])(&v14, v8 + 40);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    *(_DWORD *)(a6 + 32) = 1065353216;
  }
  return result;
}

void kaldi::quasar::ShortlistDataInManyFiles::Write(std::string::size_type a1, void *a2, uint64_t a3)
{
  char v10 = a3;
  kaldi::WriteToken(a2, a3, "<ShortlistTableInManyFiles>");
  if (*(char *)(a1 + 55) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
  }
  else {
    std::string __p = *(std::string *)(a1 + 32);
  }
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  for (uint64_t i = *(uint64_t ***)(a1 + 72); i; uint64_t i = (uint64_t **)*i)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(i + 2);
    __p.__r_.__value_.__l.__size_ = a1;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(i + 2);
    uint64_t v9 = &v10;
    uint64_t v7 = *((unsigned int *)i + 14);
    if (v7 == -1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    p_p = &__p;
    ((void (*)(std::string **, uint64_t **))off_1F0A63F68[v7])(&p_p, i + 5);
  }
}

void sub_1B1A8DF7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL kaldi::quasar::ShortlistDataInManyFiles::IsLanguagePairSupported(uint64_t a1, unsigned __int8 *a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 56), a2) != 0;
}

void *kaldi::quasar::ShortlistDataInManyFiles::Combine(uint64_t a1, void *lpsrc)
{
  if (!result) {
    __cxa_bad_cast();
  }
  uint64_t v4 = result[9];
  if (v4)
  {
    long long v5 = (void *)(a1 + 56);
    int v6 = *(_DWORD *)(v4 + 56);
    if (v6 == 1)
    {
      uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v5, (unsigned __int8 *)(v4 + 16));
      if (!v7)
      {
        for (uint64_t i = 0; i != 9; i += 3)
        {
          char v10 = &v19[i];
          v10[1] = 0;
          *((unsigned char *)v10 + 16) = 0;
        }
        for (uint64_t j = 0; j != 48; j += 24)
        {
          int v12 = &v17[j];
          *((void *)v12 + 1) = 0;
          v12[16] = 0;
        }
        std::allocate_shared[abi:ne180100]<kaldi::quasar::ShortlistDataOnDisk,std::allocator<kaldi::quasar::ShortlistDataOnDisk>,std::array<kaldi::MappableVector<int>,3ul>,std::array<kaldi::MappableVector<int>,2ul>,void>((uint64_t)v19, (uint64_t)v17, &v18);
        uint64_t v13 = 0;
        while (1)
        {
          if (v17[v13 + 40])
          {
            uint64_t v14 = *(void *)&v17[v13 + 24];
            if (v14) {
              MEMORY[0x1B3EA8630](v14, 0x1000C8077774924);
            }
          }
          v13 -= 24;
          if (v13 == -48)
          {
            uint64_t v15 = 0;
            while (1)
            {
              if (LOBYTE(v19[v15 + 8]))
              {
                uint64_t v16 = v19[v15 + 6];
                if (v16) {
                  MEMORY[0x1B3EA8630](v16, 0x1000C8077774924);
                }
              }
              v15 -= 3;
              if (v15 == -9) {
                kaldi::MappableVector<int>::append();
              }
            }
          }
        }
      }
      int v8 = *((_DWORD *)v7 + 14);
      if (v8 == 1) {
        kaldi::MappableVector<int>::append();
      }
      if (!v8)
      {
LABEL_26:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "Combine of not loaded shortlist data objects is not supported.");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
      }
    }
    else if (!v6)
    {
      goto LABEL_26;
    }
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  return result;
}

void sub_1B1A8E2D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void sub_1B1A8E308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100]();
  }
  _Unwind_Resume(a1);
}

void *std::operator<<[abi:ne180100]<std::char_traits<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);
}

void __clang_call_terminate(void *a1)
{
}

uint64_t std::array<kaldi::MappableVector<int>,2ul>::~array(uint64_t a1)
{
  for (uint64_t i = 0; i != -48; i -= 24)
  {
    if (*(unsigned char *)(a1 + i + 40))
    {
      uint64_t v3 = *(void *)(a1 + i + 24);
      if (v3) {
        MEMORY[0x1B3EA8630](v3, 0x1000C8077774924);
      }
    }
  }
  return a1;
}

uint64_t std::array<kaldi::MappableVector<int>,3ul>::~array(uint64_t a1)
{
  for (uint64_t i = 0; i != -72; i -= 24)
  {
    if (*(unsigned char *)(a1 + i + 64))
    {
      uint64_t v3 = *(void *)(a1 + i + 48);
      if (v3) {
        MEMORY[0x1B3EA8630](v3, 0x1000C8077774924);
      }
    }
  }
  return a1;
}

uint64_t kaldi::quasar::ShortlistDataInManyFiles::operator==(uint64_t a1, void *lpsrc)
{
  if (!v3) {
    __cxa_bad_cast();
  }
  if (*(void *)(a1 + 80) != v3[10]) {
    return 0;
  }
  size_t v4 = (unsigned __int8 *)v3[9];
  if (!v4) {
    return 1;
  }
  long long v5 = (void *)(a1 + 56);
  while (1)
  {
    uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v5, v4 + 16);
    if (!result) {
      break;
    }
    if (*(_DWORD *)(result + 56) != 1 || *((_DWORD *)v4 + 14) != 1) {
      return 0;
    }
    uint64_t result = kaldi::quasar::operator==(*(void *)(result + 40), *((void *)v4 + 5));
    if (!result) {
      return result;
    }
    size_t v4 = *(unsigned __int8 **)v4;
    if (!v4) {
      return 1;
    }
  }
  return result;
}

uint64_t kaldi::quasar::ShortlistDataInManyFiles::GetVocabSize(kaldi::quasar::ShortlistDataInManyFiles *this)
{
  if (!*((void *)this + 10))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "Vocab size requested on emtpy shortlist data");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  uint64_t v1 = *((void *)this + 9);
  uint64_t v2 = *(unsigned int *)(v1 + 56);
  if (v2 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  v5[0] = &v4;
  return ((uint64_t (*)(void *, uint64_t))off_1F0A63F78[v2])(v5, v1 + 40);
}

void sub_1B1A8E58C(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::quasar::ShortlistDataInManyFiles::LoadLanguagePair(uint64_t a1, uint64_t a2)
{
  char v4 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 56), (unsigned __int8 *)a2);
  if (v4)
  {
    long long v5 = v4;
    if (*((_DWORD *)v4 + 14) != 1)
    {
      kaldi::quasar::ShortlistDataBuilder::BuildShortlistDataOnDisk(a1 + 8, (const void **)a2, &v20);
      if (v20)
      {
        std::__variant_detail::__assignment<std::__variant_detail::__traits<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>::__assign_alt[abi:ne180100]<1ul,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>&>((uint64_t)(v5 + 40), (void *)v5 + 5, &v20);
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
          int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Shortlist data for language pair: ", 34);
          int v7 = *(char *)(a2 + 23);
          if (v7 >= 0) {
            uint64_t v8 = a2;
          }
          else {
            uint64_t v8 = *(void *)a2;
          }
          if (v7 >= 0) {
            uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
          }
          else {
            uint64_t v9 = *(void *)(a2 + 8);
          }
          char v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" is successfully loaded", 23);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v22);
        }
      }
      else if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
        uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Unable to read shortlist data for language pair: ", 49);
        int v17 = *(char *)(a2 + 23);
        if (v17 >= 0) {
          uint64_t v18 = a2;
        }
        else {
          uint64_t v18 = *(void *)a2;
        }
        if (v17 >= 0) {
          uint64_t v19 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v19 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
      }
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
    }
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    BOOL v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Language pair: ", 15);
    int v12 = *(char *)(a2 + 23);
    if (v12 >= 0) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = *(void *)a2;
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v14 = *(void *)(a2 + 8);
    }
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" is not supported. Skip loading.", 32);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
  }
}

void sub_1B1A8E740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ShortlistDataInManyFiles::~ShortlistDataInManyFiles(void **this)
{
  *this = &unk_1F0A51348;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::~__hash_table((uint64_t)(this + 7));
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F0A51348;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::~__hash_table((uint64_t)(this + 7));
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1B3EA8670);
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F0] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA340], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<kaldi::quasar::ShortlistDataInManyFiles::GetConstrainedWordIds(std::string const&,std::vector<int> const&,int,int)::$_0,kaldi::quasar::ShortlistDataInManyFiles::GetConstrainedWordIds(std::string const&,std::vector<int> const&,int,int)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>> const&>@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<kaldi::quasar::ShortlistDataInManyFiles::GetConstrainedWordIds(std::string const&,std::vector<int> const&,int,int)::$_0,kaldi::quasar::ShortlistDataInManyFiles::GetConstrainedWordIds(std::string const&,std::vector<int> const&,int,int)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>> const&>@<X0>(int ****a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return kaldi::quasar::ShortlistDataOnDisk::GetConstrainedWordIds(*a2, 0, **a1, *(_DWORD *)(*a1)[1], *(_DWORD *)(*a1)[2], a3);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  long long v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    long long v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5FFDF18, MEMORY[0x1E4FBA1C8]);
}

void sub_1B1A8EA00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  double result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<kaldi::quasar::ShortlistDataInManyFiles::Write(std::ostream &,BOOL)::$_0,kaldi::quasar::ShortlistDataInManyFiles::Write(std::ostream &,BOOL)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>> const&>(uint64_t ***a1)
{
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    uint64_t v1 = *a1;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Language: ", 10);
    int v3 = *((char *)*v1 + 23);
    if (v3 >= 0) {
      uint64_t v4 = (uint64_t)*v1;
    }
    else {
      uint64_t v4 = **v1;
    }
    if (v3 >= 0) {
      uint64_t v5 = *((unsigned __int8 *)*v1 + 23);
    }
    else {
      uint64_t v5 = (*v1)[1];
    }
    std::string::size_type v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" is not loaded. Nothing to write on disk.", 41);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v7);
  }
}

void sub_1B1A8EB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<kaldi::quasar::ShortlistDataInManyFiles::Write(std::ostream &,BOOL)::$_0,kaldi::quasar::ShortlistDataInManyFiles::Write(std::ostream &,BOOL)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>> const&>(uint64_t *a1, uint64_t *a2)
{
  v31[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)(*(void *)(*a1 + 8) + 32), *(void *)(*a1 + 8) + 8, &v30);
  std::__fs::filesystem::__create_directories(&v30, 0);
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v27, ".shortlist");
  int v6 = *(char *)(v4 + 23);
  if (v6 >= 0) {
    std::string::size_type v7 = (const std::string::value_type *)v4;
  }
  else {
    std::string::size_type v7 = *(const std::string::value_type **)v4;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(v4 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(v4 + 8);
  }
  uint64_t v9 = std::string::insert(v5, 0, v7, v8);
  std::string::size_type v10 = v9->__r_.__value_.__r.__words[0];
  v31[0] = v9->__r_.__value_.__l.__size_;
  *(void *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
  char v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v31 + 7);
  __p[0].__r_.__value_.__r.__words[0] = v10;
  __p[0].__r_.__value_.__l.__size_ = v31[0];
  *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = v11;
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)__p, (uint64_t)&v30, &v29);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (SHIBYTE(v29.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(__p, v29.__pn_.__r_.__value_.__l.__data_, v29.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    __p[0] = v29.__pn_;
  }
  kaldi::Output::Output(v27, __p, **(unsigned __int8 **)(v3 + 24), 1);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (!v27[0])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    unint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unable to create shortlist file: ", 33);
    std::string::size_type size = HIBYTE(v29.__pn_.__r_.__value_.__r.__words[2]);
    if ((v29.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v25 = &v29;
    }
    else {
      std::string v25 = (std::__fs::filesystem::path *)v29.__pn_.__r_.__value_.__r.__words[0];
    }
    if ((v29.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v29.__pn_.__r_.__value_.__l.__size_;
    }
    std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(v23, v25, (unsigned char *)v25 + size, 0x22u, 0x5Cu);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  uint64_t v12 = *a2;
  uint64_t v13 = (void *)kaldi::Output::Stream((kaldi::Output *)v27);
  kaldi::quasar::ShortlistDataOnDisk::Write(v12, v13, **(unsigned __int8 **)(v3 + 24));
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Shortlist file for language pair \"", 34);
    uint64_t v15 = *(void *)(v3 + 16);
    int v16 = *(char *)(v15 + 23);
    if (v16 >= 0) {
      uint64_t v17 = *(void *)(v3 + 16);
    }
    else {
      uint64_t v17 = *(void *)v15;
    }
    if (v16 >= 0) {
      uint64_t v18 = *(unsigned __int8 *)(v15 + 23);
    }
    else {
      uint64_t v18 = *(void *)(v15 + 8);
    }
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v17, v18);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\" is created: ", 14);
    std::string::size_type v21 = HIBYTE(v29.__pn_.__r_.__value_.__r.__words[2]);
    if ((v29.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v22 = &v29;
    }
    else {
      int v22 = (std::__fs::filesystem::path *)v29.__pn_.__r_.__value_.__r.__words[0];
    }
    if ((v29.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v21 = v29.__pn_.__r_.__value_.__l.__size_;
    }
    std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(v20, v22, (unsigned char *)v22 + v21, 0x22u, 0x5Cu);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
  }
  kaldi::Output::~Output((kaldi::Output *)v27);
  if (SHIBYTE(v29.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_1B1A8EDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::__fs::filesystem::path *std::__fs::filesystem::operator/[abi:ne180100]@<X0>(std::__fs::filesystem::path *this@<X1>, uint64_t a2@<X0>, std::__fs::filesystem::path *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&a3->__pn_, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__pn_.__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  return std::__fs::filesystem::path::operator/=[abi:ne180100](a3, this);
}

void sub_1B1A8EED8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::__fs::filesystem::path *std::__fs::filesystem::path::operator/=[abi:ne180100](std::__fs::filesystem::path *a1, std::__fs::filesystem::path *this)
{
  if (std::__fs::filesystem::path::__root_directory(this).__size_)
  {
    std::string::operator=(&a1->__pn_, &this->__pn_);
  }
  else
  {
    if (std::__fs::filesystem::path::__filename(a1).__size_) {
      std::string::push_back(&a1->__pn_, 47);
    }
    int v4 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (v4 >= 0) {
      uint64_t v5 = this;
    }
    else {
      uint64_t v5 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    }
    if (v4 >= 0) {
      std::string::size_type size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = this->__pn_.__r_.__value_.__l.__size_;
    }
    std::string::append(&a1->__pn_, (const std::string::value_type *)v5, size);
  }
  return a1;
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void *std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(void *a1, unsigned char *a2, unsigned char *a3, unsigned __int8 __c, unsigned __int8 a5)
{
  memset(&v15, 0, sizeof(v15));
  std::string::push_back(&v15, __c);
  while (a2 != a3)
  {
    int v10 = *a2;
    if (v10 == a5 || v10 == __c)
    {
      std::string::push_back(&v15, a5);
      LOBYTE(v10) = *a2;
    }
    std::string::push_back(&v15, v10);
    ++a2;
  }
  std::string::push_back(&v15, __c);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v11 = &v15;
  }
  else {
    char v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v15.__r_.__value_.__l.__size_;
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v11, size);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  return v13;
}

void sub_1B1A8F104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B3EA7E70](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      int v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1B3EA7E80](v13);
  return a1;
}

void sub_1B1A8F260(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x1B3EA7E80](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1B1A8F240);
}

void sub_1B1A8F2B4(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_1B1A8F434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<kaldi::quasar::ShortlistDataInManyFiles::GetVocabSize(void)::$_0,kaldi::quasar::ShortlistDataInManyFiles::GetVocabSize(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<kaldi::quasar::ShortlistDataInManyFiles::GetVocabSize(void)::$_0,kaldi::quasar::ShortlistDataInManyFiles::GetVocabSize(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*(void *)(*a2 + 16) < 2uLL)
  {
    int v4 = *(_DWORD *)(v2 + 40);
    uint64_t v3 = *(_DWORD **)(v2 + 8);
  }
  else
  {
    uint64_t v3 = *(_DWORD **)(v2 + 8);
    int v4 = v3[1];
  }
  return (v4 - *v3);
}

void kaldi::KaldiLogMessage::~KaldiLogMessage(kaldi::KaldiLogMessage *this)
{
  uint64_t v2 = (void (*)(uint64_t))kaldi::KaldiLogMessage::g_logger;
  std::stringbuf::str();
  v2((uint64_t)&__p);
  if (v6 < 0) {
    operator delete(__p);
  }
  uint64_t v3 = MEMORY[0x1E4FBA418];
  uint64_t v4 = *MEMORY[0x1E4FBA418];
  *(void *)this = *MEMORY[0x1E4FBA418];
  *(void *)((char *)this + *(void *)(v4 - 24)) = *(void *)(v3 + 24);
  *((void *)this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520]((char *)this + 112);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,0>(uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1F0A63F88[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN5kaldi6quasar24ShortlistDataInManyFiles28NotLoadedShortListDataOnDiskENS_10shared_ptrINS9_19ShortlistDataOnDiskEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSB_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)double result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  uint64_t v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    *uint64_t v3 = 0;
    v3[1] = 0;
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  int v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  int v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      int v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void *std::allocate_shared[abi:ne180100]<kaldi::quasar::ShortlistDataOnDisk,std::allocator<kaldi::quasar::ShortlistDataOnDisk>,std::array<kaldi::MappableVector<int>,3ul>,std::array<kaldi::MappableVector<int>,2ul>,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x98uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::quasar::ShortlistDataOnDisk>::__shared_ptr_emplace[abi:ne180100]<std::array<kaldi::MappableVector<int>,3ul>,std::array<kaldi::MappableVector<int>,2ul>,std::allocator<kaldi::quasar::ShortlistDataOnDisk>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B1A8FFD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::quasar::ShortlistDataOnDisk>::__shared_ptr_emplace[abi:ne180100]<std::array<kaldi::MappableVector<int>,3ul>,std::array<kaldi::MappableVector<int>,2ul>,std::allocator<kaldi::quasar::ShortlistDataOnDisk>,0>(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F300;
  std::allocator<kaldi::quasar::ShortlistDataOnDisk>::construct[abi:ne180100]<kaldi::quasar::ShortlistDataOnDisk,std::array<kaldi::MappableVector<int>,3ul>,std::array<kaldi::MappableVector<int>,2ul>>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1B1A90048(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::ShortlistDataOnDisk>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F300;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::ShortlistDataOnDisk>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F300;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::ShortlistDataOnDisk>::__on_zero_shared(uint64_t a1)
{
  return std::allocator<kaldi::quasar::ShortlistDataOnDisk>::destroy[abi:ne180100]((uint64_t)&v2, (uint64_t *)(a1 + 24));
}

uint64_t std::allocator<kaldi::quasar::ShortlistDataOnDisk>::construct[abi:ne180100]<kaldi::quasar::ShortlistDataOnDisk,std::array<kaldi::MappableVector<int>,3ul>,std::array<kaldi::MappableVector<int>,2ul>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (uint64_t i = 0; i != 72; i += 24)
  {
    char v5 = &v18[i];
    uint64_t v6 = a3 + i;
    uint64_t v7 = *(void *)(a3 + i + 8);
    *(void *)char v5 = *(void *)(a3 + i);
    *((void *)v5 + 1) = v7;
    v5[16] = *(unsigned char *)(a3 + i + 16);
    *(void *)uint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    *(unsigned char *)(v6 + 16) = 0;
  }
  char v8 = 0;
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = 3 * v9;
    int v11 = &v17[8 * v10];
    uint64_t v12 = a4 + 8 * v10;
    uint64_t v13 = *(void *)(v12 + 8);
    *(void *)int v11 = *(void *)v12;
    *((void *)v11 + 1) = v13;
    v11[16] = *(unsigned char *)(v12 + 16);
    LOBYTE(v11) = v8;
    *(void *)uint64_t v12 = 0;
    *(void *)(v12 + 8) = 0;
    *(unsigned char *)(v12 + 16) = 0;
    char v8 = 1;
    uint64_t v9 = 1;
  }
  while ((v11 & 1) == 0);
  uint64_t result = kaldi::quasar::ShortlistDataOnDisk::ShortlistDataOnDisk(a2, v18, v17);
  for (uint64_t j = 0; j != -48; j -= 24)
  {
    if (v17[j + 40])
    {
      uint64_t result = *(void *)&v17[j + 24];
      if (result) {
        uint64_t result = MEMORY[0x1B3EA8630](result, 0x1000C8077774924);
      }
    }
  }
  for (uint64_t k = 0; k != -72; k -= 24)
  {
    if (v18[k + 64])
    {
      uint64_t result = *(void *)&v18[k + 48];
      if (result) {
        uint64_t result = MEMORY[0x1B3EA8630](result, 0x1000C8077774924);
      }
    }
  }
  return result;
}

void sub_1B1A9021C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::array<kaldi::MappableVector<int>,2ul>::~array((uint64_t)va);
  std::array<kaldi::MappableVector<int>,3ul>::~array((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<kaldi::quasar::ShortlistDataOnDisk>::destroy[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (LOBYTE(a2[i + 15]))
    {
      uint64_t v4 = a2[i + 13];
      if (v4) {
        MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
      }
    }
  }
  for (uint64_t j = 0; j != -9; j -= 3)
  {
    if (LOBYTE(a2[j + 9]))
    {
      uint64_t v6 = a2[j + 7];
      if (v6) {
        MEMORY[0x1B3EA8630](v6, 0x1000C8077774924);
      }
    }
  }
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v8();
  }
  return result;
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void kaldi::MappableVector<int>::append()
{
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__emplace_unique_key_args<std::string,std::string const&,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>(uint64_t a1, unsigned __int8 *a2, long long *a3, uint64_t a4)
{
  uint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__construct_node_hash<std::string const&,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>(a1, v11, a3, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *unint64_t v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_1B1A906E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__construct_node_hash<std::string const&,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = (char *)operator new(0x40uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)unint64_t v10 = 0;
  *((void *)v10 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>,0>((std::string *)(v10 + 16), a3, a4);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_1B1A90768(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>,0>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  LODWORD(this[1].__r_.__value_.__r.__words[2]) = 1;
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>::__assign_alt[abi:ne180100]<1ul,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>&>(uint64_t a1, void *a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 16) == 1)
  {
    uint64_t v4 = *a3;
    uint64_t v3 = a3[1];
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
    long long v5 = (std::__shared_weak_count *)a2[1];
    *a2 = v4;
    a2[1] = v3;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>::__emplace[abi:ne180100]<1ul,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>&>(a1, a3);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>::__emplace[abi:ne180100]<1ul,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>&>(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1F0A63F88[v4])(&v7, a1);
  }
  *(_DWORD *)(a1 + 16) = -1;
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 16) = 1;
  return a1;
}

uint64_t kaldi::quasar::Shortlist::Shortlist(uint64_t result, uint64_t *a2)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = -1;
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)(result + 32) = v2;
  return result;
}

unint64_t kaldi::quasar::Shortlist::GetSoftmaxIdx(kaldi::quasar::Shortlist *this, int a2)
{
  uint64_t v2 = (_DWORD *)*((void *)this + 1);
  if (v2 == *(_DWORD **)this)
  {
    uint64_t v4 = (_DWORD *)*((void *)this + 1);
  }
  else
  {
    unint64_t v3 = ((uint64_t)v2 - *(void *)this) >> 2;
    uint64_t v4 = *(_DWORD **)this;
    do
    {
      unint64_t v5 = v3 >> 1;
      uint64_t v6 = &v4[v3 >> 1];
      int v8 = *v6;
      char v7 = v6 + 1;
      v3 += ~(v3 >> 1);
      if (v8 < a2) {
        uint64_t v4 = v7;
      }
      else {
        unint64_t v3 = v5;
      }
    }
    while (v3);
  }
  if (v2 == v4 || *v4 != a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Shortlist target symbol id ", 27);
    unint64_t v10 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, " not in shortlist!");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  return ((unint64_t)v4 - *(void *)this) >> 2;
}

uint64_t kaldi::quasar::Shortlist::MapShortlist(std::vector<int> *a1, uint64_t a2, int a3, int a4, int a5, int a6, int **a7, int **a8, void *a9, char a10)
{
  int v70 = a4;
  int v71 = a3;
  int v16 = (*(uint64_t (**)(std::vector<int>::pointer))(*(void *)a1[1].__end_ + 16))(a1[1].__end_);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v64);
    unint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"Language pair: ", 15);
    int v18 = *(char *)(a2 + 23);
    if (v18 >= 0) {
      uint64_t v19 = a2;
    }
    else {
      uint64_t v19 = *(void *)a2;
    }
    if (v18 >= 0) {
      uint64_t v20 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v20 = *(void *)(a2 + 8);
    }
    unint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    if (v16) {
      unint64_t v22 = " is supported";
    }
    else {
      unint64_t v22 = " is not supported";
    }
    if (v16) {
      uint64_t v23 = 13;
    }
    else {
      uint64_t v23 = 17;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v64);
  }
  if ((a6 + a5 < 0) ^ __OFADD__(a6, a5) | (a6 + a5 == 0)) {
    char v24 = 0;
  }
  else {
    char v24 = v16;
  }
  if (v24)
  {
    (**(void (***)(void *__return_ptr))a1[1].__end_)(v68);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v68, &v71, &v71);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v68, &v70, &v70);
    unint64_t v25 = *a7;
    uint64_t v26 = a7[1];
    while (v25 != v26)
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v68, v25, v25);
      ++v25;
    }
    unint64_t v38 = *a8;
    unint64_t v39 = a8[1];
    while (v38 != v39)
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v68, v38, v38);
      ++v38;
    }
    unint64_t v40 = (void *)*a9;
    if ((void *)*a9 != a9 + 1)
    {
      do
      {
        v64[0] = *((_DWORD *)v40 + 7);
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__erase_unique<int>(v68, v64);
        unint64_t v41 = (void *)v40[1];
        if (v41)
        {
          do
          {
            int v42 = v41;
            unint64_t v41 = (void *)*v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            int v42 = (void *)v40[2];
            BOOL v43 = *v42 == (void)v40;
            unint64_t v40 = v42;
          }
          while (!v43);
        }
        unint64_t v40 = v42;
      }
      while (v42 != a9 + 1);
    }
    std::vector<unsigned int>::pointer begin = a1->__begin_;
    a1->__end_ = a1->__begin_;
    if (v69)
    {
      uint64_t v45 = 0;
      std::vector<char>::pointer v46 = v69;
      do
      {
        ++v45;
        std::vector<char>::pointer v46 = (void *)*v46;
      }
      while (v46);
    }
    else
    {
      uint64_t v45 = 0;
    }
    std::vector<int>::__insert_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<int,void *> *>,std::__hash_const_iterator<std::__hash_node<int,void *> *>>(a1, begin, v69, 0, v45);
    std::__sort<std::__less<int,int> &,int *>();
    std::vector<std::string>::pointer end = a1->__end_;
    std::vector<std::pair<std::string, std::string>>::pointer v49 = wmemchr(a1->__begin_, v71, end - a1->__begin_);
    if (v49) {
      int64_t v50 = v49;
    }
    else {
      int64_t v50 = end;
    }
    LODWORD(a1[1].__begin_) = (unint64_t)((char *)v50 - (char *)a1->__begin_) >> 2;
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v64);
      uint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"Using shortlist for language_pair: ", 35);
      int v52 = *(char *)(a2 + 23);
      uint64_t v53 = v52 >= 0 ? a2 : *(void *)a2;
      uint64_t v54 = v52 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
      uint64_t v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, v53, v54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)", reducing Voc size to ", 23);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v64);
      if (kaldi::g_kaldi_verbose_level >= 5)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v64);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Shortlisted vocabulary:", 23);
        std::vector<int>::pointer v56 = a1->__begin_;
        int v57 = a1->__end_;
        if (a1->__begin_ != v57)
        {
          do
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" ", 1);
            std::ostream::operator<<();
            ++v56;
          }
          while (v56 != v57);
        }
        if (kaldi::g_kaldi_verbose_level > 4)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v63, 5);
          std::stringbuf::str();
          if ((v62 & 0x80u) == 0) {
            std::string::size_type v58 = __p;
          }
          else {
            std::string::size_type v58 = (void **)__p[0];
          }
          if ((v62 & 0x80u) == 0) {
            uint64_t v59 = v62;
          }
          else {
            uint64_t v59 = (uint64_t)__p[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v58, v59);
          if ((char)v62 < 0) {
            operator delete(__p[0]);
          }
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v63);
        }
        *(void *)std::string::size_type v64 = *MEMORY[0x1E4FBA408];
        uint64_t v60 = *(void *)(MEMORY[0x1E4FBA408] + 72);
        *(void *)((char *)v64 + *(void *)(*(void *)v64 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
        v65[0] = v60;
        v65[1] = MEMORY[0x1E4FBA470] + 16;
        if (v66 < 0) {
          operator delete((void *)v65[9]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1B3EA8520](&v67);
      }
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v68);
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v64);
      uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"Has shortlist, but disabled due to shortlist-lang-pair = ", 57);
      int v28 = *(char *)(a2 + 23);
      if (v28 >= 0) {
        uint64_t v29 = a2;
      }
      else {
        uint64_t v29 = *(void *)a2;
      }
      if (v28 >= 0) {
        uint64_t v30 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v30 = *(void *)(a2 + 8);
      }
      uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v29, v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", shortlist-cond-n = ", 21);
      uint64_t v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", shortlist-freq-n = ", 21);
      std::ostream::operator<<();
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v64);
    }
    if (!a10)
    {
      uint64_t result = 0;
      a1->__end_ = a1->__begin_;
      return result;
    }
    int v33 = (*(uint64_t (**)(std::vector<int>::pointer))(*(void *)a1[1].__end_ + 40))(a1[1].__end_) - 1;
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v64);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"Shortlist is disabled, and fallback to use full vocab (", 55);
      uint64_t v34 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)") instead.", 10);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v64);
    }
    std::vector<int>::resize((std::vector<unsigned int> *)a1, v33);
    std::vector<int>::pointer v35 = a1->__begin_;
    std::vector<int>::pointer v36 = a1->__end_;
    if (a1->__begin_ != v36)
    {
      int v37 = 0;
      do
        *v35++ = v37++;
      while (v35 != v36);
    }
    LODWORD(a1[1].__begin_) = v71;
  }
  return 1;
}

void sub_1B1A90FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a51);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v51 - 128);
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  unint64_t v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  int v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1B1A9138C(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1B3EA8520](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B3EA8520](a1 + 128);
  return a1;
}

uint64_t kaldi::quasar::Shortlist::LoadLanguagePair(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 48))();
}

void kaldi::KaldiVlogMessage::~KaldiVlogMessage(kaldi::KaldiVlogMessage *this)
{
  uint64_t v2 = (void (*)(uint64_t))kaldi::KaldiVlogMessage::g_logger;
  std::stringbuf::str();
  v2((uint64_t)&__p);
  if (v6 < 0) {
    operator delete(__p);
  }
  uint64_t v3 = MEMORY[0x1E4FBA418];
  uint64_t v4 = *MEMORY[0x1E4FBA418];
  *(void *)this = *MEMORY[0x1E4FBA418];
  *(void *)((char *)this + *(void *)(v4 - 24)) = *(void *)(v3 + 24);
  *((void *)this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520]((char *)this + 112);
}

void std::vector<int>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

uint64_t std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1B1A91900(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__erase_unique<int>(void *a1, int *a2)
{
  uint64_t result = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a1, a2);
  if (result)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::remove(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  std::string __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  unint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    unint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  void *v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

int *std::vector<int>::__insert_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<int,void *> *>,std::__hash_const_iterator<std::__hash_node<int,void *> *>>(std::vector<int> *a1, int *__src, void *a3, void *a4, uint64_t a5)
{
  uint8x8_t v5 = __src;
  if (a5 >= 1)
  {
    unint64_t v7 = a3;
    value = a1->__end_cap_.__value_;
    p_end_cap = (std::allocator<int> *)&a1->__end_cap_;
    uint64_t v10 = value;
    unint64_t v12 = *((void *)p_end_cap - 1);
    if (a5 <= (uint64_t)((uint64_t)value - v12) >> 2)
    {
      unint64_t v19 = a5 + 1;
      unint64_t v20 = a3;
      do
      {
        unint64_t v20 = (void *)*v20;
        --v19;
      }
      while (v19 > 1);
      uint64_t v21 = (uint64_t)(v12 - (void)__src) >> 2;
      if (v21 >= a5)
      {
        uint64_t v23 = (int *)*((void *)p_end_cap - 1);
        uint64_t v21 = a5;
      }
      else
      {
        if ((uint64_t)(v12 - (void)__src) < 1)
        {
          unint64_t v20 = a3;
        }
        else
        {
          unint64_t v22 = v21 + 1;
          unint64_t v20 = a3;
          do
          {
            unint64_t v20 = (void *)*v20;
            --v22;
          }
          while (v22 > 1);
        }
        uint64_t v23 = (int *)*((void *)p_end_cap - 1);
        if (v20 != a4)
        {
          uint64_t v27 = v20;
          int v28 = (_DWORD *)*((void *)p_end_cap - 1);
          do
          {
            *v28++ = *((_DWORD *)v27 + 4);
            uint64_t v27 = (void *)*v27;
            ++v23;
          }
          while (v27 != a4);
        }
        a1->__end_ = v23;
      }
      if (v21 >= 1)
      {
        uint64_t v29 = (char *)&__src[a5];
        uint64_t v30 = &v23[-a5];
        uint64_t v31 = v23;
        if ((unint64_t)v30 < v12)
        {
          uint64_t v31 = v23;
          do
          {
            int v32 = *v30++;
            *v31++ = v32;
          }
          while ((unint64_t)v30 < v12);
        }
        a1->__end_ = v31;
        if (v23 != (int *)v29) {
          memmove(&v23[-(((char *)v23 - v29) >> 2)], __src, (char *)v23 - v29);
        }
        if (v20 != v7)
        {
          int v33 = v5;
          do
          {
            *v33++ = *((_DWORD *)v7 + 4);
            unint64_t v7 = (void *)*v7;
          }
          while (v7 != v20);
        }
      }
    }
    else
    {
      std::vector<unsigned int>::pointer begin = (char *)a1->__begin_;
      unint64_t v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
      if (v14 >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = ((char *)__src - begin) >> 2;
      uint64_t v16 = (char *)v10 - begin;
      if (v16 >> 1 > v14) {
        unint64_t v14 = v16 >> 1;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      __v.__end_cap_.__value_ = p_end_cap;
      if (v17) {
        uint64_t v18 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      char v24 = &v18[v15];
      __v.__first_ = v18;
      __v.__begin_ = v24;
      __v.__end_cap_.__value_ = &v18[v17];
      uint64_t v25 = 4 * a5;
      uint64_t v26 = &v24[a5];
      do
      {
        *v24++ = *((_DWORD *)v7 + 4);
        unint64_t v7 = (void *)*v7;
        v25 -= 4;
      }
      while (v25);
      __v.__end_ = v26;
      uint8x8_t v5 = std::vector<int>::__swap_out_circular_buffer(a1, &__v, v5);
      if (__v.__end_ != __v.__begin_) {
        __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
      }
                                                       + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
      if (__v.__first_) {
        operator delete(__v.__first_);
      }
    }
  }
  return v5;
}

void sub_1B1A91DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::vector<int>::pointer std::vector<int>::__swap_out_circular_buffer(std::vector<int> *this, std::__split_buffer<int> *__v, std::vector<int>::pointer __p)
{
  std::vector<unsigned int>::pointer begin = __v->__begin_;
  std::vector<int>::pointer v6 = this->__begin_;
  unint64_t v7 = begin;
  if (this->__begin_ != __p)
  {
    std::vector<int>::pointer v8 = __p;
    unint64_t v7 = __v->__begin_;
    do
    {
      int v9 = *--v8;
      *--unint64_t v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  std::vector<std::string>::pointer end = this->__end_;
  std::__split_buffer<int>::pointer v11 = __v->__end_;
  int64_t v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    unint64_t v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<int>::pointer)((char *)v11 + v12);
  float v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  unint64_t v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void kaldi::quasar::ShortlistNnetBuilder::ConstrainSoftmax(kaldi::nnet1::Nnet *a1)
{
  uint64_t Component = kaldi::nnet1::Nnet::GetComponent(a1, ((*((void *)a1 + 1) - *(void *)a1) >> 3) - 1);
  (*(uint64_t (**)(uint64_t))(*(void *)Component + 24))(Component);
  operator new();
}

void sub_1B1A92984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, kaldi::nnet1::Nnet **a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::Vector<float>::Destroy(v5 - 112);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](a4, 0);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ShortlistNnetBuilder::ConstructNnet(uint64_t a1)
{
}

void sub_1B1A92BD0(_Unwind_Exception *a1)
{
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::SetLinearity(uint64_t a1, uint64_t a2)
{
  kaldi::MatrixBase<float>::NumRows(a2);
  unint64_t v4 = (kaldi::quasar::Vocab *)(a1 + 48);
  kaldi::quasar::Vocab::VocabSize(v4);
  kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)v4);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat((uint64_t)v4, a2);
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<signed char>::QuantizedAffineTransform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1F0A4D838;
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a1 + 48, a3, a2);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = &unk_1F0A517C0;
  *(void *)(a1 + 120) = 0;
  kaldi::CuVector<float>::Resize(a1 + 96, a3, 0);
  return a1;
}

void sub_1B1A92D30(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::~QuantizedAffineTransform(kaldi::nnet1::Component *a1)
{
  kaldi::nnet1::QuantizedAffineTransform<signed char>::~QuantizedAffineTransform(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A4D838;
  uint64_t v2 = (uint64_t)a1 + 48;
  kaldi::CuVector<float>::~CuVector((void *)a1 + 12);
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v2);
  kaldi::nnet1::Component::~Component(a1);
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::Copy()
{
}

void sub_1B1A92E50(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v2);
  kaldi::nnet1::Component::~Component(v1);
  MEMORY[0x1B3EA8670](v1, 0x10D1C40B6DC7CF1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<signed char>::GetType()
{
  return 1033;
}

uint64_t kaldi::nnet1::Component::IsUpdatable(kaldi::nnet1::Component *this)
{
  return 0;
}

void kaldi::nnet1::Component::CountZeroCorr(kaldi::nnet1::Component *this, int *a2, int *a3)
{
  *a2 = 0;
  *a3 = 0;
}

void kaldi::nnet1::Component::VectorizeWeightsCorrs(uint64_t a1)
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"VectorizeWeightsCorrs", 21);
  int8x8_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" is not implemented for ", 24);
  unint64_t v4 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  kaldi::nnet1::Component::TypeToMarker(v4, &v8);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v5 = &v8;
  }
  else {
    uint64_t v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  }
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v8.__r_.__value_.__l.__size_;
  }
  unint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, size);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " component.");
  std::string::~string(&v8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
}

uint64_t kaldi::nnet1::Component::OutputRowCount(kaldi::nnet1::Component *this, uint64_t a2)
{
  return a2;
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::Info(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, "\n  linearity is quantized");
  unint64_t v4 = std::string::append(&v11, "\n  bias");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>(a1 + 96);
  if ((v10 & 0x80u) == 0) {
    std::vector<int>::pointer v6 = __p;
  }
  else {
    std::vector<int>::pointer v6 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v7 = v10;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string v8 = std::string::append(&v12, (const std::string::value_type *)v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1B1A93078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::nnet1::Component::InfoGradient@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void *kaldi::nnet1::Component::InfoPropagate@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void *kaldi::nnet1::Component::InfoBackPropagate@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::WriteData(uint64_t a1, void *a2, int a3, int a4)
{
  kaldi::QuantizedMatrix<signed char>::Write((int *)(a1 + 48), a2, a3, a4);
  kaldi::CuVectorBase<float>::Write(a1 + 96, a2, a3);
}

uint64_t *kaldi::nnet1::QuantizedAffineTransform<signed char>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  LODWORD(a4) = 1.0;
  kaldi::CuMatrixBase<float>::AddMatMat<signed char>(a3, a2, 111, (kaldi::quasar::Vocab *)(a1 + 48), 112, a4, 0.0);
  return kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 96, 1.0, 1.0);
}

void kaldi::nnet1::Component::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v10 = &unk_1F0A472A0;
  *(void *)&long long v11 = v4;
  *((void *)&v11 + 1) = v3 | 0x100000000;
  LODWORD(v12) = v3;
  DWORD1(v12) = v3;
  *((void *)&v12 + 1) = *(void *)(a2 + 24);
  unsigned int v5 = *(_DWORD *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 8);
  std::string::size_type v7 = &unk_1F0A472A0;
  *(void *)&long long v8 = v6;
  *((void *)&v8 + 1) = v5 | 0x100000000;
  LODWORD(v9) = v5;
  DWORD1(v9) = v5;
  *((void *)&v9 + 1) = *(void *)(a3 + 24);
  (*(void (**)(uint64_t, void **, void **, void))(*(void *)a1 + 112))(a1, &v10, &v7, 0);
  std::string::size_type v7 = &unk_1F0A472A0;
  long long v8 = 0u;
  long long v9 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v7);
  unsigned __int8 v10 = &unk_1F0A472A0;
  long long v11 = 0u;
  long long v12 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v10);
}

void sub_1B1A932BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16 = v14;
  *uint64_t v15 = 0u;
  v15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  *uint64_t v16 = 0u;
  v16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::BackpropagateFnc()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"BackpropagateFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

char *kaldi::nnet1::Component::SetWorkspace(uint64_t a1, uint64_t a2)
{
  uint64_t result = (char *)(a1 + 24);
  if (result != (char *)a2) {
    return std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  return result;
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  kaldi::CuVectorBase<float>::Set(a4, *(float *)(*(void *)(a1 + 104) + 4 * a3));
  kaldi::QuantizedMatrixBase<signed char>::Row(a1 + 48, a3, (uint64_t)v9);
  LODWORD(v8) = 1.0;
  kaldi::CuVectorBase<float>::AddMatVec<signed char>(a4, a2, 111, (uint64_t)v9, v8, 1.0);
}

float kaldi::nnet1::QuantizedAffineTransform<signed char>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3)
{
  float v4 = *(float *)(*(void *)(a1 + 104) + 4 * a3);
  kaldi::QuantizedMatrixBase<signed char>::Row(a1 + 48, a3, (uint64_t)v6);
  return v4 + kaldi::VecVec<float,signed char>(a2, (uint64_t)v6);
}

double kaldi::nnet1::QuantizedAffineTransform<signed char>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::QuantizedMatrix<signed char>::Read((float *)(a1 + 48), a2, a3, a4);
  return kaldi::CuVector<float>::Read(a1 + 96, a2, a3);
}

void *std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1A93558(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void kaldi::nnet1::MomentStatistics<float>(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  memset(v3, 0, sizeof(v3));
  kaldi::Vector<float>::Resize(v3, v2, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)a1, (uint64_t)v3);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v3);
  kaldi::Vector<float>::Destroy((uint64_t)v3);
}

{
  double v2;
  double v3;
  float v4;
  int v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void v12[11];
  char v13;
  uint64_t v14;
  float *v15[3];
  void *v16;
  uint64_t v17;
  uint64_t v18;

  uint64_t v16 = 0;
  unint64_t v17 = 0;
  uint64_t v18 = 0;
  kaldi::Vector<float>::Resize(&v16, *(unsigned int *)(a1 + 8), 1);
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v16, (const void **)a1);
  memset(v15, 0, sizeof(v15));
  kaldi::Vector<float>::Resize((void **)v15, *(unsigned int *)(a1 + 8), 1);
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)v15, (const void **)a1);
  uint64_t v2 = kaldi::VectorBase<float>::Sum(a1);
  kaldi::VectorBase<float>::Add((uint64_t)&v16, -(float)(*(float *)&v2 / (float)*(int *)(a1 + 8)));
  kaldi::Vector<float>::Resize((void **)v15, v17, 1);
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)v15, (const void **)&v16);
  kaldi::VectorBase<float>::MulElements((uint64_t)&v16, v15);
  unsigned int v3 = kaldi::VectorBase<float>::Sum((uint64_t)&v16);
  uint64_t v4 = *(float *)&v3;
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  kaldi::VectorBase<float>::MulElements((uint64_t)&v16, v15);
  kaldi::VectorBase<float>::Sum((uint64_t)&v16);
  pow((float)(v4 / (float)v5), 1.5);
  kaldi::VectorBase<float>::MulElements((uint64_t)&v16, v15);
  kaldi::VectorBase<float>::Sum((uint64_t)&v16);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"(min ", 7);
  kaldi::VectorBase<float>::Min((uint64_t *)a1);
  uint64_t v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", max ", 6);
  kaldi::VectorBase<float>::Max((uint64_t *)a1);
  uint64_t v7 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", mean ", 7);
  size_t v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", variance ", 11);
  long long v9 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", skewness ", 11);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", kurtosis ", 11);
  long long v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") ", 3);
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v12[1] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](&v14);
  kaldi::Vector<float>::Destroy((uint64_t)v15);
  kaldi::Vector<float>::Destroy((uint64_t)&v16);
}

{
  int v2;
  int v3;
  void *v4[3];

  uint64_t v2 = kaldi::MatrixBase<float>::NumRows(a1);
  unsigned int v3 = kaldi::MatrixBase<float>::NumCols(a1);
  memset(v4, 0, sizeof(v4));
  kaldi::Vector<float>::Resize(v4, (v3 * v2), 0);
  kaldi::VectorBase<float>::CopyRowsFromMat(v4, a1);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v4);
  kaldi::Vector<float>::Destroy((uint64_t)v4);
}

void sub_1B1A93658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B1A939A0(_Unwind_Exception *a1)
{
  kaldi::Vector<float>::Destroy(v1 - 144);
  kaldi::Vector<float>::Destroy(v1 - 120);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  unsigned int v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1B1A93B5C(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](a1 + 112);
  return a1;
}

void kaldi::CuSubMatrix<float>::~CuSubMatrix(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A472A0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A472A0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::CuSubMatrix<float>::Read()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Function not implemented for this class");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

char *std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  long long v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](v7, v11);
    float v13 = (char *)v7[1];
    long long v12 = (void **)(v7 + 1);
    long long v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  long long v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    long long v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *long long v12 = &v9[v17];
  return result;
}

void kaldi::nnet1::QuantizedAffineTransform<short>::SetLinearity(uint64_t a1, uint64_t a2)
{
  kaldi::MatrixBase<float>::NumRows(a2);
  uint64_t v4 = (kaldi::quasar::Vocab *)(a1 + 48);
  kaldi::quasar::Vocab::VocabSize(v4);
  kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)v4);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat((uint64_t)v4, a2);
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<short>::QuantizedAffineTransform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1F0A4D8F8;
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(a1 + 48, a3, a2);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = &unk_1F0A517C0;
  *(void *)(a1 + 120) = 0;
  kaldi::CuVector<float>::Resize(a1 + 96, a3, 0);
  return a1;
}

void sub_1B1A93F68(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::QuantizedAffineTransform<short>::~QuantizedAffineTransform(kaldi::nnet1::Component *a1)
{
  kaldi::nnet1::QuantizedAffineTransform<short>::~QuantizedAffineTransform(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A4D8F8;
  uint64_t v2 = (uint64_t)a1 + 48;
  kaldi::CuVector<float>::~CuVector((void *)a1 + 12);
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v2);
  kaldi::nnet1::Component::~Component(a1);
}

void kaldi::nnet1::QuantizedAffineTransform<short>::Copy()
{
}

void sub_1B1A94088(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v2);
  kaldi::nnet1::Component::~Component(v1);
  MEMORY[0x1B3EA8670](v1, 0x10D1C40B6DC7CF1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<short>::GetType()
{
  return 1035;
}

void kaldi::nnet1::QuantizedAffineTransform<short>::Info(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, "\n  linearity is quantized");
  uint64_t v4 = std::string::append(&v11, "\n  bias");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>(a1 + 96);
  if ((v10 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v7 = v10;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  uint64_t v8 = std::string::append(&v12, (const std::string::value_type *)v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1B1A941B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::QuantizedAffineTransform<short>::WriteData(uint64_t a1, void *a2, int a3, int a4)
{
  kaldi::QuantizedMatrix<short>::Write((int *)(a1 + 48), a2, a3, a4);
  kaldi::CuVectorBase<float>::Write(a1 + 96, a2, a3);
}

uint64_t *kaldi::nnet1::QuantizedAffineTransform<short>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  LODWORD(a4) = 1.0;
  kaldi::CuMatrixBase<float>::AddMatMat<short>(a3, a2, 111, (kaldi::quasar::Vocab *)(a1 + 48), 112, a4, 0.0);
  return kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 96, 1.0, 1.0);
}

void kaldi::nnet1::QuantizedAffineTransform<short>::BackpropagateFnc()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"BackpropagateFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::nnet1::QuantizedAffineTransform<short>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  kaldi::CuVectorBase<float>::Set(a4, *(float *)(*(void *)(a1 + 104) + 4 * a3));
  kaldi::QuantizedMatrixBase<short>::Row(a1 + 48, a3, (uint64_t)v9);
  LODWORD(v8) = 1.0;
  kaldi::CuVectorBase<float>::AddMatVec<short>(a4, a2, 111, (uint64_t)v9, v8, 1.0);
}

float kaldi::nnet1::QuantizedAffineTransform<short>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3)
{
  float v4 = *(float *)(*(void *)(a1 + 104) + 4 * a3);
  kaldi::QuantizedMatrixBase<short>::Row(a1 + 48, a3, (uint64_t)v6);
  return v4 + kaldi::VecVec<float,short>(a2, (uint64_t)v6);
}

double kaldi::nnet1::QuantizedAffineTransform<short>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::QuantizedMatrix<short>::Read((float *)(a1 + 48), a2, a3, a4);
  return kaldi::CuVector<float>::Read(a1 + 96, a2, a3);
}

int *kaldi::nnet1::AffineTransform::SetLinearity(kaldi::nnet1::AffineTransform *a1, int *a2)
{
  kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  kaldi::nnet1::AffineTransform::Linearity(a1);
  kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
  kaldi::nnet1::AffineTransform::Linearity(a1);
  uint64_t v4 = kaldi::nnet1::AffineTransform::Linearity(a1);
  return kaldi::CuMatrixBase<float>::CopyFromMat(v4, a2, 111);
}

void kaldi::nnet1::AffineTransform::AffineTransform(kaldi::nnet1::AffineTransform *this, int a2, int a3)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 6) = &unk_1F0A4A6D0;
  *(_OWORD *)((char *)this + 56) = xmmword_1B255E480;
  *((_DWORD *)this + 18) = -1082130432;
  *(void *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((unsigned char *)this + 86) = 0;
  *(void *)this = &unk_1F0A49CD0;
  *((void *)this + 11) = &unk_1F0A49E10;
  *((void *)this + 12) = &unk_1F0A49E38;
  *((void *)this + 13) = &unk_1F0A49E60;
  operator new();
}

void sub_1B1A94704(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v5, 0x1081C4072235B19);
  uint64_t v7 = *((void *)v1 + 14);
  *((void *)v1 + 14) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  quasar::Bitmap::~Bitmap(v4);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

void std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 48;
      uint64_t v7 = v4 - 48;
      double v8 = v4 - 48;
      do
      {
        uint64_t v9 = *(void *)v8;
        v8 -= 48;
        (*(void (**)(char *))(v9 + 16))(v7);
        v6 -= 48;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 32;
      uint64_t v7 = v4 - 32;
      double v8 = v4 - 32;
      do
      {
        uint64_t v9 = *(void *)v8;
        v8 -= 32;
        (*(void (**)(char *))(v9 + 8))(v7);
        v6 -= 32;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t kaldi::nnet1::AffineTransform::Linearity(kaldi::nnet1::AffineTransform *this)
{
  uint64_t result = *((void *)this + 14);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "linearity_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::AffineTransform::Bias(kaldi::nnet1::AffineTransform *this)
{
  uint64_t result = *((void *)this + 15);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

void kaldi::nnet1::Nnet::Nnet(kaldi::nnet1::Nnet *this)
{
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  operator new();
}

void sub_1B1A94B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  unint64_t v14 = v11;
  uint64_t v16 = *v14;
  if (*v14)
  {
    *(void *)(v10 + 360) = v16;
    operator delete(v16);
  }
  kaldi::nnet1::Nnet::Nnet((void *)v10);
  size_t v17 = *(void **)(v10 + 280);
  if (v17)
  {
    *(void *)(v10 + 288) = v17;
    operator delete(v17);
  }
  a10 = (void **)(v10 + 256);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  kaldi::CuVector<float>::~CuVector(v13);
  kaldi::CuVector<float>::~CuVector(v12);
  uint64_t v18 = *(void **)(v10 + 168);
  if (v18) {
    operator delete(v18);
  }
  a10 = (void **)(v10 + 120);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 72);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  unint64_t v19 = *(void **)(v10 + 48);
  if (v19)
  {
    *(void *)(v10 + 56) = v19;
    operator delete(v19);
  }
  unint64_t v20 = *(void **)(v10 + 24);
  if (v20)
  {
    *(void *)(v10 + 32) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

kaldi::nnet1::Nnet *std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](kaldi::nnet1::Nnet **a1, kaldi::nnet1::Nnet *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::nnet1::Nnet::~Nnet(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void sub_1B1A94E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a23);

  _Unwind_Resume(a1);
}

void sub_1B1A9501C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1B1A95178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

quasar::SystemConfig *quasar::SystemConfig::SystemConfig(quasar::SystemConfig *this)
{
  *(void *)this = &unk_1F0A523A0;
  quasar::SystemConfig::SystemConfigInfo::SystemConfigInfo((quasar::SystemConfig *)((char *)this + 8));
  *((void *)this + 104) = 0;
  *((_OWORD *)this + 51) = 0u;
  _ZNSt3__115allocate_sharedB8ne180100IN6quasar11ModelLoaderENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((void *)this + 105);
  *((void *)this + 121) = 0;
  *((void *)this + 120) = 0;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  *(_OWORD *)((char *)this + 888) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *((void *)this + 119) = (char *)this + 960;
  *((void *)this + 124) = 0;
  *((void *)this + 123) = 0;
  *((void *)this + 122) = (char *)this + 984;
  *((void *)this + 127) = 0;
  *((void *)this + 126) = 0;
  *((void *)this + 125) = (char *)this + 1008;
  *((void *)this + 139) = 0;
  *((void *)this + 138) = 0;
  *((void *)this + 136) = 0;
  *((_OWORD *)this + 67) = 0u;
  *((_OWORD *)this + 66) = 0u;
  *((_OWORD *)this + 65) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((void *)this + 137) = (char *)this + 1104;
  *((void *)this + 142) = 0;
  *((void *)this + 141) = 0;
  *((void *)this + 140) = (char *)this + 1128;
  *((void *)this + 144) = 0;
  *((void *)this + 145) = 0;
  *((void *)this + 143) = (char *)this + 1152;
  *((void *)this + 148) = 0;
  *((void *)this + 149) = 0;
  *((void *)this + 147) = (char *)this + 1184;
  *((void *)this + 151) = 0;
  *((void *)this + 152) = 0;
  *((void *)this + 150) = (char *)this + 1208;
  *((void *)this + 155) = 0;
  *((void *)this + 154) = 0;
  *((void *)this + 153) = (char *)this + 1232;
  *((void *)this + 158) = 0;
  *((void *)this + 157) = 0;
  *((void *)this + 156) = (char *)this + 1256;
  *((void *)this + 161) = 0;
  *((void *)this + 160) = 0;
  *((void *)this + 159) = (char *)this + 1280;
  *((void *)this + 164) = 0;
  *((void *)this + 163) = 0;
  *((void *)this + 162) = (char *)this + 1304;
  *((void *)this + 167) = 0;
  *((void *)this + 166) = 0;
  *((void *)this + 165) = (char *)this + 1328;
  *((void *)this + 170) = 0;
  *((void *)this + 169) = 0;
  *((void *)this + 168) = (char *)this + 1352;
  *((void *)this + 173) = 0;
  *((void *)this + 172) = 0;
  *((void *)this + 171) = (char *)this + 1376;
  *((void *)this + 176) = 0;
  *((void *)this + 175) = 0;
  *((void *)this + 174) = (char *)this + 1400;
  *((void *)this + 179) = 0;
  *((void *)this + 178) = 0;
  *((void *)this + 177) = (char *)this + 1424;
  *((void *)this + 182) = 0;
  *((void *)this + 181) = 0;
  *((void *)this + 180) = (char *)this + 1448;
  *((void *)this + 185) = 0;
  *((void *)this + 184) = 0;
  *((void *)this + 183) = (char *)this + 1472;
  *((void *)this + 188) = 0;
  *((void *)this + 187) = 0;
  *((void *)this + 186) = (char *)this + 1496;
  *((void *)this + 191) = 0;
  *((void *)this + 190) = 0;
  *((void *)this + 189) = (char *)this + 1520;
  *((_DWORD *)this + 384) = 0;
  return this;
}

void sub_1B1A9540C(_Unwind_Exception *a1)
{
  if (v1[839] < 0) {
    operator delete(*v3);
  }
  quasar::SystemConfig::SystemConfigInfo::~SystemConfigInfo(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v1);
  _Unwind_Resume(a1);
}

quasar::SystemConfig::SystemConfigInfo *quasar::SystemConfig::SystemConfigInfo::SystemConfigInfo(quasar::SystemConfig::SystemConfigInfo *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  quasar::SystemConfig::Version::Version((_DWORD *)this + 6, 0, 0);
  quasar::filesystem::Path::Path((void *)this + 4);
  quasar::PTree::PTree((quasar::SystemConfig::SystemConfigInfo *)((char *)this + 64));
  *((void *)this + 23) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((void *)this + 22) = (char *)this + 184;
  *((void *)this + 26) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = (char *)this + 208;
  *((void *)this + 30) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = (char *)this + 232;
  *((void *)this + 41) = 0;
  *((void *)this + 42) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((void *)this + 39) = 0;
  *((void *)this + 40) = (char *)this + 328;
  *((void *)this + 43) = (char *)this + 352;
  *((void *)this + 44) = 0;
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 46) = (char *)this + 376;
  *((void *)this + 50) = 0;
  *((void *)this + 51) = 0;
  *((void *)this + 54) = 0;
  *((void *)this + 55) = 0;
  *((void *)this + 52) = 0;
  *((void *)this + 53) = (char *)this + 432;
  *((void *)this + 62) = 0;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_DWORD *)this + 126) = 1065353216;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_DWORD *)this + 136) = 1065353216;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *((_DWORD *)this + 146) = 1065353216;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_DWORD *)this + 156) = 1065353216;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *((_DWORD *)this + 166) = 1065353216;
  *((void *)this + 86) = 0;
  *((void *)this + 85) = 0;
  *((void *)this + 84) = (char *)this + 680;
  *((void *)this + 89) = 0;
  *((void *)this + 88) = 0;
  *((void *)this + 87) = (char *)this + 704;
  *((_DWORD *)this + 180) = 0;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((_DWORD *)this + 190) = 1065353216;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_DWORD *)this + 200) = 1065353216;
  return this;
}

void sub_1B1A95580(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 32) = &unk_1F0A51998;
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*(void **)(v1 + 40));
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::filesystem::Path::~Path(void **this)
{
  *this = &unk_1F0A51998;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F0A51998;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1B3EA8670);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN6quasar11ModelLoaderENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x288uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN6quasar11ModelLoaderENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1A956CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN6quasar11ModelLoaderENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F878;
  quasar::ModelLoader::ModelLoader((quasar::ModelLoader *)(a1 + 3));
  return a1;
}

void sub_1B1A95728(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ModelLoader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F878;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ModelLoader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F878;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::ModelLoader>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void quasar::SystemConfig::SystemConfigInfo::~SystemConfigInfo(quasar::SystemConfig::SystemConfigInfo *this)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 768);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 728);
  std::__tree<std::string>::destroy((uint64_t)this + 696, *((char **)this + 88));
  std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::destroy((uint64_t)this + 672, *((void **)this + 85));
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table((uint64_t)this + 632);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 592);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::~__hash_table((uint64_t)this + 552);
  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::~__hash_table((uint64_t)this + 512);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::~__hash_table((uint64_t)this + 472);
  uint64_t v2 = (void **)((char *)this + 448);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::string>::destroy((uint64_t)this + 424, *((char **)this + 54));
  if (*((char *)this + 423) < 0) {
    operator delete(*((void **)this + 50));
  }
  quasar::SpeechModelInfo::~SpeechModelInfo((quasar::SystemConfig::SystemConfigInfo *)((char *)this + 128));
  quasar::PTree::~PTree((quasar::SystemConfig::SystemConfigInfo *)((char *)this + 64));
  *((void *)this + 4) = &unk_1F0A51998;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::string>>,0>(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::TranslationPairSetting>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::TranslationPairSetting>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::pair<std::string,std::string>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::pair<std::string,std::string>>>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(void *)a2);
    std::__tree<std::string>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void quasar::SpeechModelInfo::~SpeechModelInfo(quasar::SpeechModelInfo *this)
{
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  std::__tree<std::string>::destroy((uint64_t)this + 96, *((char **)this + 13));
  std::__tree<std::string>::destroy((uint64_t)this + 72, *((char **)this + 10));
  std::__tree<int>::destroy((uint64_t)this + 48, *((void **)this + 7));
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::__tree<int>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<int>::destroy(a1, *a2);
    std::__tree<int>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,std::map<std::string,double>>,std::__tree_node<std::__value_type<int,std::map<std::string,double>>,void *> *,long>>(uint64_t **result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      double v8 = (uint64_t *)v6[1];
    }
    else {
      double v8 = v6;
    }
    unint64_t v14 = result;
    unint64_t v15 = v8;
    uint64_t v16 = v8;
    if (v8)
    {
      unint64_t v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          if (v8 != v9)
          {
            std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,double>,std::__tree_node<std::__value_type<std::string,double>,void *> *,long>>((uint64_t **)v8 + 5, (void *)v9[5], v9 + 6);
            double v8 = v16;
          }
          std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__node_insert_multi(v5, (uint64_t)v8);
          double v8 = v15;
          uint64_t v16 = v15;
          if (v15) {
            unint64_t v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          uint64_t v10 = (uint64_t *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = (uint64_t *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (uint64_t *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__emplace_multi<std::pair<int const,std::map<std::string,double>> const&>((uint64_t)v5, (uint64_t)(a2 + 4));
      std::string v12 = (uint64_t *)a2[1];
      if (v12)
      {
        do
        {
          float v13 = v12;
          std::string v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          float v13 = (uint64_t *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1B1A961D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 32) >= *((_DWORD *)v4 + 8)) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t **std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,double>,std::__tree_node<std::__value_type<std::string,double>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      double v8 = (uint64_t *)v6[1];
    }
    else {
      double v8 = v6;
    }
    unint64_t v15 = result;
    uint64_t v16 = v8;
    size_t v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          v8[7] = v9[7];
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          size_t v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          BOOL v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              BOOL v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v12);
          }
          double v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          uint64_t v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_multi<std::pair<std::string const,double> const&>(v5, (uint64_t)(a2 + 4));
      float v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          unint64_t v14 = v13;
          float v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          unint64_t v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1B1A963D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v5 = (void *)v4;
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v5;
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    uint64_t result = v5 + 1;
  }
  else
  {
    uint64_t result = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    double v8 = a3;
  }
  else {
    double v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      int v3 = (uint64_t *)v2[2];
      int v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), size_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            size_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            size_t v9 = (uint64_t **)v2[1];
            int v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              int v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *size_t v9 = v2;
            v2[2] = (uint64_t)v9;
            int v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *int v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), size_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            int v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          int v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *size_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void *std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    int v3 = (void *)*result;
    if (*result == a1)
    {
      *uint64_t result = 0;
      while (1)
      {
        int v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          int v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; int v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          int v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::string>::destroy(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::string>::destroy(*(void *)a1, (char *)v2);
  }
  return a1;
}

const void **std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_multi<std::pair<std::string const,double> const&>(uint64_t **a1, uint64_t a2)
{
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__construct_node<std::pair<std::string const,double> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v5, leaf_high, (uint64_t *)v6);
  return v6;
}

void sub_1B1A967C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

double std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__construct_node<std::pair<std::string const,double> const&>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  double result = *(double *)(a2 + 24);
  *((double *)v6 + 7) = result;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1A96870(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

void std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::destroy(a1, a2[1]);
    std::__tree<std::string>::destroy((uint64_t)(a2 + 5), (char *)a2[6]);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__emplace_multi<std::pair<int const,std::map<std::string,double>> const&>(uint64_t a1, uint64_t a2)
{
  std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__construct_node<std::pair<int const,std::map<std::string,double>> const&>(a1, a2, (uint64_t)&v7);
  uint64_t v3 = (uint64_t **)(a1 + 8);
  int v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*((_DWORD *)v7 + 8) >= *((_DWORD *)v4 + 8)) {
          break;
        }
        int v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      int v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v3, v5, v7);
  return v7;
}

uint64_t *std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__construct_node<std::pair<int const,std::map<std::string,double>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x40uLL);
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *(_DWORD *)a2;
  double result = std::map<std::string,double>::map[abi:ne180100]((uint64_t *)v6 + 5, (const void ***)(a2 + 8));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1A96A98(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::map<std::string,double>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,double>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,double>,std::__tree_node<std::__value_type<std::string,double>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B1A96AF4(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,double>,std::__tree_node<std::__value_type<std::string,double>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    int v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    int v6 = result + 1;
    do
    {
      double result = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,double> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          int v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          int v4 = (const void **)v8;
        }
        while (!v9);
      }
      int v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,double> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  int v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  double result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__construct_node<std::pair<std::string const,double> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::map<std::string,double>>,void *>>>::operator()[abi:ne180100](uint64_t a1, char **a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::__tree<std::string>::destroy((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t **std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,int>,std::__tree_node<std::__value_type<std::string,int>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    int v6 = *result;
    uint64_t v7 = result[1];
    *double result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      int v8 = (uint64_t *)v6[1];
    }
    else {
      int v8 = v6;
    }
    unint64_t v15 = result;
    uint64_t v16 = v8;
    size_t v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          *((_DWORD *)v8 + 14) = *((_DWORD *)v9 + 14);
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          size_t v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          uint64_t v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v12);
          }
          int v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          uint64_t v9 = a2;
        }
        while (!v12);
      }
    }
    double result = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      double result = (uint64_t **)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_multi<std::pair<std::string const,int> const&>(v5, (uint64_t)(a2 + 4));
      uint64_t v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          unint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          unint64_t v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1B1A96DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const void **std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_multi<std::pair<std::string const,int> const&>(uint64_t **a1, uint64_t a2)
{
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::pair<std::string const,int> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v5, leaf_high, (uint64_t *)v6);
  return v6;
}

void sub_1B1A96E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

std::logic_error *quasar::Bitmap::CoordinatesOutOfRange::CoordinatesOutOfRange(std::logic_error *this, double a2, double a3)
{
  std::to_string(&v17, a2);
  uint64_t v5 = std::string::insert(&v17, 0, "Texture coordinates (");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  uint64_t v7 = std::string::append(&v18, ",");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v11 = std::string::append(&v19, (const std::string::value_type *)p_p, size);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  uint64_t v13 = std::string::append(&v20, ") out of range");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::logic_error::logic_error(this, &v21);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  this->__vftable = (std::logic_error_vtbl *)&unk_1F0A58F60;
  return this;
}

void sub_1B1A97134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (*(char *)(v33 - 73) < 0) {
    operator delete(*(void **)(v33 - 96));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

std::logic_error *quasar::Bitmap::CoordinatesOutOfRange::CoordinatesOutOfRange(std::logic_error *this, int __val, int a3)
{
  std::to_string(&v17, __val);
  uint64_t v5 = std::string::insert(&v17, 0, "Bitmap coordinates (");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  uint64_t v7 = std::string::append(&v18, ",");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v11 = std::string::append(&v19, (const std::string::value_type *)p_p, size);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  uint64_t v13 = std::string::append(&v20, ") out of bounds");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::logic_error::logic_error(this, &v21);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  this->__vftable = (std::logic_error_vtbl *)&unk_1F0A58F60;
  return this;
}

void sub_1B1A9735C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (*(char *)(v33 - 73) < 0) {
    operator delete(*(void **)(v33 - 96));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::Bitmap::CoordinatesOutOfRange::~CoordinatesOutOfRange(std::logic_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::Bitmap::nearestNeighborSampleAt(quasar::Bitmap *this, quasar::Bitmap *a2, double a3, double a4)
{
  if (a4 > 1.0 || (a3 >= 0.0 ? (BOOL v6 = a3 > 1.0) : (BOOL v6 = 1), v6 || a4 < 0.0))
  {
    exception = (quasar::Bitmap::CoordinatesOutOfRange *)__cxa_allocate_exception(0x10uLL);
    quasar::Bitmap::CoordinatesOutOfRange::CoordinatesOutOfRange(exception, a3, a4);
  }
  int v8 = (*(uint64_t (**)(quasar::Bitmap *, quasar::Bitmap *))(*(void *)this + 16))(this, a2);
  int v9 = (*(uint64_t (**)(quasar::Bitmap *))(*(void *)this + 24))(this);
  int v10 = vcvtmd_s64_f64((double)v8 * a3);
  signed int v11 = vcvtmd_s64_f64((double)v9 * a4);
  if (v8 - 1 < v10) {
    int v10 = v8 - 1;
  }
  uint64_t v12 = v10 & ~(v10 >> 31);
  int v13 = v9 - 1;
  if (v9 - 1 >= v11) {
    int v13 = v11;
  }
  long long v14 = *(uint64_t (**)(quasar::Bitmap *, uint64_t, void))(*(void *)this + 32);
  return v14(this, v12, v13 & ~(v13 >> 31));
}

void sub_1B1A97574(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void quasar::G2WP::G2WP(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __p[35] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v12 = a2[1];
  v14[0] = *a2;
  v14[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  v13[0] = 0;
  v13[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::QuasarG2PBase::QuasarG2PBase(a1, v14, v13, a4, a5, a6, a7);
}

void sub_1B1A97DC0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1A97FF8);
}

void sub_1B1A97DD0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  if (a48 && a47 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    JUMPOUT(0x1B1A97EBCLL);
  }
  if (v48 < 0) {
    JUMPOUT(0x1B1A97F04);
  }
  JUMPOUT(0x1B1A97F14);
}

void sub_1B1A97DF0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  if (a48 && a47 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (v49 < 0) {
    operator delete(v48);
  }
  JUMPOUT(0x1B1A97F64);
}

void sub_1B1A97E10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v47 < 0) {
    JUMPOUT(0x1B1A97EBCLL);
  }
  JUMPOUT(0x1B1A97EC8);
}

void sub_1B1A97F28(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy((uint64_t)v9, v9[1]);
  std::unique_ptr<quasar::SentencePieceModule>::reset[abi:ne180100](v3, 0);
  BOOL v6 = (void *)*v2;
  *uint64_t v2 = 0;
  if (v6) {
    std::default_delete<quasar::Lexicon>::operator()[abi:ne180100]((uint64_t)v2, v6);
  }
  uint64_t v7 = *(void *)(v1 + 360);
  *(void *)(v1 + 360) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *v4;
  *int v4 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  quasar::QuasarG2PBase::~QuasarG2PBase((void **)v1);
  _Unwind_Resume(a1);
}

void sub_1B1A98000(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
}

void sub_1B1A98048(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,std::__shared_weak_count *a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  if (a38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a38);
  }
  JUMPOUT(0x1B1A97FF8);
}

void quasar::QuasarExceptionMessage::~QuasarExceptionMessage(quasar::QuasarExceptionMessage *this)
{
}

{
  uint64_t (*v2)();
  std::runtime_error *exception;
  std::string __p;

  uint64_t v2 = quasar::QuasarExceptionMessage::logger;
  std::stringbuf::str();
  ((void (*)(std::string *, void))v2)(&__p, *((void *)this + 33));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (std::uncaught_exception()) {
    abort();
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::stringbuf::str();
  std::runtime_error::runtime_error(exception, &__p);
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void quasar::QuasarG2PBase::~QuasarG2PBase(void **this)
{
  *this = &unk_1F0A52600;
  if (*((char *)this + 351) < 0) {
    operator delete(this[41]);
  }
  if (*((char *)this + 327) < 0) {
    operator delete(this[38]);
  }
  quasar::G2P::~G2P((quasar::G2P *)this);
}

void quasar::G2WP::~G2WP(quasar::SentencePieceModule **this)
{
  *this = (quasar::SentencePieceModule *)&unk_1F0A58E88;
  std::unique_ptr<quasar::SentencePieceModule>::reset[abi:ne180100](this + 47, 0);
  uint64_t v2 = this[46];
  this[46] = 0;
  if (v2) {
    std::default_delete<quasar::Lexicon>::operator()[abi:ne180100]((uint64_t)(this + 46), v2);
  }
  uint64_t v3 = this[45];
  this[45] = 0;
  if (v3) {
    (*(void (**)(quasar::SentencePieceModule *))(*(void *)v3 + 8))(v3);
  }
  int v4 = this[44];
  this[44] = 0;
  if (v4) {
    (*(void (**)(quasar::SentencePieceModule *))(*(void *)v4 + 8))(v4);
  }
  quasar::QuasarG2PBase::~QuasarG2PBase((void **)this);
}

{
  uint64_t vars8;

  quasar::G2WP::~G2WP(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::G2WP::normalizeToken(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
}

void quasar::G2WP::doG2P(uint64_t a1@<X0>, long long *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  quasar::LmeDataFactoryBase::PronSet::PronSet(v23);
  quasar::PronGuessStats::PronGuessStats((quasar::PronGuessStats *)__p);
  unint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v16 = (long long *)std::vector<quasar::TextTokenizer::Token>::__push_back_slow_path<quasar::TextTokenizer::Token const&>((uint64_t *)&v15, a2);
  int v18 = 0;
  memset(&v26, 0, sizeof(v26));
  std::vector<quasar::TextTokenizer::Token>::__init_with_size[abi:ne180100]<quasar::TextTokenizer::Token*,quasar::TextTokenizer::Token*>(&v26, v15, v16, ((char *)v16 - (char *)v15) >> 5);
  int v27 = v18;
  int v13 = 0;
  long long v14 = 0;
  uint64_t v12 = 0;
  char v24 = &v12;
  char v25 = 0;
  uint64_t v12 = (long long **)operator new(0x20uLL);
  int v13 = v12;
  long long v14 = v12 + 4;
  int v13 = (long long **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TextTokenizer::TokenString>,quasar::TextTokenizer::TokenString const*,quasar::TextTokenizer::TokenString const*,quasar::TextTokenizer::TokenString*>((uint64_t)&v14, (uint64_t)&v26, (uint64_t)&v28, (uint64_t)v12);
  char v24 = (long long ***)&v26;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  uint64_t v8 = *(void **)(a1 + 352);
  std::string::basic_string[abi:ne180100]<0>(&v26, "");
  quasar::G2P::getProns(v8, &v12, __p, 0, a4);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v26.__r_.__value_.__l.__data_);
    if (a3) {
      goto LABEL_3;
    }
LABEL_12:
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
    std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
    std::__tree<std::string>::destroy((uint64_t)&v21, v22);
    goto LABEL_13;
  }
  if (!a3) {
    goto LABEL_12;
  }
LABEL_3:
  quasar::LmeDataFactoryBase::PronSet::insert((uint64_t)v23, a4);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)a4;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  std::__tree<std::string>::destroy((uint64_t)&v21, v22);
  quasar::LmeDataFactoryBase::PronSet::toPronChoices((uint64_t)v23, 3, (uint64_t *)&v15);
  quasar::G2WP::g2pToWP(a1, (int **)&v15, (uint64_t *)__p);
  quasar::LmeDataFactoryBase::PronSet::insert((uint64_t)v23, (uint64_t *)__p);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  uint64_t v9 = *(void *)(a1 + 376);
  if (v9)
  {
    quasar::SentencePieceModule::encode(v9, (const std::string *)a2, __p);
    unint64_t v10 = v20;
    unsigned __int8 v11 = v20;
    if ((v20 & 0x80u) != 0) {
      unint64_t v10 = (unint64_t)__p[1];
    }
    if (v10)
    {
      quasar::LmeDataFactoryBase::PronSet::insert(v23, 4, (uint64_t)__p, 0.0);
      unsigned __int8 v11 = v20;
    }
    if ((v11 & 0x80) != 0) {
      operator delete(__p[0]);
    }
  }
  quasar::LmeDataFactoryBase::PronSet::toPronChoices((uint64_t)v23, a3, a4);
LABEL_13:
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v23, (char *)v23[1]);
}

void sub_1B1A984D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,char *a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&a28, a29);
  _Unwind_Resume(a1);
}

void sub_1B1A985DC()
{
}

void quasar::G2P::getProns(void *a1@<X0>, long long ***a2@<X2>, _DWORD *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  char v7 = 0;
  uint64_t v5 = 0;
  BOOL v6 = 0;
  quasar::G2P::getProns(a1, a2, a3, &v5, &v7, a4, a5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1B1A9862C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void quasar::G2WP::g2pToWP(uint64_t a1@<X0>, int **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  quasar::LmeDataFactoryBase::PronSet::PronSet(v34);
  if (*a2 != a2[1] && *(void *)(a1 + 360))
  {
    uint64_t v17 = a3;
    quasar::PronGuessStats::PronGuessStats((quasar::PronGuessStats *)&v30);
    BOOL v6 = *a2;
    char v7 = a2[1];
    if (*a2 != v7)
    {
      do
      {
        if (quasar::isPronTypePhoneme(*v6))
        {
          memset(&v28, 0, sizeof(v28));
          std::string::operator=(&v28, (const std::string *)(v6 + 2));
          int v29 = 0;
          char v24 = 0;
          char v25 = 0;
          uint64_t v26 = 0;
          char v25 = (long long *)std::vector<quasar::TextTokenizer::Token>::__push_back_slow_path<quasar::TextTokenizer::Token const&>((uint64_t *)&v24, (long long *)&v28);
          int v27 = 0;
          memset(&v36, 0, sizeof(v36));
          std::vector<quasar::TextTokenizer::Token>::__init_with_size[abi:ne180100]<quasar::TextTokenizer::Token*,quasar::TextTokenizer::Token*>(&v36, v24, v25, ((char *)v25 - (char *)v24) >> 5);
          int v37 = v27;
          unint64_t v22 = 0;
          uint64_t v23 = 0;
          uint64_t v21 = 0;
          std::string __p = &v21;
          char v19 = 0;
          uint64_t v21 = (long long **)operator new(0x20uLL);
          unint64_t v22 = v21;
          uint64_t v23 = v21 + 4;
          unint64_t v22 = (long long **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TextTokenizer::TokenString>,quasar::TextTokenizer::TokenString const*,quasar::TextTokenizer::TokenString const*,quasar::TextTokenizer::TokenString*>((uint64_t)&v23, (uint64_t)&v36, (uint64_t)&v38, (uint64_t)v21);
          std::string __p = &v36;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          uint64_t v8 = *(void **)(a1 + 360);
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          quasar::G2P::getProns(v8, &v21, &v30, 1, (uint64_t *)&v36);
          quasar::LmeDataFactoryBase::PronSet::insert((uint64_t)v34, (uint64_t *)&v36);
          std::vector<int>::pointer v35 = &v36;
          std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
          if (v20 < 0) {
            operator delete(__p);
          }
          v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
          std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
          v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v28.__r_.__value_.__l.__data_);
          }
        }
        v6 += 10;
      }
      while (v6 != v7);
    }
    std::__tree<std::string>::destroy((uint64_t)v33, v33[1]);
    a3 = v17;
  }
  if (*(void *)(a1 + 368))
  {
    uint64_t v9 = quasar::PronTypeToSeparator(5);
    unint64_t v10 = *a2;
    unsigned __int8 v11 = a2[1];
    if (*a2 != v11)
    {
      uint64_t v12 = (char *)v9;
      do
      {
        if (quasar::isPronTypePhoneme(*v10))
        {
          long long v30 = 0u;
          long long v31 = 0u;
          int v32 = 1065353216;
          int v13 = *(void **)(a1 + 368);
          std::string::basic_string[abi:ne180100]<0>(&v28, v12);
          int v14 = quasar::Lexicon::lookUpProns(v13, (uint64_t)(v10 + 2), (uint64_t)&v30, (char *)&v28);
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v28.__r_.__value_.__l.__data_);
          }
          unint64_t v15 = (void *)v31;
          if ((void)v31) {
            int v16 = v14;
          }
          else {
            int v16 = 0;
          }
          if (v16 == 1)
          {
            do
            {
              quasar::LmeDataFactoryBase::PronSet::insert(v34, 5, (uint64_t)(v15 + 2), 0.0);
              unint64_t v15 = (void *)*v15;
            }
            while (v15);
          }
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v30);
        }
        v10 += 10;
      }
      while (v10 != v11);
    }
  }
  quasar::LmeDataFactoryBase::PronSet::toPronChoices((uint64_t)v34, 3, a3);
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v34, (char *)v34[1]);
}

void sub_1B1A98934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(v38 - 160, *(char **)(v38 - 152));
  _Unwind_Resume(a1);
}

void quasar::G2WP::convertPhonemePronsToAllProns(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    unint64_t v7 = 0;
    uint64_t v8 = (unint64_t *)(a3 + 2);
    do
    {
      LODWORD(v9) = 1;
      LODWORD(v11) = 0;
      if (v7 >= *v8)
      {
        unint64_t v7 = std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string const&,int>(a3, (int *)&v9, v5, (int *)&v11);
      }
      else
      {
        std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string const&,int>((uint64_t)(a3 + 2), v7, (int *)&v9, v5, (int *)&v11);
        v7 += 40;
        a3[1] = v7;
      }
      a3[1] = v7;
      v5 += 24;
    }
    while (v5 != v6);
  }
  quasar::G2WP::g2pToWP(a1, (int **)a3, &v9);
  std::vector<quasar::PronChoice>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::PronChoice*>,std::__wrap_iter<quasar::PronChoice*>>(a3, a3[1], v9, v10, 0xCCCCCCCCCCCCCCCDLL * ((v10 - v9) >> 3));
  unsigned __int8 v11 = (void **)&v9;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&v11);
}

void sub_1B1A98B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, void ***a12)
{
  a12 = &a9;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void quasar::G2WP::batchDoG2P()
{
  memset(v0, 0, sizeof(v0));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v0);
}

uint64_t quasar::G2WP::getG2PVersion(quasar::G2WP *this)
{
  return 5;
}

uint64_t quasar::G2P::getMaxProns(quasar::G2P *this)
{
  return *((unsigned int *)this + 25);
}

uint64_t quasar::G2WP::getG2PModelInputSymbolTable(quasar::G2WP *this)
{
  return 0;
}

void sub_1B1A98CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      uint64_t v19 = MEMORY[0x1E4FBA418];
      uint64_t v20 = *MEMORY[0x1E4FBA418];
      *(void *)uint64_t v15 = *MEMORY[0x1E4FBA418];
      *(void *)(v15 + *(void *)(v20 - 24)) = *(void *)(v19 + 24);
      *(void *)(v15 + 8) = MEMORY[0x1E4FBA470] + 16;
      if (*(char *)(v15 + 95) < 0) {
        operator delete(*(void **)(v15 + 72));
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1B3EA8520](v15 + 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

std::string *std::vector<quasar::TextTokenizer::Token>::__init_with_size[abi:ne180100]<quasar::TextTokenizer::Token*,quasar::TextTokenizer::Token*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*,quasar::TextTokenizer::Token*,quasar::TextTokenizer::Token*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B1A98E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*,quasar::TextTokenizer::Token*,quasar::TextTokenizer::Token*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v12 = this;
  int v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  char v11 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v8 = v13;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        uint64_t v8 = v4;
      }
      LODWORD(v4[1].__r_.__value_.__l.__data_) = *((_DWORD *)v6 + 6);
      v6 += 2;
      uint64_t v4 = (std::string *)((char *)v8 + 32);
      int v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1B1A98FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 9) < 0) {
      operator delete(*(void **)(v1 - 32));
    }
    v1 -= 32;
  }
}

void std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<quasar::TextTokenizer::Token>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<quasar::TextTokenizer::Token>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  a1[1] = v2;
}

void std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[63] < 0) {
      operator delete(*((void **)a2 + 5));
    }
    operator delete(a2);
  }
}

void std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<quasar::PronChoice>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<quasar::PronChoice>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  a1[1] = v2;
}

uint64_t *std::unique_ptr<quasar::PronCombinator>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *double result = a2;
  if (v2)
  {
    std::__tree<int>::destroy(v2 + 8, *(void **)(v2 + 16));
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void std::default_delete<quasar::Lexicon>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (std::__shared_weak_count *)a2[5];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)a2[3];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)a2[1];
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    JUMPOUT(0x1B3EA8670);
  }
}

quasar::SentencePieceModule *std::unique_ptr<quasar::SentencePieceModule>::reset[abi:ne180100](quasar::SentencePieceModule **a1, quasar::SentencePieceModule *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::SentencePieceModule::~SentencePieceModule(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

uint64_t std::map<quasar::PronType,int>::map[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      std::__tree<std::__value_type<quasar::PronType,int>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,int>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,int>>>::__emplace_hint_unique_key_args<quasar::PronType,std::pair<quasar::PronType const,int> const&>((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_1B1A99388(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<quasar::PronType,int>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,int>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,int>>>::__emplace_hint_unique_key_args<quasar::PronType,std::pair<quasar::PronType const,int> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<quasar::PronType,int>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,int>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,int>>>::__find_equal<quasar::PronType>(a1, a2, &v11, &v10, a3);
  long long v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    long long v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<quasar::PronType,int>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,int>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,int>>>::__find_equal<quasar::PronType>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, int v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      int v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        int v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      int v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *std::map<quasar::PronType,int>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<quasar::PronType,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<quasar::PronType,int>,std::__tree_node<std::__value_type<quasar::PronType,int>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1B1A99610(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<quasar::PronType,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<quasar::PronType,int>,std::__tree_node<std::__value_type<quasar::PronType,int>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    int v6 = result + 1;
    do
    {
      double result = std::__tree<std::__value_type<quasar::PronType,int>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,int>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,int>>>::__emplace_hint_unique_key_args<quasar::PronType,std::pair<quasar::PronType const,int> const&>(v5, v6, v4 + 7, (uint64_t *)(v4 + 7));
      int v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          int v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    int v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t std::vector<quasar::TextTokenizer::Token>::__push_back_slow_path<quasar::TextTokenizer::Token const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (std::string *)&v10[8 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  int v17 = (char *)&v10[8 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    uint64_t v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v10[8 * v4 + 6] = *((_DWORD *)a2 + 6);
  uint64_t v16 = (std::string *)((char *)v11 + 32);
  std::vector<quasar::TextTokenizer::Token>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B1A99838(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::TextTokenizer::Token>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>,std::reverse_iterator<quasar::TextTokenizer::Token*>,std::reverse_iterator<quasar::TextTokenizer::Token*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>,std::reverse_iterator<quasar::TextTokenizer::Token*>,std::reverse_iterator<quasar::TextTokenizer::Token*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v8;
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 32;
  }
}

uint64_t std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<quasar::TextTokenizer::Token>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TextTokenizer::TokenString>,quasar::TextTokenizer::TokenString const*,quasar::TextTokenizer::TokenString const*,quasar::TextTokenizer::TokenString*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      std::vector<quasar::TextTokenizer::Token>::__init_with_size[abi:ne180100]<quasar::TextTokenizer::Token*,quasar::TextTokenizer::Token*>((std::string *)v4, *(long long **)v6, *(long long **)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 5);
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      uint64_t v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::TokenString>,quasar::TextTokenizer::TokenString*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1A99B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::TokenString>,quasar::TextTokenizer::TokenString*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::TokenString>,quasar::TextTokenizer::TokenString*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::TokenString>,quasar::TextTokenizer::TokenString*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 4;
    uint64_t v3 = v1;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

void std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        uint64_t v6 = v4;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string const&,int>(uint64_t *a1, int *a2, uint64_t a3, int *a4)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v10 = 0x666666666666666;
  }
  else {
    unint64_t v10 = v6;
  }
  int v18 = a1 + 2;
  if (v10) {
    uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 2), v10);
  }
  else {
    uint64_t v11 = 0;
  }
  long long v14 = v11;
  long long v15 = &v11[40 * v5];
  int v17 = &v11[40 * v10];
  std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string const&,int>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  uint64_t v16 = v15 + 40;
  std::vector<quasar::PronChoice>::__swap_out_circular_buffer(a1, &v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_1B1A99D4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string const&,int>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5)
{
  int v7 = *a3;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  float v8 = (float)*a5;
  *(_DWORD *)a2 = v7;
  char v9 = (std::string *)(a2 + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(float *)(a2 + 32) = v8;
    if (v10 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a2 + 24) = *((void *)&__p.__r_.__value_.__l + 2);
    *(float *)(a2 + 32) = v8;
  }
}

void sub_1B1A99E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::PronChoice>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PronChoice>,std::reverse_iterator<quasar::PronChoice*>,std::reverse_iterator<quasar::PronChoice*>,std::reverse_iterator<quasar::PronChoice*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PronChoice>,std::reverse_iterator<quasar::PronChoice*>,std::reverse_iterator<quasar::PronChoice*>,std::reverse_iterator<quasar::PronChoice*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 40;
      quasar::PronChoice::PronChoice((_DWORD *)(v7 - 40), v9);
      uint64_t v7 = *((void *)&v15 + 1) - 40;
      *((void *)&v15 + 1) -= 40;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PronChoice>,std::reverse_iterator<quasar::PronChoice*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1B1A99F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD *quasar::PronChoice::PronChoice(_DWORD *a1, uint64_t a2)
{
  *a1 = *(_DWORD *)a2;
  uint64_t v4 = (std::string *)(a1 + 2);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  a1[8] = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PronChoice>,std::reverse_iterator<quasar::PronChoice*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PronChoice>,std::reverse_iterator<quasar::PronChoice*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PronChoice>,std::reverse_iterator<quasar::PronChoice*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    v1 += 40;
  }
}

uint64_t std::__split_buffer<quasar::PronChoice>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<quasar::PronChoice>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 40;
      *(void *)(a1 + 16) = v2 - 40;
      if (*(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::vector<quasar::PronChoice>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::PronChoice*>,std::__wrap_iter<quasar::PronChoice*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - a2) >> 3)) >= a5)
      {
        uint64_t v21 = a3 + 40 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PronChoice>,quasar::PronChoice*,quasar::PronChoice*,quasar::PronChoice*>(v9, v21, a4, *(_DWORD **)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<quasar::PronChoice>::__move_range((uint64_t)a1, v5, v12, v5 + 40 * a5);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::PronChoice *>,std::__wrap_iter<quasar::PronChoice *>,quasar::PronChoice *,0>(v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x3333333333333333 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x666666666666666) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v13) >> 3);
      unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x333333333333333) {
        unint64_t v18 = 0x666666666666666;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v30 = v9;
      if (v18) {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      int v22 = &v19[40 * v15];
      v27[0] = v19;
      v27[1] = v22;
      std::string v28 = v22;
      int v29 = &v19[40 * v18];
      uint64_t v23 = 5 * a5;
      char v24 = &v22[40 * a5];
      uint64_t v25 = 8 * v23;
      do
      {
        quasar::PronChoice::PronChoice(v22, v7);
        v22 += 40;
        v7 += 40;
        v25 -= 40;
      }
      while (v25);
      std::string v28 = v24;
      uint64_t v5 = std::vector<quasar::PronChoice>::__swap_out_circular_buffer(a1, v27, v5);
      std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)v27);
    }
  }
  return v5;
}

void sub_1B1A9A2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::PronChoice>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = (_DWORD *)v6;
  if (v7 < a3)
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v8 = *(_DWORD **)(a1 + 8);
    do
    {
      quasar::PronChoice::PronChoice(v8, v10);
      v10 += 40;
      v8 += 10;
    }
    while (v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,quasar::PronChoice *,quasar::PronChoice *,quasar::PronChoice *,0>(a2, v7, v6);
}

void sub_1B1A9A3A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::PronChoice>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PronChoice>,std::reverse_iterator<quasar::PronChoice*>,std::reverse_iterator<quasar::PronChoice*>,std::reverse_iterator<quasar::PronChoice*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PronChoice>,quasar::PronChoice*,quasar::PronChoice*,quasar::PronChoice*>(v7, a3, a1[1], (_DWORD *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

_DWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PronChoice>,quasar::PronChoice*,quasar::PronChoice*,quasar::PronChoice*>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      quasar::PronChoice::PronChoice(v4, v6);
      v6 += 40;
      uint64_t v4 = v11 + 10;
      v11 += 10;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PronChoice>,quasar::PronChoice*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1A9A4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PronChoice>,quasar::PronChoice*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PronChoice>,quasar::PronChoice*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PronChoice>,quasar::PronChoice*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 9) < 0) {
      operator delete(*(void **)(v1 - 32));
    }
    v1 -= 40;
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,quasar::PronChoice *,quasar::PronChoice *,quasar::PronChoice *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = 0;
    do
    {
      *(_DWORD *)(a3 + v6 - 40) = *(_DWORD *)(a2 + v6 - 40);
      std::string::operator=((std::string *)(a3 + v6 - 32), (const std::string *)(a2 + v6 - 32));
      *(_DWORD *)(a3 + v6 - 8) = *(_DWORD *)(a2 + v6 - 8);
      v6 -= 40;
    }
    while (a2 + v6 != a1);
  }
  return a2;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::PronChoice *>,std::__wrap_iter<quasar::PronChoice *>,quasar::PronChoice *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    *(_DWORD *)a3 = *(_DWORD *)v4;
    std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v4 + 8));
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(v4 + 32);
    a3 += 40;
    v4 += 40;
  }
  while (v4 != v5);
  return v5;
}

_DWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PronChoice>,quasar::PronChoice*,quasar::PronChoice*,quasar::PronChoice*>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      quasar::PronChoice::PronChoice(v4, v6);
      v6 += 40;
      uint64_t v4 = v11 + 10;
      v11 += 10;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PronChoice>,quasar::PronChoice*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1A9A70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::PdfPrior::PdfPrior(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 24);
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = &unk_1F0A517C0;
  *(void *)(a1 + 16) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(void *)(a2 + 8)) {
      return a1;
    }
  }
  else if (!*(unsigned char *)(a2 + 23))
  {
    return a1;
  }
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Computing pdf-priors from : ", 28);
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v22);
  }
  v22[0] = 0;
  kaldi::Input::OpenInternal(v22, a2, 0, 0);
  char v9 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v22);
  kaldi::Vector<double>::Read((uint64_t)&v23, v9, 0, 0);
  kaldi::Input::Close((kaldi::Input *)v22);
  kaldi::Input::~Input((kaldi::Input *)v22);
  uint64_t v10 = v24;
  memset(v21, 0, sizeof(v21));
  kaldi::Vector<float>::Resize((void **)v21, v24, 0);
  if ((int)v10 >= 1)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    uint64_t v13 = v23;
    unint64_t v14 = v21[0];
    do
    {
      double v15 = *(float *)(a2 + 28);
      if (v13[v11] < v15)
      {
        v13[v11] = v15;
        v14[v11] = 1.7014e38;
        ++v12;
      }
      ++v11;
    }
    while (v10 != v11);
    if (v12 >= 1 && kaldi::g_kaldi_verbose_level > -2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
      unint64_t v16 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" out of ", 8);
      uint64_t v17 = (void *)std::ostream::operator<<();
      unint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" classes have counts", 20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" lower than ", 12);
      std::ostream::operator<<();
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    }
  }
  double v19 = kaldi::VectorBase<double>::Sum((uint64_t)&v23);
  kaldi::VectorBase<double>::Scale((uint64_t)&v23, 1.0 / v19);
  kaldi::VectorBase<double>::ApplyLog((uint64_t)&v23);
  memset(v22, 0, 24);
  kaldi::Vector<float>::Resize(v22, v24, 1);
  kaldi::VectorBase<float>::CopyFromVec<double>((uint64_t)v22, &v23);
  kaldi::VectorBase<float>::AddVec<float>((uint64_t)v22, v21, 1.0);
  kaldi::CuVector<float>::Resize((uint64_t)v4, v10, 1);
  kaldi::CuVectorBase<float>::CopyFromVec<float>(v4, (uint64_t)v22);
  kaldi::Vector<float>::Destroy((uint64_t)v22);
  kaldi::Vector<float>::Destroy((uint64_t)v21);
  kaldi::Vector<float>::Destroy((uint64_t)&v23);
  return a1;
}

void sub_1B1A9A9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::Vector<float>::Destroy((uint64_t)&a9);
  kaldi::Vector<float>::Destroy(v10 - 88);
  kaldi::CuVector<float>::~CuVector(v9);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::nnet1::PdfPrior::SubtractOnLogpost(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 24);
  if (!v2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"--class-frame-counts is empty: Cannot initialize priors ", 56);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "without the counts.");
    goto LABEL_7;
  }
  if (v2 != *(_DWORD *)(a2 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Dimensionality mismatch,", 24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" class_frame_counts ", 20);
    uint64_t v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" pdf_output_llk ", 16);
    std::ostream::operator<<();
LABEL_7:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  float v3 = -*(float *)a1;
  return kaldi::CuMatrixBase<float>::AddVecToRows(a2, a1 + 8, v3, 1.0);
}

void sub_1B1A9AB28(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::nnet1::PdfPrior::SubtractLogpostForPdf(uint64_t a1, int a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 24);
  if (!v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"--class-frame-counts is empty: Cannot initialize priors ", 56);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "without the counts.");
    goto LABEL_7;
  }
  if (v3 <= a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Invalid pdf (", 13);
    uint64_t v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): log-prior dimension = ", 25);
    std::ostream::operator<<();
LABEL_7:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  float v4 = -(float)(*(float *)a1 * *(float *)(*(void *)(a1 + 16) + 4 * a2));
  return kaldi::CuVectorBase<float>::Add(a3, v4);
}

void sub_1B1A9AC10(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t quasar::matchMetaData(quasar::PTree *a1, quasar::PTree *a2, unsigned __int8 *a3)
{
  if (!quasar::PTree::isLeaf(a1))
  {
    if ((quasar::PTree::isLeaf(a2) & 1) == 0)
    {
      uint64_t v12 = quasar::PTree::size(a1);
      if (v12 == quasar::PTree::size(a2))
      {
        uint64_t v13 = quasar::PTree::begin(a1);
        for (uint64_t i = quasar::PTree::begin(a2); v13 != quasar::PTree::end(a1) && i != quasar::PTree::end(a2); i += 88)
        {
          uint64_t v15 = *(unsigned __int8 *)(v13 + 23);
          if ((v15 & 0x80u) == 0) {
            uint64_t v16 = *(unsigned __int8 *)(v13 + 23);
          }
          else {
            uint64_t v16 = *(void *)(v13 + 8);
          }
          uint64_t v17 = *(unsigned __int8 *)(i + 23);
          int v18 = (char)v17;
          if ((v17 & 0x80u) != 0) {
            uint64_t v17 = *(void *)(i + 8);
          }
          if (v16 != v17) {
            goto LABEL_74;
          }
          if (v18 >= 0) {
            double v19 = (unsigned __int8 *)i;
          }
          else {
            double v19 = *(unsigned __int8 **)i;
          }
          if ((v15 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v13, v19, *(void *)(v13 + 8))) {
              goto LABEL_74;
            }
          }
          else if (*(unsigned char *)(v13 + 23))
          {
            uint64_t v20 = 0;
            while (*(unsigned __int8 *)(v13 + v20) == v19[v20])
            {
              if (v15 == ++v20) {
                goto LABEL_37;
              }
            }
            goto LABEL_74;
          }
LABEL_37:
          if (!quasar::matchMetaData(v13 + 24, i + 24, a3)) {
            goto LABEL_74;
          }
          v13 += 88;
        }
        if (v13 == quasar::PTree::end(a1) && i == quasar::PTree::end(a2)) {
          goto LABEL_65;
        }
        if (quasar::gLogLevel >= 1)
        {
LABEL_73:
          memset(v42, 0, sizeof(v42));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v42);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Logic error (this should not happen).", 37);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v42);
        }
      }
    }
    goto LABEL_74;
  }
  String = (unsigned __int8 *)quasar::PTree::getString(a1);
  uint64_t v7 = String[23];
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = String[23];
  }
  else {
    uint64_t v8 = *((void *)String + 1);
  }
  uint64_t v9 = a3[23];
  int v10 = (char)v9;
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *((void *)a3 + 1);
  }
  if (v8 == v9)
  {
    if (v10 >= 0) {
      uint64_t v11 = a3;
    }
    else {
      uint64_t v11 = *(unsigned __int8 **)a3;
    }
    if ((v7 & 0x80) != 0)
    {
      if (memcmp(*(const void **)String, v11, *((void *)String + 1))) {
        goto LABEL_40;
      }
    }
    else if (String[23])
    {
      while (*String == *v11)
      {
        ++String;
        ++v11;
        if (!--v7) {
          goto LABEL_65;
        }
      }
      goto LABEL_40;
    }
LABEL_65:
    char v22 = 1;
    return v22 & 1;
  }
LABEL_40:
  int DataType = quasar::PTree::getDataType(a1);
  if (DataType != quasar::PTree::getDataType(a2))
  {
LABEL_74:
    char v22 = 0;
    return v22 & 1;
  }
  switch(quasar::PTree::getDataType(a1))
  {
    case 0u:
      uint64_t v23 = (unsigned __int8 *)quasar::PTree::getString(a1);
      uint64_t v24 = quasar::PTree::getString(a2);
      uint64_t v25 = v23[23];
      if ((v25 & 0x80u) == 0) {
        uint64_t v26 = v23[23];
      }
      else {
        uint64_t v26 = *((void *)v23 + 1);
      }
      uint64_t v27 = *(unsigned __int8 *)(v24 + 23);
      int v28 = (char)v27;
      if ((v27 & 0x80u) != 0) {
        uint64_t v27 = *(void *)(v24 + 8);
      }
      if (v26 != v27) {
        goto LABEL_74;
      }
      if (v28 >= 0) {
        int v29 = (unsigned __int8 *)v24;
      }
      else {
        int v29 = *(unsigned __int8 **)v24;
      }
      if ((v25 & 0x80) != 0)
      {
        BOOL v38 = memcmp(*(const void **)v23, v29, *((void *)v23 + 1)) == 0;
LABEL_68:
        char v22 = v38;
      }
      else
      {
        if (!v23[23]) {
          goto LABEL_65;
        }
        uint64_t v30 = v25 - 1;
        do
        {
          int v32 = *v23++;
          int v31 = v32;
          int v34 = *v29++;
          int v33 = v34;
          BOOL v36 = v30-- != 0;
          char v22 = v31 == v33;
        }
        while (v22 && v36);
      }
      break;
    case 1u:
      double Double = quasar::PTree::getDouble(a1);
      BOOL v38 = Double == quasar::PTree::getDouble(a2);
      goto LABEL_68;
    case 2u:
      int v39 = quasar::PTree::getInt<int>((uint64_t)a1);
      BOOL v38 = v39 == quasar::PTree::getInt<int>((uint64_t)a2);
      goto LABEL_68;
    case 3u:
      char Bool = quasar::PTree::getBool(a1);
      char v22 = Bool ^ quasar::PTree::getBool(a2) ^ 1;
      return v22 & 1;
    case 4u:
      if (quasar::gLogLevel >= 1) {
        goto LABEL_73;
      }
      goto LABEL_74;
    default:
      return v22 & 1;
  }
  return v22 & 1;
}

void sub_1B1A9B010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *quasar::SelectBlockOptions::options@<X0>(quasar::SelectBlockOptions *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = operator new(0x18uLL);
  a2[1] = result + 3;
  a2[2] = result + 3;
  *uint64_t result = (char *)this + 16;
  result[1] = (char *)this + 176;
  result[2] = (char *)this + 376;
  *a2 = result;
  return result;
}

void quasar::SelectBlock::processBody(quasar::SelectBlock *this)
{
  int v2 = (quasar::SelectBlock *)((char *)this + 552);
  Value = (void *)quasar::ProcessingInput::getValue((quasar::SelectBlock *)((char *)this + 552));
  if (*Value != Value[1])
  {
    uint64_t v4 = quasar::ProcessingInput::getValue(v2);
    uint64_t v5 = quasar::MetaInfo::get((quasar::MetaInfo *)(*(void *)v4 + 192));
    uint64_t v6 = quasar::OptionValue<std::string>::value((void *)this + 3);
    quasar::PTree::getChildOptional(v5, v6);
  }
  uint64_t v7 = *(void *)(*(void *)this - 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "pass");
  uint64_t v8 = quasar::ProcessingInput::getValue((quasar::SelectBlock *)((char *)this + 608));
  quasar::ProcessingBlock::send((uint64_t)this + v7, (const void **)__p, v8, 0);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1A9B21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ProcessingInput::getValue(quasar::ProcessingInput *this)
{
  if (*((unsigned char *)this + 24)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = quasar::gLogLevel < 1;
  }
  if (!v2)
  {
    memset(v9, 0, sizeof(v9));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Input'", 6);
    int v4 = *((char *)this + 23);
    if (v4 >= 0) {
      uint64_t v5 = this;
    }
    else {
      uint64_t v5 = *(quasar::ProcessingInput **)this;
    }
    if (v4 >= 0) {
      uint64_t v6 = *((unsigned __int8 *)this + 23);
    }
    else {
      uint64_t v6 = *((void *)this + 1);
    }
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"' has no value set!", 19);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v9);
  }
  return (uint64_t)this + 32;
}

void sub_1B1A9B300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void non-virtual thunk to'quasar::SelectBlock::processBody(quasar::SelectBlock *this)
{
}

uint64_t quasar::SelectBlock::minConfigVersion(quasar::SelectBlock *this)
{
  return 165;
}

uint64_t virtual thunk to'quasar::SelectBlock::minConfigVersion(quasar::SelectBlock *this)
{
  return 165;
}

void quasar::ConfiguredProcessingBlock<quasar::SelectBlockOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  uint64_t *v11;

  int v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
  (**v3)(&v10);
  int v4 = v10;
  uint64_t v5 = v11;
  if (v10 != v11)
  {
    do
    {
      uint64_t v6 = *v4;
      uint64_t v7 = (std::__shared_weak_count *)a2[1];
      uint64_t v8 = *a2;
      uint64_t v9 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      quasar::OptionValueBase::setContextProvider(v6, &v8);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      ++v4;
    }
    while (v4 != v5);
    int v4 = v10;
  }
  if (v4)
  {
    uint64_t v11 = v4;
    operator delete(v4);
  }
}

void sub_1B1A9B408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::SelectBlockOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::SelectBlockOptions>::setContextProvider(void *a1, uint64_t *a2)
{
}

void quasar::ProcessingBlock::compilationSpecs(void *a1@<X8>)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
}

uint64_t virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::SelectBlockOptions>::getOptions(void *a1)
{
  return (uint64_t)a1 + *(void *)(*a1 - 104) + 8;
}

uint64_t quasar::ProcessingBlock::getOptions(quasar::ProcessingBlock *this)
{
  return 0;
}

void quasar::SelectBlock::~SelectBlock(quasar::SelectBlock *this)
{
  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 664));
}

{
  uint64_t v1;
  uint64_t vars8;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 664));
  JUMPOUT(0x1B3EA8670);
}

const char *quasar::SelectBlock::blockType(quasar::SelectBlock *this)
{
  return "SelectBlock";
}

void *quasar::SelectBlock::inputs@<X0>(quasar::SelectBlock *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *uint64_t result = (char *)this + 552;
  result[1] = (char *)this + 608;
  *a2 = result;
  return result;
}

void *non-virtual thunk to'quasar::SelectBlock::inputs@<X0>(quasar::SelectBlock *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *uint64_t result = (char *)this + 8;
  result[1] = (char *)this + 64;
  *a2 = result;
  return result;
}

void non-virtual thunk to'quasar::SelectBlock::~SelectBlock(char **this)
{
  quasar::ProcessingBlock::~ProcessingBlock(this + 15);
}

{
  uint64_t vars8;

  quasar::ProcessingBlock::~ProcessingBlock(this + 15);
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'quasar::SelectBlock::~SelectBlock(quasar::SelectBlock *this)
{
  BOOL v2 = (char **)(v1 + 664);
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char **v1;
  uint64_t vars8;

  uint64_t v1 = (char **)((char *)this + *(void *)(*(void *)this - 24));
  quasar::ProcessingBlock::~ProcessingBlock(v1 + 83);
  JUMPOUT(0x1B3EA8670);
}

const char *virtual thunk to'quasar::SelectBlock::blockType(quasar::SelectBlock *this)
{
  return "SelectBlock";
}

void quasar::QuasarErrorMessage::~QuasarErrorMessage(quasar::QuasarErrorMessage *this)
{
  BOOL v2 = quasar::QuasarErrorMessage::logger;
  std::stringbuf::str();
  ((void (*)(std::string *, void))v2)(&__p, *((void *)this + 33));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (getenv("QSR_CRASH_ON_WARN"))
  {
    if (std::uncaught_exception()) {
      abort();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v3 = MEMORY[0x1E4FBA418];
  uint64_t v4 = *MEMORY[0x1E4FBA418];
  *(void *)this = *MEMORY[0x1E4FBA418];
  *(void *)((char *)this + *(void *)(v4 - 24)) = *(void *)(v3 + 24);
  *((void *)this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520]((char *)this + 112);
}

void sub_1B1A9B8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      quasar::QuasarMessage::~QuasarMessage(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void quasar::QuasarMessage::~QuasarMessage(quasar::QuasarMessage *this)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)this = *MEMORY[0x1E4FBA418];
  *(void *)((char *)this + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *((void *)this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520]((char *)this + 112);
}

void quasar::SelectBlock::~SelectBlock(quasar::SelectBlock *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[5];
  *((void *)this + 68) = a2[6];
  uint64_t v6 = (void **)((char *)this + 640);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 631) < 0) {
    operator delete(*((void **)this + 76));
  }
  uint64_t v6 = (void **)((char *)this + 584);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 575) < 0) {
    operator delete(*((void **)this + 69));
  }
  uint64_t v5 = a2[1];
  *(void *)this = v5;
  *(void *)((char *)this + *(void *)(v5 - 24)) = a2[2];
  quasar::SelectBlockOptions::~SelectBlockOptions((quasar::SelectBlock *)((char *)this + 8));
}

void std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)(v4 - 200));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void quasar::TranslationPhraseInternal::~TranslationPhraseInternal(quasar::TranslationPhraseInternal *this)
{
  quasar::MetaInfo::~MetaInfo((quasar::MetaInfo::Impl **)this + 24);
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  uint64_t v2 = (void **)((char *)this + 136);
  std::vector<quasar::TranslationTokenInternal>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((unsigned char *)this + 120))
  {
    uint64_t v2 = (void **)((char *)this + 96);
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  }
  if (*((unsigned char *)this + 88) && *((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  uint64_t v2 = (void **)((char *)this + 16);
  std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<quasar::TranslationTokenInternal>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 104);
  if (v3)
  {
    *(void *)(a2 + 112) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 95) < 0) {
    operator delete(*(void **)(a2 + 72));
  }
  uint64_t v4 = *(void **)(a2 + 32);
  if (v4)
  {
    *(void *)(a2 + 40) = v4;
    operator delete(v4);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v5 = *(void **)a2;
    operator delete(v5);
  }
}

void std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 40;
        uint64_t v7 = (void **)(v4 - 24);
        std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&v7);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<quasar::AlternativeSelectionSpan::Alternative>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<quasar::AlternativeSelectionSpan::Alternative>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<quasar::TranslationToken>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::TranslationToken>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 32);
  if (v3)
  {
    *(void *)(a2 + 40) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v4 = *(void **)a2;
    operator delete(v4);
  }
}

void quasar::SelectBlockOptions::~SelectBlockOptions(quasar::SelectBlockOptions *this)
{
  *(void *)this = &unk_1F0A541E0;
  *((void *)this + 47) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 512, *((void **)this + 65));
  if (*((char *)this + 503) < 0) {
    operator delete(*((void **)this + 60));
  }
  *((void *)this + 47) = &unk_1F0A52FB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 59);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 455) < 0) {
    operator delete(*((void **)this + 54));
  }
  if (*((char *)this + 431) < 0) {
    operator delete(*((void **)this + 51));
  }
  if (*((char *)this + 407) < 0) {
    operator delete(*((void **)this + 48));
  }
  *((void *)this + 22) = &unk_1F0A51DB0;
  std::__tree<std::__value_type<std::string,quasar::PTree>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PTree>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::PTree>>>::destroy((uint64_t)this + 352, *((void **)this + 45));
  quasar::PTree::~PTree((quasar::SelectBlockOptions *)((char *)this + 280));
  *((void *)this + 22) = &unk_1F0A52FB8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 255) < 0) {
    operator delete(*((void **)this + 29));
  }
  if (*((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  *((void *)this + 2) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 152, *((void **)this + 20));
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  *((void *)this + 2) = &unk_1F0A52FB8;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

void quasar::OptionValue<std::string>::updateOptionalFromPtree(std::string *a1, uint64_t a2, const void **a3)
{
  p_std::string::size_type size = &a1->__r_.__value_.__l.__size_;
  quasar::getOptional<std::string>(&v16, a2, &a1->__r_.__value_.__r.__words[1]);
  if (*((char *)a3 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v6 = (size_t)a3[1];
  }
  uint64_t v7 = &v14;
  std::string::basic_string[abi:ne180100]((uint64_t)&v14, v6 + 1);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v7 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v8 = a3;
    }
    else {
      uint64_t v8 = *a3;
    }
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 46;
  int v9 = a1[1].__r_.__value_.__s.__data_[7];
  if (v9 >= 0) {
    std::string::size_type size = (const std::string::value_type *)p_size;
  }
  else {
    std::string::size_type size = (const std::string::value_type *)a1->__r_.__value_.__l.__size_;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = a1[1].__r_.__value_.__s.__data_[7];
  }
  else {
    std::string::size_type v11 = a1->__r_.__value_.__r.__words[2];
  }
  uint64_t v12 = std::string::append(&v14, size, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  quasar::OptionValue<std::string>::updateOptional(a1, &v16, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (v17)
  {
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1B1A9C364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a28)
  {
    if (a27 < 0) {
      operator delete(a22);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OptionValue<std::string>::debugInfo(uint64_t a1)
{
  uint64_t v2 = quasar::OptionValue<std::string>::fallback(a1);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v39);
  int v3 = *(char *)(a1 + 31);
  if (v3 >= 0) {
    uint64_t v4 = a1 + 8;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 16);
  }
  size_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v4, v5);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
  int v8 = *(char *)(v2 + 127);
  if (v8 >= 0) {
    uint64_t v9 = v2 + 104;
  }
  else {
    uint64_t v9 = *(void *)(v2 + 104);
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(v2 + 127);
  }
  else {
    uint64_t v10 = *(void *)(v2 + 112);
  }
  std::string::size_type v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" (", 2);
  uint64_t v15 = *(void *)(v2 + 32);
  uint64_t v14 = v2 + 32;
  uint64_t v13 = v15;
  int v16 = *(char *)(v14 + 23);
  if (v16 >= 0) {
    uint64_t v17 = v14;
  }
  else {
    uint64_t v17 = v13;
  }
  if (v16 >= 0) {
    uint64_t v18 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    uint64_t v18 = *(void *)(v14 + 8);
  }
  double v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v17, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)")", 1);
  if (*(void *)(a1 + 152))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" overrides: [", 13);
    uint64_t v20 = *(void **)(a1 + 136);
    uint64_t v21 = (void *)(a1 + 144);
    if (v20 != (void *)(a1 + 144))
    {
      do
      {
        char v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"\"", 1);
        int v23 = *((char *)v20 + 55);
        if (v23 >= 0) {
          uint64_t v24 = (uint64_t)(v20 + 4);
        }
        else {
          uint64_t v24 = v20[4];
        }
        if (v23 >= 0) {
          uint64_t v25 = *((unsigned __int8 *)v20 + 55);
        }
        else {
          uint64_t v25 = v20[5];
        }
        uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
        uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\": ", 3);
        int v28 = *((char *)v20 + 79);
        if (v28 >= 0) {
          uint64_t v29 = (uint64_t)(v20 + 7);
        }
        else {
          uint64_t v29 = v20[7];
        }
        if (v28 >= 0) {
          uint64_t v30 = *((unsigned __int8 *)v20 + 79);
        }
        else {
          uint64_t v30 = v20[8];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v29, v30);
        int v31 = (void *)*v21;
        int v32 = (void *)(a1 + 144);
        if (*v21)
        {
          do
          {
            int v33 = v31;
            int v31 = (void *)v31[1];
          }
          while (v31);
        }
        else
        {
          do
          {
            int v33 = (void *)v32[2];
            BOOL v34 = *v33 == (void)v32;
            int v32 = v33;
          }
          while (v34);
        }
        if (v20 != v33) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)", ", 2);
        }
        std::vector<int>::pointer v35 = (void *)v20[1];
        if (v35)
        {
          do
          {
            BOOL v36 = v35;
            std::vector<int>::pointer v35 = (void *)*v35;
          }
          while (v35);
        }
        else
        {
          do
          {
            BOOL v36 = (void *)v20[2];
            BOOL v34 = *v36 == (void)v20;
            uint64_t v20 = v36;
          }
          while (!v34);
        }
        uint64_t v20 = v36;
      }
      while (v36 != v21);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"]", 1);
  }
  std::stringbuf::str();
  v39[0] = *MEMORY[0x1E4FBA408];
  uint64_t v37 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v39 + *(void *)(v39[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v40[0] = v37;
  v40[1] = MEMORY[0x1E4FBA470] + 16;
  if (v41 < 0) {
    operator delete((void *)v40[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v42);
}

void sub_1B1A9C708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::OptionValue<std::string>::addOverride(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[0] = a2;
  v8[1] = a3;
  quasar::getOptional<std::string>(&__p, a4, a1 + 8);
  if (v7)
  {
    uint64_t v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string_view>(a1 + 136, (uint64_t)v8);
    if (a1 + 144 == v5) {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_impl<std::string_view &,std::string&>((uint64_t **)(a1 + 136), (uint64_t *)v5, (uint64_t)v8, (long long *)&__p);
    }
    else {
      std::string::operator=((std::string *)(v5 + 56), &__p);
    }
    if (v7)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1B1A9C7BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OptionValue<std::string>::isOverridable()
{
  return 0;
}

std::string *quasar::OptionValue<std::string>::updateOptional(std::string *result, const std::string *a2, const std::string *a3)
{
  if (a2[1].__r_.__value_.__s.__data_[0])
  {
    uint64_t v4 = result;
    std::string::operator=((std::string *)((char *)result + 104), a2);
    return std::string::operator=((std::string *)((char *)v4 + 32), a3);
  }
  return result;
}

uint64_t quasar::OptionValue<std::string>::fallback(uint64_t a1)
{
  do
  {
    uint64_t v1 = a1;
    a1 = *(void *)(a1 + 128);
    if (!a1) {
      break;
    }
    uint64_t v2 = (uint64_t *)(v1 + 32);
    int v3 = *(char *)(v1 + 55);
    if (v3 < 0)
    {
      if (*(void *)(v1 + 40) != 9) {
        return v1;
      }
      uint64_t v2 = (uint64_t *)*v2;
    }
    else if (v3 != 9)
    {
      return v1;
    }
    uint64_t v4 = (uint64_t *)*v2;
    int v5 = *((unsigned __int8 *)v2 + 8);
  }
  while (v4 == (uint64_t *)0x746C75616665643CLL && v5 == 62);
  return v1;
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string_view>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    int v7 = std::less<void>::operator()[abi:ne180100]<std::string const&,std::string_view const&>(v5, (const void **)(v3 + 32), a2);
    int v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      int v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2
    || std::less<void>::operator()[abi:ne180100]<std::string_view const&,std::string const&>(v5, a2, (const void **)(v6 + 32)))
  {
    return v2;
  }
  return v6;
}

uint64_t std::less<void>::operator()[abi:ne180100]<std::string const&,std::string_view const&>(uint64_t a1, const void **a2, uint64_t a3)
{
  int v3 = *((char *)a2 + 23);
  if (v3 >= 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = *a2;
  }
  if (v3 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  uint64_t v6 = *(const void **)a3;
  size_t v7 = *(void *)(a3 + 8);
  if (v7 >= v5) {
    size_t v8 = v5;
  }
  else {
    size_t v8 = *(void *)(a3 + 8);
  }
  int v9 = memcmp(v4, v6, v8);
  if (v5 < v7) {
    unsigned int v10 = -1;
  }
  else {
    unsigned int v10 = 1;
  }
  if (v5 == v7) {
    unsigned int v10 = 0;
  }
  if (v9) {
    unsigned int v10 = v9;
  }
  return v10 >> 31;
}

uint64_t std::less<void>::operator()[abi:ne180100]<std::string_view const&,std::string const&>(uint64_t a1, uint64_t a2, const void **a3)
{
  int v3 = *(const void **)a2;
  size_t v4 = *(void *)(a2 + 8);
  int v5 = *((char *)a3 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = *a3;
  }
  if (v5 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v7 >= v4) {
    size_t v8 = v4;
  }
  else {
    size_t v8 = v7;
  }
  int v9 = memcmp(v3, v6, v8);
  if (v4 < v7) {
    unsigned int v10 = -1;
  }
  else {
    unsigned int v10 = 1;
  }
  if (v4 == v7) {
    unsigned int v10 = 0;
  }
  if (v9) {
    unsigned int v10 = v9;
  }
  return v10 >> 31;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_impl<std::string_view &,std::string&>(uint64_t **a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::string_view &,std::string&>((uint64_t)a1, a3, a4, (uint64_t)v11);
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v10, &v9, (const void **)v11[0] + 4);
  size_t v7 = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v6, v11[0]);
    size_t v7 = v11[0];
    v11[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  return v7;
}

void sub_1B1A9CA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::string_view &,std::string&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  size_t v8 = (char *)operator new(0x50uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string_view &,std::string&,0>((std::string *)(v8 + 32), a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1A9CAF0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string_view &,std::string&,0>(std::string *__dst, uint64_t a2, long long *a3)
{
  size_t v4 = *(void *)(a2 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = *(const void **)a2;
  if (v4 >= 0x17)
  {
    uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v8 = v4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = operator new(v8 + 1);
    __dst->__r_.__value_.__l.__size_ = v4;
    __dst->__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst->__r_.__value_.__s + 23) = v4;
  uint64_t v7 = __dst;
  if (v4) {
LABEL_8:
  }
    memmove(v7, v6, v4);
  *((unsigned char *)v7 + v4) = 0;
  unsigned int v10 = __dst + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v11 = *a3;
    __dst[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  return __dst;
}

void sub_1B1A9CBE0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void quasar::OptionValue<quasar::PTree>::updateOptionalFromPtree(uint64_t a1, uint64_t a2)
{
}

void sub_1B1A9CD7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a31) {
    quasar::PTree::~PTree((quasar::PTree *)&a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OptionValue<quasar::PTree>::debugInfo(uint64_t a1)
{
  uint64_t v2 = quasar::OptionValue<quasar::PTree>::fallback(a1);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v33);
  int v3 = *(char *)(a1 + 31);
  if (v3 >= 0) {
    uint64_t v4 = a1 + 8;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v4, v5);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
  uint64_t v8 = quasar::operator<<(v7, (quasar::PTree *)(v2 + 104));
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" (", 2);
  uint64_t v12 = *(void *)(v2 + 32);
  uint64_t v11 = v2 + 32;
  uint64_t v10 = v12;
  int v13 = *(char *)(v11 + 23);
  if (v13 >= 0) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = v10;
  }
  if (v13 >= 0) {
    uint64_t v15 = *(unsigned __int8 *)(v11 + 23);
  }
  else {
    uint64_t v15 = *(void *)(v11 + 8);
  }
  int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v14, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)")", 1);
  if (*(void *)(a1 + 192))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" overrides: [", 13);
    uint64_t v17 = *(void **)(a1 + 176);
    uint64_t v18 = (void *)(a1 + 184);
    if (v17 != (void *)(a1 + 184))
    {
      do
      {
        double v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"\"", 1);
        int v20 = *((char *)v17 + 55);
        if (v20 >= 0) {
          uint64_t v21 = (uint64_t)(v17 + 4);
        }
        else {
          uint64_t v21 = v17[4];
        }
        if (v20 >= 0) {
          uint64_t v22 = *((unsigned __int8 *)v17 + 55);
        }
        else {
          uint64_t v22 = v17[5];
        }
        int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
        uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\": ", 3);
        quasar::operator<<(v24, (quasar::PTree *)(v17 + 7));
        uint64_t v25 = (void *)*v18;
        uint64_t v26 = (void *)(a1 + 184);
        if (*v18)
        {
          do
          {
            uint64_t v27 = v25;
            uint64_t v25 = (void *)v25[1];
          }
          while (v25);
        }
        else
        {
          do
          {
            uint64_t v27 = (void *)v26[2];
            BOOL v28 = *v27 == (void)v26;
            uint64_t v26 = v27;
          }
          while (v28);
        }
        if (v17 != v27) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", ", 2);
        }
        uint64_t v29 = (void *)v17[1];
        if (v29)
        {
          do
          {
            uint64_t v30 = v29;
            uint64_t v29 = (void *)*v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            uint64_t v30 = (void *)v17[2];
            BOOL v28 = *v30 == (void)v17;
            uint64_t v17 = v30;
          }
          while (!v28);
        }
        uint64_t v17 = v30;
      }
      while (v30 != v18);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"]", 1);
  }
  std::stringbuf::str();
  v33[0] = *MEMORY[0x1E4FBA408];
  uint64_t v31 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v33 + *(void *)(v33[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v34[0] = v31;
  v34[1] = MEMORY[0x1E4FBA470] + 16;
  if (v35 < 0) {
    operator delete((void *)v34[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v36);
}

void sub_1B1A9D0E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::OptionValue<quasar::PTree>::addOverride(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2;
  uint64_t v5 = a3;
  quasar::getOptional<quasar::PTree>(a4, a1 + 8);
}

void sub_1B1A9D1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a18) {
    quasar::PTree::~PTree((quasar::PTree *)&a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OptionValue<quasar::PTree>::isOverridable()
{
  return 0;
}

void std::__tree<std::__value_type<std::string,quasar::PTree>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PTree>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::PTree>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,quasar::PTree>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PTree>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::PTree>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,quasar::PTree>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PTree>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::PTree>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::PTree>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::PTree>,0>(uint64_t a1)
{
  quasar::PTree::~PTree((quasar::PTree *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

std::string *quasar::OptionValue<quasar::PTree>::updateOptional(std::string *result, uint64_t a2, const std::string *a3)
{
  if (*(unsigned char *)(a2 + 64))
  {
    uint64_t v5 = result;
    LODWORD(result[4].__r_.__value_.__r.__words[1]) = *(_DWORD *)a2;
    uint64_t v6 = &result[4].__r_.__value_.__s.__data_[8];
    std::string::operator=((std::string *)((char *)result + 112), (const std::string *)(a2 + 8));
    if (v6 != (char *)a2) {
      std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((uint64_t)&v5[5].__r_.__value_.__r.__words[2], *(std::string **)(a2 + 32), *(std::string **)(a2 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
    }
    v5[6].__r_.__value_.__s.__data_[16] = *(unsigned char *)(a2 + 56);
    return std::string::operator=((std::string *)((char *)v5 + 32), a3);
  }
  return result;
}

void std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(uint64_t a1, std::string *a2, std::string *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(std::string **)a1;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::pair<std::string,quasar::PTree>>::__vdeallocate((void **)a1);
    if (a4 > 0x2E8BA2E8BA2E8BALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5D1745D1745D1746 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)) >= 0x1745D1745D1745DLL) {
      unint64_t v11 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::pair<std::string,quasar::PTree>>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>,std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(v8, (uint64_t)a2, (uint64_t)a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    int v13 = (std::string *)((char *)a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,quasar::PTree> *,std::pair<std::string,quasar::PTree> *,std::pair<std::string,quasar::PTree> *>((int)&v17, a2, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>,std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(v8, (uint64_t)v13, (uint64_t)a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,quasar::PTree> *,std::pair<std::string,quasar::PTree> *,std::pair<std::string,quasar::PTree> *>((int)&v18, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 88;
      std::allocator<std::pair<std::string,quasar::PTree>>::destroy[abi:ne180100](v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B1A9D4F0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1A9D4F8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,quasar::PTree>>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 88;
        std::allocator<std::pair<std::string,quasar::PTree>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<std::pair<std::string,quasar::PTree>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>,std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4)
{
  uint64_t v4 = a4;
  unint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::pair<std::string,quasar::PTree>::pair[abi:ne180100](v4);
      v6 += 88;
      uint64_t v4 = (std::string *)((char *)v11 + 88);
      unint64_t v11 = (std::string *)((char *)v11 + 88);
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::PTree>>,std::pair<std::string,quasar::PTree>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1A9D658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *std::pair<std::string,quasar::PTree>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6);
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v5 = a2[2];
    this[2].__r_.__value_.__r.__words[0] = *((void *)a2 + 6);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v5;
  }
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)((char *)this + 56), *((void *)a2 + 7), *((void *)a2 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3));
  this[3].__r_.__value_.__s.__data_[8] = *((unsigned char *)a2 + 80);
  return this;
}

void sub_1B1A9D734(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(std::string *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::pair<std::string,quasar::PTree>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>,std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B1A9D7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::pair<std::string,quasar::PTree>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,quasar::PTree>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::allocator<std::pair<std::string,quasar::PTree>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,quasar::PTree>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  quasar::PTree::~PTree((quasar::PTree *)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::PTree>>,std::pair<std::string,quasar::PTree>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::PTree>>,std::pair<std::string,quasar::PTree>*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::PTree>>,std::pair<std::string,quasar::PTree>*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 88;
      std::allocator<std::pair<std::string,quasar::PTree>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,quasar::PTree> *,std::pair<std::string,quasar::PTree> *,std::pair<std::string,quasar::PTree> *>(int a1, std::string *__str, std::string *a3, std::string *this)
{
  uint64_t v5 = __str;
  if (__str == a3) {
    return __str;
  }
  uint64_t v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    LODWORD(this[1].__r_.__value_.__l.__data_) = v5[1].__r_.__value_.__l.__data_;
    std::string::operator=((std::string *)((char *)this + 32), (std::string *)((char *)v5 + 32));
    if (this != v5) {
      std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&this[2].__r_.__value_.__r.__words[1]);
    }
    this[3].__r_.__value_.__s.__data_[8] = v5[3].__r_.__value_.__s.__data_[8];
    this = (std::string *)((char *)this + 88);
    uint64_t v5 = (std::string *)((char *)v5 + 88);
  }
  while (v5 != v6);
  return v6;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(88 * a2);
}

uint64_t quasar::OptionValue<quasar::PTree>::fallback(uint64_t a1)
{
  do
  {
    uint64_t v1 = a1;
    a1 = *(void *)(a1 + 168);
    if (!a1) {
      break;
    }
    uint64_t v2 = (uint64_t *)(v1 + 32);
    int v3 = *(char *)(v1 + 55);
    if (v3 < 0)
    {
      if (*(void *)(v1 + 40) != 9) {
        return v1;
      }
      uint64_t v2 = (uint64_t *)*v2;
    }
    else if (v3 != 9)
    {
      return v1;
    }
    uint64_t v4 = (uint64_t *)*v2;
    int v5 = *((unsigned __int8 *)v2 + 8);
  }
  while (v4 == (uint64_t *)0x746C75616665643CLL && v5 == 62);
  return v1;
}

void *quasar::operator<<(void *a1, quasar::PTree *this)
{
  switch(quasar::PTree::getDataType(this))
  {
    case 0u:
      uint64_t String = quasar::PTree::getString(this);
      int v5 = *(char *)(String + 23);
      if (v5 >= 0) {
        uint64_t v6 = String;
      }
      else {
        uint64_t v6 = *(void *)String;
      }
      if (v5 >= 0) {
        uint64_t v7 = *(unsigned __int8 *)(String + 23);
      }
      else {
        uint64_t v7 = *(void *)(String + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v6, v7);
      break;
    case 1u:
      quasar::PTree::getDouble(this);
      std::ostream::operator<<();
      break;
    case 2u:
      quasar::PTree::getInt<int>((uint64_t)this);
      std::ostream::operator<<();
      break;
    case 3u:
      quasar::PTree::getBool(this);
      std::ostream::operator<<();
      break;
    case 4u:
      std::string __p = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      quasar::ptree2Json();
    default:
      return a1;
  }
  return a1;
}

void sub_1B1A9DBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::PTree>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PTree>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::PTree>>>::__emplace_hint_unique_impl<std::string_view &,quasar::PTree&>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  std::__tree<std::__value_type<std::string,quasar::PTree>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PTree>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::PTree>>>::__construct_node<std::string_view &,quasar::PTree&>((uint64_t)a1, a3, a4, (uint64_t)v11);
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v10, &v9, (const void **)v11[0] + 4);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v6, v11[0]);
    uint64_t v7 = v11[0];
    v11[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::PTree>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::PTree>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  return v7;
}

void sub_1B1A9DCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::PTree>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::PTree>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<std::string,quasar::PTree>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PTree>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::PTree>>>::__construct_node<std::string_view &,quasar::PTree&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = (char *)operator new(0x78uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = std::pair<std::string const,quasar::PTree>::pair[abi:ne180100]<std::string_view &,quasar::PTree&,0>(v8 + 32, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1A9DD14(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::PTree>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::PTree>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

char *std::pair<std::string const,quasar::PTree>::pair[abi:ne180100]<std::string_view &,quasar::PTree&,0>(char *__dst, uint64_t a2, uint64_t a3)
{
  size_t v4 = *(void *)(a2 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = *(const void **)a2;
  if (v4 >= 0x17)
  {
    uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v8 = v4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = operator new(v8 + 1);
    *((void *)__dst + 1) = v4;
    *((void *)__dst + 2) = v9 | 0x8000000000000000;
    *(void *)__dst = v7;
    goto LABEL_8;
  }
  __dst[23] = v4;
  uint64_t v7 = __dst;
  if (v4) {
LABEL_8:
  }
    memmove(v7, v6, v4);
  *((unsigned char *)v7 + v4) = 0;
  *((_DWORD *)__dst + 6) = *(_DWORD *)a3;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(__dst + 32), *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v10 = *(_OWORD *)(a3 + 8);
    *((void *)__dst + 6) = *(void *)(a3 + 24);
    *((_OWORD *)__dst + 2) = v10;
  }
  *((void *)__dst + 7) = 0;
  *((void *)__dst + 8) = 0;
  *((void *)__dst + 9) = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)(__dst + 56), *(void *)(a3 + 32), *(void *)(a3 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a3 + 40) - *(void *)(a3 + 32)) >> 3));
  __dst[80] = *(unsigned char *)(a3 + 56);
  return __dst;
}

void sub_1B1A9DE4C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::PTree>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::PTree>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::PTree>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t quasar::OptionValue<std::string>::value(void *a1)
{
  uint64_t v2 = quasar::OptionValue<std::string>::fallback((uint64_t)a1) + 104;
  if ((*(unsigned int (**)(void *))(*a1 + 32))(a1))
  {
    int v3 = (const void ****)a1[11];
    size_t v4 = (std::__shared_weak_count *)v3[1];
    if (v4)
    {
      int v5 = *v3;
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v6 = std::__shared_weak_count::lock(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v6)
      {
        if (v5)
        {
          uint64_t v7 = *v5;
          uint64_t v8 = v5[1];
          if (*v5 != v8)
          {
            uint64_t v9 = (uint64_t)(a1 + 17);
            long long v10 = a1 + 18;
            do
            {
              uint64_t v11 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v9, v7);
              if (v10 != (void *)v11) {
                uint64_t v2 = v11 + 56;
              }
              v7 += 3;
            }
            while (v7 != v8);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
  return v2;
}

void sub_1B1A9DFB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::OptionValue<quasar::PTree>::value(void *a1)
{
  uint64_t v2 = quasar::OptionValue<quasar::PTree>::fallback((uint64_t)a1) + 104;
  if ((*(unsigned int (**)(void *))(*a1 + 32))(a1))
  {
    int v3 = (const void ****)a1[11];
    size_t v4 = (std::__shared_weak_count *)v3[1];
    if (v4)
    {
      int v5 = *v3;
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v6 = std::__shared_weak_count::lock(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v6)
      {
        if (v5)
        {
          uint64_t v7 = *v5;
          uint64_t v8 = v5[1];
          if (*v5 != v8)
          {
            uint64_t v9 = (uint64_t)(a1 + 22);
            long long v10 = a1 + 23;
            do
            {
              uint64_t v11 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v9, v7);
              if (v10 != (void *)v11) {
                uint64_t v2 = v11 + 56;
              }
              v7 += 3;
            }
            while (v7 != v8);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
  return v2;
}

void sub_1B1A9E0AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineAEDRescoringDecoder::OnlineAEDRescoringDecoder(uint64_t a1, long long *a2)
{
  uint64_t v3 = quasar::CTCAlignedDecoder::CTCAlignedDecoder(a1, a2);
  *(void *)uint64_t v3 = &unk_1F0A56F78;
  *(_DWORD *)(v3 + 472) = 32;
  std::string::basic_string[abi:ne180100]<0>((void *)(v3 + 480), "");
  *(void *)(a1 + 504) = 0x3F8000003E99999ALL;
  *(_DWORD *)(a1 + 512) = 1065353216;
  *(unsigned char *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 544), "decrease-by-one");
  return a1;
}

void sub_1B1A9E15C(_Unwind_Exception *a1)
{
  size_t v4 = *(std::__shared_weak_count **)(v1 + 528);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*(char *)(v1 + 503) < 0) {
    operator delete(*v2);
  }
  quasar::CTCAlignedDecoder::~CTCAlignedDecoder((void **)v1);
  _Unwind_Resume(a1);
}

void quasar::CTCAlignedDecoder::~CTCAlignedDecoder(void **this)
{
  *this = &unk_1F0A1C8C0;
  if (*((char *)this + 471) < 0) {
    operator delete(this[56]);
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)this);
}

void quasar::OnlineAEDRescoringDecoder::finishInit(quasar::OnlineAEDRescoringDecoder *this)
{
  std::allocate_shared[abi:ne180100]<kaldi::quasar::CEAttnEncoderDecoder,std::allocator<kaldi::quasar::CEAttnEncoderDecoder>,std::string &,void>(&v4);
  long long v2 = v4;
  long long v4 = 0uLL;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 66);
  *(_OWORD *)((char *)this + 520) = v2;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    if (*((void *)&v4 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
    }
  }
}

uint64_t quasar::OnlineAEDRescoringDecoder::supportsEager(quasar::OnlineAEDRescoringDecoder *this)
{
  return 0;
}

uint64_t quasar::OnlineAEDRescoringDecoder::runImpl(uint64_t a1, kaldi::OnlineFeatureMatrix **a2, uint64_t a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  AllAedFeat = kaldi::OnlineFeatureMatrix::GetAllAedFeat(*a2);
  kaldi::CuMatrix<float>::CuMatrix<float>(v30, AllAedFeat, 111, 0);
  if (quasar::gLogLevel >= 5)
  {
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"AED states (", 12);
    uint64_t v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)")", 1);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v33);
  }
  if (v31 >= *(_DWORD *)(*(void *)a3 + 576)) {
    int v9 = *(_DWORD *)(*(void *)a3 + 576);
  }
  else {
    int v9 = v31;
  }
  if (v9 <= (int)kaldi::quasar::CEAttnEncoderDecoder::MaxEncoderSize(*(kaldi::quasar::CEAttnEncoderDecoder **)(a1 + 520)))
  {
    uint64_t v12 = quasar::PTree::begin(a2[4]);
    v32[0] = &unk_1F0A1CED8;
    v32[3] = v32;
    int v13 = (uint64_t *)(a1 + 544);
    int v14 = *(unsigned __int8 *)(a1 + 567);
    if ((v14 & 0x80) != 0)
    {
      uint64_t v16 = *(void *)(a1 + 552);
      if (v16 != 8 || *(void *)*v13 != 0x797469746E656469)
      {
        if (v16 == 15)
        {
          if (*(void *)*v13 == 0x6573616572636564 && *(void *)(*v13 + 7) == 0x656E6F2D79622D65)
          {
LABEL_38:
            uint64_t v24 = &unk_1F0A1CF88;
LABEL_41:
            *(void *)&long long v33 = v24;
            goto LABEL_42;
          }
          uint64_t v16 = *(void *)(a1 + 552);
        }
        if (v16 != 20) {
          goto LABEL_44;
        }
        uint64_t v15 = (uint64_t *)*v13;
LABEL_24:
        uint64_t v18 = *v15;
        uint64_t v19 = v15[1];
        int v20 = *((_DWORD *)v15 + 4);
        if (v18 != 0x6E6172742D657375 || v19 != 0x6D2D6E6F69746973 || v20 != 1818584175) {
          goto LABEL_44;
        }
        *(void *)&long long v33 = &unk_1F0A1CFE0;
        *((void *)&v33 + 1) = v12;
LABEL_42:
        *((void *)&v34 + 1) = &v33;
        std::__function::__value_func<int ()(int)>::swap[abi:ne180100](&v33, v32);
        std::__function::__value_func<int ()(int)>::~__value_func[abi:ne180100](&v33);
        fst::NbestAsFsts<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>();
      }
    }
    else
    {
      if (v14 != 8)
      {
        if (v14 != 15)
        {
          uint64_t v15 = (uint64_t *)(a1 + 544);
          if (v14 != 20) {
            goto LABEL_44;
          }
          goto LABEL_24;
        }
        if (*v13 != 0x6573616572636564 || *(void *)(a1 + 551) != 0x656E6F2D79622D65)
        {
LABEL_44:
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          long long v34 = 0u;
          long long v35 = 0u;
          long long v33 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
          int v26 = *(char *)(a1 + 567);
          if (v26 >= 0) {
            uint64_t v27 = a1 + 544;
          }
          else {
            uint64_t v27 = *(void *)(a1 + 544);
          }
          if (v26 >= 0) {
            uint64_t v28 = *(unsigned __int8 *)(a1 + 567);
          }
          else {
            uint64_t v28 = *(void *)(a1 + 552);
          }
          uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, v27, v28);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" is not a valid ilabel mapper", 29);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v33);
        }
        goto LABEL_38;
      }
      if (*v13 != 0x797469746E656469) {
        goto LABEL_44;
      }
    }
    uint64_t v24 = &unk_1F0A1CF30;
    goto LABEL_41;
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Skip AED because audio (", 24);
    long long v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") is longer than the maximum length that the model can rescore (", 64);
    kaldi::quasar::CEAttnEncoderDecoder::MaxEncoderSize(*(kaldi::quasar::CEAttnEncoderDecoder **)(a1 + 520));
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)")", 1);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v33);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v30);
  return 0;
}

void sub_1B1A9F7F8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1A9F8A8);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

void fst::NbestAsFsts<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>()
{
}

void sub_1B1A9F9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

void fst::RmEpsilon<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1)
{
  memset(&v1[9], 0, 24);
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>((uint64_t)v1, a1);
}

void sub_1B1A9FB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  fst::AutoQueue<int>::~AutoQueue(&a21);
  a21 = v21 - 88;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

void fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>(uint64_t a1, uint64_t a2, int a3)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  uint64_t v38 = a1;
  int v37 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  if (v37 >= 1)
  {
    int v6 = v37;
    do
    {
      (*(void (**)(uint64_t))(*(void *)a2 + 200))(a2);
      --v6;
    }
    while (v6);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 24))(v38);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v7);
  if (v37 < 1) {
    return;
  }
  uint64_t v8 = 0;
  do
  {
    (*(void (**)(int8x8_t *__return_ptr))(*(void *)v38 + 32))(&v51);
    float v41 = *(float *)&v51.i32[1];
    LODWORD(v45) = v51.i32[0];
    int v55 = 2139095040;
    float v54 = INFINITY;
    v9.n128_u32[0] = v51.i32[0];
    if (*(float *)v51.i32 != INFINITY)
    {
      uint64_t v11 = __p;
      long long v10 = v53;
LABEL_8:
      uint64_t v12 = v10 - v11;
      if (v12)
      {
        uint64_t v13 = 0;
        unint64_t v14 = v12 >> 2;
        if (v14 <= 1) {
          uint64_t v15 = 1;
        }
        else {
          uint64_t v15 = v14;
        }
        uint64_t v16 = v8;
        do
        {
          uint64_t v17 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)a2 + 200))(a2, v9);
          unsigned int v18 = *((_DWORD *)__p + v13);
          LODWORD(v45) = 0;
          HIDWORD(v45) = v18;
          int8x8_t v46 = vand_s8(v51, (int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v13 == 0), 0x1FuLL)));
          LODWORD(v47) = v17;
          if (a3) {
            uint64_t v45 = v18;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 208))(a2, v16, &v45);
          ++v13;
          uint64_t v16 = v17;
        }
        while (v15 != v13);
        v50[0] = 0;
        __int32 v19 = 0;
      }
      else
      {
        __int32 v19 = v51.i32[1];
        v50[0] = v51.i32[0];
        uint64_t v17 = v8;
      }
      v50[1] = v19;
      (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)a2 + 184))(a2, v17, v50);
      goto LABEL_22;
    }
    v9.n128_f32[0] = v41;
    uint64_t v11 = __p;
    long long v10 = v53;
    if (v41 != v54 || v53 != __p) {
      goto LABEL_8;
    }
LABEL_22:
    unint64_t v49 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v38 + 136))(v38, v8, &v45);
    unsigned int v39 = v8;
    while (1)
    {
      if (!v45)
      {
        if (v49 >= v47) {
          goto LABEL_54;
        }
        goto LABEL_28;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v45 + 24))(v45)) {
        break;
      }
      if (v45)
      {
        uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v45 + 32))();
        goto LABEL_29;
      }
LABEL_28:
      uint64_t v20 = *(void *)&v46 + 48 * v49;
LABEL_29:
      uint64_t v22 = *(void *)(v20 + 16);
      uint64_t v21 = *(void *)(v20 + 24);
      unint64_t v23 = v21 - v22;
      unint64_t v40 = (v21 - v22) >> 2;
      uint64_t v24 = v8;
      if ((unint64_t)(v21 - v22) >= 5)
      {
        uint64_t v25 = 0;
        uint64_t v26 = 2;
        if (v40 > 2) {
          uint64_t v26 = (v21 - v22) >> 2;
        }
        uint64_t v27 = v26 - 1;
        uint64_t v28 = v39;
        do
        {
          uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
          uint64_t v24 = v29;
          float v30 = *(float *)v20;
          if (v25) {
            float v30 = 0.0;
          }
          uint64_t v31 = 0;
          if (!v25) {
            uint64_t v31 = *(void *)(v20 + 8);
          }
          float v32 = *(float *)(*(void *)(v20 + 16) + 4 * v25);
          float v41 = v30;
          float v42 = v32;
          uint64_t v43 = v31;
          int v44 = v29;
          if (a3)
          {
            float v41 = v32;
            float v42 = v30;
          }
          (*(void (**)(uint64_t, uint64_t, float *))(*(void *)a2 + 208))(a2, v28, &v41);
          ++v25;
          uint64_t v28 = v24;
        }
        while (v27 != v25);
      }
      float v33 = *(float *)v20;
      if (v23 >= 8) {
        float v33 = 0.0;
      }
      if (v21 == v22)
      {
        float v34 = 0.0;
        uint64_t v8 = v39;
LABEL_46:
        uint64_t v35 = *(void *)(v20 + 8);
        goto LABEL_47;
      }
      float v34 = *(float *)(*(void *)(v20 + 16) + 4 * v40 - 4);
      uint64_t v35 = 0;
      uint64_t v8 = v39;
      if (v23 <= 7) {
        goto LABEL_46;
      }
LABEL_47:
      int v36 = *(_DWORD *)(v20 + 40);
      float v41 = v33;
      float v42 = v34;
      uint64_t v43 = v35;
      int v44 = v36;
      if (a3)
      {
        float v41 = v34;
        float v42 = v33;
      }
      (*(void (**)(uint64_t, uint64_t, float *))(*(void *)a2 + 208))(a2, v24, &v41);
      if (v45) {
        (*(void (**)(uint64_t))(*(void *)v45 + 40))(v45);
      }
      else {
        ++v49;
      }
    }
    if (v45)
    {
      (*(void (**)(void))(*(void *)v45 + 8))();
      goto LABEL_56;
    }
LABEL_54:
    if (v48) {
      --*v48;
    }
LABEL_56:
    if (__p)
    {
      uint64_t v53 = __p;
      operator delete(__p);
    }
    uint64_t v8 = (v8 + 1);
  }
  while (v8 != v37);
}

void sub_1B1AA012C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::GetLinearSymbolSequence<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4, int a5)
{
  std::string __p = 0;
  int8x8_t v51 = 0;
  unint64_t v52 = 0;
  unint64_t v47 = 0;
  long long v48 = 0;
  unint64_t v49 = 0;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (v10 == -1)
  {
    if (a2) {
      *(void *)(a2 + 8) = *(void *)a2;
    }
    if (a3) {
      *(void *)(a3 + 8) = *(void *)a3;
    }
    if (a4) {
      *a4 = vdup_n_s32(0x7F800000u);
    }
    uint64_t v38 = 1;
  }
  else
  {
    for (float32x2_t i = 0; ; float32x2_t i = vadd_f32(i, v14))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v46, a1, v10);
      float v55 = *((float *)&v46 + 1);
      LODWORD(v43[0]) = v46;
      int v54 = 2139095040;
      float v53 = INFINITY;
      v12.n128_u32[0] = v46;
      if (*(float *)&v46 != INFINITY) {
        break;
      }
      v12.n128_f32[0] = v55;
      if (v55 != v53) {
        break;
      }
      if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a1 + 40))(a1, v10, v55) != 1) {
        goto LABEL_55;
      }
      uint64_t v45 = 0;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v10, v43);
      if (v43[0]) {
        uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v43[0] + 32))(v43[0]);
      }
      else {
        uint64_t v13 = v43[1] + 20 * v45;
      }
      float32x2_t v14 = *(float32x2_t *)(v13 + 8);
      int v15 = *(_DWORD *)v13;
      if (*(_DWORD *)v13) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = a5 == 0;
      }
      if (!v16)
      {
        uint64_t v17 = v51;
        if ((unint64_t)v51 >= v52)
        {
          __int32 v19 = __p;
          uint64_t v20 = ((char *)v51 - (unsigned char *)__p) >> 2;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 62) {
            goto LABEL_77;
          }
          uint64_t v22 = v52 - (void)__p;
          if ((uint64_t)(v52 - (void)__p) >> 1 > v21) {
            unint64_t v21 = v22 >> 1;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v21;
          }
          if (v23)
          {
            uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v52, v23);
            __int32 v19 = __p;
            uint64_t v17 = v51;
            int v15 = *(_DWORD *)v13;
          }
          else
          {
            uint64_t v24 = 0;
          }
          uint64_t v25 = &v24[4 * v20];
          *(_DWORD *)uint64_t v25 = v15;
          unsigned int v18 = v25 + 4;
          while (v17 != v19)
          {
            int v26 = *--v17;
            *((_DWORD *)v25 - 1) = v26;
            v25 -= 4;
          }
          std::string __p = v25;
          int8x8_t v51 = v18;
          unint64_t v52 = (unint64_t)&v24[4 * v23];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *int8x8_t v51 = v15;
          unsigned int v18 = v17 + 1;
        }
        int8x8_t v51 = v18;
      }
      int v27 = *(_DWORD *)(v13 + 4);
      if (v27 || a5)
      {
        uint64_t v28 = v48;
        if ((unint64_t)v48 >= v49)
        {
          float v30 = v47;
          uint64_t v31 = ((char *)v48 - (unsigned char *)v47) >> 2;
          unint64_t v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 62) {
LABEL_77:
          }
            std::vector<int>::__throw_length_error[abi:ne180100]();
          uint64_t v33 = v49 - (void)v47;
          if ((uint64_t)(v49 - (void)v47) >> 1 > v32) {
            unint64_t v32 = v33 >> 1;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v32;
          }
          if (v34)
          {
            uint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v49, v34);
            float v30 = v47;
            uint64_t v28 = v48;
            int v27 = *(_DWORD *)(v13 + 4);
          }
          else
          {
            uint64_t v35 = 0;
          }
          int v36 = &v35[4 * v31];
          *(_DWORD *)int v36 = v27;
          uint64_t v29 = v36 + 4;
          while (v28 != v30)
          {
            int v37 = *--v28;
            *((_DWORD *)v36 - 1) = v37;
            v36 -= 4;
          }
          unint64_t v47 = v36;
          long long v48 = v29;
          unint64_t v49 = (unint64_t)&v35[4 * v34];
          if (v30) {
            operator delete(v30);
          }
        }
        else
        {
          *long long v48 = v27;
          uint64_t v29 = v28 + 1;
        }
        long long v48 = v29;
      }
      uint64_t v10 = *(unsigned int *)(v13 + 16);
      if (v43[0])
      {
        (*(void (**)(void))(*(void *)v43[0] + 8))(v43[0]);
      }
      else if (v44)
      {
        --*v44;
      }
    }
    __int32 v41 = HIDWORD(v46);
    __int32 v42 = v46;
    if ((*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)a1 + 40))(a1, v10, v12))
    {
LABEL_55:
      uint64_t v38 = 0;
    }
    else
    {
      if (a2 && &__p != (void **)a2) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a2, (char *)__p, (uint64_t)v51, ((char *)v51 - (unsigned char *)__p) >> 2);
      }
      if (a3 && &v47 != (void **)a3) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a3, (char *)v47, (uint64_t)v48, ((char *)v48 - (unsigned char *)v47) >> 2);
      }
      v39.i32[0] = v42;
      if (a4)
      {
        v39.i32[1] = v41;
        *a4 = (int32x2_t)vadd_f32(i, v39);
      }
      uint64_t v38 = 1;
    }
    if (v47)
    {
      long long v48 = v47;
      operator delete(v47);
    }
  }
  if (__p)
  {
    int8x8_t v51 = __p;
    operator delete(__p);
  }
  return v38;
}

void sub_1B1AA065C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<int ()(int)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t fst::GetLinearSymbolSequence<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,int>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  long long v60 = 0u;
  long long v61 = 0u;
  int v57 = 0;
  std::string::size_type v58 = 0;
  unint64_t v59 = 0;
  int v54 = 0;
  float v55 = 0;
  unint64_t v56 = 0;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (v10 != -1)
  {
    if (a2) {
      BOOL v11 = &v57 == (void **)a2;
    }
    else {
      BOOL v11 = 1;
    }
    char v12 = v11;
    if (a3) {
      BOOL v13 = &v54 == (void **)a3;
    }
    else {
      BOOL v13 = 1;
    }
    char v14 = v13;
    __int32 v42 = (char *)a3;
    while (1)
    {
      (*(void (**)(float32x2_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v51, a1, v10);
      v43.i32[0] = v51.i32[1];
      LODWORD(v46) = v51.i32[0];
      int v63 = 2139095040;
      float v62 = INFINITY;
      if (v51.f32[0] == INFINITY && *(float *)v43.i32 == v62 && v53 == v52)
      {
        if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a1 + 40))(a1, v10, *(float *)v43.i32) == 1)
        {
          uint64_t v50 = 0;
          (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 136))(a1, v10, &v46);
          if (v46) {
            BOOL v16 = (float32x2_t *)(*(uint64_t (**)(void *))(*v46 + 32))(v46);
          }
          else {
            BOOL v16 = (float32x2_t *)((char *)__p + 48 * v50);
          }
          fst::Times<fst::LatticeWeightTpl<float>,int>(v16 + 1, (float32x2_t *)&v60, &v43);
          *(int32x2_t *)&long long v60 = v43;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v60 + 8, (char *)v44, (uint64_t)v45, (v45 - (unsigned char *)v44) >> 2);
          if (v44)
          {
            uint64_t v45 = v44;
            operator delete(v44);
          }
          __int32 v17 = v16->i32[0];
          if (v16->i32[0]) {
            BOOL v18 = 0;
          }
          else {
            BOOL v18 = a5 == 0;
          }
          if (!v18)
          {
            __int32 v19 = v58;
            if ((unint64_t)v58 >= v59)
            {
              unint64_t v21 = v57;
              uint64_t v22 = ((char *)v58 - (unsigned char *)v57) >> 2;
              unint64_t v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) >> 62) {
                goto LABEL_99;
              }
              uint64_t v24 = v59 - (void)v57;
              if ((uint64_t)(v59 - (void)v57) >> 1 > v23) {
                unint64_t v23 = v24 >> 1;
              }
              if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v25 = v23;
              }
              if (v25)
              {
                int v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v59, v25);
                unint64_t v21 = v57;
                __int32 v19 = v58;
                __int32 v17 = v16->i32[0];
              }
              else
              {
                int v26 = 0;
              }
              int v27 = (__int32 *)&v26[4 * v22];
              *int v27 = v17;
              uint64_t v20 = v27 + 1;
              while (v19 != v21)
              {
                __int32 v28 = *--v19;
                *--int v27 = v28;
              }
              int v57 = v27;
              std::string::size_type v58 = v20;
              unint64_t v59 = (unint64_t)&v26[4 * v25];
              if (v21) {
                operator delete(v21);
              }
            }
            else
            {
              *std::string::size_type v58 = v17;
              uint64_t v20 = v19 + 1;
            }
            std::string::size_type v58 = v20;
          }
          __int32 v29 = v16->i32[1];
          if (v29 || a5)
          {
            float v30 = v55;
            if ((unint64_t)v55 >= v56)
            {
              unint64_t v32 = v54;
              uint64_t v33 = ((char *)v55 - (unsigned char *)v54) >> 2;
              unint64_t v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62) {
LABEL_99:
              }
                std::vector<int>::__throw_length_error[abi:ne180100]();
              uint64_t v35 = v56 - (void)v54;
              if ((uint64_t)(v56 - (void)v54) >> 1 > v34) {
                unint64_t v34 = v35 >> 1;
              }
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v36 = v34;
              }
              if (v36)
              {
                int v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v56, v36);
                unint64_t v32 = v54;
                float v30 = v55;
                __int32 v29 = v16->i32[1];
              }
              else
              {
                int v37 = 0;
              }
              uint64_t v38 = (__int32 *)&v37[4 * v33];
              *uint64_t v38 = v29;
              uint64_t v31 = v38 + 1;
              while (v30 != v32)
              {
                __int32 v39 = *--v30;
                *--uint64_t v38 = v39;
              }
              int v54 = v38;
              float v55 = v31;
              unint64_t v56 = (unint64_t)&v37[4 * v36];
              if (v32) {
                operator delete(v32);
              }
            }
            else
            {
              *float v55 = v29;
              uint64_t v31 = v30 + 1;
            }
            float v55 = v31;
          }
          uint64_t v10 = v16[5].u32[0];
          if (v46)
          {
            (*(void (**)(void *))(*v46 + 8))(v46);
          }
          else if (v49)
          {
            --*v49;
          }
          char v15 = 1;
          goto LABEL_30;
        }
      }
      else
      {
        fst::Times<fst::LatticeWeightTpl<float>,int>(&v51, (float32x2_t *)&v60, (int32x2_t *)&v46);
        *(void *)&long long v60 = v46;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v60 + 8, (char *)__p, (uint64_t)v48, (v48 - (unsigned char *)__p) >> 2);
        if (__p)
        {
          long long v48 = __p;
          operator delete(__p);
        }
        if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v10))
        {
          if ((v12 & 1) == 0) {
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a2, (char *)v57, (uint64_t)v58, ((char *)v58 - (unsigned char *)v57) >> 2);
          }
          if ((v14 & 1) == 0) {
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v42, (char *)v54, (uint64_t)v55, ((char *)v55 - (unsigned char *)v54) >> 2);
          }
          if (a4)
          {
            *(void *)a4 = v60;
            if (&v60 != (long long *)a4) {
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a4 + 8), *((char **)&v60 + 1), v61, (uint64_t)(v61 - *((void *)&v60 + 1)) >> 2);
            }
          }
          char v15 = 0;
          char v5 = 1;
          goto LABEL_30;
        }
      }
      char v15 = 0;
      char v5 = 0;
LABEL_30:
      if (v52)
      {
        float v53 = v52;
        operator delete(v52);
      }
      if ((v15 & 1) == 0) {
        goto LABEL_92;
      }
    }
  }
  if (a2) {
    *(void *)(a2 + 8) = *(void *)a2;
  }
  if (a3) {
    *(void *)(a3 + 8) = *(void *)a3;
  }
  if (a4)
  {
    *(int32x2_t *)a4 = vdup_n_s32(0x7F800000u);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a4 + 8), 0, 0, 0);
  }
  char v5 = 1;
LABEL_92:
  if (v54)
  {
    float v55 = v54;
    operator delete(v54);
  }
  if (v57)
  {
    std::string::size_type v58 = v57;
    operator delete(v57);
  }
  if (*((void *)&v60 + 1))
  {
    *(void *)&long long v61 = *((void *)&v60 + 1);
    operator delete(*((void **)&v60 + 1));
  }
  return v5 & 1;
}

void sub_1B1AA0CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  if (a30) {
    operator delete(a30);
  }
  uint64_t v33 = *(void **)(v31 - 136);
  if (v33)
  {
    *(void *)(v31 - 128) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::insert(uint64_t a1, char *__src, double *a3)
{
  int v4 = __src;
  int v6 = *(char **)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    char v14 = *(unsigned char **)a1;
    unint64_t v15 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v15 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = (__src - v14) >> 3;
    uint64_t v17 = v8 - (void)v14;
    if (v17 >> 2 > v15) {
      unint64_t v15 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    uint64_t v25 = v7;
    if (v18) {
      __int32 v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v7, v18);
    }
    else {
      __int32 v19 = 0;
    }
    std::string __p = v19;
    uint64_t v22 = &v19[8 * v16];
    unint64_t v23 = v22;
    uint64_t v24 = &v19[8 * v18];
    std::__split_buffer<double>::push_back(&__p, a3);
    int v4 = std::vector<double>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22) {
      v23 += (v22 - v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(double *)__src = *a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v10 = __src + 8;
    BOOL v11 = v6 - 8;
    char v12 = v6;
    while (v11 < v6)
    {
      uint64_t v13 = *(void *)v11;
      v11 += 8;
      *(void *)char v12 = v13;
      v12 += 8;
    }
    *(void *)(a1 + 8) = v12;
    if (v6 != v10) {
      memmove(&v6[-8 * ((v6 - v10) >> 3)], __src, v6 - v10);
    }
    *(double *)int v4 = *a3;
  }
  return v4;
}

void sub_1B1AA0F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::vector<quasar::Token>>::insert(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  int v4 = a2;
  unint64_t v6 = a1[1];
  unint64_t v9 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = v9;
  if (v6 >= v9)
  {
    uint64_t v10 = *a1;
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v11 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v10) >> 3);
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v10) >> 3);
    unint64_t v14 = 2 * v13;
    if (2 * v13 <= v11) {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    }
    if (v13 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v22 = v7;
    if (v15) {
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    unint64_t v18 = v16;
    __int32 v19 = &v16[24 * v12];
    uint64_t v20 = v19;
    unint64_t v21 = &v16[24 * v15];
    std::__split_buffer<std::vector<quasar::Token>>::push_back[abi:ne180100](&v18, a3);
    int v4 = (uint64_t *)std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(a1, &v18, v4);
    std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(&v18);
  }
  else if (a2 == (uint64_t *)v6)
  {
    std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)a1, a3);
  }
  else
  {
    std::vector<std::vector<quasar::Token>>::__move_range((uint64_t)a1, a2, v6, (uint64_t)(a2 + 3));
    if (v4 <= a3) {
      a3 += 3 * (a1[1] > (unint64_t)a3);
    }
    if (v4 != a3) {
      std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)v4, *a3, a3[1], 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5));
    }
  }
  return v4;
}

void sub_1B1AA10E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<quasar::Token>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<quasar::Token>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      unint64_t v8 = v3;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

uint64_t fst::Union<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (fst *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  BOOL v5 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  if (!fst::CompatSymbols(v4, v5, (const fst::SymbolTable *)1)
    || (unint64_t v6 = (fst *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1),
        uint64_t v7 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2),
        !fst::CompatSymbols(v6, v7, (const fst::SymbolTable *)1)))
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "ERROR");
    uint64_t v20 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)v29);
    unint64_t v21 = (void *)fst::cerr(v20);
    uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Union: input/output symbol tables of 1st argument ", 50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"do not match input/output symbol tables of 2nd argument", 55);
    fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
    if (SHIBYTE(v30[0]) < 0) {
      operator delete(v29[0]);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4, 4);
  }
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, 0x2000000000, 1);
  unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if (result == -1)
  {
    if ((v11 & 4) != 0)
    {
      int v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192);
      return v27(a1, 4, 4);
    }
    return result;
  }
  uint64_t v13 = result;
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 1, 0))
  {
    int v14 = fst::CountStates<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a2);
    if (v9) {
      int v15 = v8;
    }
    else {
      int v15 = v8 + 1;
    }
    (*(void (**)(uint64_t, void))(*(void *)a1 + 248))(a1, (v15 + v14));
  }
  unsigned int v41 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v39);
LABEL_10:
  if (!v39)
  {
    if ((int)v41 >= v40) {
      goto LABEL_44;
    }
    goto LABEL_14;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v39 + 16))(v39))
  {
LABEL_14:
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
    if (v39) {
      uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 24))(v39);
    }
    else {
      uint64_t v17 = v41;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32))(&v36, a2, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 184))(a1, v16, &v36);
    if (__p)
    {
      uint64_t v38 = __p;
      operator delete(__p);
    }
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 256))(a1, v16, v18);
    unint64_t v35 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 136))(a2, v17, v33);
    while (1)
    {
      if (v33[0])
      {
        if ((*(unsigned int (**)(void))(*(void *)v33[0] + 24))(v33[0]))
        {
          if (v33[0])
          {
            (*(void (**)(void))(*(void *)v33[0] + 8))();
            goto LABEL_35;
          }
LABEL_33:
          if (v34) {
            --*v34;
          }
LABEL_35:
          if (v39) {
            (*(void (**)(uint64_t))(*(void *)v39 + 32))(v39);
          }
          else {
            ++v41;
          }
          goto LABEL_10;
        }
        if (v33[0])
        {
          uint64_t v19 = (*(uint64_t (**)(void))(*(void *)v33[0] + 32))();
          goto LABEL_26;
        }
      }
      else if (v35 >= v33[2])
      {
        goto LABEL_33;
      }
      uint64_t v19 = v33[1] + 48 * v35;
LABEL_26:
      v29[0] = *(void **)v19;
      v29[1] = *(void **)(v19 + 8);
      v30[1] = 0;
      uint64_t v31 = 0;
      v30[0] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v30, *(const void **)(v19 + 16), *(void *)(v19 + 24), (uint64_t)(*(void *)(v19 + 24) - *(void *)(v19 + 16)) >> 2);
      int v32 = *(_DWORD *)(v19 + 40) + v8;
      (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 208))(a1, v16, v29);
      if (v30[0])
      {
        v30[1] = v30[0];
        operator delete(v30[0]);
      }
      if (v33[0]) {
        (*(void (**)(void))(*(void *)v33[0] + 40))(v33[0]);
      }
      else {
        ++v35;
      }
    }
  }
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
LABEL_44:
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (v23 == -1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 176))(a1, v13);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, v11, 0x3FFFFFFF0004);
  }
  else
  {
    uint64_t v24 = v23;
    if (v9)
    {
      uint64_t v31 = 0;
      *(_OWORD *)__int32 v29 = 0u;
      *(_OWORD *)float v30 = 0u;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v30, 0, 0, 0);
      int v32 = v13 + v8;
      (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 208))(a1, v24, v29);
      uint64_t v25 = v30[0];
      if (v30[0]) {
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 176))(a1, v28);
      uint64_t v31 = 0;
      *(_OWORD *)__int32 v29 = 0u;
      *(_OWORD *)float v30 = 0u;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v30, 0, 0, 0);
      int v32 = v24;
      (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 208))(a1, v28, v29);
      if (v30[0])
      {
        v30[1] = v30[0];
        operator delete(v30[0]);
      }
      uint64_t v31 = 0;
      *(_OWORD *)__int32 v29 = 0u;
      *(_OWORD *)float v30 = 0u;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v30, 0, 0, 0);
      int v32 = v13 + v8;
      (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 208))(a1, v28, v29);
      uint64_t v25 = v30[0];
      if (v30[0])
      {
LABEL_47:
        v30[1] = v25;
        operator delete(v25);
      }
    }
    unint64_t v26 = fst::UnionProperties(v10, v11, 0);
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192))(a1, v26, 0x3FFFFFFF0007);
  }
}

void sub_1B1AA1B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineAEDRescoringDecoder::registerParams(quasar::OnlineAEDRescoringDecoder *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "CTC-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "(default 0.3), amCost = amCost * ctcScale + forwardAEDScale * forwardAEDScore + backwardAEDScale * backwardAEDScore");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 504, (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "forward-AED-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "(default 1.0), amCost = amCost * ctcScale + forwardAEDScale * forwardAEDScore + backwardAEDScale * backwardAEDScore");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 508, (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "backward-AED-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "(default 1.0), amCost = amCost * ctcScale + forwardAEDScale * forwardAEDScore + backwardAEDScale * backwardAEDScore");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 512, (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Map model into memory (requires aligned models)");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 536, (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Path of the decoder neural network");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 480, (uint64_t)__p, 1, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "nbest-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "How many nbest to keep and rescore (default 32)");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 472, (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "ilabel-mapper-type");
  std::string::basic_string[abi:ne180100]<0>(__p, "(default decrease-by-one) either identity, decrease-by-one or use-transition-model");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 544, (uint64_t)__p, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1AA1FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::Register<float>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  quasar::SystemConfig::Version::Version(&v20, a6, a7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  unint64_t v21 = __p;
  int v15 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1464), (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v21);
  v15[7] = v20;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  quasar::SystemConfig::Version::Version(&v20, a8, a9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  unint64_t v21 = __p;
  uint64_t v16 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1488), (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v21);
  v16[7] = v20;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!a5) {
      return;
    }
  }
  else if (!a5)
  {
    return;
  }
  __p[0] = (void *)(a1 + 816);
  uint64_t v17 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1512), (const void **)(a1 + 816), (uint64_t)&std::piecewise_construct, (long long **)__p)+ 7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v17, (const void **)__p, (uint64_t)__p);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1AA21C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::Register<BOOL>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  (**(void (***)(uint64_t))a1)(a1);
  quasar::SystemConfig::Version::Version(&v20, a6, a7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  unint64_t v21 = __p;
  int v15 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1464), (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v21);
  v15[7] = v20;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  quasar::SystemConfig::Version::Version(&v20, a8, a9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  unint64_t v21 = __p;
  uint64_t v16 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1488), (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v21);
  v16[7] = v20;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!a5) {
      return;
    }
  }
  else if (!a5)
  {
    return;
  }
  __p[0] = (void *)(a1 + 816);
  uint64_t v17 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1512), (const void **)(a1 + 816), (uint64_t)&std::piecewise_construct, (long long **)__p)+ 7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v17, (const void **)__p, (uint64_t)__p);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1AA2388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::Register<std::string>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  quasar::SystemConfig::Version::Version(&v20, a6, a7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  unint64_t v21 = __p;
  int v15 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1464), (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v21);
  v15[7] = v20;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  quasar::SystemConfig::Version::Version(&v20, a8, a9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  unint64_t v21 = __p;
  uint64_t v16 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1488), (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v21);
  v16[7] = v20;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!a5) {
      return;
    }
  }
  else if (!a5)
  {
    return;
  }
  __p[0] = (void *)(a1 + 816);
  uint64_t v17 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1512), (const void **)(a1 + 816), (uint64_t)&std::piecewise_construct, (long long **)__p)+ 7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v17, (const void **)__p, (uint64_t)__p);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1AA254C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::Register<int>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 8))(a1);
  quasar::SystemConfig::Version::Version(&v20, a6, a7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  unint64_t v21 = __p;
  int v15 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1464), (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v21);
  v15[7] = v20;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  quasar::SystemConfig::Version::Version(&v20, a8, a9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  unint64_t v21 = __p;
  uint64_t v16 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1488), (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v21);
  v16[7] = v20;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!a5) {
      return;
    }
  }
  else if (!a5)
  {
    return;
  }
  __p[0] = (void *)(a1 + 816);
  uint64_t v17 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1512), (const void **)(a1 + 816), (uint64_t)&std::piecewise_construct, (long long **)__p)+ 7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v17, (const void **)__p, (uint64_t)__p);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1AA2710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineAEDRescoringDecoder::~OnlineAEDRescoringDecoder(void **this)
{
  *this = &unk_1F0A56F78;
  if (*((char *)this + 567) < 0) {
    operator delete(this[68]);
  }
  unint64_t v2 = (std::__shared_weak_count *)this[66];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 503) < 0) {
    operator delete(this[60]);
  }
  *this = &unk_1F0A1C8C0;
  if (*((char *)this + 471) < 0) {
    operator delete(this[56]);
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *this = &unk_1F0A56F78;
  if (*((char *)this + 567) < 0) {
    operator delete(this[68]);
  }
  unint64_t v2 = (std::__shared_weak_count *)this[66];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 503) < 0) {
    operator delete(this[60]);
  }
  *this = &unk_1F0A1C8C0;
  if (*((char *)this + 471) < 0) {
    operator delete(this[56]);
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::QuasarDebugMessage::~QuasarDebugMessage(quasar::QuasarDebugMessage *this)
{
  unint64_t v2 = (void (*)(uint64_t))quasar::QuasarDebugMessage::logger;
  std::stringbuf::str();
  v2((uint64_t)&__p);
  if (v6 < 0) {
    operator delete(__p);
  }
  uint64_t v3 = MEMORY[0x1E4FBA418];
  uint64_t v4 = *MEMORY[0x1E4FBA418];
  *(void *)this = *MEMORY[0x1E4FBA418];
  *(void *)((char *)this + *(void *)(v4 - 24)) = *(void *)(v3 + 24);
  *((void *)this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520]((char *)this + 112);
}

void quasar::QuasarInfoMessage::~QuasarInfoMessage(quasar::QuasarInfoMessage *this)
{
  unint64_t v2 = (void (*)(uint64_t))quasar::QuasarInfoMessage::logger;
  std::stringbuf::str();
  v2((uint64_t)&__p);
  if (v6 < 0) {
    operator delete(__p);
  }
  uint64_t v3 = MEMORY[0x1E4FBA418];
  uint64_t v4 = *MEMORY[0x1E4FBA418];
  *(void *)this = *MEMORY[0x1E4FBA418];
  *(void *)((char *)this + *(void *)(v4 - 24)) = *(void *)(v3 + 24);
  *((void *)this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520]((char *)this + 112);
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A42AE0;
  unint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 88);
}

double fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Final@<D0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  int v3 = *(double **)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2);
  double result = *v3;
  *a3 = *(void *)v3;
  return result;
}

unint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return 0xCCCCCCCCCCCCCCCDLL
       * ((uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 32)
                  - *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 24)) >> 2);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 8);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 16);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    char v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

uint64_t fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Write(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  unint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  int v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

{
  fst *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  unint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  int v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B1AA2DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1AA2EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitMatcher()
{
  return 0;
}

uint64_t fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::operator=(uint64_t a1)
{
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  unint64_t v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  int v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(*(void *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1B1AA2FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unint64_t fst::TestProperties<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (FLAGS_fst_verify_properties)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    unint64_t v7 = fst::ComputeProperties<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1, a2, a3, 0);
    if (!fst::CompatProperties(v6, v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      uint64_t v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      uint64_t v9 = (void *)fst::cerr(v8);
      unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return fst::ComputeProperties<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1, a2, a3, 1);
  }
}

void sub_1B1AA3160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v7 = a1;
  unint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v9 = v8;
  if (!a4
    || (uint64_t v10 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7, (a2 & ~v10) != 0))
  {
    unint64_t v9 = v8 & 7;
    unint64_t v72 = v9;
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
    if ((a2 & 0xF3C00000000) != 0 && v11)
    {
      uint64_t v67 = 0;
      uint64_t v68 = 0;
      unint64_t v69 = 0;
      int v70 = &v72;
      fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(v7, (uint64_t)&v67);
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      uint64_t v12 = a2 & 0xC0000;
      uint64_t v13 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0) {
        uint64_t v13 = 0x10425A850000;
      }
      unint64_t v14 = v9 | v13;
      uint64_t v15 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0) {
        v14 |= 0x100000uLL;
      }
      unint64_t v72 = v14;
      memset(&v66, 0, sizeof(v66));
      memset(&v65, 0, sizeof(v65));
      unsigned int v64 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 128))(v7, &v62);
      int v16 = 0;
      uint64_t v61 = v7;
LABEL_12:
      if (v62)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v62 + 16))(v62))
        {
          if (v62)
          {
            uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v62 + 24))();
LABEL_18:
            std::vector<unsigned int>::size_type v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, v17);
            v66.__end_ = v66.__begin_;
            v65.__end_ = v65.__begin_;
            if (v12) {
              std::vector<int>::reserve(&v66, v18);
            }
            if (v15) {
              std::vector<int>::reserve(&v65, v18);
            }
            unint64_t v71 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v7 + 136))(v7, v17, &v67);
            char v20 = 1;
            while (1)
            {
              if (v67)
              {
                if ((*(unsigned int (**)(uint64_t))(*(void *)v67 + 24))(v67))
                {
                  if (v67)
                  {
                    (*(void (**)(void))(*(void *)v67 + 8))();
                  }
                  else
                  {
LABEL_94:
                    if (v70) {
                      --*(_DWORD *)v70;
                    }
                  }
                  uint64_t v7 = v61;
                  if (v12
                    && (std::__sort<std::__less<int,int> &,int *>(),
                        (std::vector<unsigned int>::pointer)((char *)v66.__end_ - (char *)v66.__begin_) >= (std::vector<unsigned int>::pointer)5))
                  {
                    unint64_t v48 = v66.__end_ - v66.__begin_;
                    if (v48 <= 2) {
                      unint64_t v48 = 2;
                    }
                    std::vector<unsigned int>::pointer v49 = v66.__begin_ + 1;
                    unsigned int v50 = *v66.__begin_;
                    unint64_t v51 = v48 - 1;
                    while (1)
                    {
                      unsigned int v53 = *v49++;
                      unsigned int v52 = v53;
                      if (v53 == v50) {
                        break;
                      }
                      unsigned int v50 = v52;
                      if (!--v51) {
                        goto LABEL_103;
                      }
                    }
                    unint64_t v72 = v72 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                    if (!v15)
                    {
LABEL_114:
                      if (v16 >= 1) {
                        unint64_t v72 = v72 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      }
                      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v61 + 32))(&v67, v61, v17);
                      float v75 = *((float *)&v67 + 1);
                      unsigned __int32 v76 = v67;
                      int v74 = 2139095040;
                      float v73 = INFINITY;
                      if (*(float *)&v67 == INFINITY && v75 == v73)
                      {
                        if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v61 + 40))(v61, v17) != 1) {
                          unint64_t v72 = v72 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                        }
                      }
                      else
                      {
                        float v75 = *((float *)&v67 + 1);
                        unsigned __int32 v76 = v67;
                        int v74 = 0;
                        float v73 = 0.0;
                        if (*(float *)&v67 != 0.0 || v75 != v73) {
                          unint64_t v72 = v72 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                        }
                        ++v16;
                      }
                      if (v62) {
                        (*(void (**)(uint64_t))(*(void *)v62 + 32))(v62);
                      }
                      else {
                        ++v64;
                      }
                      goto LABEL_12;
                    }
                  }
                  else
                  {
LABEL_103:
                    if (!v15) {
                      goto LABEL_114;
                    }
                  }
                  std::__sort<std::__less<int,int> &,int *>();
                  if ((std::vector<unsigned int>::pointer)((char *)v65.__end_ - (char *)v65.__begin_) >= (std::vector<unsigned int>::pointer)5)
                  {
                    unint64_t v54 = v65.__end_ - v65.__begin_;
                    if (v54 <= 2) {
                      unint64_t v54 = 2;
                    }
                    std::vector<unsigned int>::pointer v55 = v65.__begin_ + 1;
                    unsigned int v56 = *v65.__begin_;
                    unint64_t v57 = v54 - 1;
                    while (1)
                    {
                      unsigned int v59 = *v55++;
                      unsigned int v58 = v59;
                      if (v59 == v56) {
                        break;
                      }
                      unsigned int v56 = v58;
                      if (!--v57) {
                        goto LABEL_114;
                      }
                    }
                    unint64_t v72 = v72 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                  }
                  goto LABEL_114;
                }
                if (v67)
                {
                  unint64_t v21 = (int *)(*(uint64_t (**)(void))(*(void *)v67 + 32))();
                  goto LABEL_29;
                }
              }
              else if (v71 >= v69)
              {
                goto LABEL_94;
              }
              unint64_t v21 = (int *)(v68 + 20 * v71);
LABEL_29:
              int v22 = *v21;
              int v23 = *v21;
              if (*v21 != v21[1])
              {
                unint64_t v72 = v72 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
                int v23 = v21[1];
              }
              if (v22 | v23)
              {
                if (v22)
                {
                  if (v23) {
                    goto LABEL_35;
                  }
                  goto LABEL_39;
                }
                unint64_t v24 = v72;
              }
              else
              {
                unint64_t v24 = v72 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
              }
              unint64_t v72 = v24 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
              if (v23)
              {
LABEL_35:
                if (v20) {
                  goto LABEL_44;
                }
                goto LABEL_40;
              }
LABEL_39:
              unint64_t v72 = v72 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
              if (v20) {
                goto LABEL_44;
              }
LABEL_40:
              if (v22 < (int)v9) {
                unint64_t v72 = v72 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
              }
              if (v23 < SHIDWORD(v9)) {
                unint64_t v72 = v72 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
              }
LABEL_44:
              unsigned __int32 v76 = 0;
              v19.n128_u32[0] = v21[2];
              float v25 = *((float *)v21 + 3);
              unsigned __int32 v76 = v19.n128_u32[0];
              float v75 = v25;
              int v74 = 0;
              float v73 = 0.0;
              if (v19.n128_f32[0] != 0.0 || v75 != v73)
              {
                unsigned __int32 v76 = v19.n128_u32[0];
                float v75 = v25;
                int v74 = 2139095040;
                float v73 = INFINITY;
                if (v19.n128_f32[0] != INFINITY || (v19.n128_f32[0] = v75, v75 != v73)) {
                  unint64_t v72 = v72 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                }
              }
              int v26 = v21[4];
              if (v26 <= (int)v17) {
                unint64_t v72 = v72 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
              }
              if (v26 != v17 + 1) {
                unint64_t v72 = v72 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              unint64_t v9 = *(void *)v21;
              if (v12)
              {
                std::vector<unsigned int>::pointer end = v66.__end_;
                if (v66.__end_ >= v66.__end_cap_.__value_)
                {
                  std::vector<unsigned int>::pointer begin = v66.__begin_;
                  int64_t v30 = v66.__end_ - v66.__begin_;
                  unint64_t v31 = v30 + 1;
                  if ((unint64_t)(v30 + 1) >> 62) {
                    goto LABEL_139;
                  }
                  int64_t v32 = (char *)v66.__end_cap_.__value_ - (char *)v66.__begin_;
                  if (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 1 > v31) {
                    unint64_t v31 = v32 >> 1;
                  }
                  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v33 = v31;
                  }
                  if (v33)
                  {
                    unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v66.__end_cap_, v33);
                    std::vector<unsigned int>::pointer begin = v66.__begin_;
                    std::vector<unsigned int>::pointer end = v66.__end_;
                    LODWORD(v35) = *v21;
                  }
                  else
                  {
                    unint64_t v34 = 0;
                    unint64_t v35 = *(void *)v21;
                  }
                  uint64_t v36 = (unsigned int *)&v34[4 * v30];
                  *uint64_t v36 = v35;
                  uint64_t v28 = v36 + 1;
                  while (end != begin)
                  {
                    unsigned int v37 = *--end;
                    *--uint64_t v36 = v37;
                  }
                  v66.__begin_ = v36;
                  v66.__end_ = v28;
                  v66.__end_cap_.__value_ = (unsigned int *)&v34[4 * v33];
                  if (begin) {
                    operator delete(begin);
                  }
                }
                else
                {
                  *v66.__end_ = v9;
                  uint64_t v28 = end + 1;
                }
                v66.__end_ = v28;
              }
              if (v15)
              {
                std::vector<unsigned int>::pointer v38 = v65.__end_;
                if (v65.__end_ >= v65.__end_cap_.__value_)
                {
                  std::vector<unsigned int>::pointer v40 = v65.__begin_;
                  int64_t v41 = v65.__end_ - v65.__begin_;
                  unint64_t v42 = v41 + 1;
                  if ((unint64_t)(v41 + 1) >> 62) {
LABEL_139:
                  }
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  int64_t v43 = (char *)v65.__end_cap_.__value_ - (char *)v65.__begin_;
                  if (((char *)v65.__end_cap_.__value_ - (char *)v65.__begin_) >> 1 > v42) {
                    unint64_t v42 = v43 >> 1;
                  }
                  if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v44 = v42;
                  }
                  if (v44)
                  {
                    uint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v65.__end_cap_, v44);
                    std::vector<unsigned int>::pointer v40 = v65.__begin_;
                    std::vector<unsigned int>::pointer v38 = v65.__end_;
                  }
                  else
                  {
                    uint64_t v45 = 0;
                  }
                  uint64_t v46 = (unsigned int *)&v45[4 * v41];
                  *uint64_t v46 = v21[1];
                  uint64_t v39 = v46 + 1;
                  while (v38 != v40)
                  {
                    unsigned int v47 = *--v38;
                    *--uint64_t v46 = v47;
                  }
                  v65.__begin_ = v46;
                  v65.__end_ = v39;
                  v65.__end_cap_.__value_ = (unsigned int *)&v45[4 * v44];
                  if (v40) {
                    operator delete(v40);
                  }
                }
                else
                {
                  *v65.__end_ = v21[1];
                  uint64_t v39 = v38 + 1;
                }
                v65.__end_ = v39;
              }
              if (v67)
              {
                (*(void (**)(uint64_t, __n128))(*(void *)v67 + 40))(v67, v19);
                char v20 = 0;
              }
              else
              {
                char v20 = 0;
                ++v71;
              }
            }
          }
LABEL_17:
          uint64_t v17 = v64;
          goto LABEL_18;
        }
        if (v62) {
          (*(void (**)(void))(*(void *)v62 + 8))();
        }
      }
      else if ((int)v64 < v63)
      {
        goto LABEL_17;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 24))(v7) != -1
        && (*(unsigned int (**)(uint64_t))(*(void *)v7 + 24))(v7))
      {
        unint64_t v72 = v72 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      }
      if (v65.__begin_)
      {
        v65.__end_ = v65.__begin_;
        operator delete(v65.__begin_);
      }
      if (v66.__begin_)
      {
        v66.__end_ = v66.__begin_;
        operator delete(v66.__begin_);
      }
      unint64_t v9 = v72;
    }
    uint64_t v10 = v9 & 0x3FFFFFFF0000 | (2 * v9) & 0x2AAAAAAA0000 | (v9 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v10;
  return v9;
}

void sub_1B1AA3B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

BOOL fst::CompatProperties(unint64_t this, unint64_t a2)
{
  unint64_t v2 = (((2 * a2) & 0x2AAAAAAA0000 | a2 & 0x3FFFFFFF0000 | (a2 >> 1) & 0x155555550000) & ((this >> 1) & 0x155555550000 | (2 * this) & 0x2AAAAAAA0000 | this) | 7) & (a2 ^ this);
  if (v2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 1;
    do
    {
      if ((v6 & v2) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        uint64_t v7 = fst::LogMessage::LogMessage((fst *)&v22, (uint64_t)__p);
        unint64_t v8 = (void *)fst::cerr(v7);
        unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"CompatProperties: mismatch: ", 28);
        size_t v10 = strlen(fst::PropertyNames[v5]);
        int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)fst::PropertyNames[v5], v10);
        uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": props1 = ", 11);
        if ((v6 & this) != 0) {
          uint64_t v13 = "true";
        }
        else {
          uint64_t v13 = "false";
        }
        if ((v6 & this) != 0) {
          uint64_t v14 = 4;
        }
        else {
          uint64_t v14 = 5;
        }
        uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
        int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", props2 = ", 11);
        if ((v6 & a2) != 0) {
          uint64_t v17 = "true";
        }
        else {
          uint64_t v17 = "false";
        }
        if ((v6 & a2) != 0) {
          uint64_t v18 = 4;
        }
        else {
          uint64_t v18 = 5;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v22);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
      v6 *= 2;
      ++v5;
    }
    while (v5 != 64);
  }
  return v2 == 0;
}

void sub_1B1AA3DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B1AA4668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  int v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a1 + 52) = 0;
    **(void **)(a1 + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    operator new();
  }
  operator new();
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit(uint64_t result)
{
  uint64_t v1 = (void *)result;
  if (*(void *)result)
  {
    unint64_t v2 = **(_DWORD ***)result;
    uint64_t v3 = *(void *)(*(void *)result + 8) - (void)v2;
    if (v3)
    {
      unint64_t v4 = v3 >> 2;
      if (v4 <= 1) {
        unint64_t v4 = 1;
      }
      do
      {
        *unint64_t v2 = *(_DWORD *)(result + 48) + ~*v2;
        ++v2;
        --v4;
      }
      while (v4);
    }
  }
  if (*(unsigned char *)(result + 52))
  {
    int v5 = *(void ***)(result + 16);
    if (v5)
    {
      if (*v5) {
        operator delete(*v5);
      }
      double result = MEMORY[0x1B3EA8670](v5, 0x1010C40113C0ABBLL);
    }
  }
  uint64_t v6 = v1[7];
  if (v6)
  {
    uint64_t v7 = *(void **)v6;
    if (*(void *)v6)
    {
      *(void *)(v6 + 8) = v7;
      operator delete(v7);
    }
    double result = MEMORY[0x1B3EA8670](v6, 0x10C402FEFCB83);
  }
  uint64_t v8 = v1[8];
  if (v8)
  {
    uint64_t v9 = *(void **)v8;
    if (*(void *)v8)
    {
      *(void *)(v8 + 8) = v9;
      operator delete(v9);
    }
    double result = MEMORY[0x1B3EA8670](v8, 0x10C402FEFCB83);
  }
  size_t v10 = (void **)v1[9];
  if (v10)
  {
    if (*v10) {
      operator delete(*v10);
    }
    double result = MEMORY[0x1B3EA8670](v10, 0x1010C40113C0ABBLL);
  }
  uint64_t v11 = v1[10];
  if (v11)
  {
    uint64_t v12 = *(void **)v11;
    if (*(void *)v11)
    {
      *(void *)(v11 + 8) = v12;
      operator delete(v12);
    }
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

uint64_t fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    unint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 160);
    return v2(a1);
  }
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

void sub_1B1AA4B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>();
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(uint64_t *a1, int a2, int a3)
{
  uint64_t v6 = a1[10];
  int v7 = *(_DWORD **)(v6 + 8);
  unint64_t v8 = *(void *)(v6 + 16);
  if ((unint64_t)v7 >= v8)
  {
    size_t v10 = *(_DWORD **)v6;
    uint64_t v11 = ((uint64_t)v7 - *(void *)v6) >> 2;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v8 - (void)v10;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6 + 16, v14);
      size_t v10 = *(_DWORD **)v6;
      int v7 = *(_DWORD **)(v6 + 8);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[4 * v11];
    uint64_t v17 = &v15[4 * v14];
    *(_DWORD *)uint64_t v16 = a2;
    uint64_t v9 = v16 + 4;
    while (v7 != v10)
    {
      int v18 = *--v7;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    *(void *)uint64_t v6 = v16;
    *(void *)(v6 + 8) = v9;
    *(void *)(v6 + 16) = v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    _DWORD *v7 = a2;
    uint64_t v9 = v7 + 1;
  }
  *(void *)(v6 + 8) = v9;
  unint64_t v19 = a2;
  uint64_t v20 = *(void *)a1[7];
  if (a2 >= (unint64_t)((*(void *)(a1[7] + 8) - v20) >> 2))
  {
    do
    {
      uint64_t v21 = *a1;
      if (*a1)
      {
        unint64_t v22 = *(void *)(v21 + 16);
        int v23 = *(_DWORD **)(v21 + 8);
        if ((unint64_t)v23 >= v22)
        {
          float v25 = *(_DWORD **)v21;
          uint64_t v26 = ((uint64_t)v23 - *(void *)v21) >> 2;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62) {
            goto LABEL_78;
          }
          uint64_t v28 = v22 - (void)v25;
          if (v28 >> 1 > v27) {
            unint64_t v27 = v28 >> 1;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29)
          {
            int64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v21 + 16, v29);
            float v25 = *(_DWORD **)v21;
            int v23 = *(_DWORD **)(v21 + 8);
          }
          else
          {
            int64_t v30 = 0;
          }
          unint64_t v31 = &v30[4 * v26];
          *(_DWORD *)unint64_t v31 = -1;
          unint64_t v24 = v31 + 4;
          while (v23 != v25)
          {
            int v32 = *--v23;
            *((_DWORD *)v31 - 1) = v32;
            v31 -= 4;
          }
          *(void *)uint64_t v21 = v31;
          *(void *)(v21 + 8) = v24;
          *(void *)(v21 + 16) = &v30[4 * v29];
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          *int v23 = -1;
          unint64_t v24 = v23 + 1;
        }
        *(void *)(v21 + 8) = v24;
      }
      uint64_t v33 = a1[1];
      if (v33)
      {
        char v67 = 0;
        std::vector<BOOL>::push_back(v33, &v67);
      }
      uint64_t v34 = a1[2];
      char v66 = 0;
      std::vector<BOOL>::push_back(v34, &v66);
      uint64_t v35 = a1[7];
      uint64_t v36 = *(_DWORD **)(v35 + 8);
      unint64_t v37 = *(void *)(v35 + 16);
      if ((unint64_t)v36 >= v37)
      {
        uint64_t v39 = *(_DWORD **)v35;
        uint64_t v40 = ((uint64_t)v36 - *(void *)v35) >> 2;
        unint64_t v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62) {
          goto LABEL_78;
        }
        uint64_t v42 = v37 - (void)v39;
        if (v42 >> 1 > v41) {
          unint64_t v41 = v42 >> 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v41;
        }
        if (v43)
        {
          unint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v35 + 16, v43);
          uint64_t v39 = *(_DWORD **)v35;
          uint64_t v36 = *(_DWORD **)(v35 + 8);
        }
        else
        {
          unint64_t v44 = 0;
        }
        uint64_t v45 = &v44[4 * v40];
        *(_DWORD *)uint64_t v45 = -1;
        std::vector<unsigned int>::pointer v38 = v45 + 4;
        while (v36 != v39)
        {
          int v46 = *--v36;
          *((_DWORD *)v45 - 1) = v46;
          v45 -= 4;
        }
        *(void *)uint64_t v35 = v45;
        *(void *)(v35 + 8) = v38;
        *(void *)(v35 + 16) = &v44[4 * v43];
        if (v39) {
          operator delete(v39);
        }
      }
      else
      {
        *uint64_t v36 = -1;
        std::vector<unsigned int>::pointer v38 = v36 + 1;
      }
      *(void *)(v35 + 8) = v38;
      uint64_t v47 = a1[8];
      unint64_t v48 = *(_DWORD **)(v47 + 8);
      unint64_t v49 = *(void *)(v47 + 16);
      if ((unint64_t)v48 >= v49)
      {
        unint64_t v51 = *(_DWORD **)v47;
        uint64_t v52 = ((uint64_t)v48 - *(void *)v47) >> 2;
        unint64_t v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 62) {
LABEL_78:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        uint64_t v54 = v49 - (void)v51;
        if (v54 >> 1 > v53) {
          unint64_t v53 = v54 >> 1;
        }
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v55 = v53;
        }
        if (v55)
        {
          unsigned int v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v47 + 16, v55);
          unint64_t v51 = *(_DWORD **)v47;
          unint64_t v48 = *(_DWORD **)(v47 + 8);
        }
        else
        {
          unsigned int v56 = 0;
        }
        unint64_t v57 = &v56[4 * v52];
        *(_DWORD *)unint64_t v57 = -1;
        unsigned int v50 = v57 + 4;
        while (v48 != v51)
        {
          int v58 = *--v48;
          *((_DWORD *)v57 - 1) = v58;
          v57 -= 4;
        }
        *(void *)uint64_t v47 = v57;
        *(void *)(v47 + 8) = v50;
        *(void *)(v47 + 16) = &v56[4 * v55];
        if (v51) {
          operator delete(v51);
        }
      }
      else
      {
        *unint64_t v48 = -1;
        unsigned int v50 = v48 + 1;
      }
      *(void *)(v47 + 8) = v50;
      uint64_t v59 = a1[9];
      char v65 = 0;
      std::vector<BOOL>::push_back(v59, &v65);
      uint64_t v20 = *(void *)a1[7];
    }
    while (v19 >= (*(void *)(a1[7] + 8) - v20) >> 2);
  }
  *(_DWORD *)(v20 + 4 * v19) = *((_DWORD *)a1 + 11);
  long long v60 = (void *)a1[9];
  *(_DWORD *)(*(void *)a1[8] + 4 * v19) = *((_DWORD *)a1 + 11);
  unint64_t v61 = v19 >> 6;
  uint64_t v62 = 1 << v19;
  *(void *)(*v60 + 8 * (v19 >> 6)) |= 1 << v19;
  int v63 = (void *)a1[1];
  if (*((_DWORD *)a1 + 10) == a3)
  {
    if (v63) {
      *(void *)(*v63 + 8 * v61) |= v62;
    }
  }
  else
  {
    if (v63) {
      *(void *)(*v63 + 8 * v61) &= ~v62;
    }
    *(void *)a1[3] = *(void *)a1[3] & 0xFFFFFCFFFFFFFFFFLL | 0x20000000000;
  }
  ++*((_DWORD *)a1 + 11);
  return 1;
}

unint64_t fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishState(uint64_t a1, int a2, int a3)
{
  unint64_t result = (unint64_t)(*(void *(**)(uint64_t *__return_ptr))(**(void **)(a1 + 32) + 32))(&v22);
  float v25 = *((float *)&v22 + 1);
  int v26 = v22;
  int v24 = 2139095040;
  float v23 = INFINITY;
  if (*(float *)&v22 == INFINITY && v25 == v23)
  {
    unint64_t v7 = a2;
  }
  else
  {
    unint64_t v7 = a2;
    *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  uint64_t v8 = **(void **)(a1 + 64);
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * v7) != *(_DWORD *)(v8 + 4 * v7)) {
    goto LABEL_17;
  }
  char v9 = 0;
  size_t v10 = *(void **)(a1 + 80);
  uint64_t v11 = v10[1];
  uint64_t v12 = **(void **)(a1 + 16);
  uint64_t v13 = (int *)(((v11 - *v10) & 0xFFFFFFFFFFFFFFFCLL) + *v10 - 4);
  do
  {
    unint64_t v14 = *v13--;
    v9 |= *(void *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14;
  }
  while (v14 != a2);
  uint64_t v15 = *(void **)a1;
  uint64_t v16 = **(void **)(a1 + 72);
  for (float32x2_t i = (int *)(v11 - 4); ; --i)
  {
    unint64_t v18 = *i;
    if (v15) {
      *(_DWORD *)(*v15 + 4 * v18) = *(_DWORD *)(a1 + 48);
    }
    unint64_t result = v18 >> 6;
    uint64_t v19 = 1 << v18;
    if ((v9 & 1) == 0) {
      break;
    }
    *(void *)(v12 + 8 * result) |= v19;
    *(void *)(v16 + 8 * result) &= ~v19;
    if (v18 == a2)
    {
      v10[1] = i;
      goto LABEL_16;
    }
LABEL_14:
    ;
  }
  *(void *)(v16 + 8 * result) &= ~v19;
  if (v18 != a2) {
    goto LABEL_14;
  }
  v10[1] = i;
  **(void **)(a1 + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_16:
  ++*(_DWORD *)(a1 + 48);
LABEL_17:
  if (a3 != -1)
  {
    uint64_t v20 = **(void **)(a1 + 16);
    if ((*(void *)(v20 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7)) {
      *(void *)(v20 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    int v21 = *(_DWORD *)(v8 + 4 * v7);
    if (v21 < *(_DWORD *)(v8 + 4 * a3)) {
      *(_DWORD *)(v8 + 4 * a3) = v21;
    }
  }
  return result;
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::BackArc(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v3 = *(int *)(a3 + 16);
  int v4 = *(_DWORD *)(**(void **)(a1 + 56) + 4 * v3);
  uint64_t v5 = **(void **)(a1 + 64);
  if (v4 < *(_DWORD *)(v5 + 4 * a2)) {
    *(_DWORD *)(v5 + 4 * a2) = v4;
  }
  uint64_t v6 = **(void **)(a1 + 16);
  if ((*(void *)(v6 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3)) {
    *(void *)(v6 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  unint64_t v7 = *(unint64_t **)(a1 + 24);
  unint64_t v8 = *v7 & 0xFFFFFFF3FFFFFFFFLL | 0x400000000;
  unint64_t *v7 = v8;
  if (*(_DWORD *)(a3 + 16) == *(_DWORD *)(a1 + 40)) {
    unint64_t *v7 = v8 & 0xFFFFFFC7FFFFFFFFLL | 0x1000000000;
  }
  return 1;
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::ForwardOrCrossArc(void **a1, int a2, uint64_t a3)
{
  unint64_t v3 = *(int *)(a3 + 16);
  uint64_t v4 = *a1[7];
  int v5 = *(_DWORD *)(v4 + 4 * v3);
  if (v5 >= *(_DWORD *)(v4 + 4 * a2))
  {
    unint64_t v6 = v3 >> 6;
    uint64_t v7 = 1 << v3;
  }
  else
  {
    unint64_t v6 = v3 >> 6;
    uint64_t v7 = 1 << v3;
    if ((*(void *)(*a1[9] + 8 * v6) & v7) != 0)
    {
      uint64_t v8 = *a1[8];
      if (v5 < *(_DWORD *)(v8 + 4 * a2)) {
        *(_DWORD *)(v8 + 4 * a2) = v5;
      }
    }
  }
  uint64_t v9 = *a1[2];
  if ((*(void *)(v9 + 8 * v6) & v7) != 0) {
    *(void *)(v9 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  return 1;
}

void fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36E00;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36E00;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36E00;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B1AA537C(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Size()
{
  return 48;
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37DB8;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B1AA5494(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37DB8;
  unint64_t v2 = a1 + 3;
  for (float32x2_t i = (void *)a1[4]; i != v2; float32x2_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Size()
{
  return 56;
}

void *std::__list_imp<char *>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    unint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        unint64_t result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n, std::vector<char>::const_reference __x)
{
  std::vector<char>::size_type v4 = __n;
  std::vector<unsigned int>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      uint64_t v13 = &end[__n];
      do
      {
        *end++ = *__x;
        --v4;
      }
      while (v4);
      std::vector<unsigned int>::pointer end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    int64_t v8 = end - this->__begin_;
    unint64_t v9 = v8 + __n;
    if ((uint64_t)(v8 + __n) < 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = value - this->__begin_;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)operator new(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v14 = &v12[v8];
    uint64_t v15 = &v12[v8 + v4];
    uint64_t v16 = &v12[v8];
    do
    {
      *v16++ = *__x;
      --v4;
    }
    while (v4);
    std::vector<char>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        char v18 = *--end;
        *--unint64_t v14 = v18;
      }
      while (end != begin);
      std::vector<unsigned int>::pointer end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v15;
    this->__end_cap_.__value_ = &v12[v11];
    if (end)
    {
      operator delete(end);
    }
  }
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      std::vector<unsigned int>::pointer v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unsigned int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1AA5A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      unint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(void *a1, uint64_t a2)
{
  uint64_t v3 = 56 * a2;
  unint64_t v4 = a1[1];
  if (224 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)a3;
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t v10 = *a1 + 8 * (v4 >> 6);
  uint64_t v16 = *(void *)a2;
  int v17 = v7;
  uint64_t v14 = v8;
  int v15 = v9;
  uint64_t v12 = v10;
  int v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v16 = *a1;
  int v17 = v5;
  uint64_t v14 = v6;
  int v15 = v7;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v12 = *a3;
  int v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  int v9 = v19;
  uint64_t v10 = v20;
  int v11 = v21;
  *(void *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); int v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1 << i;
    if ((*v4 >> v5)) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    *int v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }
    else
    {
      int v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8;
    }
    else
    {
      int i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    unint64_t v4 = *(void **)a1;
  }
  *(void *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = *(void *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

uint64_t std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200) {
    a2 = 1;
  }
  if (v5 < 0x400) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    int v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

fst *fst::LogMessage::LogMessage(fst *a1, uint64_t a2)
{
  int v4 = *(char *)(a2 + 23);
  if (v4 < 0)
  {
    if (*(void *)(a2 + 8) != 5)
    {
LABEL_12:
      BOOL v9 = 0;
      goto LABEL_13;
    }
    uint64_t v5 = *(void *)a2;
  }
  else
  {
    uint64_t v5 = a2;
    if (v4 != 5) {
      goto LABEL_12;
    }
  }
  int v6 = *(_DWORD *)v5;
  int v7 = *(unsigned __int8 *)(v5 + 4);
  BOOL v9 = v6 == 1096040774 && v7 == 76;
LABEL_13:
  *(unsigned char *)a1 = v9;
  uint64_t v10 = (void *)fst::cerr(a1);
  int v11 = *(char *)(a2 + 23);
  if (v11 >= 0) {
    uint64_t v12 = a2;
  }
  else {
    uint64_t v12 = *(void *)a2;
  }
  if (v11 >= 0) {
    uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v13 = *(void *)(a2 + 8);
  }
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
  return a1;
}

void fst::LogMessage::~LogMessage(fst::LogMessage *this)
{
  uint64_t v2 = (void *)fst::cerr(this);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
  uint64_t v3 = std::locale::use_facet(&v4, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  if (*(unsigned char *)this) {
    exit(1);
  }
}

void sub_1B1AA6544(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void fst::ArcBuffer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::SetFromFst<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(void *)a2 + 136))(a2, a3, &v25);
  if (!v25 && (a4 & 1) == 0)
  {
    uint64_t v10 = v26 + 20 * v27;
    *(void *)(a1 + 16) = v26;
    *(void *)(a1 + 24) = v10;
    if (*(void *)a1)
    {
      free(*(void **)a1);
      *(void *)a1 = 0;
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
  uint64_t v12 = a5;
  if (!a4) {
    uint64_t v12 = 0;
  }
  unint64_t v13 = v11 + v12;
  if (*(void *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(void *)a1) {
      free(*(void **)a1);
    }
    uint64_t v24 = 0x4000;
    if (v13 > 0x4000) {
      uint64_t v24 = v13;
    }
    *(void *)(a1 + 8) = v24;
    int v15 = malloc_type_malloc(20 * v24, 0x1000040A86A77D5uLL);
    *(void *)a1 = v15;
    *(void *)(a1 + 16) = v15;
    uint64_t v14 = v15;
  }
  else
  {
    uint64_t v14 = *(_DWORD **)(a1 + 16);
    int v15 = *(_DWORD **)a1;
  }
  *(void *)(a1 + 24) = &v14[5 * v13];
  uint64_t v16 = v25;
  uint64_t v17 = v26;
  unint64_t v19 = v27;
  uint64_t v18 = v28;
  if (v28) {
    ++*v28;
  }
  unint64_t v20 = 0;
LABEL_13:
  v15 += 5;
  while (v16)
  {
    int v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    uint64_t v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    *(void *)(v15 - 5) = *(void *)v23;
    *(void *)(v15 - 3) = *(void *)(v23 + 8);
    *(v15 - 1) = *(_DWORD *)(v23 + 16);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 5;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  uint64_t v23 = v17 + 20 * v20;
  if (v20 < v19) {
    goto LABEL_18;
  }
  if (v18) {
    --*v18;
  }
}

void sub_1B1AA67DC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A42D60;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 88);
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2);
  *a3 = *(void *)v3;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a3 + 1, *(const void **)(v3 + 8), *(void *)(v3 + 16), (uint64_t)(*(void *)(v3 + 16) - *(void *)(v3 + 8)) >> 2);
}

unint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return 0xAAAAAAAAAAAAAAABLL
       * ((uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 56)
                  - *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 48)) >> 4);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 32);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

uint64_t fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::Write(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  std::locale v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  BOOL v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

{
  fst *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  std::locale v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  BOOL v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B1AA6AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1AA6BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::operator=(uint64_t a1)
{
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(*(void *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1B1AA6CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    unint64_t result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      unint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1AA6D88(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

unint64_t fst::TestProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (FLAGS_fst_verify_properties)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    unint64_t v7 = fst::ComputeProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a1, a2, a3, 0);
    if (!fst::CompatProperties(v6, v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      size_t v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      BOOL v9 = (void *)fst::cerr(v8);
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return fst::ComputeProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a1, a2, a3, 1);
  }
}

void sub_1B1AA6F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v7 = a1;
  unint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v9 = v8;
  if (!a4
    || (uint64_t v10 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7, (a2 & ~v10) != 0))
  {
    unint64_t v9 = v8 & 7;
    unint64_t v77 = v9;
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
    if ((a2 & 0xF3C00000000) != 0 && v11)
    {
      uint64_t v71 = 0;
      uint64_t v72 = 0;
      float v73 = 0;
      int v74 = &v77;
      fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(v7, (uint64_t)&v71);
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      uint64_t v12 = a2 & 0xC0000;
      uint64_t v13 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0) {
        uint64_t v13 = 0x10425A850000;
      }
      unint64_t v14 = v9 | v13;
      uint64_t v15 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0) {
        v14 |= 0x100000uLL;
      }
      unint64_t v77 = v14;
      memset(&v70, 0, sizeof(v70));
      memset(&v69, 0, sizeof(v69));
      unsigned int v68 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 128))(v7, &v66);
      int v16 = 0;
      uint64_t v60 = v7;
LABEL_12:
      if (v66)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v66 + 16))(v66))
        {
          if (v66)
          {
            uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v66 + 24))();
LABEL_18:
            std::vector<unsigned int>::size_type v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, v17);
            float v73 = 0;
            int v74 = 0;
            uint64_t v75 = 0;
            v70.__end_ = v70.__begin_;
            v69.__end_ = v69.__begin_;
            if (v12) {
              std::vector<int>::reserve(&v70, v18);
            }
            if (v15) {
              std::vector<int>::reserve(&v69, v18);
            }
            unint64_t v65 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v7 + 136))(v7, v17, &v61);
            char v19 = 1;
            while (1)
            {
              if (v61)
              {
                if ((*(unsigned int (**)(uint64_t))(*(void *)v61 + 24))(v61))
                {
                  if (v61)
                  {
                    (*(void (**)(void))(*(void *)v61 + 8))();
                  }
                  else
                  {
LABEL_96:
                    if (v64) {
                      --*v64;
                    }
                  }
                  uint64_t v7 = v60;
                  if (v12
                    && (std::__sort<std::__less<int,int> &,int *>(),
                        (std::vector<unsigned int>::pointer)((char *)v70.__end_ - (char *)v70.__begin_) >= (std::vector<unsigned int>::pointer)5))
                  {
                    unint64_t v47 = v70.__end_ - v70.__begin_;
                    if (v47 <= 2) {
                      unint64_t v47 = 2;
                    }
                    std::vector<unsigned int>::pointer v48 = v70.__begin_ + 1;
                    unsigned int v49 = *v70.__begin_;
                    unint64_t v50 = v47 - 1;
                    while (1)
                    {
                      unsigned int v52 = *v48++;
                      unsigned int v51 = v52;
                      if (v52 == v49) {
                        break;
                      }
                      unsigned int v49 = v51;
                      if (!--v50) {
                        goto LABEL_105;
                      }
                    }
                    unint64_t v77 = v77 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                    if (!v15)
                    {
LABEL_116:
                      if (v16 >= 1) {
                        unint64_t v77 = v77 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      }
                      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v60 + 32))(&v61, v60, v17);
                      float v80 = *((float *)&v61 + 1);
                      float v81 = *(float *)&v61;
                      int v79 = 2139095040;
                      float v78 = INFINITY;
                      if (*(float *)&v61 == INFINITY && v80 == v78 && v63 == __p)
                      {
                        if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v60 + 40))(v60, v17) != 1) {
                          unint64_t v77 = v77 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                        }
                      }
                      else
                      {
                        float v80 = *((float *)&v61 + 1);
                        float v81 = *(float *)&v61;
                        int v79 = 0;
                        float v78 = 0.0;
                        if (*(float *)&v61 != 0.0 || v80 != v78 || v63 != __p) {
                          unint64_t v77 = v77 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                        }
                        ++v16;
                      }
                      if (__p)
                      {
                        int v63 = __p;
                        operator delete(__p);
                      }
                      if (v73)
                      {
                        int v74 = (unint64_t *)v73;
                        operator delete(v73);
                      }
                      if (v66) {
                        (*(void (**)(uint64_t))(*(void *)v66 + 32))(v66);
                      }
                      else {
                        ++v68;
                      }
                      goto LABEL_12;
                    }
                  }
                  else
                  {
LABEL_105:
                    if (!v15) {
                      goto LABEL_116;
                    }
                  }
                  std::__sort<std::__less<int,int> &,int *>();
                  if ((std::vector<unsigned int>::pointer)((char *)v69.__end_ - (char *)v69.__begin_) >= (std::vector<unsigned int>::pointer)5)
                  {
                    unint64_t v53 = v69.__end_ - v69.__begin_;
                    if (v53 <= 2) {
                      unint64_t v53 = 2;
                    }
                    std::vector<unsigned int>::pointer v54 = v69.__begin_ + 1;
                    unsigned int v55 = *v69.__begin_;
                    unint64_t v56 = v53 - 1;
                    while (1)
                    {
                      unsigned int v58 = *v54++;
                      unsigned int v57 = v58;
                      if (v58 == v55) {
                        break;
                      }
                      unsigned int v55 = v57;
                      if (!--v56) {
                        goto LABEL_116;
                      }
                    }
                    unint64_t v77 = v77 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                  }
                  goto LABEL_116;
                }
                if (v61)
                {
                  unint64_t v20 = (char *)(*(uint64_t (**)(void))(*(void *)v61 + 32))();
                  goto LABEL_29;
                }
              }
              else if (v65 >= (unint64_t)v63)
              {
                goto LABEL_96;
              }
              unint64_t v20 = (char *)__p + 48 * v65;
LABEL_29:
              int v21 = *(_DWORD *)v20;
              int v22 = *(_DWORD *)v20;
              if (*(_DWORD *)v20 != *((_DWORD *)v20 + 1))
              {
                unint64_t v77 = v77 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
                int v22 = *((_DWORD *)v20 + 1);
              }
              if (v21 | v22)
              {
                if (v21)
                {
                  if (v22) {
                    goto LABEL_35;
                  }
                  goto LABEL_39;
                }
                unint64_t v23 = v77;
              }
              else
              {
                unint64_t v23 = v77 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
              }
              unint64_t v77 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
              if (v22)
              {
LABEL_35:
                if (v19) {
                  goto LABEL_44;
                }
                goto LABEL_40;
              }
LABEL_39:
              unint64_t v77 = v77 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
              if (v19) {
                goto LABEL_44;
              }
LABEL_40:
              if (v21 < (int)v71) {
                unint64_t v77 = v77 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
              }
              if (v22 < SHIDWORD(v71)) {
                unint64_t v77 = v77 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
              }
LABEL_44:
              float v24 = *((float *)v20 + 2);
              float v25 = *((float *)v20 + 3);
              float v81 = v24;
              float v80 = v25;
              int v79 = 0;
              float v78 = 0.0;
              if (v24 != 0.0 || v80 != v78 || *((void *)v20 + 3) != *((void *)v20 + 2))
              {
                float v81 = v24;
                float v80 = v25;
                int v79 = 2139095040;
                float v78 = INFINITY;
                if (v24 != INFINITY || v80 != v78 || *((void *)v20 + 3) != *((void *)v20 + 2)) {
                  unint64_t v77 = v77 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                }
              }
              int v26 = *((_DWORD *)v20 + 10);
              if (v26 <= (int)v17) {
                unint64_t v77 = v77 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
              }
              if (v26 != v17 + 1) {
                unint64_t v77 = v77 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              uint64_t v71 = *(void *)v20;
              fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)&v72, (uint64_t)(v20 + 8));
              int v76 = *((_DWORD *)v20 + 10);
              if (v12)
              {
                std::vector<unsigned int>::pointer end = v70.__end_;
                if (v70.__end_ >= v70.__end_cap_.__value_)
                {
                  std::vector<unsigned int>::pointer begin = v70.__begin_;
                  int64_t v30 = v70.__end_ - v70.__begin_;
                  unint64_t v31 = v30 + 1;
                  if ((unint64_t)(v30 + 1) >> 62) {
                    goto LABEL_147;
                  }
                  int64_t v32 = (char *)v70.__end_cap_.__value_ - (char *)v70.__begin_;
                  if (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 1 > v31) {
                    unint64_t v31 = v32 >> 1;
                  }
                  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v33 = v31;
                  }
                  if (v33)
                  {
                    uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v70.__end_cap_, v33);
                    std::vector<unsigned int>::pointer begin = v70.__begin_;
                    std::vector<unsigned int>::pointer end = v70.__end_;
                  }
                  else
                  {
                    uint64_t v34 = 0;
                  }
                  uint64_t v35 = (unsigned int *)&v34[4 * v30];
                  unsigned int *v35 = *(_DWORD *)v20;
                  uint64_t v28 = v35 + 1;
                  while (end != begin)
                  {
                    unsigned int v36 = *--end;
                    *--uint64_t v35 = v36;
                  }
                  v70.__begin_ = v35;
                  v70.__end_ = v28;
                  v70.__end_cap_.__value_ = (unsigned int *)&v34[4 * v33];
                  if (begin) {
                    operator delete(begin);
                  }
                }
                else
                {
                  *v70.__end_ = *(_DWORD *)v20;
                  uint64_t v28 = end + 1;
                }
                v70.__end_ = v28;
              }
              if (v15)
              {
                std::vector<unsigned int>::pointer v37 = v69.__end_;
                if (v69.__end_ >= v69.__end_cap_.__value_)
                {
                  std::vector<unsigned int>::pointer v39 = v69.__begin_;
                  int64_t v40 = v69.__end_ - v69.__begin_;
                  unint64_t v41 = v40 + 1;
                  if ((unint64_t)(v40 + 1) >> 62) {
LABEL_147:
                  }
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  int64_t v42 = (char *)v69.__end_cap_.__value_ - (char *)v69.__begin_;
                  if (((char *)v69.__end_cap_.__value_ - (char *)v69.__begin_) >> 1 > v41) {
                    unint64_t v41 = v42 >> 1;
                  }
                  if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v43 = v41;
                  }
                  if (v43)
                  {
                    unint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v69.__end_cap_, v43);
                    std::vector<unsigned int>::pointer v39 = v69.__begin_;
                    std::vector<unsigned int>::pointer v37 = v69.__end_;
                  }
                  else
                  {
                    unint64_t v44 = 0;
                  }
                  uint64_t v45 = (unsigned int *)&v44[4 * v40];
                  *uint64_t v45 = *((_DWORD *)v20 + 1);
                  std::vector<unsigned int>::pointer v38 = v45 + 1;
                  while (v37 != v39)
                  {
                    unsigned int v46 = *--v37;
                    *--uint64_t v45 = v46;
                  }
                  v69.__begin_ = v45;
                  v69.__end_ = v38;
                  v69.__end_cap_.__value_ = (unsigned int *)&v44[4 * v43];
                  if (v39) {
                    operator delete(v39);
                  }
                }
                else
                {
                  *v69.__end_ = *((_DWORD *)v20 + 1);
                  std::vector<unsigned int>::pointer v38 = v37 + 1;
                }
                v69.__end_ = v38;
              }
              if (v61)
              {
                (*(void (**)(uint64_t))(*(void *)v61 + 40))(v61);
                char v19 = 0;
              }
              else
              {
                char v19 = 0;
                ++v65;
              }
            }
          }
LABEL_17:
          uint64_t v17 = v68;
          goto LABEL_18;
        }
        if (v66) {
          (*(void (**)(void))(*(void *)v66 + 8))();
        }
      }
      else if ((int)v68 < v67)
      {
        goto LABEL_17;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 24))(v7) != -1
        && (*(unsigned int (**)(uint64_t))(*(void *)v7 + 24))(v7))
      {
        unint64_t v77 = v77 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      }
      if (v69.__begin_)
      {
        v69.__end_ = v69.__begin_;
        operator delete(v69.__begin_);
      }
      if (v70.__begin_)
      {
        v70.__end_ = v70.__begin_;
        operator delete(v70.__begin_);
      }
      unint64_t v9 = v77;
    }
    uint64_t v10 = v9 & 0x3FFFFFFF0000 | (2 * v9) & 0x2AAAAAAA0000 | (v9 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v10;
  return v9;
}

void sub_1B1AA79BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B1AA832C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  int v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::InitVisit(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a1 + 52) = 0;
    **(void **)(a1 + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    operator new();
  }
  operator new();
}

uint64_t fst::CountStates<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 160);
    return v2(a1);
  }
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

void sub_1B1AA86B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::CountStates<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>();
  }
  _Unwind_Resume(exception_object);
}

void fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(uint64_t a1, int a2, int a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 32) + 32))(&v22);
  float v27 = *((float *)&v22 + 1);
  int v28 = v22;
  int v26 = 2139095040;
  float v25 = INFINITY;
  BOOL v6 = *(float *)&v22 != INFINITY || v27 != v25 || v24 != __p;
  if (__p)
  {
    float v24 = __p;
    operator delete(__p);
  }
  if (v6) {
    *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  uint64_t v7 = **(void **)(a1 + 64);
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * a2) != *(_DWORD *)(v7 + 4 * a2)) {
    goto LABEL_21;
  }
  char v8 = 0;
  uint64_t v9 = *(void **)(a1 + 80);
  uint64_t v10 = v9[1];
  uint64_t v11 = **(void **)(a1 + 16);
  uint64_t v12 = (int *)(((v10 - *v9) & 0xFFFFFFFFFFFFFFFCLL) + *v9 - 4);
  do
  {
    unint64_t v13 = *v12--;
    v8 |= *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
  }
  while (v13 != a2);
  uint64_t v14 = *(void **)a1;
  uint64_t v15 = **(void **)(a1 + 72);
  for (int i = (int *)(v10 - 4); ; --i)
  {
    unint64_t v17 = *i;
    if (v14) {
      *(_DWORD *)(*v14 + 4 * v17) = *(_DWORD *)(a1 + 48);
    }
    unint64_t v18 = v17 >> 6;
    uint64_t v19 = 1 << v17;
    if ((v8 & 1) == 0) {
      break;
    }
    *(void *)(v11 + 8 * v18) |= v19;
    *(void *)(v15 + 8 * v18) &= ~v19;
    if (v17 == a2)
    {
      v9[1] = i;
      goto LABEL_20;
    }
LABEL_18:
    ;
  }
  *(void *)(v15 + 8 * v18) &= ~v19;
  if (v17 != a2) {
    goto LABEL_18;
  }
  v9[1] = i;
  **(void **)(a1 + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_20:
  ++*(_DWORD *)(a1 + 48);
LABEL_21:
  if (a3 != -1)
  {
    uint64_t v20 = **(void **)(a1 + 16);
    if ((*(void *)(v20 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2)) {
      *(void *)(v20 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    int v21 = *(_DWORD *)(v7 + 4 * a2);
    if (v21 < *(_DWORD *)(v7 + 4 * a3)) {
      *(_DWORD *)(v7 + 4 * a3) = v21;
    }
  }
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::BackArc(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v3 = *(int *)(a3 + 40);
  int v4 = *(_DWORD *)(**(void **)(a1 + 56) + 4 * v3);
  uint64_t v5 = **(void **)(a1 + 64);
  if (v4 < *(_DWORD *)(v5 + 4 * a2)) {
    *(_DWORD *)(v5 + 4 * a2) = v4;
  }
  uint64_t v6 = **(void **)(a1 + 16);
  if ((*(void *)(v6 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3)) {
    *(void *)(v6 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  uint64_t v7 = *(unint64_t **)(a1 + 24);
  unint64_t v8 = *v7 & 0xFFFFFFF3FFFFFFFFLL | 0x400000000;
  unint64_t *v7 = v8;
  if (*(_DWORD *)(a3 + 40) == *(_DWORD *)(a1 + 40)) {
    unint64_t *v7 = v8 & 0xFFFFFFC7FFFFFFFFLL | 0x1000000000;
  }
  return 1;
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::ForwardOrCrossArc(void **a1, int a2, uint64_t a3)
{
  unint64_t v3 = *(int *)(a3 + 40);
  uint64_t v4 = *a1[7];
  int v5 = *(_DWORD *)(v4 + 4 * v3);
  if (v5 >= *(_DWORD *)(v4 + 4 * a2))
  {
    unint64_t v6 = v3 >> 6;
    uint64_t v7 = 1 << v3;
  }
  else
  {
    unint64_t v6 = v3 >> 6;
    uint64_t v7 = 1 << v3;
    if ((*(void *)(*a1[9] + 8 * v6) & v7) != 0)
    {
      uint64_t v8 = *a1[8];
      if (v5 < *(_DWORD *)(v8 + 4 * a2)) {
        *(_DWORD *)(v8 + 4 * a2) = v5;
      }
    }
  }
  uint64_t v9 = *a1[2];
  if ((*(void *)(v9 + 8 * v6) & v7) != 0) {
    *(void *)(v9 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  return 1;
}

void fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36E50;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36E50;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36E50;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B1AA8B00(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Size()
{
  return 48;
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37E08;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B1AA8C18(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37E08;
  uint64_t v2 = a1 + 3;
  for (int i = (void *)a1[4]; i != v2; int i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      std::vector<unsigned int>::pointer v37 = &v34[8 * v36];
      std::vector<unsigned int>::pointer v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      std::vector<unsigned int>::pointer v37 = &v34[8 * v47];
      std::vector<unsigned int>::pointer v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unsigned int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unsigned int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  float v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1AA9060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (a1 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 8), *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  return a1;
}

void fst::ArcBuffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::SetFromFst<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(void *)a2 + 136))(a2, a3, &v25);
  if (!v25 && (a4 & 1) == 0)
  {
    uint64_t v10 = v26 + 48 * v27;
    *(void *)(a1 + 16) = v26;
    *(void *)(a1 + 24) = v10;
    if (*(void *)a1)
    {
      free(*(void **)a1);
      *(void *)a1 = 0;
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
  uint64_t v12 = a5;
  if (!a4) {
    uint64_t v12 = 0;
  }
  unint64_t v13 = v11 + v12;
  if (*(void *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(void *)a1) {
      free(*(void **)a1);
    }
    uint64_t v24 = 0x4000;
    if (v13 > 0x4000) {
      uint64_t v24 = v13;
    }
    *(void *)(a1 + 8) = v24;
    uint64_t v15 = malloc_type_malloc(48 * v24, 0x1010040A52E2B18uLL);
    *(void *)a1 = v15;
    *(void *)(a1 + 16) = v15;
    BOOL v14 = v15;
  }
  else
  {
    BOOL v14 = *(void **)(a1 + 16);
    uint64_t v15 = *(void **)a1;
  }
  *(void *)(a1 + 24) = &v14[6 * v13];
  uint64_t v16 = v25;
  uint64_t v17 = v26;
  unint64_t v19 = v27;
  uint64_t v18 = v28;
  if (v28) {
    ++*v28;
  }
  unint64_t v20 = 0;
LABEL_13:
  v15 += 6;
  while (v16)
  {
    int v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    uint64_t v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    *(v15 - 6) = *(void *)v23;
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v15 - 5), v23 + 8);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 40);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 6;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  uint64_t v23 = v17 + 48 * v20;
  if (v20 < v19) {
    goto LABEL_18;
  }
  if (v18) {
    --*v18;
  }
}

void sub_1B1AA9388(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5FFDF20, MEMORY[0x1E4FBA1D0]);
}

void sub_1B1AA9438(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  unint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)v2);
    BOOL v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    unint64_t result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    unint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  BOOL v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    unint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    unint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v8 = (char *)result;
  }
  else {
    uint64_t v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  uint64_t v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v11 = a2;
    }
    else {
      unint64_t v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  size_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  size_t v6 = operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,quasar::SystemConfig::Version>::pair[abi:ne180100]<std::string&&>((uint64_t)v6 + 32, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1AA9804(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,quasar::SystemConfig::Version>::pair[abi:ne180100]<std::string&&>(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  quasar::SystemConfig::Version::Version((quasar::SystemConfig::Version *)(a1 + 24));
  return a1;
}

void sub_1B1AA9860(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  size_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  size_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B1AA99A8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

_OWORD *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  size_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    size_t v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void *std::allocate_shared[abi:ne180100]<kaldi::quasar::CEAttnEncoderDecoder,std::allocator<kaldi::quasar::CEAttnEncoderDecoder>,std::string &,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xE8uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::quasar::CEAttnEncoderDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<kaldi::quasar::CEAttnEncoderDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1AA9B48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::quasar::CEAttnEncoderDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<kaldi::quasar::CEAttnEncoderDecoder>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F3A8;
  kaldi::quasar::CEAttnEncoderDecoder::CEAttnEncoderDecoder(a1 + 3);
  return a1;
}

void sub_1B1AA9BA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEAttnEncoderDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F3A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEAttnEncoderDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F3A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEAttnEncoderDecoder>::__on_zero_shared(uint64_t a1)
{
}

void std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,int ()(int)>::~__func()
{
}

void *std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,int ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F0A1CED8;
  return result;
}

void std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,int ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A1CED8;
}

uint64_t std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,int ()(int)>::operator()(uint64_t a1, _DWORD *a2)
{
  return (*a2 - 1);
}

uint64_t std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,int ()(int)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *std::__function::__value_func<int ()(int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,int ()(int)>::~__func()
{
}

void *std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,int ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F0A1CF30;
  return result;
}

void std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,int ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A1CF30;
}

uint64_t std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,int ()(int)>::operator()(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

uint64_t std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,int ()(int)>::target_type()
{
}

void *std::__function::__value_func<int ()(int)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B1AAA108(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2>,int ()(int)>::~__func()
{
}

void *std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2>,int ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F0A1CF88;
  return result;
}

void std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2>,int ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A1CF88;
}

uint64_t std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2>,int ()(int)>::operator()(uint64_t a1, _DWORD *a2)
{
  return (*a2 - 1);
}

uint64_t std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2>,int ()(int)>::target_type()
{
}

void std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3>,int ()(int)>::~__func()
{
}

void *std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3>,int ()(int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F0A1CFE0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3>,int ()(int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A1CFE0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3>,int ()(int)>::operator()(uint64_t a1, int *a2)
{
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 8) + 96) + 4 * *a2);
}

uint64_t std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3>,int ()(int)>::target_type()
{
}

void std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      size_t v6 = v4 - 16;
      uint64_t v7 = v4 - 16;
      uint64_t v8 = v4 - 16;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 16;
        (*v9)(v7);
        v6 -= 16;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void fst::ShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>((uint64_t)v1, a1);
}

void sub_1B1AAA4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  fst::AutoQueue<int>::~AutoQueue(&a23);
  a13 = v23 - 104;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

uint64_t fst::ConvertNbestToVector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4 != *a2)
  {
    uint64_t v6 = v4 - 16;
    uint64_t v7 = (void (***)(void))(v4 - 16);
    uint64_t v8 = (void (***)(void))(v4 - 16);
    do
    {
      uint64_t v9 = *v8;
      v8 -= 2;
      (*v9)(v7);
      v6 -= 16;
      BOOL v10 = v7 == (void (***)(void))v5;
      uint64_t v7 = v8;
    }
    while (!v10);
  }
  a2[1] = v5;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result == -1) {
    return result;
  }
  uint64_t v12 = result;
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, result);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v36, a1, v12);
  LODWORD(v33[0]) = HIDWORD(v36);
  LODWORD(v42[0]) = v36;
  int v50 = 2139095040;
  float v49 = INFINITY;
  BOOL v14 = *(float *)&v36 != INFINITY || *(float *)v33 != v49 || v38 != __p;
  if (__p)
  {
    std::vector<unsigned int>::pointer v38 = __p;
    operator delete(__p);
  }
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::reserve(a2, v13 + v14);
  if (v14)
  {
    std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::resize(a2, ((a2[1] - *a2) >> 4) + 1);
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)(a2[1] - 16) + 200))();
    uint64_t v16 = a2[1];
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v45, a1, v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)(v16 - 16) + 184))(v16 - 16, v15, &v45);
    if (v46)
    {
      uint64_t v47 = v46;
      operator delete(v46);
    }
  }
  unint64_t v44 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v12, v42);
  while (1)
  {
    uint64_t result = v42[0];
    if (v42[0]) {
      break;
    }
    if (v44 >= v42[2]) {
      goto LABEL_51;
    }
LABEL_19:
    std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::resize(a2, ((a2[1] - *a2) >> 4) + 1);
    uint64_t v17 = a2[1];
    if (v42[0]) {
      uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v42[0] + 32))(v42[0]);
    }
    else {
      uint64_t v18 = v42[1] + 48 * v44;
    }
    uint64_t v20 = *(void *)(v17 - 16);
    uint64_t v19 = v17 - 16;
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(v20 + 200))(v19);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 176))(v19, v21);
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 200))(v19);
    uint64_t v23 = *(void **)(v18 + 8);
    uint64_t v36 = *(void *)v18;
    std::string __p = v23;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    std::vector<unsigned int>::pointer v38 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v38, *(const void **)(v18 + 16), *(void *)(v18 + 24), (uint64_t)(*(void *)(v18 + 24) - *(void *)(v18 + 16)) >> 2);
    int v41 = v22;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v19 + 208))(v19, v21, &v36);
    if (v38)
    {
      uint64_t v39 = v38;
      operator delete(v38);
    }
    uint64_t v24 = *(unsigned int *)(v18 + 40);
    while ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v24))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v36, a1, v24);
      int v50 = HIDWORD(v36);
      LODWORD(v33[0]) = v36;
      float v49 = INFINITY;
      int v48 = 2139095040;
      v25.n128_u32[0] = v36;
      if (*(float *)&v36 == INFINITY) {
        v25.n128_u32[0] = v48;
      }
      if (__p)
      {
        std::vector<unsigned int>::pointer v38 = __p;
        operator delete(__p);
      }
      uint64_t v35 = 0;
      (*(void (**)(uint64_t, uint64_t, void *, __n128))(*(void *)a1 + 136))(a1, v24, v33, v25);
      if (v33[0]) {
        uint64_t v26 = (*(uint64_t (**)(void))(*(void *)v33[0] + 32))(v33[0]);
      }
      else {
        uint64_t v26 = v33[1] + 48 * v35;
      }
      uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 200))(v19);
      uint64_t v28 = *(void **)(v26 + 8);
      uint64_t v36 = *(void *)v26;
      std::string __p = v28;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      std::vector<unsigned int>::pointer v38 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v38, *(const void **)(v26 + 16), *(void *)(v26 + 24), (uint64_t)(*(void *)(v26 + 24) - *(void *)(v26 + 16)) >> 2);
      int v41 = v27;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v19 + 208))(v19, v22, &v36);
      if (v38)
      {
        uint64_t v39 = v38;
        operator delete(v38);
      }
      uint64_t v24 = *(unsigned int *)(v26 + 40);
      if (v33[0])
      {
        (*(void (**)(void))(*(void *)v33[0] + 8))(v33[0]);
      }
      else if (v34)
      {
        --*v34;
      }
      uint64_t v22 = v27;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v36, a1, v24);
    int v50 = HIDWORD(v36);
    LODWORD(v33[0]) = v36;
    float v49 = INFINITY;
    int v48 = 2139095040;
    v29.n128_u32[0] = v36;
    if (*(float *)&v36 == INFINITY) {
      v29.n128_u32[0] = v48;
    }
    if (__p)
    {
      std::vector<unsigned int>::pointer v38 = __p;
      operator delete(__p);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, __n128))(*(void *)a1 + 32))(&v30, a1, v24, v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v19 + 184))(v19, v22, &v30);
    if (v31)
    {
      long long v32 = v31;
      operator delete(v31);
    }
    if (v42[0]) {
      (*(void (**)(void))(*(void *)v42[0] + 40))(v42[0]);
    }
    else {
      ++v44;
    }
  }
  if (!(*(unsigned int (**)(void))(*(void *)v42[0] + 24))(v42[0])) {
    goto LABEL_19;
  }
  uint64_t result = v42[0];
  if (v42[0]) {
    return (*(uint64_t (**)(void))(*(void *)v42[0] + 8))(v42[0]);
  }
LABEL_51:
  if (v43) {
    --*v43;
  }
  return result;
}

void sub_1B1AAACEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  __n128 v29 = *(void **)(v27 - 120);
  if (v29)
  {
    *(void *)(v27 - 112) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void fst::ShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 24);
  if (v7 == 1 && *(unsigned char *)(a4 + 35) == 0)
  {
    BOOL v10 = 0;
    std::string __p = 0;
    uint64_t v12 = 0;
    LODWORD(v13) = 0;
    if (fst::SingleShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a1, a3, (uint64_t *)a4, &v13, (char **)&v10))fst::SingleShortestPathBacktrace<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a1, a2, &v10, v13); {
    else
    }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 4, 4);
    if (v10)
    {
      std::string __p = v10;
      operator delete(v10);
    }
  }
  else if (v7)
  {
    if (*(unsigned char *)(a4 + 33)
      || (fst::ShortestDistance<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a1, a3, a4), a3[1] - *a3 != 32)|| fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Member(*a3))
    {
      fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::VectorFst();
    }
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192);
    v9(a2, 4, 4);
  }
}

void sub_1B1AAB330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,void *a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  long long v32 = *(void **)(v30 - 144);
  if (v32)
  {
    *(void *)(v30 - 136) = v32;
    operator delete(v32);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~ImplToFst((void *)(v30 - 120));
  _Unwind_Resume(a1);
}

void fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A40F38;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v3 = a1 + 48;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v4 & 0x4000000000) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) != -1)
  {
    if ((v4 & 0x800000000) == 0)
    {
      if ((v4 & 0x200000000) == 0)
      {
        uint64_t v6 = 0;
        v5[0] = v3;
        v5[1] = 0;
        v5[2] = 0;
        v5[3] = &v6;
        fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a2, (uint64_t)v5);
      }
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1B1AABC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  uint64_t v30 = *v28;
  if (*v28)
  {
    *(void *)(v26 + 56) = v30;
    operator delete(v30);
  }
  long long v31 = *v27;
  if (*v27)
  {
    *(void *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  *a5 = 1;
  *a6 = 1;
  uint64_t v10 = *(void *)(a3 + 8) - *(void *)a3;
  if (v10)
  {
    unint64_t v11 = v10 >> 2;
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    bzero(*(void **)a3, 4 * v11);
  }
  unsigned int v34 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v32);
  while (1)
  {
    uint64_t result = v32;
    if (!v32)
    {
      if ((int)v34 >= v33) {
        return result;
      }
LABEL_11:
      uint64_t v14 = v34;
      goto LABEL_12;
    }
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 16))(v32);
    uint64_t result = v32;
    if (v13) {
      break;
    }
    if (!v32) {
      goto LABEL_11;
    }
    uint64_t v14 = (*(uint64_t (**)(void))(*(void *)v32 + 24))();
LABEL_12:
    unint64_t v31 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v14, v29);
    uint64_t v16 = (int)v14;
    while (1)
    {
      if (!v29[0])
      {
        if (v31 >= v29[2]) {
          goto LABEL_48;
        }
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(void))(*(void *)v29[0] + 24))(v29[0])) {
        break;
      }
      if (v29[0])
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v29[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v17 = v29[1] + 48 * v31;
LABEL_19:
      uint64_t v18 = *(int *)(*a2 + 4 * v16);
      if (v18 == *(_DWORD *)(*a2 + 4 * *(int *)(v17 + 40)))
      {
        uint64_t v19 = *(_DWORD **)a3;
        if (!a4) {
          goto LABEL_24;
        }
        *(_OWORD *)std::string __p = 0u;
        long long v28 = 0u;
        char v20 = fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(a4, v17 + 8, (uint64_t)__p);
        if (__p[1])
        {
          *(void **)&long long v28 = __p[1];
          operator delete(__p[1]);
        }
        if (v20)
        {
LABEL_24:
          int v21 = 1;
          goto LABEL_33;
        }
        if ((v19[v18] | 2) == 2)
        {
          LODWORD(__p[0]) = 0;
          float v22 = *(float *)(v17 + 8);
          float v23 = *(float *)(v17 + 12);
          *(float *)std::string __p = v22;
          float v37 = v23;
          int v36 = 2139095040;
          float v35 = INFINITY;
          if (v22 == INFINITY && v37 == v35 && *(void *)(v17 + 24) == *(void *)(v17 + 16)
            || (*(float *)std::string __p = v22, v37 = v23, v36 = 0, v35 = 0.0, v22 == 0.0)
            && v37 == v35
            && *(void *)(v17 + 24) == *(void *)(v17 + 16))
          {
            int v21 = 2;
          }
          else
          {
            int v21 = 3;
          }
LABEL_33:
          v19[v18] = v21;
        }
        *a5 = 0;
      }
      LODWORD(__p[0]) = 0;
      v15.n128_u32[0] = *(_DWORD *)(v17 + 8);
      float v24 = *(float *)(v17 + 12);
      LODWORD(__p[0]) = v15.n128_u32[0];
      float v37 = v24;
      int v36 = 2139095040;
      float v35 = INFINITY;
      if (v15.n128_f32[0] != INFINITY || v37 != v35 || *(void *)(v17 + 24) != *(void *)(v17 + 16))
      {
        LODWORD(__p[0]) = v15.n128_u32[0];
        float v37 = v24;
        int v36 = 0;
        float v35 = 0.0;
        if (v15.n128_f32[0] != 0.0
          || (v15.n128_f32[0] = v37, v37 != v35)
          || *(void *)(v17 + 24) != *(void *)(v17 + 16))
        {
          *a6 = 0;
        }
      }
      if (v29[0]) {
        (*(void (**)(void, __n128))(*(void *)v29[0] + 40))(v29[0], v15);
      }
      else {
        ++v31;
      }
    }
    if (v29[0])
    {
      (*(void (**)(void))(*(void *)v29[0] + 8))();
      goto LABEL_50;
    }
LABEL_48:
    if (v30) {
      --*v30;
    }
LABEL_50:
    if (v32) {
      (*(void (**)(uint64_t))(*(void *)v32 + 32))(v32);
    }
    else {
      ++v34;
    }
  }
  if (v32) {
    return (*(uint64_t (**)(void))(*(void *)v32 + 8))();
  }
  return result;
}

void sub_1B1AAC27C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20) {
    (*(void (**)(uint64_t))(*(void *)a20 + 8))(a20);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::__append((void **)a1, a2 - v2);
  }
}

void fst::AutoQueue<int>::~AutoQueue(void *a1)
{
  fst::AutoQueue<int>::~AutoQueue(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::AutoQueue<int>::Head_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

uint64_t fst::AutoQueue<int>::Enqueue_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t fst::AutoQueue<int>::Dequeue_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t fst::AutoQueue<int>::Update_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

uint64_t fst::AutoQueue<int>::Empty_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t fst::AutoQueue<int>::Clear_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 56))();
}

void *fst::StateOrderQueue<int>::~StateOrderQueue(void *a1)
{
  *a1 = &unk_1F0A3C410;
  unint64_t v2 = (void *)a1[3];
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void fst::StateOrderQueue<int>::~StateOrderQueue(void *a1)
{
  *a1 = &unk_1F0A3C410;
  uint64_t v1 = (void *)a1[3];
  if (v1) {
    operator delete(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::StateOrderQueue<int>::Head_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

BOOL fst::StateOrderQueue<int>::Empty_(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) > *(_DWORD *)(a1 + 20);
}

void fst::StateOrderQueue<int>::Enqueue(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  int v4 = *(_DWORD *)(a1 + 20);
  if (v3 > v4)
  {
    *(_DWORD *)(a1 + 20) = a2;
LABEL_6:
    *(_DWORD *)(a1 + 16) = a2;
    goto LABEL_7;
  }
  if (v4 < a2)
  {
    *(_DWORD *)(a1 + 20) = a2;
    goto LABEL_7;
  }
  if (v3 > a2) {
    goto LABEL_6;
  }
LABEL_7:
  uint64_t v5 = (void *)(a1 + 24);
  unint64_t v6 = a2;
  while (*(void *)(a1 + 32) <= v6)
  {
    char v7 = 0;
    std::vector<BOOL>::push_back(a1 + 24, &v7);
  }
  *(void *)(*v5 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v6;
}

uint64_t fst::StateOrderQueue<int>::Dequeue(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  int v2 = *(_DWORD *)(result + 20);
  unint64_t v3 = *(int *)(result + 16);
  *(void *)(v1 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v3);
  if ((int)v3 <= v2)
  {
    int v4 = v3 - 1;
    do
    {
      if ((*(void *)(v1 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3)) {
        break;
      }
      ++v3;
      *(_DWORD *)(result + 16) = v4 + 2;
      ++v4;
    }
    while (v2 != v4);
  }
  return result;
}

double fst::StateOrderQueue<int>::Clear(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20);
  unint64_t v2 = *(int *)(a1 + 16);
  if ((int)v2 <= v1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    int v4 = v1 - v2 + 1;
    do
    {
      *(void *)(v3 + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v2);
      ++v2;
      --v4;
    }
    while (v4);
  }
  double result = NAN;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  return result;
}

void fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A3A1C8;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  char v3 = 0;
  uint64_t v1 = a1 + 24;
  unint64_t v2 = &v3;
  fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>();
}

void sub_1B1AAC804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  float v22 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 56) = v22;
    operator delete(v22);
  }
  float v23 = *v20;
  if (*v20)
  {
    *(void *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>()
{
}

void sub_1B1AAD0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  unint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::size_type v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<int>::__append(this, __sz - v3, __x);
  }
}

void *fst::TopOrderQueue<int>::~TopOrderQueue(void *a1)
{
  *a1 = &unk_1F0A3A1C8;
  unint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  std::vector<int>::size_type v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void fst::TopOrderQueue<int>::~TopOrderQueue(void *a1)
{
  *a1 = &unk_1F0A3A1C8;
  unint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  std::vector<int>::size_type v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::TopOrderQueue<int>::Head_(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 48) + 4 * *(int *)(a1 + 16));
}

uint64_t fst::TopOrderQueue<int>::Enqueue_(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 16);
  int v3 = *(_DWORD *)(result + 20);
  uint64_t v4 = *(void *)(result + 24);
  int v5 = *(_DWORD *)(v4 + 4 * a2);
  if (v2 > v3)
  {
    *(_DWORD *)(result + 20) = v5;
LABEL_6:
    *(_DWORD *)(result + 16) = v5;
    goto LABEL_7;
  }
  if (v5 <= v3)
  {
    if (v5 < v2) {
      goto LABEL_6;
    }
  }
  else
  {
    *(_DWORD *)(result + 20) = v5;
  }
LABEL_7:
  *(_DWORD *)(*(void *)(result + 48) + 4 * *(int *)(v4 + 4 * a2)) = a2;
  return result;
}

uint64_t fst::TopOrderQueue<int>::Dequeue_(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  *(_DWORD *)(v1 + 4 * *(int *)(result + 16)) = -1;
  int v2 = *(_DWORD *)(result + 20);
  uint64_t v3 = *(int *)(result + 16);
  if ((int)v3 <= v2)
  {
    int v4 = v3 - 1;
    int v5 = (int *)(v1 + 4 * v3);
    do
    {
      int v6 = *v5++;
      if (v6 != -1) {
        break;
      }
      *(_DWORD *)(result + 16) = v4 + 2;
      ++v4;
    }
    while (v2 != v4);
  }
  return result;
}

BOOL fst::TopOrderQueue<int>::Empty_(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) > *(_DWORD *)(a1 + 20);
}

double fst::TopOrderQueue<int>::Clear_(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 16);
  if ((int)v1 <= *(_DWORD *)(a1 + 20))
  {
    uint64_t v2 = *(void *)(a1 + 48);
    do
      *(_DWORD *)(v2 + 4 * v1) = -1;
    while (v1++ < *(int *)(a1 + 20));
  }
  double result = NAN;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  return result;
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1B1AAD3F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit(char ***a1)
{
  if (*(unsigned char *)a1[1])
  {
    (*a1)[1] = **a1;
    uint64_t v2 = a1[2];
    uint64_t v3 = (char *)v2[1];
    if (v3 == (char *)*v2)
    {
      unint64_t v17 = (uint64_t)&v3[-*v2] >> 2;
      if (!v17) {
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v4 = 0;
      do
      {
        int v5 = *a1;
        int v6 = (*a1)[1];
        unint64_t v7 = (unint64_t)(*a1)[2];
        if ((unint64_t)v6 >= v7)
        {
          uint64_t v9 = *v5;
          uint64_t v10 = (v6 - *v5) >> 2;
          unint64_t v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v12 = v7 - (void)v9;
          if (v12 >> 1 > v11) {
            unint64_t v11 = v12 >> 1;
          }
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v11;
          }
          if (v13)
          {
            uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(*a1 + 2), v13);
            uint64_t v9 = *v5;
            int v6 = v5[1];
          }
          else
          {
            uint64_t v14 = 0;
          }
          uint64_t v15 = &v14[4 * v10];
          *(_DWORD *)uint64_t v15 = -1;
          uint64_t v8 = v15 + 4;
          while (v6 != v9)
          {
            int v16 = *((_DWORD *)v6 - 1);
            v6 -= 4;
            *((_DWORD *)v15 - 1) = v16;
            v15 -= 4;
          }
          *int v5 = v15;
          v5[1] = v8;
          v5[2] = &v14[4 * v13];
          if (v9) {
            operator delete(v9);
          }
        }
        else
        {
          *(_DWORD *)int v6 = -1;
          uint64_t v8 = v6 + 4;
        }
        v5[1] = v8;
        ++v4;
        uint64_t v2 = a1[2];
        uint64_t v3 = (char *)*v2;
        unint64_t v17 = (uint64_t)(v2[1] - *v2) >> 2;
      }
      while (v17 > v4);
      if (!v17)
      {
LABEL_28:
        float v22 = (char *)*v2;
        if (*v2)
        {
          v2[1] = v22;
          operator delete(v22);
        }
        JUMPOUT(0x1B3EA8670);
      }
    }
    uint64_t v18 = 0;
    uint64_t v19 = **a1;
    uint64_t v20 = &v3[4 * v17 - 4];
    do
    {
      uint64_t v21 = *(int *)v20;
      v20 -= 4;
      *(_DWORD *)&v19[4 * v21] = v18++;
    }
    while (v17 != v18);
  }
  else
  {
    uint64_t v2 = a1[2];
  }
  if (v2) {
    goto LABEL_28;
  }
}

void fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(_DWORD **)(v3 + 8);
  unint64_t v5 = *(void *)(v3 + 16);
  if ((unint64_t)v4 >= v5)
  {
    unint64_t v7 = *(_DWORD **)v3;
    uint64_t v8 = ((uint64_t)v4 - *(void *)v3) >> 2;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - (void)v7;
    if (v10 >> 1 > v9) {
      unint64_t v9 = v10 >> 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v3 + 16, v11);
      unint64_t v7 = *(_DWORD **)v3;
      unint64_t v4 = *(_DWORD **)(v3 + 8);
    }
    else
    {
      uint64_t v12 = 0;
    }
    unint64_t v13 = &v12[4 * v8];
    uint64_t v14 = &v12[4 * v11];
    *(_DWORD *)unint64_t v13 = a2;
    int v6 = v13 + 4;
    while (v4 != v7)
    {
      int v15 = *--v4;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }
    *(void *)uint64_t v3 = v13;
    *(void *)(v3 + 8) = v6;
    *(void *)(v3 + 16) = v14;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *unint64_t v4 = a2;
    int v6 = v4 + 1;
  }
  *(void *)(v3 + 8) = v6;
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  unint64_t v7 = value;
  unint64_t v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      std::vector<int>::size_type v16 = 4 * __n;
      unint64_t v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      unint64_t v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (char *)this->__begin_;
    unint64_t v11 = __n + (v10 >> 2);
    if (v11 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v14);
    }
    else {
      int v15 = 0;
    }
    uint64_t v18 = (int *)&v15[4 * v12];
    uint64_t v19 = &v18[__n];
    std::vector<int>::size_type v20 = 4 * __n;
    uint64_t v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    float v22 = (int *)&v15[4 * v14];
    std::vector<int>::pointer begin = this->__begin_;
    for (std::vector<int>::pointer i = this->__end_; i != begin; --i)
    {
      int v25 = *(i - 1);
      *--uint64_t v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

uint64_t fst::LifoQueue<int>::~LifoQueue(uint64_t a1)
{
  return a1;
}

void fst::LifoQueue<int>::~LifoQueue(uint64_t a1)
{
  std::deque<int>::~deque[abi:ne180100]((void *)(a1 + 16));
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::LifoQueue<int>::Head_(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 24) + ((*(void *)(a1 + 48) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * (*(void *)(a1 + 48) & 0x3FFLL));
}

void fst::LifoQueue<int>::Enqueue_(uint64_t a1, int a2)
{
  int v2 = a2;
  std::deque<int>::push_front(a1 + 16, &v2);
}

uint64_t fst::LifoQueue<int>::Dequeue_(int64x2_t *a1)
{
  a1[3] = vaddq_s64(a1[3], (int64x2_t)xmmword_1B255E5F0);
  return std::deque<int>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1[1].i64, 1);
}

BOOL fst::LifoQueue<int>::Empty_(uint64_t a1)
{
  return *(void *)(a1 + 56) == 0;
}

uint64_t std::deque<int>::~deque[abi:ne180100](void *a1)
{
  int v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      int v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

void std::deque<int>::push_front(uint64_t a1, _DWORD *a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    std::deque<int>::__add_front_capacity((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 >> 10));
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v6 + 4 * (v4 & 0x3FF);
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4096;
  }
  *(_DWORD *)(v7 - 4) = *a2;
  uint64_t v8 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v4 - 1;
  *(void *)(a1 + 40) = v8;
}

void std::deque<int>::__add_front_capacity(void **a1)
{
  int v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = v3 - v2;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = ((v3 - v2) << 7) - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x400)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    uint64_t v8 = a1[3];
    unint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unint64_t v46 = a1 + 3;
      std::string __p = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v7, v11);
      unint64_t v43 = (char *)__p;
      unint64_t v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      int v41 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      unint64_t v14 = v44;
      if (v13 == a1[2])
      {
        int v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              float v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v46, v23);
              uint64_t v26 = v43;
              unint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                unint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                __n128 v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)__n128 v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              unint64_t v31 = __p;
              std::string __p = v24;
              unint64_t v43 = &v24[8 * (v23 >> 2)];
              unint64_t v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                unint64_t v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              std::vector<int>::size_type v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                unint64_t v14 = v43;
              }
              float v22 = &v14[-8 * (v19 >> 1)];
              unint64_t v14 = &v20[v21];
              unint64_t v43 = v22;
              unint64_t v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)unint64_t v14 = v32;
          unint64_t v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        int v33 = (char *)a1[1];
      }
      int v36 = *a1;
      float v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::string __p = v36;
      unint64_t v43 = v33;
      std::vector<unsigned int>::pointer v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      unint64_t v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 512;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 1024;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        unint64_t v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        std::string __p = operator new(0x1000uLL);
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &__p);
        unsigned int v34 = a1[2];
        std::string __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        std::string __p = operator new(0x1000uLL);
      }
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 512;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 1024;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 1024;
    std::string __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &__p);
  }
}

void sub_1B1AADCD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<int>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x400) {
    a2 = 1;
  }
  if (v2 < 0x800) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 1024;
  }
  return v4 ^ 1u;
}

void fst::LifoQueue<int>::Clear(void *a1)
{
  unint64_t v2 = (void **)a1[3];
  uint64_t v3 = a1[4];
  a1[7] = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[4];
      unint64_t v2 = (void **)(a1[3] + 8);
      a1[3] = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v4 >> 3 != 2) {
      return;
    }
    uint64_t v6 = 1024;
  }
  a1[6] = v6;
}

void *std::vector<fst::QueueType>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1B1AADE50(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v3 = *(float *)a2;
  float v4 = *(float *)a2 + *(float *)(a2 + 4);
  float v5 = *(float *)a3;
  float v6 = *(float *)a3 + *(float *)(a3 + 4);
  if (v4 < v6) {
    return 1;
  }
  if (v4 <= v6)
  {
    if (v3 < v5) {
      return 1;
    }
    if (v3 <= v5)
    {
      uint64_t v8 = *(int **)(a2 + 8);
      unint64_t v9 = *(void *)(a2 + 16) - (void)v8;
      uint64_t v10 = *(int **)(a3 + 8);
      uint64_t v11 = (*(void *)(a3 + 16) - (void)v10) >> 2;
      if ((int)(v9 >> 2) <= (int)v11)
      {
        if ((int)(v9 >> 2) < (int)v11) {
          return 1;
        }
        if ((int)(v9 >> 2) >= 1)
        {
          uint64_t v12 = (v9 >> 2);
          while (1)
          {
            int v14 = *v8++;
            int v13 = v14;
            int v15 = *v10++;
            BOOL v16 = v13 <= v15;
            if (v13 < v15) {
              break;
            }
            if (!v16) {
              return 1;
            }
            uint64_t result = 0;
            if (!--v12) {
              return result;
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A3A1C8;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 24), *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  std::vector<int>::vector((std::vector<int> *)(a1 + 48), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2, &fst::kNoStateId);
  return a1;
}

void sub_1B1AADF98(_Unwind_Exception *exception_object)
{
  float v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~ShortestFirstQueue(void *a1)
{
  *a1 = &unk_1F0A3ECC0;
  unint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~Heap(a1 + 2);
  return a1;
}

void fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~ShortestFirstQueue(void *a1)
{
  *a1 = &unk_1F0A3ECC0;
  unint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~Heap(a1 + 2);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Head_(uint64_t a1)
{
  return **(unsigned int **)(a1 + 80);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Enqueue_(uint64_t a1, int a2)
{
  int v3 = a2;
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Insert(a1 + 16, &v3);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Dequeue_(uint64_t a1)
{
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Pop(a1 + 16);
}

BOOL fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Empty_(uint64_t a1)
{
  return *(_DWORD *)(a1 + 104) == 0;
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Clear_(uint64_t result)
{
  *(_DWORD *)(result + 104) = 0;
  return result;
}

void *fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~Heap(void *a1)
{
  unint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  float v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Insert(uint64_t a1, int *a2)
{
  uint64_t v5 = a1 + 64;
  float v4 = *(int **)(a1 + 64);
  unint64_t v6 = *(int *)(v5 + 24);
  uint64_t v7 = *(int **)(v5 + 8);
  unint64_t v8 = v7 - v4;
  if (v8 > v6)
  {
    v4[v6] = *a2;
    *(_DWORD *)(*(void *)(a1 + 16) + 4 * *(int *)(*(void *)(a1 + 40) + 4 * *(int *)(a1 + 88))) = *(_DWORD *)(a1 + 88);
    goto LABEL_52;
  }
  unint64_t v9 = *(void *)(a1 + 80);
  if ((unint64_t)v7 >= v9)
  {
    if ((v8 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v9 - (void)v4;
    unint64_t v12 = (uint64_t)(v9 - (void)v4) >> 1;
    if (v12 <= v8 + 1) {
      unint64_t v12 = v8 + 1;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 80, v13);
      float v4 = *(int **)(a1 + 64);
      uint64_t v7 = *(int **)(a1 + 72);
    }
    else
    {
      int v14 = 0;
    }
    int v15 = (int *)&v14[4 * v8];
    BOOL v16 = &v14[4 * v13];
    *int v15 = *a2;
    uint64_t v10 = v15 + 1;
    while (v7 != v4)
    {
      int v17 = *--v7;
      *--int v15 = v17;
    }
    *(void *)(a1 + 64) = v15;
    *(void *)(a1 + 72) = v10;
    *(void *)(a1 + 80) = v16;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    int *v7 = *a2;
    uint64_t v10 = v7 + 1;
  }
  unint64_t v18 = *(void *)(a1 + 32);
  *(void *)(a1 + 72) = v10;
  uint64_t v19 = *(char **)(a1 + 24);
  if ((unint64_t)v19 >= v18)
  {
    int64_t v21 = *(char **)(a1 + 16);
    uint64_t v22 = (v19 - v21) >> 2;
    if ((unint64_t)(v22 + 1) >> 62) {
      goto LABEL_55;
    }
    unint64_t v23 = v18 - (void)v21;
    unint64_t v24 = (uint64_t)(v18 - (void)v21) >> 1;
    if (v24 <= v22 + 1) {
      unint64_t v24 = v22 + 1;
    }
    if (v23 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v24;
    }
    if (v25)
    {
      uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 32, v25);
      int64_t v21 = *(char **)(a1 + 16);
      uint64_t v19 = *(char **)(a1 + 24);
    }
    else
    {
      uint64_t v26 = 0;
    }
    uint64_t v27 = &v26[4 * v22];
    uint64_t v28 = &v26[4 * v25];
    *(_DWORD *)uint64_t v27 = *(_DWORD *)(a1 + 88);
    std::vector<int>::size_type v20 = v27 + 4;
    while (v19 != v21)
    {
      int v29 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *((_DWORD *)v27 - 1) = v29;
      v27 -= 4;
    }
    *(void *)(a1 + 16) = v27;
    *(void *)(a1 + 24) = v20;
    *(void *)(a1 + 32) = v28;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v19 = *(_DWORD *)(a1 + 88);
    std::vector<int>::size_type v20 = v19 + 4;
  }
  unint64_t v30 = *(void *)(a1 + 56);
  *(void *)(a1 + 24) = v20;
  unint64_t v31 = *(char **)(a1 + 48);
  if ((unint64_t)v31 >= v30)
  {
    int v33 = *(char **)(a1 + 40);
    uint64_t v34 = (v31 - v33) >> 2;
    if (!((unint64_t)(v34 + 1) >> 62))
    {
      unint64_t v35 = v30 - (void)v33;
      unint64_t v36 = (uint64_t)(v30 - (void)v33) >> 1;
      if (v36 <= v34 + 1) {
        unint64_t v36 = v34 + 1;
      }
      if (v35 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v36;
      }
      if (v37)
      {
        std::vector<unsigned int>::pointer v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v37);
        int v33 = *(char **)(a1 + 40);
        unint64_t v31 = *(char **)(a1 + 48);
      }
      else
      {
        std::vector<unsigned int>::pointer v38 = 0;
      }
      uint64_t v39 = &v38[4 * v34];
      uint64_t v40 = &v38[4 * v37];
      *(_DWORD *)uint64_t v39 = *(_DWORD *)(a1 + 88);
      uint64_t v32 = v39 + 4;
      while (v31 != v33)
      {
        int v41 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      *(void *)(a1 + 40) = v39;
      *(void *)(a1 + 48) = v32;
      *(void *)(a1 + 56) = v40;
      if (v33) {
        operator delete(v33);
      }
      goto LABEL_51;
    }
LABEL_55:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  *(_DWORD *)unint64_t v31 = *(_DWORD *)(a1 + 88);
  uint64_t v32 = v31 + 4;
LABEL_51:
  *(void *)(a1 + 48) = v32;
LABEL_52:
  int v42 = *(_DWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 88) = v42 + 1;
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Insert(a1, a2, v42);
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Insert(uint64_t a1, int *a2, int a3)
{
  unsigned int v3 = a3;
  if (a3 >= 1)
  {
    uint64_t v6 = *(void *)(a1 + 64);
    while (1)
    {
      unsigned int v7 = v3 - 1;
      uint64_t v8 = (v3 - 1) >> 1;
      if (fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(a1 + 8, **(void **)a1 + 32 * *(int *)(v6 + 4 * v8), **(void **)a1 + 32 * *a2))break; {
      uint64_t v9 = *(void *)(a1 + 40);
      }
      uint64_t v10 = *(int *)(v9 + 4 * v3);
      uint64_t v11 = *(int *)(v9 + 4 * v8);
      *(_DWORD *)(v9 + 4 * v3) = v11;
      uint64_t v12 = *(void *)(a1 + 16);
      *(_DWORD *)(v12 + 4 * v11) = v3;
      *(_DWORD *)(v9 + 4 * v8) = v10;
      *(_DWORD *)(v12 + 4 * v10) = v8;
      uint64_t v6 = *(void *)(a1 + 64);
      LODWORD(v10) = *(_DWORD *)(v6 + 4 * v3);
      *(_DWORD *)(v6 + 4 * v3) = *(_DWORD *)(v6 + 4 * v8);
      *(_DWORD *)(v6 + 4 * v8) = v10;
      unsigned int v3 = v7 >> 1;
      if (v7 <= 1) {
        return *(unsigned int *)(*(void *)(a1 + 40) + 4 * (int)v8);
      }
    }
  }
  LODWORD(v8) = v3;
  return *(unsigned int *)(*(void *)(a1 + 40) + 4 * (int)v8);
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Pop(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 64);
  uint64_t v2 = *v1;
  uint64_t v3 = *(int *)(a1 + 88) - 1;
  float v4 = *(int **)(a1 + 40);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[v3];
  *float v4 = v6;
  uint64_t v7 = *(void *)(a1 + 16);
  *(_DWORD *)(v7 + 4 * v6) = 0;
  v4[v3] = v5;
  *(_DWORD *)(v7 + 4 * v5) = v3;
  LODWORD(v4) = *v1;
  *uint64_t v1 = v1[v3];
  v1[v3] = v4;
  --*(_DWORD *)(a1 + 88);
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Heapify(a1, 0);
  return v2;
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Heapify(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result + 8;
  while (1)
  {
    uint64_t v5 = (2 * a2) | 1u;
    if ((int)v5 >= *(_DWORD *)(v3 + 88)
      || (uint64_t result = fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(v4, **(void **)v3 + 32 * *(int *)(*(void *)(v3 + 64) + 4 * (int)v5), **(void **)v3 + 32 * *(int *)(*(void *)(v3 + 64) + 4 * (int)a2)), (result & 1) == 0))
    {
      uint64_t v5 = a2;
    }
    unsigned int v6 = 2 * a2 + 2;
    if ((signed int)v6 < *(_DWORD *)(v3 + 88))
    {
      uint64_t result = fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(v4, **(void **)v3 + 32 * *(int *)(*(void *)(v3 + 64) + 4 * (int)v6), **(void **)v3 + 32 * *(int *)(*(void *)(v3 + 64) + 4 * (int)v5));
      if (result) {
        uint64_t v5 = v6;
      }
      else {
        uint64_t v5 = v5;
      }
    }
    if (v5 == a2) {
      break;
    }
    uint64_t v7 = *(void *)(v3 + 40);
    uint64_t v8 = *(int *)(v7 + 4 * (int)a2);
    uint64_t v9 = *(int *)(v7 + 4 * (int)v5);
    *(_DWORD *)(v7 + 4 * (int)a2) = v9;
    uint64_t v10 = *(void *)(v3 + 16);
    *(_DWORD *)(v10 + 4 * v9) = a2;
    *(_DWORD *)(v7 + 4 * (int)v5) = v8;
    *(_DWORD *)(v10 + 4 * v8) = v5;
    uint64_t v11 = *(void *)(v3 + 64);
    LODWORD(v8) = *(_DWORD *)(v11 + 4 * (int)a2);
    *(_DWORD *)(v11 + 4 * (int)a2) = *(_DWORD *)(v11 + 4 * (int)v5);
    *(_DWORD *)(v11 + 4 * (int)v5) = v8;
    a2 = v5;
  }
  return result;
}

uint64_t fst::FifoQueue<int>::~FifoQueue(uint64_t a1)
{
  return a1;
}

void fst::FifoQueue<int>::~FifoQueue(uint64_t a1)
{
  std::deque<int>::~deque[abi:ne180100]((void *)(a1 + 16));
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FifoQueue<int>::Head_(void *a1)
{
  unint64_t v1 = a1[7] + a1[6] - 1;
  return *(unsigned int *)(*(void *)(a1[3] + ((v1 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v1 & 0x3FF));
}

void fst::FifoQueue<int>::Enqueue_(uint64_t a1, int a2)
{
  int v2 = a2;
  std::deque<int>::push_front(a1 + 16, &v2);
}

uint64_t fst::FifoQueue<int>::Dequeue_(uint64_t a1)
{
  return std::deque<int>::__maybe_remove_back_spare[abi:ne180100]((void *)(a1 + 16), 1);
}

BOOL fst::FifoQueue<int>::Empty_(uint64_t a1)
{
  return *(void *)(a1 + 56) == 0;
}

uint64_t std::deque<int>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 7) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x400) {
    a2 = 1;
  }
  if (v5 < 0x800) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void *fst::SccQueue<int,fst::QueueBase<int>>::~SccQueue(void *a1)
{
  *a1 = &unk_1F0A40250;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return a1;
}

void fst::SccQueue<int,fst::QueueBase<int>>::~SccQueue(void *a1)
{
  *a1 = &unk_1F0A40250;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::SccQueue<int,fst::QueueBase<int>>::Update_(uint64_t a1, int a2)
{
  uint64_t result = *(void *)(**(void **)(a1 + 16) + 8 * *(int *)(**(void **)(a1 + 24) + 4 * a2));
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t fst::SccQueue<int,fst::QueueBase<int>>::Head(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 <= *(_DWORD *)(a1 + 36))
  {
    while (1)
    {
      uint64_t v4 = *(void *)(**(void **)(a1 + 16) + 8 * v2);
      if (v4)
      {
        char v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
        int v3 = *(_DWORD *)(a1 + 32);
        if (v5) {
          goto LABEL_10;
        }
        unint64_t v6 = v3;
        if (*(void *)(**(void **)(a1 + 16) + 8 * v3)) {
          goto LABEL_11;
        }
      }
      else
      {
        unint64_t v6 = v2;
        int v3 = v2;
      }
      uint64_t v7 = *(void *)(a1 + 40);
      if (v6 < (*(void *)(a1 + 48) - v7) >> 2 && *(_DWORD *)(v7 + 4 * v6) != -1) {
        goto LABEL_11;
      }
LABEL_10:
      int v2 = v3 + 1;
      *(_DWORD *)(a1 + 32) = v3 + 1;
      if (v3++ >= *(_DWORD *)(a1 + 36)) {
        goto LABEL_11;
      }
    }
  }
  int v3 = *(_DWORD *)(a1 + 32);
LABEL_11:
  uint64_t v9 = *(void *)(**(void **)(a1 + 16) + 8 * v3);
  if (!v9) {
    return *(unsigned int *)(*(void *)(a1 + 40) + 4 * v3);
  }
  uint64_t v10 = *(uint64_t (**)(void))(*(void *)v9 + 16);
  return v10();
}

char *fst::SccQueue<int,fst::QueueBase<int>>::Enqueue(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 32);
  int v5 = *(_DWORD *)(a1 + 36);
  uint64_t v6 = a2;
  uint64_t v7 = **(void **)(a1 + 24);
  int v8 = *(_DWORD *)(v7 + 4 * a2);
  if (v4 > v5)
  {
    *(_DWORD *)(a1 + 36) = v8;
LABEL_3:
    *(_DWORD *)(a1 + 32) = v8;
    goto LABEL_7;
  }
  if (v8 <= v5)
  {
    if (v8 < v4) {
      goto LABEL_3;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 36) = v8;
  }
LABEL_7:
  unint64_t v9 = *(int *)(v7 + 4 * a2);
  uint64_t v10 = *(void *)(**(void **)(a1 + 16) + 8 * v9);
  if (v10)
  {
    uint64_t v11 = *(uint64_t (**)(void))(*(void *)v10 + 24);
    return (char *)v11();
  }
  else
  {
    uint64_t result = *(char **)(a1 + 40);
    unint64_t v13 = *(char **)(a1 + 48);
    unint64_t v14 = (v13 - result) >> 2;
    if (v14 <= v9)
    {
      int v15 = (void *)(a1 + 56);
      do
      {
        if ((unint64_t)v13 >= *v15)
        {
          unint64_t v17 = v14 + 1;
          if ((v14 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v18 = *v15 - (void)result;
          if (v18 >> 1 > v17) {
            unint64_t v17 = v18 >> 1;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            std::vector<int>::size_type v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v19);
            uint64_t result = *(char **)(a1 + 40);
            unint64_t v13 = *(char **)(a1 + 48);
          }
          else
          {
            std::vector<int>::size_type v20 = 0;
          }
          int64_t v21 = &v20[4 * v14];
          *(_DWORD *)int64_t v21 = -1;
          BOOL v16 = v21 + 4;
          while (v13 != result)
          {
            int v22 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *((_DWORD *)v21 - 1) = v22;
            v21 -= 4;
          }
          *(void *)(a1 + 40) = v21;
          *(void *)(a1 + 48) = v16;
          *(void *)(a1 + 56) = &v20[4 * v19];
          if (result)
          {
            operator delete(result);
            uint64_t result = *(char **)(a1 + 40);
          }
          else
          {
            uint64_t result = v21;
          }
        }
        else
        {
          *(_DWORD *)unint64_t v13 = -1;
          BOOL v16 = v13 + 4;
        }
        *(void *)(a1 + 48) = v16;
        unint64_t v14 = (v16 - result) >> 2;
        unint64_t v9 = *(int *)(**(void **)(a1 + 24) + 4 * v6);
        unint64_t v13 = v16;
      }
      while (v14 <= v9);
    }
    *(_DWORD *)&result[4 * v9] = a2;
  }
  return result;
}

uint64_t fst::SccQueue<int,fst::QueueBase<int>>::Dequeue(uint64_t a1)
{
  unint64_t v2 = *(int *)(a1 + 32);
  uint64_t result = *(void *)(**(void **)(a1 + 16) + 8 * v2);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  uint64_t v5 = a1 + 40;
  uint64_t v4 = *(void *)(a1 + 40);
  if (v2 < (*(void *)(v5 + 8) - v4) >> 2) {
    *(_DWORD *)(v4 + 4 * v2) = -1;
  }
  return result;
}

uint64_t fst::SccQueue<int,fst::QueueBase<int>>::Empty(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 36);
  unint64_t v2 = *(int *)(a1 + 32);
  if ((int)v2 < v1) {
    return 0;
  }
  if ((int)v2 > v1) {
    return 1;
  }
  uint64_t v4 = *(void *)(**(void **)(a1 + 16) + 8 * v2);
  if (v4) {
    return (*(uint64_t (**)(void))(*(void *)v4 + 48))(*(void *)(**(void **)(a1 + 16) + 8 * v2));
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v2 >= (*(void *)(a1 + 48) - v5) >> 2) {
    return 1;
  }
  return *(_DWORD *)(v5 + 4 * v2) == -1;
}

double fst::SccQueue<int,fst::QueueBase<int>>::Clear(uint64_t a1)
{
  unint64_t v2 = *(int *)(a1 + 32);
  if ((int)v2 <= *(_DWORD *)(a1 + 36))
  {
    do
    {
      uint64_t v3 = *(void *)(**(void **)(a1 + 16) + 8 * v2);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v3 + 56))(v3);
      }
      else
      {
        uint64_t v4 = *(void *)(a1 + 40);
        if (v2 < (*(void *)(a1 + 48) - v4) >> 2) {
          *(_DWORD *)(v4 + 4 * v2) = -1;
        }
      }
    }
    while ((uint64_t)v2++ < *(int *)(a1 + 36));
  }
  double result = NAN;
  *(void *)(a1 + 32) = 0xFFFFFFFF00000000;
  return result;
}

uint64_t fst::SingleShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4, char **a5)
{
  a5[1] = *a5;
  *a4 = -1;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1) == -1) {
    return 1;
  }
  memset(v160, 0, sizeof(v160));
  uint64_t v10 = *a3;
  uint64_t v11 = *((unsigned int *)a3 + 3);
  if (v11 == -1) {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  int32x2_t v156 = vdup_n_s32(0x7F800000u);
  v158 = 0;
  uint64_t v159 = 0;
  v157 = 0;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a2);
  (*(void (**)(void))(**(void **)(v10 + 16) + 56))(*(void *)(v10 + 16));
  if (a3[3] != 1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    int v15 = fst::LogMessage::LogMessage((fst *)&v152, (uint64_t)__p);
    BOOL v16 = (void *)fst::cerr(v15);
    unint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"SingleShortestPath: for nshortest > 1, use ShortestPath", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" instead", 8);
LABEL_16:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v152);
    if (SBYTE7(v146) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_18;
  }
  LODWORD(__p[0]) = 0;
  LODWORD(__p[0]) = *((_DWORD *)a3 + 10);
  v152.i32[0] = 0;
  v152.i32[0] = *((_DWORD *)a3 + 11);
  v148.i32[0] = 2139095040;
  v141.i32[0] = 2139095040;
  if (*(float *)__p != INFINITY || v152.f32[0] != v141.f32[0] || a3[7] != a3[6] || *((_DWORD *)a3 + 18) != -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v12 = fst::LogMessage::LogMessage((fst *)&v152, (uint64_t)__p);
    unint64_t v13 = (void *)fst::cerr(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"SingleShortestPath: weight and state thresholds not applicable", 62);
    goto LABEL_16;
  }
  uint64_t v138 = a1;
  uint64_t v139 = v10;
  v137 = a4;
  unint64_t v19 = a2[1];
  if ((int)v11 > (unint64_t)((uint64_t)(v19 - *a2) >> 5))
  {
    std::vector<int>::size_type v20 = (void *)vdup_n_s32(0x7F800000u);
    do
    {
      __p[0] = v20;
      long long v146 = 0uLL;
      __p[1] = 0;
      if (v19 >= a2[2])
      {
        uint64_t v21 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(a2, (uint64_t)__p);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)a2, (uint64_t)__p);
        uint64_t v21 = v19 + 32;
      }
      a2[1] = v21;
      if (__p[1])
      {
        *(void **)&long long v146 = __p[1];
        operator delete(__p[1]);
      }
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)v160, __p);
      unint64_t v23 = a5[1];
      unint64_t v22 = (unint64_t)a5[2];
      if ((unint64_t)v23 >= v22)
      {
        unint64_t v25 = *a5;
        uint64_t v26 = (v23 - *a5) >> 4;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v28 = v22 - (void)v25;
        if (v28 >> 3 > v27) {
          unint64_t v27 = v28 >> 3;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          unint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v29);
          unint64_t v25 = *a5;
          unint64_t v23 = a5[1];
        }
        else
        {
          unint64_t v30 = 0;
        }
        unint64_t v31 = &v30[16 * v26];
        *(_DWORD *)unint64_t v31 = -1;
        *((void *)v31 + 1) = -1;
        uint64_t v32 = v31;
        if (v23 != v25)
        {
          do
          {
            *((_OWORD *)v32 - 1) = *((_OWORD *)v23 - 1);
            v32 -= 16;
            v23 -= 16;
          }
          while (v23 != v25);
          unint64_t v25 = *a5;
        }
        unint64_t v24 = v31 + 16;
        *a5 = v32;
        a5[1] = v31 + 16;
        a5[2] = &v30[16 * v29];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v23 = -1;
        *((void *)v23 + 1) = -1;
        unint64_t v24 = v23 + 16;
      }
      a5[1] = v24;
      unint64_t v19 = a2[1];
    }
    while ((int)v11 > (unint64_t)((uint64_t)(v19 - *a2) >> 5));
  }
  *(_OWORD *)std::string __p = 0u;
  long long v146 = 0u;
  if (v19 >= a2[2])
  {
    uint64_t v33 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(a2, (uint64_t)__p);
  }
  else
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)a2, (uint64_t)__p);
    uint64_t v33 = v19 + 32;
  }
  a2[1] = v33;
  if (__p[1])
  {
    *(void **)&long long v146 = __p[1];
    operator delete(__p[1]);
  }
  uint64_t v35 = (uint64_t)(a5 + 2);
  unint64_t v34 = (unint64_t)a5[2];
  unint64_t v36 = a5[1];
  if ((unint64_t)v36 >= v34)
  {
    std::vector<unsigned int>::pointer v38 = *a5;
    uint64_t v39 = (v36 - *a5) >> 4;
    unint64_t v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v41 = v34 - (void)v38;
    if (v41 >> 3 > v40) {
      unint64_t v40 = v41 >> 3;
    }
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v42 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v40;
    }
    if (v42)
    {
      unint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v42);
      std::vector<unsigned int>::pointer v38 = *a5;
      unint64_t v36 = a5[1];
    }
    else
    {
      unint64_t v43 = 0;
    }
    unint64_t v44 = &v43[16 * v39];
    uint64_t v45 = &v43[16 * v42];
    *(_DWORD *)unint64_t v44 = -1;
    *((void *)v44 + 1) = -1;
    unint64_t v37 = v44 + 16;
    if (v36 != v38)
    {
      do
      {
        *((_OWORD *)v44 - 1) = *((_OWORD *)v36 - 1);
        v44 -= 16;
        v36 -= 16;
      }
      while (v36 != v38);
      std::vector<unsigned int>::pointer v38 = *a5;
    }
    *a5 = v44;
    a5[1] = v37;
    a5[2] = v45;
    if (v38) {
      operator delete(v38);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v36 = -1;
    *((void *)v36 + 1) = -1;
    unint64_t v37 = v36 + 16;
  }
  a5[1] = v37;
  (*(void (**)(void, uint64_t))(**(void **)(v10 + 16) + 24))(*(void *)(v10 + 16), v11);
  LOBYTE(__p[0]) = 1;
  std::vector<BOOL>::push_back((uint64_t)v160, __p);
  int32x2_t v46 = vdup_n_s32(0x7F800000u);
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(v139 + 16) + 48))(*(void *)(v139 + 16))) {
      goto LABEL_244;
    }
    uint64_t v140 = (*(uint64_t (**)(void))(**(void **)(v139 + 16) + 16))(*(void *)(v139 + 16));
    (*(void (**)(void))(**(void **)(v139 + 16) + 32))(*(void *)(v139 + 16));
    *(void *)((char *)v160[0] + (((unint64_t)(int)v140 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v140);
    uint64_t v47 = *a2 + 32 * (int)v140;
    float32x2_t v152 = *(float32x2_t *)v47;
    v154 = 0;
    uint64_t v155 = 0;
    v153 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v153, *(const void **)(v47 + 8), *(void *)(v47 + 16), (uint64_t)(*(void *)(v47 + 16) - *(void *)(v47 + 8)) >> 2);
    (*(void (**)(void **__return_ptr))(*(void *)v138 + 32))(__p);
    v141.i32[0] = HIDWORD(__p[0]);
    v148.i32[0] = (__int32)__p[0];
    float v164 = INFINITY;
    float v163 = INFINITY;
    v48.n128_u32[0] = (unsigned __int32)__p[0];
    if (*(float *)__p != INFINITY)
    {
      BOOL v49 = 1;
      int v50 = __p[1];
      if (!__p[1]) {
        goto LABEL_76;
      }
LABEL_75:
      *(void *)&long long v146 = v50;
      operator delete(v50);
      goto LABEL_76;
    }
    v48.n128_u32[0] = v141.i32[0];
    int v50 = __p[1];
    if (v141.f32[0] == v163)
    {
      BOOL v49 = (void *)v146 != __p[1];
      if (__p[1]) {
        goto LABEL_75;
      }
    }
    else
    {
      BOOL v49 = 1;
      if (__p[1]) {
        goto LABEL_75;
      }
    }
LABEL_76:
    if (v49)
    {
      (*(void (**)(float32x2_t *__return_ptr, __n128))(*(void *)v138 + 32))(&v148, v48);
      fst::Times<fst::LatticeWeightTpl<float>,int>(&v152, &v148, (int32x2_t *)__p);
      if (__s2)
      {
        v150 = __s2;
        operator delete(__s2);
      }
      if ((float)(*(float *)v156.i32 + *(float *)&v156.i32[1]) < (float)(*(float *)__p + *((float *)__p + 1))) {
        goto LABEL_80;
      }
      if ((float)(*(float *)v156.i32 + *(float *)&v156.i32[1]) <= (float)(*(float *)__p + *((float *)__p + 1)))
      {
        if (*(float *)v156.i32 < *(float *)__p)
        {
LABEL_80:
          unsigned int v51 = &v156;
          goto LABEL_86;
        }
        if (*(float *)v156.i32 <= *(float *)__p)
        {
          unint64_t v56 = v157;
          unint64_t v57 = (unint64_t)((char *)v158 - (char *)v157) >> 2;
          unsigned int v58 = (int *)__p[1];
          unint64_t v59 = ((unint64_t)v146 - (unint64_t)__p[1]) >> 2;
          if ((int)v57 <= (int)v59)
          {
            unsigned int v51 = &v156;
            if ((int)v57 < 1 || (int)v57 < (int)v59)
            {
LABEL_86:
              __int32 v52 = v51->i32[1];
              v148.i32[0] = v51->i32[0];
              v148.i32[1] = v52;
              v150 = 0;
              uint64_t v151 = 0;
              __s2 = 0;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__s2, *(const void **)&v51[1], *(void *)&v51[2], (uint64_t)(*(void *)&v51[2] - *(void *)&v51[1]) >> 2);
              float v164 = *(float *)&v156.i32[1];
              v141.i32[0] = v156.i32[0];
              float v162 = v148.f32[1];
              float v163 = v148.f32[0];
              if (*(float *)v156.i32 == v148.f32[0])
              {
                long long v54 = __s2;
                BOOL v53 = v164 != v162
                   || (char *)v158 - (char *)v157 != v150 - (unsigned char *)__s2
                   || memcmp(v157, __s2, (char *)v158 - (char *)v157) != 0;
              }
              else
              {
                BOOL v53 = 1;
                long long v54 = __s2;
              }
              if (v54)
              {
                v150 = v54;
                operator delete(v54);
              }
              if (!v53)
              {
LABEL_117:
                BOOL v67 = fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Member((uint64_t)&v156);
                if (*((unsigned char *)a3 + 34)) {
                  int v68 = 5;
                }
                else {
                  int v68 = 0;
                }
                if (*((unsigned char *)a3 + 34)) {
                  BOOL v69 = 0;
                }
                else {
                  BOOL v69 = v67;
                }
                if (v67) {
                  int v70 = v68;
                }
                else {
                  int v70 = 1;
                }
                if (__p[1])
                {
                  *(void **)&long long v146 = __p[1];
                  operator delete(__p[1]);
                }
                if (!v69) {
                  goto LABEL_226;
                }
                goto LABEL_129;
              }
              if ((float)(*(float *)v156.i32 + *(float *)&v156.i32[1]) < (float)(*(float *)__p + *((float *)__p + 1))) {
                goto LABEL_96;
              }
              if ((float)(*(float *)v156.i32 + *(float *)&v156.i32[1]) <= (float)(*(float *)__p + *((float *)__p + 1)))
              {
                if (*(float *)v156.i32 < *(float *)__p)
                {
LABEL_96:
                  long long v55 = &v156;
LABEL_114:
                  __int32 v66 = v55->i32[1];
                  v148.i32[0] = v55->i32[0];
                  v148.i32[1] = v66;
                  v150 = 0;
                  uint64_t v151 = 0;
                  __s2 = 0;
                  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__s2, *(const void **)&v55[1], *(void *)&v55[2], (uint64_t)(*(void *)&v55[2] - *(void *)&v55[1]) >> 2);
                  int32x2_t v156 = (int32x2_t)v148;
                  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v157, (char *)__s2, (uint64_t)v150, (v150 - (unsigned char *)__s2) >> 2);
                  if (__s2)
                  {
                    v150 = __s2;
                    operator delete(__s2);
                  }
                  _DWORD *v137 = v140;
                  goto LABEL_117;
                }
                if (*(float *)v156.i32 <= *(float *)__p)
                {
                  uint64_t v127 = v157;
                  unint64_t v128 = (unint64_t)((char *)v158 - (char *)v157) >> 2;
                  v129 = (int *)__p[1];
                  unint64_t v130 = ((unint64_t)v146 - (unint64_t)__p[1]) >> 2;
                  if ((int)v128 <= (int)v130)
                  {
                    long long v55 = &v156;
                    if ((int)v128 < 1 || (int)v128 < (int)v130) {
                      goto LABEL_114;
                    }
                    uint64_t v131 = ((unint64_t)((char *)v158 - (char *)v157) >> 2) - 1;
                    while (1)
                    {
                      int v133 = *v127++;
                      int v132 = v133;
                      int v135 = *v129++;
                      int v134 = v135;
                      if (v132 < v135) {
                        break;
                      }
                      BOOL v136 = v132 > v134 || v131-- == 0;
                      long long v55 = &v156;
                      if (v136) {
                        goto LABEL_114;
                      }
                    }
                  }
                }
              }
              long long v55 = (int32x2_t *)__p;
              goto LABEL_114;
            }
            uint64_t v60 = ((unint64_t)((char *)v158 - (char *)v157) >> 2) - 1;
            while (1)
            {
              int v62 = *v56++;
              int v61 = v62;
              int v64 = *v58++;
              int v63 = v64;
              if (v61 < v64) {
                break;
              }
              BOOL v65 = v61 > v63 || v60-- == 0;
              unsigned int v51 = &v156;
              if (v65) {
                goto LABEL_86;
              }
            }
          }
        }
      }
      unsigned int v51 = (int32x2_t *)__p;
      goto LABEL_86;
    }
LABEL_129:
    unint64_t v147 = 0;
    (*(void (**)(uint64_t, uint64_t, void **, __n128))(*(void *)v138 + 136))(v138, v140, __p, v48);
    while (1)
    {
      if (!__p[0])
      {
        if (v147 >= (unint64_t)v146)
        {
LABEL_218:
          int v70 = 0;
          goto LABEL_222;
        }
LABEL_135:
        uint64_t v71 = (float32x2_t *)((char *)__p[1] + 48 * v147);
        goto LABEL_158;
      }
      if ((*(uint64_t (**)(void *))(*(void *)__p[0] + 24))(__p[0])) {
        goto LABEL_218;
      }
      if (!__p[0]) {
        goto LABEL_135;
      }
      uint64_t v71 = (float32x2_t *)(*(uint64_t (**)(void *))(*(void *)__p[0] + 32))(__p[0]);
LABEL_158:
      while (1)
      {
        uint64_t v85 = *a2;
        unint64_t v84 = a2[1];
        unint64_t v86 = v71[5].i32[0];
        if (v86 < (uint64_t)(v84 - *a2) >> 5) {
          break;
        }
        float32x2_t v148 = (float32x2_t)v46;
        v150 = 0;
        uint64_t v151 = 0;
        __s2 = 0;
        if (v84 >= a2[2])
        {
          uint64_t v72 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(a2, (uint64_t)&v148);
        }
        else
        {
          std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)a2, (uint64_t)&v148);
          uint64_t v72 = v84 + 32;
        }
        a2[1] = v72;
        if (__s2)
        {
          v150 = __s2;
          operator delete(__s2);
        }
        v148.i8[0] = 0;
        std::vector<BOOL>::push_back((uint64_t)v160, &v148);
        int v74 = a5[1];
        unint64_t v73 = (unint64_t)a5[2];
        if ((unint64_t)v74 >= v73)
        {
          int v76 = *a5;
          uint64_t v77 = (v74 - *a5) >> 4;
          unint64_t v78 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v79 = v73 - (void)v76;
          if (v79 >> 3 > v78) {
            unint64_t v78 = v79 >> 3;
          }
          if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v80 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v80 = v78;
          }
          if (v80)
          {
            float v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v35, v80);
            int v76 = *a5;
            int v74 = a5[1];
          }
          else
          {
            float v81 = 0;
          }
          v82 = &v81[16 * v77];
          *(_DWORD *)v82 = -1;
          *((void *)v82 + 1) = -1;
          v83 = v82;
          if (v74 != v76)
          {
            do
            {
              *((_OWORD *)v83 - 1) = *((_OWORD *)v74 - 1);
              v83 -= 16;
              v74 -= 16;
            }
            while (v74 != v76);
            int v76 = *a5;
          }
          uint64_t v75 = v82 + 16;
          *a5 = v83;
          a5[1] = v82 + 16;
          a5[2] = &v81[16 * v80];
          if (v76) {
            operator delete(v76);
          }
        }
        else
        {
          *(_DWORD *)int v74 = -1;
          *((void *)v74 + 1) = -1;
          uint64_t v75 = v74 + 16;
        }
        a5[1] = v75;
      }
      fst::Times<fst::LatticeWeightTpl<float>,int>(&v152, v71 + 1, (int32x2_t *)&v148);
      std::regex_traits<char>::char_class_type v87 = (float32x2_t *)(v85 + 32 * v86);
      float v88 = v87->f32[0];
      float v89 = v87->f32[0] + v87->f32[1];
      uint64_t v90 = v87;
      if (v89 >= (float)(v148.f32[0] + v148.f32[1]))
      {
        if (v89 > (float)(v148.f32[0] + v148.f32[1])) {
          goto LABEL_161;
        }
        uint64_t v90 = (float32x2_t *)(v85 + 32 * v86);
        if (v88 >= v148.f32[0])
        {
          if (v88 <= v148.f32[0])
          {
            std::string::size_type v100 = *(int **)(v85 + 32 * v86 + 8);
            unint64_t v101 = *(void *)(v85 + 32 * v86 + 16) - (void)v100;
            unint64_t v102 = v101 >> 2;
            v103 = (int *)__s2;
            unint64_t v104 = (unint64_t)(v150 - (unsigned char *)__s2) >> 2;
            if ((int)(v101 >> 2) <= (int)v104)
            {
              BOOL v105 = (int)v102 < 1 || (int)v102 < (int)v104;
              uint64_t v90 = (float32x2_t *)(v85 + 32 * v86);
              if (v105) {
                goto LABEL_163;
              }
              uint64_t v106 = (v101 >> 2) - 1;
              while (1)
              {
                int v108 = *v100++;
                int v107 = v108;
                int v110 = *v103++;
                int v109 = v110;
                if (v107 < v110) {
                  break;
                }
                if (v107 > v109 || v106-- == 0)
                {
                  uint64_t v90 = (float32x2_t *)(v85 + 32 * v86);
                  goto LABEL_163;
                }
              }
            }
          }
LABEL_161:
          uint64_t v90 = &v148;
        }
      }
LABEL_163:
      float32x2_t v141 = *v90;
      v143 = 0;
      uint64_t v144 = 0;
      v142 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v142, *(const void **)&v90[1], *(void *)&v90[2], (uint64_t)(*(void *)&v90[2] - *(void *)&v90[1]) >> 2);
      float v164 = 0.0;
      float v164 = v87->f32[0];
      float v163 = 0.0;
      float v163 = v87->f32[1];
      float v161 = v141.f32[1];
      float v162 = v141.f32[0];
      v91.n128_f32[0] = v164;
      if (v164 == v141.f32[0])
      {
        v91.n128_f32[0] = v163;
        unint64_t v93 = v142;
        BOOL v92 = v163 != v161
           || (unint64_t v94 = v85 + 32 * v86,
               v95 = *(const void **)(v94 + 8),
               size_t v96 = *(void *)(v94 + 16) - (void)v95,
               v96 != v143 - (unsigned char *)v142)
           || memcmp(v95, v142, v96) != 0;
      }
      else
      {
        BOOL v92 = 1;
        unint64_t v93 = v142;
      }
      if (v93)
      {
        v143 = v93;
        operator delete(v93);
      }
      if (v92) {
        break;
      }
LABEL_201:
      if (__s2)
      {
        v150 = __s2;
        operator delete(__s2);
      }
      uint64_t v35 = (uint64_t)(a5 + 2);
      if (__p[0]) {
        (*(void (**)(void *, __n128))(*(void *)__p[0] + 40))(__p[0], v91);
      }
      else {
        ++v147;
      }
    }
    float v97 = v87->f32[0];
    float v98 = v87->f32[0] + v87->f32[1];
    v99 = (float32x2_t *)(v85 + 32 * v86);
    if (v98 >= (float)(v148.f32[0] + v148.f32[1]))
    {
      if (v98 > (float)(v148.f32[0] + v148.f32[1])) {
        goto LABEL_174;
      }
      v99 = (float32x2_t *)(v85 + 32 * v86);
      if (v97 >= v148.f32[0])
      {
        if (v97 <= v148.f32[0])
        {
          BOOL v116 = *(int **)(v85 + 32 * v86 + 8);
          unint64_t v117 = *(void *)(v85 + 32 * v86 + 16) - (void)v116;
          unint64_t v118 = v117 >> 2;
          uint64_t v119 = (int *)__s2;
          unint64_t v120 = (unint64_t)(v150 - (unsigned char *)__s2) >> 2;
          if ((int)(v117 >> 2) <= (int)v120)
          {
            v99 = (float32x2_t *)(v85 + 32 * v86);
            if ((int)v118 < 1) {
              goto LABEL_190;
            }
            v99 = (float32x2_t *)(v85 + 32 * v86);
            if ((int)v118 < (int)v120) {
              goto LABEL_190;
            }
            uint64_t v121 = (v117 >> 2) - 1;
            while (1)
            {
              int v123 = *v116++;
              int v122 = v123;
              int v125 = *v119++;
              int v124 = v125;
              if (v122 < v125) {
                break;
              }
              if (v122 > v124 || v121-- == 0)
              {
                v99 = (float32x2_t *)(v85 + 32 * v86);
                goto LABEL_190;
              }
            }
          }
        }
LABEL_174:
        v99 = &v148;
      }
    }
LABEL_190:
    float32x2_t v141 = *v99;
    v143 = 0;
    uint64_t v144 = 0;
    v142 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v142, *(const void **)&v99[1], *(void *)&v99[2], (uint64_t)(*(void *)&v99[2] - *(void *)&v99[1]) >> 2);
    *std::regex_traits<char>::char_class_type v87 = v141;
    if (v87 != &v141) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v85 + 32 * v86 + 8), (char *)v142, (uint64_t)v143, (v143 - (unsigned char *)v142) >> 2);
    }
    if (v142)
    {
      v143 = v142;
      operator delete(v142);
    }
    if (fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Member(v85 + 32 * v86))
    {
      if (__p[0]) {
        uint64_t v112 = (*(uint64_t (**)(void *))(*(void *)__p[0] + 48))(__p[0]);
      }
      else {
        uint64_t v112 = v147;
      }
      unint64_t v113 = v71[5].i32[0];
      uint64_t v114 = (uint64_t)&(*a5)[16 * v113];
      *(_DWORD *)uint64_t v114 = v140;
      *(void *)(v114 + 8) = v112;
      uint64_t v115 = **(void **)(v139 + 16);
      if ((*(void *)((char *)v160[0] + ((v113 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v113))
      {
        (*(void (**)(void))(v115 + 40))();
      }
      else
      {
        (*(void (**)(void))(v115 + 24))();
        *(void *)((char *)v160[0] + (((unint64_t)v71[5].i32[0] >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v71[5].i32[0];
      }
      goto LABEL_201;
    }
    uint64_t v35 = (uint64_t)(a5 + 2);
    if (__s2)
    {
      v150 = __s2;
      operator delete(__s2);
    }
    int v70 = 1;
LABEL_222:
    if (__p[0])
    {
      (*(void (**)(void *))(*(void *)__p[0] + 8))(__p[0]);
    }
    else if (*((void *)&v146 + 1))
    {
      --**((_DWORD **)&v146 + 1);
    }
LABEL_226:
    if (v153)
    {
      v154 = v153;
      operator delete(v153);
    }
  }
  while (!v70);
  if (v70 != 5)
  {
LABEL_18:
    uint64_t v14 = 0;
    goto LABEL_19;
  }
LABEL_244:
  uint64_t v14 = 1;
LABEL_19:
  if (v157)
  {
    v158 = v157;
    operator delete(v157);
  }
  if (v160[0]) {
    operator delete(v160[0]);
  }
  return v14;
}

void sub_1B1AAFDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35)
{
  unint64_t v37 = *(void **)(v35 - 168);
  if (v37)
  {
    *(void *)(v35 - 160) = v37;
    operator delete(v37);
  }
  std::vector<unsigned int>::pointer v38 = *(void **)(v35 - 144);
  if (v38) {
    operator delete(v38);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SingleShortestPathBacktrace<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v8);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 288))(a2, v9);
  if (a4 != -1)
  {
    int v10 = -1;
    uint64_t v11 = a4;
    LODWORD(v12) = -1;
    while (1)
    {
      int v13 = v12;
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
      if (v10 == -1)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v27, a1, a4);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 184))(a2, v12, &v27);
        if (__p)
        {
          unint64_t v29 = __p;
          operator delete(__p);
        }
        goto LABEL_18;
      }
      uint64_t v26 = 0;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v11, v24);
      uint64_t v14 = *(void *)(*a3 + 16 * v10 + 8);
      if (!v24[0]) {
        break;
      }
      (*(void (**)(void, uint64_t))(*(void *)v24[0] + 64))(v24[0], v14);
      if (!v24[0])
      {
        uint64_t v14 = v26;
        goto LABEL_11;
      }
      uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v24[0] + 32))(v24[0]);
LABEL_12:
      v19[0] = *(void *)v15;
      v19[1] = *(void *)(v15 + 8);
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      std::vector<int>::size_type v20 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v20, *(const void **)(v15 + 16), *(void *)(v15 + 24), (uint64_t)(*(void *)(v15 + 24) - *(void *)(v15 + 16)) >> 2);
      int v23 = v13;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 208))(a2, v12, v19);
      if (v20)
      {
        uint64_t v21 = v20;
        operator delete(v20);
      }
      if (v24[0])
      {
        (*(void (**)(void))(*(void *)v24[0] + 8))(v24[0]);
      }
      else if (v25)
      {
        --*v25;
      }
LABEL_18:
      int v10 = v11;
      uint64_t v11 = *(unsigned int *)(*a3 + 16 * (int)v11);
      if (v11 == -1) {
        goto LABEL_21;
      }
    }
    uint64_t v26 = *(void *)(*a3 + 16 * v10 + 8);
LABEL_11:
    uint64_t v15 = v24[1] + 48 * v14;
    goto LABEL_12;
  }
  uint64_t v12 = 0xFFFFFFFFLL;
LABEL_21:
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v12);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 4, 0)) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 4, 4);
  }
  unint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  unint64_t v17 = fst::ShortestPathProperties(v16, 0);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 192))(a2, v17, 0x3FFFFFFF0007);
}

void sub_1B1AB0410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Type()
{
  {
    operator new();
  }
  return fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Type(void)::type;
}

void sub_1B1AB05A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  MEMORY[0x1B3EA8670](v21, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t fst::ShortestDistance<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v10[0] = a1;
  v10[1] = (uint64_t)a2;
  v10[2] = *(void *)a3;
  int v11 = *(_DWORD *)(a3 + 16);
  char v12 = *(unsigned char *)(a3 + 20);
  char v13 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  memset(v17, 0, 29);
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a2);
  fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::ShortestDistance(v10, *(_DWORD *)(a3 + 12));
  if (BYTE12(v17[1]))
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a2);
    int32x2_t v6 = vdup_n_s32(0x7FC00000u);
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    std::string __p = 0;
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::resize(a2, 1uLL, (uint64_t)&v6);
    if (__p)
    {
      uint64_t v8 = __p;
      operator delete(__p);
    }
  }
  return fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ShortestDistanceState((uint64_t)v10);
}

void sub_1B1AB06C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ShortestDistanceState((uint64_t)&a14);
  _Unwind_Resume(a1);
}

BOOL fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Member(uint64_t a1)
{
  BOOL result = fst::LatticeWeightTpl<float>::Member((float *)a1);
  if (result) {
    return *(float *)a1 != INFINITY || *(float *)(a1 + 4) != INFINITY || *(void *)(a1 + 8) == *(void *)(a1 + 16);
  }
  return result;
}

uint64_t fst::Reverse<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t *a2, char a3)
{
  (*(void (**)(uint64_t *))(*a2 + 224))(a2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 280))(a2, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 288))(a2, v7);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    int v8 = fst::CountStates<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a1);
    (*(void (**)(uint64_t *, void))(*a2 + 248))(a2, (v8 + 1));
  }
  unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v77 = 0;
  unsigned int v38 = v9;
  if (a3)
  {
LABEL_43:
    uint64_t v10 = (*(uint64_t (**)(uint64_t *))(*a2 + 200))(a2);
    int v21 = 1;
    goto LABEL_44;
  }
  LODWORD(v68) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v66);
  uint64_t v10 = 0xFFFFFFFFLL;
  while (1)
  {
    if (v66)
    {
      char v11 = (*(uint64_t (**)(uint64_t))(*(void *)v66 + 16))(v66);
      uint64_t v12 = v66;
      if (v11) {
        goto LABEL_30;
      }
      if (v66)
      {
        uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v66 + 24))(v66);
        goto LABEL_11;
      }
    }
    else if ((int)v68 >= (int)v67)
    {
      goto LABEL_32;
    }
    uint64_t v13 = v68;
LABEL_11:
    (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&p_p, a1, v13);
    LODWORD(v52) = HIDWORD(p_p);
    LODWORD(__p) = p_p;
    v49.i32[0] = 2139095040;
    LODWORD(v46) = 2139095040;
    v14.n128_u32[0] = p_p;
    if (*(float *)&p_p == INFINITY)
    {
      v14.n128_u32[0] = v52;
      long long v15 = v72;
      if (*(float *)&v52 == *(float *)&v46)
      {
        BOOL v16 = v73 == v72;
        if (!v72) {
          goto LABEL_15;
        }
LABEL_14:
        unint64_t v73 = v15;
        operator delete(v15);
        goto LABEL_15;
      }
      BOOL v16 = 0;
      if (v72) {
        goto LABEL_14;
      }
    }
    else
    {
      BOOL v16 = 0;
      long long v15 = v72;
      if (v72) {
        goto LABEL_14;
      }
    }
LABEL_15:
    int v17 = 2 * (v10 != -1);
    unsigned int v18 = v10 == -1 ? v13 : -1;
    if (v16)
    {
      int v17 = 4;
      uint64_t v10 = v10;
    }
    else
    {
      uint64_t v10 = v18;
    }
    if ((v17 | 4) != 4) {
      break;
    }
    if (v66) {
      (*(void (**)(uint64_t, __n128))(*(void *)v66 + 32))(v66, v14);
    }
    else {
      LODWORD(v68) = v68 + 1;
    }
  }
  uint64_t v12 = v66;
LABEL_30:
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
LABEL_32:
  if (v10 == -1) {
    goto LABEL_43;
  }
  (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&p_p, a1, v10);
  LODWORD(__p) = HIDWORD(p_p);
  LODWORD(v66) = p_p;
  LODWORD(v52) = 0;
  v49.i32[0] = 0;
  v19.n128_u32[0] = p_p;
  BOOL v20 = *(float *)&p_p != 0.0 || (v19.n128_u32[0] = __p, *(float *)&__p != v49.f32[0]) || v73 != v72;
  if (v72)
  {
    unint64_t v73 = v72;
    operator delete(v72);
  }
  if (v20)
  {
    std::string __p = 0;
    unint64_t v59 = 0;
    uint64_t v60 = 0;
    p_p = &__p;
    uint64_t v72 = 0;
    unint64_t v73 = 0;
    int v74 = &v77;
    fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a1, (uint64_t)&p_p);
  }
  int v21 = 0;
LABEL_44:
  unsigned int v65 = 0;
  (*(void (**)(uint64_t, uint64_t *, __n128))(*(void *)a1 + 128))(a1, &v63, v19);
  while (2)
  {
    if (!v63)
    {
      if ((int)v65 >= v64) {
        goto LABEL_105;
      }
      goto LABEL_50;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v63 + 16))(v63))
    {
      if (v63)
      {
        uint64_t v22 = (*(uint64_t (**)(void))(*(void *)v63 + 24))();
LABEL_51:
        int v23 = v22 + v21;
        while ((*(int (**)(uint64_t *))(*a2 + 160))(a2) <= v23)
          (*(void (**)(uint64_t *))(*a2 + 200))(a2);
        if (v22 == v38)
        {
          *(_OWORD *)int v61 = 0u;
          long long v62 = 0u;
          (*(void (**)(uint64_t *, void, void **))(*a2 + 184))(a2, (v22 + v21), v61);
          if (v61[1])
          {
            *(void **)&long long v62 = v61[1];
            operator delete(v61[1]);
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&__p, a1, v22);
        LODWORD(v66) = HIDWORD(__p);
        LODWORD(p_p) = __p;
        LODWORD(v52) = 2139095040;
        v49.i32[0] = 2139095040;
        BOOL v24 = *(float *)&__p != INFINITY || *(float *)&v66 != v49.f32[0] || v60 != v59;
        if ((v21 & v24) == 1)
        {
          fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Reverse(&__p, &v55);
          p_p = 0;
          uint64_t v72 = v55;
          int v74 = 0;
          uint64_t v75 = 0;
          unint64_t v73 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v73, v56, (uint64_t)v57, (v57 - (unsigned char *)v56) >> 2);
          int v76 = v22 + v21;
          if (v56)
          {
            unint64_t v57 = v56;
            operator delete(v56);
          }
          (*(void (**)(uint64_t *, void, void ***))(*a2 + 208))(a2, 0, &p_p);
          if (v73)
          {
            int v74 = (uint64_t *)v73;
            operator delete(v73);
          }
        }
        unint64_t v70 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 136))(a1, v22, &v66);
LABEL_66:
        if (v66)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v66 + 24))(v66))
          {
            if (v66)
            {
              (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
              goto LABEL_97;
            }
LABEL_95:
            if (v69) {
              --*v69;
            }
LABEL_97:
            if (v59)
            {
              uint64_t v60 = v59;
              operator delete(v59);
            }
            if (v63) {
              (*(void (**)(uint64_t))(*(void *)v63 + 32))(v63);
            }
            else {
              ++v65;
            }
            continue;
          }
          if (v66)
          {
            uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v66 + 32))(v66);
LABEL_72:
            int v26 = *(_DWORD *)(v25 + 40);
            fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Reverse((void *)(v25 + 8), &v52);
            uint64_t v27 = (v26 + v21);
            if (v27 == v10) {
              char v28 = v21;
            }
            else {
              char v28 = 1;
            }
            if ((v28 & 1) == 0)
            {
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v46, a1, v10);
              fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Reverse(&v46, &v49);
              fst::Times<fst::LatticeWeightTpl<float>,int>(&v49, (float32x2_t *)&v52, (int32x2_t *)&p_p);
              __int32 v52 = p_p;
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v53, (char *)v72, (uint64_t)v73, ((char *)v73 - (char *)v72) >> 2);
              if (v72)
              {
                unint64_t v73 = v72;
                operator delete(v72);
              }
              if (v50)
              {
                unsigned int v51 = v50;
                operator delete(v50);
              }
              if (v47)
              {
                __n128 v48 = v47;
                operator delete(v47);
              }
            }
            unint64_t v29 = *(void ***)v25;
            unint64_t v42 = v52;
            unint64_t v44 = 0;
            uint64_t v45 = 0;
            unint64_t v43 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v43, v53, (uint64_t)v54, (v54 - (unsigned char *)v53) >> 2);
            p_p = v29;
            uint64_t v72 = v42;
            int v74 = 0;
            uint64_t v75 = 0;
            unint64_t v73 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v73, v43, (uint64_t)v44, (v44 - (unsigned char *)v43) >> 2);
            int v76 = v23;
            if (v43)
            {
              unint64_t v44 = v43;
              operator delete(v43);
            }
            while (1)
            {
              int v30 = (*(uint64_t (**)(uint64_t *))(*a2 + 160))(a2);
              uint64_t v31 = *a2;
              if (v30 > (int)v27) {
                break;
              }
              (*(void (**)(uint64_t *))(v31 + 200))(a2);
            }
            (*(void (**)(uint64_t *, uint64_t, void ***))(v31 + 208))(a2, v27, &p_p);
            if (v73)
            {
              int v74 = (uint64_t *)v73;
              operator delete(v73);
            }
            if (v53)
            {
              long long v54 = v53;
              operator delete(v53);
            }
            if (v66) {
              (*(void (**)(uint64_t))(*(void *)v66 + 40))(v66);
            }
            else {
              ++v70;
            }
            goto LABEL_66;
          }
        }
        else if (v70 >= v68)
        {
          goto LABEL_95;
        }
        uint64_t v25 = v67 + 48 * v70;
        goto LABEL_72;
      }
LABEL_50:
      uint64_t v22 = v65;
      goto LABEL_51;
    }
    break;
  }
  if (v63) {
    (*(void (**)(void))(*(void *)v63 + 8))();
  }
LABEL_105:
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 176))(a2, v10);
  if (v10 == v38) {
    char v32 = v21;
  }
  else {
    char v32 = 1;
  }
  if ((v32 & 1) == 0)
  {
    (*(void (**)(void ***__return_ptr, uint64_t, void))(*(void *)a1 + 32))(&p_p, a1, v38);
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Reverse(&p_p, &v39);
    (*(void (**)(uint64_t *, void, uint64_t *))(*a2 + 184))(a2, v38, &v39);
    if (v40)
    {
      uint64_t v41 = v40;
      operator delete(v40);
    }
    if (v72)
    {
      unint64_t v73 = v72;
      operator delete(v72);
    }
  }
  uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  unint64_t v34 = v77 | v33;
  uint64_t v35 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  unint64_t v36 = fst::ReverseProperties(v34, v21);
  return (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(*a2 + 192))(a2, v35 | v36, 0x3FFFFFFF0007);
}

void sub_1B1AB15E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::Times<fst::LatticeWeightTpl<float>,int>(float32x2_t *a1@<X0>, float32x2_t *a2@<X1>, int32x2_t *a3@<X8>)
{
  float32x2_t v6 = vadd_f32(*a1, *a2);
  float v17 = v6.f32[1];
  LODWORD(v14.__begin_) = v6.i32[0];
  int v16 = 2139095040;
  float v15 = INFINITY;
  if (v6.f32[0] == INFINITY && v17 == v15)
  {
    *a3 = vdup_n_s32(0x7F800000u);
    a3[2] = 0;
    a3[3] = 0;
    a3[1] = 0;
  }
  else
  {
    float32x2_t v13 = v6;
    memset(&v14, 0, sizeof(v14));
    std::vector<int>::resize(&v14, ((uint64_t)(*(void *)&a2[2] - *(void *)&a2[1]) >> 2) + ((uint64_t)(*(void *)&a1[2] - *(void *)&a1[1]) >> 2));
    std::vector<unsigned int>::pointer begin = v14.__begin_;
    int v8 = (unsigned char *)a1[1];
    unsigned int v9 = (unsigned char *)a1[2];
    int64_t v10 = v9 - v8;
    if (v9 != v8) {
      memmove(v14.__begin_, v8, v9 - v8);
    }
    char v11 = (unsigned char *)a2[1];
    uint64_t v12 = (unsigned char *)a2[2];
    if (v12 != v11) {
      memmove((char *)begin + v10, v11, v12 - v11);
    }
    *a3 = (int32x2_t)v13;
    a3[2] = 0;
    a3[3] = 0;
    a3[1] = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&a3[1], v14.__begin_, (uint64_t)v14.__end_, v14.__end_ - v14.__begin_);
    if (v14.__begin_)
    {
      v14.__end_ = v14.__begin_;
      operator delete(v14.__begin_);
    }
  }
}

void sub_1B1AB1928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Reverse(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  std::vector<int>::size_type v6 = (v4 - v5) >> 2;
  std::vector<int>::vector(&v12, v6);
  std::vector<int>::pointer begin = v12.__begin_;
  if (v4 != v5)
  {
    if (v6 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = (v4 - v5) >> 2;
    }
    unsigned int v9 = (int *)(a1[1] + 4 * v6 - 4);
    std::vector<int>::pointer v10 = v12.__begin_;
    do
    {
      int v11 = *v9--;
      *v10++ = v11;
      --v8;
    }
    while (v8);
  }
  *a2 = *a1;
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a2 + 1, begin, (uint64_t)v12.__end_, v12.__end_ - begin);
  if (v12.__begin_)
  {
    v12.__end_ = v12.__begin_;
    operator delete(v12.__begin_);
  }
}

void sub_1B1AB1A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::insert(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  unint64_t v6 = a1[1];
  unint64_t v9 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = v9;
  if (v6 >= v9)
  {
    uint64_t v10 = *a1;
    unint64_t v11 = ((uint64_t)(v6 - *a1) >> 5) + 1;
    if (v11 >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = (a2 - v10) >> 5;
    uint64_t v13 = v8 - v10;
    uint64_t v14 = v13 >> 4;
    if (v13 >> 4 <= v11) {
      uint64_t v14 = ((uint64_t)(v6 - *a1) >> 5) + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v22 = v7;
    if (v15) {
      int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v15);
    }
    else {
      int v16 = 0;
    }
    unsigned int v18 = v16;
    __n128 v19 = &v16[32 * v12];
    BOOL v20 = v19;
    int v21 = &v16[32 * v15];
    std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::push_back[abi:ne180100](&v18, a3);
    unint64_t v4 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__swap_out_circular_buffer(a1, &v18, v4);
    std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)&v18);
  }
  else if (a2 == v6)
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)a1, a3);
  }
  else
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__move_range((uint64_t)a1, a2, v6, (char *)(a2 + 32));
    if (v4 <= a3) {
      a3 += 32 * (a1[1] > a3);
    }
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v4, a3);
  }
  return v4;
}

void sub_1B1AB1B50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void fst::NShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, float32x2_t *a5, int a6, int a7, float a8)
{
  if (!a4) {
    return;
  }
  if ((a7 & 1) != 0
    && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, 0x400000000, 1))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    int v16 = fst::LogMessage::LogMessage((fst *)&v140, (uint64_t)__p);
    float v17 = (void *)fst::cerr(v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"NShortestPath: FST has a cycle and include_final_ties was set to true. This is not currently supported.", 103);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v140);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 4, 4);
    return;
  }
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v18);
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 288))(a2, v19);
  uint64_t v165 = 0;
  unint64_t v166 = 0;
  unint64_t v167 = 0;
  float v162 = 0;
  float v163 = 0;
  float v164 = 0;
  uint64_t v159 = 0;
  v160 = 0;
  float v161 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1) != -1)
  {
    uint64_t v21 = *a3;
    uint64_t v20 = a3[1];
    if ((*(int (**)(uint64_t))(*(void *)a1 + 24))(a1) < (unint64_t)((v20 - v21) >> 5))
    {
      int v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      uint64_t v23 = *a3;
      uint64_t v24 = *a3 + 32 * v22;
      LODWORD(__p[0]) = 0;
      LODWORD(__p[0]) = *(_DWORD *)v24;
      float v140 = 0.0;
      float v140 = *(float *)(v24 + 4);
      LODWORD(v131) = 2139095040;
      v123.i32[0] = 2139095040;
      if (*(float *)__p != INFINITY
        || v140 != *(float *)v123.i32
        || *(void *)(v23 + 32 * v22 + 16) != *(void *)(v23 + 32 * v22 + 8))
      {
        memset(__p, 0, 32);
        int v25 = fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()((uint64_t)&v158, (uint64_t)a5, (uint64_t)__p);
        if (a6) {
          int v26 = v25;
        }
        else {
          int v26 = 1;
        }
        if (__p[1])
        {
          __p[2] = __p[1];
          operator delete(__p[1]);
        }
        if (!v26)
        {
          uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
          (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v27);
          uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
          long long v156 = 0u;
          long long v157 = 0u;
          (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a2 + 184))(a2, v28, &v156);
          int v116 = a6;
          if (*((void *)&v156 + 1))
          {
            *(void *)&long long v157 = *((void *)&v156 + 1);
            operator delete(*((void **)&v156 + 1));
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v166 - v165) >> 3) <= (int)v28)
          {
            unint64_t v29 = (void *)vdup_n_s32(0x7F800000u);
            do
            {
              LODWORD(__p[0]) = -1;
              __p[1] = v29;
              memset(&__p[2], 0, 24);
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p[2], 0, 0, 0);
              unint64_t v30 = v166;
              if (v166 >= v167)
              {
                uint64_t v31 = std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__push_back_slow_path<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>(&v165, (uint64_t)__p);
              }
              else
              {
                std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__construct_one_at_end[abi:ne180100]<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)&v165, (uint64_t)__p);
                uint64_t v31 = v30 + 40;
              }
              unint64_t v166 = v31;
              if (__p[2])
              {
                __p[3] = __p[2];
                operator delete(__p[2]);
                uint64_t v31 = v166;
              }
            }
            while (0xCCCCCCCCCCCCCCCDLL * ((v31 - v165) >> 3) <= (int)v28);
          }
          LODWORD(__p[0]) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
          memset(&__p[1], 0, 32);
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p[2], 0, 0, 0);
          uint64_t v32 = v165;
          uint64_t v33 = v165 + 40 * (int)v28;
          *(_DWORD *)uint64_t v33 = __p[0];
          *(void **)(v33 + 8) = __p[1];
          if ((void **)(v33 + 8) != &__p[1]) {
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v32 + 40 * (int)v28 + 16), (char *)__p[2], (uint64_t)__p[3], ((char *)__p[3] - (char *)__p[2]) >> 2);
          }
          if (__p[2])
          {
            __p[3] = __p[2];
            operator delete(__p[2]);
          }
          unint64_t v34 = v163;
          if (v163 >= (int *)v164)
          {
            unint64_t v36 = v162;
            uint64_t v37 = v163 - v162;
            unint64_t v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v39 = v164 - (char *)v162;
            if ((v164 - (char *)v162) >> 1 > v38) {
              unint64_t v38 = v39 >> 1;
            }
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v40 = v38;
            }
            if (v40)
            {
              uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v164, v40);
              unint64_t v36 = v162;
              unint64_t v34 = v163;
            }
            else
            {
              uint64_t v41 = 0;
            }
            unint64_t v42 = (int *)&v41[4 * v37];
            unint64_t v43 = &v41[4 * v40];
            int *v42 = v28;
            uint64_t v35 = v42 + 1;
            while (v34 != v36)
            {
              int v44 = *--v34;
              *--unint64_t v42 = v44;
            }
            float v162 = v42;
            float v163 = v35;
            float v164 = v43;
            if (v36) {
              operator delete(v36);
            }
          }
          else
          {
            *float v163 = v28;
            uint64_t v35 = v34 + 1;
          }
          float v163 = v35;
          int v45 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
          fst::Times<fst::LatticeWeightTpl<float>,int>((float32x2_t *)(*a3 + 32 * v45), a5, &v155);
          char v115 = 0;
          float32x2_t v152 = 0;
          uint64_t v153 = 0;
          uint64_t v154 = 0;
          uint64_t v148 = 0;
          v149 = 0;
          unint64_t v150 = 0;
          uint64_t v46 = (void *)vdup_n_s32(0x7F800000u);
LABEL_60:
          uint64_t v47 = v162;
          __n128 v48 = v163;
          if (v162 == v163) {
            goto LABEL_232;
          }
          v145[0] = &v165;
          v145[1] = a3;
          int v146 = -1;
          float v147 = a8;
          if ((char *)v163 - (char *)v162 >= 5)
          {
            int v49 = *v162;
            int v50 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>> &,std::__wrap_iter<int *>>(v162, v145, (unint64_t)((char *)v163 - (char *)v162) >> 2);
            unsigned int v51 = v48 - 1;
            if (v48 - 1 == v50)
            {
              *int v50 = v49;
            }
            else
            {
              *int v50 = *v51;
              *unsigned int v51 = v49;
              std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>> &,std::__wrap_iter<int *>>((uint64_t)v47, (uint64_t)(v50 + 1), v145, v50 + 1 - v47);
            }
          }
          __int32 v52 = *(v163 - 1);
          uint64_t v53 = v165 + 40 * v52;
          float v140 = *(float *)v53;
          float32x2_t v141 = *(float32x2_t *)(v53 + 8);
          v143 = 0;
          uint64_t v144 = 0;
          v142 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v142, *(const void **)(v53 + 16), *(void *)(v53 + 24), (uint64_t)(*(void *)(v53 + 24) - *(void *)(v53 + 16)) >> 2);
          --v163;
          if (v140 == NAN)
          {
            *(_OWORD *)uint64_t v138 = 0u;
            long long v139 = 0u;
          }
          else if (SLODWORD(v140) >= (unint64_t)((a3[1] - *a3) >> 5))
          {
            v138[0] = v46;
            long long v139 = 0uLL;
            v138[1] = 0;
          }
          else
          {
            uint64_t v54 = *a3 + 32 * SLODWORD(v140);
            v138[0] = *(void **)v54;
            long long v139 = 0uLL;
            v138[1] = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v138[1], *(const void **)(v54 + 8), *(void *)(v54 + 16), (uint64_t)(*(void *)(v54 + 16) - *(void *)(v54 + 8)) >> 2);
          }
          fst::Times<fst::LatticeWeightTpl<float>,int>((float32x2_t *)v138, &v141, (int32x2_t *)__p);
          if (fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()((uint64_t)&v158, (uint64_t)&v155, (uint64_t)__p))
          {
            long long v55 = __p[1];
            if (__p[1])
            {
              __p[2] = __p[1];
              goto LABEL_225;
            }
            goto LABEL_226;
          }
          if (v116 == -1)
          {
            if (__p[1])
            {
              __p[2] = __p[1];
              operator delete(__p[1]);
            }
          }
          else
          {
            int v56 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 160))(a2);
            if (__p[1])
            {
              __p[2] = __p[1];
              operator delete(__p[1]);
            }
            if (v56 >= v116) {
              goto LABEL_226;
            }
          }
          unint64_t v57 = v159;
          unsigned int v58 = v160;
          unint64_t v59 = (v160 - v159) >> 2;
          for (i = v140; v59 <= SLODWORD(v140) + 1; unsigned int v58 = v61)
          {
            if (v58 >= v161)
            {
              unint64_t v62 = v59 + 1;
              if ((v59 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v63 = v161 - v57;
              if ((v161 - v57) >> 1 > v62) {
                unint64_t v62 = v63 >> 1;
              }
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v64 = v62;
              }
              if (v64)
              {
                unsigned int v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v161, v64);
                unint64_t v57 = v159;
                unsigned int v58 = v160;
              }
              else
              {
                unsigned int v65 = 0;
              }
              uint64_t v66 = &v65[4 * v59];
              *(_DWORD *)uint64_t v66 = 0;
              int v61 = v66 + 4;
              while (v58 != v57)
              {
                int v67 = *((_DWORD *)v58 - 1);
                v58 -= 4;
                *((_DWORD *)v66 - 1) = v67;
                v66 -= 4;
              }
              uint64_t v159 = v66;
              v160 = v61;
              float v161 = &v65[4 * v64];
              if (v57)
              {
                operator delete(v57);
                unint64_t v57 = v159;
              }
              else
              {
                unint64_t v57 = v66;
              }
            }
            else
            {
              *(_DWORD *)unsigned int v58 = 0;
              int v61 = v58 + 4;
            }
            v160 = v61;
            unint64_t v59 = (v61 - v57) >> 2;
            float i = v140;
          }
          if (a7)
          {
            unint64_t v68 = v149;
            unint64_t v69 = LODWORD(i) + 1;
            if (v69 >= ((uint64_t)v149 - v148) >> 5)
            {
              do
              {
                __p[0] = v46;
                memset(&__p[1], 0, 24);
                if ((unint64_t)v68 >= v150)
                {
                  unint64_t v68 = (void *)std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(&v148, (uint64_t)__p);
                }
                else
                {
                  *unint64_t v68 = v46;
                  void v68[2] = 0;
                  v68[3] = 0;
                  v68[1] = 0;
                  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v68 + 1, __p[1], (uint64_t)__p[2], ((char *)__p[2] - (char *)__p[1]) >> 2);
                  v68 += 4;
                }
                v149 = v68;
                if (__p[1])
                {
                  __p[2] = __p[1];
                  operator delete(__p[1]);
                  unint64_t v68 = v149;
                }
                unint64_t v69 = SLODWORD(v140) + 1;
              }
              while (v69 >= ((uint64_t)v68 - v148) >> 5);
              unint64_t v57 = v159;
            }
          }
          else
          {
            unint64_t v69 = LODWORD(i) + 1;
          }
          ++*(_DWORD *)&v57[4 * v69];
          uint64_t v70 = LODWORD(v140);
          if (v140 == NAN)
          {
            if (v115)
            {
              BOOL v71 = v151.f32[0] == v141.f32[0] && v151.f32[1] == v141.f32[1];
              float v72 = vabds_f32(v151.f32[0] + v151.f32[1], v141.f32[0] + v141.f32[1]);
              BOOL v73 = !v71 && v72 > 0.00097656;
              if (v73 || v153 - (void)v152 != v143 - (unsigned char *)v142 || memcmp(v152, v142, v153 - (void)v152))
              {
                BOOL v74 = 1;
                char v115 = 1;
                goto LABEL_227;
              }
            }
            uint64_t v75 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
            memset(__p, 0, sizeof(__p));
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p[2], 0, 0, 0);
            __int32 v137 = v52;
            (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a2 + 208))(a2, v75, __p);
            if (__p[2])
            {
              __p[3] = __p[2];
              operator delete(__p[2]);
            }
            uint64_t v70 = LODWORD(v140);
          }
          if ((v115 & 1) == 0)
          {
            if (v70 != -1)
            {
              char v115 = 0;
LABEL_129:
              uint64_t v76 = (int)v70 + 1;
              unint64_t v77 = *(int *)&v159[4 * v76];
              if (a7)
              {
                if (v77 == a4)
                {
                  unint64_t v78 = (float32x2_t *)(v148 + 32 * v76);
                  *unint64_t v78 = v141;
                  if (v78 != &v141)
                  {
                    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v78[1], (char *)v142, (uint64_t)v143, (v143 - (unsigned char *)v142) >> 2);
                    uint64_t v70 = LODWORD(v140);
                  }
                }
                else if (v77 > a4)
                {
                  uint64_t v80 = v148 + 32 * v76;
                  float v81 = *(float *)(v80 + 4);
                  BOOL v82 = v141.f32[0] == *(float *)v80 && v141.f32[1] == v81;
                  float v83 = vabds_f32(v141.f32[0] + v141.f32[1], *(float *)v80 + v81);
                  if (!v82 && v83 > 0.00097656) {
                    goto LABEL_226;
                  }
                  uint64_t v85 = *(const void **)(v80 + 8);
                  if (v143 - (unsigned char *)v142 != *(void *)(v80 + 16) - (void)v85
                    || memcmp(v142, v85, v143 - (unsigned char *)v142))
                  {
                    goto LABEL_226;
                  }
                }
              }
              else if (v77 > a4)
              {
                goto LABEL_226;
              }
              unint64_t v135 = 0;
              (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 136))(a1, v70, &v131);
              while (1)
              {
                if (v131)
                {
                  if ((*(unsigned int (**)(void *))(*v131 + 24))(v131))
                  {
                    if (v131)
                    {
                      (*(void (**)(void))(*v131 + 8))();
                    }
                    else
                    {
LABEL_190:
                      if (v134) {
                        --*v134;
                      }
                    }
                    (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)a1 + 32))(__p, a1, LODWORD(v140));
                    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Reverse(__p, &v131);
                    if (__p[1])
                    {
                      __p[2] = __p[1];
                      operator delete(__p[1]);
                    }
                    v123.i32[0] = HIDWORD(v131);
                    LODWORD(__p[0]) = v131;
                    v128.i32[0] = 2139095040;
                    float v168 = INFINITY;
                    if (*(float *)&v131 != INFINITY || *(float *)v123.i32 != v168 || (long long v55 = v133, v133 != v132))
                    {
                      fst::Times<fst::LatticeWeightTpl<float>,int>(&v141, (float32x2_t *)&v131, &v123);
                      uint64_t v102 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
                      LODWORD(__p[0]) = -1;
                      __p[1] = (void *)v123;
                      memset(&__p[2], 0, 24);
                      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p[2], v124, (uint64_t)v125, ((unsigned char *)v125 - (unsigned char *)v124) >> 2);
                      unint64_t v103 = v166;
                      if (v166 >= v167)
                      {
                        uint64_t v104 = std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__push_back_slow_path<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>(&v165, (uint64_t)__p);
                      }
                      else
                      {
                        std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__construct_one_at_end[abi:ne180100]<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)&v165, (uint64_t)__p);
                        uint64_t v104 = v103 + 40;
                      }
                      unint64_t v166 = v104;
                      if (__p[2])
                      {
                        __p[3] = __p[2];
                        operator delete(__p[2]);
                      }
                      __p[0] = 0;
                      __p[1] = v131;
                      memset(&__p[2], 0, 24);
                      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p[2], v132, (uint64_t)v133, (v133 - (unsigned char *)v132) >> 2);
                      __int32 v137 = v52;
                      (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a2 + 208))(a2, v102, __p);
                      if (__p[2])
                      {
                        __p[3] = __p[2];
                        operator delete(__p[2]);
                      }
                      BOOL v105 = v163;
                      if (v163 >= (int *)v164)
                      {
                        int v107 = v162;
                        uint64_t v108 = v163 - v162;
                        unint64_t v109 = v108 + 1;
                        if ((unint64_t)(v108 + 1) >> 62) {
                          std::vector<int>::__throw_length_error[abi:ne180100]();
                        }
                        uint64_t v110 = v164 - (char *)v162;
                        if ((v164 - (char *)v162) >> 1 > v109) {
                          unint64_t v109 = v110 >> 1;
                        }
                        if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v111 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v111 = v109;
                        }
                        if (v111)
                        {
                          uint64_t v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v164, v111);
                          int v107 = v162;
                          BOOL v105 = v163;
                        }
                        else
                        {
                          uint64_t v112 = 0;
                        }
                        unint64_t v113 = (int *)&v112[4 * v108];
                        *unint64_t v113 = v102;
                        uint64_t v106 = (uint64_t)(v113 + 1);
                        while (v105 != v107)
                        {
                          int v114 = *--v105;
                          *--unint64_t v113 = v114;
                        }
                        float v162 = v113;
                        float v163 = (int *)v106;
                        float v164 = &v112[4 * v111];
                        if (v107) {
                          operator delete(v107);
                        }
                      }
                      else
                      {
                        *float v163 = v102;
                        uint64_t v106 = (uint64_t)(v105 + 1);
                      }
                      float v163 = (int *)v106;
                      v117[0] = &v165;
                      v117[1] = a3;
                      int v118 = -1;
                      float v119 = a8;
                      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>> &,std::__wrap_iter<int *>>((uint64_t)v162, v106, v117, (v106 - (uint64_t)v162) >> 2);
                      if (v124)
                      {
                        int v125 = v124;
                        operator delete(v124);
                      }
                      long long v55 = v132;
                    }
                    if (v55)
                    {
                      int v133 = v55;
LABEL_225:
                      operator delete(v55);
                    }
LABEL_226:
                    BOOL v74 = 0;
LABEL_227:
                    if (v138[1])
                    {
                      *(void **)&long long v139 = v138[1];
                      operator delete(v138[1]);
                    }
                    if (v142)
                    {
                      v143 = v142;
                      operator delete(v142);
                    }
                    if (v74) {
LABEL_232:
                    }
                      fst::Connect<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a2);
                    goto LABEL_60;
                  }
                  if (v131)
                  {
                    unint64_t v86 = (char *)(*(uint64_t (**)(void))(*v131 + 32))();
                    goto LABEL_158;
                  }
                }
                else if (v135 >= (unint64_t)v133)
                {
                  goto LABEL_190;
                }
                unint64_t v86 = (char *)v132 + 48 * v135;
LABEL_158:
                std::regex_traits<char>::char_class_type v87 = *(void **)v86;
                fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Reverse((void *)v86 + 1, &v123);
                __int32 v88 = *((_DWORD *)v86 + 10);
                __p[0] = v87;
                __p[1] = (void *)v123;
                memset(&__p[2], 0, 24);
                std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p[2], v124, (uint64_t)v125, ((unsigned char *)v125 - (unsigned char *)v124) >> 2);
                __int32 v137 = v88;
                if (v124)
                {
                  int v125 = v124;
                  operator delete(v124);
                }
                fst::Times<fst::LatticeWeightTpl<float>,int>(&v141, (float32x2_t *)&__p[1], &v128);
                uint64_t v89 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
                v123.i32[0] = v137;
                int v124 = (void *)v128;
                unsigned __int8 v126 = 0;
                uint64_t v127 = 0;
                int v125 = 0;
                std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v125, v129, (uint64_t)v130, (v130 - (unsigned char *)v129) >> 2);
                unint64_t v90 = v166;
                if (v166 >= v167)
                {
                  uint64_t v91 = std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__push_back_slow_path<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>(&v165, (uint64_t)&v123);
                }
                else
                {
                  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__construct_one_at_end[abi:ne180100]<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)&v165, (uint64_t)&v123);
                  uint64_t v91 = v90 + 40;
                }
                unint64_t v166 = v91;
                if (v125)
                {
                  unsigned __int8 v126 = v125;
                  operator delete(v125);
                }
                __int32 v137 = v52;
                (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a2 + 208))(a2, v89, __p);
                BOOL v92 = v163;
                if (v163 >= (int *)v164)
                {
                  unint64_t v94 = v162;
                  uint64_t v95 = v163 - v162;
                  unint64_t v96 = v95 + 1;
                  if ((unint64_t)(v95 + 1) >> 62) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v97 = v164 - (char *)v162;
                  if ((v164 - (char *)v162) >> 1 > v96) {
                    unint64_t v96 = v97 >> 1;
                  }
                  if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v98 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v98 = v96;
                  }
                  if (v98)
                  {
                    v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v164, v98);
                    unint64_t v94 = v162;
                    BOOL v92 = v163;
                  }
                  else
                  {
                    v99 = 0;
                  }
                  std::string::size_type v100 = (int *)&v99[4 * v95];
                  *std::string::size_type v100 = v89;
                  uint64_t v93 = (uint64_t)(v100 + 1);
                  while (v92 != v94)
                  {
                    int v101 = *--v92;
                    *--std::string::size_type v100 = v101;
                  }
                  float v162 = v100;
                  float v163 = (int *)v93;
                  float v164 = &v99[4 * v98];
                  if (v94) {
                    operator delete(v94);
                  }
                }
                else
                {
                  *float v163 = v89;
                  uint64_t v93 = (uint64_t)(v92 + 1);
                }
                float v163 = (int *)v93;
                v120[0] = &v165;
                v120[1] = a3;
                int v121 = -1;
                float v122 = a8;
                std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>> &,std::__wrap_iter<int *>>((uint64_t)v162, v93, v120, (v93 - (uint64_t)v162) >> 2);
                if (v129)
                {
                  unint64_t v130 = v129;
                  operator delete(v129);
                }
                if (__p[2])
                {
                  __p[3] = __p[2];
                  operator delete(__p[2]);
                }
                if (v131) {
                  (*(void (**)(void *))(*v131 + 40))(v131);
                }
                else {
                  ++v135;
                }
              }
            }
            BOOL v74 = *(int *)v159 == a4;
            if (*(_DWORD *)v159 != a4 || a7 == 0)
            {
              char v115 = 0;
              goto LABEL_227;
            }
            float32x2_t v151 = v141;
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v152, (char *)v142, (uint64_t)v143, (v143 - (unsigned char *)v142) >> 2);
            uint64_t v70 = LODWORD(v140);
          }
          char v115 = 1;
          if (v70 == -1) {
            goto LABEL_226;
          }
          goto LABEL_129;
        }
      }
    }
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 4, 0)) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 4, 4);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (v162)
  {
    float v163 = v162;
    operator delete(v162);
  }
  __p[0] = &v165;
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B1AB302C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,void *__p,uint64_t a42)
{
  if (__p)
  {
    a42 = (uint64_t)__p;
    operator delete(__p);
  }
  int v44 = *(void **)(v42 - 208);
  if (v44)
  {
    *(void *)(v42 - 200) = v44;
    operator delete(v44);
  }
  int v45 = *(void **)(v42 - 184);
  if (v45)
  {
    *(void *)(v42 - 176) = v45;
    operator delete(v45);
  }
  a39 = (void *)(v42 - 160);
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  _Unwind_Resume(a1);
}

void std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    unint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void *std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = *(void *)a2;
  v3[2] = 0;
  v3[3] = 0;
  v3[1] = 0;
  BOOL result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v3 + 1, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  *(void *)(a1 + 8) = v3 + 4;
  return result;
}

void sub_1B1AB3370(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  float v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[32 * v4];
  v14[0] = v10;
  v14[1] = v11;
  unint64_t v15 = v11;
  int v16 = &v10[32 * v9];
  *(void *)unint64_t v11 = *(void *)a2;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 1) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v11 + 1, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  v15 += 32;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B1AB3464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  void v14[2] = &v17;
  char v15 = 0;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      uint64_t v10 = *(void *)(v9 - 32);
      v9 -= 32;
      *(void *)(v7 - 24) = 0;
      unint64_t v11 = (void *)(v7 - 24);
      *(v11 - 1) = v10;
      v11[1] = 0;
      v11[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)(v9 + 8), *(void *)(v9 + 16), (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 2);
      uint64_t v7 = *((void *)&v17 + 1) - 32;
      *((void *)&v17 + 1) -= 32;
    }
    while (v9 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

void sub_1B1AB35AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(void *)(v1 + 16) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 32;
    uint64_t v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t fst::LatticeWeightTpl<float>::Type()
{
  {
    operator new();
  }
  return fst::LatticeWeightTpl<float>::Type(void)::type;
}

void sub_1B1AB378C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::ShortestDistance(uint64_t *a1, int a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)*a1 + 24))(*a1) == -1)
  {
    if (!(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0)) {
      return;
    }
    uint64_t v131 = (char *)a1 + 116;
LABEL_209:
    *uint64_t v131 = 1;
    return;
  }
  (*(void (**)(void))(**(void **)(a1[2] + 16) + 56))(*(void *)(a1[2] + 16));
  if (!*((unsigned char *)a1 + 33))
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100]((uint64_t *)a1[1]);
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a1 + 5);
    a1[9] = 0;
  }
  if (a2 == -1) {
    a2 = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  }
  unint64_t v4 = a2;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v6 = v5 + 1;
  uint64_t v7 = *v5;
  if (a2 >= (unint64_t)((v5[1] - *v5) >> 5))
  {
    int32x2_t v8 = vdup_n_s32(0x7F800000u);
    do
    {
      int32x2_t v140 = v8;
      v142 = 0;
      v143 = 0;
      std::string __p = 0;
      unint64_t v9 = v5[1];
      if (v9 >= v5[2])
      {
        uint64_t v10 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(v5, (uint64_t)&v140);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)v5, (uint64_t)&v140);
        uint64_t v10 = v9 + 32;
      }
      uint64_t *v6 = v10;
      if (__p)
      {
        v142 = __p;
        operator delete(__p);
      }
      int32x2_t v140 = v8;
      v142 = 0;
      v143 = 0;
      std::string __p = 0;
      unint64_t v11 = (void *)a1[6];
      if ((unint64_t)v11 >= a1[7])
      {
        uint64_t v12 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(a1 + 5, (uint64_t)&v140);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)(a1 + 5), (uint64_t)&v140);
        uint64_t v12 = (uint64_t)(v11 + 4);
      }
      a1[6] = v12;
      if (__p)
      {
        v142 = __p;
        operator delete(__p);
      }
      v140.i8[0] = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v140);
      uint64_t v5 = (uint64_t *)a1[1];
      uint64_t v6 = v5 + 1;
      uint64_t v7 = *v5;
    }
    while (a2 >= (unint64_t)((v5[1] - *v5) >> 5));
  }
  if (*((unsigned char *)a1 + 33))
  {
    uint64_t v13 = (char *)a1[11];
    uint64_t v14 = (char *)a1[12];
    unint64_t v15 = (v14 - v13) >> 2;
    if (v15 <= a2)
    {
      long long v16 = a1 + 13;
      do
      {
        if ((unint64_t)v14 >= *v16)
        {
          unint64_t v18 = v15 + 1;
          if ((v15 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = *v16 - (void)v13;
          if (v19 >> 1 > v18) {
            unint64_t v18 = v19 >> 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20)
          {
            uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v20);
            uint64_t v13 = (char *)a1[11];
            uint64_t v14 = (char *)a1[12];
          }
          else
          {
            uint64_t v21 = 0;
          }
          int v22 = &v21[4 * v15];
          *(_DWORD *)int v22 = -1;
          long long v17 = v22 + 4;
          while (v14 != v13)
          {
            int v23 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *((_DWORD *)v22 - 1) = v23;
            v22 -= 4;
          }
          a1[11] = (uint64_t)v22;
          a1[12] = (uint64_t)v17;
          a1[13] = (uint64_t)&v21[4 * v20];
          if (v13)
          {
            operator delete(v13);
            uint64_t v13 = (char *)a1[11];
          }
          else
          {
            uint64_t v13 = v22;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v14 = -1;
          long long v17 = v14 + 4;
        }
        a1[12] = (uint64_t)v17;
        unint64_t v15 = (v17 - v13) >> 2;
        uint64_t v14 = v17;
      }
      while (v15 <= a2);
      uint64_t v7 = *(void *)a1[1];
    }
    *(_DWORD *)&v13[4 * a2] = *((_DWORD *)a1 + 28);
  }
  uint64_t v24 = v7 + 32 * a2;
  *(void *)uint64_t v24 = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v24 + 8), 0, 0, 0);
  int v25 = a1 + 5;
  uint64_t v26 = a1[5] + 32 * v4;
  *(void *)uint64_t v26 = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v26 + 8), 0, 0, 0);
  uint64_t v27 = a1 + 8;
  uint64_t v28 = *(uint64_t **)(a1[2] + 16);
  uint64_t v29 = *v28;
  *(void *)(a1[8] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  (*(void (**)(uint64_t *, unint64_t))(v29 + 24))(v28, v4);
  unint64_t v30 = a1 + 13;
  uint64_t v131 = (char *)a1 + 116;
  int32x2_t v31 = vdup_n_s32(0x7F800000u);
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 48))(*(void *)(a1[2] + 16)))
    {
LABEL_208:
      ++*((_DWORD *)a1 + 28);
      if (!(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0)) {
        return;
      }
      goto LABEL_209;
    }
    int v32 = (*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 16))(*(void *)(a1[2] + 16));
    (*(void (**)(void))(**(void **)(a1[2] + 16) + 32))(*(void *)(a1[2] + 16));
    while (1)
    {
      uint64_t v33 = (uint64_t *)a1[1];
      unint64_t v34 = v33 + 1;
      if (v32 < (unint64_t)((v33[1] - *v33) >> 5)) {
        break;
      }
      int32x2_t v140 = v31;
      v142 = 0;
      v143 = 0;
      std::string __p = 0;
      unint64_t v35 = v33[1];
      if (v35 >= v33[2])
      {
        uint64_t v36 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(v33, (uint64_t)&v140);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)v33, (uint64_t)&v140);
        uint64_t v36 = v35 + 32;
      }
      *unint64_t v34 = v36;
      if (__p)
      {
        v142 = __p;
        operator delete(__p);
      }
      int32x2_t v140 = v31;
      v142 = 0;
      v143 = 0;
      std::string __p = 0;
      uint64_t v37 = (void *)a1[6];
      if ((unint64_t)v37 >= a1[7])
      {
        uint64_t v38 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(a1 + 5, (uint64_t)&v140);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)(a1 + 5), (uint64_t)&v140);
        uint64_t v38 = (uint64_t)(v37 + 4);
      }
      a1[6] = v38;
      if (__p)
      {
        v142 = __p;
        operator delete(__p);
      }
      v140.i8[0] = 0;
      std::vector<BOOL>::push_back((uint64_t)v27, &v140);
    }
    if (*((unsigned char *)a1 + 32))
    {
      (*(void (**)(int32x2_t *__return_ptr))(*(void *)*a1 + 32))(&v140);
      v136.i32[0] = v140.i32[1];
      v145.i32[0] = v140.i32[0];
      v132.i32[0] = 2139095040;
      float v149 = INFINITY;
      if (*(float *)v140.i32 == INFINITY)
      {
        unint64_t v40 = __p;
        if (*(float *)v136.i32 == v149)
        {
          BOOL v39 = v142 != __p;
          if (!__p)
          {
LABEL_64:
            if (v39) {
              goto LABEL_208;
            }
            goto LABEL_65;
          }
        }
        else
        {
          BOOL v39 = 1;
          if (!__p) {
            goto LABEL_64;
          }
        }
      }
      else
      {
        BOOL v39 = 1;
        unint64_t v40 = __p;
        if (!__p) {
          goto LABEL_64;
        }
      }
      v142 = v40;
      operator delete(v40);
      goto LABEL_64;
    }
LABEL_65:
    *(void *)(*v27 + (((unint64_t)v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v32);
    uint64_t v41 = *v25 + 32 * v32;
    float32x2_t v145 = *(float32x2_t *)v41;
    float v147 = 0;
    uint64_t v148 = 0;
    int v146 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v146, *(const void **)(v41 + 8), *(void *)(v41 + 16), (uint64_t)(*(void *)(v41 + 16) - *(void *)(v41 + 8)) >> 2);
    uint64_t v42 = *v25 + 32 * v32;
    *(int32x2_t *)uint64_t v42 = v31;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v42 + 8), 0, 0, 0);
    uint64_t v43 = *a1;
    uint64_t v44 = *(void *)*a1;
    unint64_t v144 = 0;
    (*(void (**)(uint64_t, void, int32x2_t *))(v44 + 136))(v43, v32, &v140);
    while (1)
    {
      if (!*(void *)&v140)
      {
        if (v144 >= (unint64_t)v142)
        {
          int v86 = 10;
          goto LABEL_196;
        }
        goto LABEL_71;
      }
      char v45 = (*(uint64_t (**)(int32x2_t))(**(void **)&v140 + 24))(v140);
      int32x2_t v46 = v140;
      if (v45) {
        break;
      }
      if (v140)
      {
        uint64_t v47 = (float32x2_t *)(*(uint64_t (**)(void))(**(void **)&v140 + 32))();
        goto LABEL_72;
      }
LABEL_71:
      uint64_t v47 = (float32x2_t *)((char *)__p + 48 * v144);
LABEL_72:
      __n128 v48 = (uint64_t *)a1[1];
      int v49 = v48 + 1;
      for (unint64_t i = v47[5].i32[0]; i >= (v48[1] - *v48) >> 5; unint64_t i = v47[5].i32[0])
      {
        int32x2_t v136 = v31;
        uint64_t v138 = 0;
        uint64_t v139 = 0;
        __int32 v137 = 0;
        unint64_t v51 = v48[1];
        if (v51 >= v48[2])
        {
          uint64_t v52 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(v48, (uint64_t)&v136);
        }
        else
        {
          std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)v48, (uint64_t)&v136);
          uint64_t v52 = v51 + 32;
        }
        *int v49 = v52;
        if (v137)
        {
          uint64_t v138 = v137;
          operator delete(v137);
        }
        int32x2_t v136 = v31;
        uint64_t v138 = 0;
        uint64_t v139 = 0;
        __int32 v137 = 0;
        uint64_t v53 = (void *)a1[6];
        if ((unint64_t)v53 >= a1[7])
        {
          uint64_t v54 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(a1 + 5, (uint64_t)&v136);
        }
        else
        {
          std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)(a1 + 5), (uint64_t)&v136);
          uint64_t v54 = (uint64_t)(v53 + 4);
        }
        a1[6] = v54;
        if (v137)
        {
          uint64_t v138 = v137;
          operator delete(v137);
        }
        v136.i8[0] = 0;
        std::vector<BOOL>::push_back((uint64_t)v27, &v136);
        __n128 v48 = (uint64_t *)a1[1];
        int v49 = v48 + 1;
      }
      if (*((unsigned char *)a1 + 33))
      {
        long long v55 = (char *)a1[11];
        int v56 = (char *)a1[12];
        unint64_t v57 = (v56 - v55) >> 2;
        if (v57 <= (int)i)
        {
          do
          {
            if ((unint64_t)v56 >= *v30)
            {
              unint64_t v60 = v57 + 1;
              if ((v57 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v61 = *v30 - (void)v55;
              if (v61 >> 1 > v60) {
                unint64_t v60 = v61 >> 1;
              }
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v62 = v60;
              }
              if (v62)
              {
                uint64_t v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v30, v62);
                long long v55 = (char *)a1[11];
                int v56 = (char *)a1[12];
              }
              else
              {
                uint64_t v63 = 0;
              }
              unint64_t v64 = &v63[4 * v57];
              *(_DWORD *)unint64_t v64 = -1;
              unint64_t v59 = v64 + 4;
              while (v56 != v55)
              {
                int v65 = *((_DWORD *)v56 - 1);
                v56 -= 4;
                *((_DWORD *)v64 - 1) = v65;
                v64 -= 4;
              }
              a1[11] = (uint64_t)v64;
              a1[12] = (uint64_t)v59;
              a1[13] = (uint64_t)&v63[4 * v62];
              if (v55)
              {
                operator delete(v55);
                long long v55 = (char *)a1[11];
              }
              else
              {
                long long v55 = v64;
              }
            }
            else
            {
              *(_DWORD *)int v56 = -1;
              unint64_t v59 = v56 + 4;
            }
            a1[12] = (uint64_t)v59;
            unint64_t v57 = (v59 - v55) >> 2;
            __int32 v66 = v47[5].i32[0];
            int v56 = v59;
          }
          while (v57 <= v66);
          uint64_t v58 = v66;
          __n128 v48 = (uint64_t *)a1[1];
          LODWORD(i) = v47[5].i32[0];
        }
        else
        {
          uint64_t v58 = (int)i;
        }
        if (*(_DWORD *)&v55[4 * v58] != *((_DWORD *)a1 + 28))
        {
          uint64_t v67 = *v48 + 32 * v58;
          *(int32x2_t *)uint64_t v67 = v31;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v67 + 8), 0, 0, 0);
          uint64_t v68 = *v25 + 32 * v47[5].i32[0];
          *(int32x2_t *)uint64_t v68 = v31;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v68 + 8), 0, 0, 0);
          __n128 v48 = (uint64_t *)a1[1];
          unint64_t v69 = (void *)a1[11];
          int v70 = *((_DWORD *)a1 + 28);
          unint64_t v71 = v47[5].i32[0];
          *(void *)(a1[8] + ((v71 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v71);
          *((_DWORD *)v69 + v71) = v70;
          LODWORD(i) = v47[5].i32[0];
        }
      }
      uint64_t v72 = *v48;
      uint64_t v73 = *v25;
      fst::Times<fst::LatticeWeightTpl<float>,int>(&v145, v47 + 1, &v136);
      uint64_t v74 = v72 + 32 * (int)i;
      float v75 = *(float *)v74;
      float v76 = *(float *)v74 + *(float *)(v74 + 4);
      unint64_t v77 = (int32x2_t *)v74;
      if (v76 >= (float)(*(float *)v136.i32 + *(float *)&v136.i32[1]))
      {
        if (v76 > (float)(*(float *)v136.i32 + *(float *)&v136.i32[1])) {
          goto LABEL_110;
        }
        unint64_t v77 = (int32x2_t *)(v72 + 32 * (int)i);
        if (v75 >= *(float *)v136.i32)
        {
          if (v75 > *(float *)v136.i32) {
            goto LABEL_110;
          }
          BOOL v92 = *(int **)(v72 + 32 * (int)i + 8);
          unint64_t v93 = *(void *)(v72 + 32 * (int)i + 16) - (void)v92;
          unint64_t v94 = v93 >> 2;
          uint64_t v95 = (int *)v137;
          unint64_t v96 = (unint64_t)(v138 - (unsigned char *)v137) >> 2;
          if ((int)(v93 >> 2) > (int)v96) {
            goto LABEL_110;
          }
          BOOL v97 = (int)v94 < 1 || (int)v94 < (int)v96;
          unint64_t v77 = (int32x2_t *)(v72 + 32 * (int)i);
          if (!v97)
          {
            uint64_t v98 = (v93 >> 2) - 1;
            while (1)
            {
              int v100 = *v92++;
              int v99 = v100;
              int v102 = *v95++;
              int v101 = v102;
              if (v99 < v102) {
                break;
              }
              if (v99 > v101 || v98-- == 0)
              {
                unint64_t v77 = (int32x2_t *)(v72 + 32 * (int)i);
                goto LABEL_112;
              }
            }
LABEL_110:
            unint64_t v77 = &v136;
          }
        }
      }
LABEL_112:
      int32x2_t v132 = *v77;
      int v134 = 0;
      uint64_t v135 = 0;
      int v133 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v133, *(const void **)&v77[1], *(void *)&v77[2], (uint64_t)(*(void *)&v77[2] - *(void *)&v77[1]) >> 2);
      float v78 = *(float *)(v74 + 4);
      BOOL v79 = *(float *)v74 == *(float *)v132.i32 && v78 == *(float *)&v132.i32[1];
      if (v79 || vabds_f32(*(float *)v74 + v78, *(float *)v132.i32 + *(float *)&v132.i32[1]) <= *((float *)a1 + 7))
      {
        uint64_t v80 = (int)i;
        uint64_t v83 = v72 + 32 * (int)i;
        unint64_t v84 = *(const void **)(v83 + 8);
        size_t v85 = *(void *)(v83 + 16) - (void)v84;
        BOOL v82 = v133;
        if (v85 != v134 - (unsigned char *)v133)
        {
          BOOL v81 = 0;
          if (!v133) {
            goto LABEL_124;
          }
LABEL_123:
          int v134 = v82;
          operator delete(v82);
          goto LABEL_124;
        }
        BOOL v81 = memcmp(v84, v133, v85) == 0;
        if (v82) {
          goto LABEL_123;
        }
      }
      else
      {
        uint64_t v80 = (int)i;
        BOOL v81 = 0;
        BOOL v82 = v133;
        if (v133) {
          goto LABEL_123;
        }
      }
LABEL_124:
      if (v81)
      {
        int v86 = 0;
        int v87 = 1;
        unint64_t v30 = a1 + 13;
        uint64_t v27 = a1 + 8;
        goto LABEL_161;
      }
      float v88 = *(float *)v74;
      float v89 = *(float *)v74 + *(float *)(v74 + 4);
      unint64_t v90 = (int32x2_t *)v74;
      uint64_t v91 = v80;
      if (v89 >= (float)(*(float *)v136.i32 + *(float *)&v136.i32[1]))
      {
        if (v89 > (float)(*(float *)v136.i32 + *(float *)&v136.i32[1])) {
          goto LABEL_128;
        }
        unint64_t v90 = (int32x2_t *)v74;
        if (v88 >= *(float *)v136.i32)
        {
          if (v88 > *(float *)v136.i32) {
            goto LABEL_128;
          }
          unint64_t v109 = *(int **)(v72 + 32 * v80 + 8);
          unint64_t v110 = *(void *)(v72 + 32 * v80 + 16) - (void)v109;
          unint64_t v111 = v110 >> 2;
          uint64_t v112 = (int *)v137;
          unint64_t v113 = (unint64_t)(v138 - (unsigned char *)v137) >> 2;
          if ((int)(v110 >> 2) > (int)v113) {
            goto LABEL_128;
          }
          unint64_t v90 = (int32x2_t *)v74;
          if ((int)v111 >= 1)
          {
            unint64_t v90 = (int32x2_t *)v74;
            if ((int)v111 >= (int)v113)
            {
              uint64_t v114 = (v110 >> 2) - 1;
              while (1)
              {
                int v116 = *v109++;
                int v115 = v116;
                int v118 = *v112++;
                int v117 = v118;
                if (v115 < v118) {
                  break;
                }
                if (v115 > v117 || v114-- == 0)
                {
                  unint64_t v90 = (int32x2_t *)v74;
                  goto LABEL_144;
                }
              }
LABEL_128:
              unint64_t v90 = &v136;
            }
          }
        }
      }
LABEL_144:
      int32x2_t v132 = *v90;
      int v134 = 0;
      uint64_t v135 = 0;
      int v133 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v133, *(const void **)&v90[1], *(void *)&v90[2], (uint64_t)(*(void *)&v90[2] - *(void *)&v90[1]) >> 2);
      *(int32x2_t *)uint64_t v74 = v132;
      uint64_t v27 = a1 + 8;
      if ((int32x2_t *)v74 != &v132) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v72 + 32 * v91 + 8), (char *)v133, (uint64_t)v134, (v134 - (unsigned char *)v133) >> 2);
      }
      if (v133)
      {
        int v134 = v133;
        operator delete(v133);
      }
      uint64_t v104 = v73 + 32 * v91;
      float v105 = *(float *)v104;
      float v106 = *(float *)v104 + *(float *)(v104 + 4);
      int v107 = (int32x2_t *)v104;
      if (v106 < (float)(*(float *)v136.i32 + *(float *)&v136.i32[1])) {
        goto LABEL_152;
      }
      if (v106 <= (float)(*(float *)v136.i32 + *(float *)&v136.i32[1]))
      {
        int v107 = (int32x2_t *)(v73 + 32 * v91);
        if (v105 < *(float *)v136.i32) {
          goto LABEL_152;
        }
        if (v105 <= *(float *)v136.i32)
        {
          unint64_t v120 = *(int **)(v73 + 32 * v91 + 8);
          unint64_t v121 = *(void *)(v73 + 32 * v91 + 16) - (void)v120;
          unint64_t v122 = v121 >> 2;
          int32x2_t v123 = (int *)v137;
          unint64_t v124 = (unint64_t)(v138 - (unsigned char *)v137) >> 2;
          if ((int)(v121 >> 2) <= (int)v124)
          {
            int v107 = (int32x2_t *)(v73 + 32 * v91);
            if ((int)v122 < 1) {
              goto LABEL_152;
            }
            int v107 = (int32x2_t *)(v73 + 32 * v91);
            if ((int)v122 < (int)v124) {
              goto LABEL_152;
            }
            uint64_t v125 = (v121 >> 2) - 1;
            while (1)
            {
              int v127 = *v120++;
              int v126 = v127;
              int v129 = *v123++;
              int v128 = v129;
              if (v126 < v129) {
                break;
              }
              if (v126 > v128 || v125-- == 0)
              {
                int v107 = (int32x2_t *)(v73 + 32 * v91);
                goto LABEL_152;
              }
            }
          }
        }
      }
      int v107 = &v136;
LABEL_152:
      int32x2_t v132 = *v107;
      int v134 = 0;
      uint64_t v135 = 0;
      int v133 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v133, *(const void **)&v107[1], *(void *)&v107[2], (uint64_t)(*(void *)&v107[2] - *(void *)&v107[1]) >> 2);
      *(int32x2_t *)uint64_t v104 = v132;
      if ((int32x2_t *)v104 != &v132) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v73 + 32 * v91 + 8), (char *)v133, (uint64_t)v134, (v134 - (unsigned char *)v133) >> 2);
      }
      if (v133)
      {
        int v134 = v133;
        operator delete(v133);
      }
      unint64_t v30 = a1 + 13;
      if (fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Member(v74)
        && fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Member(v104))
      {
        uint64_t v108 = **(void **)(a1[2] + 16);
        if ((*(void *)(a1[8] + (((unint64_t)v47[5].i32[0] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v47[5].i32[0]))
        {
          (*(void (**)(void))(v108 + 40))();
          int v86 = 0;
          int v87 = 1;
        }
        else
        {
          (*(void (**)(void))(v108 + 24))();
          int v86 = 0;
          int v87 = 1;
          *(void *)(a1[8] + (((unint64_t)v47[5].i32[0] >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v47[5].i32[0];
        }
      }
      else
      {
        int v87 = 0;
        int v86 = 1;
        *uint64_t v131 = 1;
      }
LABEL_161:
      if (v137)
      {
        uint64_t v138 = v137;
        operator delete(v137);
      }
      int32x2_t v46 = v140;
      if (!v87) {
        goto LABEL_193;
      }
      if (v140) {
        (*(void (**)(void))(**(void **)&v140 + 40))();
      }
      else {
        ++v144;
      }
    }
    int v86 = 10;
LABEL_193:
    if (v46)
    {
      (*(void (**)(int32x2_t))(**(void **)&v46 + 8))(v46);
      goto LABEL_198;
    }
LABEL_196:
    if (v143) {
      --*v143;
    }
LABEL_198:
    if (v86 == 10) {
      int v86 = 0;
    }
    if (v146)
    {
      float v147 = v146;
      operator delete(v146);
    }
  }
  while (!v86);
}

void sub_1B1AB46E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v29 = *(void **)(v27 - 136);
  if (v29)
  {
    *(void *)(v27 - 128) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      uint64_t v7 = *a1 + 32 * a2;
      while (v4 != v7)
      {
        int32x2_t v8 = *(void **)(v4 - 24);
        if (v8)
        {
          *(void *)(v4 - 16) = v8;
          operator delete(v8);
        }
        v4 -= 32;
      }
      a1[1] = v7;
    }
  }
  else
  {
    unint64_t v6 = a2 - v5;
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__append(a1, v6, a3);
  }
}

void *std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1[2];
  uint64_t result = a1 + 2;
  uint64_t v7 = v8;
  uint64_t v9 = *(result - 1);
  if (a2 <= (v8 - v9) >> 5)
  {
    if (a2)
    {
      long long v16 = (void *)(v9 + 8);
      uint64_t v17 = 32 * a2;
      uint64_t v18 = v9 + 32 * a2;
      do
      {
        *(v16 - 1) = *(void *)a3;
        v16[1] = 0;
        v16[2] = 0;
        *long long v16 = 0;
        uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v16, *(const void **)(a3 + 8), *(void *)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 2);
        v16 += 4;
        v17 -= 32;
      }
      while (v17);
    }
    else
    {
      uint64_t v18 = *(result - 1);
    }
    a1[1] = v18;
  }
  else
  {
    uint64_t v10 = v9 - *a1;
    unint64_t v11 = a2 + (v10 >> 5);
    if (v11 >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 5;
    uint64_t v13 = v7 - *a1;
    if (v13 >> 4 > v11) {
      unint64_t v11 = v13 >> 4;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    int v23 = result;
    if (v14) {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)result, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    uint64_t v19 = v15;
    unint64_t v20 = &v15[32 * v12];
    uint64_t v21 = v20;
    int v22 = &v15[32 * v14];
    std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_at_end(&v19, a2, a3);
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__swap_out_circular_buffer(a1, &v19);
    return (void *)std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)&v19);
  }
  return result;
}

void sub_1B1AB4998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_at_end(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = result[2];
  if (a2)
  {
    unint64_t v6 = (void *)(v4 + 8);
    uint64_t v7 = 32 * a2;
    v4 += 32 * a2;
    do
    {
      *(v6 - 1) = *(void *)a3;
      v6[1] = 0;
      v6[2] = 0;
      void *v6 = 0;
      uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v6, *(const void **)(a3 + 8), *(void *)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 2);
      v6 += 4;
      v7 -= 32;
    }
    while (v7);
  }
  v3[2] = v4;
  return result;
}

void sub_1B1AB4A38(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2 - 8;
  _Unwind_Resume(a1);
}

uint64_t fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ShortestDistanceState(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 64);
  if (v3) {
    operator delete(v3);
  }
  unint64_t v5 = (void **)(a1 + 40);
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return a1;
}

BOOL fst::LatticeWeightTpl<float>::Member(float *a1)
{
  float v1 = *a1;
  float v2 = a1[1];
  BOOL v4 = v2 == -INFINITY || v1 == -INFINITY;
  BOOL result = 0;
  if (!v4)
  {
    if (v1 != INFINITY && v2 != INFINITY) {
      return 1;
    }
    if (v1 == INFINITY && v2 == INFINITY) {
      return 1;
    }
  }
  return result;
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::VectorFst()
{
}

void sub_1B1AB4B5C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~VectorFst(void *a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 88);
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2);
  *a3 = *(void *)v3;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a3 + 1, *(const void **)(v3 + 8), *(void *)(v3 + 16), (uint64_t)(*(void *)(v3 + 16) - *(void *)(v3 + 8)) >> 2);
}

unint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::NumArcs(uint64_t a1, int a2)
{
  return 0xAAAAAAAAAAAAAAABLL
       * ((uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 56)
                  - *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 48)) >> 4);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 32);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Copy()
{
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  *a3 = 0;
  unint64_t v5 = (uint64_t *)(*(void *)(*(void *)(v3 + 64) + 8 * a2) + 48);
  uint64_t v4 = *v5;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v5[1] - *v5) >> 4);
  if (v5[1] == *v5) {
    uint64_t v4 = 0;
  }
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::NumStates(uint64_t a1)
{
  return (*(void *)(*(void *)(a1 + 8) + 72) - *(void *)(*(void *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

void sub_1B1AB4ED8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetStart(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  *(void *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(void *)(v4 + 8) & 4;
  return result;
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetFinal(uint64_t a1, int a2, uint64_t *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  unint64_t v6 = *(void **)(a1 + 8);
  uint64_t v7 = *a3;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a3[1], a3[2], (a3[2] - a3[1]) >> 2);
  fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::SetFinal(v6, a2, (uint64_t)&v7);
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_1B1AB5004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 & 4;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v6);
  if (result != (v6 & a2)) {
    uint64_t result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  }
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::AddState(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(void *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  return fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::AddArc(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteStates(uint64_t a1, char **a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::DeleteStates((uint64_t)v4, a2);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteStates(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::DeleteStates((uint64_t)v2);
  uint64_t result = (*(uint64_t (**)(void *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteArcs(*(void **)(v6[8] + 8 * a2), a3);
  uint64_t result = (*(uint64_t (**)(void *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  unint64_t v5 = *(void **)(v4[8] + 8 * a2);
  v5[4] = 0;
  v5[5] = 0;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](v5 + 6);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  uint64_t v4 = (void **)(*(void *)(a1 + 8) + 64);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(v4, a2);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  uint64_t v6 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 48);
  return std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::reserve(v6, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutableInputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutableOutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(v4, a2);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(v4, a2);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::InitMutableArcIterator()
{
}

void sub_1B1AB5594(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::VectorFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FB90;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A2C0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1B1AB5694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~VectorFstBaseImpl(void *a1)
{
  *a1 = &unk_1F0A3D0C0;
  uint64_t v2 = (void *)a1[9];
  if (v2 != (void *)a1[8])
  {
    unint64_t v3 = 0;
    uint64_t v2 = (void *)a1[8];
    do
    {
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Destroy(v2[v3++]);
      uint64_t v2 = (void *)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (void)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~VectorFstImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Properties(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~VectorFstBaseImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~FstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~FstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FB90;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Destroy(uint64_t a1)
{
  if (a1)
  {
    uint64_t v3 = (void **)(a1 + 48);
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    uint64_t v2 = *(void **)(a1 + 8);
    if (v2)
    {
      *(void *)(a1 + 16) = v2;
      operator delete(v2);
    }
    operator delete((void *)a1);
  }
}

void std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 48)
  {
    uint64_t v4 = *(void **)(i - 32);
    if (v4)
    {
      *(void *)(i - 24) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Write(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

{
  fst *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B1AB5AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1AB5BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::operator=(uint64_t a1)
{
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(*(void *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1B1AB5CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(uint64_t result)
{
  if (*(int *)(*(void *)(result + 8) + 56) >= 2) {
    operator new();
  }
  return result;
}

void sub_1B1AB5D70(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FB90;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  uint64_t v5 = (void *)(a1 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A2C0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v7);
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 1, 0))
  {
    int v8 = fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v8);
  }
  unsigned int v21 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v19);
  while (1)
  {
    if (!v19)
    {
      if ((int)v21 >= v20) {
        goto LABEL_33;
      }
LABEL_11:
      uint64_t v9 = v21;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v19 + 16))(v19)) {
      break;
    }
    if (!v19) {
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v19 + 24))();
LABEL_12:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::AddState((void *)a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32))(&v16, a2, v9);
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::SetFinal(a1, v9, &v16);
    if (v17)
    {
      uint64_t v18 = v17;
      operator delete(v17);
    }
    unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v9);
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::reserve((uint64_t *)(*(void *)(*v5 + 8 * (int)v9) + 48), v10);
    std::string::size_type v15 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a2 + 136))(a2, v9, &__p);
    while (1)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        if (v15 >= __p.__r_.__value_.__r.__words[2]) {
          goto LABEL_26;
        }
LABEL_20:
        unint64_t v11 = (_DWORD *)(__p.__r_.__value_.__l.__size_ + 48 * v15);
        goto LABEL_21;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0])) {
        break;
      }
      if (!__p.__r_.__value_.__r.__words[0]) {
        goto LABEL_20;
      }
      unint64_t v11 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__p.__r_.__value_.__l.__data_ + 32))();
LABEL_21:
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::AddArc(*(void **)(*v5 + 8 * (int)v9), v11);
      if (__p.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 40))(__p.__r_.__value_.__r.__words[0]);
      }
      else {
        ++v15;
      }
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(void *)__p.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_28;
    }
LABEL_26:
    if (v14) {
      --*v14;
    }
LABEL_28:
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 32))(v19);
    }
    else {
      ++v21;
    }
  }
  if (v19) {
    (*(void (**)(void))(*(void *)v19 + 8))();
  }
LABEL_33:
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(void *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1B1AB6288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~VectorFstBaseImpl(v21);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result != a2)
  {
    if (result) {
      (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    }
    if (a2) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    }
    else {
      uint64_t result = 0;
    }
    *(void *)(a1 + 40) = result;
  }
  return result;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result != a2)
  {
    if (result) {
      (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    }
    if (a2) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    }
    else {
      uint64_t result = 0;
    }
    *(void *)(a1 + 48) = result;
  }
  return result;
}

uint64_t fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 160);
    return v2(a1);
  }
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

void sub_1B1AB6608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>();
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::AddState(void *a1)
{
  uint64_t v2 = (char *)operator new(0x48uLL);
  unint64_t v3 = a1[10];
  *(int32x2_t *)uint64_t v2 = vdup_n_s32(0x7F800000u);
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  uint64_t v4 = (void *)a1[9];
  if ((unint64_t)v4 >= v3)
  {
    uint64_t v6 = a1[8];
    uint64_t v7 = ((uint64_t)v4 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v3 - v6;
    uint64_t v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10) {
      unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 10), v10);
    }
    else {
      unint64_t v11 = 0;
    }
    char v12 = &v11[8 * v7];
    char v13 = &v11[8 * v10];
    *(void *)char v12 = v2;
    uint64_t v5 = v12 + 8;
    std::string::size_type v15 = (char *)a1[8];
    uint64_t v14 = (char *)a1[9];
    if (v14 != v15)
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }
      while (v14 != v15);
      uint64_t v14 = (char *)a1[8];
    }
    a1[8] = v12;
    a1[9] = v5;
    a1[10] = v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *uint64_t v4 = v2;
    uint64_t v5 = v4 + 1;
  }
  a1[9] = v5;
  return (((unint64_t)v5 - a1[8]) >> 3) - 1;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::SetFinal(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 8 * a2);
  uint64_t v4 = *a3;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a3[1], a3[2], (a3[2] - a3[1]) >> 2);
  *(void *)uint64_t v3 = v4;
  if ((uint64_t *)v3 != &v4) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v3 + 8), (char *)__p, (uint64_t)v6, (v6 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
}

void sub_1B1AB67C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 48 * v6;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B1AB687C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  char v17 = 0;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    uint64_t v10 = a3;
    do
    {
      uint64_t v11 = *(void *)(v10 - 48);
      v10 -= 48;
      *(void *)(v7 - 48) = v11;
      uint64_t v12 = *(void *)(v10 + 8);
      *(void *)(v7 - 32) = 0;
      uint64_t v13 = v7 - 32;
      *(void *)(v7 - 40) = v12;
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(v7 - 32), *(const void **)(v10 + 16), *(void *)(v10 + 24), (uint64_t)(*(void *)(v10 + 24) - *(void *)(v10 + 16)) >> 2);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(v9 - 8);
      uint64_t v7 = *((void *)&v19 + 1) - 48;
      *((void *)&v19 + 1) -= 48;
      uint64_t v9 = v10;
    }
    while (v10 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

void sub_1B1AB6A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 16);
    if (v3)
    {
      *(void *)(v1 + 24) = v3;
      operator delete(v3);
    }
    v1 += 48;
  }
}

uint64_t std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 48;
    uint64_t v5 = *(void **)(v2 - 32);
    if (v5)
    {
      *(void *)(v2 - 24) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 48;
    }
  }
}

uint64_t fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::AddArc(void *a1, _DWORD *a2)
{
  if (!*a2) {
    ++a1[4];
  }
  if (!a2[1]) {
    ++a1[5];
  }
  uint64_t v3 = a1 + 6;
  unint64_t v4 = a1[7];
  if (v4 >= a1[8])
  {
    uint64_t result = std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const&>(v3, (uint64_t)a2);
  }
  else
  {
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const&>((uint64_t)v3, (uint64_t)a2);
    uint64_t result = v4 + 48;
  }
  a1[7] = result;
  return result;
}

void *std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = *(void *)a2;
  *(void *)(v4 + 8) = *(void *)(a2 + 8);
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 16) = 0;
  uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(v4 + 16), *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_1B1AB6C28(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[12 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  char v17 = (char *)&v10[12 * v9];
  *uint64_t v11 = *(void *)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  v11[2] = 0;
  v11 += 2;
  *(v11 - 1) = v12;
  v11[1] = 0;
  v11[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  v10[12 * v4 + 10] = *(_DWORD *)(a2 + 40);
  v16 += 6;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B1AB6D54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v9 = &v6[8 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

unint64_t fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (FLAGS_fst_verify_properties)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    unint64_t v7 = fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a1, a2, a3, 0);
    if (!fst::CompatProperties(v6, v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      uint64_t v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      unint64_t v9 = (void *)fst::cerr(v8);
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a1, a2, a3, 1);
  }
}

void sub_1B1AB6F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v7 = a1;
  unint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v9 = v8;
  if (!a4
    || (uint64_t v10 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7, (a2 & ~v10) != 0))
  {
    unint64_t v9 = v8 & 7;
    unint64_t v77 = v9;
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
    if ((a2 & 0xF3C00000000) != 0 && v11)
    {
      uint64_t v71 = 0;
      uint64_t v72 = 0;
      uint64_t v73 = 0;
      uint64_t v74 = &v77;
      fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, (uint64_t)&v71);
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      uint64_t v12 = a2 & 0xC0000;
      uint64_t v13 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0) {
        uint64_t v13 = 0x10425A850000;
      }
      unint64_t v14 = v9 | v13;
      uint64_t v15 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0) {
        v14 |= 0x100000uLL;
      }
      unint64_t v77 = v14;
      memset(&v70, 0, sizeof(v70));
      memset(&v69, 0, sizeof(v69));
      unsigned int v68 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 128))(v7, &v66);
      int v16 = 0;
      uint64_t v60 = v7;
LABEL_12:
      if (v66)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v66 + 16))(v66))
        {
          if (v66)
          {
            uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v66 + 24))();
LABEL_18:
            std::vector<unsigned int>::size_type v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, v17);
            uint64_t v73 = 0;
            uint64_t v74 = 0;
            uint64_t v75 = 0;
            v70.__end_ = v70.__begin_;
            v69.__end_ = v69.__begin_;
            if (v12) {
              std::vector<int>::reserve(&v70, v18);
            }
            if (v15) {
              std::vector<int>::reserve(&v69, v18);
            }
            unint64_t v65 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v7 + 136))(v7, v17, &v61);
            char v19 = 1;
            while (1)
            {
              if (v61)
              {
                if ((*(unsigned int (**)(uint64_t))(*(void *)v61 + 24))(v61))
                {
                  if (v61)
                  {
                    (*(void (**)(void))(*(void *)v61 + 8))();
                  }
                  else
                  {
LABEL_96:
                    if (v64) {
                      --*v64;
                    }
                  }
                  uint64_t v7 = v60;
                  if (v12
                    && (std::__sort<std::__less<int,int> &,int *>(),
                        (std::vector<unsigned int>::pointer)((char *)v70.__end_ - (char *)v70.__begin_) >= (std::vector<unsigned int>::pointer)5))
                  {
                    unint64_t v47 = v70.__end_ - v70.__begin_;
                    if (v47 <= 2) {
                      unint64_t v47 = 2;
                    }
                    std::vector<unsigned int>::pointer v48 = v70.__begin_ + 1;
                    unsigned int v49 = *v70.__begin_;
                    unint64_t v50 = v47 - 1;
                    while (1)
                    {
                      unsigned int v52 = *v48++;
                      unsigned int v51 = v52;
                      if (v52 == v49) {
                        break;
                      }
                      unsigned int v49 = v51;
                      if (!--v50) {
                        goto LABEL_105;
                      }
                    }
                    unint64_t v77 = v77 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                    if (!v15)
                    {
LABEL_116:
                      if (v16 >= 1) {
                        unint64_t v77 = v77 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      }
                      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v60 + 32))(&v61, v60, v17);
                      float v80 = *((float *)&v61 + 1);
                      float v81 = *(float *)&v61;
                      int v79 = 2139095040;
                      float v78 = INFINITY;
                      if (*(float *)&v61 == INFINITY && v80 == v78 && v63 == __p)
                      {
                        if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v60 + 40))(v60, v17) != 1) {
                          unint64_t v77 = v77 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                        }
                      }
                      else
                      {
                        float v80 = *((float *)&v61 + 1);
                        float v81 = *(float *)&v61;
                        int v79 = 0;
                        float v78 = 0.0;
                        if (*(float *)&v61 != 0.0 || v80 != v78 || v63 != __p) {
                          unint64_t v77 = v77 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                        }
                        ++v16;
                      }
                      if (__p)
                      {
                        uint64_t v63 = __p;
                        operator delete(__p);
                      }
                      if (v73)
                      {
                        uint64_t v74 = (unint64_t *)v73;
                        operator delete(v73);
                      }
                      if (v66) {
                        (*(void (**)(uint64_t))(*(void *)v66 + 32))(v66);
                      }
                      else {
                        ++v68;
                      }
                      goto LABEL_12;
                    }
                  }
                  else
                  {
LABEL_105:
                    if (!v15) {
                      goto LABEL_116;
                    }
                  }
                  std::__sort<std::__less<int,int> &,int *>();
                  if ((std::vector<unsigned int>::pointer)((char *)v69.__end_ - (char *)v69.__begin_) >= (std::vector<unsigned int>::pointer)5)
                  {
                    unint64_t v53 = v69.__end_ - v69.__begin_;
                    if (v53 <= 2) {
                      unint64_t v53 = 2;
                    }
                    std::vector<unsigned int>::pointer v54 = v69.__begin_ + 1;
                    unsigned int v55 = *v69.__begin_;
                    unint64_t v56 = v53 - 1;
                    while (1)
                    {
                      unsigned int v58 = *v54++;
                      unsigned int v57 = v58;
                      if (v58 == v55) {
                        break;
                      }
                      unsigned int v55 = v57;
                      if (!--v56) {
                        goto LABEL_116;
                      }
                    }
                    unint64_t v77 = v77 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                  }
                  goto LABEL_116;
                }
                if (v61)
                {
                  int v20 = (char *)(*(uint64_t (**)(void))(*(void *)v61 + 32))();
                  goto LABEL_29;
                }
              }
              else if (v65 >= (unint64_t)v63)
              {
                goto LABEL_96;
              }
              int v20 = (char *)__p + 48 * v65;
LABEL_29:
              int v21 = *(_DWORD *)v20;
              int v22 = *(_DWORD *)v20;
              if (*(_DWORD *)v20 != *((_DWORD *)v20 + 1))
              {
                unint64_t v77 = v77 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
                int v22 = *((_DWORD *)v20 + 1);
              }
              if (v21 | v22)
              {
                if (v21)
                {
                  if (v22) {
                    goto LABEL_35;
                  }
                  goto LABEL_39;
                }
                unint64_t v23 = v77;
              }
              else
              {
                unint64_t v23 = v77 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
              }
              unint64_t v77 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
              if (v22)
              {
LABEL_35:
                if (v19) {
                  goto LABEL_44;
                }
                goto LABEL_40;
              }
LABEL_39:
              unint64_t v77 = v77 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
              if (v19) {
                goto LABEL_44;
              }
LABEL_40:
              if (v21 < (int)v71) {
                unint64_t v77 = v77 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
              }
              if (v22 < SHIDWORD(v71)) {
                unint64_t v77 = v77 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
              }
LABEL_44:
              float v24 = *((float *)v20 + 2);
              float v25 = *((float *)v20 + 3);
              float v81 = v24;
              float v80 = v25;
              int v79 = 0;
              float v78 = 0.0;
              if (v24 != 0.0 || v80 != v78 || *((void *)v20 + 3) != *((void *)v20 + 2))
              {
                float v81 = v24;
                float v80 = v25;
                int v79 = 2139095040;
                float v78 = INFINITY;
                if (v24 != INFINITY || v80 != v78 || *((void *)v20 + 3) != *((void *)v20 + 2)) {
                  unint64_t v77 = v77 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                }
              }
              int v26 = *((_DWORD *)v20 + 10);
              if (v26 <= (int)v17) {
                unint64_t v77 = v77 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
              }
              if (v26 != v17 + 1) {
                unint64_t v77 = v77 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              uint64_t v71 = *(void *)v20;
              fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)&v72, (uint64_t)(v20 + 8));
              int v76 = *((_DWORD *)v20 + 10);
              if (v12)
              {
                std::vector<unsigned int>::pointer end = v70.__end_;
                if (v70.__end_ >= v70.__end_cap_.__value_)
                {
                  std::vector<unsigned int>::pointer begin = v70.__begin_;
                  int64_t v30 = v70.__end_ - v70.__begin_;
                  unint64_t v31 = v30 + 1;
                  if ((unint64_t)(v30 + 1) >> 62) {
                    goto LABEL_147;
                  }
                  int64_t v32 = (char *)v70.__end_cap_.__value_ - (char *)v70.__begin_;
                  if (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 1 > v31) {
                    unint64_t v31 = v32 >> 1;
                  }
                  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v33 = v31;
                  }
                  if (v33)
                  {
                    unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v70.__end_cap_, v33);
                    std::vector<unsigned int>::pointer begin = v70.__begin_;
                    std::vector<unsigned int>::pointer end = v70.__end_;
                  }
                  else
                  {
                    unint64_t v34 = 0;
                  }
                  unint64_t v35 = (unsigned int *)&v34[4 * v30];
                  unsigned int *v35 = *(_DWORD *)v20;
                  uint64_t v28 = v35 + 1;
                  while (end != begin)
                  {
                    unsigned int v36 = *--end;
                    *--unint64_t v35 = v36;
                  }
                  v70.__begin_ = v35;
                  v70.__end_ = v28;
                  v70.__end_cap_.__value_ = (unsigned int *)&v34[4 * v33];
                  if (begin) {
                    operator delete(begin);
                  }
                }
                else
                {
                  *v70.__end_ = *(_DWORD *)v20;
                  uint64_t v28 = end + 1;
                }
                v70.__end_ = v28;
              }
              if (v15)
              {
                std::vector<unsigned int>::pointer v37 = v69.__end_;
                if (v69.__end_ >= v69.__end_cap_.__value_)
                {
                  std::vector<unsigned int>::pointer v39 = v69.__begin_;
                  int64_t v40 = v69.__end_ - v69.__begin_;
                  unint64_t v41 = v40 + 1;
                  if ((unint64_t)(v40 + 1) >> 62) {
LABEL_147:
                  }
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  int64_t v42 = (char *)v69.__end_cap_.__value_ - (char *)v69.__begin_;
                  if (((char *)v69.__end_cap_.__value_ - (char *)v69.__begin_) >> 1 > v41) {
                    unint64_t v41 = v42 >> 1;
                  }
                  if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v43 = v41;
                  }
                  if (v43)
                  {
                    uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v69.__end_cap_, v43);
                    std::vector<unsigned int>::pointer v39 = v69.__begin_;
                    std::vector<unsigned int>::pointer v37 = v69.__end_;
                  }
                  else
                  {
                    uint64_t v44 = 0;
                  }
                  char v45 = (unsigned int *)&v44[4 * v40];
                  *char v45 = *((_DWORD *)v20 + 1);
                  uint64_t v38 = v45 + 1;
                  while (v37 != v39)
                  {
                    unsigned int v46 = *--v37;
                    *--char v45 = v46;
                  }
                  v69.__begin_ = v45;
                  v69.__end_ = v38;
                  v69.__end_cap_.__value_ = (unsigned int *)&v44[4 * v43];
                  if (v39) {
                    operator delete(v39);
                  }
                }
                else
                {
                  *v69.__end_ = *((_DWORD *)v20 + 1);
                  uint64_t v38 = v37 + 1;
                }
                v69.__end_ = v38;
              }
              if (v61)
              {
                (*(void (**)(uint64_t))(*(void *)v61 + 40))(v61);
                char v19 = 0;
              }
              else
              {
                char v19 = 0;
                ++v65;
              }
            }
          }
LABEL_17:
          uint64_t v17 = v68;
          goto LABEL_18;
        }
        if (v66) {
          (*(void (**)(void))(*(void *)v66 + 8))();
        }
      }
      else if ((int)v68 < v67)
      {
        goto LABEL_17;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 24))(v7) != -1
        && (*(unsigned int (**)(uint64_t))(*(void *)v7 + 24))(v7))
      {
        unint64_t v77 = v77 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      }
      if (v69.__begin_)
      {
        v69.__end_ = v69.__begin_;
        operator delete(v69.__begin_);
      }
      if (v70.__begin_)
      {
        v70.__end_ = v70.__begin_;
        operator delete(v70.__begin_);
      }
      unint64_t v9 = v77;
    }
    uint64_t v10 = v9 & 0x3FFFFFFF0000 | (2 * v9) & 0x2AAAAAAA0000 | (v9 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v10;
  return v9;
}

void sub_1B1AB79E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B1AB8354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  int v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::InitVisit(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a1 + 52) = 0;
    **(void **)(a1 + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    operator new();
  }
  operator new();
}

void fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::FinishState(uint64_t a1, int a2, int a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 32) + 32))(&v22);
  float v27 = *((float *)&v22 + 1);
  int v28 = v22;
  int v26 = 2139095040;
  float v25 = INFINITY;
  BOOL v6 = *(float *)&v22 != INFINITY || v27 != v25 || v24 != __p;
  if (__p)
  {
    float v24 = __p;
    operator delete(__p);
  }
  if (v6) {
    *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  uint64_t v7 = **(void **)(a1 + 64);
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * a2) != *(_DWORD *)(v7 + 4 * a2)) {
    goto LABEL_21;
  }
  char v8 = 0;
  uint64_t v9 = *(void **)(a1 + 80);
  uint64_t v10 = v9[1];
  uint64_t v11 = **(void **)(a1 + 16);
  uint64_t v12 = (int *)(((v10 - *v9) & 0xFFFFFFFFFFFFFFFCLL) + *v9 - 4);
  do
  {
    unint64_t v13 = *v12--;
    v8 |= *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
  }
  while (v13 != a2);
  uint64_t v14 = *(void **)a1;
  uint64_t v15 = **(void **)(a1 + 72);
  for (uint64_t i = (int *)(v10 - 4); ; --i)
  {
    unint64_t v17 = *i;
    if (v14) {
      *(_DWORD *)(*v14 + 4 * v17) = *(_DWORD *)(a1 + 48);
    }
    unint64_t v18 = v17 >> 6;
    uint64_t v19 = 1 << v17;
    if ((v8 & 1) == 0) {
      break;
    }
    *(void *)(v11 + 8 * v18) |= v19;
    *(void *)(v15 + 8 * v18) &= ~v19;
    if (v17 == a2)
    {
      v9[1] = i;
      goto LABEL_20;
    }
LABEL_18:
    ;
  }
  *(void *)(v15 + 8 * v18) &= ~v19;
  if (v17 != a2) {
    goto LABEL_18;
  }
  v9[1] = i;
  **(void **)(a1 + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_20:
  ++*(_DWORD *)(a1 + 48);
LABEL_21:
  if (a3 != -1)
  {
    uint64_t v20 = **(void **)(a1 + 16);
    if ((*(void *)(v20 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2)) {
      *(void *)(v20 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    int v21 = *(_DWORD *)(v7 + 4 * a2);
    if (v21 < *(_DWORD *)(v7 + 4 * a3)) {
      *(_DWORD *)(v7 + 4 * a3) = v21;
    }
  }
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36CE8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36CE8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36CE8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B1AB8850(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Size()
{
  return 48;
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37CA0;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B1AB8968(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37CA0;
  uint64_t v2 = a1 + 3;
  for (uint64_t i = (void *)a1[4]; i != v2; uint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      std::vector<unsigned int>::pointer v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      std::vector<unsigned int>::pointer v37 = &v34[8 * v47];
      std::vector<unsigned int>::pointer v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unsigned int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unsigned int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  float v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1AB8DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(void *)a2 + 136))(a2, a3, &v25);
  if (!v25 && (a4 & 1) == 0)
  {
    uint64_t v10 = v26 + 48 * v27;
    *(void *)(a1 + 16) = v26;
    *(void *)(a1 + 24) = v10;
    if (*(void *)a1)
    {
      free(*(void **)a1);
      *(void *)a1 = 0;
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
  uint64_t v12 = a5;
  if (!a4) {
    uint64_t v12 = 0;
  }
  unint64_t v13 = v11 + v12;
  if (*(void *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(void *)a1) {
      free(*(void **)a1);
    }
    uint64_t v24 = 0x4000;
    if (v13 > 0x4000) {
      uint64_t v24 = v13;
    }
    *(void *)(a1 + 8) = v24;
    uint64_t v15 = malloc_type_malloc(48 * v24, 0x1010040A52E2B18uLL);
    *(void *)a1 = v15;
    *(void *)(a1 + 16) = v15;
    BOOL v14 = v15;
  }
  else
  {
    BOOL v14 = *(void **)(a1 + 16);
    uint64_t v15 = *(void **)a1;
  }
  *(void *)(a1 + 24) = &v14[6 * v13];
  uint64_t v16 = v25;
  uint64_t v17 = v26;
  unint64_t v19 = v27;
  uint64_t v18 = v28;
  if (v28) {
    ++*v28;
  }
  unint64_t v20 = 0;
LABEL_13:
  v15 += 6;
  while (v16)
  {
    int v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    uint64_t v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    *(v15 - 6) = *(void *)v23;
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v15 - 5), v23 + 8);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 40);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 6;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  uint64_t v23 = v17 + 48 * v20;
  if (v20 < v19) {
    goto LABEL_18;
  }
  if (v18) {
    --*v18;
  }
}

void sub_1B1AB908C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::WriteFst<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  long long v38 = 0u;
  long long v39 = 0u;
  *(_OWORD *)uint64_t v36 = 0u;
  *(_OWORD *)std::vector<unsigned int>::pointer v37 = 0u;
  uint64_t v6 = -1;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = -1;
  uint64_t v40 = (*(int (**)(void *))(*a1 + 24))(a1);
  uint64_t v41 = -1;
  if ((*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 1, 0))
  {
    uint64_t v6 = 0;
LABEL_3:
    int v7 = 0;
    uint64_t v41 = (int)fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>((uint64_t)a1);
    goto LABEL_6;
  }
  unint64_t v8 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)v8 + 5) + 32))(__p);
    uint64_t v6 = v44;
    if (v44 != -1) {
      goto LABEL_3;
    }
  }
  int v7 = 1;
LABEL_6:
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v9 |= 3uLL;
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, 2, __p, v9, (uint64_t)v35);
  uint64_t v31 = v9;
  uint64_t v32 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  unint64_t v10 = *(void *)(a1[1] + 72) - *(void *)(a1[1] + 64);
  unint64_t v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    int v33 = v7;
    uint64_t v12 = 0;
    uint64_t v13 = (v10 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, void *, uint64_t))(*a1 + 32))(__p, a1, v12);
      fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Write((uint64_t)__p, a2);
      if (__p[0].__r_.__value_.__l.__size_)
      {
        __p[0].__r_.__value_.__r.__words[2] = __p[0].__r_.__value_.__l.__size_;
        operator delete((void *)__p[0].__r_.__value_.__l.__size_);
      }
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v12);
      std::ostream::write();
      uint64_t v14 = *(void *)(*(void *)(a1[1] + 64) + 8 * v12);
      uint64_t v16 = *(void *)(v14 + 48);
      uint64_t v15 = *(void *)(v14 + 56);
      if (v15 == v16) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = *(_DWORD **)(v14 + 48);
      }
      if (v15 != v16)
      {
        if ((unint64_t)((v15 - v16) / 48) <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = (v15 - v16) / 48;
        }
        unint64_t v19 = v17;
        do
        {
          int v20 = *v19;
          v19 += 12;
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v20;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[1];
          std::ostream::write();
          fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Write((uint64_t)(v17 + 2), a2);
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[10];
          std::ostream::write();
          uint64_t v17 = v19;
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != v13);
    int v7 = v33;
  }
  std::ostream::flush();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    int v21 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)__p);
    uint64_t v22 = (void *)fst::cerr(v21);
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"VectorFst::Write: write failed: ", 32);
    int v24 = *(char *)(a3 + 23);
    if (v24 >= 0) {
      uint64_t v25 = a3;
    }
    else {
      uint64_t v25 = *(void *)a3;
    }
    if (v24 >= 0) {
      uint64_t v26 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v26 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_32:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v34);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t updated = 0;
    goto LABEL_35;
  }
  if (!v7)
  {
    if (v41 == v11)
    {
      uint64_t updated = 1;
      goto LABEL_35;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    uint64_t v29 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)__p);
    long long v30 = (void *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_32;
  }
  uint64_t v41 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t updated = fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v31, (uint64_t)v35, v32);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_35:
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[1]);
  }
  if (SHIBYTE(v37[0]) < 0) {
    operator delete(v36[0]);
  }
  return updated;
}

void sub_1B1AB95A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a15);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::WriteFstHeader(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    uint64_t v13 = (const std::string *)fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(void *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
      BOOL v14 = a3[25] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = !v14;
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    if (a3[26]) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v15 | 2;
    if (v17) {
      int v18 = v15;
    }
    if (a3[27]) {
      v18 |= 4u;
    }
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
    BOOL v19 = a3[25] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 72))(v20, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (result && a3[26])
  {
    uint64_t v22 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1) + 72);
    return v22();
  }
  return result;
}

void *fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Write(uint64_t a1, void *a2)
{
  fst::LatticeWeightTpl<float>::Write(a1, (uint64_t)a2);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0)
  {
    unint64_t v4 = *(void *)(a1 + 16) - *(void *)(a1 + 8);
    std::ostream::write();
    if ((int)(v4 >> 2) >= 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = v4 & 0x3FFFFFFFCLL;
      do
      {
        std::ostream::write();
        v5 += 4;
      }
      while (v6 != v5);
    }
  }
  return a2;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::UpdateFstHeader(uint64_t a1, void *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1B3EA7E70](v32);
  uint64_t v16 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    uint64_t v17 = *((void *)v16 + 5);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long __p = 0u;
    long long v35 = 0u;
    uint64_t v42 = a8;
    (*(void (**)(void *__return_ptr))(*(void *)v17 + 40))(v33);
    if (v33[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  MEMORY[0x1B3EA7E80](v32);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    int v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    BOOL v19 = (void *)fst::cerr(v18);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    int v21 = *(char *)(a3 + 23);
    if (v21 >= 0) {
      uint64_t v22 = a3;
    }
    else {
      uint64_t v22 = *(void *)a3;
    }
    if (v21 >= 0) {
      uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v23 = *(void *)(a3 + 8);
    }
  }
  else
  {
    fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::WriteFstHeader(a1, (uint64_t)a2, (unsigned char *)a3, a4, a5, a6, a7);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      int v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v25 = (void *)fst::cerr(v24);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v26 = *(char *)(a3 + 23);
      if (v26 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v26 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
    else
    {
      MEMORY[0x1B3EA7E70](v33, a2);
      unint64_t v27 = (char *)a2 + *(void *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(long long *__return_ptr))(**((void **)v27 + 5) + 32))(&__p);
        if (v42 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
        }
      }
      MEMORY[0x1B3EA7E80](v33);
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0) {
        return 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      uint64_t v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v29 = (void *)fst::cerr(v28);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v30 = *(char *)(a3 + 23);
      if (v30 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v30 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0) {
    operator delete((void *)__p);
  }
  return 0;
}

void sub_1B1AB9CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

void fst::FstHeader::~FstHeader(void **this)
{
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::Type()
{
  {
    operator new();
  }
  return fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::Type(void)::type;
}

void sub_1B1AB9DD8(_Unwind_Exception *a1)
{
}

uint64_t fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>::Type()
{
  {
    operator new();
  }
  return fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>::Type(void)::type;
}

void sub_1B1AB9ED8(_Unwind_Exception *a1)
{
}

uint64_t fst::LatticeWeightTpl<float>::Write(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::WriteFile(fst *a1, uint64_t a2)
{
  v25[19] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream((uint64_t *)&v20);
      if ((v24[*(void *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        unint64_t v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        uint64_t v5 = (void *)fst::cerr(v4);
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        int v7 = *(char *)(a2 + 23);
        if (v7 >= 0) {
          unint64_t v8 = (const std::string::value_type *)a2;
        }
        else {
          unint64_t v8 = *(const std::string::value_type **)a2;
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v9 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v10 = 0;
      }
      else
      {
        char v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string __p = *(std::string *)a2;
        }
        __int16 v16 = 257;
        char v17 = 1;
        char v18 = v13;
        uint64_t v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(void *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA400];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(void *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA400]
                                                                                                  + 24);
      MEMORY[0x1B3EA7CF0](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1B3EA8520](v25);
      return v10;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    goto LABEL_5;
  }
  uint64_t v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  char v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = __p;
  }
  __int16 v21 = 257;
  char v22 = 1;
  char v23 = v12;
  uint64_t v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(void *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1B1ABA288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

uint64_t *std::ofstream::basic_ofstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA468] + 64;
  a1[52] = MEMORY[0x1E4FBA468] + 64;
  BOOL v3 = a1 + 1;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA400] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA400] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 1);
  uint64_t v7 = MEMORY[0x1E4FBA468] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[52] = v2;
  MEMORY[0x1B3EA7CE0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;

  uint64_t v2 = MEMORY[0x1E4FBA468] + 64;
  a1[52] = MEMORY[0x1E4FBA468] + 64;
  BOOL v3 = a1 + 1;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA400] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA400] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 1);
  uint64_t v7 = MEMORY[0x1E4FBA468] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[52] = v2;
  MEMORY[0x1B3EA7CE0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_1B1ABA48C(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](v1);
  _Unwind_Resume(a1);
}

void *std::ofstream::~ofstream(void *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA400];
  uint64_t v3 = *MEMORY[0x1E4FBA400];
  *a1 = *MEMORY[0x1E4FBA400];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x1B3EA7CF0](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](a1 + 52);
  return a1;
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::SetFinal(void *a1, int a2, uint64_t a3)
{
  uint64_t v6 = *(uint64_t **)(a1[8] + 8 * a2);
  uint64_t v20 = *v6;
  char v22 = 0;
  uint64_t v23 = 0;
  __int16 v21 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, (const void *)v6[1], v6[2], (v6[2] - v6[1]) >> 2);
  uint64_t v16 = *(void *)a3;
  char v18 = 0;
  uint64_t v19 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a3 + 8), *(void *)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 2);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::SetFinal((uint64_t)a1, a2, &v16);
  if (__p)
  {
    char v18 = __p;
    operator delete(__p);
  }
  unint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  uint64_t v12 = v20;
  BOOL v14 = 0;
  uint64_t v15 = 0;
  char v13 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v13, v21, (uint64_t)v22, (v22 - (unsigned char *)v21) >> 2);
  uint64_t v8 = *(void *)a3;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v9, *(const void **)(a3 + 8), *(void *)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 2);
  a1[1] = a1[1] & 4 | fst::SetFinalProperties<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>(v7, (uint64_t)&v12, (uint64_t)&v8);
  if (v9)
  {
    uint64_t v10 = v9;
    operator delete(v9);
  }
  if (v13)
  {
    BOOL v14 = v13;
    operator delete(v13);
  }
  if (v21)
  {
    char v22 = v21;
    operator delete(v21);
  }
}

void sub_1B1ABA70C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  __int16 v21 = *(void **)(v19 - 56);
  if (v21)
  {
    *(void *)(v19 - 48) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SetFinalProperties<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(float *)a2 != INFINITY || *(float *)(a2 + 4) != INFINITY || *(void *)(a2 + 16) != *(void *)(a2 + 8))
    && (*(float *)a2 != 0.0 || *(float *)(a2 + 4) != 0.0 || *(void *)(a2 + 16) != *(void *)(a2 + 8)))
  {
    a1 &= ~0x100000000uLL;
  }
  if ((*(float *)a3 != INFINITY || *(float *)(a3 + 4) != INFINITY || *(void *)(a3 + 16) != *(void *)(a3 + 8))
    && (*(float *)a3 != 0.0 || *(float *)(a3 + 4) != 0.0 || *(void *)(a3 + 16) != *(void *)(a3 + 8)))
  {
    a1 = a1 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  return a1 & 0x3FFFFFF0007;
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::AddArc(void *a1, int a2, float *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1[8] + 8 * a2) + 56);
  if (v6 == *(void *)(*(void *)(a1[8] + 8 * a2) + 48)) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = (_DWORD *)(v6 - 48);
  }
  unint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(v8, a2, a3, v7);
  uint64_t v9 = *(void **)(a1[8] + 8 * a2);
  return fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::AddArc(v9, a3);
}

uint64_t fst::AddArcProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(unint64_t a1, int a2, float *a3, _DWORD *a4)
{
  float v4 = *a3;
  int v5 = *((_DWORD *)a3 + 1);
  unint64_t v6 = a1 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*(_DWORD *)a3 == v5) {
    unint64_t v6 = a1;
  }
  unint64_t v7 = v6 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v5) {
    unint64_t v7 = v6 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  }
  if (v4 == 0.0) {
    unint64_t v6 = v7;
  }
  if (!v5) {
    unint64_t v6 = v6 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  }
  if (a4)
  {
    if (*a4 > SLODWORD(v4)) {
      unint64_t v6 = v6 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    }
    if (a4[1] > v5) {
      unint64_t v6 = v6 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
    }
  }
  if ((a3[2] != INFINITY || a3[3] != INFINITY || *((void *)a3 + 3) != *((void *)a3 + 2))
    && (a3[2] != 0.0 || a3[3] != 0.0 || *((void *)a3 + 3) != *((void *)a3 + 2)))
  {
    unint64_t v6 = v6 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  if (*((_DWORD *)a3 + 10) <= a2) {
    unint64_t v6 = v6 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  }
  if ((v6 & 0x4000000000) != 0) {
    return v6 & 0x5D7FFEB0007 | 0x2800000000;
  }
  else {
    return v6 & 0x5D7FFEB0007;
  }
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  float v4 = (uint64_t *)(a1 + 64);
  std::vector<int>::size_type v5 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v33, v5, &__x);
  unint64_t v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 2;
    std::vector<int>::pointer begin = v33.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v11)
  {
    int v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      if (v33.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Destroy(*(void *)(v11 + 8 * v12));
      }
      else
      {
        v33.__begin_[v12] = v13;
        if (v12 != v13) {
          *(void *)(v11 + 8 * v13) = *(void *)(v11 + 8 * v12);
        }
        ++v13;
      }
      ++v12;
      uint64_t v11 = *(void *)(a1 + 64);
    }
    while (v12 < (*(void *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  uint64_t v14 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(int64x2_t **)(v14 + 8 * v15);
      int64x2_t v17 = v16[2];
      uint64_t v18 = v16[3].i64[1] - v16[3].i64[0];
      if (v18) {
        uint64_t v19 = v16[3].i64[0];
      }
      else {
        uint64_t v19 = 0;
      }
      if (v18)
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
        char v22 = (int *)(v19 + 40);
        do
        {
          int v23 = v33.__begin_[*v22];
          if (v23 == -1)
          {
            uint64_t v25 = *((void *)v22 - 5);
            v26.i64[0] = v25;
            v26.i64[1] = HIDWORD(v25);
            int64x2_t v17 = vaddq_s64(v17, vceqzq_s64(v26));
          }
          else
          {
            int *v22 = v23;
            if (v20 != v21)
            {
              int64x2_t v30 = v17;
              int v24 = (void *)(v19 + 48 * v21);
              *int v24 = *((void *)v22 - 5);
              fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v24 + 1), (uint64_t)(v22 - 8));
              *(_DWORD *)(v19 + 48 * v21 + 40) = *v22;
              uint64_t v14 = *v4;
              int64x2_t v17 = v30;
            }
            ++v21;
          }
          ++v20;
          uint64_t v16 = *(int64x2_t **)(v14 + 8 * v15);
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v16[3].i64[1] - v16[3].i64[0]) >> 4);
          v22 += 12;
        }
        while (v20 < v27);
        int64x2_t v31 = v17;
      }
      else
      {
        int64x2_t v31 = v16[2];
        uint64_t v21 = 0;
        unint64_t v27 = 0;
      }
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteArcs(v16, v27 - v21);
      uint64_t v14 = *(void *)(a1 + 64);
      *(int64x2_t *)(*(void *)(v14 + 8 * v15++) + 32) = v31;
    }
    while (v15 < (*(void *)(a1 + 72) - v14) >> 3);
  }
  uint64_t v28 = *(int *)(a1 + 88);
  if (v28 == -1)
  {
    uint64_t v29 = v33.__begin_;
    if (!v33.__begin_) {
      return;
    }
  }
  else
  {
    uint64_t v29 = v33.__begin_;
    *(_DWORD *)(a1 + 88) = v33.__begin_[v28];
  }
  v33.__end_ = v29;
  operator delete(v29);
}

void sub_1B1ABAD18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteArcs(void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1[7] - 48;
    do
    {
      if (!*(_DWORD *)v4) {
        --a1[4];
      }
      if (!*(_DWORD *)(v4 + 4)) {
        --a1[5];
      }
      std::vector<int>::size_type v5 = *(void **)(v4 + 16);
      if (v5)
      {
        *(void *)(v4 + 24) = v5;
        operator delete(v5);
      }
      a1[7] = v4;
      v4 -= 48;
      --v2;
    }
    while (v2);
  }
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::DeleteStates(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 != *(void *)(a1 + 64))
  {
    unint64_t v3 = 0;
    uint64_t v2 = *(void *)(a1 + 64);
    do
    {
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Destroy(*(void *)(v2 + 8 * v3++));
      uint64_t v2 = *(void *)(a1 + 64);
    }
    while (v3 < (*(void *)(a1 + 72) - v2) >> 3);
  }
  *(void *)(a1 + 72) = v2;
  *(_DWORD *)(a1 + 88) = -1;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::~MutableArcIterator()
{
}

uint64_t fst::ArcIteratorBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 24) >= 0xAAAAAAAAAAAAAAABLL
                               * ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 56)
                                          - *(void *)(*(void *)(a1 + 8) + 48)) >> 4);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Value_(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48) + 48 * *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Reset_(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Flags_()
{
  return 15;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::SetValue(uint64_t a1, float *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = v4[6];
  uint64_t v7 = (int *)(v6 + 48 * v5);
  int v8 = *v7;
  int v9 = v7[1];
  if (v8 != v9) {
    **(void **)(a1 + 16) &= ~0x20000uLL;
  }
  if (v8)
  {
    if (v9) {
      goto LABEL_9;
    }
    uint64_t v10 = *(unint64_t **)(a1 + 16);
    unint64_t v11 = *v10;
  }
  else
  {
    uint64_t v10 = *(unint64_t **)(a1 + 16);
    unint64_t v12 = *v10;
    *v10 &= ~0x1000000uLL;
    if (v9) {
      goto LABEL_9;
    }
    unint64_t v11 = v12 & 0xFFFFFFFFFEBFFFFFLL;
    *uint64_t v10 = v11;
  }
  *uint64_t v10 = v11 & 0xFFFFFFFFFBFFFFFFLL;
LABEL_9:
  uint64_t v13 = v6 + 48 * v5;
  if ((*(float *)(v13 + 8) != INFINITY
     || *(float *)(v13 + 12) != INFINITY
     || *(void *)(v6 + 48 * v5 + 24) != *(void *)(v6 + 48 * v5 + 16))
    && (*(float *)(v13 + 8) != 0.0
     || *(float *)(v13 + 12) != 0.0
     || *(void *)(v6 + 48 * v5 + 24) != *(void *)(v6 + 48 * v5 + 16)))
  {
    **(void **)(a1 + 16) &= ~0x100000000uLL;
  }
  uint64_t v14 = 0x30FC30007;
  BOOL v15 = *(_DWORD *)a2 == v8 && *((_DWORD *)a2 + 1) == v9;
  if (v15 && *((_DWORD *)a2 + 10) == *(_DWORD *)(v6 + 48 * v5 + 40)) {
    uint64_t v14 = 0x3FFFFFFF0007;
  }
  uint64_t result = fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetArc(v4, a2, v5);
  float v17 = *a2;
  int v18 = *((_DWORD *)a2 + 1);
  if (*(_DWORD *)a2 != v18) {
    **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  }
  if (v17 == 0.0)
  {
    uint64_t v19 = *(unint64_t **)(a1 + 16);
    unint64_t v21 = *v19 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *uint64_t v19 = v21;
    if (!v18)
    {
      unint64_t v20 = v21 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *uint64_t v19 = v20;
      goto LABEL_30;
    }
  }
  else if (!v18)
  {
    uint64_t v19 = *(unint64_t **)(a1 + 16);
    unint64_t v20 = *v19;
LABEL_30:
    *uint64_t v19 = v20 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  }
  if ((a2[2] != INFINITY || a2[3] != INFINITY || *((void *)a2 + 3) != *((void *)a2 + 2))
    && (a2[2] != 0.0 || a2[3] != 0.0 || *((void *)a2 + 3) != *((void *)a2 + 2)))
  {
    **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  **(void **)(a1 + 16) &= v14;
  return result;
}

uint64_t fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetArc(void *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4 = a1[6];
  uint64_t v5 = (_DWORD *)(v4 + 48 * a3);
  if (!*v5) {
    --a1[4];
  }
  if (!*(_DWORD *)(v4 + 48 * a3 + 4)) {
    --a1[5];
  }
  if (!*a2) {
    ++a1[4];
  }
  if (!a2[1]) {
    ++a1[5];
  }
  *(void *)uint64_t v5 = *(void *)a2;
  uint64_t v6 = v4 + 48 * a3;
  uint64_t result = fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v6 + 8, (uint64_t)(a2 + 2));
  *(_DWORD *)(v6 + 40) = a2[10];
  return result;
}

uint64_t std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__move_range(uint64_t result, uint64_t a2, unint64_t a3, char *a4)
{
  uint64_t v6 = result;
  uint64_t v7 = *(char **)(result + 8);
  uint64_t v8 = v7 - a4;
  unint64_t v9 = a2 + v7 - a4;
  uint64_t v10 = v7;
  if (v9 < a3)
  {
    unint64_t v12 = v7 + 8;
    do
    {
      *(v12 - 1) = *(void *)v9;
      v12[1] = 0;
      void v12[2] = 0;
      *unint64_t v12 = 0;
      uint64_t result = (uint64_t)std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v12, *(const void **)(v9 + 8), *(void *)(v9 + 16), (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 2);
      v12 += 4;
      v9 += 32;
    }
    while (v9 < a3);
    uint64_t v10 = (char *)(v12 - 1);
  }
  *(void *)(v6 + 8) = v10;
  if (v7 != a4)
  {
    uint64_t v13 = (uint64_t)(v7 - 32);
    uint64_t v14 = 32 * (v8 >> 5);
    uint64_t v15 = a2 - 32;
    do
    {
      uint64_t result = fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v13, v15 + v14);
      v13 -= 32;
      v14 -= 32;
    }
    while (v14);
  }
  return result;
}

void sub_1B1ABB318(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2 - 8;
  _Unwind_Resume(a1);
}

void *std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::push_back[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[2];
  if (v4 == (void *)a1[3])
  {
    unint64_t v5 = a1[1];
    uint64_t v6 = v5 - *a1;
    if (v5 <= *a1)
    {
      if (v4 == (void *)*a1) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = ((uint64_t)v4 - *a1) >> 4;
      }
      uint64_t v14 = a1[4];
      uint64_t v22 = a1[4];
      *(void *)&long long v20 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v14, v13);
      *((void *)&v20 + 1) = v20 + 32 * (v13 >> 2);
      *(void *)&long long v21 = *((void *)&v20 + 1);
      *((void *)&v21 + 1) = v20 + 32 * v15;
      std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_at_end_with_size<std::move_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>(&v20, a1[1], (uint64_t)(a1[2] - a1[1]) >> 5);
      long long v16 = v21;
      long long v17 = *(_OWORD *)a1;
      long long v18 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v20;
      *((_OWORD *)a1 + 1) = v16;
      long long v20 = v17;
      long long v21 = v18;
      std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)&v20);
      uint64_t v4 = (void *)a1[2];
    }
    else
    {
      uint64_t v7 = v6 >> 5;
      BOOL v8 = v6 >> 5 < -1;
      uint64_t v9 = (v6 >> 5) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      if ((void *)v5 == v4)
      {
        unint64_t v12 = (void *)(v5 - 32 * (v10 >> 1));
      }
      else
      {
        do
        {
          fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v5 + 32 * v11, v5);
          v5 += 32;
        }
        while ((void *)v5 != v4);
        uint64_t v4 = (void *)a1[1];
        unint64_t v12 = (void *)(v5 + 32 * v11);
      }
      a1[1] = &v4[4 * v11];
      a1[2] = v12;
      uint64_t v4 = v12;
    }
  }
  *uint64_t v4 = *(void *)a2;
  v4[2] = 0;
  v4[3] = 0;
  v4[1] = 0;
  uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4 + 1, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  a1[2] += 32;
  return result;
}

void sub_1B1ABB464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>(v7, a3, a1[1], (void *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_at_end_with_size<std::move_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  uint64_t v4 = result[2];
  if (a3)
  {
    uint64_t v6 = (void *)(v4 + 8);
    uint64_t v7 = 32 * a3;
    v4 += 32 * a3;
    do
    {
      *(v6 - 1) = *(void *)a2;
      v6[1] = 0;
      v6[2] = 0;
      void *v6 = 0;
      uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v6, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
      v6 += 4;
      a2 += 32;
      v7 -= 32;
    }
    while (v7);
  }
  v3[2] = v4;
  return result;
}

void sub_1B1ABB5AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2 - 8;
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = *(void *)v6;
      v4[2] = 0;
      v4[3] = 0;
      v4[1] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4 + 1, *(const void **)(v6 + 8), *(void *)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 2);
      uint64_t v4 = v11 + 4;
      v11 += 4;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1ABB660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    unint64_t v3 = *(void **)(v1 - 24);
    if (v3)
    {
      *(void *)(v1 - 16) = v3;
      operator delete(v3);
    }
    v1 -= 32;
  }
}

void fst::Connect<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1)
{
  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  uint64_t v2 = 0;
  v1[0] = 0;
  v1[1] = v4;
  v1[2] = v3;
  v1[3] = &v2;
  fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a1, (uint64_t)v1);
}

void sub_1B1ABB8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  unint64_t v13 = *(void **)(v11 - 112);
  if (v13) {
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(v11 - 88);
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__construct_one_at_end[abi:ne180100]<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_DWORD *)uint64_t v3 = *(_DWORD *)a2;
  *(void *)(v3 + 8) = *(void *)(a2 + 8);
  *(void *)(v3 + ++*(void *)(result + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 16) = 0;
  uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(v3 + 16), *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  *(void *)(a1 + 8) = v3 + 40;
  return result;
}

void sub_1B1ABB99C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__push_back_slow_path<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  long long v16 = &v10[40 * v9];
  *(_DWORD *)uint64_t v11 = *(_DWORD *)a2;
  *((void *)v11 + 1) = *(void *)(a2 + 8);
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v11 + 2, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  v15 += 40;
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B1ABBAB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v18 = a6;
  *((void *)&v18 + 1) = a7;
  long long v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  void v15[2] = &v18;
  char v16 = 0;
  if (a3 == a5)
  {
    uint64_t v13 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      int v10 = *(_DWORD *)(v9 - 40);
      v9 -= 40;
      uint64_t v11 = *(void *)(v9 + 8);
      *(void *)(v7 - ++*(void *)(result + 24) = 0;
      uint64_t v12 = (void *)(v7 - 24);
      *((_DWORD *)v12 - 4) = v10;
      *(v12 - 1) = v11;
      v12[1] = 0;
      void v12[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v12, *(const void **)(v9 + 16), *(void *)(v9 + 24), (uint64_t)(*(void *)(v9 + 24) - *(void *)(v9 + 16)) >> 2);
      uint64_t v7 = *((void *)&v18 + 1) - 40;
      *((void *)&v18 + 1) -= 40;
    }
    while (v9 != a5);
    uint64_t v13 = v18;
  }
  char v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

void sub_1B1ABBC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 16);
    if (v3)
    {
      *(void *)(v1 + ++*(void *)(result + 24) = v3;
      operator delete(v3);
    }
    v1 += 40;
  }
}

uint64_t std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 40;
    uint64_t v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
}

int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>> &,std::__wrap_iter<int *>>(int *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3
      && fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(a2, *v9, a1[v6 + 2]))
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>> &,std::__wrap_iter<int *>>(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (int *)(result + 4 * (v4 >> 1));
    uint64_t v9 = (int *)(a2 - 4);
    uint64_t result = fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(a3, *v8, *(_DWORD *)(a2 - 4));
    if (result)
    {
      int v10 = *v9;
      do
      {
        uint64_t v11 = v8;
        *uint64_t v9 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (int *)(v6 + 4 * v7);
        uint64_t result = fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(a3, *v8, v10);
        uint64_t v9 = v11;
      }
      while ((result & 1) != 0);
      *uint64_t v11 = v10;
    }
  }
  return result;
}

uint64_t fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(uint64_t **a1, int a2, int a3)
{
  uint64_t v6 = **a1;
  unint64_t v7 = (int *)(v6 + 40 * a2);
  uint64_t v8 = (int *)(v6 + 40 * a3);
  int v9 = *v7;
  int v10 = *((_DWORD *)a1 + 4);
  if (*v7 == v10)
  {
    long long v32 = 0u;
    long long v33 = 0u;
  }
  else
  {
    uint64_t v11 = *a1[1];
    if (v9 >= (unint64_t)((a1[1][1] - v11) >> 5))
    {
      long long v32 = (unint64_t)vdup_n_s32(0x7F800000u);
      long long v33 = 0uLL;
      int v9 = v10;
    }
    else
    {
      uint64_t v12 = (unint64_t *)(v11 + 32 * v9);
      long long v32 = *v12;
      long long v33 = 0uLL;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)&v32 + 1, (const void *)v12[1], v12[2], (uint64_t)(v12[2] - v12[1]) >> 2);
      int v9 = *((_DWORD *)a1 + 4);
    }
  }
  unint64_t v13 = *v8;
  if (v13 == v9)
  {
    *(_OWORD *)int64x2_t v30 = 0u;
    long long v31 = 0u;
  }
  else
  {
    uint64_t v14 = *a1[1];
    if (v13 >= (a1[1][1] - v14) >> 5)
    {
      v30[0] = (void *)vdup_n_s32(0x7F800000u);
      long long v31 = 0uLL;
      v30[1] = 0;
    }
    else
    {
      uint64_t v15 = v14 + 32 * v13;
      v30[0] = *(void **)v15;
      long long v31 = 0uLL;
      v30[1] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v30[1], *(const void **)(v15 + 8), *(void *)(v15 + 16), (uint64_t)(*(void *)(v15 + 16) - *(void *)(v15 + 8)) >> 2);
    }
  }
  fst::Times<fst::LatticeWeightTpl<float>,int>((float32x2_t *)&v32, (float32x2_t *)(v6 + 40 * a2 + 8), &v27);
  fst::Times<fst::LatticeWeightTpl<float>,int>((float32x2_t *)v30, (float32x2_t *)(v6 + 40 * a3 + 8), &v24);
  int v16 = *((_DWORD *)a1 + 4);
  int v17 = *v8;
  uint64_t v18 = (uint64_t)(a1 + 3);
  if (*v7 == v16 && v17 != v16)
  {
    char v22 = fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(v18, (uint64_t)&v24, (uint64_t)&v27);
    if (v22)
    {
LABEL_22:
      uint64_t v21 = 1;
      goto LABEL_35;
    }
    if ((*(float *)v27.i32 == *(float *)v24.i32 && *(float *)&v27.i32[1] == *(float *)&v24.i32[1]
       || vabds_f32(*(float *)v27.i32 + *(float *)&v27.i32[1], *(float *)v24.i32 + *(float *)&v24.i32[1]) <= *((float *)a1 + 5))
      && v29 - (unsigned char *)v28 == v26 - (unsigned char *)__p)
    {
      uint64_t v21 = memcmp(v28, __p, v29 - (unsigned char *)v28) == 0;
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  if (*v7 == v16 || v17 != v16)
  {
    uint64_t v21 = fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(v18, (uint64_t)&v24, (uint64_t)&v27);
    goto LABEL_35;
  }
  if (!fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(v18, (uint64_t)&v24, (uint64_t)&v27))
  {
LABEL_34:
    uint64_t v21 = 0;
    goto LABEL_35;
  }
  if ((*(float *)v27.i32 != *(float *)v24.i32 || *(float *)&v27.i32[1] != *(float *)&v24.i32[1])
    && vabds_f32(*(float *)v27.i32 + *(float *)&v27.i32[1], *(float *)v24.i32 + *(float *)&v24.i32[1]) > *((float *)a1 + 5)
    || v29 - (unsigned char *)v28 != v26 - (unsigned char *)__p)
  {
    goto LABEL_22;
  }
  uint64_t v21 = memcmp(v28, __p, v29 - (unsigned char *)v28) != 0;
LABEL_35:
  if (__p)
  {
    int64x2_t v26 = __p;
    operator delete(__p);
  }
  if (v28)
  {
    uint64_t v29 = v28;
    operator delete(v28);
  }
  if (v30[1])
  {
    *(void **)&long long v31 = v30[1];
    operator delete(v30[1]);
  }
  if (*((void *)&v32 + 1))
  {
    *(void *)&long long v33 = *((void *)&v32 + 1);
    operator delete(*((void **)&v32 + 1));
  }
  return v21;
}

void sub_1B1ABC15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  uint64_t v21 = *(void **)(v19 - 72);
  if (v21)
  {
    *(void *)(v19 - 64) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    unint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A3B178;
  a1[1] = 0;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v3 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
    unint64_t v4 = (void *)fst::cerr(v3);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"DeterminizeFst:", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" distance to final states computed for acceptors only", 53);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1[1] + 8) |= 4uLL;
  }
  operator new();
}

void sub_1B1ABC40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~ImplToFst(v18);
  _Unwind_Resume(a1);
}

_DWORD *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetImpl(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    ++*(_DWORD *)(a2 + 56);
  }
  uint64_t result = *(_DWORD **)(a1 + 8);
  if (result)
  {
    int v6 = result[14] - 1;
    result[14] = v6;
    if (!v6) {
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
  }
  *(void *)(a1 + 8) = a2;
  return result;
}

void *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A44878;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~DeterminizeFst(void *a1)
{
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Start(uint64_t a1)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Start(*(void *)(a1 + 8));
}

void *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Final(*(void *)(a1 + 8), a2, a3);
}

unint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::NumArcs(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::NumInputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::NumOutputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    char v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Copy()
{
}

void sub_1B1ABC70C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::InitStateIterator()
{
}

void sub_1B1ABC800(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1B1ABCA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~DeterminizeFstImplBase(v18);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::DeterminizeFstImplBase<fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1B1ABCC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~DeterminizeFstImplBase(void *a1)
{
  *a1 = &unk_1F0A3F370;
  uint64_t v2 = a1[17];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~CacheBaseImpl(a1);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(void *a1)
{
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::Copy()
{
}

void sub_1B1ABCE08(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405CF36722);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::Expand(void *a1, int a2)
{
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v8 = (uint64_t *)v9;
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::GetLabelMap(a1, a2, &v8);
  unint64_t v4 = v8;
  if (v8 != (uint64_t *)v9)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::AddArc((uint64_t)a1, a2, (uint64_t)(v4 + 5));
      unint64_t v5 = (uint64_t *)v4[1];
      if (v5)
      {
        do
        {
          int v6 = v5;
          unint64_t v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          int v6 = (uint64_t *)v4[2];
          BOOL v7 = *v6 == (void)v4;
          unint64_t v4 = v6;
        }
        while (!v7);
      }
      unint64_t v4 = v6;
    }
    while (v6 != (uint64_t *)v9);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetArcs((uint64_t)a1, a2);
  std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::destroy((uint64_t)&v8, v9[0]);
}

void sub_1B1ABCEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136)) != -1)
  {
    *(_OWORD *)std::string __p = 0u;
    long long v3 = 0u;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p[1], 0, 0, 0);
    operator new();
  }
  return 0xFFFFFFFFLL;
}

void sub_1B1ABCFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::ComputeFinal@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v4 = *(float32x2_t ***)(*(void *)(*(void *)(result + 184) + 88) + 8 * a2);
  *(int32x2_t *)a3 = vdup_n_s32(0x7F800000u);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + ++*(void *)(result + 24) = 0;
  unint64_t v5 = *v4;
  if (*v4)
  {
    uint64_t v6 = result;
    while (1)
    {
      (*(void (**)(float32x2_t *__return_ptr))(**(void **)(v6 + 136) + 32))(&v25);
      fst::Times<fst::LatticeWeightTpl<float>,int>(v5 + 2, &v25, &v28);
      float v7 = *(float *)a3;
      float v8 = *(float *)a3 + *(float *)(a3 + 4);
      int v9 = (int32x2_t *)a3;
      if (v8 >= (float)(*(float *)v28.i32 + *(float *)&v28.i32[1]))
      {
        if (v8 > (float)(*(float *)v28.i32 + *(float *)&v28.i32[1])) {
          goto LABEL_8;
        }
        int v9 = (int32x2_t *)a3;
        if (v7 >= *(float *)v28.i32) {
          break;
        }
      }
LABEL_9:
      int32x2_t v31 = *v9;
      long long v33 = 0;
      uint64_t v34 = 0;
      std::string __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)&v9[1], *(void *)&v9[2], (uint64_t)(*(void *)&v9[2] - *(void *)&v9[1]) >> 2);
      *(int32x2_t *)a3 = v31;
      if (&v31 != (int32x2_t *)a3) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 8), (char *)__p, (uint64_t)v33, (v33 - (unsigned char *)__p) >> 2);
      }
      if (__p)
      {
        long long v33 = __p;
        operator delete(__p);
      }
      if (v29)
      {
        int64x2_t v30 = v29;
        operator delete(v29);
      }
      if (v26)
      {
        int32x2_t v27 = v26;
        operator delete(v26);
      }
      int32x2_t v21 = *(int32x2_t *)a3;
      int v23 = 0;
      uint64_t v24 = 0;
      char v22 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v22, *(const void **)(a3 + 8), *(void *)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 2);
      int32x2_t v31 = v21;
      long long v33 = 0;
      uint64_t v34 = 0;
      std::string __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v22, (uint64_t)v23, (v23 - (unsigned char *)v22) >> 2);
      *(int32x2_t *)a3 = v31;
      if (&v31 != (int32x2_t *)a3) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 8), (char *)__p, (uint64_t)v33, (v33 - (unsigned char *)__p) >> 2);
      }
      if (__p)
      {
        long long v33 = __p;
        operator delete(__p);
      }
      if (v22)
      {
        int v23 = v22;
        operator delete(v22);
      }
      uint64_t result = fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Member(a3);
      if ((result & 1) == 0) {
        *(void *)(v6 + 8) |= 4uLL;
      }
      unint64_t v5 = (float32x2_t *)*v5;
      if (!v5) {
        return result;
      }
    }
    if (v7 <= *(float *)v28.i32)
    {
      int v10 = *(int **)(a3 + 8);
      unint64_t v11 = *(void *)(a3 + 16) - (void)v10;
      unint64_t v12 = v11 >> 2;
      unint64_t v13 = (int *)v29;
      unint64_t v14 = (unint64_t)(v30 - (unsigned char *)v29) >> 2;
      if ((int)(v11 >> 2) <= (int)v14)
      {
        int v9 = (int32x2_t *)a3;
        if ((int)v12 < 1) {
          goto LABEL_9;
        }
        int v9 = (int32x2_t *)a3;
        if ((int)v12 < (int)v14) {
          goto LABEL_9;
        }
        uint64_t v15 = (v11 >> 2) - 1;
        while (1)
        {
          int v17 = *v10++;
          int v16 = v17;
          int v19 = *v13++;
          int v18 = v19;
          if (v16 < v19) {
            break;
          }
          if (v16 > v18 || v15-- == 0)
          {
            int v9 = (int32x2_t *)a3;
            goto LABEL_9;
          }
        }
      }
    }
LABEL_8:
    int v9 = &v28;
    goto LABEL_9;
  }
  return result;
}

void sub_1B1ABD284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a10) {
    operator delete(a10);
  }
  int64x2_t v26 = *v24;
  if (*v24)
  {
    *(void *)(v23 + 16) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FB90;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38B68;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)a2;
  *(void *)(a1 + 112) = *(void *)(a2 + 8);
  operator new();
}

{
  *(void *)a1 = &unk_1F0A3FB90;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38B68;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  operator new();
}

void sub_1B1ABD434(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10A0C407A9BBF1FLL);
  unint64_t v4 = *(void **)(v1 + 72);
  if (v4) {
    operator delete(v4);
  }
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~CacheBaseImpl(void *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::VectorCacheStore(void *a1, unsigned char *a2)
{
  *(unsigned char *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1B1ABD508(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;
  std::__list_imp<char *>::clear(v2);
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Clear(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2 != a1[1])
  {
    unint64_t v3 = 0;
    uint64_t v2 = a1[1];
    do
    {
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Destroy(*(void *)(v2 + 8 * v3++));
      uint64_t v2 = a1[1];
    }
    while (v3 < (a1[2] - v2) >> 3);
  }
  a1[2] = v2;
  return std::__list_imp<char *>::clear(a1 + 4);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~CacheBaseImpl(void *a1)
{
  *a1 = &unk_1F0A38B68;
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    unint64_t v3 = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~VectorCacheStore(v2);
    MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  }
  unint64_t v4 = (void *)a1[9];
  if (v4) {
    operator delete(v4);
  }
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~FstImpl((uint64_t)a1);
}

void *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~VectorCacheStore(void *a1)
{
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable(uint64_t a1, size_t a2)
{
  *(void *)(a1 + 8) = a1;
  *(void *)(a1 + 16) = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(a1 + 24, a2, (void *)(a1 + 8), (void *)(a1 + 16));
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  if (a2) {
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 80), a2);
  }
  return a1;
}

void sub_1B1ABD6CC(_Unwind_Exception *a1)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 88) = v5;
    operator delete(v5);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, void *a3, void *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(void *)(a1 + 48) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B1ABD738(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 40));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__do_rehash<true>(a1, prime);
    }
  }
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(void *a1)
{
  *a1 = &unk_1F0A3DD78;
  uint64_t v2 = (void *)a1[22];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x20C4093837F09);
  }
  uint64_t v3 = a1[23];
  if (v3)
  {
    uint64_t v4 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(v3);
    MEMORY[0x1B3EA8670](v4, 0x10E0C400200E20DLL);
  }
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~DeterminizeFstImplBase(a1);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(uint64_t a1)
{
  uint64_t v4 = a1 + 88;
  uint64_t v2 = *(void **)(a1 + 88);
  uint64_t v3 = *(void *)(v4 + 8);
  if ((int)((unint64_t)(v3 - (void)v2) >> 3) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v2[v5];
      if (v6)
      {
        std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::clear((void **)v2[v5]);
        MEMORY[0x1B3EA8670](v6, 0x1020C405F07FB98);
        uint64_t v2 = *(void **)(a1 + 88);
        uint64_t v3 = *(void *)(a1 + 96);
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v3 - (void)v2) >> 3));
  }
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 32);
  return a1;
}

void std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::clear(void **a1)
{
  for (uint64_t i = *a1; i; uint64_t i = v3)
  {
    uint64_t v3 = (void *)*i;
    std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__delete_node[abi:ne180100]<>((int)a1, i);
  }
  *a1 = 0;
}

void std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__delete_node[abi:ne180100]<>(int a1, void *__p)
{
  uint64_t v3 = (void *)__p[3];
  if (v3)
  {
    __p[4] = v3;
    operator delete(v3);
  }
  operator delete(__p);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1ABDB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~DeterminizeFstImplBase(v18);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::DeterminizeFstImplBase(uint64_t a1, uint64_t a2)
{
}

void sub_1B1ABDD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void sub_1B1ABDEF4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  if (*v2) {
    operator delete(*v2);
  }
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void **std::vector<BOOL>::operator=(void **a1, uint64_t a2)
{
  if (a1 != (void **)a2)
  {
    unint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      if (v4 > (void)a1[2] << 6)
      {
        uint64_t v5 = *a1;
        if (*a1)
        {
          operator delete(v5);
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          unint64_t v4 = *(void *)(a2 + 8);
        }
        std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
        unint64_t v4 = *(void *)(a2 + 8);
      }
      memmove(*a1, *(const void **)a2, (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      uint64_t v6 = *(void **)(a2 + 8);
    }
    else
    {
      uint64_t v6 = 0;
    }
    a1[1] = v6;
  }
  return a1;
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::CopyStates((void *)a1, a2);
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1) {
      MutableState = 0;
    }
    else {
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::GetMutableState(a1, 0);
    }
    *(void *)(a1 + 80) = MutableState;
  }
  return a1;
}

char *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v5 = a1 + 8;
  if (a2 >= (unint64_t)((v7 - v6) >> 3))
  {
    uint64_t v13 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(v5, a2 + 1, &v13);
  }
  else
  {
    float v8 = *(char **)(v6 + 8 * a2);
    if (v8) {
      return v8;
    }
  }
  float v8 = (char *)operator new(0x50uLL);
  *(int32x2_t *)float v8 = vdup_n_s32(0x7F800000u);
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + ++*(void *)(result + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((void *)v8 + 9) = 0;
  *(void *)(*(void *)(a1 + 8) + 8 * v4) = v8;
  if (*(unsigned char *)a1)
  {
    int v9 = operator new(0x18uLL);
    v9[4] = a2;
    uint64_t v11 = *(void *)(a1 + 32);
    int v10 = (void *)(a1 + 32);
    *(void *)int v9 = v11;
    *((void *)v9 + 1) = v10;
    *(void *)(v11 + 8) = v9;
    *int v10 = v9;
    ++v10[2];
  }
  return v8;
}

void fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::CopyStates(void *a1, uint64_t a2)
{
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Clear(a1);
  uint64_t v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a2 + 16) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        float v8 = operator new(0x50uLL);
        fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::CacheState((uint64_t)v8, v7);
        if (*(unsigned char *)a1)
        {
          int v9 = operator new(0x18uLL);
          v9[4] = v6;
          uint64_t v10 = a1[4];
          *(void *)int v9 = v10;
          *((void *)v9 + 1) = a1 + 4;
          *(void *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        float v8 = 0;
      }
      unint64_t v12 = (void *)a1[2];
      unint64_t v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v4;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          int v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        }
        else {
          int v18 = 0;
        }
        int v19 = &v18[8 * v14];
        *(void *)int v19 = v8;
        uint64_t v13 = v19 + 8;
        int32x2_t v21 = (char *)a1[1];
        long long v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          long long v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *unint64_t v12 = v8;
        uint64_t v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      uint64_t v5 = *(void *)(a2 + 8);
    }
    while (v6 < (*(void *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::CacheState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  long long v4 = *(_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*>,std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*>>((void *)(a1 + 48), v5, v6, 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 4));
  *(void *)(a1 + 72) = *(unsigned int *)(a2 + 72);
  return a1;
}

void sub_1B1ABE33C(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*>,std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*>>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1ABE3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = *(void *)v6;
      uint64_t v7 = *(void *)(v6 + 8);
      *(void *)(v4 + 16) = 0;
      *(void *)(v4 + 8) = v7;
      *(void *)(v4 + ++*(void *)(result + 24) = 0;
      *(void *)(v4 + 32) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(v4 + 16), *(const void **)(v6 + 16), *(void *)(v6 + 24), (uint64_t)(*(void *)(v6 + 24) - *(void *)(v6 + 16)) >> 2);
      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v6 + 40);
      uint64_t v4 = v12 + 48;
      v12 += 48;
      v6 += 48;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B1ABE4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 - 32);
    if (v3)
    {
      *(void *)(v1 - ++*(void *)(result + 24) = v3;
      operator delete(v3);
    }
    v1 -= 48;
  }
}

void std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::__append(void **a1, unint64_t a2, void *a3)
{
  float v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(void **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 3)
  {
    if (a2)
    {
      uint64_t v16 = 8 * a2;
      unint64_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 3);
    if (v11 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    int v18 = &v15[8 * v12];
    int v19 = &v18[8 * a2];
    uint64_t v20 = 8 * a2;
    int32x2_t v21 = v18;
    do
    {
      *(void *)int32x2_t v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    uint64_t v22 = &v15[8 * v14];
    uint64_t v24 = (char *)*a1;
    uint64_t v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        uint64_t v25 = *((void *)v23 - 1);
        v23 -= 8;
        *((void *)v18 - 1) = v25;
        v18 -= 8;
      }
      while (v23 != v24);
      uint64_t v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::GetLabelMap(void *a1, int a2, uint64_t **a3)
{
  uint64_t v5 = **(float32x2_t ***)(*(void *)(a1[23] + 88) + 8 * a2);
  if (!v5) {
    goto LABEL_21;
  }
  do
  {
    uint64_t v6 = v5[1].u32[0];
    uint64_t v7 = a1[17];
    unint64_t v26 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v7 + 136))(v7, v6, v24);
    while (1)
    {
      if (!v24[0])
      {
        if (v26 >= v24[2]) {
          goto LABEL_18;
        }
        goto LABEL_8;
      }
      if ((*(unsigned int (**)(void))(*(void *)v24[0] + 24))(v24[0])) {
        break;
      }
      if (v24[0])
      {
        float v8 = (float32x2_t *)(*(uint64_t (**)(void))(*(void *)v24[0] + 32))();
        goto LABEL_9;
      }
LABEL_8:
      float v8 = (float32x2_t *)(v24[1] + 48 * v26);
LABEL_9:
      __int32 v9 = v8[5].i32[0];
      fst::Times<fst::LatticeWeightTpl<float>,int>(v5 + 2, v8 + 1, &v16);
      __int32 v19 = v9;
      int32x2_t v20 = v16;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      int32x2_t v21 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, __p, (uint64_t)v18, (v18 - (unsigned char *)__p) >> 2);
      if (__p)
      {
        int v18 = __p;
        operator delete(__p);
      }
      fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::FilterArc(a1[22], (int *)v8, (uint64_t)&v5[1], (uint64_t)&v19, a3);
      if (v21)
      {
        uint64_t v22 = v21;
        operator delete(v21);
      }
      if (v24[0]) {
        (*(void (**)(void))(*(void *)v24[0] + 40))(v24[0]);
      }
      else {
        ++v26;
      }
    }
    if (v24[0])
    {
      (*(void (**)(void))(*(void *)v24[0] + 8))();
      goto LABEL_20;
    }
LABEL_18:
    if (v25) {
      --*v25;
    }
LABEL_20:
    uint64_t v5 = (float32x2_t *)*v5;
  }
  while (v5);
LABEL_21:
  uint64_t v12 = *a3;
  uint64_t v10 = a3 + 1;
  unint64_t v11 = v12;
  if (v12 != (uint64_t *)v10)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::NormArc((uint64_t)a1, (uint64_t)(v11 + 5));
      uint64_t v13 = (uint64_t *)v11[1];
      if (v13)
      {
        do
        {
          unint64_t v14 = v13;
          uint64_t v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          unint64_t v14 = (uint64_t *)v11[2];
          BOOL v15 = *v14 == (void)v11;
          unint64_t v11 = v14;
        }
        while (!v15);
      }
      unint64_t v11 = v14;
    }
    while (v14 != (uint64_t *)v10);
  }
}

void sub_1B1ABE954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_DWORD *a21)
{
  if (a18)
  {
    (*(void (**)(uint64_t))(*(void *)a18 + 8))(a18);
  }
  else if (a21)
  {
    --*a21;
  }
  _Unwind_Resume(exception_object);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::AddArc(uint64_t a1, int a2, uint64_t a3)
{
  std::string __p = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v7[0] = *(_DWORD *)a3;
  v7[1] = v7[0];
  fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)&v8, a3 + 8);
  int State = fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::FindState(a1, *(float32x2_t ***)(a3 + 40));
  Mutableint State = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::PushArc(MutableState, (uint64_t)v7);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
}

void sub_1B1ABEA64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetArcs(uint64_t a1, int a2)
{
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>>::SetArcs(*(void *)(a1 + 120), (uint64_t)MutableState);
  uint64_t v5 = *((void *)MutableState + 6);
  uint64_t v6 = *((void *)MutableState + 7) - v5;
  if (v6)
  {
    unint64_t v7 = v6 / 48;
    int v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    __int32 v9 = (int *)(v5 + 40);
    do
    {
      int v11 = *v9;
      v9 += 12;
      int v10 = v11;
      if (v11 >= v8)
      {
        int v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 18) |= 0xAu;
}

uint64_t fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::FilterArc(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  int v10 = a2;
  unint64_t v7 = std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a5, a2, (uint64_t)&std::piecewise_construct, &v10);
  if (*((_DWORD *)v7 + 10) == -1) {
    fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeArc((int32x2_t *)&v10, a2);
  }
  int v8 = v7[10];
  *int v8 = (uint64_t)std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> const&>((uint64_t)v8, *v8, a4);
  return 1;
}

void sub_1B1ABEC0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::NormArc(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t ***)(a2 + 40);
  std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::sort[abi:ne180100](v4);
  int32x2_t v31 = v4;
  uint64_t v5 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v6 = (float32x2_t *)(a2 + 8);
  unint64_t v7 = (char *)(a2 + 16);
  int v8 = v5;
  do
  {
    fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()((uint64_t)v6, (uint64_t)(v8 + 2), &v32);
    float32x2_t *v6 = (float32x2_t)v32;
    if (v6 != (float32x2_t *)&v32) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v7, (char *)__p, (uint64_t)v34, (v34 - (unsigned char *)__p) >> 2);
    }
    if (__p)
    {
      uint64_t v34 = __p;
      operator delete(__p);
    }
    if (v5 == v8 || *((_DWORD *)v8 + 2) != *((_DWORD *)v5 + 2))
    {
      uint64_t v15 = *v8;
      uint64_t v5 = v8;
      goto LABEL_21;
    }
    float v10 = *((float *)v5 + 4);
    __int32 v9 = (float32x2_t *)(v5 + 2);
    float v11 = v10 + *((float *)v5 + 5);
    float v12 = *((float *)v8 + 4);
    float v13 = v12 + *((float *)v8 + 5);
    unint64_t v14 = v5 + 2;
    if (v11 >= v13)
    {
      if (v11 <= v13)
      {
        unint64_t v14 = v5 + 2;
        if (v10 < v12) {
          goto LABEL_14;
        }
        if (v10 <= v12)
        {
          unint64_t v17 = (int *)v5[3];
          unint64_t v18 = v5[4] - (void)v17;
          unint64_t v19 = v18 >> 2;
          int32x2_t v20 = (int *)v8[3];
          unint64_t v21 = (unint64_t)(v8[4] - (void)v20) >> 2;
          if ((int)(v18 >> 2) <= (int)v21)
          {
            unint64_t v14 = v5 + 2;
            if ((int)v19 < 1) {
              goto LABEL_14;
            }
            unint64_t v14 = v5 + 2;
            if ((int)v19 < (int)v21) {
              goto LABEL_14;
            }
            uint64_t v22 = (v18 >> 2) - 1;
            while (1)
            {
              int v24 = *v17++;
              int v23 = v24;
              int v26 = *v20++;
              int v25 = v26;
              if (v23 < v26) {
                break;
              }
              if (v23 > v25 || v22-- == 0)
              {
                unint64_t v14 = v5 + 2;
                goto LABEL_14;
              }
            }
          }
        }
      }
      unint64_t v14 = v8 + 2;
    }
LABEL_14:
    uint64_t v32 = *v14;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)v14[1], v14[2], (v14[2] - v14[1]) >> 2);
    *__int32 v9 = (float32x2_t)v32;
    if (v9 != (float32x2_t *)&v32) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v5 + 24, (char *)__p, (uint64_t)v34, (v34 - (unsigned char *)__p) >> 2);
    }
    if (__p)
    {
      uint64_t v34 = __p;
      operator delete(__p);
    }
    if (!fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Member((uint64_t)(v5 + 2))) {
      *(void *)(a1 + 8) |= 4uLL;
    }
    uint64_t v15 = *v8;
    int32x2_t v16 = (void *)*v5;
    *uint64_t v5 = *(void *)*v5;
    std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__delete_node[abi:ne180100]<>((int)v31, v16);
LABEL_21:
    int v8 = (uint64_t *)v15;
  }
  while (v15);
  int32x2_t v28 = (float32x2_t *)*v31;
  if (*v31)
  {
    do
    {
      uint64_t v29 = v28 + 2;
      fst::Divide<fst::LatticeWeightTpl<float>,int>((uint64_t)&v28[2], (uint64_t)v6, 0, (uint64_t)&v32);
      HIDWORD(v30) = HIDWORD(v32);
      v28[2] = (float32x2_t)v32;
      if (&v28[2] != (float32x2_t *)&v32) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v28[3], (char *)__p, (uint64_t)v34, (v34 - (unsigned char *)__p) >> 2);
      }
      if (__p)
      {
        uint64_t v34 = __p;
        operator delete(__p);
      }
      LODWORD(v30) = *(_DWORD *)(a1 + 144);
      fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Quantize((uint64_t)&v28[2], (float32x2_t *)&v32, v30);
      *uint64_t v29 = (float32x2_t)v32;
      if (v29 != (float32x2_t *)&v32) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v28[3], (char *)__p, (uint64_t)v34, (v34 - (unsigned char *)__p) >> 2);
      }
      if (__p)
      {
        uint64_t v34 = __p;
        operator delete(__p);
      }
      int32x2_t v28 = (float32x2_t *)*v28;
    }
    while (v28);
  }
}

void sub_1B1ABEEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        __int32 v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    __int32 v9 = a1 + 1;
LABEL_10:
    float v11 = (char *)operator new(0x58uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *((_DWORD *)v11 + 10) = -1;
    *((int32x2_t *)v11 + 6) = vdup_n_s32(0x7F800000u);
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeArc(int32x2_t *a1, __int32 *a2)
{
  a1->i32[0] = *a2;
  a1[1] = vdup_n_s32(0x7F800000u);
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  operator new();
}

void sub_1B1ABF068(_Unwind_Exception *exception_object)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + ++*(void *)(result + 24) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = operator new(0x30uLL);
  *(void *)uint64_t v5 = a2;
  v5[2] = *(_DWORD *)a3;
  *((void *)v5 + 2) = *(void *)(a3 + 8);
  *((void *)v5 + 4) = 0;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 3) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v5 + 3, *(const void **)(a3 + 16), *(void *)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 2);
  return v5;
}

void sub_1B1ABF0F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::sort[abi:ne180100](uint64_t **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = v2;
    do
    {
      ++v3;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t result = std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__sort<std::__less<void,void>>(v2, v3, (uint64_t)&v6);
  *a1 = result;
  return result;
}

void *fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  float v4 = *(float *)a1;
  float v5 = *(float *)a1 + *(float *)(a1 + 4);
  float v6 = *(float *)a2;
  float v7 = *(float *)a2 + *(float *)(a2 + 4);
  if (v5 >= v7)
  {
    if (v5 > v7)
    {
LABEL_6:
      a1 = a2;
      goto LABEL_7;
    }
    if (v4 >= v6)
    {
      if (v4 > v6) {
        goto LABEL_6;
      }
      int v8 = *(int **)(a1 + 8);
      unint64_t v9 = *(void *)(a1 + 16) - (void)v8;
      unint64_t v10 = v9 >> 2;
      float v11 = *(int **)(a2 + 8);
      uint64_t v12 = (*(void *)(a2 + 16) - (void)v11) >> 2;
      if ((int)(v9 >> 2) > (int)v12) {
        goto LABEL_6;
      }
      if ((int)v10 >= 1)
      {
        BOOL v15 = __OFSUB__(v10, v12);
        BOOL v14 = (int)v10 - (int)v12 < 0;
      }
      else
      {
        BOOL v15 = 0;
        BOOL v14 = 1;
      }
      if (v14 == v15)
      {
        uint64_t v16 = (v9 >> 2) - 1;
        do
        {
          int v18 = *v8++;
          int v17 = v18;
          int v20 = *v11++;
          int v19 = v20;
          if (v17 < v20) {
            goto LABEL_6;
          }
        }
        while (v17 <= v19 && v16-- != 0);
      }
    }
  }
LABEL_7:
  *a3 = *(void *)a1;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a3 + 1, *(const void **)(a1 + 8), *(void *)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2);
}

void fst::Divide<fst::LatticeWeightTpl<float>,int>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  LODWORD(__p) = 0;
  float v8 = *(float *)a1;
  float v9 = *(float *)(a1 + 4);
  LODWORD(__p) = *(_DWORD *)a1;
  *(float *)&int32x2_t v27 = v9;
  LODWORD(v++*(void *)(result + 24) = 2139095040;
  float v30 = INFINITY;
  if (*(float *)&__p == INFINITY && *(float *)&v27 == v30)
  {
    LODWORD(__p) = 0;
    LODWORD(__p) = *(_DWORD *)a2;
    LODWORD(v27) = 0;
    LODWORD(v27) = *(_DWORD *)(a2 + 4);
    LODWORD(v++*(void *)(result + 24) = 2139095040;
    float v30 = INFINITY;
    if (*(float *)&__p != INFINITY || *(float *)&v27 != v30)
    {
      *(int32x2_t *)a4 = vdup_n_s32(0x7F800000u);
      *(void *)(a4 + 16) = 0;
      *(void *)(a4 + ++*(void *)(result + 24) = 0;
      *(void *)(a4 + 8) = 0;
      return;
    }
    if (kaldi::g_kaldi_verbose_level < -1) {
LABEL_53:
    }
      exit(1);
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Division by zero [0/0] in CompactLatticeWeightTpl", 49);
LABEL_52:
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    goto LABEL_53;
  }
  LODWORD(__p) = 0;
  float v10 = *(float *)a2;
  float v11 = *(float *)(a2 + 4);
  LODWORD(__p) = *(_DWORD *)a2;
  *(float *)&int32x2_t v27 = v11;
  LODWORD(v++*(void *)(result + 24) = 2139095040;
  float v30 = INFINITY;
  if (*(float *)&__p == INFINITY && *(float *)&v27 == v30)
  {
    if (kaldi::g_kaldi_verbose_level < -1) {
      goto LABEL_53;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error: division by zero in CompactLatticeWeightTpl::Divide()", 60);
    goto LABEL_52;
  }
  float v12 = v8 - v10;
  float v13 = v9 - v11;
  if (v12 == -INFINITY || v13 == -INFINITY)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      BOOL v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"LatticeWeightTpl::Divide, NaN or invalid number produced. ", 58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"[dividing by zero?]  Returning zero.", 36);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
    }
    float v16 = INFINITY;
    float v17 = INFINITY;
  }
  else
  {
    BOOL v18 = v12 == INFINITY;
    if (v13 == INFINITY) {
      BOOL v18 = 1;
    }
    if (v18) {
      float v16 = INFINITY;
    }
    else {
      float v16 = v12;
    }
    if (v18) {
      float v17 = INFINITY;
    }
    else {
      float v17 = v13;
    }
  }
  int32x2_t v27 = 0;
  int32x2_t v28 = 0;
  uint64_t v29 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v27, *(const void **)(a1 + 8), *(void *)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2);
  int v24 = 0;
  int v25 = 0;
  uint64_t v26 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  size_t v19 = v25 - (unsigned char *)v24;
  unint64_t v20 = (v25 - (unsigned char *)v24) >> 2;
  unint64_t v21 = (char *)v27;
  uint64_t v22 = (uint64_t)v28;
  if (v20 > (v28 - (unsigned char *)v27) >> 2)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error in Divide (CompactLatticeWeightTpl): cannot divide, length mismatch.", 74);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    }
    exit(1);
  }
  if (a3 == 1)
  {
    int v23 = &v28[-4 * v20];
    if (!memcmp(v24, v23, v19))
    {
      std::string __p = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, v21, v22 - 4 * v20, (v23 - v21) >> 2);
      *(float *)a4 = v16;
      *(float *)(a4 + 4) = v17;
      *(void *)(a4 + 16) = 0;
      *(void *)(a4 + ++*(void *)(result + 24) = 0;
      *(void *)(a4 + 8) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a4 + 8), __p, (uint64_t)v32, (v32 - (unsigned char *)__p) >> 2);
      goto LABEL_31;
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
LABEL_48:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error in Divide (CompactLatticeWeighTpl): cannot divide, data mismatch.", 71);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    }
LABEL_49:
    exit(1);
  }
  if (a3)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Cannot divide CompactLatticeWeightTpl with DIVIDE_ANY.", 54);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    }
    goto LABEL_49;
  }
  if (memcmp(v24, v27, v19))
  {
    if (kaldi::g_kaldi_verbose_level < -1) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  std::string __p = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, &v21[4 * v20], v22, (v22 - (uint64_t)&v21[4 * v20]) >> 2);
  *(float *)a4 = v16;
  *(float *)(a4 + 4) = v17;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + ++*(void *)(result + 24) = 0;
  *(void *)(a4 + 8) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a4 + 8), __p, (uint64_t)v32, (v32 - (unsigned char *)__p) >> 2);
LABEL_31:
  if (__p)
  {
    uint64_t v32 = __p;
    operator delete(__p);
  }
  if (v24)
  {
    int v25 = v24;
    operator delete(v24);
  }
  if (v27)
  {
    int32x2_t v28 = v27;
    operator delete(v27);
  }
}

void sub_1B1ABF67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
}

void *fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Quantize@<X0>(uint64_t a1@<X0>, float32x2_t *a2@<X8>, double a3@<D0>)
{
  float v3 = vaddv_f32(*(float32x2_t *)a1);
  float32x2_t v4 = (float32x2_t)0x7F0000007FLL;
  if (v3 != -INFINITY)
  {
    if (v3 == INFINITY) {
      float32x2_t v4 = (float32x2_t)vdup_n_s32(0x7F800000u);
    }
    else {
      float32x2_t v4 = vmul_n_f32(vrndm_f32(vadd_f32(vdiv_f32(*(float32x2_t *)a1, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0)), (float32x2_t)0x3F0000003F000000)), *(float *)&a3);
    }
  }
  *a2 = v4;
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&a2[1], *(const void **)(a1 + 8), *(void *)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2);
}

uint64_t *std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__sort<std::__less<void,void>>(uint64_t *result, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)a2 >= 2)
  {
    if (a2 == 2)
    {
      float v3 = (void *)*result;
      if (*(_DWORD *)(*result + 8) < *((_DWORD *)result + 2))
      {
        *float v3 = result;
        *uint64_t result = 0;
        return v3;
      }
    }
    else
    {
      if (a2 >= 0) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = a2 + 1;
      }
      uint64_t v7 = v6 >> 1;
      uint64_t v8 = a2 - (v6 >> 1);
      float v9 = result;
      if (a2 >= 4)
      {
        unint64_t v10 = v7;
        float v9 = result;
        do
        {
          --v10;
          float v9 = (uint64_t *)*v9;
        }
        while (v10 > 1);
      }
      float v11 = (uint64_t *)*v9;
      *float v9 = 0;
      float v12 = (uint64_t *)std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__sort<std::__less<void,void>>(result, v7, a3);
      float v13 = (uint64_t *)std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__sort<std::__less<void,void>>(v11, v8, a3);
      return std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__merge<std::__less<void,void>>(v12, v13);
    }
  }
  return result;
}

uint64_t *std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__merge<std::__less<void,void>>(uint64_t *a1, uint64_t *a2)
{
  if (a1)
  {
    if (a2)
    {
      int v2 = *((_DWORD *)a1 + 2);
      if (*((_DWORD *)a2 + 2) >= v2)
      {
        float v3 = a2;
        a2 = a1;
      }
      else
      {
        float v3 = a2;
        do
        {
          float32x2_t v4 = (uint64_t **)v3;
          float v3 = (uint64_t *)*v3;
        }
        while (v3 && *((_DWORD *)v3 + 2) < v2);
        *float32x2_t v4 = a1;
      }
      uint64_t v5 = *a1;
      BOOL v6 = v3 != 0;
      if (*a1) {
        BOOL v7 = v3 == 0;
      }
      else {
        BOOL v7 = 1;
      }
      if (!v7)
      {
        do
        {
          uint64_t v8 = (uint64_t *)v5;
          int v9 = *(_DWORD *)(v5 + 8);
          if (*((_DWORD *)v3 + 2) < v9)
          {
            unint64_t v10 = v3;
            do
            {
              float v11 = (uint64_t **)v10;
              unint64_t v10 = (uint64_t *)*v10;
            }
            while (v10 && *((_DWORD *)v10 + 2) < v9);
            *a1 = (uint64_t)v3;
            float v3 = *v11;
            *float v11 = v8;
          }
          uint64_t v5 = *v8;
          BOOL v6 = v3 != 0;
          if (*v8) {
            BOOL v12 = v3 == 0;
          }
          else {
            BOOL v12 = 1;
          }
          a1 = v8;
        }
        while (!v12);
        a1 = v8;
      }
      if (v6) {
        *a1 = (uint64_t)v3;
      }
    }
    else
    {
      return a1;
    }
  }
  return a2;
}

void *std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v6 = result;
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1ABF9F0(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::FindState(uint64_t a1, float32x2_t **a2)
{
  uint64_t State = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::FindState(*(void **)(a1 + 184), (uint64_t)a2);
  uint64_t v5 = State;
  if (*(void *)(a1 + 152))
  {
    BOOL v6 = *(uint64_t **)(a1 + 160);
    if ((int)State >= (unint64_t)((v6[1] - *v6) >> 5))
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::ComputeDistance(a1, a2, (uint64_t)&v10);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v8 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>(v6, (uint64_t)&v10);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)v6, (uint64_t)&v10);
        uint64_t v8 = v7 + 32;
      }
      v6[1] = v8;
      if (__p)
      {
        BOOL v12 = __p;
        operator delete(__p);
      }
    }
  }
  return v5;
}

void sub_1B1ABFAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::FindState(void *a1, uint64_t a2)
{
  *(void *)BOOL v6 = a2;
  uint64_t v2 = (a1[12] - a1[11]) >> 3;
  uint64_t Id = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(a1 + 1, v6, 1);
  if (Id != v2)
  {
    uint64_t v4 = *(void *)v6;
    if (*(void *)v6)
    {
      std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::clear(*(void ***)v6);
      MEMORY[0x1B3EA8670](v4, 0x1020C405F07FB98);
    }
  }
  return Id;
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::ComputeDistance(uint64_t a1@<X0>, float32x2_t **a2@<X1>, uint64_t a3@<X8>)
{
  int32x2_t v4 = vdup_n_s32(0x7F800000u);
  *(int32x2_t *)a3 = v4;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + ++*(void *)(result + 24) = 0;
  uint64_t v5 = *a2;
  if (*a2)
  {
    while (1)
    {
      unint64_t v7 = v5[1].i32[0];
      uint64_t v8 = **(void **)(a1 + 152);
      if (v7 >= (*(void *)(*(void *)(a1 + 152) + 8) - v8) >> 5)
      {
        float32x2_t v31 = (float32x2_t)v4;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v32 = 0;
      }
      else
      {
        uint64_t v9 = v8 + 32 * v7;
        float32x2_t v31 = *(float32x2_t *)v9;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v32 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v32, *(const void **)(v9 + 8), *(void *)(v9 + 16), (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 2);
      }
      fst::Times<fst::LatticeWeightTpl<float>,int>(v5 + 2, &v31, &v24);
      float v10 = *(float *)a3;
      float v11 = *(float *)a3 + *(float *)(a3 + 4);
      BOOL v12 = (int32x2_t *)a3;
      if (v11 < (float)(*(float *)v24.i32 + *(float *)&v24.i32[1])) {
        goto LABEL_11;
      }
      if (v11 > (float)(*(float *)v24.i32 + *(float *)&v24.i32[1])) {
        goto LABEL_10;
      }
      BOOL v12 = (int32x2_t *)a3;
      if (v10 >= *(float *)v24.i32) {
        break;
      }
LABEL_11:
      int32x2_t v27 = *v12;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      std::string __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)&v12[1], *(void *)&v12[2], (uint64_t)(*(void *)&v12[2] - *(void *)&v12[1]) >> 2);
      *(int32x2_t *)a3 = v27;
      if (&v27 != (int32x2_t *)a3) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 8), (char *)__p, (uint64_t)v29, (v29 - (unsigned char *)__p) >> 2);
      }
      if (__p)
      {
        uint64_t v29 = __p;
        operator delete(__p);
      }
      if (v25)
      {
        uint64_t v26 = v25;
        operator delete(v25);
      }
      if (v32)
      {
        uint64_t v33 = v32;
        operator delete(v32);
      }
      uint64_t v5 = (float32x2_t *)*v5;
      if (!v5) {
        return;
      }
    }
    if (v10 <= *(float *)v24.i32)
    {
      float v13 = *(int **)(a3 + 8);
      unint64_t v14 = *(void *)(a3 + 16) - (void)v13;
      unint64_t v15 = v14 >> 2;
      float v16 = (int *)v25;
      unint64_t v17 = (unint64_t)(v26 - (unsigned char *)v25) >> 2;
      if ((int)(v14 >> 2) <= (int)v17)
      {
        BOOL v12 = (int32x2_t *)a3;
        if ((int)v15 < 1) {
          goto LABEL_11;
        }
        BOOL v12 = (int32x2_t *)a3;
        if ((int)v15 < (int)v17) {
          goto LABEL_11;
        }
        uint64_t v18 = (v14 >> 2) - 1;
        while (1)
        {
          int v20 = *v13++;
          int v19 = v20;
          int v22 = *v16++;
          int v21 = v22;
          if (v19 < v22) {
            break;
          }
          if (v19 > v21 || v18-- == 0)
          {
            BOOL v12 = (int32x2_t *)a3;
            goto LABEL_11;
          }
        }
      }
    }
LABEL_10:
    BOOL v12 = &v24;
    goto LABEL_11;
  }
}

void sub_1B1ABFD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  int v22 = *v20;
  if (*v20)
  {
    *(void *)(v19 + 16) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(void *a1, void *a2, int a3)
{
  a1[13] = a2;
  uint64_t v6 = (uint64_t)(a1 + 3);
  unint64_t v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, &fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::kCurrentKey);
  if (v7) {
    return *((unsigned int *)v7 + 4);
  }
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = a1[10];
  float v10 = (void *)a1[11];
  uint64_t v11 = ((uint64_t)v10 - v9) >> 3;
  unsigned int v23 = v11;
  unint64_t v12 = a1[12];
  if ((unint64_t)v10 >= v12)
  {
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v12 - v9;
    uint64_t v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v15 = v11 + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 12), v16);
    }
    else {
      unint64_t v17 = 0;
    }
    uint64_t v18 = &v17[8 * v11];
    uint64_t v19 = &v17[8 * v16];
    *(void *)uint64_t v18 = *a2;
    float v13 = v18 + 8;
    int v21 = (char *)a1[10];
    int v20 = (char *)a1[11];
    if (v20 != v21)
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      int v20 = (char *)a1[10];
    }
    a1[10] = v18;
    a1[11] = v13;
    a1[12] = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *float v10 = *a2;
    float v13 = v10 + 1;
  }
  a1[11] = v13;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v23, &v23);
  return v23;
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(void *a1, int *a2)
{
  uint64_t v4 = *a2;
  if ((int)v4 < -1)
  {
    unint64_t v7 = 0;
  }
  else
  {
    uint64_t v5 = a1[4];
    if (v4 == -1) {
      uint64_t v6 = *(uint64_t *****)(v5 + 104);
    }
    else {
      uint64_t v6 = (uint64_t ****)(*(void *)(v5 + 80) + 8 * v4);
    }
    unint64_t v7 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(v5, *v6);
  }
  int8x8_t v8 = (int8x8_t)a1[1];
  if (!*(void *)&v8) {
    return 0;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v7;
    if (v7 >= *(void *)&v8) {
      unint64_t v11 = v7 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v8 - 1) & v7;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  float v13 = *v12;
  if (*v12)
  {
    uint64_t v14 = a1 + 6;
    do
    {
      unint64_t v15 = v13[1];
      if (v15 == v7)
      {
        if (fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(v14, *((_DWORD *)v13 + 4), *a2))return v13; {
      }
        }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(void *)&v8) {
            v15 %= *(void *)&v8;
          }
        }
        else
        {
          v15 &= *(void *)&v8 - 1;
        }
        if (v15 != v11) {
          return 0;
        }
      }
      float v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  if (a2 < -1 || a3 < -1) {
    return a2 == a3;
  }
  uint64_t v3 = *a1;
  if (a2 == -1) {
    uint64_t v4 = *(uint64_t **)(v3 + 104);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(void *)(v3 + 80) + 8 * a2);
  }
  if (a3 == -1) {
    uint64_t v6 = *(uint64_t **)(v3 + 104);
  }
  else {
    uint64_t v6 = (uint64_t *)(*(void *)(v3 + 80) + 8 * a3);
  }
  return fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::operator==(*v4, *v6);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(uint64_t a1, uint64_t ***a2)
{
  uint64_t v2 = *((char *)a2 + 8);
  for (uint64_t i = *a2; i; uint64_t i = (uint64_t **)*i)
  {
    unint64_t v4 = *((int *)i + 2);
    v2 ^= fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Hash((uint64_t)(i + 2)) ^ (2 * v2) ^ (32 * v4) ^ (v4 >> 59);
  }
  return v2;
}

uint64_t fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Hash(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 4);
  BOOL v3 = __CFADD__(v2, *(_DWORD *)a1);
  uint64_t v4 = (v2 + *(_DWORD *)a1);
  uint64_t v5 = 0x100000000;
  if (!v3) {
    uint64_t v5 = 0;
  }
  uint64_t result = v5 | v4;
  uint64_t v8 = a1 + 8;
  unint64_t v7 = *(int **)(a1 + 8);
  uint64_t v9 = *(void *)(v8 + 8) - (void)v7;
  if (v9)
  {
    unint64_t v10 = v9 >> 2;
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    uint64_t v11 = 6967;
    do
    {
      uint64_t v12 = *v7++;
      result += v11 * v12;
      v11 *= 7499;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a2 + 8) != *(unsigned __int8 *)(a1 + 8)) {
    return 0;
  }
  int v2 = (void *)a2;
  BOOL v3 = (void *)a1;
  while (1)
  {
    int v2 = (void *)*v2;
    BOOL v3 = (void *)*v3;
    if (!v2 || v3 == 0) {
      break;
    }
    if (!fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::operator==((uint64_t)(v2 + 1), (uint64_t)(v3 + 1)))return 0; {
  }
    }
  return (v2 != 0) ^ (v3 == 0);
}

BOOL fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && *(float *)(a1 + 8) == *(float *)(a2 + 8)
    && *(float *)(a1 + 12) == *(float *)(a2 + 12)
    && (uint64_t v3 = a1 + 16,
        int v2 = *(const void **)(a1 + 16),
        size_t v4 = *(void *)(v3 + 8) - (void)v2,
        uint64_t v6 = a2 + 16,
        uint64_t v5 = *(const void **)(a2 + 16),
        v4 == *(void *)(v6 + 8) - (void)v5))
  {
    return memcmp(v2, v5, v4) == 0;
  }
  else
  {
    return 0;
  }
}

void *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v7 = *a2;
  if ((int)v7 < -1)
  {
    unint64_t v10 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v7 == -1) {
      uint64_t v9 = *(uint64_t *****)(v8 + 104);
    }
    else {
      uint64_t v9 = (uint64_t ****)(*(void *)(v8 + 80) + 8 * v7);
    }
    unint64_t v10 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(v8, *v9);
  }
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v10;
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()((uint64_t *)(a1 + 48), *((_DWORD *)i + 4), *a2))return i; {
        }
          }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  *((_DWORD *)i + 4) = *a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 40);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void *)a1;
  int32x2_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)uint64_t i = *v24;
LABEL_44:
    *int32x2_t v24 = i;
    goto LABEL_45;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    int32x2_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B1AC04B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a1 + 8);
  *unint64_t v3 = *(void *)a2;
  v3[2] = 0;
  void v3[3] = 0;
  v3[1] = 0;
  uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v3 + 1, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  *(void *)(a1 + 8) = v3 + 4;
  return result;
}

void sub_1B1AC0518(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  float v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = &v10[32 * v4];
  v14[0] = v10;
  v14[1] = v11;
  unint64_t v15 = v11;
  unint64_t v16 = &v10[32 * v9];
  *(void *)unint64_t v11 = *(void *)a2;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 1) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v11 + 1, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  v15 += 32;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B1AC060C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  Mutableuint64_t State = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::GetMutableState(a1, a2);
  uint64_t v4 = MutableState;
  if (*(unsigned char *)(a1 + 88))
  {
    int v5 = *((_DWORD *)MutableState + 18);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 18) = v5 | 4;
      unint64_t v6 = *((void *)MutableState + 7) - *((void *)MutableState + 6) + *(void *)(a1 + 112) + 80;
      *(void *)(a1 + 112) = v6;
      *(unsigned char *)(a1 + 104) = 1;
      if (v6 > *(void *)(a1 + 96)) {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>>::GC(a1, MutableState, 0, 0.666);
      }
    }
  }
  return v4;
}

uint64_t fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::PushArc(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1 + 6;
  unint64_t v4 = a1[7];
  if (v4 >= a1[8])
  {
    uint64_t result = std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const&>(v3, a2);
  }
  else
  {
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const&>((uint64_t)v3, a2);
    uint64_t result = v4 + 48;
  }
  a1[7] = result;
  return result;
}

char *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2) {
    return *(char **)(a1 + 80);
  }
  if (*(unsigned char *)(a1 + 72))
  {
    if (v3 == -1)
    {
      *(_DWORD *)(a1 + 76) = a2;
      Mutableuint64_t State = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::GetMutableState(a1, 0);
      *(void *)(a1 + 80) = MutableState;
      *((_DWORD *)MutableState + 18) |= 4u;
      std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::reserve((uint64_t *)MutableState + 6, 0x80uLL);
      return *(char **)(a1 + 80);
    }
    uint64_t v5 = *(void *)(a1 + 80);
    if (!*(_DWORD *)(v5 + 76))
    {
      *(_DWORD *)(a1 + 76) = a2;
      fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Reset(v5);
      uint64_t result = *(char **)(a1 + 80);
      *((_DWORD *)result + 18) |= 4u;
      return result;
    }
    *(_DWORD *)(v5 + 72) &= ~4u;
    *(unsigned char *)(a1 + 72) = 0;
  }
  int v6 = a2 + 1;
  return fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::GetMutableState(a1, v6);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>>::GC(uint64_t a1, char *a2, char a3, float a4)
{
  if (*(unsigned char *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      uint64_t v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      unint64_t v9 = (void *)fst::cerr(v8);
      unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      unint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      uint64_t v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache std::string::size_type size = ", 15);
      unint64_t v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      uint64_t v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      unint64_t v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    uint64_t v17 = *(void *)(a1 + 40);
    *(void *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      int v18 = *(_DWORD *)(v17 + 16);
      if (v18) {
        int v19 = v18 - 1;
      }
      else {
        int v19 = *(_DWORD *)(a1 + 76);
      }
      Mutableuint64_t State = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::GetMutableState(a1, v19);
      unint64_t v21 = *(void *)(a1 + 112);
      if (v21 > v16 && !*((_DWORD *)MutableState + 19))
      {
        if (a3)
        {
          if (MutableState != a2)
          {
            int v22 = *((_DWORD *)MutableState + 18);
LABEL_19:
            if ((v22 & 4) != 0)
            {
              unint64_t v23 = *((void *)MutableState + 7) - *((void *)MutableState + 6) + 80;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(void *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Delete((void *)a1);
            uint64_t v17 = *(void *)(a1 + 56);
            continue;
          }
        }
        else
        {
          int v22 = *((_DWORD *)MutableState + 18);
          if ((v22 & 8) == 0 && MutableState != a2) {
            goto LABEL_19;
          }
        }
      }
      *((_DWORD *)MutableState + 18) &= ~8u;
      uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
      *(void *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(void *)(a1 + 112) <= v16)
    {
      unint64_t v24 = *(void *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          uint64_t v25 = *(void *)(a1 + 96);
          do
          {
            v25 *= 2;
            BOOL v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(void *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal) {
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        }
        int32x2_t v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        int32x2_t v28 = (void *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      uint64_t v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      uint64_t v30 = (void *)fst::cerr(v29);
      float32x2_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      uint64_t v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      uint64_t v33 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache std::string::size_type size = ", 15);
      uint64_t v34 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      uint64_t v35 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      long long v36 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0) {
        operator delete(v37[0]);
      }
    }
  }
}

void sub_1B1AC0BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Reset(uint64_t a1)
{
  *(int32x2_t *)a1 = vdup_n_s32(0x7F800000u);
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 8), 0, 0, 0);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100]((uint64_t *)(a1 + 48));
}

void FstCheck(char a1, const char *a2, const char *a3)
{
  if ((a1 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    uint64_t v5 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    int v6 = (void *)fst::cerr(v5);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: \"", 15);
    size_t v8 = strlen(a2);
    unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)a2, v8);
    unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\" file: ", 8);
    size_t v11 = strlen(a3);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)a3, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" line: ", 7);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1B1AC0D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Delete(void *a1)
{
  int v1 = *(_DWORD *)(a1[7] + 16);
  if (!v1 || v1 - 1 == *((_DWORD *)a1 + 19))
  {
    *((_DWORD *)a1 + 19) = -1;
    a1[10] = 0;
  }
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Delete(a1);
}

void fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Delete(void *a1)
{
  fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Destroy(*(void *)(a1[1] + 8 * *(int *)(a1[7] + 16)));
  uint64_t v2 = a1[6];
  *(void *)(a1[1] + 8 * *(int *)(a1[7] + 16)) = 0;
  int v3 = (uint64_t *)a1[7];
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  *(void *)(v5 + 8) = v4;
  *(void *)v3[1] = v5;
  a1[6] = v2 - 1;
  a1[7] = v4;
  operator delete(v3);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetArcs((void *)a2);
  if (*(unsigned char *)(a1 + 104))
  {
    if ((*(unsigned char *)(a2 + 72) & 4) != 0)
    {
      unint64_t v4 = *(void *)(a2 + 56) - *(void *)(a2 + 48) + *(void *)(a1 + 112);
      *(void *)(a1 + 112) = v4;
      if (v4 > *(void *)(a1 + 96))
      {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>>::GC(a1, (char *)a2, 0, 0.666);
      }
    }
  }
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 100) < a2) {
    *(_DWORD *)(a1 + 100) = a2;
  }
  int v3 = *(_DWORD *)(a1 + 96);
  if (v3 <= a2)
  {
    if (v3 == a2) {
      *(_DWORD *)(a1 + 96) = a2 + 1;
    }
    if (*(unsigned char *)(a1 + 104) || !*(void *)(a1 + 112))
    {
      unint64_t v4 = (void *)(a1 + 72);
      unint64_t v5 = a2;
      while (*(void *)(a1 + 80) <= v5)
      {
        char v6 = 0;
        std::vector<BOOL>::push_back(a1 + 72, &v6);
      }
      *(void *)(*v4 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v5;
    }
  }
}

void *fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetArcs(void *result)
{
  uint64_t v1 = result[6];
  uint64_t v2 = result[7] - v1;
  if (v2)
  {
    unint64_t v3 = v2 / 48;
    if (v3 <= 1) {
      unint64_t v3 = 1;
    }
    unint64_t v4 = (_DWORD *)(v1 + 4);
    do
    {
      if (!*(v4 - 1)) {
        ++result[4];
      }
      if (!*v4) {
        ++result[5];
      }
      v4 += 12;
      --v3;
    }
    while (v3);
  }
  return result;
}

void std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::destroy(a1, a2[1]);
    unint64_t v4 = (void *)a2[7];
    if (v4)
    {
      a2[8] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      if (v3 != -1)
      {
        *(_DWORD *)(a1 + 64) = v3;
        *(unsigned char *)(a1 + 60) = 1;
        if (*(_DWORD *)(a1 + 68) <= v3) {
          *(_DWORD *)(a1 + 68) = v3 + 1;
        }
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

void *fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasFinal(a1, a2) & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 64))(&v11, a1, a2);
    uint64_t v7 = v11;
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v12, (uint64_t)v13, (v13 - (unsigned char *)v12) >> 2);
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetFinal(a1, a2, &v7);
    if (__p)
    {
      unint64_t v9 = __p;
      operator delete(__p);
    }
    if (v12)
    {
      unint64_t v13 = v12;
      operator delete(v12);
    }
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Final(a1, a2, a3);
}

void sub_1B1AC11C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasFinal(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v2 + 76) == a2)
  {
    int v3 = (uint64_t *)(v2 + 80);
  }
  else
  {
    unint64_t v4 = a2 + 1;
    uint64_t v6 = v2 + 8;
    uint64_t v5 = *(void *)(v2 + 8);
    if (v4 >= (*(void *)(v6 + 8) - v5) >> 3) {
      return 0;
    }
    int v3 = (uint64_t *)(v5 + 8 * v4);
  }
  uint64_t v7 = *v3;
  if (!v7) {
    return 0;
  }
  int v8 = *(_DWORD *)(v7 + 72);
  if ((v8 & 1) == 0) {
    return 0;
  }
  *(_DWORD *)(v7 + 72) = v8 | 8;
  return 1;
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetFinal(uint64_t a1, int a2, uint64_t *a3)
{
  Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  uint64_t v5 = *a3;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a3[1], a3[2], (a3[2] - a3[1]) >> 2);
  *(void *)Mutableuint64_t State = v5;
  if (MutableState != (char *)&v5) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(MutableState + 8, (char *)__p, (uint64_t)v7, (v7 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  *((_DWORD *)MutableState + 18) |= 9u;
}

void sub_1B1AC12F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v5 + 76) == a2) {
    uint64_t v6 = (uint64_t *)(v5 + 80);
  }
  else {
    uint64_t v6 = (uint64_t *)(*(void *)(v5 + 8) + 8 * (a2 + 1));
  }
  uint64_t v7 = *v6;
  *a3 = *(void *)v7;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a3 + 1, *(const void **)(v7 + 8), *(void *)(v7 + 16), (uint64_t)(*(void *)(v7 + 16) - *(void *)(v7 + 8)) >> 2);
}

unint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::NumArcs(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)v5 + 56) - *(void *)(*(void *)v5 + 48)) >> 4);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasArcs(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v2 + 76) == a2)
  {
    int v3 = (uint64_t *)(v2 + 80);
  }
  else
  {
    unint64_t v4 = a2 + 1;
    uint64_t v6 = v2 + 8;
    uint64_t v5 = *(void *)(v2 + 8);
    if (v4 >= (*(void *)(v6 + 8) - v5) >> 3) {
      return 0;
    }
    int v3 = (uint64_t *)(v5 + 8 * v4);
  }
  uint64_t v7 = *v3;
  if (!v7) {
    return 0;
  }
  int v8 = *(_DWORD *)(v7 + 72);
  if ((v8 & 2) == 0) {
    return 0;
  }
  *(_DWORD *)(v7 + 72) = v8 | 8;
  return 1;
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::NumInputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 32);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::NumOutputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 40);
}

void *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::DeterminizeFst(void *a1, uint64_t a2, int a3)
{
  *a1 = &unk_1F0A3B178;
  a1[1] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (a3)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    uint64_t v6 = (_DWORD *)a1[1];
    if (v6)
    {
      int v7 = v6[14] - 1;
      v6[14] = v7;
      if (!v7) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      }
    }
    a1[1] = v5;
  }
  else
  {
    fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetImpl((uint64_t)a1, v4, 0);
  }
  return a1;
}

void sub_1B1AC1620(_Unwind_Exception *a1)
{
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~ImplToFst(v1);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~StateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~CacheStateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  uint64_t v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  uint64_t v6 = v5;
  do
  {
    fst::ArcIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::ArcIterator(&v19, *(void *)(a1 + 8), v6);
    unint64_t v7 = v20;
    uint64_t v8 = *((void *)v19 + 6);
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v19 + 7) - v8) >> 4);
    uint64_t v10 = *(void *)(a1 + 16);
    if (v20 < v9)
    {
      int v11 = *(_DWORD *)(v10 + 68);
      uint64_t v12 = (int *)(v8 + 48 * v20 + 40);
      do
      {
        int v14 = *v12;
        v12 += 12;
        int v13 = v14;
        if (v11 <= v14)
        {
          int v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      unint64_t v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    int v15 = *(_DWORD *)(a1 + 24);
    uint64_t v16 = *(void *)(a1 + 16);
    int v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 19);
    BOOL v4 = v15 >= v17;
    if (v15 < v17) {
      break;
    }
    uint64_t v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while ((int)v6 < *(_DWORD *)(*(void *)(a1 + 16) + 68));
  return v4;
}

void sub_1B1AC17B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 96);
  if ((int)v1 <= *(_DWORD *)(a1 + 100))
  {
    while (1)
    {
      int v3 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::ExpandedState(a1, v1);
      int v4 = *(_DWORD *)(a1 + 96);
      if (!v3) {
        break;
      }
      uint64_t v1 = (v4 + 1);
      *(_DWORD *)(a1 + 96) = v1;
      if (v4 >= *(_DWORD *)(a1 + 100)) {
        return v1;
      }
    }
    return *(unsigned int *)(a1 + 96);
  }
  return v1;
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::ExpandedState(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 104) || !*(void *)(a1 + 112)) {
    return (*(void *)(*(void *)(a1 + 72) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1;
  }
  if (*(unsigned char *)(a1 + 128))
  {
    uint64_t v3 = *(void *)(a1 + 120);
    if (*(_DWORD *)(v3 + 76) == a2)
    {
      int v4 = (void *)(v3 + 80);
      return *v4 != 0;
    }
    unint64_t v5 = a2 + 1;
    uint64_t v7 = v3 + 8;
    uint64_t v6 = *(void *)(v3 + 8);
    if (v5 < (*(void *)(v7 + 8) - v6) >> 3)
    {
      int v4 = (void *)(v6 + 8 * v5);
      return *v4 != 0;
    }
  }
  return 0;
}

char **fst::ArcIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::ArcIterator(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 19);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)(*(void (**)(void, uint64_t))(**(void **)(a2 + 8) + 48))(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_1B1AC193C(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 76);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasArcs(a1, a2) & 1) == 0)(*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::InitArcIterator(a1, a2, a3);
  }
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 120);
  if (*(_DWORD *)(v3 + 76) == a2) {
    int v4 = (uint64_t *)(v3 + 80);
  }
  else {
    int v4 = (uint64_t *)(*(void *)(v3 + 8) + 8 * (a2 + 1));
  }
  uint64_t v5 = *v4;
  int v8 = *(_DWORD *)(v5 + 76);
  uint64_t v6 = (_DWORD *)(v5 + 76);
  int v7 = v8;
  uint64_t v9 = *(void *)(v6 - 7);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v6 - 5) - v9) >> 4);
  if (*(void *)(v6 - 5) == v9) {
    uint64_t v9 = 0;
  }
  *a3 = 0;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v6;
  _DWORD *v6 = v7 + 1;
  return result;
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A42220;
  int v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void *fst::AutoQueue<int>::~AutoQueue(void *a1)
{
  *a1 = &unk_1F0A40F38;
  uint64_t v3 = a1[3];
  uint64_t v2 = a1[4];
  if (v2 != v3)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        uint64_t v3 = a1[3];
        uint64_t v2 = a1[4];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  uint64_t v6 = a1[2];
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  int v7 = (void *)a1[6];
  if (v7)
  {
    a1[7] = v7;
    operator delete(v7);
  }
  int v8 = (void *)a1[3];
  if (v8)
  {
    a1[4] = v8;
    operator delete(v8);
  }
  return a1;
}

void std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(result, a2);
    v7[1] = v7[0] + v5;
    _DWORD v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B1AC1C5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::resize(void *result, unint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  unint64_t v4 = (v3 - *result) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *result + 16 * a2;
      if (v3 != v6)
      {
        uint64_t v7 = v3 - 16;
        int v8 = (uint64_t (***)(void))(v3 - 16);
        uint64_t v9 = (uint64_t (***)(void))(v3 - 16);
        do
        {
          unint64_t v10 = *v9;
          v9 -= 2;
          uint64_t result = (void *)(*v10)(v8);
          v7 -= 16;
          BOOL v11 = v8 == (uint64_t (***)(void))v6;
          int v8 = v9;
        }
        while (!v11);
      }
      v2[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    return (void *)std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__append(result, v5);
  }
  return result;
}

uint64_t *std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 != *result)
  {
    uint64_t v5 = v4 - 16;
    do
    {
      *(void *)(v4 - 16) = &unk_1F0A46010;
      v4 -= 16;
      uint64_t v6 = *(void *)(v3 - 8);
      *(void *)(v4 + 8) = v6;
      ++*(_DWORD *)(v6 + 56);
      v5 -= 16;
      v3 -= 16;
    }
    while (v3 != v2);
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  *uint64_t result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~VectorFst(void *a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Copy()
{
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  *a3 = 0;
  uint64_t v5 = (uint64_t *)(*(void *)(*(void *)(v3 + 64) + 8 * a2) + 48);
  uint64_t v4 = *v5;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v5[1] - *v5) >> 4);
  if (v5[1] == *v5) {
    uint64_t v4 = 0;
  }
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::NumStates(uint64_t a1)
{
  return (*(void *)(*(void *)(a1 + 8) + 72) - *(void *)(*(void *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

void sub_1B1AC1F94(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetStart(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  *(void *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(void *)(v4 + 8) & 4;
  return result;
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetFinal(uint64_t a1, int a2, uint64_t *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  unint64_t v6 = *(void **)(a1 + 8);
  uint64_t v7 = *a3;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a3[1], a3[2], (a3[2] - a3[1]) >> 2);
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetFinal(v6, a2, (uint64_t)&v7);
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_1B1AC20C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 & 4;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v6);
  if (result != (v6 & a2)) {
    uint64_t result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  }
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::AddState(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(void *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  return fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::AddArc(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::DeleteStates(uint64_t a1, char **a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteStates((uint64_t)v4, a2);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::DeleteStates(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::DeleteStates((uint64_t)v2);
  uint64_t result = (*(uint64_t (**)(void *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteArcs(*(void **)(v6[8] + 8 * a2), a3);
  uint64_t result = (*(uint64_t (**)(void *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void **)(v4[8] + 8 * a2);
  v5[4] = 0;
  v5[5] = 0;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](v5 + 6);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  uint64_t v4 = (void **)(*(void *)(a1 + 8) + 64);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(v4, a2);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  uint64_t v6 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 48);
  return std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::reserve(v6, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutableInputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutableOutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(v4, a2);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(v4, a2);
}

void fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::InitMutableArcIterator()
{
}

void sub_1B1AC2650(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(uint64_t result)
{
  if (*(int *)(*(void *)(result + 8) + 56) >= 2) {
    operator new();
  }
  return result;
}

void sub_1B1AC2708(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

_DWORD *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetImpl(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    ++*(_DWORD *)(a2 + 56);
  }
  uint64_t result = *(_DWORD **)(a1 + 8);
  if (result)
  {
    int v6 = result[14] - 1;
    result[14] = v6;
    if (!v6) {
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
  }
  *(void *)(a1 + 8) = a2;
  return result;
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FD88;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  uint64_t v5 = (void *)(a1 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A4B8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v7);
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 1, 0))
  {
    int v8 = fst::CountStates<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v8);
  }
  unsigned int v21 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v19);
  while (1)
  {
    if (!v19)
    {
      if ((int)v21 >= v20) {
        goto LABEL_33;
      }
LABEL_11:
      uint64_t v9 = v21;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v19 + 16))(v19)) {
      break;
    }
    if (!v19) {
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v19 + 24))();
LABEL_12:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::AddState((void *)a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32))(&v16, a2, v9);
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetFinal(a1, v9, &v16);
    if (v17)
    {
      int v18 = v17;
      operator delete(v17);
    }
    unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v9);
    std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::reserve((uint64_t *)(*(void *)(*v5 + 8 * (int)v9) + 48), v10);
    std::string::size_type v15 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a2 + 136))(a2, v9, &__p);
    while (1)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        if (v15 >= __p.__r_.__value_.__r.__words[2]) {
          goto LABEL_26;
        }
LABEL_20:
        BOOL v11 = (_DWORD *)(__p.__r_.__value_.__l.__size_ + 48 * v15);
        goto LABEL_21;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0])) {
        break;
      }
      if (!__p.__r_.__value_.__r.__words[0]) {
        goto LABEL_20;
      }
      BOOL v11 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__p.__r_.__value_.__l.__data_ + 32))();
LABEL_21:
      fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::AddArc(*(void **)(*v5 + 8 * (int)v9), v11);
      if (__p.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 40))(__p.__r_.__value_.__r.__words[0]);
      }
      else {
        ++v15;
      }
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(void *)__p.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_28;
    }
LABEL_26:
    if (v14) {
      --*v14;
    }
LABEL_28:
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 32))(v19);
    }
    else {
      ++v21;
    }
  }
  if (v19) {
    (*(void (**)(void))(*(void *)v19 + 8))();
  }
LABEL_33:
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(void *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1B1AC2C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~VectorFstBaseImpl(v21);
  _Unwind_Resume(a1);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetFinal(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 8 * a2);
  uint64_t v4 = *a3;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a3[1], a3[2], (a3[2] - a3[1]) >> 2);
  *(void *)uint64_t v3 = v4;
  if ((uint64_t *)v3 != &v4) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v3 + 8), (char *)__p, (uint64_t)v6, (v6 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
}

void sub_1B1AC2DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~VectorFstBaseImpl(void *a1)
{
  *a1 = &unk_1F0A3D2B8;
  uint64_t v2 = (void *)a1[9];
  if (v2 != (void *)a1[8])
  {
    unint64_t v3 = 0;
    uint64_t v2 = (void *)a1[8];
    do
    {
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Destroy(v2[v3++]);
      uint64_t v2 = (void *)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (void)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~VectorFstImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::Properties(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~VectorFstBaseImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::~FstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::~FstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FD88;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(result, a2);
    v7[1] = v7[0] + v5;
    _DWORD v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 48 * v6;
    std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B1AC30C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  char v17 = 0;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    uint64_t v10 = a3;
    do
    {
      uint64_t v11 = *(void *)(v10 - 48);
      v10 -= 48;
      *(void *)(v7 - 48) = v11;
      uint64_t v12 = *(void *)(v10 + 8);
      *(void *)(v7 - 32) = 0;
      uint64_t v13 = v7 - 32;
      *(void *)(v7 - 40) = v12;
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(v7 - 32), *(const void **)(v10 + 16), *(void *)(v10 + 24), (uint64_t)(*(void *)(v10 + 24) - *(void *)(v10 + 16)) >> 2);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(v9 - 8);
      uint64_t v7 = *((void *)&v19 + 1) - 48;
      *((void *)&v19 + 1) -= 48;
      uint64_t v9 = v10;
    }
    while (v10 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

void sub_1B1AC3228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::AddArc(void *a1, _DWORD *a2)
{
  if (!*a2) {
    ++a1[4];
  }
  if (!a2[1]) {
    ++a1[5];
  }
  uint64_t v3 = a1 + 6;
  unint64_t v4 = a1[7];
  if (v4 >= a1[8])
  {
    uint64_t result = std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__push_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>(v3, (uint64_t)a2);
  }
  else
  {
    std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__construct_one_at_end[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>((uint64_t)v3, (uint64_t)a2);
    uint64_t result = v4 + 48;
  }
  a1[7] = result;
  return result;
}

void *std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__construct_one_at_end[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = *(void *)a2;
  *(void *)(v4 + 8) = *(void *)(a2 + 8);
  *(void *)(v4 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 16) = 0;
  uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(v4 + 16), *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_1B1AC3350(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__push_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[12 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  char v17 = (char *)&v10[12 * v9];
  *uint64_t v11 = *(void *)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  v11[2] = 0;
  v11 += 2;
  *(v11 - 1) = v12;
  v11[1] = 0;
  v11[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  v10[12 * v4 + 10] = *(_DWORD *)(a2 + 40);
  v16 += 6;
  std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B1AC347C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::WriteFst<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  long long v38 = 0u;
  long long v39 = 0u;
  *(_OWORD *)long long v36 = 0u;
  *(_OWORD *)long long v37 = 0u;
  uint64_t v6 = -1;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = -1;
  uint64_t v40 = (*(int (**)(void *))(*a1 + 24))(a1);
  uint64_t v41 = -1;
  if ((*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 1, 0))
  {
    uint64_t v6 = 0;
LABEL_3:
    int v7 = 0;
    uint64_t v41 = (int)fst::CountStates<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t)a1);
    goto LABEL_6;
  }
  unint64_t v8 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)v8 + 5) + 32))(__p);
    uint64_t v6 = v44;
    if (v44 != -1) {
      goto LABEL_3;
    }
  }
  int v7 = 1;
LABEL_6:
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v9 |= 3uLL;
  fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, 2, __p, v9, (uint64_t)v35);
  uint64_t v31 = v9;
  uint64_t v32 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  unint64_t v10 = *(void *)(a1[1] + 72) - *(void *)(a1[1] + 64);
  unint64_t v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    int v33 = v7;
    uint64_t v12 = 0;
    uint64_t v13 = (v10 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, void *, uint64_t))(*a1 + 32))(__p, a1, v12);
      fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Write((uint64_t)__p, a2);
      if (__p[0].__r_.__value_.__l.__size_)
      {
        __p[0].__r_.__value_.__r.__words[2] = __p[0].__r_.__value_.__l.__size_;
        operator delete((void *)__p[0].__r_.__value_.__l.__size_);
      }
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v12);
      std::ostream::write();
      uint64_t v14 = *(void *)(*(void *)(a1[1] + 64) + 8 * v12);
      uint64_t v16 = *(void *)(v14 + 48);
      uint64_t v15 = *(void *)(v14 + 56);
      if (v15 == v16) {
        char v17 = 0;
      }
      else {
        char v17 = *(_DWORD **)(v14 + 48);
      }
      if (v15 != v16)
      {
        if ((unint64_t)((v15 - v16) / 48) <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = (v15 - v16) / 48;
        }
        long long v19 = v17;
        do
        {
          int v20 = *v19;
          v19 += 12;
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v20;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[1];
          std::ostream::write();
          fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Write((uint64_t)(v17 + 2), a2);
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[10];
          std::ostream::write();
          char v17 = v19;
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != v13);
    int v7 = v33;
  }
  std::ostream::flush();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    unsigned int v21 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)__p);
    int v22 = (void *)fst::cerr(v21);
    unint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"VectorFst::Write: write failed: ", 32);
    int v24 = *(char *)(a3 + 23);
    if (v24 >= 0) {
      uint64_t v25 = a3;
    }
    else {
      uint64_t v25 = *(void *)a3;
    }
    if (v24 >= 0) {
      uint64_t v26 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v26 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_32:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v34);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t updated = 0;
    goto LABEL_35;
  }
  if (!v7)
  {
    if (v41 == v11)
    {
      uint64_t updated = 1;
      goto LABEL_35;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    uint64_t v29 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)__p);
    uint64_t v30 = (void *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_32;
  }
  uint64_t v41 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t updated = fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v31, (uint64_t)v35, v32);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_35:
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[1]);
  }
  if (SHIBYTE(v37[0]) < 0) {
    operator delete(v36[0]);
  }
  return updated;
}

void sub_1B1AC3958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a15);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::WriteFstHeader(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    uint64_t v13 = (const std::string *)fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(void *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
      BOOL v14 = a3[25] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = !v14;
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    if (a3[26]) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v15 | 2;
    if (v17) {
      int v18 = v15;
    }
    if (a3[27]) {
      v18 |= 4u;
    }
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
    BOOL v19 = a3[25] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 72))(v20, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (result && a3[26])
  {
    int v22 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1) + 72);
    return v22();
  }
  return result;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::UpdateFstHeader(uint64_t a1, void *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1B3EA7E70](v32);
  uint64_t v16 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    uint64_t v17 = *((void *)v16 + 5);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long __p = 0u;
    long long v35 = 0u;
    uint64_t v42 = a8;
    (*(void (**)(void *__return_ptr))(*(void *)v17 + 40))(v33);
    if (v33[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  MEMORY[0x1B3EA7E80](v32);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    int v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    BOOL v19 = (void *)fst::cerr(v18);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    int v21 = *(char *)(a3 + 23);
    if (v21 >= 0) {
      uint64_t v22 = a3;
    }
    else {
      uint64_t v22 = *(void *)a3;
    }
    if (v21 >= 0) {
      uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v23 = *(void *)(a3 + 8);
    }
  }
  else
  {
    fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::WriteFstHeader(a1, (uint64_t)a2, (unsigned char *)a3, a4, a5, a6, a7);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      int v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v25 = (void *)fst::cerr(v24);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v26 = *(char *)(a3 + 23);
      if (v26 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v26 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
    else
    {
      MEMORY[0x1B3EA7E70](v33, a2);
      int32x2_t v27 = (char *)a2 + *(void *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(long long *__return_ptr))(**((void **)v27 + 5) + 32))(&__p);
        if (v42 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
        }
      }
      MEMORY[0x1B3EA7E80](v33);
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0) {
        return 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      int32x2_t v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v29 = (void *)fst::cerr(v28);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v30 = *(char *)(a3 + 23);
      if (v30 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v30 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0) {
    operator delete((void *)__p);
  }
  return 0;
}

void sub_1B1AC3F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

uint64_t fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::WriteFile(fst *a1, uint64_t a2)
{
  v25[19] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream((uint64_t *)&v20);
      if ((v24[*(void *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        unint64_t v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        unint64_t v5 = (void *)fst::cerr(v4);
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        int v7 = *(char *)(a2 + 23);
        if (v7 >= 0) {
          unint64_t v8 = (const std::string::value_type *)a2;
        }
        else {
          unint64_t v8 = *(const std::string::value_type **)a2;
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v9 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v10 = 0;
      }
      else
      {
        char v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string __p = *(std::string *)a2;
        }
        __int16 v16 = 257;
        char v17 = 1;
        char v18 = v13;
        uint64_t v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(void *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA400];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(void *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA400]
                                                                                                  + 24);
      MEMORY[0x1B3EA7CF0](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1B3EA8520](v25);
      return v10;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    goto LABEL_5;
  }
  uint64_t v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  char v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = __p;
  }
  __int16 v21 = 257;
  char v22 = 1;
  char v23 = v12;
  uint64_t v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(void *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1B1AC4318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetFinal(void *a1, int a2, uint64_t a3)
{
  uint64_t v6 = *(uint64_t **)(a1[8] + 8 * a2);
  uint64_t v20 = *v6;
  char v22 = 0;
  uint64_t v23 = 0;
  __int16 v21 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, (const void *)v6[1], v6[2], (v6[2] - v6[1]) >> 2);
  uint64_t v16 = *(void *)a3;
  char v18 = 0;
  uint64_t v19 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a3 + 8), *(void *)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 2);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetFinal((uint64_t)a1, a2, &v16);
  if (__p)
  {
    char v18 = __p;
    operator delete(__p);
  }
  unint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  uint64_t v12 = v20;
  BOOL v14 = 0;
  uint64_t v15 = 0;
  char v13 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v13, v21, (uint64_t)v22, (v22 - (unsigned char *)v21) >> 2);
  uint64_t v8 = *(void *)a3;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v9, *(const void **)(a3 + 8), *(void *)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 2);
  a1[1] = a1[1] & 4 | fst::SetFinalProperties<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>(v7, (uint64_t)&v12, (uint64_t)&v8);
  if (v9)
  {
    uint64_t v10 = v9;
    operator delete(v9);
  }
  if (v13)
  {
    BOOL v14 = v13;
    operator delete(v13);
  }
  if (v21)
  {
    char v22 = v21;
    operator delete(v21);
  }
}

void sub_1B1AC4510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  __int16 v21 = *(void **)(v19 - 56);
  if (v21)
  {
    *(void *)(v19 - 48) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::AddArc(void *a1, int a2, float *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1[8] + 8 * a2) + 56);
  if (v6 == *(void *)(*(void *)(a1[8] + 8 * a2) + 48)) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = (_DWORD *)(v6 - 48);
  }
  unint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(v8, a2, a3, v7);
  uint64_t v9 = *(void **)(a1[8] + 8 * a2);
  return fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::AddArc(v9, a3);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteStates(uint64_t a1, char **a2)
{
  unint64_t v4 = (uint64_t *)(a1 + 64);
  std::vector<int>::size_type v5 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v33, v5, &__x);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 2;
    std::vector<int>::pointer begin = v33.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v11)
  {
    int v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      if (v33.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Destroy(*(void *)(v11 + 8 * v12));
      }
      else
      {
        v33.__begin_[v12] = v13;
        if (v12 != v13) {
          *(void *)(v11 + 8 * v13) = *(void *)(v11 + 8 * v12);
        }
        ++v13;
      }
      ++v12;
      uint64_t v11 = *(void *)(a1 + 64);
    }
    while (v12 < (*(void *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  uint64_t v14 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(int64x2_t **)(v14 + 8 * v15);
      int64x2_t v17 = v16[2];
      uint64_t v18 = v16[3].i64[1] - v16[3].i64[0];
      if (v18) {
        uint64_t v19 = v16[3].i64[0];
      }
      else {
        uint64_t v19 = 0;
      }
      if (v18)
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
        char v22 = (int *)(v19 + 40);
        do
        {
          int v23 = v33.__begin_[*v22];
          if (v23 == -1)
          {
            uint64_t v25 = *((void *)v22 - 5);
            v26.i64[0] = v25;
            v26.i64[1] = HIDWORD(v25);
            int64x2_t v17 = vaddq_s64(v17, vceqzq_s64(v26));
          }
          else
          {
            int *v22 = v23;
            if (v20 != v21)
            {
              int64x2_t v30 = v17;
              int v24 = (void *)(v19 + 48 * v21);
              *int v24 = *((void *)v22 - 5);
              fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v24 + 1), (uint64_t)(v22 - 8));
              *(_DWORD *)(v19 + 48 * v21 + 40) = *v22;
              uint64_t v14 = *v4;
              int64x2_t v17 = v30;
            }
            ++v21;
          }
          ++v20;
          uint64_t v16 = *(int64x2_t **)(v14 + 8 * v15);
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v16[3].i64[1] - v16[3].i64[0]) >> 4);
          v22 += 12;
        }
        while (v20 < v27);
        int64x2_t v31 = v17;
      }
      else
      {
        int64x2_t v31 = v16[2];
        uint64_t v21 = 0;
        unint64_t v27 = 0;
      }
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteArcs(v16, v27 - v21);
      uint64_t v14 = *(void *)(a1 + 64);
      *(int64x2_t *)(*(void *)(v14 + 8 * v15++) + 32) = v31;
    }
    while (v15 < (*(void *)(a1 + 72) - v14) >> 3);
  }
  uint64_t v28 = *(int *)(a1 + 88);
  if (v28 == -1)
  {
    uint64_t v29 = v33.__begin_;
    if (!v33.__begin_) {
      return;
    }
  }
  else
  {
    uint64_t v29 = v33.__begin_;
    *(_DWORD *)(a1 + 88) = v33.__begin_[v28];
  }
  v33.__end_ = v29;
  operator delete(v29);
}

void sub_1B1AC4864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~MutableArcIterator()
{
}

uint64_t fst::ArcIteratorBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 24) >= 0xAAAAAAAAAAAAAAABLL
                               * ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 56)
                                          - *(void *)(*(void *)(a1 + 8) + 48)) >> 4);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Value_(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48) + 48 * *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Reset_(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Flags_()
{
  return 15;
}

uint64_t std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 16);
    *(void *)(a1 + 16) = i - 16;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__append(void *a1, unint64_t a2)
{
  uint64_t v5 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v4 = v5;
  uint64_t v6 = *(void *)(result - 8);
  if (a2 > (v5 - v6) >> 4)
  {
    unint64_t v7 = a2 + ((v6 - *a1) >> 4);
    if (!(v7 >> 60))
    {
      uint64_t v8 = v4 - *a1;
      if (v8 >> 3 > v7) {
        unint64_t v7 = v8 >> 3;
      }
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v9 = v7;
      }
      if (v9) {
        std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(result, v9);
      }
      fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst();
    }
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (a2) {
    fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst();
  }
  a1[1] = v6;
  return result;
}

void sub_1B1AC4A9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void fst::RmEpsilon<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>(void *a1, uint64_t *a2, uint64_t a3)
{
  if ((*(unsigned int (**)(void *))(*(void *)a1 + 24))(a1) == -1) {
    return;
  }
  int v6 = (*(uint64_t (**)(void *))(*(void *)a1 + 160))(a1);
  LOBYTE(__p) = 0;
  std::vector<BOOL>::vector(&v76, v6, (unsigned __int8 *)&__p);
  int v7 = (*(uint64_t (**)(void *))(*(void *)a1 + 24))(a1);
  uint64_t v8 = 0;
  *(void *)&v76[((unint64_t)v7 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v7;
LABEL_3:
  if ((int)v8 < (*(int (**)(void *))(*(void *)a1 + 160))(a1))
  {
    unint64_t v50 = 0;
    (*(void (**)(void *, uint64_t, void **))(*(void *)a1 + 136))(a1, v8, &__p);
    while (__p)
    {
      if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p))
      {
        if (__p)
        {
          (*(void (**)(void))(*(void *)__p + 8))();
          goto LABEL_26;
        }
LABEL_24:
        if (v49) {
          --*(_DWORD *)v49;
        }
LABEL_26:
        uint64_t v8 = (v8 + 1);
        goto LABEL_3;
      }
      if (!__p) {
        goto LABEL_12;
      }
      unint64_t v9 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__p + 32))();
      uint64_t v10 = __p;
      if (*v9) {
        goto LABEL_15;
      }
      if (__p)
      {
        uint64_t v11 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
        uint64_t v10 = __p;
        goto LABEL_14;
      }
LABEL_13:
      uint64_t v10 = 0;
      uint64_t v11 = (uint64_t)&v47[6 * v50];
LABEL_14:
      if (*(_DWORD *)(v11 + 4))
      {
LABEL_15:
        if (v10)
        {
          uint64_t v12 = (*(uint64_t (**)(void *))(*(void *)v10 + 32))(v10);
          uint64_t v10 = __p;
        }
        else
        {
LABEL_17:
          uint64_t v10 = 0;
          uint64_t v12 = (uint64_t)&v47[6 * v50];
        }
        *(void *)&v76[((unint64_t)*(int *)(v12 + 40) >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << *(_DWORD *)(v12 + 40);
      }
      if (v10) {
        (*(void (**)(void *))(*(void *)v10 + 40))(v10);
      }
      else {
        ++v50;
      }
    }
    if (v50 >= v48) {
      goto LABEL_24;
    }
LABEL_12:
    if (LODWORD(v47[6 * v50])) {
      goto LABEL_17;
    }
    goto LABEL_13;
  }
  memset(&v75, 0, sizeof(v75));
  int v13 = (*(uint64_t (**)(void *))(*(void *)a1 + 160))(a1);
  std::vector<int>::reserve(&v75, v13);
  if (((*(uint64_t (**)(void *, uint64_t, void))(*(void *)a1 + 64))(a1, 0x4000000000, 0) & 0x4000000000) == 0)
  {
    if (((*(uint64_t (**)(void *, uint64_t, void))(*(void *)a1 + 64))(a1, 0x800000000, 0) & 0x800000000) == 0)
    {
      uint64_t v71 = 0;
      p_p = 0;
      uint64_t v73 = 0;
      uint64_t v74 = 0;
      std::string __p = &p_p;
      uint64_t v47 = 0;
      unint64_t v48 = 0;
      uint64_t v49 = &v71;
      fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>((uint64_t)a1, (uint64_t)&__p);
    }
    std::string __p = 0;
    uint64_t v47 = 0;
    unint64_t v48 = 0;
    LOBYTE(v70.__begin_) = 0;
    p_p = &__p;
    uint64_t v73 = &v70;
    fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>();
  }
  for (signed int i = 0; i < (*(int (**)(void *))(*(void *)a1 + 160))(a1); ++i)
  {
    std::vector<unsigned int>::pointer end = v75.__end_;
    if (v75.__end_ >= v75.__end_cap_.__value_)
    {
      std::vector<unsigned int>::pointer begin = v75.__begin_;
      int64_t v18 = v75.__end_ - v75.__begin_;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      int64_t v20 = (char *)v75.__end_cap_.__value_ - (char *)v75.__begin_;
      if (((char *)v75.__end_cap_.__value_ - (char *)v75.__begin_) >> 1 > v19) {
        unint64_t v19 = v20 >> 1;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        char v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v75.__end_cap_, v21);
        std::vector<unsigned int>::pointer begin = v75.__begin_;
        std::vector<unsigned int>::pointer end = v75.__end_;
      }
      else
      {
        char v22 = 0;
      }
      int v23 = (unsigned int *)&v22[4 * v18];
      *int v23 = i;
      uint64_t v16 = v23 + 1;
      while (end != begin)
      {
        unsigned int v24 = *--end;
        *--int v23 = v24;
      }
      v75.__begin_ = v23;
      v75.__end_ = v16;
      v75.__end_cap_.__value_ = (unsigned int *)&v22[4 * v21];
      if (begin) {
        operator delete(begin);
      }
    }
    else
    {
      *v75.__end_ = i;
      uint64_t v16 = end + 1;
    }
    v75.__end_ = v16;
  }
  std::string __p = a1;
  uint64_t v47 = a2;
  unint64_t v48 = (unint64_t)a1;
  uint64_t v49 = a2;
  unint64_t v50 = *(void *)a3;
  int v51 = *(_DWORD *)(a3 + 16);
  char v52 = *(unsigned char *)(a3 + 20);
  char v53 = 1;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  memset(v57, 0, sizeof(v57));
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a2);
  memset(v58, 0, sizeof(v58));
  int v59 = 1065353216;
  long long v63 = 0u;
  memset(v60, 0, sizeof(v60));
  long long v61 = 0u;
  long long v62 = 0u;
  uint64_t v64 = 0;
  uint64_t v66 = 0;
  int v67 = 0;
  uint64_t v68 = 0;
  int v69 = 0;
  for (std::vector<unsigned int>::pointer j = v75.__end_; v75.__begin_ != v75.__end_; std::vector<unsigned int>::pointer j = v75.__end_)
  {
    unint64_t v26 = (int)*(j - 1);
    v75.__end_ = j - 1;
    if (((*(void *)&v76[(v26 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v26) & 1) == 0)
    {
      if (*(unsigned char *)(a3 + 21)) {
        continue;
      }
      LODWORD(p_p) = 0;
      LODWORD(p_p) = *(_DWORD *)(a3 + 24);
      LODWORD(v70.__begin_) = 0;
      LODWORD(v70.__begin_) = *(_DWORD *)(a3 + 28);
      LODWORD(v71) = 2139095040;
      float v77 = INFINITY;
      if (*(float *)&p_p != INFINITY
        || *(float *)&v70.__begin_ != v77
        || *(void *)(a3 + 40) != *(void *)(a3 + 32)
        || *(_DWORD *)(a3 + 56) != -1)
      {
        continue;
      }
    }
    fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Expand((uint64_t *)&__p, v26);
    uint64_t v42 = v65;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v43 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v43, v66, (uint64_t)v67, (v67 - (unsigned char *)v66) >> 2);
    (*(void (**)(void *, unint64_t, uint64_t *))(*(void *)a1 + 184))(a1, v26, &v42);
    if (v43)
    {
      uint64_t v44 = v43;
      operator delete(v43);
    }
    (*(void (**)(void *, unint64_t))(*(void *)a1 + 240))(a1, v26);
    (*(void (**)(void *, unint64_t, unint64_t))(*(void *)a1 + 256))(a1, v26, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v63 + 1) - v63) >> 4));
    uint64_t v27 = *((void *)&v63 + 1);
    for (uint64_t k = v63; k != v27; uint64_t k = v63)
    {
      (*(void (**)(void *, unint64_t, uint64_t))(*(void *)a1 + 208))(a1, v26, v27 - 48);
      uint64_t v29 = *((void *)&v63 + 1);
      int64x2_t v30 = *(void **)(*((void *)&v63 + 1) - 32);
      if (v30)
      {
        *(void *)(*((void *)&v63 + 1) - ++*(void *)(result + 24) = v30;
        operator delete(v30);
      }
      uint64_t v27 = v29 - 48;
      *((void *)&v63 + 1) = v29 - 48;
    }
  }
  if (*(unsigned char *)(a3 + 21)
    || (LODWORD(p_p) = 0,
        LODWORD(p_p) = *(_DWORD *)(a3 + 24),
        LODWORD(v70.__begin_) = 0,
        LODWORD(v70.__begin_) = *(_DWORD *)(a3 + 28),
        LODWORD(v71) = 2139095040,
        float v77 = INFINITY,
        *(float *)&p_p != INFINITY)
    || *(float *)&v70.__begin_ != v77
    || *(void *)(a3 + 40) != *(void *)(a3 + 32)
    || *(_DWORD *)(a3 + 56) != -1)
  {
    for (unint64_t m = 0; (uint64_t)m < (*(int (**)(void *))(*(void *)a1 + 160))(a1); ++m)
    {
      if (((*(void *)&v76[(m >> 3) & 0x1FFFFFFFFFFFFFF8] >> m) & 1) == 0) {
        (*(void (**)(void *, unint64_t))(*(void *)a1 + 240))(a1, m);
      }
    }
  }
  if (v57[28]) {
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4, 4);
  }
  unint64_t v32 = (*(uint64_t (**)(void *, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v33 = fst::RmEpsilonProperties(v32, 0);
  (*(void (**)(void *, unint64_t, uint64_t))(*(void *)a1 + 192))(a1, v33, 0x3FFFFFFF0007);
  LODWORD(p_p) = 0;
  float v34 = *(float *)(a3 + 24);
  int v35 = *(_DWORD *)(a3 + 28);
  *(float *)&p_p = v34;
  LODWORD(v70.__begin_) = v35;
  LODWORD(v71) = 2139095040;
  float v77 = INFINITY;
  if (v34 != INFINITY
    || *(float *)&v70.__begin_ != v77
    || *(void *)(a3 + 40) != *(void *)(a3 + 32)
    || *(_DWORD *)(a3 + 56) != -1)
  {
    *(float *)long long v38 = v34;
    v38[1] = v35;
    long long v40 = 0;
    uint64_t v41 = 0;
    long long v39 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v39, *(const void **)(a3 + 32), *(void *)(a3 + 40), (uint64_t)(*(void *)(a3 + 40) - *(void *)(a3 + 32)) >> 2);
    fst::Prune<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t)a1, (uint64_t)v38, *(_DWORD *)(a3 + 56), 0.0009765625);
    if (v39)
    {
      long long v40 = v39;
      operator delete(v39);
    }
  }
  if (*(unsigned char *)(a3 + 21))
  {
    LODWORD(p_p) = 0;
    LODWORD(p_p) = *(_DWORD *)(a3 + 24);
    LODWORD(v70.__begin_) = 0;
    LODWORD(v70.__begin_) = *(_DWORD *)(a3 + 28);
    LODWORD(v71) = 2139095040;
    float v77 = INFINITY;
    if (*(float *)&p_p == INFINITY
      && *(float *)&v70.__begin_ == v77
      && *(void *)(a3 + 40) == *(void *)(a3 + 32)
      && *(_DWORD *)(a3 + 56) == -1)
    {
      fst::Connect<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t)a1);
    }
  }
  if (v66)
  {
    int v67 = v66;
    operator delete(v66);
  }
  p_p = (void **)&v63;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&p_p);
  long long v36 = (void *)*((void *)&v62 + 1);
  if (*((void *)&v62 + 1))
  {
    do
    {
      long long v37 = (void *)*v36;
      operator delete(v36);
      long long v36 = v37;
    }
    while (v37);
  }
  *((void *)&v62 + 1) = 0;
  if ((void)v61) {
    operator delete((void *)v61);
  }
  std::deque<int>::~deque[abi:ne180100](v60);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v58);
  fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ShortestDistanceState((uint64_t)&v48);
  if (v75.__begin_)
  {
    v75.__end_ = v75.__begin_;
    operator delete(v75.__begin_);
  }
  if (v76) {
    operator delete(v76);
  }
}

void sub_1B1AC5890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v20 - 169));
  if (*(char *)(v20 - 177) < 0) {
    operator delete(*(void **)(v20 - 200));
  }
  if (__p) {
    operator delete(__p);
  }
  char v22 = *(void **)(v20 - 144);
  if (v22)
  {
    *(void *)(v20 - 136) = v22;
    operator delete(v22);
  }
  int v23 = *(void **)(v20 - 120);
  if (v23) {
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A40F38;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  uint64_t v3 = a1 + 48;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v4 & 0x4000000000) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) != -1)
  {
    if ((v4 & 0x800000000) == 0)
    {
      if ((v4 & 0x200000000) == 0)
      {
        uint64_t v6 = 0;
        v5[0] = v3;
        v5[1] = 0;
        v5[2] = 0;
        v5[3] = &v6;
        fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a2, (uint64_t)v5);
      }
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1B1AC6288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  int64x2_t v30 = *v28;
  if (*v28)
  {
    *(void *)(v26 + 56) = v30;
    operator delete(v30);
  }
  int64x2_t v31 = *v27;
  if (*v27)
  {
    *(void *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B1AC6C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  *a5 = 1;
  *a6 = 1;
  uint64_t v9 = *(void *)(a3 + 8) - *(void *)a3;
  if (v9)
  {
    unint64_t v10 = v9 >> 2;
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    bzero(*(void **)a3, 4 * v10);
  }
  unsigned int v34 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v32);
  while (1)
  {
    uint64_t result = v32;
    if (!v32)
    {
      if ((int)v34 >= v33) {
        return result;
      }
LABEL_11:
      uint64_t v13 = v34;
      goto LABEL_12;
    }
    int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 16))(v32);
    uint64_t result = v32;
    if (v12) {
      break;
    }
    if (!v32) {
      goto LABEL_11;
    }
    uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v32 + 24))();
LABEL_12:
    unint64_t v31 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v13, v29);
    uint64_t v14 = (int)v13;
    while (1)
    {
      if (!v29[0])
      {
        if (v31 >= v29[2]) {
          goto LABEL_49;
        }
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(void))(*(void *)v29[0] + 24))(v29[0])) {
        break;
      }
      if (v29[0])
      {
        uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v29[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v15 = v29[1] + 48 * v31;
LABEL_19:
      if (*(void *)v15) {
        goto LABEL_43;
      }
      uint64_t v16 = *(int *)(*a2 + 4 * v14);
      if (v16 == *(_DWORD *)(*a2 + 4 * *(int *)(v15 + 40)))
      {
        uint64_t v17 = *(_DWORD **)a3;
        if (!a4) {
          goto LABEL_25;
        }
        *(_OWORD *)std::string __p = 0u;
        long long v28 = 0u;
        char v18 = fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(a4, v15 + 8, (uint64_t)__p);
        if (__p[1])
        {
          *(void **)&long long v28 = __p[1];
          operator delete(__p[1]);
        }
        if (v18)
        {
LABEL_25:
          int v19 = 1;
          goto LABEL_34;
        }
        if ((v17[v16] | 2) == 2)
        {
          LODWORD(__p[0]) = 0;
          float v20 = *(float *)(v15 + 8);
          float v21 = *(float *)(v15 + 12);
          *(float *)std::string __p = v20;
          float v37 = v21;
          int v36 = 2139095040;
          float v35 = INFINITY;
          if (v20 == INFINITY && v37 == v35 && *(void *)(v15 + 24) == *(void *)(v15 + 16)
            || (*(float *)std::string __p = v20, v37 = v21, v36 = 0, v35 = 0.0, v20 == 0.0)
            && v37 == v35
            && *(void *)(v15 + 24) == *(void *)(v15 + 16))
          {
            int v19 = 2;
          }
          else
          {
            int v19 = 3;
          }
LABEL_34:
          v17[v16] = v19;
        }
        *a5 = 0;
      }
      LODWORD(__p[0]) = 0;
      float v22 = *(float *)(v15 + 8);
      float v23 = *(float *)(v15 + 12);
      *(float *)std::string __p = v22;
      float v37 = v23;
      int v36 = 2139095040;
      float v35 = INFINITY;
      if (v22 != INFINITY || v37 != v35 || *(void *)(v15 + 24) != *(void *)(v15 + 16))
      {
        *(float *)std::string __p = v22;
        float v37 = v23;
        int v36 = 0;
        float v35 = 0.0;
        if (v22 != 0.0 || v37 != v35 || *(void *)(v15 + 24) != *(void *)(v15 + 16)) {
          *a6 = 0;
        }
      }
LABEL_43:
      if (v29[0]) {
        (*(void (**)(void))(*(void *)v29[0] + 40))(v29[0]);
      }
      else {
        ++v31;
      }
    }
    if (v29[0])
    {
      (*(void (**)(void))(*(void *)v29[0] + 8))();
      goto LABEL_51;
    }
LABEL_49:
    if (v30) {
      --*v30;
    }
LABEL_51:
    if (v32) {
      (*(void (**)(uint64_t))(*(void *)v32 + 32))(v32);
    }
    else {
      ++v34;
    }
  }
  if (v32) {
    return (*(uint64_t (**)(void))(*(void *)v32 + 8))();
  }
  return result;
}

void sub_1B1AC71B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8))(a22);
  }
  _Unwind_Resume(exception_object);
}

void fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A3A1C8;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  char v3 = 0;
  uint64_t v1 = a1 + 24;
  uint64_t v2 = &v3;
  fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>();
}

void sub_1B1AC739C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  float v22 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 56) = v22;
    operator delete(v22);
  }
  float v23 = *v20;
  if (*v20)
  {
    *(void *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>()
{
}

void sub_1B1AC7CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Expand(uint64_t *a1, int a2)
{
  v77[0] = a2;
  a1[36] = (uint64_t)vdup_n_s32(0x7F800000u);
  uint64_t v4 = (char *)(a1 + 37);
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a1 + 296, 0, 0, 0);
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](a1 + 33);
  fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::ShortestDistance(a1 + 2, a2);
  if (*((unsigned char *)a1 + 132)) {
    return;
  }
  unsigned int v57 = v4;
  int v59 = a1 + 23;
  std::deque<int>::push_back(a1 + 23, v77);
  uint64_t v5 = a1[28];
  if (!v5) {
    goto LABEL_84;
  }
  uint64_t v6 = a1 + 33;
  unsigned int v58 = (float32x2_t *)(a1 + 36);
  int v7 = a1 + 29;
  do
  {
    uint64_t v8 = v5 - 1;
    int v9 = *(_DWORD *)(*(void *)(a1[24] + (((unint64_t)(a1[27] + v8) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * ((a1[27] + v8) & 0x3FF));
    a1[28] = v8;
    std::deque<int>::__maybe_remove_back_spare[abi:ne180100](v59, 1);
    uint64_t v10 = v9;
    while (a1[30] <= (unint64_t)v9)
    {
      v66.i8[0] = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 29), &v66);
    }
    uint64_t v11 = *(void *)(*v7 + 8 * ((unint64_t)v9 >> 6));
    if ((v11 & (1 << v9)) != 0) {
      goto LABEL_72;
    }
    *(void *)(*v7 + 8 * ((unint64_t)v9 >> 6)) = v11 | (1 << v9);
    uint64_t v12 = a1[32];
    uint64_t v13 = operator new(0x10uLL);
    *(void *)uint64_t v13 = v12;
    uint64_t v13[2] = v9;
    a1[32] = (uint64_t)v13;
    uint64_t v14 = *a1;
    unint64_t v76 = 0;
    (*(void (**)(uint64_t))(*(void *)v14 + 136))(v14);
    while (1)
    {
      if (!v72)
      {
        if (v76 >= (unint64_t)v74) {
          goto LABEL_56;
        }
        goto LABEL_13;
      }
      if ((*(unsigned int (**)(void *))(*v72 + 24))(v72)) {
        break;
      }
      if (v72)
      {
        uint64_t v15 = (char *)(*(uint64_t (**)(void))(*v72 + 32))();
        goto LABEL_14;
      }
LABEL_13:
      uint64_t v15 = &v73[48 * v76];
LABEL_14:
      float32x2_t v66 = *(float32x2_t *)v15;
      int v67 = (void *)*((void *)v15 + 1);
      int v69 = 0;
      uint64_t v70 = 0;
      uint64_t v68 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v68, *((const void **)v15 + 2), *((void *)v15 + 3), (uint64_t)(*((void *)v15 + 3) - *((void *)v15 + 2)) >> 2);
      int v71 = *((_DWORD *)v15 + 10);
      fst::Times<fst::LatticeWeightTpl<float>,int>((float32x2_t *)(*(void *)a1[1] + 32 * v10), (float32x2_t *)&v67, (int32x2_t *)&v62);
      int v67 = (void *)v62;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v68, (char *)__p, (uint64_t)v64, (v64 - (unsigned char *)__p) >> 2);
      if (__p)
      {
        uint64_t v64 = __p;
        operator delete(__p);
      }
      if (v66)
      {
        float32x2_t v60 = v66;
        int v61 = v71;
        uint64_t v16 = std::__hash_table<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,std::__unordered_map_hasher<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,true>,std::__unordered_map_equal<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>>::find<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element>(a1 + 17, (int *)&v60);
        if (!v16)
        {
          unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((a1[34] - a1[33]) >> 4);
          int v38 = *((_DWORD *)a1 + 80);
          float32x2_t v62 = v60;
          LODWORD(__p) = v61;
          LODWORD(v64) = v38;
          unint64_t v65 = v37;
          std::__hash_table<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,std::__unordered_map_hasher<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,true>,std::__unordered_map_equal<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>>::__emplace_unique_key_args<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>((uint64_t)(a1 + 17), (int *)&v62, (uint64_t)&v62);
          unint64_t v39 = a1[34];
          if (v39 >= a1[35]) {
            goto LABEL_42;
          }
LABEL_41:
          std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__construct_one_at_end[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>((uint64_t)v6, (uint64_t)&v66);
          uint64_t v40 = v39 + 48;
LABEL_43:
          a1[34] = v40;
          goto LABEL_49;
        }
        int v17 = *((_DWORD *)a1 + 80);
        if (*((_DWORD *)v16 + 8) != v17)
        {
          *((_DWORD *)v16 + 8) = v17;
          unint64_t v39 = a1[34];
          v16[5] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - a1[33]) >> 4);
          if (v39 < a1[35]) {
            goto LABEL_41;
          }
LABEL_42:
          uint64_t v40 = std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__push_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>(v6, (uint64_t)&v66);
          goto LABEL_43;
        }
        uint64_t v18 = v16[5];
        uint64_t v19 = v6;
        uint64_t v20 = *v6;
        uint64_t v21 = *v6 + 48 * v18;
        float v23 = *(float *)(v21 + 8);
        float v24 = *(float *)(v21 + 12);
        float v22 = (float32x2_t *)(v21 + 8);
        uint64_t v25 = (void **)v22;
        if ((float)(v23 + v24) >= (float)(*(float *)&v67 + *((float *)&v67 + 1)))
        {
          uint64_t v25 = &v67;
          if ((float)(v23 + v24) <= (float)(*(float *)&v67 + *((float *)&v67 + 1)))
          {
            uint64_t v25 = (void **)v22;
            if (v23 >= *(float *)&v67)
            {
              uint64_t v25 = &v67;
              if (v23 <= *(float *)&v67)
              {
                uint64_t v26 = *(int **)(v20 + 48 * v18 + 16);
                unint64_t v27 = *(void *)(v20 + 48 * v18 + 24) - (void)v26;
                unint64_t v28 = v27 >> 2;
                uint64_t v29 = (int *)v68;
                unint64_t v30 = (unint64_t)(v69 - (unsigned char *)v68) >> 2;
                uint64_t v25 = &v67;
                if ((int)(v27 >> 2) <= (int)v30)
                {
                  uint64_t v25 = (void **)v22;
                  if ((int)v28 >= 1)
                  {
                    uint64_t v25 = (void **)v22;
                    if ((int)v28 >= (int)v30)
                    {
                      uint64_t v31 = (v27 >> 2) - 1;
                      while (1)
                      {
                        int v33 = *v26++;
                        int v32 = v33;
                        int v35 = *v29++;
                        int v34 = v35;
                        if (v32 < v35) {
                          break;
                        }
                        if (v32 > v34 || v31-- == 0)
                        {
                          uint64_t v25 = (void **)v22;
                          goto LABEL_45;
                        }
                      }
                      uint64_t v25 = &v67;
                    }
                  }
                }
              }
            }
          }
        }
LABEL_45:
        float32x2_t v62 = (float32x2_t)*v25;
        uint64_t v64 = 0;
        unint64_t v65 = 0;
        std::string __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v25[1], (uint64_t)v25[2], ((unsigned char *)v25[2] - (unsigned char *)v25[1]) >> 2);
        float32x2_t *v22 = v62;
        if (v22 != &v62) {
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v20 + 48 * v18 + 16), (char *)__p, (uint64_t)v64, (v64 - (unsigned char *)__p) >> 2);
        }
        uint64_t v6 = v19;
        if (__p)
        {
          uint64_t v64 = __p;
          operator delete(__p);
        }
      }
      else
      {
        while (a1[30] <= (unint64_t)v71)
        {
          v62.i8[0] = 0;
          std::vector<BOOL>::push_back((uint64_t)(a1 + 29), &v62);
        }
        if (((*(void *)(*v7 + (((unint64_t)v71 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v71) & 1) == 0) {
          std::deque<int>::push_back(v59, &v71);
        }
      }
LABEL_49:
      if (v68)
      {
        int v69 = v68;
        operator delete(v68);
      }
      if (v72) {
        (*(void (**)(void *))(*v72 + 40))(v72);
      }
      else {
        ++v76;
      }
    }
    if (v72)
    {
      (*(void (**)(void))(*v72 + 8))();
      goto LABEL_58;
    }
LABEL_56:
    if (v75) {
      --*v75;
    }
LABEL_58:
    uint64_t v41 = (float32x2_t *)(*(void *)a1[1] + 32 * v10);
    (*(void (**)(float32x2_t *__return_ptr))(*(void *)*a1 + 32))(&v62);
    fst::Times<fst::LatticeWeightTpl<float>,int>(v41, &v62, (int32x2_t *)&v72);
    float v42 = *((float *)a1 + 72);
    float v43 = v42 + *((float *)a1 + 73);
    uint64_t v44 = (float32x2_t *)(a1 + 36);
    if (v43 >= (float)(*(float *)&v72 + *((float *)&v72 + 1)))
    {
      if (v43 > (float)(*(float *)&v72 + *((float *)&v72 + 1))) {
        goto LABEL_63;
      }
      uint64_t v44 = (float32x2_t *)(a1 + 36);
      if (v42 >= *(float *)&v72)
      {
        if (v42 > *(float *)&v72) {
          goto LABEL_63;
        }
        uint64_t v45 = (int *)a1[37];
        unint64_t v46 = a1[38] - (void)v45;
        unint64_t v47 = v46 >> 2;
        unint64_t v48 = (int *)v73;
        unint64_t v49 = (unint64_t)(v74 - v73) >> 2;
        if ((int)(v46 >> 2) > (int)v49) {
          goto LABEL_63;
        }
        uint64_t v44 = (float32x2_t *)(a1 + 36);
        if ((int)v47 >= 1)
        {
          uint64_t v44 = (float32x2_t *)(a1 + 36);
          if ((int)v47 >= (int)v49)
          {
            uint64_t v50 = (v46 >> 2) - 1;
            while (1)
            {
              int v52 = *v45++;
              int v51 = v52;
              int v54 = *v48++;
              int v53 = v54;
              if (v51 < v54) {
                break;
              }
              if (v51 > v53 || v50-- == 0)
              {
                uint64_t v44 = (float32x2_t *)(a1 + 36);
                goto LABEL_64;
              }
            }
LABEL_63:
            uint64_t v44 = (float32x2_t *)&v72;
          }
        }
      }
    }
LABEL_64:
    float32x2_t v66 = *v44;
    uint64_t v68 = 0;
    int v69 = 0;
    int v67 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v67, *(const void **)&v44[1], *(void *)&v44[2], (uint64_t)(*(void *)&v44[2] - *(void *)&v44[1]) >> 2);
    *unsigned int v58 = v66;
    if (v58 != &v66) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v57, (char *)v67, (uint64_t)v68, ((unsigned char *)v68 - (unsigned char *)v67) >> 2);
    }
    if (v67)
    {
      uint64_t v68 = v67;
      operator delete(v67);
    }
    if (v73)
    {
      uint64_t v74 = v73;
      operator delete(v73);
    }
    if (__p)
    {
      uint64_t v64 = __p;
      operator delete(__p);
    }
LABEL_72:
    uint64_t v5 = a1[28];
  }
  while (v5);
LABEL_84:
  for (signed int i = (int *)a1[32]; i; signed int i = (int *)a1[32])
  {
    *(void *)(a1[29] + (((unint64_t)i[2] >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << i[2]);
    a1[32] = *(void *)i;
    operator delete(i);
  }
  ++*((_DWORD *)a1 + 80);
}

void sub_1B1AC84DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,void *a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v27 = *(void **)(v25 - 128);
  if (v27)
  {
    *(void *)(v25 - 120) = v27;
    operator delete(v27);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void fst::Prune<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1, uint64_t a2, int a3, double a4)
{
  float v6 = a4;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  int v10 = a3;
  uint64_t v11 = 0;
  float v12 = v6;
  fst::Prune<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a1);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
}

void sub_1B1AC864C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::~RmEpsilonState(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 296);
  if (v2)
  {
    *(void *)(a1 + 304) = v2;
    operator delete(v2);
  }
  int v7 = (void **)(a1 + 264);
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  char v3 = *(void **)(a1 + 256);
  if (v3)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      operator delete(v3);
      char v3 = v4;
    }
    while (v4);
  }
  *(void *)(a1 + 256) = 0;
  uint64_t v5 = *(void **)(a1 + 232);
  if (v5) {
    operator delete(v5);
  }
  std::deque<int>::~deque[abi:ne180100]((void *)(a1 + 184));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 136);
  fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ShortestDistanceState(a1 + 16);
  return a1;
}

void *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  char v3 = result;
  int v4 = *((_DWORD *)result + 2);
  uint64_t v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    *uint64_t result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    uint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    uint64_t v8 = &v5[v7];
    *char v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    uint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::ShortestDistance(uint64_t *a1, int a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)*a1 + 24))(*a1) == -1)
  {
    if (!(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0)) {
      return;
    }
    int32x2_t v132 = (char *)a1 + 116;
LABEL_211:
    *int32x2_t v132 = 1;
    return;
  }
  (*(void (**)(void))(**(void **)(a1[2] + 16) + 56))(*(void *)(a1[2] + 16));
  if (!*((unsigned char *)a1 + 33))
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100]((uint64_t *)a1[1]);
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a1 + 5);
    a1[9] = 0;
  }
  if (a2 == -1) {
    a2 = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  }
  unint64_t v4 = a2;
  uint64_t v5 = (uint64_t *)a1[1];
  unint64_t v6 = v5 + 1;
  uint64_t v7 = *v5;
  if (a2 >= (unint64_t)((v5[1] - *v5) >> 5))
  {
    int32x2_t v8 = vdup_n_s32(0x7F800000u);
    do
    {
      int32x2_t v141 = v8;
      v143 = 0;
      unint64_t v144 = 0;
      std::string __p = 0;
      unint64_t v9 = v5[1];
      if (v9 >= v5[2])
      {
        uint64_t v10 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(v5, (uint64_t)&v141);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)v5, (uint64_t)&v141);
        uint64_t v10 = v9 + 32;
      }
      uint64_t *v6 = v10;
      if (__p)
      {
        v143 = __p;
        operator delete(__p);
      }
      int32x2_t v141 = v8;
      v143 = 0;
      unint64_t v144 = 0;
      std::string __p = 0;
      uint64_t v11 = (void *)a1[6];
      if ((unint64_t)v11 >= a1[7])
      {
        uint64_t v12 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(a1 + 5, (uint64_t)&v141);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)(a1 + 5), (uint64_t)&v141);
        uint64_t v12 = (uint64_t)(v11 + 4);
      }
      a1[6] = v12;
      if (__p)
      {
        v143 = __p;
        operator delete(__p);
      }
      v141.i8[0] = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v141);
      uint64_t v5 = (uint64_t *)a1[1];
      unint64_t v6 = v5 + 1;
      uint64_t v7 = *v5;
    }
    while (a2 >= (unint64_t)((v5[1] - *v5) >> 5));
  }
  if (*((unsigned char *)a1 + 33))
  {
    uint64_t v13 = (char *)a1[11];
    uint64_t v14 = (char *)a1[12];
    unint64_t v15 = (v14 - v13) >> 2;
    if (v15 <= a2)
    {
      uint64_t v16 = a1 + 13;
      do
      {
        if ((unint64_t)v14 >= *v16)
        {
          unint64_t v18 = v15 + 1;
          if ((v15 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = *v16 - (void)v13;
          if (v19 >> 1 > v18) {
            unint64_t v18 = v19 >> 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20)
          {
            uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v20);
            uint64_t v13 = (char *)a1[11];
            uint64_t v14 = (char *)a1[12];
          }
          else
          {
            uint64_t v21 = 0;
          }
          float v22 = &v21[4 * v15];
          *(_DWORD *)float v22 = -1;
          int v17 = v22 + 4;
          while (v14 != v13)
          {
            int v23 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *((_DWORD *)v22 - 1) = v23;
            v22 -= 4;
          }
          a1[11] = (uint64_t)v22;
          a1[12] = (uint64_t)v17;
          a1[13] = (uint64_t)&v21[4 * v20];
          if (v13)
          {
            operator delete(v13);
            uint64_t v13 = (char *)a1[11];
          }
          else
          {
            uint64_t v13 = v22;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v14 = -1;
          int v17 = v14 + 4;
        }
        a1[12] = (uint64_t)v17;
        unint64_t v15 = (v17 - v13) >> 2;
        uint64_t v14 = v17;
      }
      while (v15 <= a2);
      uint64_t v7 = *(void *)a1[1];
    }
    *(_DWORD *)&v13[4 * a2] = *((_DWORD *)a1 + 28);
  }
  uint64_t v24 = v7 + 32 * a2;
  *(void *)uint64_t v24 = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v24 + 8), 0, 0, 0);
  uint64_t v25 = a1 + 5;
  uint64_t v26 = a1[5] + 32 * v4;
  *(void *)uint64_t v26 = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v26 + 8), 0, 0, 0);
  unint64_t v27 = a1 + 8;
  unint64_t v28 = *(uint64_t **)(a1[2] + 16);
  uint64_t v29 = *v28;
  *(void *)(a1[8] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  (*(void (**)(uint64_t *, unint64_t))(v29 + 24))(v28, v4);
  unint64_t v30 = a1 + 13;
  int32x2_t v132 = (char *)a1 + 116;
  int32x2_t v31 = vdup_n_s32(0x7F800000u);
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 48))(*(void *)(a1[2] + 16)))
    {
LABEL_210:
      ++*((_DWORD *)a1 + 28);
      if (!(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0)) {
        return;
      }
      goto LABEL_211;
    }
    int v32 = (*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 16))(*(void *)(a1[2] + 16));
    (*(void (**)(void))(**(void **)(a1[2] + 16) + 32))(*(void *)(a1[2] + 16));
    while (1)
    {
      int v33 = (uint64_t *)a1[1];
      int v34 = v33 + 1;
      if (v32 < (unint64_t)((v33[1] - *v33) >> 5)) {
        break;
      }
      int32x2_t v141 = v31;
      v143 = 0;
      unint64_t v144 = 0;
      std::string __p = 0;
      unint64_t v35 = v33[1];
      if (v35 >= v33[2])
      {
        uint64_t v36 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(v33, (uint64_t)&v141);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)v33, (uint64_t)&v141);
        uint64_t v36 = v35 + 32;
      }
      *int v34 = v36;
      if (__p)
      {
        v143 = __p;
        operator delete(__p);
      }
      int32x2_t v141 = v31;
      v143 = 0;
      unint64_t v144 = 0;
      std::string __p = 0;
      unint64_t v37 = (void *)a1[6];
      if ((unint64_t)v37 >= a1[7])
      {
        uint64_t v38 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(a1 + 5, (uint64_t)&v141);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)(a1 + 5), (uint64_t)&v141);
        uint64_t v38 = (uint64_t)(v37 + 4);
      }
      a1[6] = v38;
      if (__p)
      {
        v143 = __p;
        operator delete(__p);
      }
      v141.i8[0] = 0;
      std::vector<BOOL>::push_back((uint64_t)v27, &v141);
    }
    if (*((unsigned char *)a1 + 32))
    {
      (*(void (**)(int32x2_t *__return_ptr))(*(void *)*a1 + 32))(&v141);
      v137.i32[0] = v141.i32[1];
      v146.i32[0] = v141.i32[0];
      v133.i32[0] = 2139095040;
      float v150 = INFINITY;
      if (*(float *)v141.i32 == INFINITY)
      {
        uint64_t v40 = __p;
        if (*(float *)v137.i32 == v150)
        {
          BOOL v39 = v143 != __p;
          if (!__p)
          {
LABEL_64:
            if (v39) {
              goto LABEL_210;
            }
            goto LABEL_65;
          }
        }
        else
        {
          BOOL v39 = 1;
          if (!__p) {
            goto LABEL_64;
          }
        }
      }
      else
      {
        BOOL v39 = 1;
        uint64_t v40 = __p;
        if (!__p) {
          goto LABEL_64;
        }
      }
      v143 = v40;
      operator delete(v40);
      goto LABEL_64;
    }
LABEL_65:
    *(void *)(*v27 + (((unint64_t)v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v32);
    uint64_t v41 = *v25 + 32 * v32;
    float32x2_t v146 = *(float32x2_t *)v41;
    uint64_t v148 = 0;
    uint64_t v149 = 0;
    float v147 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v147, *(const void **)(v41 + 8), *(void *)(v41 + 16), (uint64_t)(*(void *)(v41 + 16) - *(void *)(v41 + 8)) >> 2);
    uint64_t v42 = *v25 + 32 * v32;
    *(int32x2_t *)uint64_t v42 = v31;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v42 + 8), 0, 0, 0);
    uint64_t v43 = *a1;
    uint64_t v44 = *(void *)*a1;
    unint64_t v145 = 0;
    (*(void (**)(uint64_t, void, int32x2_t *))(v44 + 136))(v43, v32, &v141);
    while (1)
    {
      if (!*(void *)&v141)
      {
        if (v145 >= (unint64_t)v143)
        {
          int v86 = 10;
          goto LABEL_198;
        }
        goto LABEL_71;
      }
      char v45 = (*(uint64_t (**)(int32x2_t))(**(void **)&v141 + 24))(v141);
      int32x2_t v46 = v141;
      if (v45) {
        break;
      }
      if (v141)
      {
        unint64_t v47 = (float32x2_t *)(*(uint64_t (**)(void))(**(void **)&v141 + 32))();
        goto LABEL_72;
      }
LABEL_71:
      unint64_t v47 = (float32x2_t *)((char *)__p + 48 * v145);
LABEL_72:
      if (*v47)
      {
        int32x2_t v46 = v141;
        goto LABEL_166;
      }
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v49 = v48 + 1;
      for (unint64_t i = v47[5].i32[0]; i >= (v48[1] - *v48) >> 5; unint64_t i = v47[5].i32[0])
      {
        int32x2_t v137 = v31;
        uint64_t v139 = 0;
        uint64_t v140 = 0;
        uint64_t v138 = 0;
        unint64_t v51 = v48[1];
        if (v51 >= v48[2])
        {
          uint64_t v52 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(v48, (uint64_t)&v137);
        }
        else
        {
          std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)v48, (uint64_t)&v137);
          uint64_t v52 = v51 + 32;
        }
        *unint64_t v49 = v52;
        if (v138)
        {
          uint64_t v139 = v138;
          operator delete(v138);
        }
        int32x2_t v137 = v31;
        uint64_t v139 = 0;
        uint64_t v140 = 0;
        uint64_t v138 = 0;
        int v53 = (void *)a1[6];
        if ((unint64_t)v53 >= a1[7])
        {
          uint64_t v54 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(a1 + 5, (uint64_t)&v137);
        }
        else
        {
          std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)(a1 + 5), (uint64_t)&v137);
          uint64_t v54 = (uint64_t)(v53 + 4);
        }
        a1[6] = v54;
        if (v138)
        {
          uint64_t v139 = v138;
          operator delete(v138);
        }
        v137.i8[0] = 0;
        std::vector<BOOL>::push_back((uint64_t)v27, &v137);
        unint64_t v48 = (uint64_t *)a1[1];
        unint64_t v49 = v48 + 1;
      }
      if (*((unsigned char *)a1 + 33))
      {
        long long v55 = (char *)a1[11];
        long long v56 = (char *)a1[12];
        unint64_t v57 = (v56 - v55) >> 2;
        if (v57 <= (int)i)
        {
          do
          {
            if ((unint64_t)v56 >= *v30)
            {
              unint64_t v60 = v57 + 1;
              if ((v57 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v61 = *v30 - (void)v55;
              if (v61 >> 1 > v60) {
                unint64_t v60 = v61 >> 1;
              }
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v62 = v60;
              }
              if (v62)
              {
                long long v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v30, v62);
                long long v55 = (char *)a1[11];
                long long v56 = (char *)a1[12];
              }
              else
              {
                long long v63 = 0;
              }
              uint64_t v64 = &v63[4 * v57];
              *(_DWORD *)uint64_t v64 = -1;
              int v59 = v64 + 4;
              while (v56 != v55)
              {
                int v65 = *((_DWORD *)v56 - 1);
                v56 -= 4;
                *((_DWORD *)v64 - 1) = v65;
                v64 -= 4;
              }
              a1[11] = (uint64_t)v64;
              a1[12] = (uint64_t)v59;
              a1[13] = (uint64_t)&v63[4 * v62];
              if (v55)
              {
                operator delete(v55);
                long long v55 = (char *)a1[11];
              }
              else
              {
                long long v55 = v64;
              }
            }
            else
            {
              *(_DWORD *)long long v56 = -1;
              int v59 = v56 + 4;
            }
            a1[12] = (uint64_t)v59;
            unint64_t v57 = (v59 - v55) >> 2;
            LODWORD(i) = v47[5].i32[0];
            long long v56 = v59;
          }
          while (v57 <= (int)i);
          uint64_t v58 = (int)i;
          unint64_t v48 = (uint64_t *)a1[1];
        }
        else
        {
          uint64_t v58 = (int)i;
        }
        if (*(_DWORD *)&v55[4 * v58] != *((_DWORD *)a1 + 28))
        {
          uint64_t v66 = *v48 + 32 * v58;
          *(int32x2_t *)uint64_t v66 = v31;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v66 + 8), 0, 0, 0);
          uint64_t v67 = *v25 + 32 * v47[5].i32[0];
          *(int32x2_t *)uint64_t v67 = v31;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v67 + 8), 0, 0, 0);
          unint64_t v48 = (uint64_t *)a1[1];
          uint64_t v68 = (void *)a1[11];
          int v69 = *((_DWORD *)a1 + 28);
          unint64_t v70 = v47[5].i32[0];
          *(void *)(a1[8] + ((v70 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v70);
          *((_DWORD *)v68 + v70) = v69;
          LODWORD(i) = v47[5].i32[0];
        }
      }
      uint64_t v71 = *v48;
      uint64_t v72 = *v25;
      fst::Times<fst::LatticeWeightTpl<float>,int>(&v146, v47 + 1, &v137);
      uint64_t v73 = (int)i;
      uint64_t v74 = v71 + 32 * (int)i;
      float v75 = *(float *)v74;
      float v76 = *(float *)v74 + *(float *)(v74 + 4);
      float v77 = (int32x2_t *)v74;
      if (v76 >= (float)(*(float *)v137.i32 + *(float *)&v137.i32[1]))
      {
        if (v76 > (float)(*(float *)v137.i32 + *(float *)&v137.i32[1])) {
          goto LABEL_111;
        }
        float v77 = (int32x2_t *)v74;
        if (v75 >= *(float *)v137.i32)
        {
          if (v75 > *(float *)v137.i32) {
            goto LABEL_111;
          }
          BOOL v92 = *(int **)(v71 + 32 * v73 + 8);
          unint64_t v93 = *(void *)(v71 + 32 * v73 + 16) - (void)v92;
          unint64_t v94 = v93 >> 2;
          uint64_t v95 = (int *)v138;
          unint64_t v96 = (unint64_t)(v139 - (unsigned char *)v138) >> 2;
          if ((int)(v93 >> 2) > (int)v96) {
            goto LABEL_111;
          }
          BOOL v97 = (int)v94 < 1 || (int)v94 < (int)v96;
          float v77 = (int32x2_t *)v74;
          if (!v97)
          {
            uint64_t v98 = (v93 >> 2) - 1;
            while (1)
            {
              int v100 = *v92++;
              int v99 = v100;
              int v102 = *v95++;
              int v101 = v102;
              if (v99 < v102) {
                break;
              }
              if (v99 > v101 || v98-- == 0)
              {
                float v77 = (int32x2_t *)v74;
                goto LABEL_114;
              }
            }
LABEL_111:
            float v77 = &v137;
          }
        }
      }
LABEL_114:
      int32x2_t v133 = *v77;
      uint64_t v135 = 0;
      uint64_t v136 = 0;
      int v134 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v134, *(const void **)&v77[1], *(void *)&v77[2], (uint64_t)(*(void *)&v77[2] - *(void *)&v77[1]) >> 2);
      float v78 = *(float *)(v74 + 4);
      BOOL v79 = *(float *)v74 == *(float *)v133.i32 && v78 == *(float *)&v133.i32[1];
      if (v79 || vabds_f32(*(float *)v74 + v78, *(float *)v133.i32 + *(float *)&v133.i32[1]) <= *((float *)a1 + 7))
      {
        uint64_t v80 = v73;
        uint64_t v83 = v71 + 32 * v73;
        unint64_t v84 = *(const void **)(v83 + 8);
        size_t v85 = *(void *)(v83 + 16) - (void)v84;
        BOOL v82 = v134;
        if (v85 != v135 - (unsigned char *)v134)
        {
          BOOL v81 = 0;
          if (!v134) {
            goto LABEL_126;
          }
LABEL_125:
          uint64_t v135 = v82;
          operator delete(v82);
          goto LABEL_126;
        }
        BOOL v81 = memcmp(v84, v134, v85) == 0;
        if (v82) {
          goto LABEL_125;
        }
      }
      else
      {
        uint64_t v80 = v73;
        BOOL v81 = 0;
        BOOL v82 = v134;
        if (v134) {
          goto LABEL_125;
        }
      }
LABEL_126:
      if (v81)
      {
        int v86 = 0;
        int v87 = 1;
        unint64_t v30 = a1 + 13;
        unint64_t v27 = a1 + 8;
        goto LABEL_163;
      }
      float v88 = *(float *)v74;
      float v89 = *(float *)v74 + *(float *)(v74 + 4);
      unint64_t v90 = (int32x2_t *)v74;
      uint64_t v91 = v80;
      if (v89 >= (float)(*(float *)v137.i32 + *(float *)&v137.i32[1]))
      {
        if (v89 > (float)(*(float *)v137.i32 + *(float *)&v137.i32[1])) {
          goto LABEL_130;
        }
        unint64_t v90 = (int32x2_t *)v74;
        if (v88 >= *(float *)v137.i32)
        {
          if (v88 > *(float *)v137.i32) {
            goto LABEL_130;
          }
          unint64_t v110 = *(int **)(v71 + 32 * v80 + 8);
          unint64_t v111 = *(void *)(v71 + 32 * v80 + 16) - (void)v110;
          unint64_t v112 = v111 >> 2;
          unint64_t v113 = (int *)v138;
          unint64_t v114 = (unint64_t)(v139 - (unsigned char *)v138) >> 2;
          if ((int)(v111 >> 2) > (int)v114) {
            goto LABEL_130;
          }
          unint64_t v90 = (int32x2_t *)v74;
          if ((int)v112 >= 1)
          {
            unint64_t v90 = (int32x2_t *)v74;
            if ((int)v112 >= (int)v114)
            {
              uint64_t v115 = (v111 >> 2) - 1;
              while (1)
              {
                int v117 = *v110++;
                int v116 = v117;
                int v119 = *v113++;
                int v118 = v119;
                if (v116 < v119) {
                  break;
                }
                if (v116 > v118 || v115-- == 0)
                {
                  unint64_t v90 = (int32x2_t *)v74;
                  goto LABEL_146;
                }
              }
LABEL_130:
              unint64_t v90 = &v137;
            }
          }
        }
      }
LABEL_146:
      int32x2_t v133 = *v90;
      uint64_t v135 = 0;
      uint64_t v136 = 0;
      int v134 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v134, *(const void **)&v90[1], *(void *)&v90[2], (uint64_t)(*(void *)&v90[2] - *(void *)&v90[1]) >> 2);
      *(int32x2_t *)uint64_t v74 = v133;
      unint64_t v27 = a1 + 8;
      if ((int32x2_t *)v74 != &v133) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v71 + 32 * v91 + 8), (char *)v134, (uint64_t)v135, (v135 - (unsigned char *)v134) >> 2);
      }
      if (v134)
      {
        uint64_t v135 = v134;
        operator delete(v134);
      }
      uint64_t v104 = v91;
      uint64_t v105 = v72 + 32 * v91;
      float v106 = *(float *)v105;
      float v107 = *(float *)v105 + *(float *)(v105 + 4);
      uint64_t v108 = (int32x2_t *)v105;
      if (v107 < (float)(*(float *)v137.i32 + *(float *)&v137.i32[1])) {
        goto LABEL_154;
      }
      if (v107 <= (float)(*(float *)v137.i32 + *(float *)&v137.i32[1]))
      {
        uint64_t v108 = (int32x2_t *)v105;
        if (v106 < *(float *)v137.i32) {
          goto LABEL_154;
        }
        if (v106 <= *(float *)v137.i32)
        {
          unint64_t v121 = *(int **)(v72 + 32 * v104 + 8);
          unint64_t v122 = *(void *)(v72 + 32 * v104 + 16) - (void)v121;
          unint64_t v123 = v122 >> 2;
          unint64_t v124 = (int *)v138;
          unint64_t v125 = (unint64_t)(v139 - (unsigned char *)v138) >> 2;
          if ((int)(v122 >> 2) <= (int)v125)
          {
            uint64_t v108 = (int32x2_t *)v105;
            if ((int)v123 < 1) {
              goto LABEL_154;
            }
            uint64_t v108 = (int32x2_t *)v105;
            if ((int)v123 < (int)v125) {
              goto LABEL_154;
            }
            uint64_t v126 = (v122 >> 2) - 1;
            while (1)
            {
              int v128 = *v121++;
              int v127 = v128;
              int v130 = *v124++;
              int v129 = v130;
              if (v127 < v130) {
                break;
              }
              if (v127 > v129 || v126-- == 0)
              {
                uint64_t v108 = (int32x2_t *)v105;
                goto LABEL_154;
              }
            }
          }
        }
      }
      uint64_t v108 = &v137;
LABEL_154:
      int32x2_t v133 = *v108;
      uint64_t v135 = 0;
      uint64_t v136 = 0;
      int v134 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v134, *(const void **)&v108[1], *(void *)&v108[2], (uint64_t)(*(void *)&v108[2] - *(void *)&v108[1]) >> 2);
      *(int32x2_t *)uint64_t v105 = v133;
      if ((int32x2_t *)v105 != &v133) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v72 + 32 * v104 + 8), (char *)v134, (uint64_t)v135, (v135 - (unsigned char *)v134) >> 2);
      }
      if (v134)
      {
        uint64_t v135 = v134;
        operator delete(v134);
      }
      unint64_t v30 = a1 + 13;
      if (fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Member(v74)
        && fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Member(v105))
      {
        uint64_t v109 = **(void **)(a1[2] + 16);
        if ((*(void *)(a1[8] + (((unint64_t)v47[5].i32[0] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v47[5].i32[0]))
        {
          (*(void (**)(void))(v109 + 40))();
          int v86 = 0;
          int v87 = 1;
        }
        else
        {
          (*(void (**)(void))(v109 + 24))();
          int v86 = 0;
          int v87 = 1;
          *(void *)(a1[8] + (((unint64_t)v47[5].i32[0] >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v47[5].i32[0];
        }
      }
      else
      {
        int v87 = 0;
        int v86 = 1;
        *int32x2_t v132 = 1;
      }
LABEL_163:
      if (v138)
      {
        uint64_t v139 = v138;
        operator delete(v138);
      }
      int32x2_t v46 = v141;
      if (!v87) {
        goto LABEL_195;
      }
LABEL_166:
      if (v46) {
        (*(void (**)(int32x2_t))(**(void **)&v46 + 40))(v46);
      }
      else {
        ++v145;
      }
    }
    int v86 = 10;
LABEL_195:
    if (v46)
    {
      (*(void (**)(int32x2_t))(**(void **)&v46 + 8))(v46);
      goto LABEL_200;
    }
LABEL_198:
    if (v144) {
      --*v144;
    }
LABEL_200:
    if (v86 == 10) {
      int v86 = 0;
    }
    if (v147)
    {
      uint64_t v148 = v147;
      operator delete(v147);
    }
  }
  while (!v86);
}

void sub_1B1AC978C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v29 = *(void **)(v27 - 136);
  if (v29)
  {
    *(void *)(v27 - 128) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<int>::push_back(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<int>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<int>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1AC9BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,std::__unordered_map_hasher<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,true>,std::__unordered_map_equal<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>>::find<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element>(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  int v4 = a2[1];
  uint64_t v3 = a2[2];
  int v5 = *a2;
  unint64_t v6 = v3 + 7853 * *a2 + 7867 * v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    uint64_t v8 = v3 + 7853 * v5 + 7867 * v4;
    if (v6 >= *(void *)&v2) {
      uint64_t v8 = v6 % *(void *)&v2;
    }
  }
  else
  {
    uint64_t v8 = v6 & (*(void *)&v2 - 1);
  }
  unint64_t v9 = *(uint64_t ***)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  for (uint64_t result = *v9; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v11 = result[1];
    if (v11 == v6)
    {
      if (*((_DWORD *)result + 4) == v5 && *(uint64_t *)((char *)result + 20) == __PAIR64__(v3, v4)) {
        return result;
      }
    }
    else
    {
      if (v7.u32[0] > 1uLL)
      {
        if (v11 >= *(void *)&v2) {
          v11 %= *(void *)&v2;
        }
      }
      else
      {
        v11 &= *(void *)&v2 - 1;
      }
      if (v11 != v8) {
        return 0;
      }
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,std::__unordered_map_hasher<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,true>,std::__unordered_map_equal<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>>::__emplace_unique_key_args<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>(uint64_t a1, int *a2, uint64_t a3)
{
  int v7 = a2[1];
  uint64_t v6 = a2[2];
  int v8 = *a2;
  unint64_t v9 = v6 + 7853 * *a2 + 7867 * v7;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      uint64_t v3 = v6 + 7853 * v8 + 7867 * v7;
      if (v9 >= v10) {
        uint64_t v3 = v9 % v10;
      }
    }
    else
    {
      uint64_t v3 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v8 && *(void *)((char *)v13 + 20) == __PAIR64__(v6, v7)) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v13 = operator new(0x30uLL);
  *uint64_t v13 = 0;
  v13[1] = v9;
  uint64_t v13[2] = *(void *)a3;
  *((_DWORD *)v13 + 6) = *(_DWORD *)(a3 + 8);
  *((_OWORD *)v13 + 2) = *(_OWORD *)(a3 + 16);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        uint64_t v3 = v9 % v10;
      }
      else {
        uint64_t v3 = v9;
      }
    }
    else
    {
      uint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *uint64_t v13 = *v22;
LABEL_39:
    void *v22 = v13;
    goto LABEL_40;
  }
  *uint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    unint64_t v23 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_39;
  }
LABEL_40:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_1B1AC9F40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::Prune<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1)
{
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  int8x8_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Prune: Weight needs to have the path property and", 49);
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" be commutative: ", 17);
  uint64_t v6 = fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Type();
  int v7 = *(char *)(v6 + 23);
  if (v7 >= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = *(void *)v6;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    uint64_t v9 = *(void *)(v6 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v8, v9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4, 4);
}

void sub_1B1ACA068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst()
{
}

{
  operator new();
}

void sub_1B1ACA100(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~VectorFst(void *a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Copy()
{
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  *a3 = 0;
  int v5 = (uint64_t *)(*(void *)(*(void *)(v3 + 64) + 8 * a2) + 24);
  uint64_t v4 = *v5;
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5[1] - *v5) >> 2);
  if (v5[1] == *v5) {
    uint64_t v4 = 0;
  }
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return (*(void *)(*(void *)(a1 + 8) + 72) - *(void *)(*(void *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

void sub_1B1ACA2E8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetStart(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  *(void *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(void *)(v4 + 8) & 4;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetFinal(uint64_t a1, int a2, uint64_t *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  unint64_t v6 = *(uint64_t **)(a1 + 8);
  uint64_t v8 = *a3;
  return fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetFinal(v6, a2, &v8);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 & 4;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v6);
  if (result != (v6 & a2)) {
    uint64_t result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  }
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::AddState(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(void *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  return fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddArc(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeleteStates(uint64_t a1, char **a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteStates((uint64_t)v4, a2);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeleteStates(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteStates((uint64_t)v2);
  uint64_t result = (*(uint64_t (**)(void *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeleteArcs(*(void **)(v6[8] + 8 * a2), a3);
  uint64_t result = (*(uint64_t (**)(void *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  int v5 = *(void **)(v4[8] + 8 * a2);
  v5[1] = 0;
  v5[2] = 0;
  v5[4] = v5[3];
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v4 = (void **)(*(void *)(a1 + 8) + 64);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(v4, a2);
}

void fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v6 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 24);
  std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::reserve(v6, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutableInputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutableOutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(v4, a2);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(v4, a2);
}

void fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::InitMutableArcIterator()
{
}

void sub_1B1ACA954(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FD18;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A448;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1B1ACAA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~VectorFstBaseImpl(void *a1)
{
  *a1 = &unk_1F0A3D248;
  uint64_t v2 = (void **)a1[9];
  if (v2 != (void **)a1[8])
  {
    unint64_t v3 = 0;
    uint64_t v2 = (void **)a1[8];
    do
    {
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(v2[v3++]);
      uint64_t v2 = (void **)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (void)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~VectorFstImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Properties(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~VectorFstBaseImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~FstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~FstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FD18;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(void *__p)
{
  if (__p)
  {
    uint64_t v2 = (void *)__p[3];
    if (v2)
    {
      __p[4] = v2;
      operator delete(v2);
    }
    operator delete(__p);
  }
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(uint64_t result)
{
  if (*(int *)(*(void *)(result + 8) + 56) >= 2) {
    operator new();
  }
  return result;
}

void sub_1B1ACAD78(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FD18;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  int v5 = (void *)(a1 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A448;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v4, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v7);
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 1, 0))
  {
    int v8 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v8);
  }
  unsigned int v19 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v17);
  while (1)
  {
    if (!v17)
    {
      if ((int)v19 >= v18) {
        goto LABEL_31;
      }
LABEL_11:
      uint64_t v9 = v19;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v17 + 16))(v17)) {
      break;
    }
    if (!v17) {
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v17 + 24))();
LABEL_12:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddState((void *)a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32))(&v16, a2, v9);
    **(void **)(*v5 + 8 * (int)v9) = v16;
    unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v9);
    std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::reserve((uint64_t *)(*(void *)(*v5 + 8 * (int)v9) + 24), v10);
    std::string::size_type v15 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a2 + 136))(a2, v9, &__str);
    while (1)
    {
      if (!__str.__r_.__value_.__r.__words[0])
      {
        if (v15 >= __str.__r_.__value_.__r.__words[2]) {
          goto LABEL_24;
        }
LABEL_18:
        uint64_t v11 = __str.__r_.__value_.__l.__size_ + 20 * v15;
        goto LABEL_19;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_ + 24))(__str.__r_.__value_.__r.__words[0])) {
        break;
      }
      if (!__str.__r_.__value_.__r.__words[0]) {
        goto LABEL_18;
      }
      uint64_t v11 = (*(uint64_t (**)(void))(*(void *)__str.__r_.__value_.__l.__data_ + 32))();
LABEL_19:
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::AddArc(*(void **)(*v5 + 8 * (int)v9), v11);
      if (__str.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_ + 40))(__str.__r_.__value_.__r.__words[0]);
      }
      else {
        ++v15;
      }
    }
    if (__str.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(void *)__str.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_26;
    }
LABEL_24:
    if (v14) {
      --*v14;
    }
LABEL_26:
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 32))(v17);
    }
    else {
      ++v19;
    }
  }
  if (v17) {
    (*(void (**)(void))(*(void *)v17 + 8))();
  }
LABEL_31:
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(void *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1B1ACB280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~VectorFstBaseImpl(v19);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddState(void *a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  unint64_t v3 = a1[10];
  *(int32x2_t *)uint64_t v2 = vdup_n_s32(0x7F800000u);
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + ++*(void *)(result + 24) = 0u;
  *((void *)v2 + 5) = 0;
  uint64_t v4 = (void *)a1[9];
  if ((unint64_t)v4 >= v3)
  {
    uint64_t v6 = a1[8];
    uint64_t v7 = ((uint64_t)v4 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v3 - v6;
    uint64_t v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10) {
      uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 10), v10);
    }
    else {
      uint64_t v11 = 0;
    }
    char v12 = &v11[8 * v7];
    char v13 = &v11[8 * v10];
    *(void *)char v12 = v2;
    int v5 = v12 + 8;
    std::string::size_type v15 = (char *)a1[8];
    unint64_t v14 = (char *)a1[9];
    if (v14 != v15)
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }
      while (v14 != v15);
      unint64_t v14 = (char *)a1[8];
    }
    a1[8] = v12;
    a1[9] = v5;
    a1[10] = v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *uint64_t v4 = v2;
    int v5 = v4 + 1;
  }
  a1[9] = v5;
  return (((unint64_t)v5 - a1[8]) >> 3) - 1;
}

void std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v11 = v3;
    std::string __p = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(v3, a2);
    uint64_t v8 = (char *)__p + v5;
    uint64_t v9 = (char *)__p + v5;
    unint64_t v10 = (char *)__p + 20 * v6;
    std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8) {
      uint64_t v9 = &v8[(v9 - v8 - 20) % 0x14uLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_1B1ACB52C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      *(void *)(v6 - 20) = *(void *)(v2 + v5 - 20);
      *(void *)(v6 - 12) = *(void *)(v2 + v5 - 12);
      *(_DWORD *)(v6 - 4) = *(_DWORD *)(v2 + v5 - 4);
      v5 -= 20;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  *uint64_t result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(20 * a2);
}

uint64_t fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::AddArc(void *a1, uint64_t a2)
{
  if (!*(_DWORD *)a2) {
    ++a1[1];
  }
  if (!*(_DWORD *)(a2 + 4)) {
    ++a1[2];
  }
  unint64_t v3 = a1[4];
  if (v3 >= a1[5])
  {
    uint64_t result = std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const&>(a1 + 3, a2);
  }
  else
  {
    *(void *)unint64_t v3 = *(void *)a2;
    *(void *)(v3 + 8) = *(void *)(a2 + 8);
    *(_DWORD *)(v3 + 16) = *(_DWORD *)(a2 + 16);
    uint64_t result = v3 + 20;
  }
  a1[4] = result;
  return result;
}

uint64_t std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 2);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xCCCCCCCCCCCCCCCLL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x666666666666666) {
    unint64_t v9 = 0xCCCCCCCCCCCCCCCLL;
  }
  else {
    unint64_t v9 = v5;
  }
  unsigned int v19 = a1 + 2;
  unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(v7, v9);
  uint64_t v11 = &v10[20 * v4];
  std::string __p = v10;
  uint64_t v16 = v11;
  int v18 = &v10[20 * v12];
  *(void *)uint64_t v11 = *(void *)a2;
  *((void *)v11 + 1) = *(void *)(a2 + 8);
  *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
  uint64_t v17 = v11 + 20;
  std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v13 = a1[1];
  if (v17 != v16) {
    uint64_t v17 = &v16[(v17 - v16 - 20) % 0x14uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_1B1ACB7EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::WriteFst<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  long long v35 = 0u;
  long long v34 = 0u;
  *(_OWORD *)unint64_t v33 = 0u;
  *(_OWORD *)long long v32 = 0u;
  uint64_t v6 = -1;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v36 = -1;
  uint64_t v36 = (*(int (**)(void *))(*a1 + 24))(a1);
  uint64_t v37 = -1;
  if ((*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 1, 0))
  {
    uint64_t v6 = 0;
LABEL_3:
    int v7 = 0;
    uint64_t v37 = (int)fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a1);
    goto LABEL_6;
  }
  unint64_t v8 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)v8 + 5) + 32))(__p);
    uint64_t v6 = v41;
    if (v41 != -1) {
      goto LABEL_3;
    }
  }
  int v7 = 1;
LABEL_6:
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t v10 = v9 | 3;
  fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, 2, __p, v10, (uint64_t)v31);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  unint64_t v11 = *(void *)(a1[1] + 72) - *(void *)(a1[1] + 64);
  unint64_t v12 = v11 >> 3;
  if ((int)(v11 >> 3) < 1)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    int v30 = v7;
    uint64_t v13 = 0;
    uint64_t v14 = (v11 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, void *, uint64_t))(*a1 + 32))(__p, a1, v13);
      int data = (int)__p[0].__r_.__value_.__l.__data_;
      std::ostream::write();
      int data = HIDWORD(__p[0].__r_.__value_.__r.__words[0]);
      std::ostream::write();
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v13);
      std::ostream::write();
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1[1] + 64) + 8 * v13) + 24);
      uint64_t v16 = *(void *)(*(void *)(*(void *)(a1[1] + 64) + 8 * v13) + 32) - v15;
      if (v16)
      {
        unint64_t v17 = v16 / 20;
        if (v17 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v17;
        }
        uint64_t v19 = v15 + 8;
        do
        {
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(_DWORD *)(v19 - 8);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(_DWORD *)(v19 - 4);
          std::ostream::write();
          fst::LatticeWeightTpl<float>::Write(v19, (uint64_t)a2);
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(_DWORD *)(v19 + 8);
          std::ostream::write();
          v19 += 20;
          --v18;
        }
        while (v18);
      }
      ++v13;
    }
    while (v13 != v14);
    int v7 = v30;
  }
  std::ostream::flush();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    size_t v20 = fst::LogMessage::LogMessage((fst *)&data, (uint64_t)__p);
    uint64_t v21 = (void *)fst::cerr(v20);
    unint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"VectorFst::Write: write failed: ", 32);
    int v23 = *(char *)(a3 + 23);
    if (v23 >= 0) {
      uint64_t v24 = a3;
    }
    else {
      uint64_t v24 = *(void *)a3;
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v25 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
LABEL_27:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&data);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t updated = 0;
    goto LABEL_30;
  }
  if (!v7)
  {
    if (v37 == v12)
    {
      uint64_t updated = 1;
      goto LABEL_30;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    uint64_t v28 = fst::LogMessage::LogMessage((fst *)&data, (uint64_t)__p);
    uint64_t v29 = (void *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_27;
  }
  uint64_t v37 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t updated = fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v10, (uint64_t)v31, v6);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_30:
  if (SHIBYTE(v34) < 0) {
    operator delete(v33[1]);
  }
  if (SHIBYTE(v33[0]) < 0) {
    operator delete(v32[0]);
  }
  return updated;
}

void sub_1B1ACBD18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a11);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::WriteFstHeader(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    uint64_t v13 = (const std::string *)fst::ArcTpl<fst::LatticeWeightTpl<float>,int>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(void *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
      BOOL v14 = a3[25] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = !v14;
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    if (a3[26]) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v15 | 2;
    if (v17) {
      int v18 = v15;
    }
    if (a3[27]) {
      v18 |= 4u;
    }
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
    BOOL v19 = a3[25] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 72))(v20, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (result && a3[26])
  {
    unint64_t v22 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1) + 72);
    return v22();
  }
  return result;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::UpdateFstHeader(uint64_t a1, void *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1B3EA7E70](v32);
  uint64_t v16 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    uint64_t v17 = *((void *)v16 + 5);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long __p = 0u;
    long long v35 = 0u;
    uint64_t v42 = a8;
    (*(void (**)(void *__return_ptr))(*(void *)v17 + 40))(v33);
    if (v33[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  MEMORY[0x1B3EA7E80](v32);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    int v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    BOOL v19 = (void *)fst::cerr(v18);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    int v21 = *(char *)(a3 + 23);
    if (v21 >= 0) {
      uint64_t v22 = a3;
    }
    else {
      uint64_t v22 = *(void *)a3;
    }
    if (v21 >= 0) {
      uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v23 = *(void *)(a3 + 8);
    }
  }
  else
  {
    fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::WriteFstHeader(a1, (uint64_t)a2, (unsigned char *)a3, a4, a5, a6, a7);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      uint64_t v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v25 = (void *)fst::cerr(v24);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v26 = *(char *)(a3 + 23);
      if (v26 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v26 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
    else
    {
      MEMORY[0x1B3EA7E70](v33, a2);
      uint64_t v27 = (char *)a2 + *(void *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(long long *__return_ptr))(**((void **)v27 + 5) + 32))(&__p);
        if (v42 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
        }
      }
      MEMORY[0x1B3EA7E80](v33);
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0) {
        return 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      uint64_t v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v29 = (void *)fst::cerr(v28);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v30 = *(char *)(a3 + 23);
      if (v30 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v30 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0) {
    operator delete((void *)__p);
  }
  return 0;
}

void sub_1B1ACC344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

uint64_t fst::ArcTpl<fst::LatticeWeightTpl<float>,int>::Type()
{
  {
    operator new();
  }
  return fst::ArcTpl<fst::LatticeWeightTpl<float>,int>::Type(void)::type;
}

void sub_1B1ACC474(_Unwind_Exception *a1)
{
}

uint64_t fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::WriteFile(fst *a1, uint64_t a2)
{
  v25[19] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream((uint64_t *)&v20);
      if ((v24[*(void *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        unint64_t v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        unint64_t v5 = (void *)fst::cerr(v4);
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        int v7 = *(char *)(a2 + 23);
        if (v7 >= 0) {
          unint64_t v8 = (const std::string::value_type *)a2;
        }
        else {
          unint64_t v8 = *(const std::string::value_type **)a2;
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v9 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v10 = 0;
      }
      else
      {
        char v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string __p = *(std::string *)a2;
        }
        __int16 v16 = 257;
        char v17 = 1;
        char v18 = v13;
        uint64_t v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(void *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA400];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(void *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA400]
                                                                                                  + 24);
      MEMORY[0x1B3EA7CF0](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1B3EA8520](v25);
      return v10;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    goto LABEL_5;
  }
  uint64_t v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  char v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = __p;
  }
  __int16 v21 = 257;
  char v22 = 1;
  char v23 = v12;
  uint64_t v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(void *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1B1ACC7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetFinal(uint64_t *a1, int a2, uint64_t *a3)
{
  unint64_t v5 = *(uint64_t **)(a1[8] + 8 * a2);
  uint64_t v6 = *a1;
  uint64_t v7 = *v5;
  *unint64_t v5 = *a3;
  unint64_t v8 = (*(uint64_t (**)(void))(v6 + 24))();
  uint64_t v10 = *a3;
  uint64_t v11 = v7;
  uint64_t result = fst::SetFinalProperties<fst::LatticeWeightTpl<float>>(v8, (float *)&v11, (float *)&v10);
  a1[1] = a1[1] & 4 | result;
  return result;
}

uint64_t fst::SetFinalProperties<fst::LatticeWeightTpl<float>>(unint64_t a1, float *a2, float *a3)
{
  if ((*a2 != INFINITY || a2[1] != INFINITY) && (*a2 != 0.0 || a2[1] != 0.0)) {
    a1 &= ~0x100000000uLL;
  }
  if ((*a3 != INFINITY || a3[1] != INFINITY) && (*a3 != 0.0 || a3[1] != 0.0)) {
    a1 = a1 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  return a1 & 0x3FFFFFF0007;
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddArc(void *a1, int a2, float *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1[8] + 8 * a2) + 32);
  if (v6 == *(void *)(*(void *)(a1[8] + 8 * a2) + 24)) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = (_DWORD *)(v6 - 20);
  }
  unint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(v8, a2, a3, v7);
  uint64_t v9 = *(void **)(a1[8] + 8 * a2);
  return fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::AddArc(v9, (uint64_t)a3);
}

uint64_t fst::AddArcProperties<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(unint64_t a1, int a2, float *a3, _DWORD *a4)
{
  float v4 = *a3;
  int v5 = *((_DWORD *)a3 + 1);
  unint64_t v6 = a1 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*(_DWORD *)a3 == v5) {
    unint64_t v6 = a1;
  }
  unint64_t v7 = v6 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v5) {
    unint64_t v7 = v6 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  }
  if (v4 == 0.0) {
    unint64_t v6 = v7;
  }
  if (!v5) {
    unint64_t v6 = v6 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  }
  if (a4)
  {
    if (*a4 > SLODWORD(v4)) {
      unint64_t v6 = v6 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    }
    if (a4[1] > v5) {
      unint64_t v6 = v6 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
    }
  }
  if ((a3[2] != INFINITY || a3[3] != INFINITY) && (a3[2] != 0.0 || a3[3] != 0.0)) {
    unint64_t v6 = v6 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  if (*((_DWORD *)a3 + 4) <= a2) {
    unint64_t v6 = v6 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  }
  if ((v6 & 0x4000000000) != 0) {
    return v6 & 0x5D7FFEB0007 | 0x2800000000;
  }
  else {
    return v6 & 0x5D7FFEB0007;
  }
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteStates(uint64_t a1, char **a2)
{
  float v4 = (uint64_t *)(a1 + 64);
  std::vector<int>::size_type v5 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v33, v5, &__x);
  unint64_t v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 2;
    std::vector<int>::pointer begin = v33.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v11)
  {
    int v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      if (v33.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(*(void **)(v11 + 8 * v12));
      }
      else
      {
        v33.__begin_[v12] = v13;
        if (v12 != v13) {
          *(void *)(v11 + 8 * v13) = *(void *)(v11 + 8 * v12);
        }
        ++v13;
      }
      ++v12;
      uint64_t v11 = *(void *)(a1 + 64);
    }
    while (v12 < (*(void *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  uint64_t v14 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(v14 + 8 * v15);
      uint64_t v18 = *(void *)(v16 + 24);
      uint64_t v17 = *(void *)(v16 + 32);
      int64x2_t v19 = *(int64x2_t *)(v16 + 8);
      uint64_t v20 = v17 - v18;
      if (v17 == v18)
      {
        int64x2_t v31 = *(int64x2_t *)(v16 + 8);
        uint64_t v27 = 0;
        unint64_t v28 = 0xCCCCCCCCCCCCCCCDLL * (v20 >> 2);
      }
      else
      {
        unint64_t v21 = 0;
        uint64_t v27 = 0;
        char v22 = (int *)(v18 + 16);
        do
        {
          int v23 = v33.__begin_[*v22];
          if (v23 == -1)
          {
            uint64_t v25 = *((void *)v22 - 2);
            v26.i64[0] = v25;
            v26.i64[1] = HIDWORD(v25);
            int64x2_t v19 = vaddq_s64(v19, vceqzq_s64(v26));
          }
          else
          {
            int *v22 = v23;
            if (v21 != v27)
            {
              uint64_t v24 = v18 + 20 * v27;
              *(void *)uint64_t v24 = *((void *)v22 - 2);
              *(void *)(v24 + 8) = *((void *)v22 - 1);
              *(_DWORD *)(v24 + 16) = v23;
              uint64_t v14 = *v4;
            }
            ++v27;
          }
          ++v21;
          uint64_t v16 = *(void *)(v14 + 8 * v15);
          unint64_t v28 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v16 + 32) - *(void *)(v16 + 24)) >> 2);
          v22 += 5;
        }
        while (v21 < v28);
        int64x2_t v31 = v19;
      }
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeleteArcs((void *)v16, v28 - v27);
      uint64_t v14 = *(void *)(a1 + 64);
      *(int64x2_t *)(*(void *)(v14 + 8 * v15++) + 8) = v31;
    }
    while (v15 < (*(void *)(a1 + 72) - v14) >> 3);
  }
  uint64_t v29 = *(int *)(a1 + 88);
  if (v29 == -1)
  {
    int v30 = v33.__begin_;
    if (!v33.__begin_) {
      return;
    }
  }
  else
  {
    int v30 = v33.__begin_;
    *(_DWORD *)(a1 + 88) = v33.__begin_[v29];
  }
  v33.__end_ = v30;
  operator delete(v30);
}

void sub_1B1ACCE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeleteArcs(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result[4];
    uint64_t v3 = -20 * a2;
    float v4 = (_DWORD *)(v2 - 20);
    std::vector<int>::size_type v5 = (_DWORD *)(v2 - 20);
    do
    {
      int v6 = *v5;
      v5 -= 5;
      if (!v6) {
        --result[1];
      }
      if (!v4[1]) {
        --result[2];
      }
      float v4 = v5;
      --a2;
    }
    while (a2);
    result[4] = v2 + v3;
  }
  return result;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteStates(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 != *(void *)(a1 + 64))
  {
    unint64_t v3 = 0;
    uint64_t v2 = *(void *)(a1 + 64);
    do
    {
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(*(void **)(v2 + 8 * v3++));
      uint64_t v2 = *(void *)(a1 + 64);
    }
    while (v3 < (*(void *)(a1 + 72) - v2) >> 3);
  }
  *(void *)(a1 + 72) = v2;
  *(_DWORD *)(a1 + 88) = -1;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~MutableArcIterator()
{
}

uint64_t fst::ArcIteratorBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 24) >= 0xCCCCCCCCCCCCCCCDLL
                               * ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 32)
                                          - *(void *)(*(void *)(a1 + 8) + 24)) >> 2);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::Value_(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 24) + 20 * *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::Reset_(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::Flags_()
{
  return 15;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::SetValue(uint64_t a1, uint64_t a2)
{
  float v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = v4[3];
  uint64_t v7 = (int *)(v6 + 20 * v5);
  int v8 = *v7;
  int v9 = v7[1];
  if (v8 != v9) {
    **(void **)(a1 + 16) &= ~0x20000uLL;
  }
  if (v8)
  {
    if (v9) {
      goto LABEL_9;
    }
    uint64_t v10 = *(unint64_t **)(a1 + 16);
    unint64_t v11 = *v10;
  }
  else
  {
    uint64_t v10 = *(unint64_t **)(a1 + 16);
    unint64_t v12 = *v10;
    *v10 &= ~0x1000000uLL;
    if (v9) {
      goto LABEL_9;
    }
    unint64_t v11 = v12 & 0xFFFFFFFFFEBFFFFFLL;
    *uint64_t v10 = v11;
  }
  *uint64_t v10 = v11 & 0xFFFFFFFFFBFFFFFFLL;
LABEL_9:
  uint64_t v13 = v6 + 20 * v5;
  if ((*(float *)(v13 + 8) != INFINITY || *(float *)(v13 + 12) != INFINITY)
    && (*(float *)(v13 + 8) != 0.0 || *(float *)(v13 + 12) != 0.0))
  {
    **(void **)(a1 + 16) &= ~0x100000000uLL;
  }
  uint64_t v14 = 0x30FC30007;
  BOOL v15 = *(_DWORD *)a2 == v8 && *(_DWORD *)(a2 + 4) == v9;
  if (v15 && *(_DWORD *)(a2 + 16) == *(_DWORD *)(v6 + 20 * v5 + 16)) {
    uint64_t v14 = 0x3FFFFFFF0007;
  }
  fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArc(v4, a2, v5);
  int v16 = *(_DWORD *)a2;
  int v17 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2 != v17) {
    **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  }
  if (v16)
  {
    if (!v17)
    {
      uint64_t v18 = *(unint64_t **)(a1 + 16);
      unint64_t v19 = *v18;
LABEL_28:
      *uint64_t v18 = v19 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
    }
  }
  else
  {
    uint64_t v18 = *(unint64_t **)(a1 + 16);
    unint64_t v20 = *v18 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *uint64_t v18 = v20;
    if (!v17)
    {
      unint64_t v19 = v20 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *uint64_t v18 = v19;
      goto LABEL_28;
    }
  }
  if ((*(float *)(a2 + 8) != INFINITY || *(float *)(a2 + 12) != INFINITY)
    && (*(float *)(a2 + 8) != 0.0 || *(float *)(a2 + 12) != 0.0))
  {
    **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  **(void **)(a1 + 16) &= v14;
}

double fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArc(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[3];
  float v4 = (_DWORD *)(v3 + 20 * a3);
  if (!*v4) {
    --a1[1];
  }
  if (!*(_DWORD *)(v3 + 20 * a3 + 4)) {
    --a1[2];
  }
  if (!*(_DWORD *)a2) {
    ++a1[1];
  }
  if (!*(_DWORD *)(a2 + 4)) {
    ++a1[2];
  }
  *(void *)float v4 = *(void *)a2;
  uint64_t v5 = v3 + 20 * a3;
  double result = *(double *)(a2 + 8);
  *(double *)(v5 + 8) = result;
  *(_DWORD *)(v5 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  BOOL v15 = v11;
  int v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B1ACD440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - ++*(void *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - ++*(void *)(result + 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::vector<int>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

_OWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x48uLL);
    v12[1] = a1 + 1;
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    _DWORD v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *uint64_t v9 = 0;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + 8) = 0;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::__shared_ptr_emplace<std::vector<std::vector<quasar::Token>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62A20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::vector<quasar::Token>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62A20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<std::vector<std::vector<quasar::Token>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        quasar::Token::~Token(v4 - 28);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void quasar::Token::~Token(void **this)
{
  if (*((char *)this + 199) < 0) {
    operator delete(this[22]);
  }
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  uint64_t v2 = this + 15;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  uint64_t v2 = this + 9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void std::__shared_ptr_emplace<std::vector<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62C18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62C18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<std::vector<double>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void *std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::find<std::vector<int>>(void *a1, int **a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (*a2 == v2)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t v5 = *a2;
    do
    {
      uint64_t v6 = *v5++;
      unint64_t v4 = v6 + 7853 * v4;
    }
    while (v5 != v2);
  }
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v4;
    if (v4 >= *(void *)&v7) {
      unint64_t v10 = v4 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v4;
  }
  unint64_t v11 = *(void **)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  char v12 = (void *)*v11;
  if (*v11)
  {
    size_t v13 = (char *)v2 - (char *)v3;
    do
    {
      unint64_t v14 = v12[1];
      if (v14 == v4)
      {
        BOOL v15 = (const void *)v12[2];
        if (v12[3] - (void)v15 == v13 && !memcmp(v15, v3, v13)) {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(void *)&v7) {
            v14 %= *(void *)&v7;
          }
        }
        else
        {
          v14 &= *(void *)&v7 - 1;
        }
        if (v14 != v10) {
          return 0;
        }
      }
      char v12 = (void *)*v12;
    }
    while (v12);
  }
  return v12;
}

double std::__split_buffer<double>::push_back(void *a1, double *a2)
{
  unint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1[4], v16);
      unint64_t v19 = &v17[8 * (v16 >> 2)];
      unint64_t v20 = (uint64_t *)a1[1];
      unint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        unint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        int v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)int v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      uint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        unint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      size_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        unint64_t v4 = (char *)a1[1];
      }
      BOOL v15 = &v4[8 * v11];
      unint64_t v4 = &v13[v14];
      a1[1] = v15;
    }
  }
  double result = *a2;
  *(double *)unint64_t v4 = *a2;
  a1[2] = v4 + 8;
  return result;
}

char *std::vector<double>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    BOOL v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  size_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  int64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  BOOL v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + ++*(void *)(result + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void *std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(uint64_t a1, int **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = *a2;
    do
    {
      uint64_t v10 = *v9++;
      unint64_t v8 = v10 + 7853 * v8;
    }
    while (v9 != v6);
  }
  unint64_t v11 = *(void *)(a1 + 8);
  if (!v11) {
    goto LABEL_26;
  }
  uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  unint64_t v13 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v4 = v8;
    if (v8 >= v11) {
      unint64_t v4 = v8 % v11;
    }
  }
  else
  {
    unint64_t v4 = (v11 - 1) & v8;
  }
  int64_t v14 = *(void **)(*(void *)a1 + 8 * v4);
  if (!v14) {
    goto LABEL_26;
  }
  BOOL v15 = (void *)*v14;
  if (!*v14) {
    goto LABEL_26;
  }
  unint64_t v28 = a4;
  size_t v16 = (char *)v6 - (char *)v7;
  do
  {
    unint64_t v17 = v15[1];
    if (v17 == v8)
    {
      uint64_t v18 = (const void *)v15[2];
      if (v15[3] - (void)v18 == v16 && !memcmp(v18, v7, v16)) {
        return v15;
      }
      goto LABEL_24;
    }
    if (v13 > 1)
    {
      if (v17 >= v11) {
        v17 %= v11;
      }
    }
    else
    {
      v17 &= v11 - 1;
    }
    if (v17 != v4) {
      break;
    }
LABEL_24:
    BOOL v15 = (void *)*v15;
  }
  while (v15);
  a4 = v28;
LABEL_26:
  std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(a1, v8, a4, (uint64_t)v29);
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11) {
        unint64_t v4 = v8 % v11;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v8;
    }
  }
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)v29[0] = *v25;
    *uint64_t v25 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v26 = *(void *)(*(void *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11) {
          v26 %= v11;
        }
      }
      else
      {
        v26 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v29[0];
    }
  }
  BOOL v15 = (void *)v29[0];
  v29[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return v15;
}

void sub_1B1ACE064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  uint64_t v9 = *a3;
  void v8[3] = 0;
  v8[4] = 0;
  void v8[2] = 0;
  double result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8 + 2, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 2);
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1ACE0FC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::vector<int> const,std::vector<quasar::Token>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::vector<int> const,std::vector<quasar::Token>>,0>(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

void *std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  double result = std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v3, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1B1ACE214(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<quasar::Token>>::__move_range(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)((char *)a2 + v6 - a4);
  unint64_t v8 = (void *)v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v9 = v7;
    unint64_t v8 = *(void **)(a1 + 8);
    do
    {
      *unint64_t v8 = 0;
      v8[1] = 0;
      void v8[2] = 0;
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
      void v8[2] = v9[2];
      *uint64_t v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      v8 += 3;
      v9 += 3;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::Token> *,std::vector<quasar::Token> *,std::vector<quasar::Token> *>((uint64_t)&v11, a2, v7, v6);
}

void *std::__split_buffer<std::vector<quasar::Token>>::push_back[abi:ne180100](void *a1, uint64_t *a2)
{
  unint64_t v4 = (void *)a1[2];
  if (v4 == (void *)a1[3])
  {
    unint64_t v5 = a1[1];
    if (v5 <= *a1)
    {
      uint64_t v11 = (uint64_t)v4 - *a1;
      BOOL v10 = v11 == 0;
      uint64_t v12 = 0x5555555555555556 * (v11 >> 3);
      if (v10) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v13 >> 2;
      uint64_t v15 = a1[4];
      uint64_t v29 = a1[4];
      size_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v15, v13);
      uint64_t v18 = &v16[24 * v14];
      unint64_t v19 = a1[1];
      unint64_t v20 = a1[2] - v19;
      if (v20)
      {
        BOOL v21 = &v18[v20];
        unint64_t v22 = &v16[24 * v14];
        do
        {
          *(void *)unint64_t v22 = 0;
          *((void *)v22 + 1) = 0;
          *((void *)v22 + 2) = 0;
          *(_OWORD *)unint64_t v22 = *(_OWORD *)v19;
          *((void *)v22 + 2) = *(void *)(v19 + 16);
          *(void *)unint64_t v19 = 0;
          *(void *)(v19 + 8) = 0;
          *(void *)(v19 + 16) = 0;
          v22 += 24;
          v19 += 24;
        }
        while (v22 != v21);
        int64x2_t v23 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        int64x2_t v23 = vdupq_n_s64(v19);
        BOOL v21 = &v16[24 * v14];
      }
      unint64_t v26 = (void *)*a1;
      *a1 = v16;
      a1[1] = v18;
      int64x2_t v27 = v23;
      uint64_t v24 = a1[3];
      a1[2] = v21;
      a1[3] = &v16[24 * v17];
      uint64_t v28 = v24;
      std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(&v26);
      unint64_t v4 = (void *)a1[2];
    }
    else
    {
      int64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
      if (v6 >= -1) {
        uint64_t v7 = v6 + 1;
      }
      else {
        uint64_t v7 = v6 + 2;
      }
      uint64_t v8 = -3 * (v7 >> 1);
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::Token> *,std::vector<quasar::Token> *,std::vector<quasar::Token> *>((uint64_t)&v26, v5, (uint64_t)v4, v5 - 24 * (v7 >> 1));
      unint64_t v4 = v9;
      a1[1] += 8 * v8;
      a1[2] = v9;
    }
  }
  *unint64_t v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  double result = std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v4, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  a1[2] += 24;
  return result;
}

uint64_t std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::reverse_iterator<std::vector<quasar::Token>*>,std::reverse_iterator<std::vector<quasar::Token>*>,std::reverse_iterator<std::vector<quasar::Token>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*,std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v7, (uint64_t)a3, a1[1], (void *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::Token>::__vallocate[abi:ne180100](result, a4);
    double result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token*,quasar::Token*,quasar::Token*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1ACE53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::Token>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x124924924924925) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[224 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x124924924924925) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(224 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token*,quasar::Token*,quasar::Token*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      quasar::Token::Token((std::string *)(a4 + v7), (const quasar::Token *)(a2 + v7));
      v7 += 224;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B1ACE660(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 224;
    do
    {
      quasar::Token::~Token((void **)(v4 + v2));
      v2 -= 224;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *quasar::Token::Token(std::string *this, const quasar::Token *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  long long v5 = *(_OWORD *)((char *)a2 + 24);
  *(std::string::size_type *)((char *)&this[1].__r_.__value_.__r.__words[1] + 6) = *(void *)((char *)a2 + 38);
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 3, *((long long **)a2 + 9), *((long long **)a2 + 10), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 3));
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((void *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v7;
  }
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::pair<std::string,float>>::__init_with_size[abi:ne180100]<std::pair<std::string,float>*,std::pair<std::string,float>*>(this + 5, *((long long **)a2 + 15), *((long long **)a2 + 16), (uint64_t)(*((void *)a2 + 16) - *((void *)a2 + 15)) >> 5);
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(this + 6, *((const std::string::value_type **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 9);
    this[6].__r_.__value_.__r.__words[2] = *((void *)a2 + 20);
    *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = v8;
  }
  int v9 = *((_DWORD *)a2 + 42);
  WORD2(this[7].__r_.__value_.__r.__words[0]) = *((_WORD *)a2 + 86);
  LODWORD(this[7].__r_.__value_.__l.__data_) = v9;
  uint64_t v10 = (std::string *)((char *)this + 176);
  if (*((char *)a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 22), *((void *)a2 + 23));
  }
  else
  {
    long long v11 = *((_OWORD *)a2 + 11);
    this[8].__r_.__value_.__r.__words[0] = *((void *)a2 + 24);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  long long v12 = *(_OWORD *)((char *)a2 + 200);
  LODWORD(this[9].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 54);
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[1] = v12;
  return this;
}

void sub_1B1ACE82C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 167) < 0) {
    operator delete(*v5);
  }
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 119) < 0) {
    operator delete(*v4);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B1ACE920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  long long v11 = this;
  long long v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      long long v6 = (long long *)((char *)v6 + 24);
      long long v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B1ACEA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

std::string *std::vector<std::pair<std::string,float>>::__init_with_size[abi:ne180100]<std::pair<std::string,float>*,std::pair<std::string,float>*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,float>>,std::pair<std::string,float>*,std::pair<std::string,float>*,std::pair<std::string,float>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B1ACEB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,float>>,std::pair<std::string,float>*,std::pair<std::string,float>*,std::pair<std::string,float>*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  long long v12 = this;
  unint64_t v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  char v11 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        long long v8 = v13;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        long long v8 = v4;
      }
      LODWORD(v4[1].__r_.__value_.__l.__data_) = *((_DWORD *)v6 + 6);
      v6 += 2;
      uint64_t v4 = (std::string *)((char *)v8 + 32);
      unint64_t v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,float>>,std::pair<std::string,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1B1ACEC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,float>>,std::pair<std::string,float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::Token> *,std::vector<quasar::Token> *,std::vector<quasar::Token> *>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v6 = a4 - 24;
    long long v7 = a3;
    do
    {
      std::vector<quasar::Token>::__vdeallocate((void **)v6);
      long long v8 = *(_OWORD *)(v7 - 3);
      v7 -= 3;
      *(_OWORD *)uint64_t v6 = v8;
      *(void *)(v6 + 16) = v7[2];
      void *v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
      v6 -= 24;
    }
    while (v7 != a2);
  }
  return a3;
}

void std::vector<quasar::Token>::__vdeallocate(void **a1)
{
  uint64_t v1 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = v1;
    if (v3 != v1)
    {
      do
        quasar::Token::~Token(v3 - 28);
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5) < a4)
  {
    std::vector<quasar::Token>::__vdeallocate((void **)a1);
    if (a4 > 0x124924924924924) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)) >= 0x92492492492492) {
      unint64_t v11 = 0x124924924924924;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<quasar::Token>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token*,quasar::Token*,quasar::Token*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5) < a4)
  {
    uint64_t v13 = a2 + 32 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>(a2, v13, (uint64_t)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token*,quasar::Token*,quasar::Token*>(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>(a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
      quasar::Token::~Token((void **)(v16 - 224));
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B1ACEEB0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1ACEEB8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      quasar::Token::operator=(a3, v4);
      v4 += 224;
      a3 += 224;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t quasar::Token::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  uint64_t v4 = *(void *)(a2 + 38);
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 38) = v4;
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  if (a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 72), *(std::string **)(a2 + 72), *(long long **)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3));
    std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
    std::vector<std::pair<std::string,float>>::__assign_with_size[abi:ne180100]<std::pair<std::string,float>*,std::pair<std::string,float>*>(a1 + 120, *(std::string **)(a2 + 120), *(long long **)(a2 + 128), (uint64_t)(*(void *)(a2 + 128) - *(void *)(a2 + 120)) >> 5);
  }
  std::string::operator=((std::string *)(a1 + 144), (const std::string *)(a2 + 144));
  __int16 v5 = *(_WORD *)(a2 + 172);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_WORD *)(a1 + 172) = v5;
  std::string::operator=((std::string *)(a1 + 176), (const std::string *)(a2 + 176));
  int v6 = *(_DWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 216) = v6;
  return a1;
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::wstring> *this, std::string *__str, long long *a3, unint64_t a4)
{
  p_end_cap = &this->__end_cap_;
  std::vector<int>::pointer begin = (std::string *)this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    uint64_t v12 = (std::wstring *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)__str, a3, (std::string *)this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    uint64_t v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    uint64_t v12 = (std::wstring *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)v13, a3, (std::string *)this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  uint64_t v15 = v14;
  std::vector<std::wstring>::pointer end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_1B1ACF160(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1ACF168(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  uint64_t v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

void std::vector<std::pair<std::string,float>>::__assign_with_size[abi:ne180100]<std::pair<std::string,float>*,std::pair<std::string,float>*>(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(std::string **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)
  {
    std::vector<std::pair<std::string,float>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,float>>,std::pair<std::string,float>*,std::pair<std::string,float>*,std::pair<std::string,float>*>(v8, (long long *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5;
  if (v14 < a4)
  {
    uint64_t v15 = (std::string *)((char *)__str + 32 * v14);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<std::string,float> *,std::pair<std::string,float> *,std::pair<std::string,float> *,0>(__str, v15, v9);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,float>>,std::pair<std::string,float>*,std::pair<std::string,float>*,std::pair<std::string,float>*>(v8, (long long *)v15, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<std::string,float> *,std::pair<std::string,float> *,std::pair<std::string,float> *,0>(__str, (std::string *)a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      if (*(char *)(v18 - 9) < 0) {
        operator delete(*(void **)(v18 - 32));
      }
      v18 -= 32;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_1B1ACF308(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1ACF310(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,float>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<quasar::TextTokenizer::Token>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<std::string,float> *,std::pair<std::string,float> *,std::pair<std::string,float> *,0>(std::string *__str, std::string *a2, std::string *this)
{
  uint64_t v4 = __str;
  if (__str == a2) {
    return __str;
  }
  __int16 v5 = a2;
  do
  {
    std::string::operator=(this, v4);
    LODWORD(this[1].__r_.__value_.__l.__data_) = v4[1].__r_.__value_.__l.__data_;
    this = (std::string *)((char *)this + 32);
    uint64_t v4 = (std::string *)((char *)v4 + 32);
  }
  while (v4 != v5);
  return v5;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::Token> *,std::vector<quasar::Token> *,std::vector<quasar::Token> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    std::vector<quasar::Token>::__vdeallocate((void **)a4);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    *(void *)(a4 + 16) = *(void *)(v5 + 16);
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
    a4 += 24;
    v5 += 24;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::reverse_iterator<std::vector<quasar::Token>*>,std::reverse_iterator<std::vector<quasar::Token>*>,std::reverse_iterator<std::vector<quasar::Token>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - ++*(void *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - ++*(void *)(result + 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Token>>,std::reverse_iterator<std::vector<quasar::Token>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

void *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*,std::vector<quasar::Token>*,std::vector<quasar::Token>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v9 = a4;
  long long v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  int v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
      v4[2] = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      v4 += 3;
      a2 += 24;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Token>>,std::reverse_iterator<std::vector<quasar::Token>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Token>>,std::reverse_iterator<std::vector<quasar::Token>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Token>>,std::reverse_iterator<std::vector<quasar::Token>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    uint64_t v3 = v1;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

void **std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<quasar::Token>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<quasar::Token>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      char v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(&v15);
  }
}

void sub_1B1ACF850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::reverse_iterator<std::vector<quasar::Token>*>,std::reverse_iterator<std::vector<quasar::Token>*>,std::reverse_iterator<std::vector<quasar::Token>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

BOOL fst::CompatSymbols(fst *this, const fst::SymbolTable *a2, const fst::SymbolTable *a3)
{
  if (!FLAGS_fst_compat_symbols) {
    return 1;
  }
  BOOL result = 1;
  if (this && a2)
  {
    int v6 = (int)a3;
    (*(void (**)(void **__return_ptr, fst *))(*(void *)this + 64))(&__p, this);
    (*(void (**)(void **__return_ptr, const fst::SymbolTable *))(*(void *)a2 + 64))(v23, a2);
    unsigned __int8 v7 = v27;
    if ((v27 & 0x80u) == 0) {
      size_t v8 = v27;
    }
    else {
      size_t v8 = __n;
    }
    unint64_t v9 = v24;
    int v10 = (char)v24;
    if ((v24 & 0x80u) != 0) {
      unint64_t v9 = (unint64_t)v23[1];
    }
    if (v8 == v9)
    {
      if ((v24 & 0x80u) == 0) {
        unint64_t v11 = v23;
      }
      else {
        unint64_t v11 = (void **)v23[0];
      }
      if ((char)v27 < 0)
      {
        BOOL v17 = memcmp(__p, v11, __n) != 0;
        if ((v10 & 0x80000000) == 0) {
          goto LABEL_22;
        }
      }
      else if (v27)
      {
        uint64_t v12 = v27 - 1;
        p_p = &__p;
        do
        {
          int v15 = *(unsigned __int8 *)p_p;
          p_p = (void **)((char *)p_p + 1);
          int v14 = v15;
          int v16 = *(unsigned __int8 *)v11;
          unint64_t v11 = (void **)((char *)v11 + 1);
          BOOL v17 = v14 != v16;
        }
        while (v14 == v16 && v12-- != 0);
        if (((char)v24 & 0x80000000) == 0)
        {
LABEL_22:
          if ((v7 & 0x80) == 0) {
            goto LABEL_23;
          }
LABEL_30:
          operator delete(__p);
LABEL_23:
          if ((v17 & v6) != 1) {
            return !v17;
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "WARNING");
          uint64_t v19 = fst::LogMessage::LogMessage((fst *)v23, (uint64_t)&__p);
          unint64_t v20 = (void *)fst::cerr(v19);
          BOOL v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"CompatSymbols: Symbol table check sums do not match. ", 53);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Table sizes are ", 16);
          (*(void (**)(fst *))(*(void *)this + 120))(this);
          unint64_t v22 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" and ", 5);
          (*(void (**)(const fst::SymbolTable *))(*(void *)a2 + 120))(a2);
          std::ostream::operator<<();
          fst::LogMessage::~LogMessage((fst::LogMessage *)v23);
          if ((char)v27 < 0) {
            operator delete(__p);
          }
          return 0;
        }
      }
      else
      {
        BOOL v17 = 0;
        if (((char)v24 & 0x80000000) == 0) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      BOOL v17 = 1;
      if (((char)v24 & 0x80000000) == 0) {
        goto LABEL_22;
      }
    }
    operator delete(v23[0]);
    if ((v27 & 0x80) == 0) {
      goto LABEL_23;
    }
    goto LABEL_30;
  }
  return result;
}

void sub_1B1ACFB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst()
{
}

void sub_1B1ACFBD4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FD88;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A4B8;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1B1ACFCD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEInferenceNetConfig::Read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = 0;
  uint64_t v4 = (kaldi::Input *)kaldi::Input::Input(v5, a3, v6);
  kaldi::Input::Stream(v4);
  kaldi::quasar::CreateComputeEngineConfig(a2);
}

void sub_1B1AD0D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (*(char *)(v36 - 105) < 0) {
    operator delete(*(void **)(v36 - 128));
  }
  kaldi::Input::~Input((kaldi::Input *)(v36 - 104));
  _Unwind_Resume(a1);
}

uint64_t kaldi::ReadBasicType<int>(void *a1, int a2, uint64_t a3)
{
  v10[51] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    int v4 = std::istream::get();
    if (v4 == -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "ReadBasicType: encountered end of stream.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
    if (v4 << 24 != 0x4000000)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ReadBasicType: did not get expected integer type, ", 50);
      unsigned __int8 v7 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" vs. ", 5);
      size_t v8 = (void *)std::ostream::operator<<();
      unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)".  You can change this code to successfully", 43);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, " read it later, if needed.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
    uint64_t result = std::istream::read();
  }
  else
  {
    uint64_t result = MEMORY[0x1B3EA7DD0](a1, a3);
  }
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Read failure in ReadBasicType, file position is ", 48);
    std::istream::tellg();
    int v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", next char is ", 15);
    std::istream::peek();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return result;
}

void sub_1B1AD0FEC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::ws[abi:ne180100]<char,std::char_traits<char>>(void *a1)
{
  MEMORY[0x1B3EA7D80](&v12, a1, 1);
  if (!v12) {
    return a1;
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v2 = std::locale::use_facet(&v11, MEMORY[0x1E4FBA258]);
  std::locale::~locale(&v11);
  uint64_t v3 = a1 + 5;
  while (1)
  {
    int v4 = *(void **)((char *)v3 + *(void *)(*a1 - 24));
    uint64_t v5 = (unsigned char *)v4[3];
    if (v5 == (unsigned char *)v4[4]) {
      break;
    }
    LOBYTE(v6) = *v5;
LABEL_6:
    if ((v6 & 0x80) != 0 || (*((_DWORD *)&v2[1].~facet + v6) & 0x4000) == 0)
    {
      int v9 = 0;
      goto LABEL_12;
    }
    unsigned __int8 v7 = *(void **)((char *)v3 + *(void *)(*a1 - 24));
    uint64_t v8 = v7[3];
    if (v8 == v7[4]) {
      (*(void (**)(void *))(*v7 + 80))(v7);
    }
    else {
      v7[3] = v8 + 1;
    }
  }
  int v6 = (*(uint64_t (**)(void *))(*v4 + 72))(v4);
  if (v6 != -1) {
    goto LABEL_6;
  }
  int v9 = 2;
LABEL_12:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1B1AD1178(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  uint64_t v11 = *v9;
  *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v9 + *(void *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1B1AD1134);
  }
  __cxa_rethrow();
}

void sub_1B1AD120C(_Unwind_Exception *a1)
{
}

void kaldi::quasar::CEInferenceNet::Shape::Init(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2)
  {
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    kaldi::SplitStringToVector((const std::string *)a2, ",", 1, (uint64_t)&v36);
    uint64_t v4 = v36;
    if (v37 != v36)
    {
      unint64_t v5 = 0;
      int v6 = (void **)(a1 + 8);
      do
      {
        unsigned __int8 v7 = (const std::string *)(v4 + 24 * v5);
        int v8 = SHIBYTE(v7->__r_.__value_.__r.__words[2]);
        if (v8 < 0)
        {
          if (v7->__r_.__value_.__l.__size_ != 1) {
            goto LABEL_24;
          }
          int v9 = *(unsigned __int8 *)v7->__r_.__value_.__l.__data_;
        }
        else
        {
          if (v8 != 1) {
            goto LABEL_24;
          }
          int v9 = v7->__r_.__value_.__s.__data_[0];
        }
        if (v9 == 82)
        {
          *(_DWORD *)a1 = v5;
          uint64_t v11 = *(char **)(a1 + 16);
          unint64_t v10 = *(void *)(a1 + 24);
          if ((unint64_t)v11 >= v10)
          {
            char v12 = *v6;
            uint64_t v13 = (v11 - (unsigned char *)*v6) >> 3;
            unint64_t v14 = v13 + 1;
            if ((unint64_t)(v13 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v15 = v10 - (void)v12;
            if (v15 >> 2 > v14) {
              unint64_t v14 = v15 >> 2;
            }
            if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v16 = v14;
            }
            if (v16)
            {
              BOOL v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 24, v16);
              char v12 = *(void **)(a1 + 8);
              uint64_t v11 = *(char **)(a1 + 16);
            }
            else
            {
              BOOL v17 = 0;
            }
            uint64_t v28 = &v17[8 * v13];
            *(void *)uint64_t v28 = 0;
            unsigned __int8 v24 = v28 + 8;
            while (v11 != (char *)v12)
            {
              uint64_t v33 = *((void *)v11 - 1);
              v11 -= 8;
              *((void *)v28 - 1) = v33;
              v28 -= 8;
            }
LABEL_55:
            *(void *)(a1 + 8) = v28;
            *(void *)(a1 + 16) = v24;
            *(void *)(a1 + ++*(void *)(result + 24) = &v17[8 * v16];
            if (v12) {
              operator delete(v12);
            }
            goto LABEL_57;
          }
LABEL_23:
          *(void *)uint64_t v11 = 0;
          uint64_t v19 = v11 + 8;
          goto LABEL_26;
        }
        if (v9 == 67)
        {
          *(_DWORD *)(a1 + 4) = v5;
          uint64_t v11 = *(char **)(a1 + 16);
          unint64_t v18 = *(void *)(a1 + 24);
          if ((unint64_t)v11 >= v18)
          {
            char v12 = *v6;
            uint64_t v30 = (v11 - (unsigned char *)*v6) >> 3;
            unint64_t v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v32 = v18 - (void)v12;
            if (v32 >> 2 > v31) {
              unint64_t v31 = v32 >> 2;
            }
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v16 = v31;
            }
            if (v16)
            {
              BOOL v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 24, v16);
              char v12 = *(void **)(a1 + 8);
              uint64_t v11 = *(char **)(a1 + 16);
            }
            else
            {
              BOOL v17 = 0;
            }
            uint64_t v28 = &v17[8 * v30];
            *(void *)uint64_t v28 = 0;
            unsigned __int8 v24 = v28 + 8;
            while (v11 != (char *)v12)
            {
              uint64_t v34 = *((void *)v11 - 1);
              v11 -= 8;
              *((void *)v28 - 1) = v34;
              v28 -= 8;
            }
            goto LABEL_55;
          }
          goto LABEL_23;
        }
LABEL_24:
        uint64_t v20 = std::stoll(v7, 0, 10);
        uint64_t v21 = v20;
        int64x2_t v23 = *(uint64_t **)(a1 + 16);
        unint64_t v22 = *(void *)(a1 + 24);
        if ((unint64_t)v23 >= v22)
        {
          char v12 = *v6;
          uint64_t v25 = ((char *)v23 - (unsigned char *)*v6) >> 3;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v27 = v22 - (void)v12;
          if (v27 >> 2 > v26) {
            unint64_t v26 = v27 >> 2;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v26;
          }
          if (v16)
          {
            BOOL v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 24, v16);
            char v12 = *(void **)(a1 + 8);
            int64x2_t v23 = *(uint64_t **)(a1 + 16);
          }
          else
          {
            BOOL v17 = 0;
          }
          uint64_t v28 = &v17[8 * v25];
          *(void *)uint64_t v28 = v21;
          unsigned __int8 v24 = v28 + 8;
          while (v23 != v12)
          {
            uint64_t v29 = *--v23;
            *((void *)v28 - 1) = v29;
            v28 -= 8;
          }
          goto LABEL_55;
        }
        *int64x2_t v23 = v20;
        uint64_t v19 = v23 + 1;
LABEL_26:
        unsigned __int8 v24 = v19;
LABEL_57:
        *(void *)(a1 + 16) = v24;
        ++v5;
        uint64_t v4 = v36;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v37 - v36) >> 3) > v5);
    }
    if ((*(_DWORD *)a1 & 0x80000000) != 0 || (*(_DWORD *)(a1 + 4) & 0x80000000) != 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"row_index >= 0 && col_index >= 0", 32);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v35);
    }
    v35[0] = (void **)&v36;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v35);
  }
}

uint64_t kaldi::quasar::CEInferenceNet::Shape::Get(kaldi::quasar::CEInferenceNet::Shape *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = *((void *)this + 2);
  uint64_t result = (uint64_t)this + 8;
  if (v5 == v6)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "!shape.empty()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  uint64_t v8 = *(int *)this;
  uint64_t v7 = *((int *)this + 1);
  *(void *)(v5 + 8 * v8) = a2;
  *(void *)(v5 + 8 * v7) = a3;
  return result;
}

void kaldi::quasar::CEInferenceNet::CEInferenceNet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_1F0A503E0;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v6 = a1 + 104;
  *(_OWORD *)(a1 + 88) = 0u;
  kaldi::quasar::CEInferenceNetConfig::CEInferenceNetConfig((kaldi::quasar::CEInferenceNetConfig *)(a1 + 104));
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = -1;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 536) = -1;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 552) = 0;
  kaldi::quasar::CEInferenceNetConfig::Read(v6, a2, a3);
}

void sub_1B1AD1968(_Unwind_Exception *a1)
{
  uint64_t v5 = v1 + 64;
  uint64_t v6 = v1[68];
  if (v6)
  {
    v1[69] = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v5;
  if (*v5)
  {
    v1[65] = v7;
    operator delete(v7);
  }
  uint64_t v8 = v1[62];
  v1[62] = 0;
  if (v8) {
    (*(void (**)(void *))(*(void *)v8 + 8))(v8);
  }
  kaldi::quasar::CEInferenceNetConfig::~CEInferenceNetConfig(v2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v10);
  uint64_t v9 = *v3;
  *uint64_t v3 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1 + 4);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](v10);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEInferenceNet::CEInferenceNet(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) >= 0) {
    size_t v4 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v4 = *(void *)(a2 + 8);
  }
  uint64_t v5 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 7);
  if (v8 < 0) {
    uint64_t v5 = (void **)__p[0];
  }
  if (v4)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v6 = (const void *)a2;
    }
    else {
      uint64_t v6 = *(const void **)a2;
    }
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, ".config");
  kaldi::quasar::CEInferenceNet::CEInferenceNet(a1, a2, (uint64_t)__p);
}

void sub_1B1AD1B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEInferenceNet::InitialCachedStatesInit(kaldi::quasar::CEInferenceNet *this)
{
  if (!*((void *)this + 62))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v26, "engine_ != nullptr");
    goto LABEL_34;
  }
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 47) - *((void *)this + 46)) >> 3);
  if (v2 != (uint64_t)(*((void *)this + 50) - *((void *)this + 49)) >> 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v26, "cfg_.cached_tensor_shapes_list.size() == cfg_.cached_tensor_initial_states.size()");
    goto LABEL_34;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 35) - *((void *)this + 34)) >> 3) != v2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v26, "cfg_.cached_input_tensor_list.size() == cfg_.cached_tensor_shapes_list.size()");
    goto LABEL_34;
  }
  uint64_t v3 = *((void *)this + 1);
  size_t v4 = (void *)((char *)this + 8);
  if (*((void *)this + 2) != v3)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(v3 + 8 * v5);
      *(void *)(v3 + 8 * v5) = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      ++v5;
      uint64_t v3 = *((void *)this + 1);
    }
    while (v5 < (*((void *)this + 2) - v3) >> 3);
    unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 47) - *((void *)this + 46)) >> 3);
  }
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::resize((uint64_t *)this + 1, v2);
  uint64_t v8 = *((void *)this + 46);
  if (*((void *)this + 47) != v8)
  {
    for (unint64_t i = 0; i < 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 47) - v8) >> 3); ++i)
    {
      uint64_t v11 = (int **)(v8 + 24 * i);
      unint64_t v10 = *v11;
      uint64_t v12 = v11[1] - *v11;
      if (v12 == 1)
      {
        int v13 = 1;
      }
      else
      {
        if (v12 != 2)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Streaming Nnet implementation does not support input shape: ", 60);
          std::ostream::operator<<();
LABEL_34:
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v26);
        }
        int v14 = *v10++;
        int v13 = v14;
      }
      uint64_t v15 = *v10;
      if (*((unsigned char *)this + 483) && !kaldi::quasar::isDeviceFp32Compute((kaldi::quasar *)v7))
      {
        uint64_t v18 = *((void *)this + 62);
        uint64_t v19 = (char *)operator new(0x10uLL);
        uint64_t v27 = (long long *)(v19 + 16);
        uint64_t v28 = v19 + 16;
        *(void *)uint64_t v19 = v13;
        *((void *)v19 + 1) = v15;
        unint64_t v26 = (long long *)v19;
        (*(void (**)(kaldi::quasar::ComputeEngineBufferItf **__return_ptr, uint64_t, long long **))(*(void *)v18 + 64))(&v25, v18, &v26);
      }
      else
      {
        uint64_t v16 = *((void *)this + 62);
        BOOL v17 = (char *)operator new(0x10uLL);
        uint64_t v27 = (long long *)(v17 + 16);
        uint64_t v28 = v17 + 16;
        *(void *)BOOL v17 = v13;
        *((void *)v17 + 1) = v15;
        unint64_t v26 = (long long *)v17;
        (*(void (**)(kaldi::quasar::ComputeEngineBufferItf **__return_ptr, uint64_t, long long **))(*(void *)v16 + 56))(&v25, v16, &v26);
      }
      uint64_t v20 = v25;
      uint64_t v25 = 0;
      if (v26)
      {
        uint64_t v27 = v26;
        operator delete(v26);
      }
      for (uint64_t j = 0; kaldi::quasar::ComputeEngineBufferItf::GetSize(v20) > j; ++j)
        (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t, float))(*(void *)v20 + 104))(v20, j, *(float *)(*((void *)this + 49) + 4 * i));
      kaldi::quasar::ComputeEngineBufferItf::SetName((uint64_t)v20, (const std::string *)(*((void *)this + 34) + 24 * i));
      uint64_t v22 = *(void *)(*v4 + 8 * i);
      *(void *)(*v4 + 8 * i) = v20;
      if (v22) {
        (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
      }
      uint64_t v23 = *((void *)this + 34);
      unint64_t v26 = (long long *)(*((void *)this + 40) + 24 * i);
      unsigned __int8 v24 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (unsigned __int8 *)v26, (uint64_t)&std::piecewise_construct, &v26);
      uint64_t v7 = std::string::operator=((std::string *)(v24 + 40), (const std::string *)(v23 + 24 * i));
      uint64_t v8 = *((void *)this + 46);
    }
  }
  if (*((void *)this + 7) != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 41) - *((void *)this + 40)) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v26, "cached_output_input_map.size() == cfg_.cached_output_tensor_list.size()");
    goto LABEL_34;
  }
}

void sub_1B1AD1F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEInferenceNet::~CEInferenceNet(kaldi::quasar::CEInferenceNet *this)
{
  *(void *)this = &unk_1F0A503E0;
  unint64_t v2 = (void *)*((void *)this + 68);
  if (v2)
  {
    *((void *)this + 69) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 64);
  if (v3)
  {
    *((void *)this + 65) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *((void *)this + 62);
  *((void *)this + 62) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  kaldi::quasar::CEInferenceNetConfig::~CEInferenceNetConfig((kaldi::quasar::CEInferenceNet *)((char *)this + 104));
  uint64_t v6 = (void **)((char *)this + 80);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v5 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 32);
  uint64_t v6 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v6);
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  kaldi::quasar::CEInferenceNet::~CEInferenceNet(this);
  JUMPOUT(0x1B3EA8670);
}

void *kaldi::quasar::CEInferenceNet::CopyToMatrix(uint64_t a1, void *a2, unsigned int *a3, int32x2_t *a4)
{
  uint64_t v5 = *a2;
  if (!*a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "in != nullptr");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  v12[1] = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  v12[0] = &unk_1F0A517C0;
  (*(void (**)(uint64_t, void *))(*(void *)v5 + 40))(v5, v12);
  if (*(_DWORD *)(a1 + 536) == -1 || *(_DWORD *)(a1 + 540) == -1)
  {
    uint64_t v9 = *a3;
    uint64_t v10 = ((int)v13 / (int)v9);
    if ((int)v13 % (int)v9)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"out_vec.Dim() % row_num == 0", 28);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
    }
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)*a2 + 184))();
    uint64_t v10 = (*(uint64_t (**)(void, void))(*(void *)*a2 + 184))(*a2, *(unsigned int *)(a1 + 540));
    if (v13 != v10 * v9)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"out_vec.Dim() == out_numrows * out_numcols", 42);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
    }
  }
  kaldi::CuMatrix<float>::Resize(a4, v9, v10, 0, 0);
  kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)a4, (uint64_t)v12);
  return kaldi::CuVector<float>::~CuVector(v12);
}

void kaldi::quasar::CEInferenceNet::Feedforward(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  if (*(unsigned char *)(a1 + 480)) {
    kaldi::quasar::CEInferenceNet::FeedforwardWithCachedStreaming(a1, a2, a3, a4);
  }
  else {
    kaldi::quasar::CEInferenceNet::FeedforwardWithoutCachedStreaming(a1, (void **)a2, a3, a4);
  }
}

void kaldi::quasar::CEInferenceNet::FeedforwardWithCachedStreaming(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  memset(v4, 0, sizeof(v4));
  kaldi::quasar::CEInferenceNet::MultiIOFeedforward(a1, a2, v4, a3, 0, a4);
  uint64_t v5 = (void **)v4;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void sub_1B1AD2340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEInferenceNet::FeedforwardWithoutCachedStreaming(uint64_t a1, void **a2, uint64_t *a3, int a4)
{
  *(void *)&long long v39 = *MEMORY[0x1E4F143B8];
  uint64_t v34 = 0;
  unint64_t v35 = 0;
  unint64_t v36 = 0;
  uint64_t v7 = *a2;
  if (*(char *)(a1 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(a1 + 104), *(void *)(a1 + 112));
    unint64_t v8 = v35;
    unint64_t v9 = v36;
    uint64_t v33 = v7;
    if (v35 < v36)
    {
      long long v10 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
      *(void *)(v35 + 16) = *((void *)&v32.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v8 = v10;
      memset(&v32, 0, sizeof(v32));
      *(void *)(v8 + ++*(void *)(result + 24) = v33;
      unint64_t v35 = v8 + 32;
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    std::string v32 = *(std::string *)(a1 + 104);
    uint64_t v33 = v7;
  }
  uint64_t v11 = (uint64_t)(v8 - v34) >> 5;
  unint64_t v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v13 = v9 - v34;
  if (v13 >> 4 > v12) {
    unint64_t v12 = v13 >> 4;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v12;
  }
  unint64_t v31 = &v36;
  uint64_t v15 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v36, v14);
  uint64_t v16 = &v15[4 * v11];
  uint64_t v27 = v15;
  uint64_t v28 = v16;
  uint64_t v30 = &v15[4 * v17];
  long long v18 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
  v16[2] = (void *)v32.__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v16 = v18;
  memset(&v32, 0, sizeof(v32));
  void v16[3] = v33;
  uint64_t v29 = v16 + 4;
  std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(&v34, &v27);
  unint64_t v19 = v35;
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v27);
  unint64_t v35 = v19;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
LABEL_13:
  uint64_t v20 = a1 + 176;
  uint64_t v21 = 128;
  if (a4) {
    uint64_t v21 = 176;
  }
  else {
    uint64_t v20 = a1 + 128;
  }
  if ((*(char *)(v20 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v20 + 23))
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v22 = *(void *)(a1 + 496);
      std::string v38 = *(std::string *)v20;
      goto LABEL_21;
    }
LABEL_26:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"!out_node.empty()", 17);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v27);
  }
  std::string::size_type v23 = *(void *)(v20 + 8);
  if (!v23) {
    goto LABEL_26;
  }
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v22 = *(void *)(a1 + 496);
  std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(a1 + v21), v23);
LABEL_21:
  memset(&v32, 0, sizeof(v32));
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v32.__r_.__value_.__l.__size_ = v32.__r_.__value_.__r.__words[0];
  v32.__r_.__value_.__r.__words[2] = v32.__r_.__value_.__r.__words[0] + 24;
  v32.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v32.__r_.__value_.__r.__words[2], (long long *)&v38, &v39, (std::string *)v32.__r_.__value_.__l.__data_);
  memset(v26, 0, sizeof(v26));
  (*(void (**)(uint64_t, uint64_t *, std::string *, void ***, void ***))(*(void *)v22 + 128))(v22, &v34, &v32, v26, &v27);
  uint64_t v37 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v26[0] = (void **)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v26);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  uint64_t v24 = (uint64_t)*v27;
  *uint64_t v27 = 0;
  uint64_t v25 = *a3;
  *a3 = v24;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  uint64_t v27 = (void **)&v34;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v27);
}

void sub_1B1AD2734(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1AD2758);
}

void kaldi::quasar::CEInferenceNet::MultiIOFeedforward(uint64_t a1, uint64_t *a2, void *a3, uint64_t *a4, uint64_t a5, int a6)
{
  uint64_t v134 = 0;
  unint64_t v135 = 0;
  unint64_t v136 = 0;
  long long v10 = (_OWORD *)(a1 + 104);
  kaldi::quasar::ComputeEngineBufferItf::SetName(*a2, (const std::string *)(a1 + 104));
  uint64_t v11 = *a2;
  if (*(char *)(a1 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)(a1 + 104), *(void *)(a1 + 112));
  }
  else
  {
    *(_OWORD *)&v132.__r_.__value_.__l.__data_ = *v10;
    v132.__r_.__value_.__r.__words[2] = *(void *)(a1 + 120);
  }
  uint64_t v133 = v11;
  unint64_t v12 = v135;
  uint64_t v126 = (kaldi::quasar::ComputeEngineBufferItf **)a2;
  if (v135 >= v136)
  {
    uint64_t v14 = (uint64_t)(v135 - v134) >> 5;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = v136 - v134;
    if ((uint64_t)(v136 - v134) >> 4 > v15) {
      unint64_t v15 = v16 >> 4;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    uint64_t v131 = &v136;
    long long v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v136, v17);
    unint64_t v19 = &v18[32 * v14];
    __p[0] = v18;
    __p[1] = v19;
    int v130 = &v18[32 * v20];
    long long v21 = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
    *((void *)v19 + 2) = *((void *)&v132.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v19 = v21;
    memset(&v132, 0, sizeof(v132));
    *((void *)v19 + 3) = v133;
    int v129 = v19 + 32;
    std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(&v134, __p);
    unint64_t v22 = v135;
    std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)__p);
    unint64_t v135 = v22;
    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v132.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v13 = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
    *(void *)(v135 + 16) = *((void *)&v132.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v12 = v13;
    memset(&v132, 0, sizeof(v132));
    *(void *)(v12 + ++*(void *)(result + 24) = v133;
    unint64_t v135 = v12 + 32;
  }
  uint64_t v125 = a5;
  uint64_t v23 = a3[1];
  if (*a3 != v23)
  {
    uint64_t v25 = *(void *)(a1 + 296);
    uint64_t v24 = *(void *)(a1 + 304);
    unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v25) >> 3);
    if (v26 != (v23 - *a3) >> 3)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"the number of input tensors ", 28);
      int v119 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)" != ", 4);
      unint64_t v120 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)" , the list of input tensor names", 33);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    if (v24 != v25)
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      if (v26 <= 1) {
        unint64_t v26 = 1;
      }
      do
      {
        uint64_t v29 = (long long *)(*(void *)(a1 + 296) + v27);
        uint64_t v30 = *(void *)(*a3 + 8 * v28);
        if (*((char *)v29 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)v29, *((void *)v29 + 1));
        }
        else
        {
          long long v31 = *v29;
          v132.__r_.__value_.__r.__words[2] = *((void *)v29 + 2);
          *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v31;
        }
        uint64_t v133 = v30;
        unint64_t v32 = v135;
        if (v135 >= v136)
        {
          uint64_t v34 = (uint64_t)(v135 - v134) >> 5;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v36 = v136 - v134;
          if ((uint64_t)(v136 - v134) >> 4 > v35) {
            unint64_t v35 = v36 >> 4;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v37 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v35;
          }
          uint64_t v131 = &v136;
          std::string v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v136, v37);
          long long v39 = &v38[32 * v34];
          __p[0] = v38;
          __p[1] = v39;
          int v130 = &v38[32 * v40];
          long long v41 = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
          *((void *)v39 + 2) = *((void *)&v132.__r_.__value_.__l + 2);
          *(_OWORD *)long long v39 = v41;
          memset(&v132, 0, sizeof(v132));
          *((void *)v39 + 3) = v133;
          int v129 = v39 + 32;
          std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(&v134, __p);
          unint64_t v42 = v135;
          std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)__p);
          unint64_t v135 = v42;
          if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v132.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v33 = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
          *(void *)(v135 + 16) = *((void *)&v132.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v32 = v33;
          memset(&v132, 0, sizeof(v132));
          *(void *)(v32 + ++*(void *)(result + 24) = v133;
          unint64_t v135 = v32 + 32;
        }
        ++v28;
        v27 += 24;
      }
      while (v26 != v28);
    }
  }
  if (*(unsigned char *)(a1 + 480))
  {
    uint64_t v43 = *(void *)(a1 + 8);
    uint64_t v44 = *(void *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 280) - *(void *)(a1 + 272)) >> 3) != (v44 - v43) >> 3)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"the number of cached input tensors ", 35);
      unint64_t v121 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)" != ", 4);
      unint64_t v122 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)" , the list of cached input tensor names", 40);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    if (v44 != v43)
    {
      uint64_t v45 = 0;
      unint64_t v46 = 0;
      do
      {
        uint64_t String = quasar::PTree::getString(*(quasar::PTree **)(v43 + 8 * v46));
        uint64_t v48 = *(unsigned __int8 *)(String + 23);
        if ((v48 & 0x80u) != 0) {
          uint64_t v48 = *(void *)(String + 8);
        }
        if (v48)
        {
          uint64_t v49 = quasar::PTree::getString(*(quasar::PTree **)(*(void *)(a1 + 8) + 8 * v46));
          uint64_t v50 = *(void *)(*(void *)(a1 + 8) + 8 * v46);
          if (*(char *)(v49 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)v49, *(void *)(v49 + 8));
          }
          else
          {
            long long v51 = *(_OWORD *)v49;
            v132.__r_.__value_.__r.__words[2] = *(void *)(v49 + 16);
            *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v51;
          }
          uint64_t v133 = v50;
          unint64_t v55 = v135;
          if (v135 >= v136)
          {
            uint64_t v56 = (uint64_t)(v135 - v134) >> 5;
            unint64_t v57 = v56 + 1;
            if ((unint64_t)(v56 + 1) >> 59) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v58 = v136 - v134;
            if ((uint64_t)(v136 - v134) >> 4 > v57) {
              unint64_t v57 = v58 >> 4;
            }
            if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v59 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v59 = v57;
            }
LABEL_61:
            uint64_t v131 = &v136;
            long long v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v136, v59);
            uint64_t v64 = &v63[32 * v56];
            __p[0] = v63;
            __p[1] = v64;
            int v130 = &v63[32 * v65];
            long long v66 = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
            *((void *)v64 + 2) = *((void *)&v132.__r_.__value_.__l + 2);
            *(_OWORD *)uint64_t v64 = v66;
            memset(&v132, 0, sizeof(v132));
            *((void *)v64 + 3) = v133;
            int v129 = v64 + 32;
            std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(&v134, __p);
            unint64_t v67 = v135;
            std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)__p);
            unint64_t v135 = v67;
            if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v132.__r_.__value_.__l.__data_);
            }
            goto LABEL_63;
          }
        }
        else
        {
          uint64_t v52 = (long long *)(*(void *)(a1 + 272) + v45);
          uint64_t v53 = *(void *)(*(void *)(a1 + 8) + 8 * v46);
          if (*((char *)v52 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)v52, *((void *)v52 + 1));
          }
          else
          {
            long long v54 = *v52;
            v132.__r_.__value_.__r.__words[2] = *((void *)v52 + 2);
            *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v54;
          }
          uint64_t v133 = v53;
          unint64_t v55 = v135;
          if (v135 >= v136)
          {
            uint64_t v56 = (uint64_t)(v135 - v134) >> 5;
            unint64_t v61 = v56 + 1;
            if ((unint64_t)(v56 + 1) >> 59) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v62 = v136 - v134;
            if ((uint64_t)(v136 - v134) >> 4 > v61) {
              unint64_t v61 = v62 >> 4;
            }
            if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v59 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v59 = v61;
            }
            goto LABEL_61;
          }
        }
        long long v60 = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
        *(void *)(v55 + 16) = *((void *)&v132.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v55 = v60;
        memset(&v132, 0, sizeof(v132));
        *(void *)(v55 + ++*(void *)(result + 24) = v133;
        unint64_t v135 = v55 + 32;
LABEL_63:
        ++v46;
        uint64_t v43 = *(void *)(a1 + 8);
        v45 += 24;
      }
      while (v46 < (*(void *)(a1 + 16) - v43) >> 3);
    }
  }
  if (*(char *)(a1 + 271) < 0) {
    uint64_t v68 = *(void *)(a1 + 256);
  }
  else {
    uint64_t v68 = *(unsigned __int8 *)(a1 + 271);
  }
  if (v68)
  {
    int v69 = *(kaldi::quasar::ComputeEngineBufferItf **)(a1 + 72);
    if (v69)
    {
      uint64_t Size = kaldi::quasar::ComputeEngineBufferItf::GetSize(v69);
      kaldi::quasar::ComputeEngineBufferItf::GetShape(*v126, (char **)__p);
      uint64_t v71 = *(void *)__p[0];
      __p[1] = __p[0];
      operator delete(__p[0]);
      if (Size != v71)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"maskings_->GetSize() == in->GetShape()[0]", 41);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      uint64_t v72 = *(void *)(a1 + 72);
      if (*(char *)(a1 + 271) < 0) {
        std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)(a1 + 248), *(void *)(a1 + 256));
      }
      else {
        std::string v132 = *(std::string *)(a1 + 248);
      }
      uint64_t v133 = v72;
      unint64_t v73 = v135;
      if (v135 >= v136)
      {
        uint64_t v75 = (uint64_t)(v135 - v134) >> 5;
        unint64_t v76 = v75 + 1;
        if ((unint64_t)(v75 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v77 = v136 - v134;
        if ((uint64_t)(v136 - v134) >> 4 > v76) {
          unint64_t v76 = v77 >> 4;
        }
        if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v78 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v78 = v76;
        }
        uint64_t v131 = &v136;
        BOOL v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v136, v78);
        uint64_t v80 = &v79[32 * v75];
        __p[0] = v79;
        __p[1] = v80;
        int v130 = &v79[32 * v81];
        long long v82 = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
        *((void *)v80 + 2) = *((void *)&v132.__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v80 = v82;
        memset(&v132, 0, sizeof(v132));
        *((void *)v80 + 3) = v133;
        int v129 = v80 + 32;
        std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(&v134, __p);
        unint64_t v83 = v135;
        std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)__p);
        unint64_t v135 = v83;
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v132.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v74 = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
        *(void *)(v135 + 16) = *((void *)&v132.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v73 = v74;
        memset(&v132, 0, sizeof(v132));
        *(void *)(v73 + ++*(void *)(result + 24) = v133;
        unint64_t v135 = v73 + 32;
      }
    }
  }
  memset(&v132, 0, sizeof(v132));
  memset(&v127, 0, sizeof(v127));
  uint64_t v84 = 24;
  if (a6) {
    uint64_t v84 = 72;
  }
  uint64_t v85 = a1 + v84;
  uint64_t v86 = v85 + 104;
  int v87 = *(char *)(v85 + 127);
  if ((v87 & 0x80000000) == 0)
  {
    if ((_BYTE)v87) {
      goto LABEL_87;
    }
LABEL_121:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"!out_node.empty()", 17);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  if (!*(void *)(v86 + 8)) {
    goto LABEL_121;
  }
LABEL_87:
  float v88 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v127, (long long *)v86);
  v127.__end_ = v88;
  if (*(unsigned char *)(a1 + 480))
  {
    if (*(void *)(a1 + 80) != *(void *)(a1 + 88))
    {
      float v89 = *(const std::string::value_type ***)(a1 + 320);
      unint64_t v90 = *(const std::string::value_type ***)(a1 + 328);
      while (1)
      {
        if (v89 == v90) {
          goto LABEL_123;
        }
        uint64_t v91 = *(void *)(a1 + 80);
        uint64_t v92 = *(void *)(a1 + 88);
        if (v91 == v92)
        {
LABEL_111:
          if (v91 != v92) {
            goto LABEL_119;
          }
        }
        else
        {
          int v93 = *((char *)v89 + 23);
          if (v93 >= 0) {
            unint64_t v94 = (const std::string::value_type *)*((unsigned __int8 *)v89 + 23);
          }
          else {
            unint64_t v94 = v89[1];
          }
          do
          {
            uint64_t v95 = *(unsigned __int8 *)(v91 + 23);
            if ((v95 & 0x80u) == 0) {
              unint64_t v96 = (const std::string::value_type *)*(unsigned __int8 *)(v91 + 23);
            }
            else {
              unint64_t v96 = *(const std::string::value_type **)(v91 + 8);
            }
            if (v96 == v94)
            {
              if (v93 >= 0) {
                BOOL v97 = (const std::string::value_type *)v89;
              }
              else {
                BOOL v97 = *v89;
              }
              if ((v95 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v91, v97, *(void *)(v91 + 8))) {
                  goto LABEL_111;
                }
              }
              else
              {
                if (!*(unsigned char *)(v91 + 23)) {
                  goto LABEL_111;
                }
                uint64_t v98 = 0;
                while (*(unsigned __int8 *)(v91 + v98) == v97[v98])
                {
                  if (v95 == ++v98) {
                    goto LABEL_111;
                  }
                }
              }
            }
            v91 += 48;
          }
          while (v91 != v92);
        }
        if (v88 >= v127.__end_cap_.__value_)
        {
          float v88 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v127, (long long *)v89);
        }
        else
        {
          if (*((char *)v89 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v88, *v89, (std::string::size_type)v89[1]);
          }
          else
          {
            long long v99 = *(_OWORD *)v89;
            v88->__r_.__value_.__r.__words[2] = (std::string::size_type)v89[2];
            *(_OWORD *)&v88->__r_.__value_.__l.__data_ = v99;
          }
          ++v88;
        }
        v127.__end_ = v88;
LABEL_119:
        v89 += 3;
      }
    }
    std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v127, v88, *(std::string **)(a1 + 320), *(long long **)(a1 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 328) - *(void *)(a1 + 320)) >> 3));
  }
LABEL_123:
  if (!v125 || (uint64_t v100 = *(void *)(a1 + 344), v101 = *(void *)(a1 + 352), v100 == v101))
  {
    int v105 = 0;
  }
  else
  {
    if (*(unsigned char *)(a1 + 480))
    {
      do
      {
        if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 32), (unsigned __int8 *)v100))
        {
          std::vector<std::string>::pointer end = v127.__end_;
          if (v127.__end_ >= v127.__end_cap_.__value_)
          {
            uint64_t v104 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v127, (long long *)v100);
          }
          else
          {
            if (*(char *)(v100 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v127.__end_, *(const std::string::value_type **)v100, *(void *)(v100 + 8));
            }
            else
            {
              long long v103 = *(_OWORD *)v100;
              v127.__end_->__r_.__value_.__r.__words[2] = *(void *)(v100 + 16);
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v103;
            }
            uint64_t v104 = end + 1;
          }
          v127.__end_ = v104;
        }
        v100 += 24;
      }
      while (v100 != v101);
    }
    else
    {
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v127, v127.__end_, *(std::string **)(a1 + 344), *(long long **)(a1 + 352), 0xAAAAAAAAAAAAAAABLL * ((v101 - v100) >> 3));
    }
    int v105 = 1;
  }
  uint64_t v106 = *(void *)(a1 + 496);
  __p[0] = 0;
  __p[1] = 0;
  int v129 = 0;
  (*(void (**)(uint64_t, uint64_t *, std::vector<std::string> *, void **, std::string *))(*(void *)v106
                                                                                                 + 128))(v106, &v134, &v127, __p, &v132);
  v137[0] = __p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v137);
  uint64_t v107 = *(void *)v132.__r_.__value_.__l.__data_;
  *(void *)v132.__r_.__value_.__l.__data_ = 0;
  uint64_t v108 = *a4;
  *a4 = v107;
  if (v108) {
    (*(void (**)(uint64_t))(*(void *)v108 + 8))(v108);
  }
  if (*(unsigned char *)(a1 + 480))
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> *,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> *,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> *,0>((uint64_t *)(v132.__r_.__value_.__r.__words[0] + 8), (uint64_t *)v132.__r_.__value_.__l.__size_, (uint64_t *)v132.__r_.__value_.__l.__data_);
    std::string::size_type v110 = v109;
    unint64_t v111 = (void *)v132.__r_.__value_.__l.__size_;
    while (v111 != (void *)v110)
    {
      uint64_t v113 = *--v111;
      uint64_t v112 = v113;
      *unint64_t v111 = 0;
      if (v113) {
        (*(void (**)(uint64_t))(*(void *)v112 + 8))(v112);
      }
    }
    v132.__r_.__value_.__l.__size_ = v110;
    if (v105 && *(void *)(a1 + 80) != *(void *)(a1 + 88))
    {
      kaldi::quasar::CEInferenceNet::GetExtraOutputFromSharedAddressCachedStates((uint64_t *)a1, &v134, (uint64_t *)__p);
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((void **)v125);
      *(_OWORD *)uint64_t v125 = *(_OWORD *)__p;
      *(void *)(v125 + 16) = v129;
      __p[1] = 0;
      int v129 = 0;
      __p[0] = 0;
      v137[0] = __p;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](v137);
    }
    kaldi::quasar::CEInferenceNet::GetAndCacheOutput((void *)a1, (uint64_t *)&v132, (uint64_t *)v125);
  }
  else if (v105)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> *,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> *,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> *,0>((uint64_t *)(v132.__r_.__value_.__r.__words[0] + 8), (uint64_t *)v132.__r_.__value_.__l.__size_, (uint64_t *)v132.__r_.__value_.__l.__data_);
    std::string::size_type v115 = v114;
    int v116 = (void *)v132.__r_.__value_.__l.__size_;
    while (v116 != (void *)v115)
    {
      uint64_t v118 = *--v116;
      uint64_t v117 = v118;
      *int v116 = 0;
      if (v118) {
        (*(void (**)(uint64_t))(*(void *)v117 + 8))(v117);
      }
    }
    v132.__r_.__value_.__l.__size_ = v115;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((void **)v125);
    *(std::string *)uint64_t v125 = v132;
    memset(&v132, 0, sizeof(v132));
  }
  __p[0] = &v127;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v132;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v134;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

uint64_t kaldi::quasar::CEInferenceNet::Feedforward(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v8 = *(void *)(a1 + 496);
  uint64_t v9 = kaldi::quasar::CEInferenceNet::Shape::Get((kaldi::quasar::CEInferenceNet::Shape *)(a1 + 504), *(int *)(a2 + 20), *(int *)(a2 + 16));
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v8 + 56))(&v12, v8, v9);
  if (*(int *)(a2 + 20) >= 1)
  {
    int v10 = 0;
    do
    {
      (*(void (**)(uint64_t))(*(void *)v12 + 88))(v12);
      ++v10;
    }
    while (v10 < *(_DWORD *)(a2 + 20));
  }
  kaldi::quasar::CEInferenceNet::Feedforward(a1, &v12, a3, a4);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t result;
  void *__p;
  void *v13;
  void *v14;
  uint64_t v15;

  uint64_t v8 = *(void *)(a1 + 496);
  uint64_t v9 = *(int *)(a2 + 16);
  int v10 = operator new(8uLL);
  std::string __p = v10;
  *int v10 = v9;
  long long v13 = v10 + 1;
  uint64_t v14 = v10 + 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v8 + 56))(&v15, v8, &__p);
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t, void, void, void))(*(void *)v15 + 88))(v15, *(void *)(a2 + 8), *(unsigned int *)(a2 + 16), 0);
  kaldi::quasar::CEInferenceNet::Feedforward(a1, &v15, a3, a4);
  uint64_t result = v15;
  unint64_t v15 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B1AD3654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::CuSubVector<float>::~CuSubVector(uint64_t result)
{
  *(void *)uint64_t result = &unk_1F0A472D0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

void sub_1B1AD37D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEInferenceNet::Feedforward(unsigned char *a1, uint64_t a2, int32x2_t *a3, uint64_t a4)
{
  if (*(_DWORD *)(a2 + 20))
  {
    int v10 = 0;
    kaldi::quasar::CEInferenceNet::Feedforward((uint64_t)a1, a2, (uint64_t *)&v10, a4);
    if (a1[485]) {
      kaldi::quasar::CEInferenceNet::ReshapeVectorOutputBuffToMatrix(&v10);
    }
    unsigned int v9 = *(_DWORD *)(a2 + 20);
    kaldi::quasar::CEInferenceNet::CopyToMatrix((uint64_t)a1, &v10, &v9, a3);
    if (v10)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v10 + 8);
      v7();
    }
  }
  else
  {
    uint64_t v8 = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 176))(a1, a4);
    kaldi::CuMatrix<float>::Resize(a3, 0, v8, 0, 0);
  }
}

void sub_1B1AD3934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEInferenceNet::ReshapeVectorOutputBuffToMatrix(kaldi::quasar::ComputeEngineBufferItf **a1)
{
  kaldi::quasar::ComputeEngineBufferItf::GetShape(*a1, (char **)&__p);
  int64_t v2 = v11 - (unsigned char *)__p;
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
  if (v2 == 8)
  {
    uint64_t v3 = *a1;
    uint64_t Size = kaldi::quasar::ComputeEngineBufferItf::GetSize(*a1);
    uint64_t v5 = operator new(0x10uLL);
    uint64_t v11 = v5 + 2;
    uint64_t v12 = v5 + 2;
    *uint64_t v5 = 1;
    v5[1] = Size;
    std::string __p = v5;
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf **__return_ptr, kaldi::quasar::ComputeEngineBufferItf *, void **))(*(void *)v3 + 192))(&v9, v3, &__p);
    if (__p)
    {
      uint64_t v11 = __p;
      operator delete(__p);
    }
    uint64_t v6 = v9;
    unsigned int v9 = 0;
    uint64_t v7 = *a1;
    *a1 = v6;
    if (v7)
    {
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v7 + 8))(v7);
      uint64_t v8 = v9;
      unsigned int v9 = 0;
      if (v8) {
        (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v8 + 8))(v8);
      }
    }
  }
}

void sub_1B1AD3A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CEInferenceNet::Feedforward(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = 0;
  kaldi::quasar::CEInferenceNet::Feedforward(a1, a2, &v8, a4);
  uint64_t v5 = v8;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 40))(v8, a3);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
  return v6(v5);
}

void sub_1B1AD3B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    kaldi::quasar::CEInferenceNet::Feedforward(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CEInferenceNet::Feedforward(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v7 = *(void *)(a1 + 496);
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  int v10 = operator new(8uLL);
  std::string __p = v10;
  *int v10 = (v8 - v9) >> 2;
  long long v13 = v10 + 1;
  uint64_t v14 = v10 + 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v7 + 56))(&v15, v7, &__p);
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(void *)v15 + 80))(v15);
  kaldi::quasar::CEInferenceNet::Feedforward(a1, &v15, a3, a4);
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B1AD3C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEInferenceNet::GetOutput()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented TODO");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::quasar::CEInferenceNet::GetUnitOutput()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented TODO");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

float kaldi::quasar::CEInferenceNet::GetUnitOutput(uint64_t a1, uint64_t *a2, int a3)
{
  *(void *)&long long v52 = *MEMORY[0x1E4F143B8];
  int v49 = a3;
  uint64_t v5 = *(void *)(a1 + 496);
  uint64_t v6 = operator new(8uLL);
  std::string __p = v6;
  void *v6 = 1;
  long long v39 = v6 + 1;
  uint64_t v40 = v6 + 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v5 + 48))(&v48, v5, &__p);
  if (__p)
  {
    long long v39 = __p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t, int *, uint64_t, void))(*(void *)v48 + 80))(v48, &v49, 1, 0);
  uint64_t v45 = 0;
  unint64_t v46 = 0;
  unint64_t v47 = 0;
  uint64_t v7 = *a2;
  if (*(char *)(a1 + 175) < 0)
  {
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)(a1 + 152), *(void *)(a1 + 160));
    unint64_t v8 = v46;
    unint64_t v9 = v47;
    uint64_t v44 = v7;
    if (v46 < v47)
    {
      long long v10 = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
      *(void *)(v46 + 16) = *((void *)&v43.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v8 = v10;
      memset(&v43, 0, sizeof(v43));
      *(void *)(v8 + ++*(void *)(result + 24) = v44;
      unint64_t v46 = v8 + 32;
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    std::string v43 = *(std::string *)(a1 + 152);
    uint64_t v44 = v7;
  }
  uint64_t v11 = (uint64_t)(v8 - v45) >> 5;
  unint64_t v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v13 = v9 - v45;
  if (v13 >> 4 > v12) {
    unint64_t v12 = v13 >> 4;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v12;
  }
  unint64_t v42 = &v47;
  uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v47, v14);
  uint64_t v16 = &v15[32 * v11];
  std::string __p = v15;
  long long v39 = v16;
  long long v41 = &v15[32 * v17];
  long long v18 = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
  *((void *)v16 + 2) = *((void *)&v43.__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v16 = v18;
  memset(&v43, 0, sizeof(v43));
  *((void *)v16 + 3) = v44;
  uint64_t v40 = v16 + 32;
  std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(&v45, &__p);
  unint64_t v19 = v46;
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&__p);
  unint64_t v46 = v19;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
LABEL_15:
  uint64_t v20 = v48;
  if (*(char *)(a1 + 223) < 0) {
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)(a1 + 200), *(void *)(a1 + 208));
  }
  else {
    std::string v43 = *(std::string *)(a1 + 200);
  }
  uint64_t v44 = v20;
  unint64_t v21 = v46;
  if (v46 >= v47)
  {
    uint64_t v23 = (uint64_t)(v46 - v45) >> 5;
    unint64_t v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v25 = v47 - v45;
    if ((uint64_t)(v47 - v45) >> 4 > v24) {
      unint64_t v24 = v25 >> 4;
    }
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v26 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v24;
    }
    unint64_t v42 = &v47;
    uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v47, v26);
    uint64_t v28 = &v27[32 * v23];
    std::string __p = v27;
    long long v39 = v28;
    long long v41 = &v27[32 * v29];
    long long v30 = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
    *((void *)v28 + 2) = *((void *)&v43.__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v28 = v30;
    memset(&v43, 0, sizeof(v43));
    *((void *)v28 + 3) = v44;
    uint64_t v40 = v28 + 32;
    std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(&v45, &__p);
    unint64_t v31 = v46;
    std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&__p);
    unint64_t v46 = v31;
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v22 = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
    *(void *)(v46 + 16) = *((void *)&v43.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v21 = v22;
    memset(&v43, 0, sizeof(v43));
    *(void *)(v21 + ++*(void *)(result + 24) = v44;
    unint64_t v46 = v21 + 32;
  }
  if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 151))
    {
      std::string __p = 0;
      long long v39 = 0;
      uint64_t v40 = 0;
      uint64_t v32 = *(void *)(a1 + 496);
      std::string v51 = *(std::string *)(a1 + 128);
      goto LABEL_33;
    }
LABEL_38:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"!out_node.empty()", 17);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  std::string::size_type v33 = *(void *)(a1 + 136);
  if (!v33) {
    goto LABEL_38;
  }
  std::string __p = 0;
  long long v39 = 0;
  uint64_t v40 = 0;
  uint64_t v32 = *(void *)(a1 + 496);
  std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)(a1 + 128), v33);
LABEL_33:
  memset(&v43, 0, sizeof(v43));
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v43.__r_.__value_.__l.__size_ = v43.__r_.__value_.__r.__words[0];
  v43.__r_.__value_.__r.__words[2] = v43.__r_.__value_.__r.__words[0] + 24;
  v43.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v43.__r_.__value_.__r.__words[2], (long long *)&v51, &v52, (std::string *)v43.__r_.__value_.__l.__data_);
  memset(v37, 0, sizeof(v37));
  (*(void (**)(uint64_t, uint64_t *, std::string *, void ***, void **))(*(void *)v32 + 128))(v32, &v45, &v43, v37, &__p);
  uint64_t v50 = v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  v37[0] = (void **)&v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v37);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  float v34 = (*(float (**)(void, void))(**(void **)__p + 112))(*(void *)__p, 0);
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  std::string __p = &v45;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v35 = v48;
  uint64_t v48 = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  return v34;
}

void sub_1B1AD4330(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1AD4384);
}

float kaldi::quasar::CEInferenceNet::GetUnitOutput(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 496);
  uint64_t v7 = *(int *)(a2 + 16);
  unint64_t v8 = operator new(0x10uLL);
  uint64_t v13 = v8 + 2;
  unint64_t v14 = v8 + 2;
  *unint64_t v8 = 1;
  v8[1] = v7;
  std::string __p = v8;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v6 + 56))(&v15, v6, &__p);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t, void, void, void))(*(void *)v15 + 88))(v15, *(void *)(a2 + 8), *(unsigned int *)(a2 + 16), 0);
  float UnitOutput = kaldi::quasar::CEInferenceNet::GetUnitOutput(a1, &v15, a3);
  uint64_t v10 = v15;
  uint64_t v15 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return UnitOutput;
}

void sub_1B1AD44B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CEInferenceNet::GetComputeEngine(kaldi::quasar::CEInferenceNet *this)
{
  return (uint64_t)this + 496;
}

uint64_t kaldi::quasar::CEInferenceNet::GetConfig(kaldi::quasar::CEInferenceNet *this)
{
  return (uint64_t)this + 104;
}

void kaldi::quasar::CEInferenceNet::ResetHistoryState(kaldi::quasar::CEInferenceNet *this)
{
  *(void *)&long long v15 = *MEMORY[0x1E4F143B8];
  if (*((char *)this + 247) < 0)
  {
    std::string::size_type v2 = *((void *)this + 29);
    if (!v2) {
      return;
    }
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v1 = *((void *)this + 62);
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)this + 28), v2);
  }
  else
  {
    if (!*((unsigned char *)this + 247)) {
      return;
    }
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v1 = *((void *)this + 62);
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    std::string v14 = *(std::string *)((char *)this + 224);
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  p_int data = 0;
  unint64_t v12 = (void ***)&v3;
  char v13 = 0;
  uint64_t v3 = (std::string *)operator new(0x18uLL);
  uint64_t v4 = v3;
  p_int data = (void **)&v3[1].__r_.__value_.__l.__data_;
  uint64_t v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v14, &v15, v3);
  (*(void (**)(uint64_t, uint64_t *, void ***, std::string **, void))(*(void *)v1 + 120))(v1, &v9, &v6, &v3, 0);
  unint64_t v12 = (void ***)&v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  uint64_t v3 = (std::string *)&v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v3);
  uint64_t v6 = (void **)&v9;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void sub_1B1AD4670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void ***a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  a10 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a13 = (void **)&a16;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEInferenceNet::GetExtraOutputFromSharedAddressCachedStates(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::vector(a3, 0xAAAAAAAAAAAAAAABLL * ((a1[35] - a1[34]) >> 3));
  uint64_t v6 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v20, "");
      uint64_t v9 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(a1[34], a1[35], (unsigned __int8 **)(v6 + v7));
      if (v9 != a1[35]) {
        std::string::operator=(&v20, (const std::string *)(a1[40] + v9 - a1[34]));
      }
      uint64_t v10 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(a1[43], a1[44], (unsigned __int8 **)&v20);
      if (v10 != a1[44])
      {
        uint64_t v11 = v10;
        uint64_t v12 = a1[43];
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(*a2 + v7 + 24) + 16))(&v19);
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3);
        uint64_t v14 = *a3;
        uint64_t v15 = 8 * (int)v13;
        uint64_t v16 = v19;
        uint64_t v19 = 0;
        uint64_t v17 = *(void *)(v14 + v15);
        *(void *)(v14 + v15) = v16;
        if (v17) {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
        uint64_t v18 = v19;
        uint64_t v19 = 0;
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        }
        kaldi::quasar::ComputeEngineBufferItf::SetName(*(void *)(*a3 + 8 * (int)v13), &v20);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      ++v8;
      uint64_t v6 = *a2;
      v7 += 32;
    }
    while (v8 < (a2[1] - *a2) >> 5);
  }
}

void sub_1B1AD48B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEInferenceNet::GetAndCacheOutput(void *a1, uint64_t *a2, uint64_t *a3)
{
  if (a3) {
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::resize(a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[44] - a1[43]) >> 3));
  }
  uint64_t v6 = *a2;
  if (a2[1] != *a2)
  {
    for (unint64_t i = 0; i < (a2[1] - *a2) >> 3; ++i)
    {
      if (a3)
      {
        uint64_t v8 = a1[43];
        uint64_t v9 = a1[44];
        uint64_t String = (unsigned __int8 **)quasar::PTree::getString(*(quasar::PTree **)(v6 + 8 * i));
        uint64_t v11 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(v8, v9, String);
        uint64_t v6 = *a2;
        if (v11 != a1[44])
        {
          int v12 = -1431655765 * ((unint64_t)(v11 - a1[43]) >> 3);
          (*(void (**)(long long **__return_ptr))(**(void **)(v6 + 8 * i) + 16))(v30);
          uint64_t v13 = *a3;
          uint64_t v14 = 8 * v12;
          uint64_t v15 = v30[0];
          v30[0] = 0;
          uint64_t v16 = *(void *)(v13 + v14);
          *(void *)(v13 + v14) = v15;
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
          uint64_t v17 = v30[0];
          v30[0] = 0;
          if (v17) {
            (*(void (**)(long long *))(*(void *)v17 + 8))(v17);
          }
          uint64_t v6 = *a2;
        }
      }
      uint64_t v18 = a1[40];
      uint64_t v19 = a1[41];
      std::string v20 = (unsigned __int8 **)quasar::PTree::getString(*(quasar::PTree **)(v6 + 8 * i));
      uint64_t v21 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(v18, v19, v20);
      if (v21 != a1[41])
      {
        uint64_t v22 = v21;
        uint64_t v23 = (unsigned __int8 *)quasar::PTree::getString(*(quasar::PTree **)(*a2 + 8 * i));
        if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1 + 4, v23))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(v30, "cached_output_input_map.find(output_name) != cached_output_input_map.end()");
          goto LABEL_22;
        }
        v30[0] = (long long *)v23;
        unint64_t v24 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 4), v23, (uint64_t)&std::piecewise_construct, v30);
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v22 - a1[40]) >> 3);
        uint64_t v26 = a1[1];
        uint64_t v27 = 8 * (int)v25;
        uint64_t v28 = *(void *)(*a2 + 8 * i);
        *(void *)(*a2 + 8 * i) = 0;
        uint64_t v29 = *(void *)(v26 + v27);
        *(void *)(v26 + v27) = v28;
        if (v29) {
          (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
        }
        kaldi::quasar::ComputeEngineBufferItf::SetName(*(void *)(a1[1] + 8 * (int)v25), (const std::string *)(v24 + 40));
      }
      uint64_t v6 = *a2;
    }
  }
  if (a3 && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[44] - a1[43]) >> 3) != (a3[1] - *a3) >> 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v30, "out_extras->size() == cfg_.output_extra_tensor_list.size()");
LABEL_22:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30);
  }
}

void sub_1B1AD4BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::quasar::CEInferenceNet::MultiIOFeedforward(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, int a6)
{
  uint64_t v12 = *(void *)(a1 + 496);
  uint64_t v13 = *(int *)(a2 + 16);
  uint64_t v14 = operator new(8uLL);
  std::string __p = v14;
  *uint64_t v14 = v13;
  uint64_t v17 = v14 + 1;
  uint64_t v18 = v14 + 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v12 + 56))(&v19, v12, &__p);
  if (__p)
  {
    uint64_t v17 = __p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t, void, void, void))(*(void *)v19 + 88))(v19, *(void *)(a2 + 8), *(unsigned int *)(a2 + 16), 0);
  kaldi::quasar::CEInferenceNet::MultiIOFeedforward(a1, &v19, a3, a4, a5, a6);
  uint64_t result = v19;
  uint64_t v19 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

{
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  uint64_t v16;

  uint64_t v12 = *(void *)(a1 + 496);
  uint64_t v13 = kaldi::quasar::CEInferenceNet::Shape::Get((kaldi::quasar::CEInferenceNet::Shape *)(a1 + 504), *(int *)(a2 + 20), *(int *)(a2 + 16));
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v12 + 56))(&v16, v12, v13);
  if (*(int *)(a2 + 20) >= 1)
  {
    uint64_t v14 = 0;
    do
    {
      (*(void (**)(uint64_t))(*(void *)v16 + 88))(v16);
      ++v14;
    }
    while (v14 < *(_DWORD *)(a2 + 20));
  }
  kaldi::quasar::CEInferenceNet::MultiIOFeedforward(a1, &v16, a3, a4, a5, a6);
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B1AD4D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1AD4EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CEInferenceNet::MultiIOFeedforward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)a1 + 120))(a1, a2, a3, a4, 0, 0);
}

kaldi::quasar::ComputeEngineBufferItf *kaldi::quasar::CEInferenceNet::MultiIOFeedforward(uint64_t a1, uint64_t a2, void *a3, int32x2_t *a4, uint64_t a5, int a6)
{
  uint64_t v12 = 0;
  kaldi::quasar::CEInferenceNet::MultiIOFeedforward(a1, a2, a3, (uint64_t *)&v12, a5, a6);
  if (*(unsigned char *)(a1 + 485)) {
    kaldi::quasar::CEInferenceNet::ReshapeVectorOutputBuffToMatrix(&v12);
  }
  unsigned int v11 = *(_DWORD *)(a2 + 20);
  kaldi::quasar::CEInferenceNet::CopyToMatrix(a1, &v12, &v11, a4);
  uint64_t result = v12;
  if (v12)
  {
    uint64_t v10 = *(uint64_t (**)(void))(*(void *)v12 + 8);
    return (kaldi::quasar::ComputeEngineBufferItf *)v10();
  }
  return result;
}

void sub_1B1AD4FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEInferenceNet::MultiIOFeedforward(uint64_t a1, uint64_t a2, uint64_t **a3, int32x2_t *a4, uint64_t *a5, int a6)
{
  if (*(_DWORD *)(a2 + 20))
  {
    uint64_t v40 = 0;
    long long v41 = 0;
    unint64_t v42 = 0;
    uint64_t v10 = *a3;
    unsigned int v11 = a3[1];
    if (*a3 != v11)
    {
      do
      {
        uint64_t v12 = *(void *)(a1 + 496);
        uint64_t v13 = kaldi::quasar::CEInferenceNet::Shape::Get((kaldi::quasar::CEInferenceNet::Shape *)(a1 + 504), *(int *)(*v10 + 20), *(int *)(*v10 + 16));
        (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(void *)v12 + 56))(&v48, v12, v13);
        uint64_t v14 = *v10;
        if (*(int *)(*v10 + 20) >= 1)
        {
          int v15 = 0;
          do
          {
            uint64_t v16 = *(void *)(v14 + 8) + 4 * *(_DWORD *)(v14 + 24) * v15;
            unsigned int v17 = *(_DWORD *)(v14 + 16);
            uint64_t v18 = *(uint64_t **)(v14 + 32);
            std::string v43 = (uint64_t *)&unk_1F0A472D0;
            uint64_t v44 = (void ***)v16;
            unint64_t v46 = v18;
            unint64_t v45 = v17;
            (*((void (**)(void **))*v48 + 11))(v48);
            ++v15;
            uint64_t v14 = *v10;
          }
          while (v15 < *(_DWORD *)(*v10 + 20));
        }
        uint64_t v19 = v41;
        if ((unint64_t)v41 >= v42)
        {
          uint64_t v22 = ((uint64_t)v41 - v40) >> 3;
          if ((unint64_t)(v22 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v23 = (uint64_t)(v42 - v40) >> 2;
          if (v23 <= v22 + 1) {
            unint64_t v23 = v22 + 1;
          }
          if (v42 - v40 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v23;
          }
          unint64_t v47 = &v42;
          if (v24) {
            unint64_t v25 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v42, v24);
          }
          else {
            unint64_t v25 = 0;
          }
          uint64_t v26 = (void ***)&v25[v22];
          std::string v43 = v25;
          uint64_t v44 = v26;
          unint64_t v46 = &v25[v24];
          uint64_t v27 = v48;
          uint64_t v48 = 0;
          *uint64_t v26 = v27;
          unint64_t v45 = (unint64_t)(v26 + 1);
          std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(&v40, &v43);
          uint64_t v21 = v41;
          std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((void **)&v43);
        }
        else
        {
          std::string v20 = v48;
          uint64_t v48 = 0;
          char *v41 = v20;
          uint64_t v21 = v19 + 1;
        }
        long long v41 = v21;
        uint64_t v28 = v48;
        uint64_t v48 = 0;
        if (v28) {
          (*((void (**)(void **))*v28 + 1))(v28);
        }
        ++v10;
      }
      while (v10 != v11);
    }
    long long v39 = 0;
    std::string v43 = 0;
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    if (a5)
    {
      uint64_t v29 = a5[1] - *a5;
      long long v30 = a4;
      if (v29)
      {
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::resize((uint64_t *)&v43, v29 >> 3);
        int v31 = 1;
      }
      else
      {
        int v31 = 0;
      }
    }
    else
    {
      int v31 = 0;
      long long v30 = a4;
    }
    kaldi::quasar::CEInferenceNet::MultiIOFeedforward(a1, a2, &v40, (uint64_t *)&v39, (uint64_t)&v43, a6);
    if (*(unsigned char *)(a1 + 485)) {
      kaldi::quasar::CEInferenceNet::ReshapeVectorOutputBuffToMatrix(&v39);
    }
    LODWORD(v48) = *(_DWORD *)(a2 + 20);
    kaldi::quasar::CEInferenceNet::CopyToMatrix(a1, &v39, (unsigned int *)&v48, v30);
    if (v31)
    {
      uint64_t v33 = *a5;
      if (a5[1] != *a5)
      {
        uint64_t v34 = 0;
        unint64_t v35 = 0;
        do
        {
          uint64_t v36 = *(int32x2_t **)(v33 + 8 * v35);
          LODWORD(v48) = *(_DWORD *)(a2 + 20);
          kaldi::quasar::CEInferenceNet::CopyToMatrix(a1, &v43[v34], (unsigned int *)&v48, v36);
          ++v35;
          uint64_t v33 = *a5;
          ++v34;
        }
        while (v35 < (a5[1] - *a5) >> 3);
      }
    }
    uint64_t v48 = (void **)&v43;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v48);
    if (v39) {
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v39 + 8))(v39);
    }
    std::string v43 = &v40;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  }
  else
  {
    uint64_t v32 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 176))(a1, 0);
    kaldi::CuMatrix<float>::Resize(a4, 0, v32, 0, 0);
  }
}

void sub_1B1AD5400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  a20 = (void **)&a15;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  a20 = (void **)&a12;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void *)a1[1];
  unint64_t v4 = ((uint64_t)v3 - *a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 8 * a2;
      while (v3 != (void *)v6)
      {
        uint64_t v8 = *--v3;
        uint64_t v7 = v8;
        *uint64_t v3 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__append(a1, v5);
  }
}

uint64_t kaldi::quasar::CEInferenceNet::IsRnn(kaldi::quasar::CEInferenceNet *this)
{
  return *((unsigned __int8 *)this + 481);
}

uint64_t kaldi::quasar::CEInferenceNet::IsStreamingWithCache(kaldi::quasar::CEInferenceNet *this)
{
  return *((unsigned __int8 *)this + 480);
}

BOOL kaldi::quasar::CEInferenceNet::IsStreamingWithMasking(kaldi::quasar::CEInferenceNet *this)
{
  if (*((char *)this + 271) < 0) {
    uint64_t v1 = *((void *)this + 32);
  }
  else {
    uint64_t v1 = *((unsigned __int8 *)this + 271);
  }
  return v1 != 0;
}

uint64_t kaldi::quasar::CEInferenceNet::IsFofeNet(kaldi::quasar::CEInferenceNet *this)
{
  return *((unsigned __int8 *)this + 482);
}

uint64_t kaldi::quasar::CEInferenceNet::InputDim(kaldi::quasar::CEInferenceNet *this)
{
  return *((unsigned int *)this + 104);
}

uint64_t kaldi::quasar::CEInferenceNet::OutputDim(kaldi::quasar::CEInferenceNet *this, int a2)
{
  uint64_t v2 = 420;
  if (a2) {
    uint64_t v2 = 424;
  }
  return *(unsigned int *)((char *)this + v2);
}

BOOL kaldi::quasar::CEInferenceNet::HasMultiOutputs(kaldi::quasar::CEInferenceNet *this)
{
  return *((void *)this + 43) != *((void *)this + 44);
}

unint64_t kaldi::quasar::CEInferenceNet::SetMaskingsForInputs(kaldi::quasar::CEInferenceNet *this, int a2, int a3)
{
  LODWORD(v4) = a2;
  unint64_t result = (*(uint64_t (**)(kaldi::quasar::CEInferenceNet *))(*(void *)this + 80))(this);
  if (result)
  {
    uint64_t v7 = *((void *)this + 62);
    if (v7)
    {
      if (*((void *)this + 9))
      {
        uint64_t v4 = (int)v4;
      }
      else
      {
        uint64_t v4 = (int)v4;
        if (*((unsigned char *)this + 484))
        {
          uint64_t v8 = operator new(0x10uLL);
          int v15 = v8 + 2;
          uint64_t v16 = v8 + 2;
          *uint64_t v8 = 1;
          v8[1] = (int)v4;
          std::string __p = v8;
          (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v7 + 64))(&v17, v7, &__p);
        }
        else
        {
          uint64_t v9 = operator new(0x10uLL);
          int v15 = v9 + 2;
          uint64_t v16 = v9 + 2;
          *uint64_t v9 = 1;
          v9[1] = (int)v4;
          std::string __p = v9;
          (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v7 + 56))(&v17, v7, &__p);
        }
        uint64_t v10 = v17;
        uint64_t v17 = 0;
        uint64_t v11 = *((void *)this + 9);
        *((void *)this + 9) = v10;
        if (v11)
        {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
          uint64_t v12 = v17;
          uint64_t v17 = 0;
          if (v12) {
            (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
          }
        }
        if (__p)
        {
          int v15 = __p;
          operator delete(__p);
        }
      }
      if (kaldi::quasar::ComputeEngineBufferItf::GetSize(*((kaldi::quasar::ComputeEngineBufferItf **)this + 9)) != v4)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "maskings_->GetSize() == input_frames_length");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      if (kaldi::quasar::ComputeEngineBufferItf::GetSize(*((kaldi::quasar::ComputeEngineBufferItf **)this + 9)) == a3)
      {
        unint64_t v13 = 0;
      }
      else
      {
        unint64_t v13 = 0;
        do
          (*(void (**)(void, uint64_t, unint64_t))(**((void **)this + 9) + 96))(*((void *)this + 9), 1, v13++);
        while (v13 < kaldi::quasar::ComputeEngineBufferItf::GetSize(*((kaldi::quasar::ComputeEngineBufferItf **)this + 9))
                    - a3);
      }
      while (1)
      {
        unint64_t result = kaldi::quasar::ComputeEngineBufferItf::GetSize(*((kaldi::quasar::ComputeEngineBufferItf **)this + 9));
        if (v13 >= result) {
          break;
        }
        (*(void (**)(void, void, unint64_t))(**((void **)this + 9) + 96))(*((void *)this + 9), 0, v13++);
      }
    }
  }
  return result;
}

void sub_1B1AD5848(uint64_t a1, ...)
{
  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::quasar::CEInferenceNet::ResetCachedStates(kaldi::quasar::CEInferenceNet *this)
{
  if (*((unsigned char *)this + 480))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Resetting for streaming cached stateful tensors", 47);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v2);
    }
    kaldi::quasar::CEInferenceNet::InitialCachedStatesInit(this);
  }
}

void sub_1B1AD58C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::InferenceNetItf::FeedforwardSimple(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 96))(a1, a2, a3, 0);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 104))(a1, a2, a3, 0);
}

uint64_t kaldi::InferenceNetItf::MultiIOFeedforwardSimple(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112))();
}

uint64_t kaldi::InferenceNetItf::OutputDim(kaldi::InferenceNetItf *this)
{
  return (*(uint64_t (**)(kaldi::InferenceNetItf *, void))(*(void *)this + 176))(this, 0);
}

kaldi::quasar::CEInferenceNetConfig *kaldi::quasar::CEInferenceNetConfig::CEInferenceNetConfig(kaldi::quasar::CEInferenceNetConfig *this)
{
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((void *)this + 38) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 80) = -1;
  *((void *)this + 39) = -1;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 41, "R,C");
  *((void *)this + 48) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  *((void *)this + 44) = 0;
  *(void *)((char *)this + 374) = 0;
  return this;
}

void sub_1B1AD5A38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = *(void **)(v2 + 288);
  if (v4)
  {
    *(void *)(v2 + 296) = v4;
    operator delete(v4);
  }
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 167) < 0) {
    operator delete(*(void **)(v2 + 144));
  }
  if (*(char *)(v2 + 143) < 0) {
    operator delete(*(void **)(v2 + 120));
  }
  if (*(char *)(v2 + 119) < 0) {
    operator delete(*(void **)(v2 + 96));
  }
  if (*(char *)(v2 + 95) < 0) {
    operator delete(*(void **)(v2 + 72));
  }
  if (*(char *)(v2 + 71) < 0) {
    operator delete(*(void **)(v2 + 48));
  }
  if (*(char *)(v2 + 47) < 0) {
    operator delete(*(void **)(v2 + 24));
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEInferenceNetConfig::~CEInferenceNetConfig(kaldi::quasar::CEInferenceNetConfig *this)
{
  uint64_t v2 = *((void *)this + 48);
  *((void *)this + 48) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 375) < 0) {
    operator delete(*((void **)this + 44));
  }
  if (*((char *)this + 351) < 0) {
    operator delete(*((void **)this + 41));
  }
  uint64_t v3 = (void *)*((void *)this + 36);
  if (v3)
  {
    *((void *)this + 37) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void **)((char *)this + 264);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 240);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 216);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 192);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    unint64_t result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      unint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(std::vector<std::pair<std::string, std::string>> *this, std::string *__str, long long *a3, unint64_t a4)
{
  p_end_cap = &this->__end_cap_;
  std::vector<std::pair<std::string, std::string>>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 4) < a4)
  {
    std::vector<std::pair<std::string,std::string>>::__vdeallocate(this);
    if (a4 > 0x555555555555555) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100](this, v11);
    uint64_t v12 = (std::pair<std::string, std::string> *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)p_end_cap, (long long *)__str, a3, &this->__end_->first);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 4) < a4)
  {
    unint64_t v13 = (std::string *)((char *)__str + 16 * (((char *)this->__end_ - (char *)begin) >> 4));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *>((int)&v17, __str, v13, &begin->first);
    uint64_t v12 = (std::pair<std::string, std::string> *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)p_end_cap, (long long *)v13, a3, &this->__end_->first);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *>((int)&v18, __str, (std::string *)a3, &begin->first);
  int v15 = v14;
  std::vector<std::pair<std::string, std::string>>::pointer end = this->__end_;
  if (end != v14)
  {
    do
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)p_end_cap, (uint64_t)--end);
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_1B1AD5E80(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1AD5E88(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::__vdeallocate(std::vector<std::pair<std::string, std::string>> *this)
{
  std::vector<std::pair<std::string, std::string>>::pointer begin = this->__begin_;
  if (this->__begin_)
  {
    std::vector<std::pair<std::string, std::string>>::pointer end = this->__end_;
    std::vector<std::pair<std::string, std::string>>::pointer v4 = this->__begin_;
    if (end != begin)
    {
      do
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)&this->__end_cap_, (uint64_t)--end);
      while (end != begin);
      std::vector<std::pair<std::string, std::string>>::pointer v4 = this->__begin_;
    }
    this->__end_ = begin;
    operator delete(v4);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  std::vector<std::pair<std::string, std::string>>::pointer v4 = this;
  unint64_t v10 = this;
  unint64_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100](v4, v6);
      v6 += 3;
      std::vector<std::pair<std::string, std::string>>::pointer v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1AD5F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  unint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1B1AD6020(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 48;
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *>(int a1, std::string *__str, std::string *a3, std::string *this)
{
  uint64_t v5 = __str;
  if (__str == a3) {
    return __str;
  }
  long long v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    this += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      long long v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      long long v6 = a3[1];
    }
    if (v5 >= 0) {
      uint64_t v7 = (unsigned __int8 *)a3;
    }
    else {
      uint64_t v7 = *a3;
    }
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0) {
        char v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      }
      else {
        char v9 = *(unsigned __int8 **)(v3 + 8);
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(void *)(v3 + 8))) {
            return v3;
          }
        }
        else
        {
          if (!*(unsigned char *)(v3 + 23)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

uint64_t std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>,std::reverse_iterator<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>*>,std::reverse_iterator<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>*>,std::reverse_iterator<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>,std::reverse_iterator<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>*>,std::reverse_iterator<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>*>,std::reverse_iterator<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 32);
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(a3 - ++*(void *)(result + 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>,std::reverse_iterator<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>,std::reverse_iterator<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  unint64_t v11 = this;
  char v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      char v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B1AD63F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::CuSubVector<float>::Read()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Function is not implemented for this class");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::CuSubVector<float>::~CuSubVector(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A472D0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  JUMPOUT(0x1B3EA8670);
}

void std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a2 + ++*(void *)(result + 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v4 = *(void **)a2;
    operator delete(v4);
  }
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    char v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    char v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
  return v13;
}

void sub_1B1AD66A8(_Unwind_Exception *a1, std::__split_buffer<std::wstring> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - ++*(void *)(result + 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - ++*(void *)(result + 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      unint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        unint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

std::string *std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(std::vector<std::string> *a1, std::string *a2, std::string *a3, long long *a4, uint64_t a5)
{
  unint64_t v5 = a2;
  if (a5 >= 1)
  {
    value = a1->__end_cap_.__value_;
    p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
    long long v10 = value;
    long long v12 = (std::string *)*((void *)p_end_cap - 1);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v12) >> 3)) >= a5)
    {
      uint64_t v20 = (char *)v12 - (char *)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)a2) >> 3)) >= a5)
      {
        uint64_t v21 = (long long *)&a3[a5];
      }
      else
      {
        uint64_t v21 = (long long *)(&a3->__r_.__value_.__l.__data_ + (((char *)v12 - (char *)a2) >> 3));
        a1->__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, v21, a4, *((std::string **)p_end_cap - 1));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<std::string>::__move_range(a1, v5, v12, &v5[a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(a3, (std::string *)v21, v5);
    }
    else
    {
      std::vector<std::string>::pointer begin = a1->__begin_;
      unint64_t v14 = a5 - 0x5555555555555555 * (((char *)v12 - (char *)a1->__begin_) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)begin) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)begin) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      __v.__end_cap_.__value_ = p_end_cap;
      if (v18) {
        uint64_t v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      __v.__first_ = v19;
      __v.__begin_ = v19 + v15;
      __v.__end_ = __v.__begin_;
      __v.__end_cap_.__value_ = &v19[v18];
      std::__split_buffer<std::string>::__construct_at_end_with_size<std::__wrap_iter<std::string*>>((uint64_t)&__v, (long long *)a3, a5);
      unint64_t v5 = std::vector<std::string>::__swap_out_circular_buffer(a1, &__v, v5);
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
    }
  }
  return v5;
}

void sub_1B1AD69D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::wstring> *a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__move_range(std::vector<std::string> *this, std::vector<std::string>::pointer __from_s, std::vector<std::string>::pointer __from_e, std::vector<std::string>::pointer __to)
{
  std::vector<std::string>::pointer end = this->__end_;
  uint64_t v7 = (char *)__from_s + (char *)end - (char *)__to;
  std::vector<std::string>::pointer v8 = end;
  if (v7 < (char *)__from_e)
  {
    unint64_t v9 = (unint64_t)v7;
    std::vector<std::string>::pointer v8 = this->__end_;
    do
    {
      long long v10 = *(_OWORD *)v9;
      v8->__r_.__value_.__r.__words[2] = *(void *)(v9 + 16);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
      ++v8;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)unint64_t v9 = 0;
      v9 += 24;
    }
    while (v9 < (unint64_t)__from_e);
  }
  this->__end_ = v8;
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v11, (uint64_t)__from_s, (uint64_t)v7, (uint64_t)end);
}

void std::__split_buffer<std::string>::__construct_at_end_with_size<std::__wrap_iter<std::string*>>(uint64_t a1, long long *a2, uint64_t a3)
{
  unint64_t v4 = *(std::string **)(a1 + 16);
  if (a3)
  {
    uint64_t v6 = &v4[a3];
    uint64_t v7 = 24 * a3;
    do
    {
      if (*((char *)a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((void *)a2 + 1));
      }
      else
      {
        long long v8 = *a2;
        v4->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v8;
      }
      ++v4;
      a2 = (long long *)((char *)a2 + 24);
      v7 -= 24;
    }
    while (v7);
    unint64_t v4 = v6;
  }
  *(void *)(a1 + 16) = v4;
}

void sub_1B1AD6AF4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

std::vector<std::string>::pointer std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v, std::vector<std::string>::pointer __p)
{
  std::vector<std::string>::pointer begin = __v->__begin_;
  p_end_cap = &this->__end_cap_;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)__p, (uint64_t)__p, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)begin, (uint64_t)begin);
  __v->__begin_ = v8;
  __v->__end_ = (std::__split_buffer<std::string>::pointer)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)__p, (long long *)this->__end_, (uint64_t)__v->__end_);
  unint64_t v9 = this->__begin_;
  this->__begin_ = __v->__begin_;
  __v->__begin_ = v9;
  std::vector<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = a4 - 24;
      if (*(char *)(a4 - 1) < 0) {
        operator delete(*(void **)v7);
      }
      long long v8 = *(_OWORD *)(v6 - 24);
      *(void *)(v7 + 16) = *(void *)(v6 - 8);
      *(_OWORD *)uint64_t v7 = v8;
      *(unsigned char *)(v6 - 1) = 0;
      *(unsigned char *)(v6 - ++*(void *)(result + 24) = 0;
      a4 = v7;
      v6 -= 24;
    }
    while (v6 != a2);
  }
  return a3;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  _DWORD v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      long long v5 = *a2;
      *(void *)(v4 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v4 = v5;
      v4 += 24;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      a2 = (long long *)((char *)a2 + 24);
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    uint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
  return v13;
}

void sub_1B1AD6DC8(_Unwind_Exception *a1, std::__split_buffer<std::wstring> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> *,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> *,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      uint64_t v6 = *v4;
      *unint64_t v4 = 0;
      uint64_t v7 = *a3;
      *a3 = v6;
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      ++v4;
      ++a3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate(void **a1)
{
  if (*a1)
  {
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100](a1);
    operator delete(*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>*>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>*>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>*>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>*>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  uint64_t v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *uint64_t v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    unint64_t v4 = result;
    do
    {
      v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    char v14 = v13;
    long long v15 = &v13[8 * v10];
    uint64_t v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    long long v16 = &v15[8 * a2];
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(&v14);
  }
}

void sub_1B1AD71F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (unint64_t i = *v14; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *unint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v++*(void *)(result + 24) = v26[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1B1AD7488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1B1AD752C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B1AD7608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void quasar::PersonalizedLmData::PersonalizedLmData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (*(char *)(a3 + 23) < 0)
  {
    if (*(void *)(a3 + 8))
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      goto LABEL_7;
    }
  }
  else if (*(unsigned char *)(a3 + 23))
  {
    std::string __p = *(std::string *)a3;
    goto LABEL_7;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "lm-personalize.data");
LABEL_7:
  uint64_t v5 = *a4;
  *a4 = 0;
  void v7[3] = v5;
  std::string::basic_string[abi:ne180100]<0>(v7, "");
  quasar::LmData::LmData();
}

void sub_1B1AD79A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::string __p = (void *)(v16 - 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v15);
  quasar::LmData::~LmData(v14);
  _Unwind_Resume(a1);
}

uint64_t quasar::PersonalizedLmData::addSentence(uint64_t a1, unsigned int *a2, std::string *a3, uint64_t a4, uint64_t a5, int a6, _DWORD *a7)
{
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v60 = *(std::string *)a4;
  }
  unsigned int v59 = 1;
  if (a6)
  {
    if (*(char *)(a4 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else {
      std::string v58 = *(std::string *)a4;
    }
    quasar::LmData::parseCountPhrase(&v58, (uint64_t)&v60, (int *)&v59);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
  }
  unsigned int v14 = *a2;
  if (!*(unsigned char *)(a1 + 996)) {
    goto LABEL_41;
  }
  if (quasar::gLogLevel >= 6)
  {
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"RECEIVED ", 9);
    int v16 = *(char *)(a4 + 23);
    if (v16 >= 0) {
      uint64_t v17 = a4;
    }
    else {
      uint64_t v17 = *(void *)a4;
    }
    if (v16 >= 0) {
      uint64_t v18 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      uint64_t v18 = *(void *)(a4 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
  }
  unint64_t v19 = *(unsigned __int8 *)(a4 + 23);
  if ((v19 & 0x80u) != 0) {
    unint64_t v19 = *(void *)(a4 + 8);
  }
  if (!v19 || *a2 != 3 && (unint64_t v20 = *(unsigned int *)(a1 + 616), v20) && v19 > v20)
  {
    if (quasar::gLogLevel >= 6)
    {
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reject due to sentence length", 29);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
    }
LABEL_41:
    uint64_t v24 = 0;
    *(_DWORD *)(a1 + 60 * v14 + 116) += v59;
    goto LABEL_76;
  }
  if ((a5 & 1) == 0)
  {
    if (!*(unsigned char *)(a1 + 1088)) {
      quasar::LmData::sanitize(a1, (uint64_t)&v60);
    }
    quasar::trim(&v60);
    std::string::size_type size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v60.__r_.__value_.__l.__size_;
    }
    if (!size) {
      goto LABEL_41;
    }
    uint64_t v26 = *(void *)(a1 + 872);
    if (v26)
    {
      (*(void (**)(uint64_t))(*(void *)v26 + 32))(v26);
      (*(void (**)(void, std::string *))(**(void **)(a1 + 872) + 16))(*(void *)(a1 + 872), &v60);
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 872) + 24))(__p);
      if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(void *)(a1 + 360), *(void *)(a1 + 368), (unsigned __int8 **)__p) == *(void *)(a1 + 368))
      {
        *(_DWORD *)(a1 + 60 * v14 + 116) += v59;
        if (SBYTE7(v42) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v24 = 0;
        goto LABEL_76;
      }
      if (SBYTE7(v42) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  std::string __str = 0;
  long long v39 = 0;
  uint64_t v40 = 0;
  uint64_t v21 = quasar::LmData::tokenizeSentence(a1, (uint64_t)&v60, (uint64_t *)&__str);
  if ((v21 & 1) == 0)
  {
LABEL_74:
    uint64_t v24 = 0;
    *(_DWORD *)(a1 + 60 * v14 + 116) += v59;
    goto LABEL_75;
  }
  unint64_t v22 = *(unsigned int *)(a1 + 580);
  if (v22)
  {
    uint64_t v23 = *(unsigned int *)(a1 + 1092);
    if (v23 + (((char *)v39 - (char *)__str) >> 5) > v22)
    {
      uint64_t v24 = 0;
      *(_DWORD *)(a1 + 60 * v14 + 116) += v59;
      *(unsigned char *)(a1 + 996) = 0;
      goto LABEL_75;
    }
    *(_DWORD *)(a1 + 1092) = v23 + ((unint64_t)((char *)v39 - (char *)__str) >> 5);
  }
  unsigned int v27 = *a2;
  if (*a2 == 3)
  {
    uint64_t v28 = __str;
    goto LABEL_53;
  }
  std::string::size_type v29 = *(unsigned int *)(a1 + 620);
  uint64_t v28 = __str;
  if (v29 && __str != v39)
  {
    long long v30 = __str;
    while (1)
    {
      std::string::size_type v31 = SHIBYTE(v30->__r_.__value_.__r.__words[2]) < 0
          ? v30->__r_.__value_.__l.__size_
          : HIBYTE(v30->__r_.__value_.__r.__words[2]);
      if (v31 > v29) {
        break;
      }
      long long v30 = (std::string *)((char *)v30 + 32);
      if (v30 == v39) {
        goto LABEL_53;
      }
    }
    if (quasar::gLogLevel >= 6)
    {
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reject due to token length", 26);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
    }
    goto LABEL_74;
  }
LABEL_53:
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v42 = 0;
  uint64_t v32 = v39;
  if (v28 == v39) {
    goto LABEL_68;
  }
  do
  {
    memset(&v37, 0, sizeof(v37));
    if (*(unsigned char *)(a1 + 1088))
    {
      std::string::operator=(&v37, v28);
    }
    else
    {
      uint64_t v33 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v21);
      uint64_t v21 = quasar::QsrText::encodeTokenQsrTextWithMetadata(v33, v28, &v37);
      if (!v21) {
        goto LABEL_64;
      }
    }
    uint64_t v34 = __p[1];
    if (__p[1] >= (void *)v42)
    {
      uint64_t v21 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)__p, (long long *)&v37);
    }
    else
    {
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p[1], v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v35 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
        *((void *)__p[1] + 2) = *((void *)&v37.__r_.__value_.__l + 2);
        *uint64_t v34 = v35;
      }
      uint64_t v21 = (uint64_t)v34 + 24;
    }
    __p[1] = (void *)v21;
LABEL_64:
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    uint64_t v28 = (std::string *)((char *)v28 + 32);
  }
  while (v28 != v32);
  unsigned int v27 = *a2;
LABEL_68:
  uint64_t v24 = quasar::LmData::addTokenizedSentence(a1, v27, a3, (uint64_t)__p, (_DWORD *)(a1 + 60 * v14 + 108), a5, v59, a7);
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
LABEL_75:
  __p[0] = &__str;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_76:
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  return v24;
}

void sub_1B1AD7FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char *a18, uint64_t a19)
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a18);
  a18 = &a15;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  if (*(char *)(v19 - 89) < 0) {
    operator delete(*(void **)(v19 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::QsrText::SingletonInstance(quasar::QsrText *this)
{
  {
    operator new();
  }
  return quasar::QsrText::SingletonInstance(void)::singletonInstance;
}

void sub_1B1AD810C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A0C408C7BA9F0);
  _Unwind_Resume(a1);
}

void quasar::PersonalizedLmData::addDocument(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  v61[0] = quasar::LmData::hash((void *)a1, a2, 0);
  unsigned int v8 = v61[0];
  if (!*(unsigned char *)(a1 + 996)) {
    goto LABEL_13;
  }
  if (std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>((void *)(a1 + 1048), a4))
  {
    if (quasar::gLogLevel >= 6)
    {
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v46 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v45 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reject due to document type", 27);
LABEL_12:
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
      goto LABEL_13;
    }
    goto LABEL_13;
  }
  unint64_t v9 = *(unsigned __int8 *)(a3 + 23);
  if ((v9 & 0x80u) != 0) {
    unint64_t v9 = *(void *)(a3 + 8);
  }
  if (!v9 || (unint64_t v10 = *(unsigned int *)(a1 + 608), v10) && v9 > v10)
  {
    if (quasar::gLogLevel >= 6)
    {
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v46 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v45 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reject due to document length", 29);
      goto LABEL_12;
    }
LABEL_13:
    ++*(_DWORD *)(a1 + 60 * v8 + 112);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\n");
  quasar::splitAndTrimNoEmpty((const std::string *)a3, (char *)__p, &v42);
  if (SBYTE7(v45) < 0) {
    operator delete(__p[0]);
  }
  long long v39 = 0;
  uint64_t v40 = 0;
  unint64_t v41 = 0;
  unint64_t v11 = *(unsigned int *)(a1 + 612);
  if (v11 && 0xAAAAAAAAAAAAAAABLL * ((v43 - v42) >> 3) > v11)
  {
    if (quasar::gLogLevel >= 6)
    {
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v46 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v45 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reject due to sentences per document", 36);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
    }
    goto LABEL_47;
  }
  if (*(_DWORD *)(a1 + 584)) {
    quasar::PersonalizedLmData::getEstimatedNumTokens();
  }
  uint64_t v12 = v42;
  for (uint64_t i = v43; v12 != i; v12 += 24)
  {
    if (!*(unsigned char *)(a1 + 1088)) {
      quasar::LmData::sanitize(a1, v12);
    }
    quasar::trim((std::string *)v12);
    if (*(char *)(v12 + 23) < 0)
    {
      if (*(void *)(v12 + 8))
      {
LABEL_27:
        unsigned int v14 = v40;
        if ((unint64_t)v40 >= v41)
        {
          int v16 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v39, (long long *)v12);
        }
        else
        {
          if ((*(unsigned char *)(v12 + 23) & 0x80) != 0)
          {
            std::string::__init_copy_ctor_external(v40, *(const std::string::value_type **)v12, *(void *)(v12 + 8));
          }
          else
          {
            long long v15 = *(_OWORD *)v12;
            v40->__r_.__value_.__r.__words[2] = *(void *)(v12 + 16);
            *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
          }
          int v16 = v14 + 1;
        }
        uint64_t v40 = v16;
        continue;
      }
    }
    else if (*(unsigned char *)(v12 + 23))
    {
      goto LABEL_27;
    }
    ++*(_DWORD *)(a1 + 60 * v8 + 116);
  }
  if (v39 != v40)
  {
    uint64_t v17 = *(void *)(a1 + 872);
    if (v17)
    {
      (*(void (**)(uint64_t))(*(void *)v17 + 32))(v17);
      uint64_t v18 = *(void *)(a1 + 872);
      v37.__r_.__value_.__r.__words[0] = (std::string::size_type)" ";
      v37.__r_.__value_.__l.__size_ = 1;
      quasar::join<std::vector<std::string>>((uint64_t *)&v39, (uint64_t *)&v37);
      (*(void (**)(uint64_t, void **))(*(void *)v18 + 16))(v18, __p);
      if (SBYTE7(v45) < 0) {
        operator delete(__p[0]);
      }
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 872) + 24))(__p);
      if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(void *)(a1 + 360), *(void *)(a1 + 368), (unsigned __int8 **)__p) == *(void *)(a1 + 368))
      {
        ++*(_DWORD *)(a1 + 60 * v8 + 112);
        if (SBYTE7(v45) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_86;
      }
      if (SBYTE7(v45) < 0) {
        operator delete(__p[0]);
      }
    }
    ++*(_DWORD *)(a1 + 60 * v8 + 124);
    if (*a4 == 2)
    {
      uint64_t v19 = (_DWORD *)(a1 + 60 * v8 + 152);
    }
    else
    {
      if (*a4 != 1)
      {
LABEL_50:
        unint64_t v20 = v39;
        uint64_t v21 = v40;
        if (v39 == v40) {
          goto LABEL_86;
        }
        int v22 = 0;
        uint64_t v23 = a1 + 60 * v8;
        long long v35 = (_DWORD *)(v23 + 160);
        uint64_t v24 = (_DWORD *)(v23 + 156);
        unint64_t v25 = (_DWORD *)(v23 + 116);
        while (1)
        {
          if (!*(unsigned char *)(a1 + 996))
          {
            ++*v25;
            goto LABEL_82;
          }
          int v38 = 0;
          if (*(char *)(a2 + 23) >= 0) {
            size_t v26 = *(unsigned __int8 *)(a2 + 23);
          }
          else {
            size_t v26 = *(void *)(a2 + 8);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v37, v26 + 1);
          if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned int v27 = &v37;
          }
          else {
            unsigned int v27 = (std::string *)v37.__r_.__value_.__r.__words[0];
          }
          if (v26)
          {
            if (*(char *)(a2 + 23) >= 0) {
              uint64_t v28 = (const void *)a2;
            }
            else {
              uint64_t v28 = *(const void **)a2;
            }
            memmove(v27, v28, v26);
          }
          *(_WORD *)((char *)&v27->__r_.__value_.__l.__data_ + v26) = 95;
          std::to_string(&v36, ++v22);
          if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v29 = &v36;
          }
          else {
            std::string::size_type v29 = (std::string *)v36.__r_.__value_.__r.__words[0];
          }
          if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v36.__r_.__value_.__l.__size_;
          }
          std::string::size_type v31 = std::string::append(&v37, (const std::string::value_type *)v29, size);
          long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
          *(void *)&long long v45 = *((void *)&v31->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v32;
          v31->__r_.__value_.__l.__size_ = 0;
          v31->__r_.__value_.__r.__words[2] = 0;
          v31->__r_.__value_.__r.__words[0] = 0;
          int v33 = (*(uint64_t (**)(uint64_t, _DWORD *, void **, std::string *, uint64_t, void, int *))(*(void *)a1 + 24))(a1, v61, __p, v20, 1, 0, &v38);
          if (SBYTE7(v45) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v36.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v37.__r_.__value_.__l.__data_);
          }
          if (!v33) {
            goto LABEL_82;
          }
          uint64_t v34 = v24;
          if (*a4 == 1) {
            goto LABEL_80;
          }
          if (*a4 == 2) {
            break;
          }
LABEL_82:
          if (++v20 == v21) {
            goto LABEL_86;
          }
        }
        uint64_t v34 = v35;
LABEL_80:
        *v34 += v38;
        goto LABEL_82;
      }
      uint64_t v19 = (_DWORD *)(a1 + 60 * v8 + 148);
    }
    ++*v19;
    goto LABEL_50;
  }
LABEL_47:
  ++*(_DWORD *)(a1 + 60 * v8 + 112);
LABEL_86:
  __p[0] = &v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B1AD87D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  std::string __p = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::PersonalizedLmData::getEstimatedNumTokens()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v1 = 0;
  operator new();
}

void sub_1B1AD8AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, long long a20,long long a21,long long a22,long long a23,long long a24)
{
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a20);
  if (a2 == 1)
  {
    unsigned int v27 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1)
    {
      uint64_t v28 = v27;
      v24[15] = 0u;
      v24[16] = 0u;
      v24[13] = 0u;
      v24[14] = 0u;
      v24[11] = 0u;
      v24[12] = 0u;
      v24[9] = 0u;
      v24[10] = 0u;
      v24[7] = 0u;
      v24[8] = 0u;
      v24[5] = 0u;
      v24[6] = 0u;
      a23 = 0u;
      a24 = 0u;
      a21 = 0u;
      a22 = 0u;
      a20 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a20);
      std::string::size_type v29 = (const char *)(*(uint64_t (**)(void *))(*(void *)v28 + 16))(v28);
      size_t v30 = strlen(v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a20, (uint64_t)v29, v30);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a20);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B1AD8A64);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::join<std::vector<std::string>>(uint64_t *a1, uint64_t *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::vector<std::string>>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v9);
}

void sub_1B1AD8D3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::PersonalizedLmData::loadFromTextFile(uint64_t a1)
{
  *(unsigned char *)(a1 + 1088) = 1;
  quasar::LmData::loadFromTextFile();
}

void quasar::PersonalizedLmData::~PersonalizedLmData(quasar::PersonalizedLmData *this)
{
  *(void *)this = &unk_1F0A540B8;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 1048);
  quasar::LmData::~LmData(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A540B8;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 1048);
  quasar::LmData::~LmData(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::LmData::countOovLme(quasar::LmData *this)
{
  return 1;
}

void quasar::QuasarWarnMessage::~QuasarWarnMessage(quasar::QuasarWarnMessage *this)
{
  uint64_t v2 = quasar::QuasarWarnMessage::logger;
  std::stringbuf::str();
  ((void (*)(std::string *, void))v2)(&__p, *((void *)this + 33));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (getenv("QSR_CRASH_ON_WARN"))
  {
    if (std::uncaught_exception()) {
      abort();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v3 = MEMORY[0x1E4FBA418];
  uint64_t v4 = *MEMORY[0x1E4FBA418];
  *(void *)this = *MEMORY[0x1E4FBA418];
  *(void *)((char *)this + *(void *)(v4 - 24)) = *(void *)(v3 + 24);
  *((void *)this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520]((char *)this + 112);
}

void sub_1B1AD8FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      quasar::QuasarMessage::~QuasarMessage(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void quasar::QuasarTraceMessage::~QuasarTraceMessage(quasar::QuasarTraceMessage *this)
{
  uint64_t v2 = (void (*)(uint64_t))quasar::QuasarTraceMessage::logger;
  std::stringbuf::str();
  v2((uint64_t)&__p);
  if (v6 < 0) {
    operator delete(__p);
  }
  uint64_t v3 = MEMORY[0x1E4FBA418];
  uint64_t v4 = *MEMORY[0x1E4FBA418];
  *(void *)this = *MEMORY[0x1E4FBA418];
  *(void *)((char *)this + *(void *)(v4 - 24)) = *(void *)(v3 + 24);
  *((void *)this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520]((char *)this + 112);
}

void std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>::~codecvt_utf8[abi:ne180100](std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(uint64_t a1@<X0>, int *a2@<X1>, int *a3@<X2>, std::basic_string<char32_t> *a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 184) = 0;
  if (!*(void *)(a1 + 48)) {
    goto LABEL_23;
  }
  uint64_t v7 = a2;
  std::basic_string<char32_t>::basic_string[abi:ne180100](a4, 2 * ((char *)a3 - (char *)a2), 0);
  if (a3 != v7)
  {
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::basic_string<char32_t>::size_type v8 = 4;
    }
    else {
      std::basic_string<char32_t>::size_type v8 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    std::basic_string<char32_t>::resize(a4, v8, 0);
    long long v9 = *(_OWORD *)(a1 + 136);
    v30[4] = *(_OWORD *)(a1 + 120);
    v30[5] = v9;
    long long v10 = *(_OWORD *)(a1 + 168);
    v30[6] = *(_OWORD *)(a1 + 152);
    v30[7] = v10;
    long long v11 = *(_OWORD *)(a1 + 72);
    v30[0] = *(_OWORD *)(a1 + 56);
    v30[1] = v11;
    __n128 v12 = *(__n128 *)(a1 + 88);
    long long v13 = *(_OWORD *)(a1 + 104);
    std::basic_string<char32_t>::size_type size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      long long v15 = (char *)a4;
    }
    else {
      long long v15 = (char *)a4->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::basic_string<char32_t>::size_type size = a4->__r_.__value_.__l.__size_;
    }
    int v16 = &v15[4 * size];
    v30[2] = *(_OWORD *)(a1 + 88);
    v30[3] = v13;
    do
    {
      int v17 = (*(uint64_t (**)(void, _OWORD *, int *, int *, int **, char *, char *, uint64_t *, __n128))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), v30, v7, a3, &v29, v15, v16, &v28, v12);
      BOOL v18 = v29 == v7;
      *(void *)(a1 + 184) += (char *)v29 - (char *)v7;
      if (v18) {
        goto LABEL_34;
      }
      if (v17 != 1)
      {
        if (v17)
        {
          if (v17 != 3)
          {
LABEL_34:
            if ((*((unsigned char *)&a4->__r_.__value_.__s + 23) & 0x80) != 0) {
              goto LABEL_35;
            }
            goto LABEL_23;
          }
          if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v25 = (char *)a4;
          }
          else {
            unint64_t v25 = (char *)a4->__r_.__value_.__r.__words[0];
          }
          std::basic_string<char32_t>::resize(a4, (v15 - v25) >> 2, 0);
          std::basic_string<char32_t>::append<char32_t const*,0>(a4, v7, a3);
        }
        else
        {
          if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned int v27 = a4;
          }
          else {
            unsigned int v27 = (std::basic_string<char32_t> *)a4->__r_.__value_.__r.__words[0];
          }
          std::basic_string<char32_t>::resize(a4, (v28 - (uint64_t)v27) >> 2, 0);
        }
        return;
      }
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v19 = a4;
      }
      else {
        uint64_t v19 = (std::basic_string<char32_t> *)a4->__r_.__value_.__r.__words[0];
      }
      uint64_t v20 = v28 - (void)v19;
      std::basic_string<char32_t>::resize(a4, (v28 - (uint64_t)v19) >> 1, 0);
      std::basic_string<char32_t>::size_type v21 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      char v22 = v21;
      uint64_t v23 = (std::basic_string<char32_t> *)a4->__r_.__value_.__r.__words[0];
      if ((v21 & 0x80u) == 0) {
        uint64_t v23 = a4;
      }
      long long v15 = (char *)v23 + v20;
      if ((v21 & 0x80u) != 0) {
        std::basic_string<char32_t>::size_type v21 = a4->__r_.__value_.__l.__size_;
      }
      int v16 = (char *)v23 + 4 * v21;
      uint64_t v7 = v29;
    }
    while (v29 < a3);
    if ((v22 & 0x80) == 0) {
      goto LABEL_23;
    }
LABEL_35:
    operator delete(a4->__r_.__value_.__l.__data_);
LABEL_23:
    uint64_t v24 = (const std::wstring::value_type **)(a1 + 24);
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    {
      if (*(unsigned char *)(a1 + 47))
      {
        *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)v24;
        a4->__r_.__value_.__r.__words[2] = *(void *)(a1 + 40);
        return;
      }
LABEL_41:
      std::__throw_range_error[abi:ne180100]("wstring_convert: from_bytes error");
    }
    std::wstring::size_type v26 = *(void *)(a1 + 32);
    if (!v26) {
      goto LABEL_41;
    }
    std::basic_string<char32_t>::__init_copy_ctor_external((std::wstring *)a4, *v24, v26);
  }
}

void sub_1B1AD94C0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::basic_string<char32_t> *std::basic_string<char32_t>::append<char32_t const*,0>(std::basic_string<char32_t> *this, int *a2, int *a3)
{
  uint64_t v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    uint64_t v7 = (char *)a3 - (char *)a2;
    if (a3 == a2) {
      return this;
    }
    std::basic_string<char32_t>::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::basic_string<char32_t>::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    long long v10 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    uint64_t v7 = (char *)a3 - (char *)a2;
    if (a3 == a2) {
      return this;
    }
    std::basic_string<char32_t>::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::basic_string<char32_t>::size_type v9 = 4;
    long long v10 = this;
  }
  unint64_t v12 = v7 >> 2;
  if (v10 > (std::basic_string<char32_t> *)v4 || (char *)v10->__r_.__value_.__r.__words + 4 * size + 4 <= (char *)v4)
  {
    if (v9 - size < v12)
    {
      std::basic_string<char32_t>::__grow_by(this, v9, size - v9 + v12, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    long long v15 = this;
    if ((v6 & 0x80) != 0) {
      long long v15 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
    }
    int v16 = (int *)((char *)v15 + 4 * size);
    while (v4 != a3)
    {
      int v17 = *v4++;
      *v16++ = v17;
    }
    *int v16 = 0;
    std::basic_string<char32_t>::size_type v18 = v12 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v18;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v18 & 0x7F;
    }
  }
  else
  {
    std::basic_string<char32_t>::__init_with_size[abi:ne180100]<char32_t const*,char32_t const*>(__p, v4, a3, v12);
    if ((v21 & 0x80u) == 0) {
      long long v13 = __p;
    }
    else {
      long long v13 = (void **)__p[0];
    }
    if ((v21 & 0x80u) == 0) {
      std::basic_string<char32_t>::size_type v14 = v21;
    }
    else {
      std::basic_string<char32_t>::size_type v14 = (std::basic_string<char32_t>::size_type)__p[1];
    }
    std::basic_string<char32_t>::append(this, (const std::basic_string<char32_t>::value_type *)v13, v14);
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_1B1AD9650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_range_error[abi:ne180100](const char *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::range_error::range_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5FFDF10, MEMORY[0x1E4FBA1B8]);
}

void sub_1B1AD96B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::basic_string<char32_t>::basic_string[abi:ne180100](void *a1, unint64_t a2, int a3)
{
  uint64_t v3 = a1;
  if (a2 >= 0x3FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 >= 5)
  {
    uint64_t v6 = (a2 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((a2 | 1) != 5) {
      uint64_t v6 = a2 | 1;
    }
    a1 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)a1, v6 + 1);
    v3[1] = a2;
    v3[2] = v7 | 0x8000000000000000;
    *uint64_t v3 = a1;
  }
  else
  {
    *((unsigned char *)a1 + 23) = a2;
    if (!a2) {
      goto LABEL_10;
    }
  }
  uint64_t v8 = 0;
  do
    *((_DWORD *)a1 + v8++) = a3;
  while (a2 != v8);
LABEL_10:
  *((_DWORD *)a1 + a2) = 0;
  return v3;
}

void std::basic_string<char32_t>::resize(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __n, std::basic_string<char32_t>::value_type __c)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::basic_string<char32_t>::size_type size = this->__r_.__value_.__l.__size_;
    if (size >= __n)
    {
      this->__r_.__value_.__l.__size_ = __n;
      this = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
LABEL_5:
    std::basic_string<char32_t>::append(this, __n - size, __c);
    return;
  }
  std::basic_string<char32_t>::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (size < __n) {
    goto LABEL_5;
  }
  *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_7:
  this->__r_.__value_.__s.__data_[__n] = 0;
}

std::basic_string<char32_t> *__cdecl std::basic_string<char32_t>::append(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __n, std::basic_string<char32_t>::value_type __c)
{
  if (__n)
  {
    LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v6 & 0x80000000) != 0)
    {
      std::basic_string<char32_t>::size_type size = this->__r_.__value_.__l.__size_;
      unint64_t v9 = this->__r_.__value_.__r.__words[2];
      std::basic_string<char32_t>::size_type v8 = (v9 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      unint64_t v6 = HIBYTE(v9);
    }
    else
    {
      std::basic_string<char32_t>::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      std::basic_string<char32_t>::size_type v8 = 4;
    }
    if (v8 - size < __n)
    {
      std::basic_string<char32_t>::__grow_by(this, v8, __n - v8 + size, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    long long v10 = this;
    if ((v6 & 0x80) != 0) {
      long long v10 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
    }
    unint64_t v11 = (std::basic_string<char32_t>::value_type *)((char *)v10 + 4 * size);
    std::basic_string<char32_t>::size_type v12 = __n;
    do
    {
      *v11++ = __c;
      --v12;
    }
    while (v12);
    std::basic_string<char32_t>::size_type v13 = size + __n;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v13;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v13 & 0x7F;
    }
    v10->__r_.__value_.__s.__data_[v13] = 0;
  }
  return this;
}

void std::basic_string<char32_t>::__grow_by(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __old_cap, std::basic_string<char32_t>::size_type __delta_cap, std::basic_string<char32_t>::size_type __old_sz, std::basic_string<char32_t>::size_type __n_copy, std::basic_string<char32_t>::size_type __n_del, std::basic_string<char32_t>::size_type __n_add)
{
  if (0x3FFFFFFFFFFFFFF7 - __old_cap < __delta_cap) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::basic_string<char32_t>::size_type v13 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::basic_string<char32_t>::size_type v13 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
  }
  std::basic_string<char32_t>::size_type v14 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap) {
    std::basic_string<char32_t>::size_type v14 = 2 * __old_cap;
  }
  uint64_t v15 = (v14 & 0xFFFFFFFFFFFFFFFELL) + 2;
  if ((v14 | 1) != 5) {
    uint64_t v15 = v14 | 1;
  }
  if (v14 >= 5) {
    uint64_t v16 = v15 + 1;
  }
  else {
    uint64_t v16 = 5;
  }
  if (__old_cap <= 0x1FFFFFFFFFFFFFF2) {
    unint64_t v17 = v16;
  }
  else {
    unint64_t v17 = 0x3FFFFFFFFFFFFFF7;
  }
  std::basic_string<char32_t>::size_type v18 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this, v17);
  std::basic_string<char32_t>::size_type v19 = (std::basic_string<char32_t>::size_type)v18;
  uint64_t v21 = v20;
  if (__n_copy) {
    memmove(v18, v13, 4 * __n_copy);
  }
  if (__old_sz != __n_del + __n_copy) {
    memmove((void *)(v19 + 4 * __n_copy + 4 * __n_add), (char *)v13 + 4 * __n_copy + 4 * __n_del, 4 * (__old_sz - (__n_del + __n_copy)));
  }
  if (__old_cap != 4) {
    operator delete(v13);
  }
  this->__r_.__value_.__r.__words[0] = v19;
  this->__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
}

std::basic_string<char32_t> *__cdecl std::basic_string<char32_t>::append(std::basic_string<char32_t> *this, const std::basic_string<char32_t>::value_type *__s, std::basic_string<char32_t>::size_type __n)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::basic_string<char32_t>::size_type size = this->__r_.__value_.__l.__size_;
    std::basic_string<char32_t>::size_type v6 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else
  {
    std::basic_string<char32_t>::size_type v6 = 4;
    std::basic_string<char32_t>::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (v6 - size >= __n)
  {
    if (__n)
    {
      std::basic_string<char32_t>::size_type v8 = this;
      if ((*((unsigned char *)&this->__r_.__value_.__s + 23) & 0x80) != 0) {
        std::basic_string<char32_t>::size_type v8 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
      }
      memmove((char *)v8 + 4 * size, __s, 4 * __n);
      std::basic_string<char32_t>::size_type v9 = size + __n;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
        this->__r_.__value_.__l.__size_ = v9;
      }
      else {
        *((unsigned char *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
      }
      v8->__r_.__value_.__s.__data_[v9] = 0;
    }
  }
  else
  {
    std::basic_string<char32_t>::__grow_by_and_replace(this, v6, __n - v6 + size, size, size, 0, __n, __s);
  }
  return this;
}

void *std::basic_string<char32_t>::__init_with_size[abi:ne180100]<char32_t const*,char32_t const*>(void *result, int *a2, int *a3, unint64_t a4)
{
  uint64_t v4 = result;
  if (a4 >= 0x3FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 4)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((a4 | 1) != 5) {
      uint64_t v8 = a4 | 1;
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)result, v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *uint64_t v4 = result;
    uint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    int v10 = *a2++;
    *(_DWORD *)uint64_t v4 = v10;
    uint64_t v4 = (void *)((char *)v4 + 4);
  }
  *(_DWORD *)uint64_t v4 = 0;
  return result;
}

void std::basic_string<char32_t>::__grow_by_and_replace(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __old_cap, std::basic_string<char32_t>::size_type __delta_cap, std::basic_string<char32_t>::size_type __old_sz, std::basic_string<char32_t>::size_type __n_copy, std::basic_string<char32_t>::size_type __n_del, std::basic_string<char32_t>::size_type __n_add, const std::basic_string<char32_t>::value_type *__p_new_stuff)
{
  if (0x3FFFFFFFFFFFFFF6 - __old_cap < __delta_cap) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v15 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    uint64_t v15 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
  }
  std::basic_string<char32_t>::size_type v16 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap) {
    std::basic_string<char32_t>::size_type v16 = 2 * __old_cap;
  }
  uint64_t v17 = (v16 & 0xFFFFFFFFFFFFFFFELL) + 2;
  if ((v16 | 1) != 5) {
    uint64_t v17 = v16 | 1;
  }
  if (v16 >= 5) {
    uint64_t v18 = v17 + 1;
  }
  else {
    uint64_t v18 = 5;
  }
  if (__old_cap > 0x1FFFFFFFFFFFFFF2) {
    unint64_t v19 = 0x3FFFFFFFFFFFFFF7;
  }
  else {
    unint64_t v19 = v18;
  }
  uint64_t v20 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this, v19);
  std::basic_string<char32_t>::size_type v21 = (std::basic_string<char32_t>::size_type)v20;
  uint64_t v23 = v22;
  if (__n_copy) {
    memmove(v20, v15, 4 * __n_copy);
  }
  if (__n_add) {
    memmove((void *)(v21 + 4 * __n_copy), __p_new_stuff, 4 * __n_add);
  }
  std::basic_string<char32_t>::size_type v24 = __old_sz - (__n_del + __n_copy);
  if (v24) {
    memmove((void *)(v21 + 4 * __n_copy + 4 * __n_add), (char *)v15 + 4 * __n_copy + 4 * __n_del, 4 * v24);
  }
  if (__old_cap != 4) {
    operator delete(v15);
  }
  std::basic_string<char32_t>::size_type v25 = __n_add + __n_copy + v24;
  this->__r_.__value_.__r.__words[0] = v21;
  this->__r_.__value_.__l.__size_ = v25;
  this->__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
  *(_DWORD *)(v21 + 4 * v25) = 0;
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA4B8] + 16);
  return result;
}

void std::basic_string<char32_t>::__init_copy_ctor_external(std::wstring *this, const std::wstring::value_type *__s, std::wstring::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 4)
  {
    if (__sz >= 0x3FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::wstring::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((__sz | 1) != 5) {
      std::wstring::size_type v6 = __sz | 1;
    }
    uint64_t v7 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this, v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v7;
    uint64_t v5 = v7;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, 4 * __sz + 4);
}

void *std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::__emplace_unique_key_args<quasar::PersonalizedLmData::DocumentType,quasar::PersonalizedLmData::DocumentType>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  int v10 = operator new(0x18uLL);
  *int v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *int v10 = *v19;
LABEL_38:
    *unint64_t v19 = v10;
    goto LABEL_39;
  }
  *int v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    unint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1B1AD9F38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void *quasar::joinToStream<std::vector<std::string>>(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    unint64_t v6 = result;
    char v7 = 1;
    do
    {
      if ((v7 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      }
      int v8 = *(char *)(v3 + 23);
      if (v8 >= 0) {
        uint64_t v9 = v3;
      }
      else {
        uint64_t v9 = *(void *)v3;
      }
      if (v8 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(v3 + 23);
      }
      else {
        uint64_t v10 = *(void *)(v3 + 8);
      }
      uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v9, v10);
      char v7 = 0;
      v3 += 24;
    }
    while (v3 != v4);
  }
  return result;
}

unint64_t fst::ClosureProperties(unint64_t this, unint64_t a2, int a3)
{
  uint64_t v3 = 0x258200010007;
  if (a3) {
    uint64_t v3 = 0x10200010004;
  }
  if ((a3 & ((this & 0x10000000000) == 0)) == 0) {
    v3 |= 0xA01A02A0000uLL;
  }
  return v3 & this;
}

unint64_t fst::ComposeProperties(unint64_t this, uint64_t a2)
{
  uint64_t v2 = (a2 | this) & 4;
  unint64_t v3 = a2 & this;
  unint64_t v4 = a2 & this & 0x2802010000 | v2 | 0x10000000000;
  if ((a2 & this & 0x2000000) != 0) {
    v4 |= a2 & this & 0x40000;
  }
  uint64_t v5 = v3 & 0x280A800000 | v2 | 0x10000010000;
  if ((v3 & 0x2000000) != 0) {
    v5 |= v3 & 0x140000;
  }
  if ((v3 & 0x10000) != 0) {
    return v5;
  }
  else {
    return v4;
  }
}

unint64_t fst::ConcatProperties(unint64_t this, uint64_t a2, int a3)
{
  unint64_t v3 = a2 & 0x208000000000 | this & 0x20B000000003;
  if (a3) {
    unint64_t v3 = 0;
  }
  unint64_t v4 = (a2 | this) & 4 | this & a2 & 0xA00010000 | v3;
  if ((a3 & ((this & 0x10000000000) == 0)) != 0) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = this & 0xA05A56A0000;
  }
  unint64_t v6 = v4 | v5;
  if ((~this & 0x50000000000) != 0) {
    int v7 = 1;
  }
  else {
    int v7 = a3;
  }
  if (v7) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = a2 & 0xF05A56A0000;
  }
  return v6 | v8;
}

unint64_t fst::DeterminizeProperties(unint64_t this, int a2, int a3)
{
  if ((this & 0x10000) != 0
    || ((this & 0x2000000) == 0 ? (v3 = a2 ^ 1) : (v3 = 0), (uint64_t v4 = 0x10000000000, (v3 & 1) == 0) && a3))
  {
    uint64_t v4 = 0x10000040000;
  }
  unint64_t v5 = (this >> 25) & 1;
  unint64_t v6 = this & 0x800000;
  if ((v5 & a3) == 0) {
    unint64_t v6 = 0;
  }
  unint64_t v7 = this & ((uint64_t)(this << 23) >> 63) & 0x405000000 | this & 0x142800010004 | this & ((int)(this << 15) >> 31) & 0xA000000 | v6 | v4;
  if ((v5 & a2) != 0) {
    return v7 | 0x2000000;
  }
  else {
    return v7;
  }
}

unint64_t fst::FactorWeightProperties(unint64_t this)
{
  uint64_t v1 = 0x50CA56B0007;
  if ((this & 0x10000000000) == 0) {
    uint64_t v1 = 0x50800010007;
  }
  return v1 & this;
}

unint64_t fst::InvertProperties(unint64_t this)
{
  return this & 0x3FFF00C30007 | (((this >> 18) & 3) << 20) & 0xFFFFFFFF33FFFFFFLL | (this >> 2) & 0xC0000 | (((this >> 24) & 3) << 26) & 0xFFFFFFFF3FFFFFFFLL | (this >> 2) & 0x3000000 | (((this >> 28) & 3) << 30) | (this >> 2) & 0x30000000;
}

unint64_t fst::ProjectProperties(unint64_t this, int a2)
{
  unint64_t v2 = this & 0x3FFF00000007 | 0x10000;
  unint64_t v3 = (this >> 2) & 0xC0000 | this & 0xCC300000 | v2;
  if ((this & 0x4000000) != 0) {
    v3 |= 0x1400000uLL;
  }
  if ((this & 0x8000000) != 0) {
    v3 |= 0x2800000uLL;
  }
  unint64_t v4 = (this >> 2) & 0x30000000 | v3;
  unint64_t v5 = this & 0x330C0000 | (((this >> 18) & 3) << 20) | v2;
  if ((this & 0x1000000) != 0) {
    v5 |= 0x4400000uLL;
  }
  if ((this & 0x2000000) != 0) {
    v5 |= 0x8800000uLL;
  }
  unint64_t v6 = (4 * this) & 0xC0000000 | v5;
  if (a2) {
    return v6;
  }
  else {
    return v4;
  }
}

uint64_t fst::RandGenProperties(fst *this, int a2)
{
  if (a2) {
    return this & 0x5A950004 | 0x16800000000;
  }
  else {
    return this & 0x50010004 | 0x12A00000000;
  }
}

uint64_t fst::ReplaceProperties(uint64_t **a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  unint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  uint64_t v8 = (char *)v7 - (char *)*a1;
  if (v7 == *a1) {
    return 0x156A5A950000;
  }
  uint64_t v9 = 0;
  unint64_t v10 = v8 >> 3;
  if (v10 <= 1) {
    unint64_t v10 = 1;
  }
  unint64_t v11 = *a1;
  unint64_t v12 = v10;
  do
  {
    uint64_t v13 = *v11++;
    v9 |= v13 & 4;
    --v12;
  }
  while (v12);
  uint64_t v14 = 0x50000000000;
  if (!a6) {
    uint64_t v14 = 0;
  }
  unint64_t v15 = *a1;
  unint64_t v16 = v10;
  do
  {
    uint64_t v17 = *v15++;
    v14 &= v17;
    --v16;
  }
  while (v16);
  if (v14 == 0x50000000000)
  {
    uint64_t v18 = 0;
    LOBYTE(v19) = 1;
    unint64_t v20 = *a1;
    unint64_t v21 = v10;
    do
    {
      uint64_t v23 = *v20++;
      uint64_t v22 = v23;
      uint64_t v24 = v23 & 0x20000;
      if (!a5) {
        uint64_t v24 = 0;
      }
      v18 |= v22 & 0x208505680000 | v24;
      int v19 = ((v22 & 0x100000000000) != 0) & v19;
      --v21;
    }
    while (v21);
    BOOL v25 = v19 == 0;
    uint64_t v26 = 0x50000000000;
    if (!v25) {
      uint64_t v26 = 0x150000000000;
    }
    v9 |= v6[a2] & 0x1000000000 | v26 | v18;
  }
  int v27 = (a3 | a4) ^ 1;
  int v28 = a4 & ~a3;
  LOBYTE(v29) = a5 ^ 1;
  LOBYTE(v30) = 1;
  uint64_t v31 = (unint64_t *)v6;
  uint64_t v32 = a2;
  LOBYTE(v33) = 1;
  do
  {
    unint64_t v34 = *v31++;
    int v29 = BYTE2(v34) & 1 & v29;
    uint64_t v35 = (v34 >> 18) & 1;
    uint64_t v36 = (v34 >> 25) & 1;
    v27 &= v36;
    int v33 = ((v34 & 0x800000000) != 0) & v33;
    int v30 = ((v34 & 0x200000000) != 0) & v30;
    if (v32) {
      int v37 = v36;
    }
    else {
      int v37 = 1;
    }
    v28 &= v37 & v35;
    --v32;
    --v10;
  }
  while (v10);
  if (v29) {
    v9 |= 0x10000uLL;
  }
  if (v28) {
    v9 |= 0x40000uLL;
  }
  if (v27) {
    v9 |= 0x2000000uLL;
  }
  if (v33) {
    v9 |= 0x800000000uLL;
  }
  if (v30) {
    v9 |= 0x200000000uLL;
  }
  return v6[a2] & 0x2000000000 | v9;
}

unint64_t fst::RelabelProperties(unint64_t this)
{
  return this & 0x3FFF00000007;
}

unint64_t fst::ReverseProperties(unint64_t this, int a2)
{
  uint64_t v2 = 0xE05430007;
  if (a2) {
    uint64_t v2 = 0xF05430007;
  }
  return v2 & this;
}

unint64_t fst::ReweightProperties(unint64_t this)
{
  return this & 0x3BFCFFFF0007;
}

unint64_t fst::RmEpsilonProperties(unint64_t this, int a2)
{
  uint64_t v2 = 176160768;
  if ((this & 0x10000) == 0) {
    uint64_t v2 = 0x800000;
  }
  unint64_t v3 = v2 | this & 0x2800010004;
  if (!a2) {
    v3 |= this & 0x4000000000 | 3;
  }
  if ((a2 & ((this & 0x10000000000) == 0)) != 0) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = this & 0x20000;
  }
  return v3 | v4;
}

unint64_t fst::ShortestPathProperties(unint64_t this, int a2)
{
  uint64_t v2 = 0x52800000000;
  if (a2) {
    uint64_t v2 = 0x12800000000;
  }
  return v2 | this;
}

unint64_t fst::UnionProperties(unint64_t this, uint64_t a2, int a3)
{
  unint64_t v3 = a2 & 0x8000000000 | this & 0x8000000003;
  if (a3) {
    unint64_t v3 = 0;
  }
  unint64_t v4 = a2 & this & 0x40000000000 | 0x5400000 | a2 & this & 0x10A00010000 | (a2 | this) & 4 | v3 | 0x2000000000;
  if (a3) {
    unint64_t v4 = a2 & this & 0x10A00010000 | (a2 | this) & 4 | v3 | 0x2000000000;
  }
  if ((((this & 0x10000000000) == 0) & a3) != 0) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = this & 0x205A56A0000;
  }
  if ((a3 & ((a2 & 0x10000000000) == 0)) != 0) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = a2 & 0xA05A56A0000;
  }
  return v6 | v5 | v4;
}

uint64_t fst::CreateSuperFinal<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  long long v45 = 0;
  long long v46 = 0;
  long long v47 = 0;
  if (v4 < 1)
  {
    unint64_t v20 = 0;
    unint64_t v21 = 0;
    goto LABEL_32;
  }
  int v6 = v4;
  uint64_t v7 = 0;
  do
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v30, a1, v7);
    float v50 = *((float *)&v30 + 1);
    LODWORD(v40) = v30;
    int v49 = 2139095040;
    float v48 = INFINITY;
    v5.n128_u32[0] = v30;
    if (*(float *)&v30 != INFINITY)
    {
      BOOL v8 = 1;
      uint64_t v9 = __p;
      if (!__p) {
        goto LABEL_6;
      }
LABEL_5:
      uint64_t v32 = v9;
      operator delete(v9);
      goto LABEL_6;
    }
    v5.n128_f32[0] = v50;
    uint64_t v9 = __p;
    if (v50 == v48)
    {
      BOOL v8 = v32 != __p;
      if (__p) {
        goto LABEL_5;
      }
    }
    else
    {
      BOOL v8 = 1;
      if (__p) {
        goto LABEL_5;
      }
    }
LABEL_6:
    if (v8)
    {
      unint64_t v10 = v46;
      if (v46 >= v47)
      {
        unint64_t v12 = v45;
        uint64_t v13 = (v46 - v45) >> 2;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v47 - v45;
        if ((v47 - v45) >> 1 > v14) {
          unint64_t v14 = v15 >> 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v47, v16);
          unint64_t v12 = v45;
          unint64_t v10 = v46;
        }
        else
        {
          uint64_t v17 = 0;
        }
        uint64_t v18 = &v17[4 * v13];
        *(_DWORD *)uint64_t v18 = v7;
        unint64_t v11 = v18 + 4;
        while (v10 != v12)
        {
          int v19 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        long long v45 = v18;
        long long v46 = v11;
        long long v47 = &v17[4 * v16];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *(_DWORD *)long long v46 = v7;
        unint64_t v11 = v10 + 4;
      }
      long long v46 = v11;
    }
    uint64_t v7 = (v7 + 1);
  }
  while (v7 != v6);
  unint64_t v20 = v45;
  unint64_t v21 = v46;
  if (v21 - v20 != 4) {
    goto LABEL_51;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void, __n128))(*(void *)a1 + 32))(&v30, a1, *(unsigned int *)v20, v5);
  float v50 = *((float *)&v30 + 1);
  LODWORD(v40) = v30;
  int v49 = 0;
  float v48 = 0.0;
  v5.n128_u32[0] = v30;
  uint64_t v22 = *(float *)&v30 == 0.0 && (v5.n128_f32[0] = v50, v50 == v48) && v32 == __p;
  if (__p)
  {
    uint64_t v32 = __p;
    operator delete(__p);
  }
  if (!v22) {
    goto LABEL_51;
  }
LABEL_32:
  uint64_t v23 = *(unsigned int *)v45;
  unint64_t v34 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, __n128))(*(void *)a1 + 136))(a1, v23, &v30, v5);
  if (v30)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v30 + 24))(v30)) {
      goto LABEL_42;
    }
LABEL_44:
    int v24 = 0;
  }
  else
  {
    if (v34 < (unint64_t)v32) {
      goto LABEL_44;
    }
LABEL_42:
    uint64_t v22 = *(unsigned int *)v45;
    int v24 = 1;
  }
  if (v30)
  {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  else if (v33)
  {
    --*v33;
  }
  if (v24)
  {
    BOOL v25 = v45;
  }
  else
  {
LABEL_51:
    uint64_t v22 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 200))(a1, v5);
    *(_OWORD *)uint64_t v43 = 0u;
    long long v44 = 0u;
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 184))(a1, v22, v43);
    if (v43[1])
    {
      *(void **)&long long v44 = v43[1];
      operator delete(v43[1]);
    }
    BOOL v25 = v46;
    if (v46 != v45)
    {
      unint64_t v26 = 0;
      int32x2_t v27 = vdup_n_s32(0x7F800000u);
      BOOL v25 = v45;
      do
      {
        uint64_t v28 = *(unsigned int *)&v25[4 * v26];
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v40, a1, v28);
        int32x2_t v36 = v27;
        int v38 = 0;
        uint64_t v39 = 0;
        int v37 = 0;
        (*(void (**)(uint64_t, uint64_t, int32x2_t *))(*(void *)a1 + 184))(a1, v28, &v36);
        if (v37)
        {
          int v38 = v37;
          operator delete(v37);
        }
        uint64_t v32 = 0;
        int v33 = 0;
        unint64_t v34 = 0;
        uint64_t v30 = 0;
        int v35 = v22;
        std::string __p = v40;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v32, (char *)v41, (uint64_t)v42, (v42 - (unsigned char *)v41) >> 2);
        if (*(void *)(a2 + 24)) {
          std::function<void ()(int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&)>::operator()(a2, v28);
        }
        else {
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 208))(a1, v28, &v30);
        }
        if (v32)
        {
          int v33 = v32;
          operator delete(v32);
        }
        if (v41)
        {
          uint64_t v42 = v41;
          operator delete(v41);
        }
        ++v26;
        BOOL v25 = v45;
      }
      while (v26 < (v46 - v45) >> 2);
    }
  }
  if (v25)
  {
    long long v46 = v25;
    operator delete(v25);
  }
  return v22;
}

void sub_1B1ADABCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (a9)
  {
    fst::CreateSuperFinal<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a9);
  }
  else if (a12)
  {
    --*a12;
  }
  int32x2_t v27 = *(void **)(v25 - 136);
  if (v27)
  {
    *(void *)(v25 - 128) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__function::__value_func<void ()(int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

int *std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(std::vector<int> *a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  __n128 v5 = (int *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = (int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<int> *)&a1->__end_cap_;
  unint64_t v10 = value;
  unint64_t v12 = *((void *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    std::vector<int>::pointer begin = a1->__begin_;
    unint64_t v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)begin) >> 2;
    uint64_t v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17) {
      uint64_t v18 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    uint64_t v29 = 4 * a5;
    uint64_t v30 = &v28[a5];
    do
    {
      int v31 = *v7++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    __n128 v5 = std::vector<int>::__swap_out_circular_buffer(a1, &__v, v5);
    if (__v.__end_ != __v.__begin_) {
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
    }
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_) {
      operator delete(__v.__first_);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    unint64_t v21 = &__src[4 * a5];
    uint64_t v23 = (int *)*((void *)p_end_cap - 1);
LABEL_17:
    int v24 = &v5[a5];
    uint64_t v25 = &v23[-a5];
    unint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      unint64_t v26 = v23;
      do
      {
        int v27 = *v25++;
        *v26++ = v27;
      }
      while ((unint64_t)v25 < v12);
    }
    a1->__end_ = v26;
    if (v23 != v24) {
      memmove(&v23[-(v23 - v24)], v5, (char *)v23 - (char *)v24);
    }
    if (v21 != (char *)v7) {
      memmove(v5, v7, v21 - (char *)v7);
    }
    return v5;
  }
  unint64_t v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*((void **)p_end_cap - 1), &__src[4 * v20], a4 - v21);
  }
  uint64_t v23 = (int *)(v12 + v22);
  a1->__end_ = (std::vector<int>::pointer)(v12 + v22);
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_1B1ADAF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1ADAFC4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::FilterBlockOptions::options@<X0>(quasar::FilterBlockOptions *this@<X0>, void *a2@<X8>)
{
  int v4 = (char *)this + 320;
  uint64_t v5 = *(void *)(*((void *)this + 40) - 24);
  int v6 = (char *)this + 472;
  uint64_t v7 = *(void *)(*((void *)this + 59) - 24);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t result = operator new(0x28uLL);
  *uint64_t result = (char *)this + 16;
  result[1] = (char *)this + 160;
  a2[1] = result + 5;
  a2[2] = result + 5;
  result[2] = &v4[v5];
  result[3] = &v6[v7];
  result[4] = (char *)this + 624;
  *a2 = result;
  return result;
}

void quasar::FilterBlock::init(quasar::FilterBlock *this)
{
  uint64_t v2 = (void *)((char *)this + 328);
  if (*(_DWORD *)quasar::OptionValue<int>::value((quasar::FilterBlock *)((char *)this
                                                                        + *(void *)(*((void *)this + 41) - 24)
                                                                        + 328)) == -1)
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      long long v8 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"no limiting of nbest output size", 32);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v8);
    }
  }
  else
  {
    if ((*(_DWORD *)quasar::OptionValue<int>::value((void *)((char *)v2 + *(void *)(*v2 - 24))) & 0x80000000) != 0)
    {
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      long long v8 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v8, "invalid value for nbest option!");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v8);
    }
    if (quasar::gLogLevel >= 5)
    {
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      long long v8 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
      unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"limiting n-best size to ", 24);
      quasar::OptionValue<int>::debugInfo((uint64_t)v2 + *(void *)(*v2 - 24));
      if ((v7 & 0x80u) == 0) {
        int v4 = __p;
      }
      else {
        int v4 = (void **)__p[0];
      }
      if ((v7 & 0x80u) == 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
      if ((char)v7 < 0) {
        operator delete(__p[0]);
      }
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v8);
    }
  }
  if (*(unsigned char *)quasar::OptionValue<BOOL>::value((quasar::FilterBlock *)((char *)this
                                                                        + *(void *)(*((void *)this + 60) - 24)
                                                                        + 480)))
  {
    if (quasar::gLogLevel < 4) {
      goto LABEL_21;
    }
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"using metainfo annotation to filter nbest", 41);
  }
  else
  {
    if (quasar::gLogLevel < 4) {
      goto LABEL_21;
    }
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"simple nbest size limiting", 26);
  }
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v8);
LABEL_21:
  if (*(unsigned char *)quasar::OptionValue<BOOL>::value((void *)this + 3))
  {
    if (quasar::gLogLevel < 4) {
      return;
    }
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"validating source locale against metainfo locale", 48);
  }
  else
  {
    if (quasar::gLogLevel < 4) {
      return;
    }
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"locale validation disabled", 26);
  }
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v8);
}

void sub_1B1ADB438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)va);
}

uint64_t quasar::OptionValue<int>::debugInfo(uint64_t a1)
{
  uint64_t v2 = quasar::OptionValue<BOOL>::fallback(a1);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v31);
  int v3 = *(char *)(a1 + 31);
  if (v3 >= 0) {
    uint64_t v4 = a1 + 8;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 16);
  }
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
  unsigned __int8 v7 = (void *)std::ostream::operator<<();
  long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" (", 2);
  uint64_t v11 = *(void *)(v2 + 32);
  uint64_t v10 = v2 + 32;
  uint64_t v9 = v11;
  int v12 = *(char *)(v10 + 23);
  if (v12 >= 0) {
    uint64_t v13 = v10;
  }
  else {
    uint64_t v13 = v9;
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(v10 + 23);
  }
  else {
    uint64_t v14 = *(void *)(v10 + 8);
  }
  long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)")", 1);
  if (*(void *)(a1 + 136))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" overrides: [", 13);
    long long v16 = *(void **)(a1 + 120);
    long long v17 = (void *)(a1 + 128);
    if (v16 != (void *)(a1 + 128))
    {
      do
      {
        long long v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\"", 1);
        int v19 = *((char *)v16 + 55);
        if (v19 >= 0) {
          uint64_t v20 = (uint64_t)(v16 + 4);
        }
        else {
          uint64_t v20 = v16[4];
        }
        if (v19 >= 0) {
          uint64_t v21 = *((unsigned __int8 *)v16 + 55);
        }
        else {
          uint64_t v21 = v16[5];
        }
        long long v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"\": ", 3);
        std::ostream::operator<<();
        long long v23 = (void *)*v17;
        long long v24 = (void *)(a1 + 128);
        if (*v17)
        {
          do
          {
            uint64_t v25 = v23;
            long long v23 = (void *)v23[1];
          }
          while (v23);
        }
        else
        {
          do
          {
            uint64_t v25 = (void *)v24[2];
            BOOL v26 = *v25 == (void)v24;
            long long v24 = v25;
          }
          while (v26);
        }
        if (v16 != v25) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", ", 2);
        }
        int v27 = (void *)v16[1];
        if (v27)
        {
          do
          {
            uint64_t v28 = v27;
            int v27 = (void *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            uint64_t v28 = (void *)v16[2];
            BOOL v26 = *v28 == (void)v16;
            long long v16 = v28;
          }
          while (!v26);
        }
        long long v16 = v28;
      }
      while (v28 != v17);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"]", 1);
  }
  std::stringbuf::str();
  v31[0] = *MEMORY[0x1E4FBA408];
  uint64_t v29 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v31 + *(void *)(v31[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v32[0] = v29;
  v32[1] = MEMORY[0x1E4FBA470] + 16;
  if (v33 < 0) {
    operator delete((void *)v32[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v34);
}

void sub_1B1ADB760(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'quasar::FilterBlock::init(quasar::FilterBlock *this)
{
}

uint64_t quasar::FilterBlock::getAlternatives@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *(unsigned char **)result;
  int v3 = *(unsigned char **)(result + 8);
  if (*(unsigned char **)result != v3)
  {
    do
    {
      if (!v2[8])
      {
        uint64_t result = quasar::MetaInfo::hasSenses((quasar::MetaInfo *)(v2 + 192));
        if (result)
        {
          unint64_t v5 = a2[1];
          if (v5 >= a2[2])
          {
            uint64_t result = std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>(a2, (const quasar::TranslationPhraseInternal *)v2);
          }
          else
          {
            quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)a2[1], (const quasar::TranslationPhraseInternal *)v2);
            uint64_t result = v5 + 200;
            a2[1] = v5 + 200;
          }
          a2[1] = result;
        }
      }
      v2 += 200;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1B1ADB82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  *(void *)(v10 + 8) = v11;
  a10 = (void **)v10;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

BOOL quasar::FilterBlock::isSameLanguage(uint64_t a1, const std::string *a2, const std::string *a3)
{
  std::string::basic_string(&v20, a2, 0, 2uLL, (std::allocator<char> *)&v19);
  std::string::basic_string(&v19, a3, 0, 2uLL, (std::allocator<char> *)&v21);
  char v4 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v20.__r_.__value_.__l.__size_;
  }
  std::string::size_type v6 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  int v7 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v6 = v19.__r_.__value_.__l.__size_;
  }
  if (size != v6)
  {
    BOOL v17 = 0;
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_26;
  }
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v8 = &v19;
  }
  else {
    long long v8 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v17 = memcmp(v20.__r_.__value_.__l.__data_, v8, v20.__r_.__value_.__l.__size_) == 0;
    goto LABEL_22;
  }
  if (*((unsigned char *)&v20.__r_.__value_.__s + 23))
  {
    uint64_t v9 = HIBYTE(v20.__r_.__value_.__r.__words[2]) - 1;
    uint64_t v10 = &v20;
    do
    {
      int v12 = v10->__r_.__value_.__s.__data_[0];
      uint64_t v10 = (std::string *)((char *)v10 + 1);
      int v11 = v12;
      int v14 = v8->__r_.__value_.__s.__data_[0];
      long long v8 = (std::string *)((char *)v8 + 1);
      int v13 = v14;
      BOOL v16 = v9-- != 0;
      BOOL v17 = v11 == v13;
    }
    while (v11 == v13 && v16);
LABEL_22:
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_26:
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((*((unsigned char *)&v20.__r_.__value_.__s + 23) & 0x80) == 0) {
      return v17;
    }
LABEL_27:
    operator delete(v20.__r_.__value_.__l.__data_);
    return v17;
  }
  BOOL v17 = 1;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_26;
  }
LABEL_23:
  if (v4 < 0) {
    goto LABEL_27;
  }
  return v17;
}

void sub_1B1ADB96C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::FilterBlock::hasLocaleMismatchedMetainfo(uint64_t a1, uint64_t *a2)
{
  if (!*(unsigned char *)quasar::OptionValue<BOOL>::value((void *)(a1 + 24))) {
    return 0;
  }
  char v4 = (void *)(a1 + 168);
  uint64_t v5 = quasar::OptionValue<std::string>::value(v4);
  if ((*(char *)(v5 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v5 + 23)) {
      goto LABEL_4;
    }
LABEL_13:
    if (quasar::gLogLevel >= 2)
    {
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v26 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"source-locale not set", 21);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v26);
    }
    return 0;
  }
  if (!*(void *)(v5 + 8)) {
    goto LABEL_13;
  }
LABEL_4:
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  while (v6 != v7)
  {
    if (quasar::MetaInfo::hasSenses((quasar::MetaInfo *)(v6 + 192)))
    {
      Senses = (void *)quasar::MetaInfo::getSenses((quasar::MetaInfo *)(v6 + 192));
      uint64_t v9 = Senses[1];
      if (*Senses != v9)
      {
        uint64_t v10 = *Senses + 48;
        while (1)
        {
          int v11 = (const std::string *)quasar::OptionValue<std::string>::value(v4);
          if (!quasar::FilterBlock::isSameLanguage((uint64_t)v11, v11, (const std::string *)v10)) {
            break;
          }
          uint64_t v12 = v10 + 248;
          v10 += 296;
          if (v12 == v9) {
            goto LABEL_11;
          }
        }
        if (quasar::gLogLevel >= 5)
        {
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          long long v26 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
          int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"defLocale: <", 12);
          int v15 = *(char *)(v10 + 23);
          if (v15 >= 0) {
            uint64_t v16 = v10;
          }
          else {
            uint64_t v16 = *(void *)v10;
          }
          if (v15 >= 0) {
            uint64_t v17 = *(unsigned __int8 *)(v10 + 23);
          }
          else {
            uint64_t v17 = *(void *)(v10 + 8);
          }
          long long v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
          std::string v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)">", 1);
          std::string v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" incompatible with srcLocale: <", 31);
          uint64_t v21 = quasar::OptionValue<std::string>::value(v4);
          int v22 = *(char *)(v21 + 23);
          if (v22 >= 0) {
            uint64_t v23 = v21;
          }
          else {
            uint64_t v23 = *(void *)v21;
          }
          if (v22 >= 0) {
            uint64_t v24 = *(unsigned __int8 *)(v21 + 23);
          }
          else {
            uint64_t v24 = *(void *)(v21 + 8);
          }
          uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v23, v24);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"> deleting alternatives and stripping disambig annotation from metainfo", 71);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v26);
        }
        return 1;
      }
    }
LABEL_11:
    v6 += 200;
  }
  return 0;
}

void sub_1B1ADBB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::OptionValue<BOOL>::value(void *a1)
{
  uint64_t v2 = quasar::OptionValue<BOOL>::fallback((uint64_t)a1) + 104;
  if ((*(unsigned int (**)(void *))(*a1 + 32))(a1))
  {
    int v3 = (const void ****)a1[11];
    char v4 = (std::__shared_weak_count *)v3[1];
    if (v4)
    {
      uint64_t v5 = *v3;
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v6 = std::__shared_weak_count::lock(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v6)
      {
        if (v5)
        {
          uint64_t v7 = *v5;
          long long v8 = v5[1];
          if (*v5 != v8)
          {
            uint64_t v9 = (uint64_t)(a1 + 15);
            uint64_t v10 = a1 + 16;
            do
            {
              uint64_t v11 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v9, v7);
              if (v10 != (void *)v11) {
                uint64_t v2 = v11 + 56;
              }
              v7 += 3;
            }
            while (v7 != v8);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
  return v2;
}

void sub_1B1ADBCA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void quasar::FilterBlock::filterBasedOnNbestSizeLimit(uint64_t *a1, int a2)
{
  if (a2 == -1)
  {
    if (quasar::gLogLevel < 5) {
      return;
    }
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"sending ", 8);
    uint64_t v5 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" alternatives without limiting", 30);
LABEL_10:
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v8);
    return;
  }
  if (0x8F5C28F5C28F5C29 * ((a1[1] - *a1) >> 3) <= a2)
  {
    if (quasar::gLogLevel < 5) {
      return;
    }
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"sending ", 8);
    uint64_t v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" alternatives, too few to limit (limit=", 39);
    uint64_t v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)")", 1);
    goto LABEL_10;
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"sending ", 8);
    char v4 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" alternatives, limiting from ", 29);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v8);
  }
  std::vector<quasar::TranslationPhraseInternal>::resize(a1, a2);
}

void sub_1B1ADBEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::vector<quasar::TranslationPhraseInternal>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0x8F5C28F5C28F5C29 * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<quasar::TranslationPhraseInternal>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 200 * a2;
    while (v3 != v7)
      quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)(v3 - 200));
    a1[1] = v7;
  }
}

void quasar::FilterBlock::filterBasedOnAnnotations(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(const quasar::TranslationPhraseInternal **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5 - *(void *)a1 == 200)
  {
    if (quasar::gLogLevel < 5)
    {
      unint64_t v6 = 1;
    }
    else
    {
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v26 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"only one hypothesis, sending it", 31);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v20);
      unint64_t v4 = *(const quasar::TranslationPhraseInternal **)a1;
      uint64_t v5 = *(void *)(a1 + 8);
      unint64_t v6 = 0x8F5C28F5C28F5C29 * ((v5 - *(void *)a1) >> 3);
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(a2, (uint64_t)v4, v5, v6);
    return;
  }
  if (*((unsigned char *)v4 + 8))
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v26 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"1-best hypothesis is low confidence, sending only this hypothesis", 65);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v20);
      unint64_t v4 = *(const quasar::TranslationPhraseInternal **)a1;
    }
    quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)&v20, v4);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    long long v15 = a2;
    LOBYTE(v16) = 0;
    uint64_t v7 = (char *)operator new(0xC8uLL);
    *a2 = (uint64_t)v7;
    a2[1] = (uint64_t)v7;
    a2[2] = (uint64_t)(v7 + 200);
    uint64_t v8 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal*>((uint64_t)(a2 + 2), (uint64_t)&v20, (uint64_t)&v32 + 8, (uint64_t)v7);
LABEL_18:
    a2[1] = v8;
    quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&v20);
    return;
  }
  if (!quasar::MetaInfo::hasSenses((const quasar::TranslationPhraseInternal *)((char *)v4 + 192)))
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v26 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"1-best hypothesis has no ambiguity annotation, sending only this hypothesis", 75);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v20);
    }
    quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)&v20, *(const quasar::TranslationPhraseInternal **)a1);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    long long v15 = a2;
    LOBYTE(v16) = 0;
    long long v13 = (char *)operator new(0xC8uLL);
    *a2 = (uint64_t)v13;
    a2[1] = (uint64_t)v13;
    a2[2] = (uint64_t)(v13 + 200);
    uint64_t v8 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal*>((uint64_t)(a2 + 2), (uint64_t)&v20, (uint64_t)&v32 + 8, (uint64_t)v13);
    goto LABEL_18;
  }
  quasar::FilterBlock::getAlternatives(a1, (uint64_t *)&v15);
  uint64_t v10 = (uint64_t)v15;
  uint64_t v9 = v16;
  if (0x8F5C28F5C28F5C29 * ((v16 - (uint64_t)v15) >> 3) > 1)
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v26 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"ambiguity found: ", 17);
      long long v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" alternative(s)", 15);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v20);
      uint64_t v10 = (uint64_t)v15;
      uint64_t v9 = v16;
    }
    *a2 = v10;
    a2[1] = v9;
    a2[2] = v17;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    long long v15 = 0;
  }
  else
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v26 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"no ambiguity found: ", 20);
      long long v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" alternative(s)", 15);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v20);
    }
    quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)&v20, *(const quasar::TranslationPhraseInternal **)a1);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    long long v18 = a2;
    char v19 = 0;
    long long v12 = (char *)operator new(0xC8uLL);
    *a2 = (uint64_t)v12;
    a2[1] = (uint64_t)v12;
    a2[2] = (uint64_t)(v12 + 200);
    a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal*>((uint64_t)(a2 + 2), (uint64_t)&v20, (uint64_t)&v32 + 8, (uint64_t)v12);
    quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&v20);
  }
  *(void *)&long long v20 = &v15;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_1B1ADC40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a10;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void quasar::FilterBlock::filterBasedOnStructuredPredition(uint64_t *a1)
{
  v54[0] = 0;
  v54[1] = 0;
  long long v53 = (uint64_t *)v54;
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (*a1 != v1)
  {
    do
    {
      uint64_t v3 = quasar::MetaInfo::structuredPrediction((uint64_t *)(v2 + 192), (uint64_t)"gender", 6);
      if (v3)
      {
        uint64_t v4 = *(void *)(v3 + 32);
        uint64_t v5 = *(void *)(v3 + 40);
        if (v4 != v5)
        {
          unint64_t v6 = (int *)(v3 + 24);
          uint64_t v7 = v4 + 48;
          do
          {
            if (*(void *)(v7 + 8) == *(void *)(v7 + 16))
            {
              if (quasar::gLogLevel >= 4)
              {
                long long v51 = 0u;
                long long v52 = 0u;
                long long v49 = 0u;
                long long v50 = 0u;
                long long v47 = 0u;
                long long v48 = 0u;
                long long v45 = 0u;
                long long v46 = 0u;
                long long v43 = 0u;
                long long v44 = 0u;
                long long v41 = 0u;
                long long v42 = 0u;
                long long v39 = 0u;
                long long v40 = 0u;
                long long v37 = 0u;
                long long v38 = 0u;
                long long v36 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
                uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Source span: ", 13);
                uint64_t v9 = quasar::operator<<(v8);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" in group: ", 11);
                uint64_t v10 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" doesn't have any projections. Removing this span from gender_alternatives.", 75);
                quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v36);
              }
              *(void *)&long long v36 = v6;
              long long v11 = std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v53, v6, (uint64_t)&std::piecewise_construct, (_DWORD **)&v36);
              std::__tree<quasar::MetaInfo::StructuredPrediction::Span::Range>::__emplace_unique_key_args<quasar::MetaInfo::StructuredPrediction::Span::Range,quasar::MetaInfo::StructuredPrediction::Span::Range const&>(v11 + 5, (_DWORD *)v7, (uint64_t *)v7);
            }
            uint64_t v12 = v7 + 32;
            v7 += 80;
          }
          while (v12 != v5);
        }
      }
      v2 += 200;
    }
    while (v2 != v1);
    uint64_t v13 = *a1;
    uint64_t v26 = a1[1];
    if (*a1 != v26)
    {
      do
      {
        uint64_t v14 = quasar::MetaInfo::structuredPrediction((uint64_t *)(v13 + 192), (uint64_t)"gender", 6);
        uint64_t v15 = v14;
        if (v14)
        {
          long long v33 = 0;
          long long v34 = 0;
          unint64_t v35 = 0;
          uint64_t v17 = *(void *)(v14 + 32);
          uint64_t v16 = *(void *)(v14 + 40);
          if (v17 == v16) {
            goto LABEL_24;
          }
          long long v18 = (_DWORD *)(v14 + 24);
          do
          {
            long long v55 = v18;
            char v19 = std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v53, (int *)(v15 + 24), (uint64_t)&std::piecewise_construct, &v55);
            if (!std::__tree<quasar::MetaInfo::StructuredPrediction::Span::Range>::__count_unique<quasar::MetaInfo::StructuredPrediction::Span::Range>((uint64_t)(v19 + 5), (_DWORD *)(v17 + 48)))
            {
              long long v20 = v34;
              if ((unint64_t)v34 >= v35)
              {
                long long v21 = (std::string *)std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__emplace_back_slow_path<quasar::MetaInfo::StructuredPrediction::Span const&>((uint64_t *)&v33, (long long *)v17);
              }
              else
              {
                std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::construct[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span,quasar::MetaInfo::StructuredPrediction::Span const&>((int)&v35, v34, (long long *)v17);
                long long v21 = (std::string *)((char *)v20 + 80);
              }
              long long v34 = v21;
            }
            v17 += 80;
          }
          while (v17 != v16);
          long long v22 = (long long *)v33;
          long long v23 = (long long *)v34;
          if (v33 == v34)
          {
LABEL_24:
            if (quasar::gLogLevel >= 4)
            {
              long long v51 = 0u;
              long long v52 = 0u;
              long long v49 = 0u;
              long long v50 = 0u;
              long long v47 = 0u;
              long long v48 = 0u;
              long long v45 = 0u;
              long long v46 = 0u;
              long long v43 = 0u;
              long long v44 = 0u;
              long long v41 = 0u;
              long long v42 = 0u;
              long long v39 = 0u;
              long long v40 = 0u;
              long long v37 = 0u;
              long long v38 = 0u;
              long long v36 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"All gender alternative spans are filtered out. Removing gender_alternatives entry from meta info.", 97);
              quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v36);
            }
            quasar::MetaInfo::eraseStructuredPrediction((uint64_t *)(v13 + 192), (uint64_t)"gender", 6);
            quasar::MetaInfo::eraseStructuredPredictionToSourceTokenAlignments((uint64_t *)(v13 + 192), (uint64_t)"gender", 6);
          }
          else
          {
            if (*(char *)(v15 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)v15, *(void *)(v15 + 8));
              long long v22 = (long long *)v33;
              long long v23 = (long long *)v34;
            }
            else
            {
              long long v24 = *(_OWORD *)v15;
              v29.__r_.__value_.__r.__words[2] = *(void *)(v15 + 16);
              *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v24;
            }
            int v25 = *v18;
            memset(&v28, 0, sizeof(v28));
            std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__init_with_size[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*>(&v28, v22, v23, 0xCCCCCCCCCCCCCCCDLL * (v23 - v22));
            std::string __p = v29;
            memset(&v29, 0, sizeof(v29));
            int v31 = v25;
            std::string v32 = v28;
            memset(&v28, 0, sizeof(v28));
            quasar::MetaInfo::setStructuredPrediction((quasar::MetaInfo::Impl **)(v13 + 192), (uint64_t)&__p);
            *(void *)&long long v36 = &v32;
            std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            *(void *)&long long v36 = &v28;
            std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v29.__r_.__value_.__l.__data_);
            }
          }
          *(void *)&long long v36 = &v33;
          std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
        }
        v13 += 200;
      }
      while (v13 != v26);
    }
  }
  std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy((uint64_t)&v53, v54[0]);
}

void sub_1B1ADC8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char *a34)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a34);
  a34 = &a31;
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(v34 - 128, *(void **)(v34 - 120));
  _Unwind_Resume(a1);
}

void quasar::MetaInfo::StructuredPrediction::~StructuredPrediction(void **this)
{
  uint64_t v2 = this + 4;
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void quasar::FilterBlock::process(void *a1, uint64_t a2, uint64_t *a3)
{
  if (*a3 == a3[1])
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      long long v7 = 0u;
      long long v8 = 0u;
      long long v6 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"no hypotheses, sending empty list of hypotheses", 47);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v6);
    }
    quasar::ProcessingBlock::send((uint64_t)a1 + *(void *)(*a1 - 24), (uint64_t)a3, 0);
  }
  else
  {
    if (*(unsigned char *)quasar::OptionValue<BOOL>::value((void *)((char *)a1 + *(void *)(a1[60] - 24) + 480)))
    {
      quasar::FilterBlock::filterBasedOnAnnotations((uint64_t)a3, (uint64_t *)&v6);
    }
    else
    {
      long long v6 = 0uLL;
      *(void *)&long long v7 = 0;
      std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(&v6, *a3, a3[1], 0x8F5C28F5C28F5C29 * ((a3[1] - *a3) >> 3));
    }
    uint64_t v5 = (int *)quasar::OptionValue<int>::value((void *)((char *)a1 + *(void *)(a1[41] - 24) + 328));
    quasar::FilterBlock::filterBasedOnNbestSizeLimit((uint64_t *)&v6, *v5);
    if (quasar::FilterBlock::hasLocaleMismatchedMetainfo((uint64_t)a1, (uint64_t *)&v6)) {
      std::vector<quasar::TranslationPhraseInternal>::resize((uint64_t *)&v6, 1uLL);
    }
    if (*(unsigned char *)quasar::OptionValue<BOOL>::value(a1 + 79)) {
      quasar::FilterBlock::filterBasedOnStructuredPredition((uint64_t *)&v6);
    }
    if (*((void *)&v6 + 1) - (void)v6 == 200) {
      quasar::MetaInfo::eraseSenses((quasar::MetaInfo::Impl **)(v6 + 192));
    }
    quasar::ProcessingBlock::send((uint64_t)a1 + *(void *)(*a1 - 24), (uint64_t)&v6, 0);
    long long v23 = (void **)&v6;
    std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v23);
  }
}

void sub_1B1ADCB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void virtual thunk to'quasar::FilterBlock::process(void *a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t quasar::FilterBlock::minConfigVersion(quasar::FilterBlock *this)
{
  return 163;
}

uint64_t virtual thunk to'quasar::FilterBlock::minConfigVersion(quasar::FilterBlock *this)
{
  return 163;
}

void quasar::ConfiguredProcessingBlock<quasar::FilterBlockOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  uint64_t *v11;

  uint64_t v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
  (**v3)(&v10);
  uint64_t v4 = v10;
  uint64_t v5 = v11;
  if (v10 != v11)
  {
    do
    {
      long long v6 = *v4;
      long long v7 = (std::__shared_weak_count *)a2[1];
      long long v8 = *a2;
      long long v9 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      quasar::OptionValueBase::setContextProvider(v6, &v8);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      ++v4;
    }
    while (v4 != v5);
    uint64_t v4 = v10;
  }
  if (v4)
  {
    long long v11 = v4;
    operator delete(v4);
  }
}

void sub_1B1ADCCB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::FilterBlockOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::FilterBlockOptions>::setContextProvider(void *a1, uint64_t *a2)
{
}

uint64_t virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::FilterBlockOptions>::getOptions(void *a1)
{
  return (uint64_t)a1 + *(void *)(*a1 - 104) + 8;
}

void quasar::FilterBlock::~FilterBlock(quasar::FilterBlock *this)
{
  *(void *)this = &unk_1F0A20E98;
  uint64_t v1 = (char **)((char *)this + 776);
  *((void *)this + 97) = &unk_1F0A20F20;
  quasar::FilterBlockOptions::~FilterBlockOptions((quasar::FilterBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v1);
}

{
  char **v1;
  uint64_t vars8;

  *(void *)this = &unk_1F0A20E98;
  uint64_t v1 = (char **)((char *)this + 776);
  *((void *)this + 97) = &unk_1F0A20F20;
  quasar::FilterBlockOptions::~FilterBlockOptions((quasar::FilterBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v1);
  JUMPOUT(0x1B3EA8670);
}

const char *quasar::FilterBlock::blockType(quasar::FilterBlock *this)
{
  return "FilterBlock";
}

void virtual thunk to'quasar::FilterBlock::~FilterBlock(quasar::FilterBlock *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  *uint64_t v1 = &unk_1F0A20E98;
  uint64_t v2 = (char **)(v1 + 97);
  v1[97] = &unk_1F0A20F20;
  quasar::FilterBlockOptions::~FilterBlockOptions((quasar::FilterBlockOptions *)(v1 + 1));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &unk_1F0A20E98;
  *((void *)v1 + 97) = &unk_1F0A20F20;
  quasar::FilterBlockOptions::~FilterBlockOptions((quasar::FilterBlockOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 97);
  JUMPOUT(0x1B3EA8670);
}

const char *virtual thunk to'quasar::FilterBlock::blockType(quasar::FilterBlock *this)
{
  return "FilterBlock";
}

std::string *quasar::TranslationPhraseInternal::TranslationPhraseInternal(std::string *this, const quasar::TranslationPhraseInternal *a2)
{
  uint64_t v4 = quasar::TranslationPhrase::TranslationPhrase((quasar::TranslationPhrase *)this, a2);
  *((void *)v4 + 17) = 0;
  *((void *)v4 + 18) = 0;
  *((void *)v4 + 19) = 0;
  std::vector<quasar::TranslationTokenInternal>::__init_with_size[abi:ne180100]<quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*>((std::string *)((char *)v4 + 136), *((quasar::TranslationTokenInternal **)a2 + 17), *((quasar::TranslationTokenInternal **)a2 + 18), 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((void *)a2 + 18) - *((void *)a2 + 17)) >> 3));
  this[6].__r_.__value_.__r.__words[2] = *((void *)a2 + 20);
  if (*((char *)a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external(this + 7, *((const std::string::value_type **)a2 + 21), *((void *)a2 + 22));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 168);
    this[7].__r_.__value_.__r.__words[2] = *((void *)a2 + 23);
    *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = v5;
  }
  quasar::MetaInfo::MetaInfo((quasar::MetaInfo *)&this[8], (const quasar::TranslationPhraseInternal *)((char *)a2 + 192));
  return this;
}

void sub_1B1ADD010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<quasar::TranslationTokenInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  quasar::TranslationPhrase::~TranslationPhrase(v2);
  _Unwind_Resume(a1);
}

quasar::TranslationPhrase *quasar::TranslationPhrase::TranslationPhrase(quasar::TranslationPhrase *this, const quasar::TranslationPhrase *a2)
{
  uint64_t v4 = *(void *)a2;
  *((unsigned char *)this + 8) = *((unsigned char *)a2 + 8);
  *(void *)this = v4;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  std::vector<quasar::TranslationToken>::__init_with_size[abi:ne180100]<quasar::TranslationToken*,quasar::TranslationToken*>((std::string *)((char *)this + 16), *((long long **)a2 + 2), *((long long **)a2 + 3), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)a2 + 3) - *((void *)a2 + 2)) >> 3));
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 40);
    *((void *)this + 7) = *((void *)a2 + 7);
    *(_OWORD *)((char *)this + 40) = v5;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 64), (long long *)a2 + 4);
  std::__optional_copy_base<std::vector<quasar::AlternativeSelectionSpan>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 96, (uint64_t)a2 + 96);
  *((_WORD *)this + 64) = *((_WORD *)a2 + 64);
  return this;
}

void sub_1B1ADD12C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::TranslationPhrase::~TranslationPhrase(quasar::TranslationPhrase *this)
{
  if (*((unsigned char *)this + 120))
  {
    uint64_t v2 = (void **)((char *)this + 96);
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  }
  if (*((unsigned char *)this + 88) && *((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  uint64_t v2 = (void **)((char *)this + 16);
  std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100](&v2);
}

std::string *std::vector<quasar::TranslationToken>::__init_with_size[abi:ne180100]<quasar::TranslationToken*,quasar::TranslationToken*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<quasar::TranslationToken>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationToken>,quasar::TranslationToken*,quasar::TranslationToken*,quasar::TranslationToken*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B1ADD260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::TranslationToken>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(72 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationToken>,quasar::TranslationToken*,quasar::TranslationToken*,quasar::TranslationToken*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  long long v11 = this;
  long long v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    int v7 = a1;
    do
    {
      std::allocator<quasar::TranslationToken>::construct[abi:ne180100]<quasar::TranslationToken,quasar::TranslationToken&>(v7, v4, v6);
      long long v6 = (long long *)((char *)v6 + 72);
      uint64_t v4 = v12 + 3;
      v12 += 3;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationToken>,quasar::TranslationToken*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B1ADD3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::allocator<quasar::TranslationToken>::construct[abi:ne180100]<quasar::TranslationToken,quasar::TranslationToken&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  __int16 v6 = *((_WORD *)a3 + 12);
  this[1].__r_.__value_.__l.__size_ = 0;
  LOWORD(this[1].__r_.__value_.__l.__data_) = v6;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[1].__r_.__value_.__l.__size_, *((const void **)a3 + 4), *((void *)a3 + 5), (uint64_t)(*((void *)a3 + 5) - *((void *)a3 + 4)) >> 2);
  std::string::size_type v8 = *((void *)a3 + 7);
  LODWORD(this[2].__r_.__value_.__r.__words[2]) = *((_DWORD *)a3 + 16);
  this[2].__r_.__value_.__l.__size_ = v8;
  return result;
}

void sub_1B1ADD450(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationToken>,quasar::TranslationToken*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationToken>,quasar::TranslationToken*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationToken>,quasar::TranslationToken*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 72;
      std::allocator<quasar::TranslationToken>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void quasar::TranslationToken::~TranslationToken(quasar::TranslationToken *this)
{
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *a1, long long *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_1B1ADD56C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(std::string *this, long long *a2)
{
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

uint64_t std::__optional_copy_base<std::vector<quasar::AlternativeSelectionSpan>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + ++*(void *)(result + 24) = 0;
  std::__optional_storage_base<std::vector<quasar::AlternativeSelectionSpan>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<quasar::AlternativeSelectionSpan>,false> const&>((void *)a1, a2);
  return a1;
}

void sub_1B1ADD61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(unsigned char *)(v10 + 24))
  {
    a10 = v10;
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::__optional_storage_base<std::vector<quasar::AlternativeSelectionSpan>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<quasar::AlternativeSelectionSpan>,false> const&>(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = result;
    *uint64_t result = 0;
    result[1] = 0;
    result[2] = 0;
    uint64_t result = std::vector<quasar::AlternativeSelectionSpan>::__init_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*>(result, *(void *)a2, *(void *)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    *((unsigned char *)v2 + ++*(void *)(result + 24) = 1;
  }
  return result;
}

void *std::vector<quasar::AlternativeSelectionSpan>::__init_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    __int16 v6 = result;
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::AlternativeSelectionSpan>,quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1ADD6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::AlternativeSelectionSpan>,quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)v6;
      *(void *)(v4 + ++*(void *)(result + 24) = 0;
      *(void *)(v4 + 32) = 0;
      *(void *)(v4 + 16) = 0;
      std::vector<quasar::AlternativeSelectionSpan::Alternative>::__init_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan::Alternative*,quasar::AlternativeSelectionSpan::Alternative*>((void *)(v4 + 16), *(void **)(v6 + 16), *(void **)(v6 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 24) - *(void *)(v6 + 16)) >> 3));
      uint64_t v4 = v11 + 40;
      v11 += 40;
      v6 += 40;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AlternativeSelectionSpan>,quasar::AlternativeSelectionSpan*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1ADD824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<quasar::AlternativeSelectionSpan::Alternative>::__init_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan::Alternative*,quasar::AlternativeSelectionSpan::Alternative*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::AlternativeSelectionSpan::Alternative>,quasar::AlternativeSelectionSpan::Alternative*,quasar::AlternativeSelectionSpan::Alternative*,quasar::AlternativeSelectionSpan::Alternative*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1ADD8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::AlternativeSelectionSpan::Alternative>,quasar::AlternativeSelectionSpan::Alternative*,quasar::AlternativeSelectionSpan::Alternative*,quasar::AlternativeSelectionSpan::Alternative*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  _DWORD v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4[2] = a2[2];
      v4 += 3;
      a2 += 3;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AlternativeSelectionSpan::Alternative>,quasar::AlternativeSelectionSpan::Alternative*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AlternativeSelectionSpan::Alternative>,quasar::AlternativeSelectionSpan::Alternative*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AlternativeSelectionSpan::Alternative>,quasar::AlternativeSelectionSpan::Alternative*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AlternativeSelectionSpan::Alternative>,quasar::AlternativeSelectionSpan::Alternative*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    long long v3 = *(std::__shared_weak_count **)(v1 - 16);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 24;
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AlternativeSelectionSpan>,quasar::AlternativeSelectionSpan*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AlternativeSelectionSpan>,quasar::AlternativeSelectionSpan*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AlternativeSelectionSpan>,quasar::AlternativeSelectionSpan*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    do
    {
      uint64_t v3 = v1 - 40;
      uint64_t v4 = (void **)(v1 - 24);
      std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&v4);
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

std::string *std::vector<quasar::TranslationTokenInternal>::__init_with_size[abi:ne180100]<quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*>(std::string *result, quasar::TranslationTokenInternal *a2, quasar::TranslationTokenInternal *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::TranslationTokenInternal>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B1ADDACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::TranslationTokenInternal>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::TranslationTokenInternal>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x1E1E1E1E1E1E1E2) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[136 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1E1E1E1E1E1E1E2) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(136 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*>(uint64_t a1, quasar::TranslationTokenInternal *a2, quasar::TranslationTokenInternal *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v10 = this;
  uint64_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      quasar::TranslationTokenInternal::TranslationTokenInternal(v4, v6);
      uint64_t v6 = (const quasar::TranslationTokenInternal *)((char *)v6 + 136);
      uint64_t v4 = (std::string *)((char *)v11 + 136);
      uint64_t v11 = (std::string *)((char *)v11 + 136);
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1ADDC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *quasar::TranslationTokenInternal::TranslationTokenInternal(std::string *this, const quasar::TranslationTokenInternal *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  __int16 v5 = *((_WORD *)a2 + 12);
  this[1].__r_.__value_.__l.__size_ = 0;
  LOWORD(this[1].__r_.__value_.__l.__data_) = v5;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[1].__r_.__value_.__l.__size_, *((const void **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  std::string::size_type v6 = *((void *)a2 + 7);
  LODWORD(this[2].__r_.__value_.__r.__words[2]) = *((_DWORD *)a2 + 16);
  this[2].__r_.__value_.__l.__size_ = v6;
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  std::string::size_type v8 = *((void *)a2 + 12);
  this[4].__r_.__value_.__l.__size_ = 0;
  this[4].__r_.__value_.__r.__words[0] = v8;
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__r.__words[0] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&this[4].__r_.__value_.__l.__size_, *((const void **)a2 + 13), *((void *)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 2);
  this[5].__r_.__value_.__l.__size_ = *((void *)a2 + 16);
  return this;
}

void sub_1B1ADDD14(_Unwind_Exception *a1)
{
  quasar::TranslationToken::~TranslationToken(v1);
  _Unwind_Resume(a1);
}

void *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::string::size_type v6 = result;
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1ADDDB8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 136;
      std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void *std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::string::size_type v6 = result;
    std::vector<quasar::TranslationPhraseInternal>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1ADDEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::TranslationPhraseInternal>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x147AE147AE147AFLL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[200 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x147AE147AE147AFLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(200 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)(a4 + v7), (const quasar::TranslationPhraseInternal *)(a2 + v7));
      v7 += 200;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B1ADDFEC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 200;
    do
    {
      quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)(v4 + v2));
      v2 -= 200;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void quasar::FilterBlockOptions::~FilterBlockOptions(quasar::FilterBlockOptions *this)
{
  *(void *)this = &unk_1F0A53F30;
  *((void *)this + 78) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 744, *((char **)this + 94));
  *((void *)this + 78) = &unk_1F0A52FB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 90);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 703) < 0) {
    operator delete(*((void **)this + 85));
  }
  if (*((char *)this + 679) < 0) {
    operator delete(*((void **)this + 82));
  }
  if (*((char *)this + 655) < 0) {
    operator delete(*((void **)this + 79));
  }
  *((void *)this + 60) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 600, *((char **)this + 76));
  *((void *)this + 60) = &unk_1F0A52FB8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 559) < 0) {
    operator delete(*((void **)this + 67));
  }
  if (*((char *)this + 535) < 0) {
    operator delete(*((void **)this + 64));
  }
  if (*((char *)this + 511) < 0) {
    operator delete(*((void **)this + 61));
  }
  *((void *)this + 41) = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy((uint64_t)this + 448, *((char **)this + 57));
  *((void *)this + 41) = &unk_1F0A52FB8;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 53);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 407) < 0) {
    operator delete(*((void **)this + 48));
  }
  if (*((char *)this + 383) < 0) {
    operator delete(*((void **)this + 45));
  }
  if (*((char *)this + 359) < 0) {
    operator delete(*((void **)this + 42));
  }
  *((void *)this + 20) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 296, *((void **)this + 38));
  if (*((char *)this + 287) < 0) {
    operator delete(*((void **)this + 33));
  }
  *((void *)this + 20) = &unk_1F0A52FB8;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*((char *)this + 239) < 0) {
    operator delete(*((void **)this + 27));
  }
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  *((void *)this + 2) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 136, *((char **)this + 18));
  *((void *)this + 2) = &unk_1F0A52FB8;
  std::string::size_type v6 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

void quasar::OptionValue<BOOL>::updateOptionalFromPtree(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v5 = (const std::string::value_type *)(a1 + 8);
  unsigned __int16 v6 = quasar::getOptional<BOOL>(a2, a1 + 8);
  if (*((char *)a3 + 23) >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  size_t v8 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v7 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    size_t v8 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if (v7)
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v9 = a3;
    }
    else {
      uint64_t v9 = *a3;
    }
    memmove(v8, v9, v7);
  }
  *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v7) = 46;
  int v10 = *(char *)(a1 + 31);
  if (v10 >= 0) {
    uint64_t v11 = v5;
  }
  else {
    uint64_t v11 = *(const std::string::value_type **)(a1 + 8);
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    std::string::size_type v12 = *(void *)(a1 + 16);
  }
  long long v13 = std::string::append(&v15, v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (v6 >= 0x100u)
  {
    *(unsigned char *)(a1 + 104) = v6;
    std::string::operator=((std::string *)(a1 + 32), &__str);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1B1ADE418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OptionValue<BOOL>::debugInfo(uint64_t a1)
{
  uint64_t v2 = quasar::OptionValue<BOOL>::fallback(a1);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v31);
  int v3 = *(char *)(a1 + 31);
  if (v3 >= 0) {
    uint64_t v4 = a1 + 8;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 16);
  }
  unsigned __int16 v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
  size_t v7 = (void *)std::ostream::operator<<();
  size_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" (", 2);
  uint64_t v11 = *(void *)(v2 + 32);
  uint64_t v10 = v2 + 32;
  uint64_t v9 = v11;
  int v12 = *(char *)(v10 + 23);
  if (v12 >= 0) {
    uint64_t v13 = v10;
  }
  else {
    uint64_t v13 = v9;
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(v10 + 23);
  }
  else {
    uint64_t v14 = *(void *)(v10 + 8);
  }
  std::string v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)")", 1);
  if (*(void *)(a1 + 136))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" overrides: [", 13);
    long long v16 = *(void **)(a1 + 120);
    long long v17 = (void *)(a1 + 128);
    if (v16 != (void *)(a1 + 128))
    {
      do
      {
        long long v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\"", 1);
        int v19 = *((char *)v16 + 55);
        if (v19 >= 0) {
          uint64_t v20 = (uint64_t)(v16 + 4);
        }
        else {
          uint64_t v20 = v16[4];
        }
        if (v19 >= 0) {
          uint64_t v21 = *((unsigned __int8 *)v16 + 55);
        }
        else {
          uint64_t v21 = v16[5];
        }
        long long v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"\": ", 3);
        std::ostream::operator<<();
        long long v23 = (void *)*v17;
        long long v24 = (void *)(a1 + 128);
        if (*v17)
        {
          do
          {
            int v25 = v23;
            long long v23 = (void *)v23[1];
          }
          while (v23);
        }
        else
        {
          do
          {
            int v25 = (void *)v24[2];
            BOOL v26 = *v25 == (void)v24;
            long long v24 = v25;
          }
          while (v26);
        }
        if (v16 != v25) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", ", 2);
        }
        long long v27 = (void *)v16[1];
        if (v27)
        {
          do
          {
            std::string v28 = v27;
            long long v27 = (void *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            std::string v28 = (void *)v16[2];
            BOOL v26 = *v28 == (void)v16;
            long long v16 = v28;
          }
          while (!v26);
        }
        long long v16 = v28;
      }
      while (v28 != v17);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"]", 1);
  }
  std::stringbuf::str();
  v31[0] = *MEMORY[0x1E4FBA408];
  uint64_t v29 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v31 + *(void *)(v31[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v32[0] = v29;
  v32[1] = MEMORY[0x1E4FBA470] + 16;
  if (v33 < 0) {
    operator delete((void *)v32[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v34);
}

void sub_1B1ADE764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *quasar::OptionValue<BOOL>::addOverride(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[0] = a2;
  v8[1] = a3;
  uint64_t result = (uint64_t *)quasar::getOptional<BOOL>(a4, a1 + 8);
  __int16 v7 = (__int16)result;
  if ((unsigned __int16)result >= 0x100u)
  {
    char v6 = (char)result;
    uint64_t result = (uint64_t *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string_view>(a1 + 120, (uint64_t)v8);
    if ((uint64_t *)(a1 + 128) == result) {
      return std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<void>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_hint_unique_impl<std::string_view &,BOOL &>((uint64_t **)(a1 + 120), result, (uint64_t)v8, &v7);
    }
    else {
      *((unsigned char *)result + 56) = v6;
    }
  }
  return result;
}

uint64_t quasar::OptionValue<BOOL>::isOverridable()
{
  return 0;
}

uint64_t quasar::OptionValue<BOOL>::fallback(uint64_t a1)
{
  do
  {
    uint64_t v1 = a1;
    a1 = *(void *)(a1 + 112);
    if (!a1) {
      break;
    }
    uint64_t v2 = (uint64_t *)(v1 + 32);
    int v3 = *(char *)(v1 + 55);
    if (v3 < 0)
    {
      if (*(void *)(v1 + 40) != 9) {
        return v1;
      }
      uint64_t v2 = (uint64_t *)*v2;
    }
    else if (v3 != 9)
    {
      return v1;
    }
    uint64_t v4 = (uint64_t *)*v2;
    int v5 = *((unsigned __int8 *)v2 + 8);
  }
  while (v4 == (uint64_t *)0x746C75616665643CLL && v5 == 62);
  return v1;
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<void>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_hint_unique_impl<std::string_view &,BOOL &>(uint64_t **a1, uint64_t *a2, uint64_t a3, unsigned char *a4)
{
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<void>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::string_view &,BOOL &>((uint64_t)a1, a3, a4, (uint64_t)&__p);
  char v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v11, &v10, (const void **)__p + 4);
  __int16 v7 = *v6;
  if (*v6)
  {
    size_t v8 = (void **)__p;
    std::string __p = 0;
    if (v8) {
      std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&v13, v8);
    }
  }
  else
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v6, (uint64_t *)__p);
    return (uint64_t *)__p;
  }
  return v7;
}

void sub_1B1ADE908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<void>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::string_view &,BOOL &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  size_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = std::pair<std::string const,BOOL>::pair[abi:ne180100]<std::string_view &,BOOL &,0>(v8 + 4, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1ADE99C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,BOOL>::pair[abi:ne180100]<std::string_view &,BOOL &,0>(void *__dst, uint64_t a2, unsigned char *a3)
{
  size_t v4 = *(void *)(a2 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  char v6 = *(const void **)a2;
  if (v4 >= 0x17)
  {
    uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v8 = v4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = operator new(v8 + 1);
    __dst[1] = v4;
    __dst[2] = v9 | 0x8000000000000000;
    *__dst = v7;
  }
  else
  {
    *((unsigned char *)__dst + 23) = v4;
    uint64_t v7 = __dst;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v7, v6, v4);
LABEL_9:
  *((unsigned char *)v7 + v4) = 0;
  *((unsigned char *)__dst + ++*(void *)(result + 24) = *a3;
  return __dst;
}

void quasar::OptionValue<int>::updateOptionalFromPtree(uint64_t a1, uint64_t a2, const void **a3)
{
  int v5 = (const std::string::value_type *)(a1 + 8);
  uint64_t v6 = quasar::getOptional<int>(a2, a1 + 8);
  if (*((char *)a3 + 23) >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  uint64_t v8 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v7 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v8 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if (v7)
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v9 = a3;
    }
    else {
      uint64_t v9 = *a3;
    }
    memmove(v8, v9, v7);
  }
  *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v7) = 46;
  int v10 = *(char *)(a1 + 31);
  if (v10 >= 0) {
    uint64_t v11 = v5;
  }
  else {
    uint64_t v11 = *(const std::string::value_type **)(a1 + 8);
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    std::string::size_type v12 = *(void *)(a1 + 16);
  }
  uint64_t v13 = std::string::append(&v15, v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if ((v6 & 0xFF00000000) != 0)
  {
    *(_DWORD *)(a1 + 104) = v6;
    std::string::operator=((std::string *)(a1 + 32), &__str);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1B1ADEB90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OptionValue<int>::addOverride(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[0] = a2;
  v8[1] = a3;
  uint64_t result = quasar::getOptional<int>(a4, a1 + 8);
  uint64_t v7 = result;
  if ((result & 0xFF00000000) != 0)
  {
    int v6 = result;
    uint64_t result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string_view>(a1 + 120, (uint64_t)v8);
    if (a1 + 128 == result) {
      return (uint64_t)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<void>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_hint_unique_impl<std::string_view &,int &>((uint64_t **)(a1 + 120), (uint64_t *)result, (uint64_t)v8, &v7);
    }
    else {
      *(_DWORD *)(result + 56) = v6;
    }
  }
  return result;
}

uint64_t quasar::OptionValue<int>::isOverridable()
{
  return 0;
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<void>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_hint_unique_impl<std::string_view &,int &>(uint64_t **a1, uint64_t *a2, uint64_t a3, _DWORD *a4)
{
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<void>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::string_view &,int &>((uint64_t)a1, a3, a4, (uint64_t)&__p);
  int v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v11, &v10, (const void **)__p + 4);
  uint64_t v7 = *v6;
  if (*v6)
  {
    uint64_t v8 = (void **)__p;
    std::string __p = 0;
    if (v8) {
      std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&v13, v8);
    }
  }
  else
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v6, (uint64_t *)__p);
    return (uint64_t *)__p;
  }
  return v7;
}

void sub_1B1ADECE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<void>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::string_view &,int &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = std::pair<std::string const,int>::pair[abi:ne180100]<std::string_view &,int &,0>(v8 + 4, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1ADED7C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,int>::pair[abi:ne180100]<std::string_view &,int &,0>(void *__dst, uint64_t a2, _DWORD *a3)
{
  size_t v4 = *(void *)(a2 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v6 = *(const void **)a2;
  if (v4 >= 0x17)
  {
    uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v8 = v4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = operator new(v8 + 1);
    __dst[1] = v4;
    __dst[2] = v9 | 0x8000000000000000;
    *__dst = v7;
  }
  else
  {
    *((unsigned char *)__dst + 23) = v4;
    uint64_t v7 = __dst;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v7, v6, v4);
LABEL_9:
  *((unsigned char *)v7 + v4) = 0;
  *((_DWORD *)__dst + 6) = *a3;
  return __dst;
}

void std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 56);
  if (v3)
  {
    *(void *)(a2 + 64) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v4 = *(void **)a2;
    operator delete(v4);
  }
}

uint64_t quasar::OptionValue<int>::value(void *a1)
{
  uint64_t v2 = quasar::OptionValue<BOOL>::fallback((uint64_t)a1) + 104;
  if ((*(unsigned int (**)(void *))(*a1 + 32))(a1))
  {
    uint64_t v3 = (const void ****)a1[11];
    uint64_t v4 = (std::__shared_weak_count *)v3[1];
    if (v4)
    {
      int v5 = *v3;
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      int v6 = std::__shared_weak_count::lock(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v6)
      {
        if (v5)
        {
          uint64_t v7 = *v5;
          uint64_t v8 = v5[1];
          if (*v5 != v8)
          {
            uint64_t v9 = (uint64_t)(a1 + 15);
            uint64_t v10 = a1 + 16;
            do
            {
              uint64_t v11 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v9, v7);
              if (v10 != (void *)v11) {
                uint64_t v2 = v11 + 56;
              }
              v7 += 3;
            }
            while (v7 != v8);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
  return v2;
}

void sub_1B1ADF030(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>(uint64_t *a1, const quasar::TranslationPhraseInternal *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8F5C28F5C28F5C29 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x147AE147AE147AELL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8F5C28F5C28F5C29 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xA3D70A3D70A3D7) {
    unint64_t v9 = 0x147AE147AE147AELL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  long long v14 = (std::string *)&v10[200 * v4];
  long long v16 = &v10[200 * v9];
  quasar::TranslationPhraseInternal::TranslationPhraseInternal(v14, a2);
  std::string v15 = &v14[8].__r_.__value_.__s.__data_[8];
  std::vector<quasar::TranslationPhraseInternal>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B1ADF150(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::TranslationPhraseInternal>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,std::reverse_iterator<quasar::TranslationPhraseInternal*>,std::reverse_iterator<quasar::TranslationPhraseInternal*>,std::reverse_iterator<quasar::TranslationPhraseInternal*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,std::reverse_iterator<quasar::TranslationPhraseInternal*>,std::reverse_iterator<quasar::TranslationPhraseInternal*>,std::reverse_iterator<quasar::TranslationPhraseInternal*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 200;
  while (a3 + v10 != a5)
  {
    std::string::size_type v12 = (std::string *)(v11 + v10);
    v10 -= 200;
    quasar::TranslationPhraseInternal::TranslationPhraseInternal(v12, (const quasar::TranslationPhraseInternal *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 200;
    quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)(i - 200));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)(a4 + v7), (const quasar::TranslationPhraseInternal *)(a2 + v7));
      v7 += 200;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B1ADF320(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 200;
    do
    {
      quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)(v4 + v2));
      v2 -= 200;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

quasar::TranslationPhraseInternal *std::vector<quasar::TranslationPhraseInternal>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (quasar::TranslationPhraseInternal *)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = (quasar::TranslationPhraseInternal *)*((void *)result - 1);
  if (0x8F5C28F5C28F5C29 * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = (quasar::TranslationPhraseInternal *)((char *)v7 + 200 * a2);
      uint64_t v14 = 200 * a2;
      do
      {
        uint64_t result = quasar::TranslationPhraseInternal::TranslationPhraseInternal(v7);
        uint64_t v7 = (quasar::TranslationPhraseInternal *)((char *)v7 + 200);
        v14 -= 200;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    unint64_t v8 = 0x8F5C28F5C28F5C29 * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x147AE147AE147AELL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x8F5C28F5C28F5C29 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xA3D70A3D70A3D7) {
      unint64_t v11 = 0x147AE147AE147AELL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v21 = result;
    if (v11) {
      std::string::size_type v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>>((uint64_t)result, v11);
    }
    else {
      std::string::size_type v12 = 0;
    }
    std::string v15 = (quasar::TranslationPhraseInternal *)&v12[200 * v8];
    v18[0] = v12;
    v18[1] = v15;
    int v19 = v15;
    uint64_t v20 = &v12[200 * v11];
    uint64_t v16 = 200 * a2;
    long long v17 = (quasar::TranslationPhraseInternal *)((char *)v15 + 200 * a2);
    do
    {
      quasar::TranslationPhraseInternal::TranslationPhraseInternal(v15);
      std::string v15 = (quasar::TranslationPhraseInternal *)((char *)v15 + 200);
      v16 -= 200;
    }
    while (v16);
    int v19 = v17;
    std::vector<quasar::TranslationPhraseInternal>::__swap_out_circular_buffer(a1, v18);
    return (quasar::TranslationPhraseInternal *)std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)v18);
  }
  return result;
}

void sub_1B1ADF4A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

quasar::TranslationPhraseInternal *quasar::TranslationPhraseInternal::TranslationPhraseInternal(quasar::TranslationPhraseInternal *this)
{
  *(void *)this = 0xBF80000000000000;
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 88) = 0;
  *((unsigned char *)this + 96) = 0;
  *((unsigned char *)this + 120) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((unsigned char *)this + 64) = 0;
  *((_WORD *)this + 64) = 1;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((void *)this + 23) = 0;
  quasar::MetaInfo::MetaInfo((quasar::TranslationPhraseInternal *)((char *)this + 192));
  return this;
}

void sub_1B1ADF558(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 191) < 0) {
    operator delete(*(void **)(v2 + 168));
  }
  std::vector<quasar::TranslationTokenInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  quasar::TranslationPhrase::~TranslationPhrase((quasar::TranslationPhrase *)v2);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(a1, a2[1]);
    std::__tree<int>::destroy((uint64_t)(a2 + 5), (void *)a2[6]);
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 5) = v11 + 12;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *std::__tree<quasar::MetaInfo::StructuredPrediction::Span::Range>::__emplace_unique_key_args<quasar::MetaInfo::StructuredPrediction::Span::Range,quasar::MetaInfo::StructuredPrediction::Span::Range const&>(uint64_t **a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<quasar::MetaInfo::StructuredPrediction::Span::Range>::__find_equal<quasar::MetaInfo::StructuredPrediction::Span::Range>((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    uint64_t v6 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v6 + 28) = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

void *std::__tree<quasar::MetaInfo::StructuredPrediction::Span::Range>::__find_equal<quasar::MetaInfo::StructuredPrediction::Span::Range>(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = (void *)v4;
        int v8 = (_DWORD *)(v4 + 28);
        if (!quasar::operator<(a3, (_DWORD *)(v4 + 28))) {
          break;
        }
        uint64_t v4 = *v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!quasar::operator<(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t std::__tree<quasar::MetaInfo::StructuredPrediction::Span::Range>::__count_unique<quasar::MetaInfo::StructuredPrediction::Span::Range>(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = 1;
    do
    {
      if (!quasar::operator<(a2, (_DWORD *)v2 + 7))
      {
        if (!quasar::operator<((_DWORD *)v2 + 7, a2)) {
          return v4;
        }
        ++v2;
      }
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__emplace_back_slow_path<quasar::MetaInfo::StructuredPrediction::Span const&>(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  int v10 = v7;
  unint64_t v11 = (std::string *)&v7[80 * v3];
  uint64_t v13 = &v7[80 * v6];
  std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::construct[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span,quasar::MetaInfo::StructuredPrediction::Span const&>(a1 + 16, v11, a2);
  std::string::size_type v12 = &v11[3].__r_.__value_.__s.__data_[8];
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<quasar::MetaInfo::StructuredPrediction::Span>::~__split_buffer(&v10);
  return v8;
}

void sub_1B1ADF938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::MetaInfo::StructuredPrediction::Span>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::construct[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span,quasar::MetaInfo::StructuredPrediction::Span const&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  std::string::size_type v7 = *((void *)a3 + 6);
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[0] = v7;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  return std::vector<quasar::MetaInfo::StructuredPrediction::Span::Range>::__init_with_size[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span::Range*,quasar::MetaInfo::StructuredPrediction::Span::Range*>(&this[2].__r_.__value_.__l.__size_, *((const void **)a3 + 7), *((void *)a3 + 8), (uint64_t)(*((void *)a3 + 8) - *((void *)a3 + 7)) >> 3);
}

void sub_1B1ADF9F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<quasar::MetaInfo::StructuredPrediction::Span::Range>::__init_with_size[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span::Range*,quasar::MetaInfo::StructuredPrediction::Span::Range*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    uint64_t result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1ADFA88(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,std::reverse_iterator<quasar::MetaInfo::StructuredPrediction::Span*>,std::reverse_iterator<quasar::MetaInfo::StructuredPrediction::Span*>,std::reverse_iterator<quasar::MetaInfo::StructuredPrediction::Span*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(80 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,std::reverse_iterator<quasar::MetaInfo::StructuredPrediction::Span*>,std::reverse_iterator<quasar::MetaInfo::StructuredPrediction::Span*>,std::reverse_iterator<quasar::MetaInfo::StructuredPrediction::Span*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  uint64_t v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 80);
      *(void *)(v7 - 64) = *(void *)(a3 - 64);
      *(_OWORD *)(v7 - 80) = v8;
      *(void *)(a3 - 72) = 0;
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 80) = 0;
      long long v9 = *(_OWORD *)(a3 - 56);
      *(void *)(v7 - 40) = *(void *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v9;
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 56) = 0;
      uint64_t v10 = *(void *)(a3 - 32);
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - 32) = v10;
      *(void *)(v7 - ++*(void *)(result + 24) = 0;
      *(_OWORD *)(v7 - ++*(void *)(result + 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - ++*(void *)(result + 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v16 + 1) - 80;
      *((void *)&v16 + 1) -= 80;
      a3 -= 80;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,std::reverse_iterator<quasar::MetaInfo::StructuredPrediction::Span*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,std::reverse_iterator<quasar::MetaInfo::StructuredPrediction::Span*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,std::reverse_iterator<quasar::MetaInfo::StructuredPrediction::Span*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,std::reverse_iterator<quasar::MetaInfo::StructuredPrediction::Span*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::destroy[abi:ne180100](v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::MetaInfo::StructuredPrediction::Span>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::MetaInfo::StructuredPrediction::Span>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 80;
    std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::destroy[abi:ne180100](v4, i - 80);
  }
}

std::string *std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__init_with_size[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B1ADFDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v11 = this;
  std::string::size_type v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    int v7 = a1;
    do
    {
      std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::construct[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span,quasar::MetaInfo::StructuredPrediction::Span&>(v7, v4, v6);
      v6 += 5;
      uint64_t v4 = (std::string *)((char *)v12 + 80);
      std::string::size_type v12 = (std::string *)((char *)v12 + 80);
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,quasar::MetaInfo::StructuredPrediction::Span*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B1ADFEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::construct[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span,quasar::MetaInfo::StructuredPrediction::Span&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  std::string::size_type v7 = *((void *)a3 + 6);
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[0] = v7;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  return std::vector<quasar::MetaInfo::StructuredPrediction::Span::Range>::__init_with_size[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span::Range*,quasar::MetaInfo::StructuredPrediction::Span::Range*>(&this[2].__r_.__value_.__l.__size_, *((const void **)a3 + 7), *((void *)a3 + 8), (uint64_t)(*((void *)a3 + 8) - *((void *)a3 + 7)) >> 3);
}

void sub_1B1ADFF7C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,quasar::MetaInfo::StructuredPrediction::Span*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,quasar::MetaInfo::StructuredPrediction::Span*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,quasar::MetaInfo::StructuredPrediction::Span*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 80;
      std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void sub_1B1AE0468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1B1AE08AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1AE0CB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1AE132C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18)
{
  MEMORY[0x1B3EA7E80](&a16);
  std::ofstream::~ofstream(&a18);
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1B1AE1548(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](v1);
  _Unwind_Resume(a1);
}

void sub_1B1AE15FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)SimpleMmapBuffer;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void multiply(void *a1, float a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v5 = v3;
    uint64_t v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v12;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v12 != v7) {
            objc_enumerationMutation(v5);
          }
          uint64_t v9 = objc_msgSend(v5, "objectForKeyedSubscript:", *(void *)(*((void *)&v11 + 1) + 8 * v8), (void)v11);
          *(float *)&double v10 = a2;
          [v9 multiply:v10];

          ++v8;
        }
        while (v6 != v8);
        uint64_t v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v6);
    }
  }
}

void sub_1B1AE176C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float l2norm(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v13;
      float v6 = 0.0;
      do
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v13 != v5) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = objc_msgSend(v3, "objectForKeyedSubscript:", *(void *)(*((void *)&v12 + 1) + 8 * i), (void)v12);
          [v8 l2norm];
          float v10 = v9;

          float v6 = v6 + v10;
        }
        uint64_t v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v4);
    }
    else
    {
      float v6 = 0.0;
    }
  }
  else
  {
    float v6 = 0.0;
  }

  return v6;
}

void sub_1B1AE18D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    float v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      long long v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          long long v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  long long v11 = operator new(0x18uLL);
  *long long v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *long long v11 = *v20;
LABEL_38:
    *uint64_t v20 = v11;
    goto LABEL_39;
  }
  *long long v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1B1AE1B14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(void *result)
{
  if (result[3])
  {
    id v1 = result;
    uint64_t result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        uint64_t result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void quasar::corrective_reranking::FusedIntentClassifier::FusedIntentClassifier(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = a4;
  quasar::corrective_reranking::InitFeaturizers(a2, a3, a1 + 1);
  kaldi::quasar::LoadClassifier(a5);
}

void sub_1B1AE1BF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::unique_ptr<quasar::corrective_reranking::Featurizer>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

float quasar::corrective_reranking::FusedIntentClassifier::classifyIntent(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  kaldi::Matrix<float>::Matrix((uint64_t)v14);
  quasar::corrective_reranking::FusedIntentClassifier::featurizeParses((uint64_t *)a1, a2, a3, a4, a5, v14);
  double v10 = kaldi::Matrix<float>::Matrix((uint64_t)v13);
  (*(void (**)(void, int32x2_t *, void *, double))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), v14, v13, v10);
  float v11 = *(float *)(v13[0] + 4);
  kaldi::Matrix<float>::~Matrix((uint64_t)v13);
  kaldi::Matrix<float>::~Matrix((uint64_t)v14);
  return v11;
}

void sub_1B1AE1CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void quasar::corrective_reranking::FusedIntentClassifier::featurizeParses(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x2_t *a6)
{
  kaldi::Matrix<float>::Resize(a6, 1332920885 * ((unint64_t)(a2[1] - *a2) >> 3), (unint64_t)(a1[2] - a1[1]) >> 3, 1, 0);
  uint64_t v13 = *a2;
  uint64_t v12 = a2[1];
  if (v12 != *a2)
  {
    unint64_t v14 = 0;
    uint64_t v15 = a1[1];
    uint64_t v16 = a1[2];
    do
    {
      if (v16 == v15)
      {
        uint64_t v16 = v15;
      }
      else
      {
        unint64_t v17 = 0;
        do
        {
          uint64_t v18 = *(void *)(v15 + 8 * v17);
          uint64_t v19 = *a2 + 232 * v14;
          uint64_t v20 = *a1;
          v21[0] = a2;
          v21[1] = v19;
          v21[2] = v20;
          v21[3] = a3;
          v21[4] = a4;
          v21[5] = a5;
          *(float *)(*(void *)a6 + 4 * (int)v14 * a6[2].i32[0] + 4 * v17++) = (*(float (**)(uint64_t, void *))(*(void *)v18 + 16))(v18, v21);
          uint64_t v15 = a1[1];
          uint64_t v16 = a1[2];
        }
        while (v17 < (v16 - v15) >> 3);
        uint64_t v13 = *a2;
        uint64_t v12 = a2[1];
      }
      ++v14;
    }
    while (0x34F72C234F72C235 * ((v12 - v13) >> 3) > v14);
  }
}

void std::vector<std::unique_ptr<quasar::corrective_reranking::Featurizer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<quasar::corrective_reranking::Featurizer>>::__clear[abi:ne180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<quasar::corrective_reranking::Featurizer>>::__clear[abi:ne180100](void *result)
{
  id v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    unint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void quasar::ioutils::WriteQuasarHeader(void *a1, int a2)
{
  std::string::basic_string[abi:ne180100]<0>(v8, "qsr");
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  if (a2 == 2)
  {
    unint64_t v4 = "uapd";
  }
  else
  {
    if (a2 != 1) {
      goto LABEL_6;
    }
    unint64_t v4 = "lme";
  }
  MEMORY[0x1B3EA7B20](__p, v4);
LABEL_6:
  std::ostream::put();
  std::ostream::put();
  uint64_t v5 = (char *)a1 + *(void *)(*a1 - 24);
  if (*((uint64_t *)v5 + 2) <= 6) {
    *((void *)v5 + 2) = 7;
  }
  kaldi::WriteToken(a1, 1, (char *)v8);
  kaldi::WriteBasicType<int>(a1, 1);
  kaldi::WriteToken(a1, 1, (char *)__p);
  kaldi::WriteBasicType<int>(a1, 1);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
}

void sub_1B1AE2030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::WriteBasicType<int>(void *a1, int a2)
{
  if (a2)
  {
    std::ostream::put();
    uint64_t result = std::ostream::write();
  }
  else
  {
    unint64_t v4 = (void *)std::ostream::operator<<();
    uint64_t result = (uint64_t)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
  }
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteBasicType.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1B1AE2124(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::ioutils::ReadQuasarHeader(uint64_t *a1, int a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  long long v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  int v50 = 0;
  unsigned __int8 v49 = 1;
  kaldi::InitKaldiInputStream((uint64_t)a1, &v49);
  kaldi::ReadToken(a1, v49, (uint64_t)&v51);
  int v4 = quasar::gLogLevel;
  if (quasar::gLogLevel > 5)
  {
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"LME STREAM DUMP [Header]", 24);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v32);
    int v4 = quasar::gLogLevel;
  }
  if (v4 >= 5)
  {
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"LME STREAM DUMP ", 16);
    std::istream::tellg();
    uint64_t v5 = (void *)std::ostream::operator<<();
    float v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": qsrHeader = ", 14);
    if (v53 >= 0) {
      uint64_t v7 = (void **)&v51;
    }
    else {
      uint64_t v7 = v51;
    }
    if (v53 >= 0) {
      uint64_t v8 = HIBYTE(v53);
    }
    else {
      uint64_t v8 = v52;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
  }
  if ((SHIBYTE(v53) & 0x80000000) == 0)
  {
    if (SHIBYTE(v53) == 3)
    {
      char v9 = (void **)&v51;
      goto LABEL_16;
    }
LABEL_59:
    if (quasar::gLogLevel >= 1)
    {
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Incorrect quasar blob header", 28);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v32);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect quasar blob header");
    goto LABEL_65;
  }
  if (v52 != 3) {
    goto LABEL_59;
  }
  char v9 = v51;
LABEL_16:
  int v10 = *(unsigned __int16 *)v9;
  int v11 = *((unsigned __int8 *)v9 + 2);
  if (v10 != 29553 || v11 != 114) {
    goto LABEL_59;
  }
  kaldi::ReadBasicType<int>(a1, v49, (uint64_t)&v50);
  if (quasar::gLogLevel >= 5)
  {
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"LME STREAM DUMP ", 16);
    std::istream::tellg();
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": metaVersion = ", 16);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
  }
  if (v50 != 1)
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Incorrect quasar blob version", 29);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v32);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect quasar blob version");
LABEL_65:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::string __p = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  unsigned int v28 = 0;
  kaldi::ReadToken(a1, v49, (uint64_t)&__p);
  if (quasar::gLogLevel >= 5)
  {
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"LME STREAM DUMP ", 16);
    std::istream::tellg();
    unint64_t v14 = (void *)std::ostream::operator<<();
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": dataTypeStr = ", 16);
    if (v31 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v31 >= 0) {
      uint64_t v17 = HIBYTE(v31);
    }
    else {
      uint64_t v17 = v30;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, v17);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
  }
  if (a2 == 2)
  {
    if (SHIBYTE(v31) < 0)
    {
      if (v30 != 4) {
        goto LABEL_66;
      }
      uint64_t v19 = __p;
    }
    else
    {
      if (SHIBYTE(v31) != 4) {
        goto LABEL_66;
      }
      uint64_t v19 = &__p;
    }
    if (*v19 == 1685086581) {
      goto LABEL_52;
    }
LABEL_66:
    if (quasar::gLogLevel >= 1)
    {
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Incorrect data type for UserAcousticProfileData", 47);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v32);
    }
    long long v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Incorrect data type for UserAcousticProfileData");
LABEL_69:
    __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (a2 != 1) {
    goto LABEL_52;
  }
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
    if (SHIBYTE(v31) == 3)
    {
      uint64_t v18 = (unsigned __int16 *)&__p;
      goto LABEL_42;
    }
LABEL_46:
    if (quasar::gLogLevel >= 1)
    {
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Incorrect data type for Lme", 27);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v32);
    }
    long long v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Incorrect data type for Lme");
    goto LABEL_69;
  }
  if (v30 != 3) {
    goto LABEL_46;
  }
  uint64_t v18 = (unsigned __int16 *)__p;
LABEL_42:
  int v20 = *v18;
  int v21 = *((unsigned __int8 *)v18 + 2);
  if (v20 != 28012 || v21 != 101) {
    goto LABEL_46;
  }
LABEL_52:
  kaldi::ReadBasicType<int>(a1, v49, (uint64_t)&v28);
  if (quasar::gLogLevel >= 5)
  {
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"LME STREAM DUMP ", 16);
    std::istream::tellg();
    long long v24 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)": dataVersion = ", 16);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
  }
  uint64_t v25 = v28;
  if (SHIBYTE(v31) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v53) < 0) {
    operator delete(v51);
  }
  return v25;
}

void sub_1B1AE27E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v17 - 193) < 0) {
    operator delete(*(void **)(v16 + 280));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::InitKaldiInputStream(uint64_t a1, unsigned char *a2)
{
  if (std::istream::peek())
  {
    *a2 = 0;
    return 1;
  }
  else
  {
    std::istream::get();
    if (std::istream::peek() << 24 == 1107296256)
    {
      std::istream::get();
      uint64_t result = 1;
      *a2 = 1;
    }
    else
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Was looking for B, but got ", 27);
        int v4 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\n", 1);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
      }
      return 0;
    }
  }
  return result;
}

void sub_1B1AE29CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::quasar::OnlineLASDecodable::OnlineLASDecodable(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)uint64_t result = &unk_1F0A50C38;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_DWORD *)(result + ++*(void *)(result + 24) = a4;
  return result;
}

void kaldi::quasar::OnlineLASDecodable::~OnlineLASDecodable(kaldi::quasar::OnlineLASDecodable *this)
{
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::quasar::OnlineLASDecodable::Compute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v18 = 0;
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v16 = 0;
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t, uint64_t, void **, void **))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), a3, a4, v17, v15);
  if (v7)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "loglikes");
    uint64_t v19 = __p;
    uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a5, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v19);
    char v9 = (void *)*((void *)v8 + 5);
    if (v9)
    {
      *((void *)v8 + 6) = v9;
      operator delete(v9);
      *((void *)v8 + 5) = 0;
      *((void *)v8 + 6) = 0;
      *((void *)v8 + 7) = 0;
    }
    *(_OWORD *)(v8 + 40) = *(_OWORD *)v17;
    *((void *)v8 + 7) = v18;
    v17[1] = 0;
    uint64_t v18 = 0;
    v17[0] = 0;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "att_probs");
    uint64_t v19 = __p;
    int v10 = std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a5, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v19);
    int v11 = (void *)*((void *)v10 + 5);
    if (v11)
    {
      *((void *)v10 + 6) = v11;
      operator delete(v11);
      *((void *)v10 + 5) = 0;
      *((void *)v10 + 6) = 0;
      *((void *)v10 + 7) = 0;
    }
    *(_OWORD *)(v10 + 40) = *(_OWORD *)v15;
    *((void *)v10 + 7) = v16;
    v15[1] = 0;
    uint64_t v16 = 0;
    v15[0] = 0;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    ++*(_DWORD *)(a1 + 32);
  }
  else
  {
    kaldi::quasar::OnlineLASDecodable::TryEncode((kaldi::quasar::OnlineLASDecodable *)a1);
  }
  if (v15[0])
  {
    v15[1] = v15[0];
    operator delete(v15[0]);
  }
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
  return v7;
}

void sub_1B1AE2C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::OnlineLASDecodable::TryEncode(kaldi::quasar::OnlineLASDecodable *this)
{
  kaldi::CuMatrix<float>::CuMatrix(v8, *((unsigned int *)this + 6), *(unsigned int *)(*((void *)this + 2) + 24), 1, 0, 0);
  if (*((int *)this + 6) >= 1)
  {
    uint64_t v2 = 0;
    signed int v3 = *((_DWORD *)this + 7);
    while (kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)this + 2), v3, 1))
    {
      v7[1] = *(void *)&v8[1] + 4 * v10 * (int)v2;
      v7[0] = &unk_1F0A472D0;
      _DWORD v7[2] = v9;
      void v7[3] = v11;
      kaldi::OnlineFeatureMatrix::GetFrame(*((kaldi::OnlineFeatureMatrix **)this + 2), *((_DWORD *)this + 7), v6);
      kaldi::CuVectorBase<float>::CopyFromVec<float>(v7, (uint64_t)v6);
      uint64_t v2 = (v2 + 1);
      int v4 = *((_DWORD *)this + 6);
      signed int v3 = *((_DWORD *)this + 7) + 1;
      *((_DWORD *)this + 7) = v3;
      if ((int)v2 >= v4) {
        goto LABEL_7;
      }
    }
    if (!v2) {
      goto LABEL_10;
    }
LABEL_7:
    if ((int)v2 < *((_DWORD *)this + 6)) {
      kaldi::CuMatrix<float>::Resize(v8, v2, *(unsigned int *)(*((void *)this + 2) + 24), 2, 0);
    }
    (*(void (**)(void, int32x2_t *))(**((void **)this + 1) + 16))(*((void *)this + 1), v8);
  }
LABEL_10:
  if (!kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)this + 2), *((_DWORD *)this + 7), 1)) {
    (*(void (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v8);
}

void sub_1B1AE2DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::OnlineLASDecodable::Compute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v12[0] = 0;
  v12[1] = 0;
  uint64_t v13 = 0;
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t, void **))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8), a3, v12);
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "loglikes");
    char v14 = __p;
    uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v14);
    uint64_t v8 = (void *)*((void *)v7 + 5);
    if (v8)
    {
      *((void *)v7 + 6) = v8;
      operator delete(v8);
      *((void *)v7 + 5) = 0;
      *((void *)v7 + 6) = 0;
      *((void *)v7 + 7) = 0;
    }
    *(_OWORD *)(v7 + 40) = *(_OWORD *)v12;
    *((void *)v7 + 7) = v13;
    v12[1] = 0;
    uint64_t v13 = 0;
    v12[0] = 0;
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    ++*(_DWORD *)(a1 + 32);
  }
  else
  {
    kaldi::quasar::OnlineLASDecodable::TryEncode((kaldi::quasar::OnlineLASDecodable *)a1);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
  return v6;
}

void sub_1B1AE2F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::OnlineLASDecodable::BOSIndex(kaldi::quasar::OnlineLASDecodable *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 104))();
}

uint64_t kaldi::quasar::OnlineLASDecodable::EOSIndex(kaldi::quasar::OnlineLASDecodable *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 112))();
}

uint64_t kaldi::quasar::OnlineLASDecodable::SilIndex(kaldi::quasar::OnlineLASDecodable *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 120))();
}

uint64_t kaldi::quasar::OnlineLASDecodable::FrameOffset(kaldi::quasar::OnlineLASDecodable *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t kaldi::quasar::OnlineLASAttentionChecker::OnlineLASAttentionChecker(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t result = std::unordered_set<int>::unordered_set(a1, a5);
  *(void *)(result + 40) = a2;
  *(void *)(result + 48) = a3;
  *(_DWORD *)(result + 56) = a4;
  return result;
}

void kaldi::quasar::OnlineLASAttentionChecker::Check(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, void *a6@<X8>)
{
  unint64_t v11 = a4;
  LOBYTE(v50[0]) = 0;
  std::vector<BOOL>::vector(a6, a4, (unsigned __int8 *)v50);
  int v45 = a5;
  if (*(_DWORD *)(a1 + 44) < a5)
  {
    uint64_t v12 = *(float **)a2;
    uint64_t v13 = *(void *)(a2 + 8);
    uint64_t v15 = *(float **)a3;
    uint64_t v14 = *(void *)(a3 + 8);
    uint64_t v53 = *(float **)a3;
    int v49 = a4;
    if (a4 >= 1)
    {
      unint64_t v16 = 0;
      unint64_t v17 = ((v13 - (uint64_t)v12) >> 2) / v11;
      uint64_t v47 = (int)v17;
      unint64_t v46 = (unint64_t)v17 >> 1;
      unint64_t v18 = ((v14 - (uint64_t)v15) >> 2) / v11 / v45;
      while (1)
      {
        uint64_t v19 = &v12[v47];
        int v20 = v12;
        if (v46)
        {
          int v21 = v12 + 1;
          float v22 = *v12;
          int v20 = v12;
          long long v23 = v12 + 1;
          do
          {
            float v24 = *v23++;
            float v25 = v24;
            if (v22 < v24)
            {
              float v22 = v25;
              int v20 = v21;
            }
            int v21 = v23;
          }
          while (v23 != v19);
        }
        BOOL v26 = *(_DWORD *)(a1 + 56) == ((unint64_t)((char *)v20 - (char *)v12) >> 2);
        uint64_t v27 = 44;
        if (v26) {
          uint64_t v27 = 48;
        }
        int v28 = *(_DWORD *)(a1 + v27);
        int v52 = 0;
        if ((int)v18 <= 0) {
          break;
        }
        int v29 = v45 - v28;
        char v30 = 1;
        do
        {
          if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)a1, &v52))
          {
            v15 += v45;
            long long v51 = v15;
            unint64_t v31 = kaldi::quasar::OnlineLASAttentionChecker::AttentionLocation(a1, &v53, &v51);
            if (*(float *)(a1 + 40) > *(float *)&v31)
            {
              if (kaldi::g_kaldi_verbose_level >= 3)
              {
                kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v50, 3);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"beam ", 5);
                long long v32 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" of ", 4);
                long long v33 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", head ", 7);
                long long v34 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" of ", 4);
                long long v35 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": alignment too low: ", 21);
                long long v36 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" < ", 3);
                std::ostream::operator<<();
                kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v50);
              }
              char v30 = 0;
            }
            if (v29 < SHIDWORD(v31))
            {
              if (kaldi::g_kaldi_verbose_level >= 3)
              {
                kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v50, 3);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"beam ", 5);
                long long v37 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" of ", 4);
                long long v38 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)": head ", 7);
                long long v39 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" of ", 4);
                long long v40 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)": location was ", 15);
                long long v41 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" > ", 3);
                std::ostream::operator<<();
                kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v50);
              }
              char v30 = 0;
            }
            uint64_t v53 = v15;
          }
          ++v52;
        }
        while (v52 < (int)v18);
        long long v42 = (uint64_t *)(*a6 + 8 * (v16 >> 6));
        uint64_t v43 = 1 << v16;
        if (v30) {
          goto LABEL_27;
        }
        uint64_t v44 = *v42 & ~v43;
LABEL_28:
        uint64_t *v42 = v44;
        ++v16;
        uint64_t v12 = v19;
        if (v16 == v49) {
          return;
        }
      }
      long long v42 = (uint64_t *)(*a6 + 8 * (v16 >> 6));
      uint64_t v43 = 1 << v16;
LABEL_27:
      uint64_t v44 = *v42 | v43;
      goto LABEL_28;
    }
  }
}

void sub_1B1AE33D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, char a16)
{
  if (*a14) {
    operator delete(*a14);
  }
  _Unwind_Resume(exception_object);
}

unint64_t kaldi::quasar::OnlineLASAttentionChecker::AttentionLocation(uint64_t a1, float **a2, float **a3)
{
  uint64_t v6 = (char *)*a3 - (char *)*a2;
  unint64_t v7 = (unint64_t)v6 >> 2;
  std::vector<float>::vector(&__p, (int)(v6 >> 2));
  uint64_t v8 = *a2;
  unsigned int v9 = *a3;
  int v10 = (float *)__p;
  if (*a2 != v9)
  {
    float v12 = *v8;
    unint64_t v11 = v8 + 1;
    float v13 = v12;
    *(float *)std::string __p = v12;
    if (v11 != v9)
    {
      uint64_t v14 = v10 + 1;
      do
      {
        float v15 = *v11++;
        float v13 = v13 + v15;
        *v14++ = v13;
      }
      while (v11 != v9);
    }
  }
  uint64_t v16 = *(int *)(a1 + 52);
  unint64_t v17 = v30;
  if ((int)v16 < (int)v7 && &v30[-v16] != v10)
  {
    uint64_t v19 = v30 - 1;
    uint64_t v20 = -1 * v16;
    do
    {
      *uint64_t v19 = *v19 - v19[v20];
      --v19;
    }
    while (&v19[v20 + 1] != v10);
  }
  if (v10 == v17)
  {
    float v22 = (char *)v10;
  }
  else
  {
    int v21 = v10 + 1;
    float v22 = (char *)v10;
    if (v10 + 1 != v17)
    {
      float v23 = *v10;
      float v22 = (char *)v10;
      float v24 = v10 + 1;
      do
      {
        float v25 = *v24++;
        float v26 = v25;
        if (v23 < v25)
        {
          float v23 = v26;
          float v22 = (char *)v21;
        }
        int v21 = v24;
      }
      while (v24 != v17);
    }
  }
  unsigned int v27 = *(_DWORD *)v22;
  if (v10)
  {
    char v30 = v10;
    operator delete(v10);
  }
  return v27 | ((unint64_t)((unint64_t)(v22 - (char *)v10) >> 2) << 32);
}

kaldi::quasar::OnlineLASSpeculativeDecodable *kaldi::quasar::OnlineLASSpeculativeDecodable::OnlineLASSpeculativeDecodable(kaldi::quasar::OnlineLASSpeculativeDecodable *this, kaldi::quasar::CEStatelessEncoderNet *a2, kaldi::quasar::CEStatelessDecoderNet *a3, kaldi::OnlineFeatureMatrix *a4, const kaldi::quasar::OnlineLASAttentionChecker *a5, int a6, int a7, int a8, BOOL a9)
{
  *(void *)this = &unk_1F0A51518;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = a3;
  *((void *)this + 3) = a4;
  *((void *)this + 4) = a5;
  *((_DWORD *)this + 10) = a6;
  *((_DWORD *)this + 11) = a7;
  *((_DWORD *)this + 12) = a8;
  *((unsigned char *)this + 52) = a9;
  int v10 = (void **)((char *)this + 64);
  *(_OWORD *)((char *)this + 88) = 0u;
  unint64_t v11 = (void **)((char *)this + 88);
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 180) = 0u;
  *((_WORD *)this + 98) = 257;
  *((_DWORD *)this + 50) = 0;
  *((unsigned char *)this + 204) = 0;
  kaldi::quasar::CEStatelessEncoderNet::InitialStates(a2, &v13);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate(v10);
  *((_OWORD *)this + 4) = v13;
  *((void *)this + 10) = v14;
  uint64_t v14 = 0;
  long long v13 = 0uLL;
  float v15 = (void **)&v13;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v15);
  kaldi::quasar::CEStatelessDecoderNet::InitialStates(*((kaldi::quasar::CEStatelessDecoderNet **)this + 2), &v13);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate(v11);
  *(_OWORD *)((char *)this + 88) = v13;
  *((void *)this + 13) = v14;
  uint64_t v14 = 0;
  long long v13 = 0uLL;
  float v15 = (void **)&v13;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v15);
  return this;
}

{
  return kaldi::quasar::OnlineLASSpeculativeDecodable::OnlineLASSpeculativeDecodable(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1B1AE3664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v11 = *((void *)v9 + 23);
  *((void *)v9 + 23) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  float v12 = (void *)*((void *)v9 + 20);
  if (v12)
  {
    *((void *)v9 + 21) = v12;
    operator delete(v12);
  }
  std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~deque[abi:ne180100]((void *)v9 + 14);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a9);
  quasar::Bitmap::~Bitmap(v9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::OnlineLASSpeculativeDecodable::~OnlineLASSpeculativeDecodable(kaldi::quasar::OnlineLASSpeculativeDecodable *this)
{
  *(void *)this = &unk_1F0A51518;
  uint64_t v2 = *((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  signed int v3 = (void *)*((void *)this + 20);
  if (v3)
  {
    *((void *)this + 21) = v3;
    operator delete(v3);
  }
  std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~deque[abi:ne180100]((void *)this + 14);
  int v4 = (void **)((char *)this + 88);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v4);
  int v4 = (void **)((char *)this + 64);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v4);
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  kaldi::quasar::OnlineLASSpeculativeDecodable::~OnlineLASSpeculativeDecodable(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::quasar::OnlineLASSpeculativeDecodable::Compute(uint64_t (***a1)(void, uint64_t, void **, void **, uint64_t, uint64_t), uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  int v10 = operator new(4uLL);
  unint64_t v17 = v10;
  *int v10 = 0;
  unint64_t v18 = v10 + 1;
  uint64_t v19 = v10 + 1;
  uint64_t v11 = operator new(4uLL);
  std::string __p = v11;
  *uint64_t v11 = a3;
  float v15 = v11 + 1;
  uint64_t v16 = v11 + 1;
  uint64_t v12 = (**a1)(a1, a2, &v17, &__p, a4, a5);
  if (__p)
  {
    float v15 = __p;
    operator delete(__p);
  }
  if (v17)
  {
    unint64_t v18 = v17;
    operator delete(v17);
  }
  return v12;
}

void sub_1B1AE38AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::OnlineLASSpeculativeDecodable::CheckDecoderSuccess(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  int v3 = v2 & 0x3F;
  if (v2 <= 0x3F && v3 == 0)
  {
LABEL_12:
    *(_DWORD *)(a1 + 192) = 0;
    return 1;
  }
  else
  {
    int v6 = 0;
    unint64_t v7 = *(void **)a2;
    while (((*v7 >> v6) & 1) != 0)
    {
      v7 += v6 == 63;
      if (v6 == 63) {
        int v6 = 0;
      }
      else {
        ++v6;
      }
      if (v6 == v3 && v7 == (void *)(*(void *)a2 + 8 * (v2 >> 6))) {
        goto LABEL_12;
      }
    }
    int v9 = *(_DWORD *)(a1 + 192);
    *(_DWORD *)(a1 + 192) = v9 + 1;
    if (v9 >= 7 && (int)v2 >= 1)
    {
      unint64_t v11 = 0;
      int v12 = kaldi::g_kaldi_verbose_level;
      do
      {
        if (((*(void *)(*(void *)a2 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) != 0 || v12 <= 2)
        {
          ++v11;
        }
        else
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v16, 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Beam ", 5);
          ++v11;
          long long v13 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" of ", 4);
          uint64_t v14 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" has failed decoder checks ", 27);
          float v15 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" times; could num-forbidden-frames[-silence] be too low?",
            56);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v16);
          int v12 = kaldi::g_kaldi_verbose_level;
        }
      }
      while (v11 != v2);
    }
    return 0;
  }
}

void sub_1B1AE3A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::quasar::OnlineLASSpeculativeDecodable::Compute(kaldi::quasar::OnlineLASSpeculativeDecodable *this, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  if (*((unsigned char *)this + 196))
  {
    *((unsigned char *)this + 196) = 0;
    kaldi::quasar::OnlineLASSpeculativeDecodable::Encode((uint64_t)this);
  }
  if (!*((void *)this + 23))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::clear(a5);
    return 1;
  }
  long long v128 = 0uLL;
  uint64_t v129 = 0;
  v126[0] = 0;
  v126[1] = 0;
  uint64_t v127 = 0;
  v124[0] = 0;
  v124[1] = 0;
  uint64_t v125 = 0;
  uint64_t v118 = (void **)((char *)this + 88);
  kaldi::quasar::CEStatelessDecoderNet::Decode(*((void *)this + 2), (void *)this + 11, (uint64_t *)this + 23, a3, (uint64_t)a4, *((unsigned __int8 *)this + 197), (uint64_t)&v128, (uint64_t)v126, (uint64_t)v124);
  int v11 = *((_DWORD *)this + 14);
  uint64_t v12 = (a4[1] - *a4) >> 2;
  int v13 = v11
      / (int)kaldi::quasar::CEStatelessEncoderNet::FrameSubsamplingFactor(*((kaldi::quasar::CEStatelessEncoderNet **)this
                                                                          + 1));
  if (*((unsigned char *)this + 204)
    || !kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)this + 3), *((_DWORD *)this + 14), 1))
  {
    goto LABEL_9;
  }
  kaldi::quasar::OnlineLASAttentionChecker::Check(*((void *)this + 4), (uint64_t)v126, (uint64_t)v124, v12, v13, __p);
  int v14 = kaldi::quasar::OnlineLASSpeculativeDecodable::CheckDecoderSuccess((uint64_t)this, (uint64_t)__p);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v14)
  {
LABEL_9:
    ++*((_DWORD *)this + 15);
    *((unsigned char *)this + 197) = 1;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate(v118);
    *(_OWORD *)((char *)this + 88) = v128;
    *((void *)this + 13) = v129;
    uint64_t v129 = 0;
    long long v128 = 0uLL;
    float v15 = (void **)*((void *)this + 15);
    uint64_t v16 = (void **)*((void *)this + 16);
    if (v16 == v15)
    {
      unint64_t v17 = (void *)((char *)this + 152);
      uint64_t v16 = (void **)*((void *)this + 15);
    }
    else
    {
      unint64_t v17 = (void *)((char *)this + 152);
      unint64_t v18 = *((void *)this + 18);
      uint64_t v19 = &v15[v18 / 0xAA];
      uint64_t v20 = (char *)*v19 + 24 * (v18 % 0xAA);
      unint64_t v21 = (unint64_t)v15[(*((void *)this + 19) + v18) / 0xAA] + 24 * ((*((void *)this + 19) + v18) % 0xAA);
      if (v20 != (char *)v21)
      {
        do
        {
          __p[0] = v20;
          std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          v20 += 24;
          if (v20 - (unsigned char *)*v19 == 4080)
          {
            float v22 = (char *)v19[1];
            ++v19;
            uint64_t v20 = v22;
          }
        }
        while (v20 != (char *)v21);
        float v15 = (void **)*((void *)this + 15);
        uint64_t v16 = (void **)*((void *)this + 16);
      }
    }
    *unint64_t v17 = 0;
    unint64_t v24 = (char *)v16 - (char *)v15;
    if (v24 >= 0x11)
    {
      do
      {
        operator delete(*v15);
        uint64_t v25 = *((void *)this + 16);
        float v15 = (void **)(*((void *)this + 15) + 8);
        *((void *)this + 15) = v15;
        unint64_t v24 = v25 - (void)v15;
      }
      while (v24 > 0x10);
    }
    if (v24 >> 3 == 1)
    {
      uint64_t v26 = 85;
    }
    else
    {
      if (v24 >> 3 != 2)
      {
LABEL_24:
        *((void *)this + 21) = *((void *)this + 20);
        kaldi::quasar::OnlineLASSpeculativeDecodable::AccumulateAlignments((uint64_t *)v124, v12, v13, __p);
        if (v124[0])
        {
          v124[1] = v124[0];
          operator delete(v124[0]);
        }
        *(_OWORD *)unint64_t v124 = *(_OWORD *)__p;
        uint64_t v125 = v123;
        std::string::basic_string[abi:ne180100]<0>(__p, "loglikes");
        int v119 = __p;
        unsigned int v27 = std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a5, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v119);
        int v28 = (void *)*((void *)v27 + 5);
        if (v28)
        {
          *((void *)v27 + 6) = v28;
          operator delete(v28);
          *((void *)v27 + 5) = 0;
          *((void *)v27 + 6) = 0;
          *((void *)v27 + 7) = 0;
        }
        *(_OWORD *)(v27 + 40) = *(_OWORD *)v126;
        *((void *)v27 + 7) = v127;
        v126[1] = 0;
        uint64_t v127 = 0;
        v126[0] = 0;
        if (SHIBYTE(v123) < 0) {
          operator delete(__p[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "att_probs");
        int v119 = __p;
        int v29 = std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a5, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v119);
        char v30 = (void *)*((void *)v29 + 5);
        if (v30)
        {
          *((void *)v29 + 6) = v30;
          operator delete(v30);
          *((void *)v29 + 5) = 0;
          *((void *)v29 + 6) = 0;
          *((void *)v29 + 7) = 0;
        }
        *(_OWORD *)(v29 + 40) = *(_OWORD *)v124;
        *((void *)v29 + 7) = v125;
        v124[1] = 0;
        uint64_t v125 = 0;
        v124[0] = 0;
        if (SHIBYTE(v123) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v23 = 1;
        goto LABEL_35;
      }
      uint64_t v26 = 170;
    }
    *((void *)this + 18) = v26;
    goto LABEL_24;
  }
  *((unsigned char *)this + 196) = 1;
  if (*((unsigned char *)this + 197)
    && kaldi::quasar::CEStatelessDecoderNet::CopyCellOutputs(*((void **)this + 2), &v128, (uint64_t *)v118))
  {
    *((unsigned char *)this + 197) = 0;
  }
  if (*((int *)this + 11) < 1) {
    goto LABEL_114;
  }
  uint64_t v117 = (char **)((char *)this + 160);
  std::string::size_type v115 = a6;
  if (*((int *)this + 12) < 1)
  {
    uint64_t v34 = *((void *)this + 19);
    uint64_t v33 = *((void *)this + 21);
LABEL_54:
    if (v34)
    {
      int v35 = 0;
      goto LABEL_78;
    }
  }
  else
  {
    int v32 = 0;
    while (*((void *)this + 19))
    {
      std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::pop_back((void *)this + 14);
      uint64_t v33 = *((void *)this + 21) - 8;
      *((void *)this + 21) = v33;
      if (++v32 >= *((_DWORD *)this + 12))
      {
        uint64_t v34 = *((void *)this + 19);
        goto LABEL_54;
      }
    }
  }
  std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>((void *)this + 14, (uint64_t)&v128);
  std::vector<float>::resize((uint64_t)v126, (((char *)v126[1] - (char *)v126[0]) >> 2) / (unint64_t)((uint64_t)(a4[1] - *a4) >> 2));
  if (v126[0] == v126[1])
  {
    long long v37 = (char *)v126[0];
  }
  else
  {
    long long v36 = (float *)((char *)v126[0] + 4);
    long long v37 = (char *)v126[0];
    if ((char *)v126[0] + 4 != v126[1])
    {
      float v38 = *(float *)v126[0];
      long long v37 = (char *)v126[0];
      long long v39 = (float *)((char *)v126[0] + 4);
      do
      {
        float v40 = *v39++;
        float v41 = v40;
        if (v38 < v40)
        {
          float v38 = v41;
          long long v37 = (char *)v36;
        }
        long long v36 = v39;
      }
      while (v39 != v126[1]);
    }
  }
  unint64_t v42 = (unint64_t)(v37 - (char *)v126[0]) >> 2;
  unint64_t v43 = *((void *)this + 22);
  uint64_t v44 = (char *)*((void *)this + 21);
  if ((unint64_t)v44 >= v43)
  {
    uint64_t v45 = (v44 - *v117) >> 3;
    unint64_t v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v47 = v43 - (void)*v117;
    if (v47 >> 2 > v46) {
      unint64_t v46 = v47 >> 2;
    }
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v48 = v46;
    }
    int v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 176, v48);
    int v50 = &v49[8 * v45];
    int v52 = &v49[8 * v51];
    *(_DWORD *)int v50 = v42;
    *((_DWORD *)v50 + 1) = *(_DWORD *)v37;
    uint64_t v33 = (uint64_t)(v50 + 8);
    uint64_t v54 = (char *)*((void *)this + 20);
    uint64_t v53 = (char *)*((void *)this + 21);
    if (v53 != v54)
    {
      do
      {
        uint64_t v55 = *((void *)v53 - 1);
        v53 -= 8;
        *((void *)v50 - 1) = v55;
        v50 -= 8;
      }
      while (v53 != v54);
      uint64_t v53 = *v117;
    }
    *((void *)this + 20) = v50;
    *((void *)this + 21) = v33;
    *((void *)this + 22) = v52;
    if (v53) {
      operator delete(v53);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v44 = v42;
    *((_DWORD *)v44 + 1) = *(_DWORD *)v37;
    uint64_t v33 = (uint64_t)(v44 + 8);
  }
  *((void *)this + 21) = v33;
  int v35 = 1;
LABEL_78:
  int v116 = (char *)this + 176;
  LODWORD(v56) = *(_DWORD *)(v33 - 8);
  while (1)
  {
    int v57 = (*(uint64_t (**)(kaldi::quasar::OnlineLASSpeculativeDecodable *))(*(void *)this + 24))(this);
    int v58 = *((_DWORD *)this + 11);
    if (v56 == v57 || v35 >= v58) {
      break;
    }
    uint64_t v60 = *((void *)this + 2);
    unint64_t v61 = *((void *)this + 19) + *((void *)this + 18) - 1;
    uint64_t v62 = *(void *)(*((void *)this + 15) + 8 * (v61 / 0xAA));
    long long v63 = operator new(4uLL);
    __p[0] = v63;
    *long long v63 = 0;
    __p[1] = v63 + 1;
    unint64_t v123 = v63 + 1;
    uint64_t v64 = operator new(4uLL);
    int v119 = v64;
    *uint64_t v64 = v56;
    unint64_t v120 = v64 + 1;
    unint64_t v121 = v64 + 1;
    kaldi::quasar::CEStatelessDecoderNet::Decode(v60, (void *)(v62 + 24 * (v61 % 0xAA)), (uint64_t *)this + 23, (uint64_t)__p, (uint64_t)&v119, 1, (uint64_t)&v128, (uint64_t)v126, (uint64_t)v124);
    if (v119)
    {
      unint64_t v120 = v119;
      operator delete(v119);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>((void *)this + 14, (uint64_t)&v128);
    if (v126[0] == v126[1])
    {
      long long v66 = (char *)v126[0];
    }
    else
    {
      uint64_t v65 = (float *)((char *)v126[0] + 4);
      long long v66 = (char *)v126[0];
      if ((char *)v126[0] + 4 != v126[1])
      {
        float v67 = *(float *)v126[0];
        long long v66 = (char *)v126[0];
        uint64_t v68 = (float *)((char *)v126[0] + 4);
        do
        {
          float v69 = *v68++;
          float v70 = v69;
          if (v67 < v69)
          {
            float v67 = v70;
            long long v66 = (char *)v65;
          }
          uint64_t v65 = v68;
        }
        while (v68 != v126[1]);
      }
    }
    unint64_t v56 = (unint64_t)(v66 - (char *)v126[0]) >> 2;
    uint64_t v72 = (_DWORD *)*((void *)this + 21);
    unint64_t v71 = *((void *)this + 22);
    if ((unint64_t)v72 >= v71)
    {
      uint64_t v74 = ((char *)v72 - *v117) >> 3;
      unint64_t v75 = v74 + 1;
      if ((unint64_t)(v74 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v76 = v71 - (void)*v117;
      if (v76 >> 2 > v75) {
        unint64_t v75 = v76 >> 2;
      }
      if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v77 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v77 = v75;
      }
      unint64_t v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v116, v77);
      uint64_t v80 = &v78[8 * v74];
      *(_DWORD *)uint64_t v80 = v56;
      *((_DWORD *)v80 + 1) = *(_DWORD *)v66;
      long long v82 = (char *)*((void *)this + 20);
      uint64_t v81 = (char *)*((void *)this + 21);
      unint64_t v83 = v80;
      if (v81 != v82)
      {
        do
        {
          uint64_t v84 = *((void *)v81 - 1);
          v81 -= 8;
          *((void *)v83 - 1) = v84;
          v83 -= 8;
        }
        while (v81 != v82);
        uint64_t v81 = *v117;
      }
      unint64_t v73 = v80 + 8;
      *((void *)this + 20) = v83;
      *((void *)this + 21) = v80 + 8;
      *((void *)this + 22) = &v78[8 * v79];
      if (v81) {
        operator delete(v81);
      }
    }
    else
    {
      *uint64_t v72 = v56;
      v72[1] = *(_DWORD *)v66;
      unint64_t v73 = v72 + 2;
    }
    *((void *)this + 21) = v73;
    ++v35;
  }
  if (v58 >= 1)
  {
    a6 = v115;
    if (*((unsigned char *)this + 52)
      && (*((unsigned char *)this + 204)
       || !kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)this + 3), *((_DWORD *)this + 14), 1)))
    {
      if (*((int *)this + 12) >= 1)
      {
        int v85 = 0;
        do
        {
          if (!*((void *)this + 19)) {
            break;
          }
          std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::pop_back((void *)this + 14);
          *((void *)this + 21) -= 8;
          ++v85;
        }
        while (v85 < *((_DWORD *)this + 12));
      }
      uint64_t v86 = *((void *)this + 21);
      if (*((void *)this + 20) == v86) {
        int v87 = (_DWORD *)*a4;
      }
      else {
        int v87 = (_DWORD *)(v86 - 8);
      }
      LODWORD(v88) = *v87;
      while (v88 != (*(unsigned int (**)(kaldi::quasar::OnlineLASSpeculativeDecodable *))(*(void *)this + 24))(this))
      {
        uint64_t v89 = *((void *)this + 19);
        unint64_t v90 = (void *)((char *)this + 88);
        if (v89) {
          unint64_t v90 = (void *)(*(void *)(*((void *)this + 15) + 8 * ((v89 + *((void *)this + 18) - 1) / 0xAAuLL))
        }
                         + 24 * ((v89 + *((void *)this + 18) - 1) % 0xAAuLL));
        uint64_t v91 = *((void *)this + 2);
        uint64_t v92 = operator new(4uLL);
        __p[0] = v92;
        *uint64_t v92 = 0;
        __p[1] = v92 + 1;
        unint64_t v123 = v92 + 1;
        int v93 = operator new(4uLL);
        int v119 = v93;
        *int v93 = v88;
        unint64_t v120 = v93 + 1;
        unint64_t v121 = v93 + 1;
        if (v89) {
          BOOL v94 = 1;
        }
        else {
          BOOL v94 = *((unsigned char *)this + 197) != 0;
        }
        kaldi::quasar::CEStatelessDecoderNet::Decode(v91, v90, (uint64_t *)this + 23, (uint64_t)__p, (uint64_t)&v119, v94, (uint64_t)&v128, (uint64_t)v126, (uint64_t)v124);
        if (v119)
        {
          unint64_t v120 = v119;
          operator delete(v119);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>((void *)this + 14, (uint64_t)&v128);
        if (v126[0] == v126[1])
        {
          unint64_t v96 = (char *)v126[0];
        }
        else
        {
          uint64_t v95 = (float *)((char *)v126[0] + 4);
          unint64_t v96 = (char *)v126[0];
          if ((char *)v126[0] + 4 != v126[1])
          {
            float v97 = *(float *)v126[0];
            unint64_t v96 = (char *)v126[0];
            uint64_t v98 = (float *)((char *)v126[0] + 4);
            do
            {
              float v99 = *v98++;
              float v100 = v99;
              if (v97 < v99)
              {
                float v97 = v100;
                unint64_t v96 = (char *)v95;
              }
              uint64_t v95 = v98;
            }
            while (v98 != v126[1]);
          }
        }
        unint64_t v88 = (unint64_t)(v96 - (char *)v126[0]) >> 2;
        int v102 = (_DWORD *)*((void *)this + 21);
        unint64_t v101 = *((void *)this + 22);
        if ((unint64_t)v102 >= v101)
        {
          uint64_t v104 = ((char *)v102 - *v117) >> 3;
          unint64_t v105 = v104 + 1;
          if ((unint64_t)(v104 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v106 = v101 - (void)*v117;
          if (v106 >> 2 > v105) {
            unint64_t v105 = v106 >> 2;
          }
          if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v107 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v107 = v105;
          }
          uint64_t v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v116, v107);
          std::string::size_type v110 = &v108[8 * v104];
          *(_DWORD *)std::string::size_type v110 = v88;
          *((_DWORD *)v110 + 1) = *(_DWORD *)v96;
          uint64_t v112 = (char *)*((void *)this + 20);
          unint64_t v111 = (char *)*((void *)this + 21);
          uint64_t v113 = v110;
          if (v111 != v112)
          {
            do
            {
              uint64_t v114 = *((void *)v111 - 1);
              v111 -= 8;
              *((void *)v113 - 1) = v114;
              v113 -= 8;
            }
            while (v111 != v112);
            unint64_t v111 = *v117;
          }
          long long v103 = v110 + 8;
          *((void *)this + 20) = v113;
          *((void *)this + 21) = v110 + 8;
          *((void *)this + 22) = &v108[8 * v109];
          if (v111) {
            operator delete(v111);
          }
        }
        else
        {
          _DWORD *v102 = v88;
          v102[1] = *(_DWORD *)v96;
          long long v103 = v102 + 2;
        }
        *((void *)this + 21) = v103;
      }
      uint64_t v23 = 0;
      goto LABEL_35;
    }
LABEL_114:
    uint64_t v23 = 0;
    goto LABEL_35;
  }
  uint64_t v23 = 0;
  a6 = v115;
LABEL_35:
  if (a6 && (void *)((char *)this + 160) != a6) {
    std::vector<std::pair<int,float>>::__assign_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>(a6, *((uint64_t **)this + 20), *((uint64_t **)this + 21), (uint64_t)(*((void *)this + 21) - *((void *)this + 20)) >> 3);
  }
  if (v124[0])
  {
    v124[1] = v124[0];
    operator delete(v124[0]);
  }
  if (v126[0])
  {
    v126[1] = v126[0];
    operator delete(v126[0]);
  }
  v126[0] = &v128;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v126);
  return v23;
}

void sub_1B1AE4550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }
  a28 = (void *)(v29 - 128);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::OnlineLASSpeculativeDecodable::Encode(uint64_t this)
{
  if (!*(unsigned char *)(this + 204))
  {
    uint64_t v1 = this;
    kaldi::CuMatrix<float>::CuMatrix(v23, *(unsigned int *)(this + 40), *(unsigned int *)(*(void *)(this + 24) + 24), 1, 0, 0);
    if (*(int *)(v1 + 40) >= 1)
    {
      uint64_t v2 = 0;
      signed int v3 = *(_DWORD *)(v1 + 56);
      while (kaldi::OnlineFeatureMatrix::IsValidFrame(*(int32x2_t **)(v1 + 24), v3, 1))
      {
        *((void *)&v17 + 1) = *(void *)&v23[1] + 4 * v25 * (int)v2;
        *(void *)&long long v17 = &unk_1F0A472D0;
        uint64_t v18 = v24;
        uint64_t v19 = v26;
        kaldi::OnlineFeatureMatrix::GetFrame(*(kaldi::OnlineFeatureMatrix **)(v1 + 24), *(_DWORD *)(v1 + 56), (uint64_t *)&v20);
        kaldi::CuVectorBase<float>::CopyFromVec<float>(&v17, (uint64_t)&v20);
        uint64_t v2 = (v2 + 1);
        signed int v3 = *(_DWORD *)(v1 + 56) + 1;
        *(_DWORD *)(v1 + 56) = v3;
        if ((int)v2 >= *(_DWORD *)(v1 + 40)) {
          goto LABEL_8;
        }
      }
      if (!v2) {
        return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v23);
      }
LABEL_8:
      if ((int)v2 < *(_DWORD *)(v1 + 40))
      {
        if (!*(unsigned char *)(v1 + 204)
          && kaldi::OnlineFeatureMatrix::IsValidFrame(*(int32x2_t **)(v1 + 24), *(_DWORD *)(v1 + 56), 1))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v17);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"EncodingFinished()", 18);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v17);
        }
        if ((int)v2 < (int)kaldi::quasar::CEStatelessEncoderNet::FrameSubsamplingFactor(*(kaldi::quasar::CEStatelessEncoderNet **)(v1 + 8))) {
          return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v23);
        }
        kaldi::CuMatrix<float>::Resize(v23, v2, *(unsigned int *)(*(void *)(v1 + 24) + 24), 2, 0);
      }
      long long v17 = 0uLL;
      uint64_t v18 = 0;
      uint64_t v16 = 0;
      uint64_t v4 = *(void *)(v1 + 8);
      if (*(unsigned char *)(v1 + 204)) {
        BOOL v5 = 1;
      }
      else {
        BOOL v5 = !kaldi::OnlineFeatureMatrix::IsValidFrame(*(int32x2_t **)(v1 + 24), *(_DWORD *)(v1 + 56), 1);
      }
      kaldi::quasar::CEStatelessEncoderNet::Encode(v4, (void *)(v1 + 64), (uint64_t)v23, v5, (uint64_t)&v17, &v16);
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((void **)(v1 + 64));
      *(_OWORD *)(v1 + 64) = v17;
      *(void *)(v1 + 80) = v18;
      uint64_t v18 = 0;
      long long v17 = 0uLL;
      uint64_t v6 = *(void *)(v1 + 184);
      if (v6)
      {
        uint64_t v7 = v16;
        uint64_t v8 = (char *)operator new(0x10uLL);
        unint64_t v21 = (void **)(v8 + 16);
        float v22 = v8 + 16;
        *(void *)uint64_t v8 = v6;
        *((void *)v8 + 1) = v7;
        uint64_t v20 = (void **)v8;
        uint64_t v9 = kaldi::quasar::CEStatelessEncoderNet::Engine(*(kaldi::quasar::CEStatelessEncoderNet **)(v1 + 8));
        (*(void (**)(uint64_t *__return_ptr))(**(void **)v9 + 96))(&v15);
        uint64_t v10 = v15;
        uint64_t v15 = 0;
        uint64_t v11 = *(void *)(v1 + 184);
        *(void *)(v1 + 184) = v10;
        if (v11)
        {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
          uint64_t v12 = v15;
          uint64_t v15 = 0;
          if (v12) {
            (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
          }
        }
        if (v20)
        {
          unint64_t v21 = v20;
          operator delete(v20);
        }
      }
      else
      {
        uint64_t v13 = v16;
        uint64_t v16 = 0;
        *(void *)(v1 + 184) = v13;
      }
      kaldi::quasar::OnlineLASSpeculativeDecodable::ClipEncodedStateIfNeeded(v1);
      uint64_t v14 = v16;
      uint64_t v16 = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
      uint64_t v20 = (void **)&v17;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v20);
    }
    return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v23);
  }
  return this;
}

BOOL kaldi::quasar::OnlineLASSpeculativeDecodable::EncodingFinished(kaldi::quasar::OnlineLASSpeculativeDecodable *this)
{
  return *((unsigned char *)this + 204)
      || !kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)this + 3), *((_DWORD *)this + 14), 1);
}

uint64_t *kaldi::quasar::OnlineLASSpeculativeDecodable::AccumulateAlignments@<X0>(uint64_t *a1@<X1>, int a2@<W2>, int a3@<W3>, void *a4@<X8>)
{
  int v15 = 0;
  uint64_t result = std::vector<float>::vector(a4, a3 * a2, &v15);
  if (a2 >= 1)
  {
    int v8 = 0;
    uint64_t v9 = *a1;
    uint64_t v10 = *result;
    uint64_t v11 = 4 * a3;
    unint64_t v12 = ((a1[1] - *a1) >> 2) / (unint64_t)a2 / a3;
    do
    {
      if ((int)v12 >= 1)
      {
        int v13 = 0;
        do
        {
          if (a3)
          {
            uint64_t v14 = 0;
            do
            {
              *(float *)(v10 + v14) = *(float *)(v9 + v14) + *(float *)(v10 + v14);
              v14 += 4;
            }
            while (v11 != v14);
          }
          v9 += v11;
          ++v13;
        }
        while (v13 != v12);
      }
      ++v8;
      v10 += v11;
    }
    while (v8 != a2);
  }
  return result;
}

uint64_t std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  uint64_t v4 = (void **)(*(void *)(a1[1] + 8 * (v2 / 0xAA)) + 24 * (v2 % 0xAA));
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v4);
  --a1[5];
  return std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  int v8 = (void *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  *int v8 = 0;
  v8[1] = 0;
  int32x2_t v8[2] = 0;
  *(_OWORD *)int v8 = *(_OWORD *)a2;
  int32x2_t v8[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5] + 1;
  a1[5] = v10;
  unint64_t v11 = v9 + v10;
  uint64_t v12 = a1[1];
  int v13 = (void *)(v12 + 8 * (v11 / 0xAA));
  uint64_t v14 = *v13 + 24 * (v11 % 0xAA);
  if (a1[2] == v12) {
    uint64_t v14 = 0;
  }
  if (v14 == *v13) {
    uint64_t v14 = *(v13 - 1) + 4080;
  }
  return v14 - 24;
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

uint64_t kaldi::quasar::OnlineLASSpeculativeDecodable::ClipEncodedStateIfNeeded(uint64_t this)
{
  if (!*(unsigned char *)(this + 204))
  {
    uint64_t v1 = this;
    this = kaldi::OnlineFeatureMatrix::IsValidFrame(*(int32x2_t **)(this + 24), *(_DWORD *)(this + 56), 1);
    if (this)
    {
      if (*(_DWORD *)(v1 + 200))
      {
        if (*(void *)(v1 + 184))
        {
          int v2 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v1 + 24) + 16) + 24))(*(void *)(*(void *)(v1 + 24) + 16));
          int v3 = *(_DWORD *)(v1 + 200);
          int v4 = v3
             / (int)(kaldi::quasar::CEStatelessEncoderNet::FrameSubsamplingFactor(*(kaldi::quasar::CEStatelessEncoderNet **)(v1 + 8))
                   * v2);
          this = (*(uint64_t (**)(void, void))(**(void **)(v1 + 184) + 184))(*(void *)(v1 + 184), 0);
          if ((int)this >= v4)
          {
            uint64_t v5 = kaldi::quasar::CEStatelessEncoderNet::Engine(*(kaldi::quasar::CEStatelessEncoderNet **)(v1 + 8));
            (*(void (**)(uint64_t *__return_ptr))(**(void **)v5 + 112))(&v7);
            uint64_t v6 = v7;
            uint64_t v7 = 0;
            this = *(void *)(v1 + 184);
            *(void *)(v1 + 184) = v6;
            if (this)
            {
              (*(void (**)(uint64_t))(*(void *)this + 8))(this);
              this = v7;
              uint64_t v7 = 0;
              if (this) {
                this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
              }
            }
            *(unsigned char *)(v1 + 204) = 1;
          }
        }
      }
    }
  }
  return this;
}

uint64_t kaldi::quasar::OnlineLASSpeculativeDecodable::SetAudioEndMilliseconds(uint64_t this, int a2)
{
  *(_DWORD *)(this + 200) = a2;
  return kaldi::quasar::OnlineLASSpeculativeDecodable::ClipEncodedStateIfNeeded(this);
}

uint64_t kaldi::quasar::OnlineLASSpeculativeDecodable::BOSIndex(kaldi::quasar::CEStatelessDecoderNet **this)
{
  return kaldi::quasar::CEStatelessDecoderNet::BOSIndex(this[2]);
}

uint64_t kaldi::quasar::OnlineLASSpeculativeDecodable::EOSIndex(kaldi::quasar::CEStatelessDecoderNet **this)
{
  return kaldi::quasar::CEStatelessDecoderNet::EOSIndex(this[2]);
}

uint64_t kaldi::quasar::OnlineLASSpeculativeDecodable::SilIndex(kaldi::quasar::CEStatelessDecoderNet **this)
{
  return kaldi::quasar::CEStatelessDecoderNet::SilIndex(this[2]);
}

uint64_t kaldi::quasar::OnlineLASSpeculativeDecodable::FrameOffset(kaldi::quasar::OnlineLASSpeculativeDecodable *this)
{
  return *((unsigned int *)this + 14);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  int v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  long long v17 = operator new(0x40uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *long long v17 = 0;
  v17[1] = v10;
  uint64_t v18 = *a4;
  long long v19 = **a4;
  v17[4] = *((void *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)uint64_t v18 = 0;
  v17[6] = 0;
  v17[7] = 0;
  v17[5] = 0;
  char v30 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    *uint64_t v26 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11) {
          v27 %= v11;
        }
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_1B1AE50E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>(uint64_t a1)
{
  int v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t std::unordered_set<int>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(int **)(a2 + 16); i; uint64_t i = *(int **)i)
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1, i + 4, i + 4);
  return a1;
}

void sub_1B1AE5208(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::vector<float>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1B1AE527C(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~deque[abi:ne180100](void *a1)
{
  int v2 = (void **)a1[1];
  int v3 = (void **)a1[2];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 5;
    int v3 = (void **)a1[1];
  }
  else
  {
    unint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0xAA];
    uint64_t v7 = (void **)((char *)*v6 + 24 * (v5 % 0xAA));
    unint64_t v8 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v7 != (void **)v8)
    {
      do
      {
        int v15 = v7;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v15);
        v7 += 3;
        if ((char *)v7 - (unsigned char *)*v6 == 4080)
        {
          unint64_t v9 = (void **)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != (void **)v8);
      int v2 = (void **)a1[1];
      int v3 = (void **)a1[2];
    }
  }
  *unint64_t v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      int v3 = (void **)a1[2];
      int v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 85;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 170;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    unint64_t v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + ++*(void *)(result + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 170 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0xAA) {
    a2 = 1;
  }
  if (v5 < 0x154) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    int v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      long long v37 = &v34[8 * v36];
      float v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        float v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)float v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    long long v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      long long v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFF0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1AE57C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<int,float>>::__assign_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    uint64_t v18 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    uint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 3;
    if (v19 >= a4)
    {
      uint64_t v24 = result;
      if (a2 != a3)
      {
        unint64_t v25 = result;
        do
        {
          *(_DWORD *)unint64_t v25 = *(_DWORD *)v6;
          *((_DWORD *)v25 + 1) = *((_DWORD *)v6 + 1);
          v24 += 8;
          ++v6;
          v25 += 8;
        }
        while (v6 != a3);
      }
      uint64_t v17 = (char *)(v24 - result);
      uint64_t v12 = result;
    }
    else
    {
      int64_t v20 = &a2[v19];
      if (v12 != result)
      {
        do
        {
          *(_DWORD *)uint64_t result = *(_DWORD *)v6;
          *((_DWORD *)result + 1) = *((_DWORD *)v6++ + 1);
          result += 8;
        }
        while (v6 != v20);
      }
      uint64_t v21 = v12;
      if (v20 != a3)
      {
        unint64_t v22 = v12;
        do
        {
          uint64_t v23 = *v20++;
          *(void *)unint64_t v22 = v23;
          v22 += 8;
          v21 += 8;
        }
        while (v20 != a3);
      }
      uint64_t v17 = (char *)(v21 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, v11);
    BOOL v14 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    uint64_t v12 = v14;
    uint64_t v15 = v14;
    if (v6 != a3)
    {
      uint64_t v15 = v12;
      do
      {
        uint64_t v16 = *v6++;
        *(void *)uint64_t v15 = v16;
        v15 += 8;
      }
      while (v6 != a3);
    }
    uint64_t v17 = (char *)(v15 - v12);
  }
  *uint64_t v13 = &v17[(void)v12];
  return result;
}

void *std::vector<float>::vector(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    int v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B1AE59E8(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::SelectLags(float *a1, void **a2)
{
  float v3 = 1.0 / a1[5];
  float v4 = 1.0 / a1[4];
  std::string __p = 0;
  unint64_t v19 = 0;
  int64_t v20 = 0;
  if (v3 <= v4)
  {
    uint64_t v6 = 0;
    do
    {
      if (v6 >= v20)
      {
        uint64_t v8 = __p;
        uint64_t v9 = v6 - __p;
        unint64_t v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = (char *)v20 - (char *)__p;
        if (((char *)v20 - (char *)__p) >> 1 > v10) {
          unint64_t v10 = v11 >> 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12)
        {
          uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v20, v12);
          uint64_t v8 = __p;
          uint64_t v6 = v19;
        }
        else
        {
          uint64_t v13 = 0;
        }
        BOOL v14 = (float *)&v13[4 * v9];
        *BOOL v14 = v3;
        uint64_t v15 = v14 + 1;
        while (v6 != v8)
        {
          int v16 = *((_DWORD *)v6-- - 1);
          *((_DWORD *)v14-- - 1) = v16;
        }
        std::string __p = v14;
        int64_t v20 = (float *)&v13[4 * v12];
        if (v8) {
          operator delete(v8);
        }
        uint64_t v6 = v15;
      }
      else
      {
        *v6++ = v3;
      }
      unint64_t v19 = v6;
      float v3 = (a1[10] + 1.0) * v3;
    }
    while (v4 >= v3);
    uint64_t v5 = __p;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  kaldi::Vector<float>::Resize(a2, (unint64_t)((char *)v6 - (char *)v5) >> 2, 0);
  uint64_t v17 = __p;
  if (v19 != __p)
  {
    memmove(*a2, __p, (char *)v19 - (char *)__p);
    uint64_t v17 = __p;
  }
  if (v17) {
    operator delete(v17);
  }
}

{
  float v3;
  float v4;
  float *v5;
  float *v6;
  float *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  float *v14;
  float *v15;
  int v16;
  float *v17;
  float *__p;
  float *v19;
  float *v20;

  float v3 = 1.0 / a1[5];
  float v4 = 1.0 / a1[4];
  std::string __p = 0;
  unint64_t v19 = 0;
  int64_t v20 = 0;
  if (v3 <= v4)
  {
    uint64_t v6 = 0;
    do
    {
      if (v6 >= v20)
      {
        uint64_t v8 = __p;
        uint64_t v9 = v6 - __p;
        unint64_t v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = (char *)v20 - (char *)__p;
        if (((char *)v20 - (char *)__p) >> 1 > v10) {
          unint64_t v10 = v11 >> 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12)
        {
          uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v20, v12);
          uint64_t v8 = __p;
          uint64_t v6 = v19;
        }
        else
        {
          uint64_t v13 = 0;
        }
        BOOL v14 = (float *)&v13[4 * v9];
        *BOOL v14 = v3;
        uint64_t v15 = v14 + 1;
        while (v6 != v8)
        {
          int v16 = *((_DWORD *)v6-- - 1);
          *((_DWORD *)v14-- - 1) = v16;
        }
        std::string __p = v14;
        int64_t v20 = (float *)&v13[4 * v12];
        if (v8) {
          operator delete(v8);
        }
        uint64_t v6 = v15;
      }
      else
      {
        *v6++ = v3;
      }
      unint64_t v19 = v6;
      float v3 = (a1[10] + 1.0) * v3;
    }
    while (v4 >= v3);
    uint64_t v5 = __p;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  kaldi::Vector<float>::Resize(a2, (unint64_t)((char *)v6 - (char *)v5) >> 2, 0);
  uint64_t v17 = __p;
  if (v19 != __p)
  {
    memmove(*a2, __p, (char *)v19 - (char *)__p);
    uint64_t v17 = __p;
  }
  if (v17) {
    operator delete(v17);
  }
}

void sub_1B1AE5B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::ComputeLocalCost(const float **a1, const float **a2, uint64_t a3, uint64_t a4)
{
  kaldi::VectorBase<float>::Set(a4, 1.0);
  kaldi::VectorBase<float>::AddVec<float>(a4, a1, -1.0);
  float v8 = *(float *)(a3 + 24);
  kaldi::VectorBase<float>::AddVecVec(a4, a2, a1, v8, 1.0);
}

void kaldi::PitchFrameInfo::ComputeBacktraces(uint64_t *a1, uint64_t a2, uint64_t a3, const float **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14 = *(unsigned int *)(a3 + 8);
  memset(v75, 0, sizeof(v75));
  kaldi::Vector<float>::Resize((void **)v75, v14, 1);
  kaldi::ComputeLocalCost((const float **)a3, a4, a2, (uint64_t)v75);
  double v15 = log(*(float *)(a2 + 40) + 1.0);
  float v16 = *(float *)(a2 + 28);
  uint64_t v17 = *a5;
  uint64_t v18 = *a7;
  if (*a6 == a6[1]) {
    std::vector<std::pair<int,int>>::resize((uint64_t)a6, (int)v14);
  }
  float v19 = v15 * v15;
  float v20 = v16 * v19;
  if (kaldi::pitch_use_naive_search)
  {
    if ((int)v14 >= 1)
    {
      int v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = *a1;
      do
      {
        uint64_t v24 = 0;
        int v25 = -1;
        float v26 = INFINITY;
        do
        {
          float v27 = *(float *)(v17 + 4 * v24);
          if ((float)(v27 + (float)((float)((v21 + v24) * (v21 + v24)) * v20)) < v26)
          {
            float v26 = v27 + (float)((float)((v21 + v24) * (v21 + v24)) * v20);
            int v25 = v24;
          }
          ++v24;
        }
        while (v14 != v24);
        *(float *)(v18 + 4 * v22) = v26;
        *(_DWORD *)(v23 + 8 * v22++) = v25;
        --v21;
      }
      while (v22 != v14);
    }
  }
  else if ((int)v14 >= 1)
  {
    uint64_t v28 = 0;
    int v29 = 0;
    uint64_t v30 = *a1;
    uint64_t v31 = *a6;
    int v32 = 1;
    while (1)
    {
      int v33 = v29;
      uint64_t v34 = v29;
      float v35 = *(float *)(v17 + 4 * v29) + (float)((float)((v29 - v28) * (v29 - v28)) * v20);
      if ((int)v14 <= v29 + 1) {
        int v36 = v29 + 1;
      }
      else {
        int v36 = v14;
      }
      int v29 = v36 - 1;
      uint64_t v37 = v34 + 1;
      do
      {
        float v38 = v35;
        if (v37 >= v14) {
          goto LABEL_21;
        }
        float v35 = *(float *)(v17 + 4 * v37) + (float)((float)((v32 + v33) * (v32 + v33)) * v20);
        ++v33;
        ++v37;
      }
      while (v35 < v38);
      int v29 = v33 - 1;
LABEL_21:
      *(_DWORD *)(v30 + 8 * v28) = v29;
      *(float *)(v18 + 4 * v28) = v38;
      uint64_t v39 = (_DWORD *)(v31 + 8 * v28);
      *uint64_t v39 = v29;
      v39[1] = v14 - 1;
      ++v28;
      --v32;
      if (v28 == v14)
      {
        int v40 = 0;
        uint64_t v41 = *a6;
        while (1)
        {
          if (v40)
          {
            uint64_t v60 = 0;
            char v61 = 0;
            int v62 = 0;
LABEL_45:
            int v63 = -(int)v60;
            int v64 = v62;
            do
            {
              uint64_t v65 = (int *)(v41 + 8 * v60);
              int v66 = v65[1];
              if (v64 <= *v65) {
                int v67 = *v65;
              }
              else {
                int v67 = v64;
              }
              if (v66 == v67)
              {
                int v64 = v67;
              }
              else
              {
                uint64_t v68 = *a1;
                int v69 = *(_DWORD *)(*a1 + 8 * v60);
                int v64 = v67;
                if (v69 != v67)
                {
                  int v64 = *(_DWORD *)(*a1 + 8 * v60);
                  if (v67 >= v66 - 1)
                  {
                    int *v65 = v69;
                  }
                  else
                  {
                    float v70 = *(float *)(v18 + 4 * v60);
                    uint64_t v71 = v67;
                    int v72 = ~v67 + v66;
                    int v62 = *(_DWORD *)(*a1 + 8 * v60);
                    do
                    {
                      int v73 = (v63 + v71) * (v63 + v71);
                      float v74 = *(float *)(v17 + 4 * v71);
                      if ((float)(v74 + (float)((float)v73 * v20)) >= v70)
                      {
                        if (v71 > v62) {
                          break;
                        }
                      }
                      else
                      {
                        float v70 = v74 + (float)((float)v73 * v20);
                        int v62 = v71;
                      }
                      ++v71;
                      --v72;
                    }
                    while (v72);
                    int *v65 = v62;
                    if (v62 != v69)
                    {
                      *(float *)(v18 + 4 * v60) = v70;
                      *(_DWORD *)(v68 + 8 * v60++) = v62;
                      char v61 = 1;
                      if (v60 != v14) {
                        goto LABEL_45;
                      }
                      goto LABEL_66;
                    }
                  }
                }
              }
              ++v60;
              --v63;
            }
            while (v60 != v14);
            if ((v61 & 1) == 0) {
              goto LABEL_67;
            }
          }
          else
          {
            char v42 = 0;
            int v43 = 1 - v14;
            uint64_t v44 = v14;
            int v45 = v14 - 1;
            do
            {
              uint64_t v46 = v44--;
              int v47 = *(_DWORD *)(v41 + 8 * v44);
              uint64_t v48 = v41 + 8 * v44;
              int v51 = *(_DWORD *)(v48 + 4);
              uint64_t v50 = (int *)(v48 + 4);
              int v49 = v51;
              if (v51 >= v45) {
                int v52 = v45;
              }
              else {
                int v52 = v49;
              }
              if (v52 == v47)
              {
                int v45 = *(_DWORD *)(v41 + 8 * v44);
              }
              else
              {
                uint64_t v53 = (int *)(*a1 + 8 * v44);
                int v45 = *v53;
                if (*v53 == v52)
                {
                  int v45 = v52;
                }
                else
                {
                  uint64_t v54 = v47 + 1;
                  if (v52 <= (int)v54)
                  {
                    *uint64_t v50 = v45;
                  }
                  else
                  {
                    float v55 = *(float *)(v18 + 4 * v44);
                    uint64_t v56 = v52;
                    int v57 = *v53;
                    do
                    {
                      int v58 = (v43 + v56) * (v43 + v56);
                      float v59 = *(float *)(v17 + 4 * v56);
                      if ((float)(v59 + (float)((float)v58 * v20)) >= v55)
                      {
                        if (v56 < v57) {
                          break;
                        }
                      }
                      else
                      {
                        float v55 = v59 + (float)((float)v58 * v20);
                        int v57 = v56;
                      }
                      --v56;
                    }
                    while (v56 > v54);
                    *uint64_t v50 = v57;
                    if (v57 != v45)
                    {
                      *(float *)(v18 + 4 * v44) = v55;
                      *uint64_t v53 = v57;
                      char v42 = 1;
                      int v45 = v57;
                    }
                  }
                }
              }
              ++v43;
            }
            while (v46 > 1);
            if ((v42 & 1) == 0) {
              goto LABEL_67;
            }
          }
LABEL_66:
          if (++v40 == v14) {
            goto LABEL_67;
          }
        }
      }
    }
  }
LABEL_67:
  *((_DWORD *)a1 + 7) = -1;
  kaldi::VectorBase<float>::AddVec<float>((uint64_t)a7, v75, 1.0);
  kaldi::Vector<float>::Destroy((uint64_t)v75);
}

void sub_1B1AE6054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<int,int>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<std::pair<int,int>>::__append((char **)a1, a2 - v2);
  }
}

uint64_t *kaldi::PitchFrameInfo::SetBestState(uint64_t *result, int a2, uint64_t a3)
{
  if (result)
  {
    float v3 = (_DWORD *)result + 7;
    if (*((_DWORD *)result + 7) != a2)
    {
      float v4 = (_DWORD *)(a3 + 4);
      do
      {
        uint64_t v5 = (uint64_t *)result[4];
        if (v5) {
          *(v4 - 1) = a2;
        }
        int v6 = *((_DWORD *)result + 6);
        uint64_t v7 = *result;
        *float v3 = a2;
        if (!v5) {
          break;
        }
        float v8 = (int *)(v7 + 8 * (a2 - v6));
        *float v4 = v8[1];
        v4 -= 2;
        a2 = *v8;
        float v3 = (_DWORD *)v5 + 7;
        uint64_t result = v5;
      }
      while (a2 != *((_DWORD *)v5 + 7));
    }
  }
  return result;
}

uint64_t kaldi::PitchFrameInfo::ComputeLatency(kaldi::PitchFrameInfo *this, int a2)
{
  if (a2 < 1) {
    return 0;
  }
  int v3 = 0;
  uint64_t result = 0;
  int v5 = ((*((void *)this + 1) - *(void *)this) >> 3) - 1;
  do
  {
    int v6 = *((_DWORD *)this + 6);
    int v3 = *(_DWORD *)(*(void *)this + 8 * (v3 - v6));
    int v5 = *(_DWORD *)(*(void *)this + 8 * (v5 - v6));
    if (v3 == v5) {
      break;
    }
    this = (kaldi::PitchFrameInfo *)*((void *)this + 4);
    uint64_t result = this ? (result + 1) : result;
  }
  while (this && (int)result < a2);
  return result;
}

void kaldi::OnlinePitchFeatureImpl::OnlinePitchFeatureImpl(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  long long v2 = a2[1];
  long long v3 = a2[2];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 60) = *(_OWORD *)((char *)a2 + 60);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 225) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  operator new();
}

void sub_1B1AE6440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v7 = v6;
  MEMORY[0x1B3EA8670](v7, 0x1020C403D3F9D26);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  kaldi::Vector<float>::Destroy((uint64_t)(v2 + 34));
  uint64_t v9 = (void *)v2[27];
  if (v9)
  {
    v2[28] = v9;
    operator delete(v9);
  }
  kaldi::Vector<float>::Destroy(v5);
  unint64_t v10 = (void *)v2[19];
  if (v10)
  {
    v2[20] = v10;
    operator delete(v10);
  }
  uint64_t v11 = *v4;
  if (*v4)
  {
    v2[17] = v11;
    operator delete(v11);
  }
  kaldi::Vector<float>::Destroy(v3);
  _Unwind_Resume(a1);
}

void kaldi::OnlinePitchFeatureImpl::Compute(kaldi::OnlinePitchFeatureImpl *this, uint64_t a2, int32x2_t *a3)
{
  int v6 = *((_DWORD *)this + 15);
  if (v6)
  {
    int v7 = *(_DWORD *)(a2 + 8);
    if (v7 >= 1)
    {
      int v8 = 0;
      int v9 = (int)((float)(*(float *)this * (float)v6) * 0.001 * *((float *)this + 1));
      do
      {
        int v10 = v7 - v8;
        if (v10 >= v9) {
          int v10 = v9;
        }
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        int v11 = v10 + v8;
        uint64_t v19 = *(void *)a2 + 4 * v8;
        LODWORD(v20) = v10;
        kaldi::OnlinePitchFeatureImpl::AcceptWaveform((uint64_t)this, (uint64_t)&v19);
        int v7 = *(_DWORD *)(a2 + 8);
        int v8 = v11;
      }
      while (v11 < v7);
    }
  }
  else
  {
    kaldi::OnlinePitchFeatureImpl::AcceptWaveform((uint64_t)this, a2);
  }
  kaldi::OnlinePitchFeatureImpl::InputFinished(this);
  uint64_t v12 = (*((void *)this + 28) - *((void *)this + 27)) >> 3;
  int v13 = *((_DWORD *)this + 44);
  uint64_t v14 = (v12 - v13);
  if (v12 == v13)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"No frames output in pitch extraction", 36);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
    }
    kaldi::Matrix<float>::Resize(a3, 0, 0, 0, 0);
  }
  else
  {
    kaldi::Matrix<float>::Resize(a3, (v12 - v13), 2, 0, 0);
    if ((int)v14 >= 1)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 4;
      do
      {
        uint64_t v17 = *(void *)a3 + 4 * a3[2].i32[0] * (int)v15;
        kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
        uint64_t v18 = (_DWORD *)(*((void *)this + 27) + v16);
        *(_DWORD *)uint64_t v17 = *v18;
        *(float *)(v17 + 4) = 1.0 / *(float *)(*((void *)this + 11) + 4 * (int)*(v18 - 1));
        ++v15;
        v16 += 8;
      }
      while (v14 != v15);
    }
  }
}

void sub_1B1AE66F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::OnlinePitchFeatureImpl::AcceptWaveform(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 240);
  int v52 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  kaldi::LinearResample::Resample(*(void *)(a1 + 120), a2, v3, (void **)&v52);
  double v4 = *(double *)(a1 + 248);
  double v5 = *(double *)(a1 + 256);
  uint64_t v6 = *(void *)(a1 + 264);
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v7 = (int)v53;
    uint64_t v8 = *(void *)(a1 + 264);
  }
  else
  {
    float v9 = kaldi::VecVec<float>((uint64_t)&v52, (const float **)&v52);
    double v10 = kaldi::VectorBase<float>::Sum((uint64_t)&v52);
    double v4 = v4 + v9;
    double v5 = v5 + *(float *)&v10;
    uint64_t v7 = (int)v53;
    uint64_t v8 = v6 + (int)v53;
    uint64_t v6 = *(void *)(a1 + 264);
  }
  int v11 = kaldi::OnlinePitchFeatureImpl::NumFramesAvailable((kaldi::OnlinePitchFeatureImpl *)a1, v6 + v7, *(unsigned char *)(a1 + 73));
  int v12 = ((*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 3) - 1;
  int v32 = v11;
  uint64_t v13 = (v11 - v12);
  if (v11 == v12)
  {
    kaldi::OnlinePitchFeatureImpl::UpdateRemainder(a1, (uint64_t)&v52);
  }
  else
  {
    int v15 = *(_DWORD *)(a1 + 76);
    int v14 = *(_DWORD *)(a1 + 80);
    uint64_t v16 = *(unsigned int *)(a1 + 96);
    double v17 = *(float *)(a1 + 36) * 0.001;
    float v18 = *(float *)(a1 + 4);
    int v31 = (int)(v17 * *(float *)(a1 + 8));
    memset(v51, 0, sizeof(v51));
    kaldi::Vector<float>::Resize(v51, (v14 + v31), 0);
    uint64_t v20 = (v14 - v15 + 1);
    memset(v50, 0, sizeof(v50));
    kaldi::Vector<float>::Resize(v50, v20, 0);
    memset(v49, 0, sizeof(v49));
    kaldi::Vector<float>::Resize(v49, v20, 0);
    kaldi::Matrix<float>::Matrix((uint64_t)v47, v13, v20, 0, 0);
    kaldi::Matrix<float>::Matrix((uint64_t)v45, v13, v20, 0, 0);
    memset(v44, 0, sizeof(v44));
    kaldi::Vector<float>::Resize(v44, v16, 0);
    int v30 = v12;
    if (v32 > v12)
    {
      int v21 = 0;
      uint64_t v22 = (int)(v17 * v18);
      int v19 = v14 + v31;
      uint64_t v23 = v30;
      do
      {
        kaldi::OnlinePitchFeatureImpl::ExtractFrame(a1, (uint64_t)&v52, v23 * v22, (uint64_t)v51);
        if (*(unsigned char *)(a1 + 72))
        {
          if (v23 * v22 + v19 - *(void *)(a1 + 264) >= (int)v53) {
            LODWORD(v++*(void *)(result + 24) = v53;
          }
          else {
            uint64_t v24 = v23 * v22 + v19 - *(void *)(a1 + 264);
          }
          uint64_t v35 = 0;
          int v33 = (const float *)&v52[4 * v21];
          uint64_t v34 = (v24 - v21);
          float v25 = kaldi::VecVec<float>((uint64_t)&v33, &v33);
          double v26 = kaldi::VectorBase<float>::Sum((uint64_t)&v33);
          v8 += (int)v24 - v21;
          double v4 = v4 + v25;
          double v5 = v5 + *(float *)&v26;
          int v21 = v24;
        }
        kaldi::ComputeCorrelation((uint64_t)v51, *(_DWORD *)(a1 + 76), *(_DWORD *)(a1 + 80), v31, v50, v49);
        float v27 = *(float *)(a1 + 44);
        kaldi::VectorBase<float>::Sum((uint64_t)v49);
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        int v33 = (const float *)(*(void *)v47 + 4 * (v23 - v30) * v48);
        double v28 = v4 / (double)v8 - v5 / (double)v8 * (v5 / (double)v8);
        LODWORD(v34) = kaldi::MatrixBase<float>::NumCols((uint64_t)v47);
        float v29 = v28 * (double)v31 * (v28 * (double)v31) * v27;
        kaldi::ComputeNccf((uint64_t *)v50, (uint64_t *)v49, (uint64_t *)&v33, v29);
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        uint64_t v41 = *(void *)v45 + 4 * (v23 - v30) * v46;
        LODWORD(v42) = kaldi::MatrixBase<float>::NumCols((uint64_t)v45);
        kaldi::ComputeNccf((uint64_t *)v50, (uint64_t *)v49, &v41, 0.0);
        if (v23 < *(int *)(a1 + 68)) {
          operator new();
        }
        ++v23;
      }
      while (v32 != v23);
    }
    kaldi::Matrix<float>::Matrix((uint64_t)&v41, v13, v16, 0, 0);
    kaldi::ArbitraryResample::Resample(*(void **)(a1 + 112), (uint64_t)v47, (uint64_t)&v41);
    kaldi::Matrix<float>::Resize(v47, 0, 0, 0, 0);
    kaldi::Matrix<float>::Matrix((uint64_t)v40, v13, v16, 0, 0);
    kaldi::ArbitraryResample::Resample(*(void **)(a1 + 112), (uint64_t)v45, (uint64_t)v40);
    kaldi::Matrix<float>::Resize(v45, 0, 0, 0, 0);
    kaldi::OnlinePitchFeatureImpl::UpdateRemainder(a1, (uint64_t)&v52);
    std::string __p = 0;
    float v38 = 0;
    uint64_t v39 = 0;
    if (v32 > v30) {
      operator new();
    }
    int v36 = 0;
    kaldi::VectorBase<float>::Min((uint64_t *)(a1 + 184), &v36);
    std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize(a1 + 216, ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 3) - 1);
    kaldi::PitchFrameInfo::SetBestState(*(uint64_t **)(*(void *)(a1 + 136) - 8), v36, *(void *)(a1 + 224) - 8);
    *(_DWORD *)(a1 + 1--*(_DWORD *)(a9 + 76) = kaldi::PitchFrameInfo::ComputeLatency(*(kaldi::PitchFrameInfo **)(*(void *)(a1 + 136) - 8), *(_DWORD *)(a1 + 56));
    if (kaldi::g_kaldi_verbose_level >= 4)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v33, 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Latency is ", 11);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v33);
    }
    if (__p)
    {
      float v38 = __p;
      operator delete(__p);
    }
    kaldi::Matrix<float>::~Matrix((uint64_t)v40);
    kaldi::Matrix<float>::~Matrix((uint64_t)&v41);
    kaldi::Vector<float>::Destroy((uint64_t)v44);
    kaldi::Matrix<float>::~Matrix((uint64_t)v45);
    kaldi::Matrix<float>::~Matrix((uint64_t)v47);
    kaldi::Vector<float>::Destroy((uint64_t)v49);
    kaldi::Vector<float>::Destroy((uint64_t)v50);
    kaldi::Vector<float>::Destroy((uint64_t)v51);
  }
  kaldi::Vector<float>::Destroy((uint64_t)&v52);
}

void sub_1B1AE6FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)&a57);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a62);
  kaldi::Vector<float>::Destroy((uint64_t)&a67);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a70);
  kaldi::Matrix<float>::~Matrix((uint64_t)&STACK[0x210]);
  kaldi::Vector<float>::Destroy(v70 - 248);
  kaldi::Vector<float>::Destroy(v70 - 224);
  kaldi::Vector<float>::Destroy(v70 - 200);
  kaldi::Vector<float>::Destroy(v70 - 176);
  _Unwind_Resume(a1);
}

void kaldi::OnlinePitchFeatureImpl::InputFinished(kaldi::OnlinePitchFeatureImpl *this)
{
  *((unsigned char *)this + 240) = 1;
  memset(v4, 0, 24);
  kaldi::OnlinePitchFeatureImpl::AcceptWaveform((uint64_t)this, (uint64_t)v4);
  kaldi::Vector<float>::Destroy((uint64_t)v4);
  if ((signed int)(((*((void *)this + 17) - *((void *)this + 16)) >> 3) - 1) < *((_DWORD *)this + 17)
    && !*((unsigned char *)this + 72))
  {
    kaldi::OnlinePitchFeatureImpl::RecomputeBacktraces(this);
  }
  *((_DWORD *)this + 44) = 0;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v4, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Pitch-tracking Viterbi cost is ", 31);
    long long v2 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" per frame, over ", 17);
    char v3 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" frames.", 8);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v4);
  }
}

void sub_1B1AE71F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlinePitchFeatureImpl::NumFramesAvailable(kaldi::OnlinePitchFeatureImpl *this, uint64_t a2, char a3)
{
  double v3 = *((float *)this + 9) * 0.001;
  int v4 = (int)(v3 * *((float *)this + 2));
  if (!*((unsigned char *)this + 240)) {
    v4 += *((_DWORD *)this + 20);
  }
  if (a2 < v4) {
    return 0;
  }
  int v6 = (int)(v3 * *((float *)this + 1));
  if (!*((unsigned char *)this + 240) || (a3 & 1) != 0) {
    return ((a2 - v4) / v6) + 1;
  }
  else {
    return (int)(float)((float)((float)a2 / (float)v6) + 0.5);
  }
}

void kaldi::OnlinePitchFeatureImpl::UpdateRemainder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 136) - *(void *)(a1 + 128);
  uint64_t v5 = (v4 >> 3) - 1;
  uint64_t v6 = (int)(*(float *)(a1 + 36) * 0.001 * *(float *)(a1 + 4));
  uint64_t v7 = v5 * v6;
  *(double *)(a1 + 248) = *(double *)(a1 + 248) + kaldi::VecVec<float>(a2, (const float **)a2);
  double v8 = kaldi::VectorBase<float>::Sum(a2);
  *(double *)(a1 + 256) = *(double *)(a1 + 256) + *(float *)&v8;
  uint64_t v9 = *(void *)(a1 + 264) + *(int *)(a2 + 8);
  if (v9 >= v5 * v6)
  {
    memset(v16, 0, sizeof(v16));
    kaldi::Vector<float>::Resize(v16, (v9 - v7), 0);
    if (v9 > v7)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = *(void *)(a1 + 264);
      uint64_t v13 = *(const float **)a2;
      int v14 = (char *)v16[0];
      do
      {
        if (v7 + v11 >= v12) {
          int v15 = (_DWORD *)((char *)v13
        }
                         + ((uint64_t)(((unint64_t)(v5 * v6) << 32) - (v12 << 32) + v10) >> 30));
        else {
          int v15 = (_DWORD *)(*(void *)(a1 + 272)
        }
                         + 4 * (int)(v6 * (((unint64_t)v4 >> 3) - 1) - v12 + v11 + *(_DWORD *)(a1 + 280)));
        *(_DWORD *)&v14[v10 >> 30] = *v15;
        ++v11;
        v10 += 0x100000000;
      }
      while (v7 + v11 < v9);
    }
    kaldi::Vector<float>::Swap((uint64_t *)(a1 + 272), (uint64_t *)v16);
    kaldi::Vector<float>::Destroy((uint64_t)v16);
  }
  else
  {
    kaldi::Vector<float>::Resize((void **)(a1 + 272), 0, 0);
  }
  *(void *)(a1 + 264) = v9;
}

void sub_1B1AE7444(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::OnlinePitchFeatureImpl::ExtractFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = *(_DWORD *)(a4 + 8);
  uint64_t v8 = a3 - *(void *)(a1 + 264);
  unsigned int v9 = v7 + v8;
  int v10 = *(_DWORD *)(a2 + 8);
  if (v7 + (int)v8 <= v10)
  {
    if ((v8 & 0x80000000) != 0)
    {
      unsigned int v16 = *(_DWORD *)(a1 + 280) + v8;
      unsigned int v17 = *(_DWORD *)(a1 + 264) - a3;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      float v18 = *(float **)a4;
      uint64_t v28 = 0;
      uint64_t v29 = (uint64_t)v18;
      LODWORD(v30) = v17;
      uint64_t v26 = *(void *)(a1 + 272) + 4 * v16;
      uint64_t v27 = v17;
      kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v29, (const void **)&v26);
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v19 = *(void *)a4 + 4 * v17;
      uint64_t v28 = 0;
      uint64_t v29 = v19;
      LODWORD(v30) = v9;
      uint64_t v26 = *(void *)a2;
      uint64_t v27 = v9;
      int v15 = &v29;
      int v14 = &v26;
    }
    else
    {
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v29 = *(void *)a2 + 4 * v8;
      LODWORD(v30) = v7;
      int v14 = &v29;
      int v15 = (uint64_t *)a4;
    }
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)v15, (const void **)v14);
    float v20 = *(float *)(a1 + 12);
    if (v20 != 0.0)
    {
      double v21 = v20;
      unint64_t v22 = *(unsigned int *)(a4 + 8);
      if ((int)v22 >= 2)
      {
        uint64_t v23 = *(float **)a4;
        float v24 = -v20;
        do
          v23[(v22 - 1)] = v23[(v22 - 1)] + (float)(v24 * v23[(v22 - 2)]);
        while (v22-- > 2);
      }
      float result = (1.0 - v21) * **(float **)a4;
      **(float **)a4 = result;
    }
  }
  else
  {
    int v12 = v10 - v8;
    kaldi::VectorBase<float>::SetZero(a4);
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v29 = *(void *)a4;
    LODWORD(v30) = v12;
    kaldi::OnlinePitchFeatureImpl::ExtractFrame(a1, a2, a3, &v29);
  }
  return result;
}

void kaldi::OnlinePitchFeatureImpl::RecomputeBacktraces(kaldi::OnlinePitchFeatureImpl *this)
{
  uint64_t v1 = (*((void *)this + 17) - *((void *)this + 16)) >> 3;
  uint64_t v2 = (v1 - 1);
  if (v1 != 1)
  {
    uint64_t v5 = *((void *)this + 19);
    uint64_t v4 = *((void *)this + 20);
    if ((int)v1 < 2) {
      goto LABEL_24;
    }
    char v6 = 0;
    unint64_t v7 = (v4 - v5) >> 3;
    float v8 = *((double *)this + 31) / (double)*((uint64_t *)this + 33)
       - *((double *)this + 32)
       / (double)*((uint64_t *)this + 33)
       * (*((double *)this + 32)
        / (double)*((uint64_t *)this + 33));
    float v9 = fabsf(v8);
    uint64_t v10 = v2;
    uint64_t v11 = *((void *)this + 19);
    do
    {
      float v12 = *(float *)(*(void *)v11 + 28);
      if (v12 != v8
        && (COERCE_INT(fabs(v12 - v8)) > 2139095039 || fabsf(v12 - v8) > (float)((float)(v9 + fabsf(v12)) * 0.01)))
      {
        char v6 = 1;
      }
      v11 += 8;
      --v10;
    }
    while (v10);
    if (v6)
    {
      uint64_t v13 = *((unsigned int *)this + 48);
      float v14 = *((float *)this + 9);
      float v15 = *((float *)this + 2);
      float v16 = *((float *)this + 11);
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      kaldi::Vector<float>::Resize(&v43, v13, 0);
      memset(v42, 0, sizeof(v42));
      kaldi::Vector<float>::Resize(v42, v44, 1);
      kaldi::VectorBase<float>::CopyFromVec((uint64_t)v42, (const void **)&v43);
      uint64_t v17 = 0;
      float v18 = (float)(int)(v14 * 0.001 * v15);
      float v19 = (float)(v8 * v18) * (float)(v8 * v18) * v16;
      uint64_t v39 = 0;
      int v40 = 0;
      uint64_t v41 = 0;
      double v20 = 0.0;
      do
      {
        uint64_t v21 = *((void *)this + 19);
        uint64_t v22 = *(void *)(v21 + v17);
        float v23 = (float)(*(float *)(v22 + 28) * v18) * (float)(*(float *)(v22 + 28) * v18) * *((float *)this + 11);
        float v24 = (float)(*(float *)(v22 + 24) + v23) / (float)(*(float *)(v22 + 24) + v19);
        float v25 = fabsf(sqrtf(v24));
        BOOL v26 = v24 == -INFINITY;
        float v27 = INFINITY;
        if (!v26) {
          float v27 = v25;
        }
        kaldi::VectorBase<float>::Scale(*(void *)(v21 + v17), v27);
        kaldi::PitchFrameInfo::ComputeBacktraces(*(uint64_t **)(*((void *)this + 16) + v17 + 8), (uint64_t)this, v22, (const float **)this + 11, (uint64_t *)&v43, (uint64_t *)&v39, (uint64_t *)v42);
        kaldi::Vector<float>::Swap((uint64_t *)&v43, (uint64_t *)v42);
        kaldi::VectorBase<float>::Min((uint64_t *)&v43);
        float v29 = v28;
        kaldi::VectorBase<float>::Add((uint64_t)&v43, -v28);
        double v20 = v20 + v29;
        v17 += 8;
      }
      while (8 * v2 != v17);
      if (kaldi::g_kaldi_verbose_level > 2)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v38, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Forward-cost per frame changed from ", 36);
        uint64_t v30 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" to ", 4);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v38);
      }
      *((double *)this + 26) = v20;
      kaldi::Vector<float>::Swap((uint64_t *)this + 23, (uint64_t *)&v43);
      LODWORD(v38[0]) = 0;
      kaldi::VectorBase<float>::Min((uint64_t *)this + 23, (int *)v38);
      uint64_t v31 = *((void *)this + 28);
      if (v7 != (v31 - *((void *)this + 27)) >> 3)
      {
        std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)this + 216, v7);
        uint64_t v31 = *((void *)this + 28);
      }
      kaldi::PitchFrameInfo::SetBestState(*(uint64_t **)(*((void *)this + 17) - 8), v38[0], v31 - 8);
      *((_DWORD *)this + 44) = kaldi::PitchFrameInfo::ComputeLatency(*(kaldi::PitchFrameInfo **)(*((void *)this + 17) - 8), *((_DWORD *)this + 14));
      uint64_t v33 = *((void *)this + 19);
      uint64_t v32 = *((void *)this + 20);
      if (v32 == v33)
      {
        uint64_t v33 = *((void *)this + 20);
      }
      else
      {
        unint64_t v34 = 0;
        do
        {
          uint64_t v35 = *(void *)(v33 + 8 * v34);
          if (v35)
          {
            kaldi::Vector<float>::Destroy(*(void *)(v33 + 8 * v34));
            MEMORY[0x1B3EA8670](v35, 0x1080C4066DFD6F0);
            uint64_t v33 = *((void *)this + 19);
            uint64_t v32 = *((void *)this + 20);
          }
          ++v34;
        }
        while (v34 < (v32 - v33) >> 3);
      }
      *((void *)this + 20) = v33;
      if (v39)
      {
        int v40 = v39;
        operator delete(v39);
      }
      kaldi::Vector<float>::Destroy((uint64_t)v42);
      kaldi::Vector<float>::Destroy((uint64_t)&v43);
    }
    else
    {
LABEL_24:
      if (v4 == v5)
      {
        uint64_t v5 = *((void *)this + 20);
      }
      else
      {
        unint64_t v36 = 0;
        do
        {
          uint64_t v37 = *(void *)(v5 + 8 * v36);
          if (v37)
          {
            kaldi::Vector<float>::Destroy(*(void *)(v5 + 8 * v36));
            MEMORY[0x1B3EA8670](v37, 0x1080C4066DFD6F0);
            uint64_t v5 = *((void *)this + 19);
            uint64_t v4 = *((void *)this + 20);
          }
          ++v36;
        }
        while (v36 < (v4 - v5) >> 3);
      }
      *((void *)this + 20) = v5;
    }
  }
}

void sub_1B1AE79DC(_Unwind_Exception *a1)
{
  double v3 = *(void **)(v1 - 192);
  if (v3)
  {
    *(void *)(v1 - 184) = v3;
    operator delete(v3);
  }
  kaldi::Vector<float>::Destroy(v1 - 168);
  kaldi::Vector<float>::Destroy(v1 - 144);
  _Unwind_Resume(a1);
}

void kaldi::OnlinePitchFeatureImpl::~OnlinePitchFeatureImpl(kaldi::OnlinePitchFeatureImpl *this)
{
  uint64_t v2 = *((void *)this + 14);
  if (v2)
  {
    float v18 = (void **)(v2 + 40);
    std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
    double v3 = *(void **)(v2 + 16);
    if (v3)
    {
      *(void *)(v2 + ++*(void *)(result + 24) = v3;
      operator delete(v3);
    }
    MEMORY[0x1B3EA8670](v2, 0x1030C40864D17A3);
  }
  uint64_t v4 = *((void *)this + 15);
  if (v4)
  {
    kaldi::Vector<float>::Destroy(v4 + 88);
    float v18 = (void **)(v4 + 48);
    std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
    uint64_t v5 = *(void **)(v4 + 24);
    if (v5)
    {
      *(void *)(v4 + 32) = v5;
      operator delete(v5);
    }
    MEMORY[0x1B3EA8670](v4, 0x10B0C40587FD9DDLL);
  }
  uint64_t v7 = *((void *)this + 16);
  uint64_t v6 = *((void *)this + 17);
  if (v6 != v7)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(v7 + 8 * v8);
      if (v9)
      {
        uint64_t v10 = *(void **)v9;
        if (*(void *)v9)
        {
          *(void *)(v9 + 8) = v10;
          operator delete(v10);
        }
        MEMORY[0x1B3EA8670](v9, 0x1020C403D3F9D26);
        uint64_t v7 = *((void *)this + 16);
        uint64_t v6 = *((void *)this + 17);
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
  }
  uint64_t v12 = *((void *)this + 19);
  uint64_t v11 = *((void *)this + 20);
  if (v11 != v12)
  {
    unint64_t v13 = 0;
    do
    {
      uint64_t v14 = *(void *)(v12 + 8 * v13);
      if (v14)
      {
        kaldi::Vector<float>::Destroy(*(void *)(v12 + 8 * v13));
        MEMORY[0x1B3EA8670](v14, 0x1080C4066DFD6F0);
        uint64_t v12 = *((void *)this + 19);
        uint64_t v11 = *((void *)this + 20);
      }
      ++v13;
    }
    while (v13 < (v11 - v12) >> 3);
  }
  kaldi::Vector<float>::Destroy((uint64_t)this + 272);
  float v15 = (void *)*((void *)this + 27);
  if (v15)
  {
    *((void *)this + 28) = v15;
    operator delete(v15);
  }
  kaldi::Vector<float>::Destroy((uint64_t)this + 184);
  float v16 = (void *)*((void *)this + 19);
  if (v16)
  {
    *((void *)this + 20) = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)*((void *)this + 16);
  if (v17)
  {
    *((void *)this + 17) = v17;
    operator delete(v17);
  }
  kaldi::Vector<float>::Destroy((uint64_t)this + 88);
}

uint64_t kaldi::OnlinePitchFeature::NumFramesReady(kaldi::OnlinePitchFeature *this)
{
  return ((*(void *)(*((void *)this + 1) + 224) - *(void *)(*((void *)this + 1) + 216)) >> 3)
       - *(_DWORD *)(*((void *)this + 1) + 176);
}

void kaldi::OnlinePitchFeature::OnlinePitchFeature(void *a1)
{
  *a1 = &unk_1F0A47C70;
  operator new();
}

void sub_1B1AE7C90(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A0C40F69C32FELL);
  _Unwind_Resume(a1);
}

BOOL kaldi::OnlinePitchFeature::IsLastFrame(kaldi::OnlinePitchFeature *this, int a2)
{
  uint64_t v2 = *((void *)this + 1);
  return *(unsigned char *)(v2 + 240)
      && a2 + 1 == ((*(void *)(v2 + 224) - *(void *)(v2 + 216)) >> 3) - *(_DWORD *)(v2 + 176);
}

float kaldi::OnlinePitchFeature::GetFrame(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = (int *)(*(void *)(v3 + 216) + 8 * a2);
  uint64_t v5 = *a3;
  *(_DWORD *)uint64_t v5 = v4[1];
  float result = 1.0 / *(float *)(*(void *)(v3 + 88) + 4 * *v4);
  *(float *)(v5 + 4) = result;
  return result;
}

void kaldi::OnlinePitchFeature::AcceptWaveform(uint64_t a1, uint64_t a2)
{
}

void kaldi::OnlinePitchFeature::InputFinished(kaldi::OnlinePitchFeatureImpl **this)
{
}

void kaldi::OnlinePitchFeature::Compute(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
}

void kaldi::OnlinePitchFeature::~OnlinePitchFeature(kaldi::OnlinePitchFeature *this)
{
  *(void *)this = &unk_1F0A47C70;
  uint64_t v1 = (kaldi::OnlinePitchFeatureImpl *)*((void *)this + 1);
  if (v1)
  {
    kaldi::OnlinePitchFeatureImpl::~OnlinePitchFeatureImpl(v1);
    MEMORY[0x1B3EA8670]();
  }
}

{
  uint64_t vars8;

  kaldi::OnlinePitchFeature::~OnlinePitchFeature(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::OnlineProcessPitch::OnlineProcessPitch(uint64_t a1, long long *a2, void (***a3)(void))
{
  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  int v6 = *((unsigned __int8 *)a2 + 40);
  int v7 = *((unsigned __int8 *)a2 + 41);
  int v8 = *((unsigned __int8 *)a2 + 42);
  int v9 = *((unsigned __int8 *)a2 + 43);
  int v10 = *((unsigned __int8 *)a2 + 44);
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 48) = a3;
  *(_DWORD *)(a1 + 56) = v7 + v6 + v8 + v9 + v10;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  (**a3)(a3);
  return a1;
}

void sub_1B1AE7E84(_Unwind_Exception *exception_object)
{
  long long v4 = (void *)v1[11];
  if (v4)
  {
    void v1[12] = v4;
    operator delete(v4);
  }
  long long v5 = *v2;
  if (*v2)
  {
    v1[9] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::OnlineProcessPitch::NumFramesReady(kaldi::OnlineProcessPitch *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 6) + 8))(*((void *)this + 6));
  if (result)
  {
    int v3 = result;
    if ((*(unsigned int (**)(void, void))(**((void **)this + 6) + 16))(*((void *)this + 6), (result - 1)))
    {
      return (*((_DWORD *)this + 9) + v3);
    }
    else
    {
      int v4 = v3 - *((_DWORD *)this + 7) + *((_DWORD *)this + 9);
      return v4 & ~(v4 >> 31);
    }
  }
  return result;
}

void kaldi::OnlineProcessPitch::GetFrame(uint64_t a1, int a2, float **a3)
{
  int v5 = *(_DWORD *)(a1 + 36);
  BOOL v6 = __OFSUB__(a2, v5);
  int v7 = a2 - v5;
  if (v7 < 0 != v6) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  kaldi::OnlineProcessPitch::NumFramesReady((kaldi::OnlineProcessPitch *)a1);
  if (*(unsigned char *)(a1 + 40))
  {
    float v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    kaldi::Vector<float>::Resize((void **)&v15, 2, 0);
    int v9 = (kaldi *)(*(uint64_t (**)(void, uint64_t, float **))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), v8, &v15);
    float v10 = *(float *)(a1 + 4);
    float v11 = kaldi::NccfToPovFeature(v9, *v15);
    float v12 = *(float *)(a1 + 8);
    kaldi::Vector<float>::Destroy((uint64_t)&v15);
    **a3 = v12 + (float)(v10 * v11);
    unsigned int v13 = 1;
  }
  else
  {
    unsigned int v13 = 0;
  }
  if (*(unsigned char *)(a1 + 41)) {
    (*a3)[v13++] = kaldi::OnlineProcessPitch::GetNormalizedLogPitchFeature((kaldi::OnlineProcessPitch *)a1, v8);
  }
  if (*(unsigned char *)(a1 + 42)) {
    (*a3)[v13++] = kaldi::OnlineProcessPitch::GetDeltaPitchFeature((kaldi::OnlineProcessPitch *)a1, v8, 1u);
  }
  if (*(unsigned char *)(a1 + 43)) {
    (*a3)[v13++] = kaldi::OnlineProcessPitch::GetDeltaPitchFeature((kaldi::OnlineProcessPitch *)a1, v8, 2u);
  }
  if (*(unsigned char *)(a1 + 44))
  {
    float v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    kaldi::Vector<float>::Resize((void **)&v15, 2, 0);
    (*(void (**)(void, uint64_t, float **))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), v8, &v15);
    float v14 = v15[1];
    kaldi::Vector<float>::Destroy((uint64_t)&v15);
    (*a3)[v13] = logf(v14);
  }
}

void sub_1B1AE810C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::OnlineProcessPitch::GetNormalizedLogPitchFeature(kaldi::OnlineProcessPitch *this, uint64_t a2)
{
  kaldi::OnlineProcessPitch::UpdateNormalizationStats(this, a2);
  memset(v9, 0, sizeof(v9));
  kaldi::Vector<float>::Resize(v9, 2, 0);
  (*(void (**)(void, uint64_t, void **))(**((void **)this + 6) + 24))(*((void *)this + 6), a2, v9);
  float v4 = *((float *)v9[0] + 1);
  kaldi::Vector<float>::Destroy((uint64_t)v9);
  float v5 = logf(v4);
  uint64_t v6 = *((void *)this + 11) + 24 * (int)a2;
  float v7 = *(double *)(v6 + 16) / *(double *)(v6 + 8);
  return *(float *)this * (float)(v5 - v7);
}

void sub_1B1AE8200(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::OnlineProcessPitch::GetDeltaPitchFeature(kaldi::OnlineProcessPitch *this, int a2, unsigned int a3)
{
  int v6 = *((_DWORD *)this + 8);
  int v7 = (a2 - v6) & ~((a2 - v6) >> 31);
  int v8 = a2 + v6;
  int v9 = a2 + v6 + 1;
  int v10 = (*(uint64_t (**)(void))(**((void **)this + 6) + 8))(*((void *)this + 6));
  if (v10 >= v9) {
    int v11 = v8 + 1;
  }
  else {
    int v11 = v10;
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v42, (v11 - v7), 1, 0, 0);
  kaldi::Matrix<float>::Matrix((uint64_t)v40);
  BOOL v12 = __OFSUB__(v11, v7);
  int v13 = v11 - v7;
  if (!((v13 < 0) ^ v12 | (v13 == 0)))
  {
    int v14 = 0;
    do
    {
      memset(v44, 0, 24);
      kaldi::Vector<float>::Resize(v44, 2, 0);
      (*(void (**)(void, void, void **))(**((void **)this + 6) + 24))(*((void *)this + 6), (v7 + v14), v44);
      float v15 = *((float *)v44[0] + 1);
      kaldi::Vector<float>::Destroy((uint64_t)v44);
      *(float *)(v42[0] + 4 * v43 * v14++) = logf(v15);
    }
    while (v13 != v14);
  }
  v44[0] = (void *)__PAIR64__(*((_DWORD *)this + 8), a3);
  kaldi::ComputeDeltas((unsigned int *)v44, (uint64_t)v42, v40);
  uint64_t v16 = *((void *)this + 8);
  uint64_t v17 = (void **)((char *)this + 64);
  if (a2 >= (unint64_t)((*((void *)this + 9) - v16) >> 2))
  {
    unsigned int v39 = a3;
    do
    {
      int v18 = kaldi::Rand(0);
      int v19 = kaldi::Rand(0);
      float v20 = ((double)v18 + 1.0) / 2147483650.0;
      float v21 = sqrtf(logf(v20) * -2.0);
      float v22 = ((double)v19 + 1.0) / 2147483650.0;
      float v23 = v22 * 6.28318531;
      float v24 = (float)(v21 * cosf(v23)) * *((float *)this + 5);
      BOOL v26 = (float *)*((void *)this + 9);
      unint64_t v25 = *((void *)this + 10);
      if ((unint64_t)v26 >= v25)
      {
        float v28 = (float *)*v17;
        uint64_t v29 = ((char *)v26 - (unsigned char *)*v17) >> 2;
        unint64_t v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v31 = v25 - (void)v28;
        if (v31 >> 1 > v30) {
          unint64_t v30 = v31 >> 1;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v30;
        }
        if (v32)
        {
          uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 80, v32);
          float v28 = (float *)*((void *)this + 8);
          BOOL v26 = (float *)*((void *)this + 9);
        }
        else
        {
          uint64_t v33 = 0;
        }
        unint64_t v34 = (float *)&v33[4 * v29];
        *unint64_t v34 = v24;
        float v27 = v34 + 1;
        while (v26 != v28)
        {
          int v35 = *((_DWORD *)v26-- - 1);
          *((_DWORD *)v34-- - 1) = v35;
        }
        *((void *)this + 8) = v34;
        *((void *)this + 9) = v27;
        *((void *)this + 10) = &v33[4 * v32];
        if (v28) {
          operator delete(v28);
        }
      }
      else
      {
        *BOOL v26 = v24;
        float v27 = v26 + 1;
      }
      *((void *)this + 9) = v27;
      uint64_t v16 = *((void *)this + 8);
    }
    while (a2 >= (unint64_t)(((uint64_t)v27 - v16) >> 2));
    a3 = v39;
  }
  if (a2 >= v6) {
    int v36 = v6;
  }
  else {
    int v36 = a2;
  }
  if (a3 == 1) {
    float v37 = (float)(*(float *)(*(void *)v40 + 4 * v41 * v36 + 4) + *(float *)(v16 + 4 * a2)) * *((float *)this + 3);
  }
  else {
    float v37 = (*(float *)(*(void *)v40 + 4 * v41 * v36 + 4 * (int)a3) + *(float *)(v16 + 4 * a2) * 0.1)
  }
        * *((float *)this + 4);
  kaldi::Matrix<float>::~Matrix((uint64_t)v40);
  kaldi::Matrix<float>::~Matrix((uint64_t)v42);
  return v37;
}

void sub_1B1AE8568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::Matrix<float>::~Matrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlinePitchFeature::Dim(kaldi::OnlinePitchFeature *this)
{
  return 2;
}

void std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<kaldi::Vector<float>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<kaldi::Vector<float>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; kaldi::Vector<float>::Destroy(i))
    i -= 24;
  *(void *)(a1 + 8) = a2;
}

void kaldi::OnlineProcessPitch::UpdateNormalizationStats(kaldi::OnlineProcessPitch *this, unsigned int a2)
{
  uint64_t v5 = *((void *)this + 11);
  uint64_t v6 = *((void *)this + 12);
  uint64_t v4 = (char *)this + 88;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3) <= a2) {
    std::vector<kaldi::OnlineProcessPitch::NormalizationStats>::resize((uint64_t)v4, a2 + 1);
  }
  int v8 = (*(uint64_t (**)(void))(**((void **)this + 6) + 8))(*((void *)this + 6));
  int v9 = (*(uint64_t (**)(void, void))(**((void **)this + 6) + 16))(*((void *)this + 6), (v8 - 1));
  uint64_t v10 = *((void *)this + 11);
  uint64_t v11 = v10 + 24 * a2;
  if (*(_DWORD *)v11 != v8 || *(unsigned __int8 *)(v10 + 24 * a2 + 4) != v9)
  {
    uint64_t v12 = (a2 - *((_DWORD *)this + 6)) & ~((int)(a2 - *((_DWORD *)this + 6)) >> 31);
    unsigned int v13 = a2 + *((_DWORD *)this + 7);
    if ((int)(v13 + 1) < v8) {
      int v14 = v13 + 1;
    }
    else {
      int v14 = v8;
    }
    if (a2
      && (unsigned int v15 = a2 - 1, v16 = v10 + 24 * (a2 - 1), *(_DWORD *)v16 == v8)
      && *(unsigned __int8 *)(v10 + 24 * v15 + 4) == v9)
    {
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v16;
      *(void *)(v11 + 16) = *(void *)(v16 + 16);
      uint64_t v17 = (v15 - *((_DWORD *)this + 6)) & ~((int)(v15 - *((_DWORD *)this + 6)) >> 31);
      int v18 = *((_DWORD *)this + 7) + a2;
      if (v18 >= v8) {
        uint64_t v19 = v8;
      }
      else {
        uint64_t v19 = v18;
      }
      if (v12 != v17)
      {
        unint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        kaldi::Vector<float>::Resize((void **)&v34, 2, 0);
        float v20 = (kaldi *)(*(uint64_t (**)(void, uint64_t, float **))(**((void **)this + 6) + 24))(*((void *)this + 6), v17, &v34);
        float v31 = kaldi::NccfToPov(v20, *v34);
        float v21 = logf(v34[1]);
        v22.f32[0] = v31;
        v22.f32[1] = v31 * v21;
        *(float64x2_t *)(v10 + 24 * a2 + 8) = vsubq_f64(*(float64x2_t *)(v10 + 24 * a2 + 8), vcvtq_f64_f32(v22));
        kaldi::Vector<float>::Destroy((uint64_t)&v34);
      }
      if (v14 != v19)
      {
        unint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        kaldi::Vector<float>::Resize((void **)&v34, 2, 0);
        float v23 = (kaldi *)(*(uint64_t (**)(void, uint64_t, float **))(**((void **)this + 6) + 24))(*((void *)this + 6), v19, &v34);
        float v32 = kaldi::NccfToPov(v23, *v34);
        float v24 = logf(v34[1]);
        v25.f32[0] = v32;
        v25.f32[1] = v32 * v24;
        *(float64x2_t *)(v10 + 24 * a2 + 8) = vaddq_f64(*(float64x2_t *)(v10 + 24 * a2 + 8), vcvtq_f64_f32(v25));
        kaldi::Vector<float>::Destroy((uint64_t)&v34);
      }
    }
    else
    {
      uint64_t v26 = v10 + 24 * a2;
      *(void *)(v26 + 8) = 0;
      uint64_t v27 = v26 + 8;
      *(_DWORD *)uint64_t v11 = v8;
      *(unsigned char *)(v27 - 4) = v9;
      *(void *)(v27 + 8) = 0;
      unint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      kaldi::Vector<float>::Resize((void **)&v34, 2, 0);
      if ((int)v12 < v14)
      {
        do
        {
          float v28 = (kaldi *)(*(uint64_t (**)(void, uint64_t, float **))(**((void **)this + 6) + 24))(*((void *)this + 6), v12, &v34);
          float v33 = kaldi::NccfToPov(v28, *v34);
          float v29 = logf(v34[1]);
          v30.f32[0] = v33;
          v30.f32[1] = v33 * v29;
          *(float64x2_t *)uint64_t v27 = vaddq_f64(*(float64x2_t *)v27, vcvtq_f64_f32(v30));
          uint64_t v12 = (v12 + 1);
        }
        while (v14 != v12);
      }
      kaldi::Vector<float>::Destroy((uint64_t)&v34);
    }
  }
}

void sub_1B1AE89B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<kaldi::OnlineProcessPitch::NormalizationStats>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<kaldi::OnlineProcessPitch::NormalizationStats>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void std::vector<kaldi::OnlineProcessPitch::NormalizationStats>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      unsigned int v13 = &v7[24 * a2];
      do
      {
        *(_DWORD *)uint64_t v7 = -1;
        void v7[4] = 0;
        *((void *)v7 + 1) = 0;
        *((void *)v7 + 2) = 0;
        v7 += 24;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    int v14 = &v12[24 * v8];
    unsigned int v15 = &v14[24 * a2];
    uint64_t v16 = v14;
    do
    {
      *(_DWORD *)uint64_t v16 = -1;
      v16[4] = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = 0;
      v16 += 24;
    }
    while (v16 != v15);
    uint64_t v17 = &v12[24 * v11];
    uint64_t v19 = (char *)*a1;
    int v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 24);
        *((void *)v14 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v14 - ++*(void *)(result + 24) = v20;
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      int v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v17;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void kaldi::OnlineProcessPitch::~OnlineProcessPitch(kaldi::OnlineProcessPitch *this)
{
  unint64_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  BOOL v3 = (void *)*((void *)this + 8);
  if (v3)
  {
    *((void *)this + 9) = v3;
    operator delete(v3);
  }
}

void *std::vector<kaldi::PitchFrameInfo::StateInfo>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B1AE8C5C(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<int,int>>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v13);
      unint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      int v14 = 0;
    }
    unsigned int v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    if (v7 != v8)
    {
      do
      {
        uint64_t v18 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v15 - 1) = v18;
        v15 -= 8;
      }
      while (v7 != v8);
      unint64_t v8 = *a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void std::vector<std::vector<int>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<int>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        unint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void kaldi::ReadIntegerVector<int>(void *a1, int a2, std::vector<int> *a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (a5) {
    *a5 = 0;
  }
  if (a2)
  {
    if (std::istream::peek() != 4)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"ReadIntegerVector: expected to see type of size ", 48);
      float v29 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", saw instead ", 14);
      float32x2_t v30 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", at file position ", 19);
      std::istream::tellg();
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
    }
    std::istream::get();
    LODWORD(__sz) = 0;
    std::istream::read();
    if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) == 0)
    {
      int v13 = __sz;
      unsigned int v14 = __sz;
      if (a7) {
        *a7 = (int)__sz;
      }
      if (a4 && (a5 ? (BOOL v15 = v13 < 0) : (BOOL v15 = 0), !v15 ? (v16 = 0) : (v16 = 1), a6 || v16))
      {
        if (v16)
        {
          std::istream::tellg();
          *a5 = a4 + v37;
        }
        else if (a6)
        {
          std::istream::tellg();
          *a6 = a4 + v37;
        }
        std::istream::seekg();
        a3->__end_ = a3->__begin_;
        std::vector<int>::shrink_to_fit(a3);
      }
      else
      {
        std::vector<int>::resize((std::vector<unsigned int> *)a3, v14);
        if ((int)__sz >= 1) {
          std::istream::read();
        }
      }
      goto LABEL_53;
    }
LABEL_56:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"ReadIntegerVector: read failure at file position ", 49);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
  }
  std::string __p = 0;
  float v33 = 0;
  unint64_t v34 = 0;
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  if (std::istream::peek() != 91)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"ReadIntegerVector: expected to see [, saw ", 42);
    std::istream::peek();
    float v31 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", at file position ", 19);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
  }
  std::istream::get();
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  while (1)
  {
    int v17 = std::istream::peek();
    if (v17 == 93) {
      break;
    }
    LODWORD(v36[0]) = 0;
    uint64_t v18 = (void *)MEMORY[0x1B3EA7DD0](a1, v36);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(v18);
    if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0) {
      goto LABEL_44;
    }
    uint64_t v19 = v33;
    if ((unint64_t)v33 >= v34)
    {
      float v21 = __p;
      uint64_t v22 = ((char *)v33 - (unsigned char *)__p) >> 2;
      unint64_t v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v24 = v34 - (void)__p;
      if ((uint64_t)(v34 - (void)__p) >> 1 > v23) {
        unint64_t v23 = v24 >> 1;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25)
      {
        uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v34, v25);
        float v21 = __p;
        uint64_t v19 = v33;
      }
      else
      {
        uint64_t v26 = 0;
      }
      uint64_t v27 = &v26[4 * v22];
      *(_DWORD *)uint64_t v27 = v36[0];
      long long v20 = v27 + 4;
      while (v19 != v21)
      {
        int v28 = *--v19;
        *((_DWORD *)v27 - 1) = v28;
        v27 -= 4;
      }
      std::string __p = v27;
      float v33 = v20;
      unint64_t v34 = (unint64_t)&v26[4 * v25];
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *float v33 = v36[0];
      long long v20 = v19 + 1;
    }
    float v33 = v20;
  }
  std::istream::get();
  if (&__p != (void **)a3) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a3, (char *)__p, (uint64_t)v33, ((char *)v33 - (unsigned char *)__p) >> 2);
  }
  if (a7) {
    *a7 = a3->__end_ - a3->__begin_;
  }
LABEL_44:
  if (__p)
  {
    float v33 = __p;
    operator delete(__p);
  }
  if (v17 != 93) {
    goto LABEL_56;
  }
LABEL_53:
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0) {
    goto LABEL_56;
  }
}

void sub_1B1AE9310(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1AE9348);
}

void sub_1B1AE9324()
{
}

void sub_1B1AE9334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::vector<int>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int>*,std::vector<int>*,std::vector<int>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>((int)&v20, a2, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int>*,std::vector<int>*,std::vector<int>*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>((int)&v21, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    uint64_t v17 = *(void *)(a1 + 8);
    do
    {
      uint64_t v19 = *(void **)(v17 - 24);
      v17 -= 24;
      uint64_t v18 = v19;
      if (v19)
      {
        *(void *)(v16 - 16) = v18;
        operator delete(v18);
      }
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B1AE94CC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1AE94D4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<int>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<int>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int>*,std::vector<int>*,std::vector<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a4;
  unint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  int32x2_t v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *unint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      unint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1AE95B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      BOOL v5 = *(void **)(v3 - 24);
      v3 -= 24;
      unint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 16) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a4, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
      }
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t kaldi::WriteIntegerByteArray<int>(void *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    char v15 = 4;
    std::ostream::write();
    if (a3) {
      int v9 = -(int)a4;
    }
    else {
      int v9 = a4;
    }
    int v14 = v9;
    uint64_t result = std::ostream::write();
    if (a4)
    {
      if (a3 && !fst::AlignOutput(a1))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "Could not align output");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
      }
      uint64_t result = std::ostream::write();
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[ ", 2);
    for (; a4; --a4)
    {
      a5 += 4;
      unint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
    }
    uint64_t result = (uint64_t)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]\n", 2);
  }
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteIntegerType.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1B1AE984C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    char v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1B1AE99B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<int>::shrink_to_fit(std::vector<int> *this)
{
  p_end_cap = &this->__end_cap_;
  value = this->__end_cap_.__value_;
  std::vector<int>::pointer begin = this->__begin_;
  std::vector<int>::pointer end = this->__end_;
  unint64_t v6 = end - begin;
  if (v6 >= value - begin) {
    return;
  }
  if (end == begin)
  {
    unint64_t v11 = 0;
    unint64_t v9 = (int *)(4 * v6);
    goto LABEL_8;
  }
  uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v6);
  std::vector<int>::pointer begin = this->__begin_;
  unint64_t v8 = this->__end_;
  unint64_t v9 = (int *)&v7[4 * v6];
  unint64_t v11 = (int *)&v7[4 * v10];
  if (v8 == this->__begin_)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    int v13 = *--v8;
    *--uint64_t v12 = v13;
  }
  while (v8 != begin);
LABEL_9:
  this->__begin_ = v12;
  this->__end_ = v9;
  this->__end_cap_.__value_ = v11;
  if (begin)
  {
    operator delete(begin);
  }
}

int *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::__equal_to &>(int *a1, int *a2)
{
  uint64_t result = a2;
  if (a1 != a2)
  {
    uint64_t v4 = a1 + 1;
    do
    {
      if (v4 == a2) {
        return a2;
      }
      int v5 = *(v4 - 1);
      int v6 = *v4++;
    }
    while (v5 != v6);
    uint64_t v7 = v4 - 2;
    while (v4 != a2)
    {
      int v8 = v5;
      int v5 = *v4;
      if (v8 != *v4)
      {
        v7[1] = v5;
        ++v7;
      }
      ++v4;
    }
    return v7 + 1;
  }
  return result;
}

__n128 std::vector<int>::__move_assign(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t quasar::OnlineLatticeWordAlignmentDecoder::OnlineLatticeWordAlignmentDecoder(uint64_t a1, long long *a2)
{
  *(void *)quasar::Decoder::Decoder(a1, a2) = &unk_1F0A584C8;
  uint64_t v3 = (char *)operator new(0xA8uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)uint64_t v3 = &unk_1F0A60678;
  *((void *)v3 + 19) = 0;
  *((void *)v3 + 20) = 0;
  *((void *)v3 + 18) = 0;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + ++*(void *)(result + 24) = 0u;
  *((_DWORD *)v3 + 34) = 0;
  *(void *)(a1 + 448) = v3 + 24;
  *(void *)(a1 + 456) = v3;
  *(void *)(a1 + 464) = 0;
  *(unsigned char *)(a1 + 472) = 1;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  return a1;
}

void sub_1B1AE9BFC(_Unwind_Exception *a1)
{
  quasar::Decoder::~Decoder(v1);
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeWordAlignmentDecoder::finishInit(quasar::OnlineLatticeWordAlignmentDecoder *this)
{
  uint64_t v2 = (quasar::OnlineLatticeWordAlignmentDecoder *)((char *)this + 32);
  quasar::SystemConfig::Version::Version(v10, 16, 1);
  if (quasar::SystemConfig::Version::operator>=(v2, v10))
  {
    quasar::QsrTextSymbolTable::init(*((const std::string **)this + 56), v2, 0, *((unsigned __int8 *)this + 441), 1);
    uint64_t v3 = quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 56), "<?>");
    if (v3 != -1)
    {
      int v4 = v3;
      uint64_t v5 = *((int *)this + 116);
      if (v5 && v3 != v5 && quasar::gLogLevel >= 5)
      {
        memset(v10, 0, sizeof(v10));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Silence label is set to ", 24);
        int v6 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" but does not match the auto-determined silence label ", 54);
        uint64_t v7 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)". Will use latter.", 18);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v10);
      }
      *((_DWORD *)this + 116) = v4;
    }
  }
  quasar::ModelLoader::readWordBoundaryInfo(*((void **)this + 46), (unsigned int *)this + 116, (uint64_t)this + 496, (uint64_t)this + 520, (uint64_t *)v10);
  long long v8 = v10[0];
  v10[0] = 0uLL;
  unint64_t v9 = (std::__shared_weak_count *)*((void *)this + 61);
  *((_OWORD *)this + 30) = v8;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    if (*((void *)&v10[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10[0] + 1));
    }
  }
}

void sub_1B1AE9D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::OnlineLatticeWordAlignmentDecoder::runImpl(uint64_t a1, clockid_t a2)
{
  char v3 = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v2, a2);
  uint64_t v4 = 0;
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
}

void sub_1B1AEA118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)va1);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst((uint64_t *)va);
  uint64_t v5 = *(std::__shared_weak_count **)(v3 - 128);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLatticeWordAlignmentDecoder::supportsEager(quasar::OnlineLatticeWordAlignmentDecoder *this)
{
  return 1;
}

uint64_t quasar::OnlineLatticeWordAlignmentDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  quasar::QsrTextSymbolTable::Register(this[56], a2, 16, 1, 0x7FFFFFFF, 0x7FFFFFFF);
  kaldi::WordBoundaryInfoNewOpts::Register((uint64_t)(this + 58), (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(v9, "word-boundary-int-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Word boundary file with format <integer-phone-id> [begin|end|singleton|internal|nonword]");
  uint64_t v4 = (char *)(this + 62);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v9, (uint64_t)(this + 62), (uint64_t)__p, 1, 1, 1, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v9, "unpronounced-word-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing newline-separated list of words with no pronunciation.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v9, (uint64_t)(this + 65), (uint64_t)__p, 0, 20, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v9, "max-expand");
  std::string::basic_string[abi:ne180100]<0>(__p, "If >0, the max amount by which lattices will be expanded.");
  uint64_t v5 = this + 68;
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v9, (uint64_t)v5, (uint64_t)__p, 0, 1, 1, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  uint64_t result = MEMORY[0x1B3EA7B20](v4, "");
  *uint64_t v5 = 0;
  return result;
}

void sub_1B1AEA364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::WordBoundaryInfoNewOpts::Register(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "silence-label");
  std::string::basic_string[abi:ne180100]<0>(__p, "Numeric id of word symbol that is to be used for silence arcs in the word-aligned lattice (zero is OK)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "partial-word-label");
  std::string::basic_string[abi:ne180100]<0>(__p, "Numeric id of word symbol that is to be used for arcs in the word-aligned lattice corresponding to partial words at the end of \"forced-out\" utterances (zero is OK)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 4, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "reorder");
  std::string::basic_string[abi:ne180100]<0>(__p, "True if the lattices were generated from graphs that had the --reorder option true, relating to reordering self-loops (typically true)");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 8, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1AEA530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLatticeWordAlignmentDecoder::~OnlineLatticeWordAlignmentDecoder(void **this)
{
  *this = &unk_1F0A584C8;
  if (*((char *)this + 543) < 0) {
    operator delete(this[65]);
  }
  if (*((char *)this + 519) < 0) {
    operator delete(this[62]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[61];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[57];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)this);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *this = &unk_1F0A584C8;
  if (*((char *)this + 543) < 0) {
    operator delete(this[65]);
  }
  if (*((char *)this + 519) < 0) {
    operator delete(this[62]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[61];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[57];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::Timer::Reset(kaldi::Timer *this, clockid_t a2)
{
  *(double *)this = kaldi::Timer::GetSeconds((kaldi::Timer *)5, a2);
  if (*((unsigned char *)this + 24)) {
    *((double *)this + 1) = kaldi::Timer::GetSeconds((kaldi::Timer *)0xC, v3);
  }
  *((double *)this + 2) = kaldi::Timer::GetSeconds((kaldi::Timer *)0x10, v3);
}

double kaldi::Timer::GetSeconds(kaldi::Timer *this, clockid_t a2)
{
  if (clock_gettime((clockid_t)this, &__tp) && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Could not read clock ", 21);
    uint64_t v2 = (void *)std::ostream::operator<<();
    clockid_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)": ", 2);
    uint64_t v4 = __error();
    char v5 = strerror(*v4);
    size_t v6 = strlen(v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, v6);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
  }
  return (double)__tp.tv_nsec / 1000000000.0 + (double)__tp.tv_sec;
}

void sub_1B1AEA7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60678;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60678;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::__on_zero_shared(uint64_t a1)
{
  std::allocator<quasar::QsrTextSymbolTable>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<quasar::QsrTextSymbolTable>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  clockid_t v3 = *(std::__shared_weak_count **)(a2 + 136);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 104);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*(char *)(a2 + 95) < 0) {
    operator delete(*(void **)(a2 + 72));
  }
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*(void **)(a2 + 48));
  }
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    char v5 = *(void **)a2;
    operator delete(v5);
  }
}

void _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_()
{
  uint64_t v0 = operator new(0x28uLL);
  _ZNSt3__120__shared_ptr_emplaceIN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEEC2B8ne180100IJESE_Li0EEESE_DpOT_(v0);
}

void sub_1B1AEA934(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__120__shared_ptr_emplaceIN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEEC2B8ne180100IJESE_Li0EEESE_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E730;
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst();
}

void sub_1B1AEA990(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E730;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E730;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void EARVoiceCommandRecognizeText(void *a1, quasar *a2)
{
  id v3 = a1;
  quasar::makeVoiceCommandActiveSetCompilation(a2, v4);
}

void sub_1B1AEAC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  a21 = &a30;
  std::vector<quasar::VoiceCommandInterpretation>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  if (a38 < 0) {
    operator delete(__p);
  }
  quasar::VoiceCommandActiveSetCompilation::~VoiceCommandActiveSetCompilation((quasar::VoiceCommandActiveSetCompilation *)&a39);

  _Unwind_Resume(a1);
}

void quasar::VoiceCommandActiveSetCompilation::~VoiceCommandActiveSetCompilation(quasar::VoiceCommandActiveSetCompilation *this)
{
  std::__tree<int>::destroy((uint64_t)this + 104, *((void **)this + 14));
  std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::~__hash_table((uint64_t)this + 64);
  std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::destroy((uint64_t)this + 40, *((void **)this + 6));
  std::__tree<int>::destroy((uint64_t)this + 16, *((void **)this + 3));
  fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(this);
}

void EARVoiceCommandRecognizeAnyText(void *a1, quasar *a2)
{
  id v3 = a1;
  quasar::makeVoiceCommandActiveSetCompilation(a2, v4);
}

void sub_1B1AEAE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  quasar::VoiceCommandActiveSetCompilation::~VoiceCommandActiveSetCompilation((quasar::VoiceCommandActiveSetCompilation *)&a21);

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      id v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite>,0>(uint64_t a1)
{
  std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::~__hash_table(a1 + 120);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 56);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      id v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation::CommandSpec,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation::CommandSpec,0>(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 56);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<int const,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<int const,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,0>(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 64);
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

void *fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A434E0;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Start(*(void *)(a1 + 8));
}

float fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Final(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::NumInputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::NumOutputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    char v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

uint64_t fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Write(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  int v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

{
  fst *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  int v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B1AEB3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1AEB4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v2 = *(_DWORD *)(*(void *)(a1 + 152) + 56);
      *(_DWORD *)(a1 + 64) = v2;
      *(unsigned char *)(a1 + 60) = 1;
      if (*(_DWORD *)(a1 + 68) <= v2) {
        *(_DWORD *)(a1 + 68) = v2 + 1;
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

float fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Final(uint64_t a1, int a2)
{
  if (fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2))
  {
    uint64_t v4 = *(void *)(a1 + 120);
    if (*(_DWORD *)(v4 + 76) == a2) {
      uint64_t v5 = v4 + 80;
    }
    else {
      uint64_t v5 = *(void *)(v4 + 8) + 8 * a2 + 8;
    }
    return **(float **)v5;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 152);
    uint64_t v7 = (unsigned int *)(*(void *)(v6 + 16) + 4 * a2);
    if (*v7 == v7[1]) {
      return INFINITY;
    }
    float result = 0.0;
    if (*(_DWORD *)(*(void *)(v6 + 24) + 12 * *v7) != -1) {
      return INFINITY;
    }
  }
  return result;
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v2 + 76) == a2)
  {
    int v3 = (uint64_t *)(v2 + 80);
  }
  else
  {
    unint64_t v4 = a2 + 1;
    uint64_t v6 = v2 + 8;
    uint64_t v5 = *(void *)(v2 + 8);
    if (v4 >= (*(void *)(v6 + 8) - v5) >> 3) {
      return 0;
    }
    int v3 = (uint64_t *)(v5 + 8 * v4);
  }
  uint64_t v7 = *v3;
  if (!v7) {
    return 0;
  }
  int v8 = *(_DWORD *)(v7 + 48);
  if ((v8 & 1) == 0) {
    return 0;
  }
  *(_DWORD *)(v7 + 48) = v8 | 8;
  return 1;
}

uint64_t fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::NumArcs(uint64_t a1, int a2)
{
  if (fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2))
  {
    uint64_t v4 = *(void *)(a1 + 120);
    if (*(_DWORD *)(v4 + 76) == a2) {
      uint64_t v5 = v4 + 80;
    }
    else {
      uint64_t v5 = *(void *)(v4 + 8) + 8 * a2 + 8;
    }
    return (uint64_t)(*(void *)(*(void *)v5 + 32) - *(void *)(*(void *)v5 + 24)) >> 4;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 152);
    uint64_t v7 = (unsigned int *)(*(void *)(v6 + 16) + 4 * a2);
    unsigned int v8 = *v7;
    unsigned int v9 = v7[1];
    if (v9 == v8) {
      return 0;
    }
    else {
      return v9 - v8 - (*(_DWORD *)(*(void *)(v6 + 24) + 12 * v8) == -1);
    }
  }
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v2 + 76) == a2)
  {
    int v3 = (uint64_t *)(v2 + 80);
  }
  else
  {
    unint64_t v4 = a2 + 1;
    uint64_t v6 = v2 + 8;
    uint64_t v5 = *(void *)(v2 + 8);
    if (v4 >= (*(void *)(v6 + 8) - v5) >> 3) {
      return 0;
    }
    int v3 = (uint64_t *)(v5 + 8 * v4);
  }
  uint64_t v7 = *v3;
  if (!v7) {
    return 0;
  }
  int v8 = *(_DWORD *)(v7 + 48);
  if ((v8 & 2) == 0) {
    return 0;
  }
  *(_DWORD *)(v7 + 48) = v8 | 8;
  return 1;
}

uint64_t fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::NumInputEpsilons(void *a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0&& !(*(uint64_t (**)(void *, uint64_t))(*a1 + 32))(a1, 0x10000000))
  {
    fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Expand((uint64_t)a1, a2);
  }
  if (fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2))
  {
    uint64_t v4 = a1[15];
    if (*(_DWORD *)(v4 + 76) == a2) {
      uint64_t v5 = v4 + 80;
    }
    else {
      uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
    }
    return *(void *)(*(void *)v5 + 8);
  }
  else
  {
    return fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::CountEpsilons((uint64_t)a1, a2, 0);
  }
}

void fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Expand(uint64_t a1, int a2)
{
  uint64_t v4 = (unsigned int *)(*(void *)(*(void *)(a1 + 152) + 16) + 4 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 < v6)
  {
    do
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 152) + 24) + 12 * v5;
      uint64_t v8 = *(void *)v7;
      unint64_t v9 = (unint64_t)*(unsigned int *)(v7 + 8) << 32;
      *(void *)&long long v12 = v8;
      *((void *)&v12 + 1) = v9;
      Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      if (v8 == -1)
      {
        *(_DWORD *)Mutableuint64_t State = 0;
        *((_DWORD *)MutableState + 12) |= 9u;
      }
      else
      {
        fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v12);
      }
      ++v5;
    }
    while (v6 != v5);
  }
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) == 0)
  {
    unint64_t v11 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    *(_DWORD *)unint64_t v11 = 2139095040;
    *((_DWORD *)v11 + 12) |= 9u;
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

uint64_t fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::CountEpsilons(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 152);
  uint64_t v4 = (unsigned int *)(*(void *)(v3 + 16) + 4 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 >= v6) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v8 = *(void *)(v3 + 24);
  do
  {
    unint64_t v9 = (int *)(v8 + 12 * v5);
    int v11 = *v9;
    int v10 = v9[1];
    if (!a3) {
      int v10 = v11;
    }
    int v12 = 2 * (v10 > 0);
    if (v10 == -1) {
      int v12 = 4;
    }
    uint64_t v13 = v10 < 1 && v10 != -1;
    result += v13;
    ++v5;
  }
  while ((v12 | 4) == 4 && v6 != v5);
  return result;
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(uint64_t a1, int a2)
{
  Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetArcs(*(void *)(a1 + 120), (uint64_t)MutableState);
  uint64_t v5 = *((void *)MutableState + 3);
  uint64_t v6 = *((void *)MutableState + 4) - v5;
  if (v6)
  {
    unint64_t v7 = v6 >> 4;
    int v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    unint64_t v9 = (int *)(v5 + 12);
    do
    {
      int v11 = *v9;
      v9 += 4;
      int v10 = v11;
      if (v11 >= v8)
      {
        int v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 12) |= 0xAu;
}

char *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  Mutableuint64_t State = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::GetMutableState(a1, a2);
  uint64_t v4 = MutableState;
  if (*(unsigned char *)(a1 + 88))
  {
    int v5 = *((_DWORD *)MutableState + 12);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 12) = v5 | 4;
      unint64_t v6 = *((void *)MutableState + 4) - *((void *)MutableState + 3) + *(void *)(a1 + 112) + 56;
      *(void *)(a1 + 112) = v6;
      *(unsigned char *)(a1 + 104) = 1;
      if (v6 > *(void *)(a1 + 96)) {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GC(a1, MutableState, 0, 0.666);
      }
    }
  }
  return v4;
}

char *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2) {
    return *(char **)(a1 + 80);
  }
  if (*(unsigned char *)(a1 + 72))
  {
    if (v3 == -1)
    {
      *(_DWORD *)(a1 + --*(_DWORD *)(a9 + 76) = a2;
      Mutableuint64_t State = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetMutableState(a1, 0);
      *(void *)(a1 + 80) = MutableState;
      *((_DWORD *)MutableState + 12) |= 4u;
      std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve((void **)MutableState + 3, 0x80uLL);
      return *(char **)(a1 + 80);
    }
    uint64_t v5 = *(void *)(a1 + 80);
    if (!*(_DWORD *)(v5 + 52))
    {
      *(_DWORD *)(a1 + --*(_DWORD *)(a9 + 76) = a2;
      *(_DWORD *)uint64_t v5 = 2139095040;
      *(void *)(v5 + 48) = 0;
      *(void *)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
      *(void *)(v5 + 32) = *(void *)(v5 + 24);
      uint64_t result = *(char **)(a1 + 80);
      *((_DWORD *)result + 12) |= 4u;
      return result;
    }
    *(_DWORD *)(v5 + 48) &= ~4u;
    *(unsigned char *)(a1 + 72) = 0;
  }
  int v6 = a2 + 1;
  return fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetMutableState(a1, v6);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GC(uint64_t a1, char *a2, char a3, float a4)
{
  if (*(unsigned char *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      int v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      unint64_t v9 = (void *)fst::cerr(v8);
      int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      int v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      int v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache std::string::size_type size = ", 15);
      uint64_t v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      size_t v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      char v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    uint64_t v17 = *(void *)(a1 + 40);
    *(void *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      int v18 = *(_DWORD *)(v17 + 16);
      if (v18) {
        int v19 = v18 - 1;
      }
      else {
        int v19 = *(_DWORD *)(a1 + 76);
      }
      Mutableuint64_t State = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::GetMutableState(a1, v19);
      unint64_t v21 = *(void *)(a1 + 112);
      if (v21 > v16 && !*((_DWORD *)MutableState + 13))
      {
        if (a3)
        {
          if (MutableState != a2)
          {
            int v22 = *((_DWORD *)MutableState + 12);
LABEL_19:
            if ((v22 & 4) != 0)
            {
              unint64_t v23 = *((void *)MutableState + 4) - *((void *)MutableState + 3) + 56;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(void *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Delete((void *)a1);
            uint64_t v17 = *(void *)(a1 + 56);
            continue;
          }
        }
        else
        {
          int v22 = *((_DWORD *)MutableState + 12);
          if ((v22 & 8) == 0 && MutableState != a2) {
            goto LABEL_19;
          }
        }
      }
      *((_DWORD *)MutableState + 12) &= ~8u;
      uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
      *(void *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(void *)(a1 + 112) <= v16)
    {
      unint64_t v24 = *(void *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          uint64_t v25 = *(void *)(a1 + 96);
          do
          {
            v25 *= 2;
            BOOL v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(void *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal) {
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        }
        uint64_t v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        int v28 = (void *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      float v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      float32x2_t v30 = (void *)fst::cerr(v29);
      float v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      float v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      float v33 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache std::string::size_type size = ", 15);
      unint64_t v34 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      uint64_t v35 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      uint64_t v36 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0) {
        operator delete(v37[0]);
      }
    }
  }
}

void sub_1B1AEBFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

char *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v5 = a1 + 8;
  if (a2 >= (unint64_t)((v7 - v6) >> 3))
  {
    uint64_t v13 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(v5, a2 + 1, &v13);
  }
  else
  {
    int v8 = *(char **)(v6 + 8 * a2);
    if (v8) {
      return v8;
    }
  }
  int v8 = (char *)operator new(0x38uLL);
  *(_DWORD *)int v8 = 2139095040;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + ++*(void *)(result + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(void *)(*(void *)(a1 + 8) + 8 * v4) = v8;
  if (*(unsigned char *)a1)
  {
    unint64_t v9 = operator new(0x18uLL);
    v9[4] = a2;
    uint64_t v11 = *(void *)(a1 + 32);
    int v10 = (void *)(a1 + 32);
    *(void *)unint64_t v9 = v11;
    *((void *)v9 + 1) = v10;
    *(void *)(v11 + 8) = v9;
    *int v10 = v9;
    ++v10[2];
  }
  return v8;
}

void std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    unint64_t v9 = &v6[16 * v8];
    uint64_t v11 = (char *)*a1;
    int v10 = (char *)a1[1];
    int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      int v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Delete(void *a1)
{
  int v1 = *(_DWORD *)(a1[7] + 16);
  if (!v1 || v1 - 1 == *((_DWORD *)a1 + 19))
  {
    *((_DWORD *)a1 + 19) = -1;
    a1[10] = 0;
  }
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Delete(a1);
}

void fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Delete(void *a1)
{
  fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(*(void **)(a1[1] + 8 * *(int *)(a1[7] + 16)));
  uint64_t v2 = a1[6];
  *(void *)(a1[1] + 8 * *(int *)(a1[7] + 16)) = 0;
  uint64_t v3 = (uint64_t *)a1[7];
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  *(void *)(v5 + 8) = v4;
  *(void *)v3[1] = v5;
  a1[6] = v2 - 1;
  a1[7] = v4;
  operator delete(v3);
}

void fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(void *a1, _OWORD *a2)
{
  unint64_t v6 = a1[5];
  uint64_t v4 = (uint64_t)(a1 + 5);
  unint64_t v5 = v6;
  uint64_t v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = (void **)(v4 - 16);
    uint64_t v10 = *(void *)(v4 - 16);
    uint64_t v11 = ((uint64_t)v7 - v10) >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v5 - v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      char v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v4, v14);
    }
    else {
      char v15 = 0;
    }
    unint64_t v16 = &v15[16 * v11];
    uint64_t v17 = &v15[16 * v14];
    *(_OWORD *)unint64_t v16 = *a2;
    uint64_t v8 = v16 + 16;
    int v19 = (char *)a1[3];
    int v18 = (char *)a1[4];
    if (v18 != v19)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v18 - 1);
        v16 -= 16;
        v18 -= 16;
      }
      while (v18 != v19);
      int v18 = (char *)*v9;
    }
    a1[3] = v16;
    a1[4] = v8;
    a1[5] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    _OWORD *v7 = *a2;
    uint64_t v8 = v7 + 1;
  }
  a1[4] = v8;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs((void *)a2);
  if (*(unsigned char *)(a1 + 104))
  {
    if ((*(unsigned char *)(a2 + 48) & 4) != 0)
    {
      unint64_t v4 = *(void *)(a2 + 32) - *(void *)(a2 + 24) + *(void *)(a1 + 112);
      *(void *)(a1 + 112) = v4;
      if (v4 > *(void *)(a1 + 96))
      {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GC(a1, (char *)a2, 0, 0.666);
      }
    }
  }
}

void *fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(void *result)
{
  uint64_t v1 = result[3];
  uint64_t v2 = result[4] - v1;
  if (v2)
  {
    unint64_t v3 = v2 >> 4;
    if (v3 <= 1) {
      unint64_t v3 = 1;
    }
    unint64_t v4 = (_DWORD *)(v1 + 4);
    do
    {
      if (!*(v4 - 1)) {
        ++result[1];
      }
      if (!*v4) {
        ++result[2];
      }
      v4 += 4;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::NumOutputEpsilons(void *a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0&& !(*(uint64_t (**)(void *, uint64_t))(*a1 + 32))(a1, 0x40000000))
  {
    fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Expand((uint64_t)a1, a2);
  }
  if (fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2))
  {
    uint64_t v4 = a1[15];
    if (*(_DWORD *)(v4 + 76) == a2) {
      uint64_t v5 = v4 + 80;
    }
    else {
      uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
    }
    return *(void *)(*(void *)v5 + 16);
  }
  else
  {
    return fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::CountEpsilons((uint64_t)a1, a2, 1);
  }
}

unint64_t fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (FLAGS_fst_verify_properties)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    unint64_t v7 = fst::ComputeProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, a3, 0);
    if (!fst::CompatProperties(v6, v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      uint64_t v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      unint64_t v9 = (void *)fst::cerr(v8);
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return fst::ComputeProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, a3, 1);
  }
}

void sub_1B1AEC624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v8 = v7;
  if (!a4
    || (uint64_t v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    unint64_t v8 = v7 & 7;
    unint64_t v73 = v8;
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      unint64_t v70 = 0;
      uint64_t v71 = &v73;
      fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, (uint64_t)&v68);
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      char v61 = a3;
      uint64_t v11 = a2 & 0xC0000;
      uint64_t v12 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0) {
        uint64_t v12 = 0x10425A850000;
      }
      unint64_t v13 = v8 | v12;
      uint64_t v14 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0) {
        v13 |= 0x100000uLL;
      }
      unint64_t v73 = v13;
      memset(&v67, 0, sizeof(v67));
      memset(&v66, 0, sizeof(v66));
      unsigned int v65 = 0;
      uint64_t v15 = a1;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v63);
      int v16 = 0;
LABEL_12:
      if (v63)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v63 + 16))(v63))
        {
          if (v63)
          {
            uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v63 + 24))();
LABEL_18:
            std::vector<unsigned int>::size_type v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 40))(v15, v17);
            v67.__end_ = v67.__begin_;
            v66.__end_ = v66.__begin_;
            if (v11) {
              std::vector<int>::reserve(&v67, v18);
            }
            if (v14) {
              std::vector<int>::reserve(&v66, v18);
            }
            unint64_t v72 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v15 + 136))(v15, v17, &v68);
            char v19 = 1;
            while (1)
            {
              if (v68)
              {
                if ((*(unsigned int (**)(uint64_t))(*(void *)v68 + 24))(v68))
                {
                  if (v68)
                  {
                    (*(void (**)(void))(*(void *)v68 + 8))();
                  }
                  else
                  {
LABEL_92:
                    if (v71) {
                      --*(_DWORD *)v71;
                    }
                  }
                  uint64_t v15 = a1;
                  if (v11
                    && (std::__sort<std::__less<int,int> &,int *>(),
                        (std::vector<unsigned int>::pointer)((char *)v67.__end_ - (char *)v67.__begin_) >= (std::vector<unsigned int>::pointer)5))
                  {
                    unint64_t v46 = v67.__end_ - v67.__begin_;
                    if (v46 <= 2) {
                      unint64_t v46 = 2;
                    }
                    std::vector<unsigned int>::pointer v47 = v67.__begin_ + 1;
                    unsigned int v48 = *v67.__begin_;
                    unint64_t v49 = v46 - 1;
                    while (1)
                    {
                      unsigned int v51 = *v47++;
                      unsigned int v50 = v51;
                      if (v51 == v48) {
                        break;
                      }
                      unsigned int v48 = v50;
                      if (!--v49) {
                        goto LABEL_101;
                      }
                    }
                    unint64_t v73 = v73 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                    if (!v14)
                    {
LABEL_112:
                      if (v16 >= 1) {
                        unint64_t v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      }
                      float v58 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v17);
                      *(float *)&uint64_t v68 = v58;
                      int v75 = 2139095040;
                      if (v58 == INFINITY)
                      {
                        if ((*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(void *)a1 + 40))(a1, v17, INFINITY, v58) != 1)unint64_t v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000; {
                      }
                        }
                      else
                      {
                        *(float *)&uint64_t v68 = v58;
                        int v75 = 0;
                        if (v58 != 0.0) {
                          unint64_t v73 = v73 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                        }
                        ++v16;
                      }
                      if (v63) {
                        (*(void (**)(uint64_t))(*(void *)v63 + 32))(v63);
                      }
                      else {
                        ++v65;
                      }
                      goto LABEL_12;
                    }
                  }
                  else
                  {
LABEL_101:
                    if (!v14) {
                      goto LABEL_112;
                    }
                  }
                  std::__sort<std::__less<int,int> &,int *>();
                  if ((std::vector<unsigned int>::pointer)((char *)v66.__end_ - (char *)v66.__begin_) >= (std::vector<unsigned int>::pointer)5)
                  {
                    unint64_t v52 = v66.__end_ - v66.__begin_;
                    if (v52 <= 2) {
                      unint64_t v52 = 2;
                    }
                    std::vector<unsigned int>::pointer v53 = v66.__begin_ + 1;
                    unsigned int v54 = *v66.__begin_;
                    unint64_t v55 = v52 - 1;
                    while (1)
                    {
                      unsigned int v57 = *v53++;
                      unsigned int v56 = v57;
                      if (v57 == v54) {
                        break;
                      }
                      unsigned int v54 = v56;
                      if (!--v55) {
                        goto LABEL_112;
                      }
                    }
                    unint64_t v73 = v73 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                  }
                  goto LABEL_112;
                }
                if (v68)
                {
                  uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v68 + 32))();
                  goto LABEL_29;
                }
              }
              else if (v72 >= v70)
              {
                goto LABEL_92;
              }
              uint64_t v20 = v69 + 16 * v72;
LABEL_29:
              int v21 = *(_DWORD *)v20;
              int v22 = *(_DWORD *)v20;
              if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
              {
                unint64_t v73 = v73 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
                int v22 = *(_DWORD *)(v20 + 4);
              }
              if (v21 | v22)
              {
                if (v21)
                {
                  if (!v22) {
                    goto LABEL_39;
                  }
                  goto LABEL_35;
                }
                unint64_t v23 = v73;
              }
              else
              {
                unint64_t v23 = v73 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
              }
              unint64_t v73 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
              if (!v22)
              {
LABEL_39:
                unint64_t v73 = v73 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
                if (v19) {
                  goto LABEL_44;
                }
                goto LABEL_40;
              }
LABEL_35:
              if (v19) {
                goto LABEL_44;
              }
LABEL_40:
              if (v21 < (int)v8) {
                unint64_t v73 = v73 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
              }
              if (v22 < (int)a2) {
                unint64_t v73 = v73 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
              }
LABEL_44:
              int v75 = 0;
              float v24 = *(float *)(v20 + 8);
              int v75 = LODWORD(v24);
              int v74 = 0;
              if (v24 != 0.0)
              {
                int v75 = LODWORD(v24);
                int v74 = 2139095040;
                if (v24 != INFINITY) {
                  unint64_t v73 = v73 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                }
              }
              int v25 = *(_DWORD *)(v20 + 12);
              if (v25 <= (int)v17) {
                unint64_t v73 = v73 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
              }
              if (v25 != v17 + 1) {
                unint64_t v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              LODWORD(v8) = *(_DWORD *)v20;
              LODWORD(a2) = *(_DWORD *)(v20 + 4);
              if (v11)
              {
                std::vector<unsigned int>::pointer end = v67.__end_;
                if (v67.__end_ >= v67.__end_cap_.__value_)
                {
                  std::vector<unsigned int>::pointer begin = v67.__begin_;
                  int64_t v29 = v67.__end_ - v67.__begin_;
                  unint64_t v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 62) {
                    goto LABEL_135;
                  }
                  int64_t v31 = (char *)v67.__end_cap_.__value_ - (char *)v67.__begin_;
                  if (((char *)v67.__end_cap_.__value_ - (char *)v67.__begin_) >> 1 > v30) {
                    unint64_t v30 = v31 >> 1;
                  }
                  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v32 = v30;
                  }
                  if (v32)
                  {
                    float v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v67.__end_cap_, v32);
                    std::vector<unsigned int>::pointer begin = v67.__begin_;
                    std::vector<unsigned int>::pointer end = v67.__end_;
                  }
                  else
                  {
                    float v33 = 0;
                  }
                  unint64_t v34 = (unsigned int *)&v33[4 * v29];
                  *unint64_t v34 = *(_DWORD *)v20;
                  uint64_t v27 = v34 + 1;
                  while (end != begin)
                  {
                    unsigned int v35 = *--end;
                    *--unint64_t v34 = v35;
                  }
                  v67.__begin_ = v34;
                  v67.__end_ = v27;
                  v67.__end_cap_.__value_ = (unsigned int *)&v33[4 * v32];
                  if (begin) {
                    operator delete(begin);
                  }
                }
                else
                {
                  *v67.__end_ = v8;
                  uint64_t v27 = end + 1;
                }
                v67.__end_ = v27;
              }
              if (v14)
              {
                std::vector<unsigned int>::pointer v36 = v66.__end_;
                if (v66.__end_ >= v66.__end_cap_.__value_)
                {
                  std::vector<unsigned int>::pointer v38 = v66.__begin_;
                  int64_t v39 = v66.__end_ - v66.__begin_;
                  unint64_t v40 = v39 + 1;
                  if ((unint64_t)(v39 + 1) >> 62) {
LABEL_135:
                  }
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  int64_t v41 = (char *)v66.__end_cap_.__value_ - (char *)v66.__begin_;
                  if (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 1 > v40) {
                    unint64_t v40 = v41 >> 1;
                  }
                  if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v42 = v40;
                  }
                  if (v42)
                  {
                    int v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v66.__end_cap_, v42);
                    std::vector<unsigned int>::pointer v38 = v66.__begin_;
                    std::vector<unsigned int>::pointer v36 = v66.__end_;
                  }
                  else
                  {
                    int v43 = 0;
                  }
                  uint64_t v44 = (unsigned int *)&v43[4 * v39];
                  *uint64_t v44 = *(_DWORD *)(v20 + 4);
                  uint64_t v37 = v44 + 1;
                  while (v36 != v38)
                  {
                    unsigned int v45 = *--v36;
                    *--uint64_t v44 = v45;
                  }
                  v66.__begin_ = v44;
                  v66.__end_ = v37;
                  v66.__end_cap_.__value_ = (unsigned int *)&v43[4 * v42];
                  if (v38) {
                    operator delete(v38);
                  }
                }
                else
                {
                  *v66.__end_ = *(_DWORD *)(v20 + 4);
                  uint64_t v37 = v36 + 1;
                }
                v66.__end_ = v37;
              }
              if (v68)
              {
                (*(void (**)(uint64_t))(*(void *)v68 + 40))(v68);
                char v19 = 0;
              }
              else
              {
                char v19 = 0;
                ++v72;
              }
            }
          }
LABEL_17:
          uint64_t v17 = v65;
          goto LABEL_18;
        }
        if (v63) {
          (*(void (**)(void))(*(void *)v63 + 8))();
        }
      }
      else if ((int)v65 < v64)
      {
        goto LABEL_17;
      }
      int v59 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 24))(v15);
      a3 = v61;
      if (v59 != -1 && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
        unint64_t v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      }
      if (v66.__begin_)
      {
        v66.__end_ = v66.__begin_;
        operator delete(v66.__begin_);
      }
      if (v67.__begin_)
      {
        v67.__end_ = v67.__begin_;
        operator delete(v67.__begin_);
      }
      unint64_t v8 = v73;
    }
    uint64_t v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1B1AECFB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B1AED8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitVisit(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a1 + 52) = 0;
    **(void **)(a1 + ++*(void *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    operator new();
  }
  operator new();
}

uint64_t fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 160);
    return v2(a1);
  }
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void sub_1B1AEDC70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a10);
  }
  _Unwind_Resume(exception_object);
}

void fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FinishState(uint64_t a1, int a2, int a3)
{
  if ((*(float (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32)) == INFINITY)
  {
    unint64_t v6 = a2;
  }
  else
  {
    unint64_t v6 = a2;
    *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  uint64_t v7 = **(void **)(a1 + 64);
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * v6) != *(_DWORD *)(v7 + 4 * v6)) {
    goto LABEL_17;
  }
  char v8 = 0;
  uint64_t v9 = *(void **)(a1 + 80);
  uint64_t v10 = v9[1];
  uint64_t v11 = **(void **)(a1 + 16);
  uint64_t v12 = (int *)(((v10 - *v9) & 0xFFFFFFFFFFFFFFFCLL) + *v9 - 4);
  do
  {
    unint64_t v13 = *v12--;
    v8 |= *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
  }
  while (v13 != a2);
  uint64_t v14 = *(void **)a1;
  uint64_t v15 = **(void **)(a1 + 72);
  for (uint64_t i = (int *)(v10 - 4); ; --i)
  {
    unint64_t v17 = *i;
    if (v14) {
      *(_DWORD *)(*v14 + 4 * v17) = *(_DWORD *)(a1 + 48);
    }
    unint64_t v18 = v17 >> 6;
    uint64_t v19 = 1 << v17;
    if ((v8 & 1) == 0) {
      break;
    }
    *(void *)(v11 + 8 * v18) |= v19;
    *(void *)(v15 + 8 * v18) &= ~v19;
    if (v17 == a2)
    {
      v9[1] = i;
      goto LABEL_16;
    }
LABEL_14:
    ;
  }
  *(void *)(v15 + 8 * v18) &= ~v19;
  if (v17 != a2) {
    goto LABEL_14;
  }
  v9[1] = i;
  **(void **)(a1 + ++*(void *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_16:
  ++*(_DWORD *)(a1 + 48);
LABEL_17:
  if (a3 != -1)
  {
    uint64_t v20 = **(void **)(a1 + 16);
    if ((*(void *)(v20 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6)) {
      *(void *)(v20 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    int v21 = *(_DWORD *)(v7 + 4 * v6);
    if (v21 < *(_DWORD *)(v7 + 4 * a3)) {
      *(_DWORD *)(v7 + 4 * a3) = v21;
    }
  }
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::BackArc(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v3 = *(int *)(a3 + 12);
  int v4 = *(_DWORD *)(**(void **)(a1 + 56) + 4 * v3);
  uint64_t v5 = **(void **)(a1 + 64);
  if (v4 < *(_DWORD *)(v5 + 4 * a2)) {
    *(_DWORD *)(v5 + 4 * a2) = v4;
  }
  uint64_t v6 = **(void **)(a1 + 16);
  if ((*(void *)(v6 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3)) {
    *(void *)(v6 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  uint64_t v7 = *(unint64_t **)(a1 + 24);
  unint64_t v8 = *v7 & 0xFFFFFFF3FFFFFFFFLL | 0x400000000;
  unint64_t *v7 = v8;
  if (*(_DWORD *)(a3 + 12) == *(_DWORD *)(a1 + 40)) {
    unint64_t *v7 = v8 & 0xFFFFFFC7FFFFFFFFLL | 0x1000000000;
  }
  return 1;
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ForwardOrCrossArc(void **a1, int a2, uint64_t a3)
{
  unint64_t v3 = *(int *)(a3 + 12);
  uint64_t v4 = *a1[7];
  int v5 = *(_DWORD *)(v4 + 4 * v3);
  if (v5 >= *(_DWORD *)(v4 + 4 * a2))
  {
    unint64_t v6 = v3 >> 6;
    uint64_t v7 = 1 << v3;
  }
  else
  {
    unint64_t v6 = v3 >> 6;
    uint64_t v7 = 1 << v3;
    if ((*(void *)(*a1[9] + 8 * v6) & v7) != 0)
    {
      uint64_t v8 = *a1[8];
      if (v5 < *(_DWORD *)(v8 + 4 * a2)) {
        *(_DWORD *)(v8 + 4 * a2) = v5;
      }
    }
  }
  uint64_t v9 = *a1[2];
  if ((*(void *)(v9 + 8 * v6) & v7) != 0) {
    *(void *)(v9 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  return 1;
}

void fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36E28;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36E28;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36E28;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B1AEE06C(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Size()
{
  return 48;
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37DE0;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B1AEE184(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37DE0;
  uint64_t v2 = a1 + 3;
  for (uint64_t i = (void *)a1[4]; i != v2; uint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      unsigned int v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      std::vector<unsigned int>::pointer v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      unsigned int v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unsigned int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unsigned int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unsigned int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      int v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unsigned int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  std::vector<unsigned int>::pointer v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  int64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1AEE5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetFromFst<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(void *)a2 + 136))(a2, a3, &v24);
  if (v24 || (a4 & 1) != 0)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
    uint64_t v12 = a5;
    if (!a4) {
      uint64_t v12 = 0;
    }
    unint64_t v13 = v11 + v12;
    if (*(void *)(a1 + 8) < (unint64_t)(v11 + v12))
    {
      if (*(void *)a1) {
        free(*(void **)a1);
      }
      uint64_t v23 = 0x4000;
      if (v13 > 0x4000) {
        uint64_t v23 = v13;
      }
      *(void *)(a1 + 8) = v23;
      uint64_t v15 = malloc_type_malloc(16 * v23, 0x1000040451B5BE8uLL);
      *(void *)a1 = v15;
      *(void *)(a1 + 16) = v15;
      BOOL v14 = v15;
    }
    else
    {
      BOOL v14 = *(_OWORD **)(a1 + 16);
      uint64_t v15 = *(_OWORD **)a1;
    }
    *(void *)(a1 + ++*(void *)(result + 24) = &v14[v13];
    uint64_t v16 = v24;
    uint64_t v17 = v25;
    unint64_t v19 = v26;
    uint64_t v18 = v27;
    if (v27) {
      ++*v27;
    }
    unint64_t v20 = 0;
    if (!v16) {
      goto LABEL_15;
    }
    while (1)
    {
      int v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
      uint64_t v22 = *v16;
      if (v21) {
        break;
      }
      *uint64_t v15 = *(_OWORD *)(*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
      (*(void (**)(uint64_t *))(*v16 + 40))(v16);
      while (1)
      {
        ++v15;
        if (v16) {
          break;
        }
LABEL_15:
        if (v20 >= v19)
        {
          if (v18) {
            --*v18;
          }
          return;
        }
        *uint64_t v15 = *(_OWORD *)(v17 + 16 * v20++);
      }
    }
    (*(void (**)(uint64_t *))(v22 + 8))(v16);
  }
  else
  {
    uint64_t v10 = v25 + 16 * v26;
    *(void *)(a1 + 16) = v25;
    *(void *)(a1 + ++*(void *)(result + 24) = v10;
    if (*(void *)a1)
    {
      free(*(void **)a1);
      *(void *)a1 = 0;
    }
    *(void *)(a1 + 8) = 0;
  }
}

void sub_1B1AEE864(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::vector<quasar::VoiceCommandInterpretation>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 112;
        std::allocator<quasar::VoiceCommandInterpretation>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::VoiceCommandInterpretation>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  BOOL v3 = (void **)(a2 + 88);
  std::vector<quasar::VoiceCommandArgument>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<int>::destroy(a2 + 64, *(void **)(a2 + 72));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2 + 24);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void std::vector<quasar::VoiceCommandArgument>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<quasar::VoiceCommandArgument>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    BOOL v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<quasar::VoiceCommandArgument>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 24;
    do
    {
      std::__tree<int>::destroy(v5, *(void **)(v5 + 8));
      std::__tree<int>::destroy(v5 - 24, *(void **)(v5 - 16));
      uint64_t v6 = v5 - 32;
      v5 -= 56;
    }
    while (v6 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

std::string *std::vector<quasar::VoiceCommandInterpretation>::__init_with_size[abi:ne180100]<quasar::VoiceCommandInterpretation*,quasar::VoiceCommandInterpretation*>(std::string *result, quasar::VoiceCommandInterpretation *a2, quasar::VoiceCommandInterpretation *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::VoiceCommandInterpretation>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::VoiceCommandInterpretation>,quasar::VoiceCommandInterpretation*,quasar::VoiceCommandInterpretation*,quasar::VoiceCommandInterpretation*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B1AEEAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::VoiceCommandInterpretation>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::VoiceCommandInterpretation>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandInterpretation>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandInterpretation>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(112 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::VoiceCommandInterpretation>,quasar::VoiceCommandInterpretation*,quasar::VoiceCommandInterpretation*,quasar::VoiceCommandInterpretation*>(uint64_t a1, quasar::VoiceCommandInterpretation *a2, quasar::VoiceCommandInterpretation *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v10 = this;
  uint64_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  int32x2_t v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      quasar::VoiceCommandInterpretation::VoiceCommandInterpretation(v4, v6);
      uint64_t v6 = (const quasar::VoiceCommandInterpretation *)((char *)v6 + 112);
      uint64_t v4 = (std::string *)((char *)v11 + 112);
      uint64_t v11 = (std::string *)((char *)v11 + 112);
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandInterpretation>,quasar::VoiceCommandInterpretation*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1AEEC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *quasar::VoiceCommandInterpretation::VoiceCommandInterpretation(std::string *this, const quasar::VoiceCommandInterpretation *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[1], (uint64_t)a2 + 24);
  std::set<int>::set[abi:ne180100]((uint64_t *)&this[2].__r_.__value_.__r.__words[2], (uint64_t)a2 + 64);
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[4].__r_.__value_.__l.__size_ = 0;
  std::vector<quasar::VoiceCommandArgument>::__init_with_size[abi:ne180100]<quasar::VoiceCommandArgument*,quasar::VoiceCommandArgument*>(&this[3].__r_.__value_.__r.__words[2], *((_DWORD **)a2 + 11), *((_DWORD **)a2 + 12), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 12) - *((void *)a2 + 11)) >> 3));
  return this;
}

void sub_1B1AEECC0(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v3, *(void **)(v1 + 72));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *std::set<int>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1B1AEEDA0(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>(v5, v6, v4 + 7, v4 + 7);
      uint64_t v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint64_t v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<quasar::PronType,int>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,int>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,int>>>::__find_equal<quasar::PronType>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

void *std::vector<quasar::VoiceCommandArgument>::__init_with_size[abi:ne180100]<quasar::VoiceCommandArgument*,quasar::VoiceCommandArgument*>(void *result, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::VoiceCommandArgument>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>,quasar::VoiceCommandArgument*,quasar::VoiceCommandArgument*,quasar::VoiceCommandArgument*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1AEEF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::VoiceCommandArgument>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::VoiceCommandArgument>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>,quasar::VoiceCommandArgument*,quasar::VoiceCommandArgument*,quasar::VoiceCommandArgument*>(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<quasar::VoiceCommandArgument>::construct[abi:ne180100]<quasar::VoiceCommandArgument,quasar::VoiceCommandArgument&>(a1, v4, v6);
      v6 += 14;
      uint64_t v4 = v12 + 56;
      v12 += 56;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandArgument>,quasar::VoiceCommandArgument*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B1AEF090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::allocator<quasar::VoiceCommandArgument>::construct[abi:ne180100]<quasar::VoiceCommandArgument,quasar::VoiceCommandArgument&>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = (uint64_t)(a3 + 8);
  *(_DWORD *)a2 = *a3;
  std::set<int>::set[abi:ne180100]((uint64_t *)(a2 + 8), (uint64_t)(a3 + 2));
  return std::set<int>::set[abi:ne180100]((uint64_t *)(a2 + 32), v4);
}

void sub_1B1AEF0F8(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v2, *(void **)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandArgument>,quasar::VoiceCommandArgument*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::__allocator_destroy[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>,std::reverse_iterator<quasar::VoiceCommandArgument*>,std::reverse_iterator<quasar::VoiceCommandArgument*>>(*(void *)a1, **(void **)(a1 + 16), **(void **)(a1 + 16), **(void **)(a1 + 8), **(void **)(a1 + 8));
  }
  return a1;
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>,std::reverse_iterator<quasar::VoiceCommandArgument*>,std::reverse_iterator<quasar::VoiceCommandArgument*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    uint64_t v6 = a3 - 24;
    do
    {
      std::__tree<int>::destroy(v6, *(void **)(v6 + 8));
      std::__tree<int>::destroy(v6 - 24, *(void **)(v6 - 16));
      uint64_t v7 = v6 - 32;
      v6 -= 56;
    }
    while (v7 != a5);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandInterpretation>,quasar::VoiceCommandInterpretation*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandInterpretation>,quasar::VoiceCommandInterpretation*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandInterpretation>,quasar::VoiceCommandInterpretation*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 112;
      std::allocator<quasar::VoiceCommandInterpretation>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

char *std::vector<std::pair<int,int>>::__init_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B1AEF298(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

id EARHelpers::getAbsolutePath(uint64_t *a1)
{
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v1 = a1;
  }
  else {
    uint64_t v1 = (uint64_t *)*a1;
  }
  uint64_t v2 = [NSString stringWithUTF8String:v1];
  uint64_t v3 = [v2 stringByStandardizingPath];

  uint64_t v4 = (void *)MEMORY[0x1E4F1CB10];
  id v5 = v3;
  uint64_t v6 = objc_msgSend(v4, "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", objc_msgSend(v5, "fileSystemRepresentation"), 1, 0);

  return v6;
}

void sub_1B1AEF35C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id EARHelpers::getValueFromLeaf(EARHelpers *this, const quasar::PTree *a2)
{
  int DataType = quasar::PTree::getDataType(this);
  switch(DataType)
  {
    case 3:
      uint64_t v4 = [NSNumber numberWithBool:quasar::PTree::getBool(this)];
      break;
    case 2:
      uint64_t v4 = [NSNumber numberWithInt:quasar::PTree::getInt<int>((uint64_t)this)];
      break;
    case 1:
      uint64_t v4 = [NSNumber numberWithDouble:quasar::PTree::getDouble(this)];
      break;
    default:
      id v5 = NSString;
      uint64_t String = quasar::PTree::getString(this);
      if (*(char *)(String + 23) >= 0) {
        uint64_t v7 = String;
      }
      else {
        uint64_t v7 = *(void *)String;
      }
      uint64_t v4 = [v5 stringWithUTF8String:v7];
      break;
  }
  return v4;
}

id EARHelpers::dictFromPTreeHelper(EARHelpers *this, const quasar::PTree *a2)
{
  if (quasar::PTree::isLeaf(this))
  {
    id v5 = EARHelpers::getValueFromLeaf(this, v4);
  }
  else
  {
    if (quasar::PTree::isList(this)) {
      EARHelpers::arrayFromPTree(this, a2, v6);
    }
    else {
    id v5 = EARHelpers::dictFromPTree(this, a2);
    }
  }
  return v5;
}

id EARHelpers::arrayFromPTree(EARHelpers *this, const quasar::PTree *a2)
{
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v5 = quasar::PTree::begin(this);
  uint64_t v6 = quasar::PTree::end(this);
  while (v5 != v6)
  {
    uint64_t v7 = EARHelpers::dictFromPTreeHelper((EARHelpers *)(v5 + 24), a2);
    [v4 addObject:v7];

    v5 += 88;
  }
  return v4;
}

void sub_1B1AEF570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id EARHelpers::dictFromPTree(EARHelpers *this, const quasar::PTree *a2)
{
  int v2 = (int)a2;
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v5 = quasar::PTree::begin(this);
  for (uint64_t i = quasar::PTree::end(this); v5 != i; v5 += 88)
  {
    uint64_t v7 = v5;
    if (*(char *)(v5 + 23) < 0) {
      uint64_t v7 = *(void *)v5;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v7];
    char v10 = (EARHelpers *)(v5 + 24);
    if (v2)
    {
      uint64_t v11 = EARHelpers::dictFromPTreeHelper(v10, (const quasar::PTree *)1, v8);
      [v4 setValue:v11 forKey:v9];
    }
    else
    {
      uint64_t v11 = EARHelpers::dictFromPTreeHelper(v10, 0, v8);
      [v4 setValue:v11 forKeyPath:v9];
    }
  }
  return v4;
}

void sub_1B1AEF698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id EARHelpers::createDirectoryInLibrary(EARHelpers *this, NSString *a2)
{
  int v2 = this;
  if ([(EARHelpers *)v2 length])
  {
    uint64_t v3 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 1uLL, 1);
    id v4 = [v3 firstObject];

    if (v4)
    {
      uint64_t v5 = [v4 stringByAppendingPathComponent:v2];
      uint64_t v6 = [MEMORY[0x1E4F28CB8] defaultManager];
      char v7 = [v6 createDirectoryAtPath:v5 withIntermediateDirectories:1 attributes:0 error:0];

      if (v7) {
        id v8 = v5;
      }
      else {
        id v8 = 0;
      }
    }
    else
    {
      id v8 = 0;
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1B1AEF7BC(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

__CFString *EARHelpers::serialize(uint64_t *a1)
{
  if (*a1)
  {
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    [v2 addObject:@"["];
    uint64_t v4 = *a1;
    if (*(int *)(*a1 + 20) >= 1)
    {
      int v5 = 0;
      do
      {
        if (*(int *)(v4 + 16) >= 1)
        {
          uint64_t v6 = 0;
          do
          {
            LODWORD(v3) = *(_DWORD *)(*(void *)(v4 + 8) + 4 * v5 * *(_DWORD *)(v4 + 24) + 4 * v6);
            char v7 = [NSNumber numberWithFloat:v3];
            [v2 addObject:v7];

            ++v6;
            uint64_t v4 = *a1;
          }
          while (v6 < *(int *)(*a1 + 16));
        }
        ++v5;
      }
      while (v5 < *(_DWORD *)(v4 + 20));
    }
    [v2 addObject:@"]"];
    id v8 = [v2 componentsJoinedByString:@" "];
  }
  else
  {
    id v8 = &stru_1F0A64AB0;
  }

  return v8;
}

void sub_1B1AEF92C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id EARHelpers::EARSpeechRecognitionTokensFromQuasarTokens(const quasar::Token **a1)
{
  id v2 = [MEMORY[0x1E4F1CA48] array];
  double v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      quasar::Token::Token(&v19, v3);
      quasar::Token::Token(&v8, (const quasar::Token *)&v19);
      id v5 = [[_EARSpeechRecognitionToken alloc] _initWithQuasarToken:&v8];
      [v2 addObject:v5];

      if (v18 < 0) {
        operator delete(__p);
      }
      if (v16 < 0) {
        operator delete(v15);
      }
      long long v30 = (void **)&v14;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v30);
      if (v13 < 0) {
        operator delete(v12);
      }
      long long v30 = (void **)&v11;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v30);
      if (v10 < 0) {
        operator delete(v9);
      }
      if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v8.__r_.__value_.__l.__data_);
      }
      if (v29 < 0) {
        operator delete(v28);
      }
      if (v27 < 0) {
        operator delete(v26);
      }
      long long v30 = (void **)&v25;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v30);
      if (v24 < 0) {
        operator delete(v23);
      }
      long long v30 = (void **)&v22;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v30);
      if (v21 < 0) {
        operator delete(v20);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      double v3 = (const quasar::Token *)((char *)v3 + 224);
    }
    while (v3 != v4);
  }
  uint64_t v6 = (void *)[v2 copy];

  return v6;
}

void sub_1B1AEFB0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void EARHelpers::QuasarResultFromEARSpeechRecognitionTokens(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  obuint64_t j = v3;
  uint64_t v4 = [obj countByEnumeratingWithState:&v30 objects:v35 count:16];
  if (v4)
  {
    uint64_t v19 = *(void *)v31;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v31 != v19) {
          objc_enumerationMutation(obj);
        }
        id v6 = *(id *)(*((void *)&v30 + 1) + 8 * i);
        char v7 = v6;
        if (v6)
        {
          [v6 quasarToken];
        }
        else
        {
          memset(v29, 0, sizeof(v29));
          long long v27 = 0u;
          *(_OWORD *)std::string __p = 0u;
          *(_OWORD *)unint64_t v26 = 0u;
          *(_OWORD *)char v24 = 0u;
          memset(v25, 0, sizeof(v25));
          memset(v23, 0, sizeof(v23));
          *(_OWORD *)uint64_t v22 = 0u;
          *(_OWORD *)unint64_t v20 = 0u;
          memset(v21, 0, sizeof(v21));
        }

        unint64_t v8 = a2[1];
        if (v8 >= a2[2])
        {
          uint64_t v16 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token>(a2, (long long *)v20);
          int v17 = SBYTE7(v29[0]);
          a2[1] = v16;
          if (v17 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v9 = *(_OWORD *)v20;
          *(void *)(v8 + 16) = *(void *)&v21[0];
          *(_OWORD *)unint64_t v8 = v9;
          v20[1] = 0;
          *(void *)&v21[0] = 0;
          v20[0] = 0;
          uint64_t v10 = *(void *)((char *)&v21[1] + 6);
          *(_OWORD *)(v8 + ++*(void *)(result + 24) = *(_OWORD *)((char *)v21 + 8);
          *(void *)(v8 + 38) = v10;
          uint64_t v11 = *(void *)&v23[0];
          *(_OWORD *)(v8 + 48) = *(_OWORD *)v22;
          *(void *)(v8 + 64) = v11;
          *(void *)(v8 + 72) = 0;
          v22[1] = 0;
          *(void *)&v23[0] = 0;
          v22[0] = 0;
          *(void *)(v8 + 80) = 0;
          *(void *)(v8 + 88) = 0;
          *(_OWORD *)(v8 + 72) = *(_OWORD *)((char *)v23 + 8);
          *(void *)(v8 + 88) = *((void *)&v23[1] + 1);
          memset((char *)v23 + 8, 0, 24);
          long long v12 = *(_OWORD *)v24;
          *(void *)(v8 + 112) = *(void *)&v25[0];
          *(void *)(v8 + 120) = 0;
          *(_OWORD *)(v8 + 96) = v12;
          v24[1] = 0;
          *(void *)&v25[0] = 0;
          v24[0] = 0;
          *(void *)(v8 + 128) = 0;
          *(void *)(v8 + 136) = 0;
          *(_OWORD *)(v8 + 120) = *(_OWORD *)((char *)v25 + 8);
          *(void *)(v8 + 136) = *((void *)&v25[1] + 1);
          memset((char *)v25 + 8, 0, 24);
          long long v13 = *(_OWORD *)v26;
          *(void *)(v8 + 160) = v27;
          *(_OWORD *)(v8 + 144) = v13;
          v26[1] = 0;
          *(void *)&long long v27 = 0;
          v26[0] = 0;
          LODWORD(v11) = DWORD2(v27);
          *(_WORD *)(v8 + 172) = WORD6(v27);
          *(_DWORD *)(v8 + 168) = v11;
          long long v14 = *(_OWORD *)__p;
          *(void *)(v8 + 192) = *(void *)&v29[0];
          *(_OWORD *)(v8 + 1--*(_DWORD *)(a9 + 76) = v14;
          __p[1] = 0;
          *(void *)&v29[0] = 0;
          __p[0] = 0;
          long long v15 = *(_OWORD *)((char *)v29 + 8);
          *(_DWORD *)(v8 + 216) = DWORD2(v29[1]);
          *(_OWORD *)(v8 + 200) = v15;
          a2[1] = v8 + 224;
        }
        if (SBYTE7(v27) < 0) {
          operator delete(v26[0]);
        }
        unint64_t v34 = (void **)v25 + 1;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v34);
        if (SBYTE7(v25[0]) < 0) {
          operator delete(v24[0]);
        }
        unint64_t v34 = (void **)v23 + 1;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v34);
        if (SBYTE7(v23[0]) < 0) {
          operator delete(v22[0]);
        }
        if (SBYTE7(v21[0]) < 0) {
          operator delete(v20[0]);
        }
      }
      uint64_t v4 = [obj countByEnumeratingWithState:&v30 objects:v35 count:16];
    }
    while (v4);
  }
}

void sub_1B1AEFF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);

  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void EARHelpers::QuasarPreItnNbestFromEARNBest(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v11 objects:v16 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v4);
        }
        id v8 = *(id *)(*((void *)&v11 + 1) + 8 * i);
        long long v9 = v8;
        if (v8) {
          [v8 quasarPreItnTokens];
        }
        else {
          memset(v10, 0, sizeof(v10));
        }

        std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100](a2, (uint64_t)v10);
        long long v15 = (void **)v10;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v15);
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v11 objects:v16 count:16];
    }
    while (v5);
  }
}

void sub_1B1AF00D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

id EARHelpers::NSArrayOfStringFromVectorOfString(long long **a1)
{
  id v2 = [MEMORY[0x1E4F1CA48] array];
  id v3 = *a1;
  id v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)v3, *((void *)v3 + 1));
      }
      else
      {
        long long v5 = *v3;
        v11.__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
        *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
      }
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v11;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      char v7 = objc_msgSend(NSString, "stringWithUTF8String:", p_p, *(_OWORD *)&__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__r.__words[2]);
      [v2 addObject:v7];

      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v11.__r_.__value_.__l.__data_);
      }
      id v3 = (long long *)((char *)v3 + 24);
    }
    while (v3 != v4);
  }
  id v8 = (void *)[v2 copy];

  return v8;
}

void sub_1B1AF0264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _Unwind_Resume(a1);
}

void EARHelpers::StdSetOfStringsFromNSSet(EARHelpers *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = this;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v5 = v4;
  uint64_t v6 = [(EARHelpers *)v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v5);
        }
        id v9 = *(id *)(*((void *)&v13 + 1) + 8 * i);
        uint64_t v10 = v9;
        if (v9)
        {
          objc_msgSend(v9, "ear_toString");
        }
        else
        {
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v12 = 0;
        }

        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)a2, (const void **)__p, (uint64_t)__p);
        if (SHIBYTE(v12) < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v6 = [(EARHelpers *)v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v6);
  }
}

void sub_1B1AF0418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__tree<std::string>::destroy(v16, *(char **)(v16 + 8));
  _Unwind_Resume(a1);
}

id EARHelpers::EARCommandTaggingResultFromQuasarVector(uint64_t *a1)
{
  id v2 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      std::map<std::string,std::vector<quasar::Token>>::map[abi:ne180100]((uint64_t *)v13, (const void ***)v3);
      memset(&v14, 0, sizeof(v14));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *(long long **)(v3 + 24), *(long long **)(v3 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v3 + 32) - *(void *)(v3 + 24)) >> 3));
      if (*(char *)(v3 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(v3 + 48), *(void *)(v3 + 56));
      }
      else
      {
        long long v5 = *(_OWORD *)(v3 + 48);
        v15.__r_.__value_.__r.__words[2] = *(void *)(v3 + 64);
        *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v5;
      }
      std::map<std::string,std::vector<quasar::Token>>::map[abi:ne180100]((uint64_t *)v10, (const void ***)v13);
      memset(&v11, 0, sizeof(v11));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, (long long *)v14.__r_.__value_.__l.__data_, (long long *)v14.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14.__r_.__value_.__l.__size_ - v14.__r_.__value_.__r.__words[0]) >> 3));
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v12, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
      }
      else {
        std::string v12 = v15;
      }
      id v6 = [[_EARCommandTagging alloc] _initWithQuasarCommandTagging:v10];
      [v2 addObject:v6];

      quasar::CommandTagging::~CommandTagging(v10);
      quasar::CommandTagging::~CommandTagging(v13);
      v3 += 72;
    }
    while (v3 != v4);
  }
  uint64_t v7 = (void *)[v2 copy];

  id v8 = [[_EARCommandTaggingResult alloc] _initWithCommandTaggings:v7];
  return v8;
}

void sub_1B1AF062C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id EARHelpers::EARCommandTaggingResultArrayFromQuasarResults(uint64_t **a1)
{
  id v2 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      std::vector<quasar::CommandTagging>::__init_with_size[abi:ne180100]<quasar::CommandTagging*,quasar::CommandTagging*>(&v11, *v3, v3[1], 0x8E38E38E38E38E39 * ((v3[1] - *v3) >> 3));
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      std::vector<quasar::CommandTagging>::__init_with_size[abi:ne180100]<quasar::CommandTagging*,quasar::CommandTagging*>(&v8, v11, v12, 0x8E38E38E38E38E39 * ((v12 - v11) >> 3));
      memset(v14, 0, sizeof(v14));
      std::vector<quasar::CommandTagging>::__init_with_size[abi:ne180100]<quasar::CommandTagging*,quasar::CommandTagging*>(v14, v8, v9, 0x8E38E38E38E38E39 * ((v9 - v8) >> 3));
      long long v5 = EARHelpers::EARCommandTaggingResultFromQuasarVector((uint64_t *)v14);
      std::string v15 = v14;
      std::vector<quasar::CommandTagging>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
      [v2 addObject:v5];

      v14[0] = (void **)&v8;
      std::vector<quasar::CommandTagging>::__destroy_vector::operator()[abi:ne180100](v14);
      v14[0] = (void **)&v11;
      std::vector<quasar::CommandTagging>::__destroy_vector::operator()[abi:ne180100](v14);
      v3 += 3;
    }
    while (v3 != v4);
  }
  id v6 = (void *)[v2 copy];

  return v6;
}

void sub_1B1AF0818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void EARHelpers::QuasarPersonalizedInputFromEARPersonalizedInput(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v20 objects:v25 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v21 != v6) {
          objc_enumerationMutation(v4);
        }
        uint64_t v8 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        applesauce::CF::convert_to<std::map<std::string,int>,0>((const void *)objc_msgSend(v4, "objectForKey:", v8, __p, v15, v16), (uint64_t)&v17);
        if (v8)
        {
          objc_msgSend(v8, "ear_toString");
        }
        else
        {
          std::string __p = 0;
          uint64_t v15 = 0;
          uint64_t v16 = 0;
        }
        p_p = &__p;
        uint64_t v9 = std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
        uint64_t v10 = v9 + 4;
        uint64_t v11 = (void *)v9 + 7;
        std::__tree<std::string>::destroy((uint64_t)v9 + 56, *((char **)v9 + 8));
        uint64_t v12 = v18;
        *(v10 - 1) = v17;
        *uint64_t v10 = v12;
        uint64_t v13 = v19;
        v10[1] = v19;
        if (v13)
        {
          *(void *)(v12 + 16) = v10;
          uint64_t v17 = &v18;
          uint64_t v18 = 0;
          uint64_t v19 = 0;
          uint64_t v12 = 0;
        }
        else
        {
          *uint64_t v11 = v10;
        }
        if (SHIBYTE(v16) < 0)
        {
          operator delete(__p);
          uint64_t v12 = v18;
        }
        std::__tree<std::string>::destroy((uint64_t)&v17, (char *)v12);
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v20 objects:v25 count:16];
    }
    while (v5);
  }
}

void sub_1B1AF0A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16)
{
  std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy(v16, *(void **)(v16 + 8));
  _Unwind_Resume(a1);
}

void applesauce::CF::convert_to<std::map<std::string,int>,0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!a1 || (CFTypeID TypeID = CFDictionaryGetTypeID(), TypeID != CFGetTypeID(a1)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::CFDictionary_get_value_to<std::map<std::string,int>>((const __CFDictionary *)a1, a2);
}

void sub_1B1AF0B48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

id EARHelpers::EARVoiceCommandInterpretationFromQuasarInterpretations(uint64_t **a1, uint64_t **a2)
{
  uint64_t v4 = [objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:0x6DB6DB6DB6DB6DB7 * (((char *)a1[1] - (char *)*a1) >> 4)];
  uint64_t v5 = *a1;
  long long v20 = a1[1];
  id v21 = (id)v4;
  if (*a1 != v20)
  {
    do
    {
      long long v23 = EARHelpers::ContainerToNSSet<std::unordered_set<std::string>>((uint64_t)(v5 + 3));
      std::set<int>::set[abi:ne180100](v35, (uint64_t)(v5 + 8));
      std::string __p = 0;
      long long v33 = 0;
      uint64_t v34 = 0;
      std::vector<std::pair<int,int>>::__init_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>((char *)&__p, *a2, a2[1], a2[1] - *a2);
      long long v22 = EARHelpers::StdSetOfIntToNSIndexSet(v35, &__p);
      if (__p)
      {
        long long v33 = __p;
        operator delete(__p);
      }
      std::__tree<int>::destroy((uint64_t)v35, (void *)v35[1]);
      uint64_t v6 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:0x6DB6DB6DB6DB6DB7 * ((v5[12] - v5[11]) >> 3)];
      uint64_t v7 = (unsigned int *)v5[11];
      uint64_t v8 = (unsigned int *)v5[12];
      while (v7 != v8)
      {
        std::set<int>::set[abi:ne180100](v31, (uint64_t)(v7 + 2));
        uint64_t v28 = 0;
        char v29 = 0;
        uint64_t v30 = 0;
        std::vector<std::pair<int,int>>::__init_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>((char *)&v28, *a2, a2[1], a2[1] - *a2);
        uint64_t v9 = EARHelpers::StdSetOfIntToNSIndexSet(v31, &v28);
        if (v28)
        {
          char v29 = v28;
          operator delete(v28);
        }
        std::__tree<int>::destroy((uint64_t)v31, (void *)v31[1]);
        std::set<int>::set[abi:ne180100](v27, (uint64_t)(v7 + 8));
        char v24 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        std::vector<std::pair<int,int>>::__init_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>((char *)&v24, *a2, a2[1], a2[1] - *a2);
        uint64_t v10 = EARHelpers::StdSetOfIntToNSIndexSet(v27, &v24);
        if (v24)
        {
          uint64_t v25 = v24;
          operator delete(v24);
        }
        std::__tree<int>::destroy((uint64_t)v27, (void *)v27[1]);
        unsigned int v11 = *v7;
        uint64_t v12 = [EARVoiceCommandArgument alloc];
        if (v11 >= 4) {
          char v13 = 3;
        }
        else {
          char v13 = v11;
        }
        std::string v14 = [(EARVoiceCommandArgument *)v12 initWithPresence:v13 indexes:v9 adpositionIndexes:v10];
        [v6 addObject:v14];

        v7 += 14;
      }
      uint64_t v15 = [EARVoiceCommandInterpretation alloc];
      uint64_t v16 = v5;
      if (*((char *)v5 + 23) < 0) {
        uint64_t v16 = (uint64_t *)*v5;
      }
      uint64_t v17 = [NSString stringWithUTF8String:v16];
      uint64_t v18 = [(EARVoiceCommandInterpretation *)v15 initWithCommandIdentifier:v17 suiteIdentifiers:v23 verbIndexes:v22 arguments:v6];

      [v21 addObject:v18];
      v5 += 14;
    }
    while (v5 != v20);
  }
  return v21;
}

void sub_1B1AF0E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  _Unwind_Resume(a1);
}

id EARHelpers::ContainerToNSSet<std::unordered_set<std::string>>(uint64_t a1)
{
  id v2 = [MEMORY[0x1E4F1CA80] setWithCapacity:*(void *)(a1 + 24)];
  for (uint64_t i = *(uint64_t ***)(a1 + 16); i; uint64_t i = (uint64_t **)*i)
  {
    if (*((char *)i + 39) < 0)
    {
      uint64_t v4 = (uint64_t)i[2];
      uint64_t v5 = (uint64_t)i[3];
    }
    else
    {
      uint64_t v4 = (uint64_t)(i + 2);
      uint64_t v5 = *((unsigned __int8 *)i + 39);
    }
    uint64_t v6 = objc_msgSend(NSString, "ear_stringWithStringView:", v4, v5);
    [v2 addObject:v6];
  }
  uint64_t v7 = (void *)[v2 copy];

  return v7;
}

void sub_1B1AF0FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id EARHelpers::StdSetOfIntToNSIndexSet(void *a1, void *a2)
{
  id v4 = objc_alloc_init(MEMORY[0x1E4F28E60]);
  uint64_t v7 = (void *)*a1;
  uint64_t v5 = a1 + 1;
  uint64_t v6 = v7;
  if (v7 != v5)
  {
    do
    {
      unint64_t v8 = *((int *)v6 + 7);
      if (v8 >= (uint64_t)(a2[1] - *a2) >> 3) {
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v9 = (int *)(*a2 + 8 * v8);
      uint64_t v10 = v9[1];
      [v4 addIndex:*v9];
      [v4 addIndex:v10];
      unsigned int v11 = (void *)v6[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          unsigned int v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v6[2];
          BOOL v13 = *v12 == (void)v6;
          uint64_t v6 = v12;
        }
        while (!v13);
      }
      uint64_t v6 = v12;
    }
    while (v12 != v5);
  }
  std::string v14 = (void *)[v4 copy];

  return v14;
}

void sub_1B1AF10DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id EARHelpers::EARVoiceCommandInterpretationFromQuasarCorrectiveRerankingParserStackOutput(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0x1E4F1C000uLL;
  id v5 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if (*(unsigned char *)(a2 + 4))
  {
    uint64_t v6 = [EARVoiceCommandArgument alloc];
    if (!*(unsigned char *)(a2 + 4)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    uint64_t v7 = v6;
    unint64_t v8 = NSString;
    std::to_string(&v67, *(_DWORD *)a2);
    if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = &v67;
    }
    else {
      uint64_t v9 = (std::string *)v67.__r_.__value_.__r.__words[0];
    }
    uint64_t v10 = [v8 stringWithUTF8String:v9];
    unsigned int v11 = [(EARVoiceCommandArgument *)v7 initWithPresence:0 text:v10];

    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
    uint64_t v12 = [EARVoiceCommandInterpretation alloc];
    BOOL v13 = [MEMORY[0x1E4F1CAD0] set];
    std::string v14 = [MEMORY[0x1E4F28D60] indexSet];
    uint64_t v15 = [MEMORY[0x1E4F1C978] arrayWithObject:v11];
    uint64_t v16 = [(EARVoiceCommandInterpretation *)v12 initWithCommandIdentifier:@"disambiguation" suiteIdentifiers:v13 verbIndexes:v14 arguments:v15];

    [v5 addObject:v16];
    goto LABEL_9;
  }
  if (!*(unsigned char *)(a2 + 33)) {
    goto LABEL_9;
  }
  uint64_t v18 = *(quasar::corrective_reranking::Parse **)(a2 + 8);
  if (*(quasar::corrective_reranking::Parse **)(a2 + 16) == v18 || *(unsigned char *)(a2 + 32) == 0) {
    goto LABEL_9;
  }
  quasar::corrective_reranking::Parse::getIntent(v18, (uint64_t)&v67);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v67.__r_.__value_.__l.__size_ == 7)
    {
      BOOL v22 = *(_DWORD *)v67.__r_.__value_.__l.__data_ != 1952672100
         || *(_DWORD *)(v67.__r_.__value_.__r.__words[0] + 3) != 1702125940;
      operator delete(v67.__r_.__value_.__l.__data_);
      if (!v22) {
        goto LABEL_9;
      }
    }
    else
    {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
  }
  else if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) == 7 {
         && LODWORD(v67.__r_.__value_.__l.__data_) == 1952672100
  }
         && *(_DWORD *)((char *)v67.__r_.__value_.__r.__words + 3) == 1702125940)
  {
    goto LABEL_9;
  }
  long long v23 = *(const quasar::corrective_reranking::Parse **)(a2 + 8);
  char v24 = *(const quasar::corrective_reranking::Parse **)(a2 + 16);
  if (v23 != v24)
  {
    uint64_t v63 = &v72;
    while (1)
    {
      quasar::corrective_reranking::TextEdit::TextEdit((quasar::corrective_reranking::TextEdit *)&v67, v23);
      id v25 = objc_alloc_init(*(Class *)(v4 + 2632));
      quasar::corrective_reranking::intentToCommandIdentifier((uint64_t *)&v67, &v66);
      char v26 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (HIBYTE(v66.__r_.__value_.__r.__words[2]) == 11)
      {
        BOOL v35 = v66.__r_.__value_.__r.__words[0] == 0x6641747265736E69
           && *(std::string::size_type *)((char *)v66.__r_.__value_.__r.__words + 3) == 0x7265746641747265;
        goto LABEL_69;
      }
      if (HIBYTE(v66.__r_.__value_.__r.__words[2]) == 12)
      {
        long long v31 = &v66;
        goto LABEL_63;
      }
      if (HIBYTE(v66.__r_.__value_.__r.__words[2]) != 13) {
        goto LABEL_61;
      }
      if (v66.__r_.__value_.__r.__words[0] != 0x6542747265736E69
        || *(std::string::size_type *)((char *)v66.__r_.__value_.__r.__words + 5) != 0x6E65657774654274)
      {
        goto LABEL_61;
      }
LABEL_117:

      v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
      v66.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      if (v70 && v68)
      {
        uint64_t v69 = v68;
        operator delete(v68);
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      long long v23 = (const quasar::corrective_reranking::Parse *)((char *)v23 + 232);
      if (v23 == v24) {
        goto LABEL_9;
      }
    }
    std::string::size_type size = v66.__r_.__value_.__l.__size_;
    if (v66.__r_.__value_.__l.__size_ == 11)
    {
      if (*(void *)v66.__r_.__value_.__l.__data_ == 0x6641747265736E69
        && *(void *)(v66.__r_.__value_.__r.__words[0] + 3) == 0x7265746641747265)
      {
        int v32 = 1;
        goto LABEL_72;
      }
      std::string::size_type size = v66.__r_.__value_.__l.__size_;
    }
    else if (v66.__r_.__value_.__l.__size_ == 13 {
           && *(void *)v66.__r_.__value_.__l.__data_ == 0x6542747265736E69
    }
           && *(void *)(v66.__r_.__value_.__r.__words[0] + 5) == 0x6E65657774654274)
    {
LABEL_115:
      if (v26 < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      goto LABEL_117;
    }
    if (size == 12)
    {
      long long v31 = (std::string *)v66.__r_.__value_.__r.__words[0];
LABEL_63:
      std::string::size_type v33 = v31->__r_.__value_.__r.__words[0];
      int v34 = v31->__r_.__value_.__r.__words[1];
      BOOL v35 = v33 == 0x6542747265736E69 && v34 == 1701998438;
LABEL_69:
      int v32 = v35;
    }
    else
    {
LABEL_61:
      int v32 = 0;
    }
LABEL_72:
    quasar::corrective_reranking::TextEdit::targetIn((uint64_t)&v67, a1, &__p);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v64, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
    }
    else {
      std::string v64 = v71;
    }
    if (v32)
    {
      std::string::size_type v36 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v36 = v64.__r_.__value_.__l.__size_;
      }
      if (!v36) {
        goto LABEL_107;
      }
      uint64_t v37 = [EARVoiceCommandArgument alloc];
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::vector<unsigned int>::pointer v38 = &v64;
      }
      else {
        std::vector<unsigned int>::pointer v38 = (std::string *)v64.__r_.__value_.__r.__words[0];
      }
      uint64_t v39 = objc_msgSend(NSString, "stringWithUTF8String:", v38, v63);
      uint64_t v40 = [(EARVoiceCommandArgument *)v37 initWithPresence:1 text:v39];

      [v25 addObject:v40];
      std::string::size_type v41 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v41 = __p.__r_.__value_.__l.__size_;
      }
      if (!v41)
      {
LABEL_106:

LABEL_107:
        unsigned int v57 = [EARVoiceCommandInterpretation alloc];
        if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          float v58 = &v66;
        }
        else {
          float v58 = (std::string *)v66.__r_.__value_.__r.__words[0];
        }
        int v59 = objc_msgSend(NSString, "stringWithUTF8String:", v58, v63);
        uint64_t v60 = [MEMORY[0x1E4F1CAD0] set];
        char v61 = [MEMORY[0x1E4F28D60] indexSet];
        int v62 = [(EARVoiceCommandInterpretation *)v57 initWithCommandIdentifier:v59 suiteIdentifiers:v60 verbIndexes:v61 arguments:v25];

        [v5 addObject:v62];
        unint64_t v4 = 0x1E4F1C000;
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v64.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        char v26 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
        goto LABEL_115;
      }
      uint64_t v42 = [EARVoiceCommandArgument alloc];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      uint64_t v44 = [NSString stringWithUTF8String:p_p];
      uint64_t v45 = [(EARVoiceCommandArgument *)v42 initWithPresence:0 text:v44];

      [v25 addObject:v45];
    }
    else
    {
      std::string::size_type v46 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v46 = __p.__r_.__value_.__l.__size_;
      }
      if (!v46) {
        goto LABEL_107;
      }
      uint64_t v47 = [EARVoiceCommandArgument alloc];
      std::string::size_type v48 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
      std::string::size_type v49 = v64.__r_.__value_.__l.__size_;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v50 = &__p;
      }
      else {
        uint64_t v50 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      unsigned int v51 = objc_msgSend(NSString, "stringWithUTF8String:", v50, v63);
      if ((v48 & 0x80u) == 0) {
        std::string::size_type v52 = v48;
      }
      else {
        std::string::size_type v52 = v49;
      }
      uint64_t v40 = [(EARVoiceCommandArgument *)v47 initWithPresence:v52 == 0 text:v51];

      [v25 addObject:v40];
      std::string::size_type v53 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v53 = v64.__r_.__value_.__l.__size_;
      }
      if (!v53) {
        goto LABEL_106;
      }
      long long v54 = [EARVoiceCommandArgument alloc];
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v55 = &v64;
      }
      else {
        long long v55 = (std::string *)v64.__r_.__value_.__r.__words[0];
      }
      unsigned int v56 = [NSString stringWithUTF8String:v55];
      uint64_t v45 = [(EARVoiceCommandArgument *)v54 initWithPresence:1 text:v56];

      [v25 addObject:v45];
    }

    goto LABEL_106;
  }
LABEL_9:
  return v5;
}

void sub_1B1AF1834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::TextEdit::~TextEdit(void **this)
{
  id v3 = this + 13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  id v3 = this + 10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((unsigned char *)this + 48))
  {
    id v2 = this[3];
    if (v2)
    {
      this[4] = v2;
      operator delete(v2);
    }
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

id EARHelpers::EARVoiceCommandInterpretationsFromQuasarCommandData(uint64_t a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  id v3 = *(void **)(a1 + 152);
  if (v3 != *(void **)(a1 + 160))
  {
    if (*((char *)v3 + 23) < 0)
    {
      uint64_t v7 = v3[1];
      if (!v7) {
        goto LABEL_36;
      }
      if (v7 != 13)
      {
        if (v7 == 14 && *(void *)*v3 == 0x6769626D61736964 && *(void *)(*v3 + 6) == 0x6E6F697461756769) {
          goto LABEL_20;
        }
LABEL_32:
        long long v23 = (EARVoiceCommandArgument *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
        uint64_t v12 = v23;
        if (*((char *)v3 + 23) < 0)
        {
          uint64_t v25 = v3[1];
          if (v25 == 11)
          {
            if (*(void *)*v3 != 0x6641747265736E69 || *(void *)(*v3 + 3) != 0x7265746641747265) {
              goto LABEL_44;
            }
            goto LABEL_65;
          }
          if (v25 != 12)
          {
LABEL_44:
            uint64_t v29 = *((unsigned __int8 *)v3 + 47);
            if ((v29 & 0x80u) != 0) {
              uint64_t v29 = v3[4];
            }
            if (!v29) {
              goto LABEL_80;
            }
            long long v55 = v23;
            uint64_t v30 = [EARVoiceCommandArgument alloc];
            uint64_t v31 = *((unsigned __int8 *)v3 + 71);
            uint64_t v32 = v3[7];
            if (*((char *)v3 + 47) >= 0) {
              std::string::size_type v33 = v3 + 3;
            }
            else {
              std::string::size_type v33 = (void *)v3[3];
            }
            int v34 = [NSString stringWithUTF8String:v33];
            if ((v31 & 0x80u) == 0) {
              uint64_t v35 = v31;
            }
            else {
              uint64_t v35 = v32;
            }
            std::string::size_type v36 = [(EARVoiceCommandArgument *)v30 initWithPresence:v35 == 0 text:v34];

            uint64_t v12 = v55;
            [(EARVoiceCommandArgument *)v55 addObject:v36];
            uint64_t v37 = *((unsigned __int8 *)v3 + 71);
            if ((v37 & 0x80u) != 0) {
              uint64_t v37 = v3[7];
            }
            if (!v37)
            {
LABEL_79:

LABEL_80:
              unsigned int v51 = [EARVoiceCommandInterpretation alloc];
              if (*((char *)v3 + 23) >= 0) {
                std::string::size_type v52 = v3;
              }
              else {
                std::string::size_type v52 = (void *)*v3;
              }
              uint64_t v15 = [NSString stringWithUTF8String:v52];
              uint64_t v16 = [MEMORY[0x1E4F1CAD0] set];
              uint64_t v17 = [MEMORY[0x1E4F28D60] indexSet];
              uint64_t v19 = [(EARVoiceCommandInterpretation *)v51 initWithCommandIdentifier:v15 suiteIdentifiers:v16 verbIndexes:v17 arguments:v12];
              goto LABEL_84;
            }
            std::vector<unsigned int>::pointer v38 = [EARVoiceCommandArgument alloc];
            if (*((char *)v3 + 71) >= 0) {
              uint64_t v39 = v3 + 6;
            }
            else {
              uint64_t v39 = (void *)v3[6];
            }
            uint64_t v40 = [NSString stringWithUTF8String:v39];
            std::string::size_type v41 = [(EARVoiceCommandArgument *)v38 initWithPresence:1 text:v40];

            [(EARVoiceCommandArgument *)v55 addObject:v41];
LABEL_78:

            goto LABEL_79;
          }
          char v24 = (void *)*v3;
        }
        else
        {
          if (*((unsigned char *)v3 + 23) == 11)
          {
            if (*v3 != 0x6641747265736E69 || *(void *)((char *)v3 + 3) != 0x7265746641747265) {
              goto LABEL_44;
            }
            goto LABEL_65;
          }
          char v24 = v3;
          if (*((unsigned char *)v3 + 23) != 12) {
            goto LABEL_44;
          }
        }
        uint64_t v26 = *v24;
        int v27 = *((_DWORD *)v24 + 2);
        if (v26 != 0x6542747265736E69 || v27 != 1701998438) {
          goto LABEL_44;
        }
LABEL_65:
        uint64_t v43 = *((unsigned __int8 *)v3 + 71);
        if ((v43 & 0x80u) != 0) {
          uint64_t v43 = v3[7];
        }
        if (!v43) {
          goto LABEL_80;
        }
        uint64_t v44 = [EARVoiceCommandArgument alloc];
        if (*((char *)v3 + 71) >= 0) {
          uint64_t v45 = v3 + 6;
        }
        else {
          uint64_t v45 = (void *)v3[6];
        }
        std::string::size_type v46 = [NSString stringWithUTF8String:v45];
        std::string::size_type v36 = [(EARVoiceCommandArgument *)v44 initWithPresence:1 text:v46];

        [(EARVoiceCommandArgument *)v12 addObject:v36];
        uint64_t v47 = *((unsigned __int8 *)v3 + 47);
        if ((v47 & 0x80u) != 0) {
          uint64_t v47 = v3[4];
        }
        if (!v47) {
          goto LABEL_79;
        }
        std::string::size_type v48 = [EARVoiceCommandArgument alloc];
        if (*((char *)v3 + 47) >= 0) {
          std::string::size_type v49 = v3 + 3;
        }
        else {
          std::string::size_type v49 = (void *)v3[3];
        }
        uint64_t v50 = [NSString stringWithUTF8String:v49];
        std::string::size_type v41 = [(EARVoiceCommandArgument *)v48 initWithPresence:0 text:v50];

        [(EARVoiceCommandArgument *)v12 addObject:v41];
        goto LABEL_78;
      }
      id v5 = (uint64_t *)*v3;
    }
    else
    {
      int v4 = *((unsigned __int8 *)v3 + 23);
      if (!*((unsigned char *)v3 + 23)) {
        goto LABEL_36;
      }
      id v5 = *(uint64_t **)(a1 + 152);
      if (v4 != 13)
      {
        if (v4 != 14) {
          goto LABEL_32;
        }
        if (*v3 != 0x6769626D61736964 || *(void *)((char *)v3 + 6) != 0x6E6F697461756769) {
          goto LABEL_32;
        }
LABEL_20:
        uint64_t v9 = [EARVoiceCommandArgument alloc];
        if (*((char *)v3 + 47) >= 0) {
          uint64_t v10 = v3 + 3;
        }
        else {
          uint64_t v10 = (void *)v3[3];
        }
        unsigned int v11 = [NSString stringWithUTF8String:v10];
        uint64_t v12 = [(EARVoiceCommandArgument *)v9 initWithPresence:0 text:v11];

        BOOL v13 = [EARVoiceCommandInterpretation alloc];
        if (*((char *)v3 + 23) >= 0) {
          std::string v14 = v3;
        }
        else {
          std::string v14 = (void *)*v3;
        }
        uint64_t v15 = [NSString stringWithUTF8String:v14];
        uint64_t v16 = [MEMORY[0x1E4F1CAD0] set];
        uint64_t v17 = [MEMORY[0x1E4F28D60] indexSet];
        uint64_t v18 = [MEMORY[0x1E4F1C978] arrayWithObject:v12];
        uint64_t v19 = [(EARVoiceCommandInterpretation *)v13 initWithCommandIdentifier:v15 suiteIdentifiers:v16 verbIndexes:v17 arguments:v18];

LABEL_84:
        if (v19) {
          [v2 addObject:v19];
        }
        goto LABEL_86;
      }
    }
    uint64_t v20 = *v5;
    uint64_t v21 = *(uint64_t *)((char *)v5 + 5);
    if (v20 != 0x6542747265736E69 || v21 != 0x6E65657774654274) {
      goto LABEL_32;
    }
LABEL_36:
    uint64_t v19 = 0;
LABEL_86:
  }
  return v2;
}

void sub_1B1AF1FB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id EARHelpers::EarTokensToNSString(void *a1)
{
  id v1 = a1;
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x3032000000;
  unint64_t v8 = __Block_byref_object_copy_;
  uint64_t v9 = __Block_byref_object_dispose_;
  id v10 = [MEMORY[0x1E4F28E78] string];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = ___ZN10EARHelpers19EarTokensToNSStringEP7NSArrayIP26_EARSpeechRecognitionTokenE_block_invoke;
  void v4[3] = &unk_1E5FFE0C8;
  v4[4] = &v5;
  [v1 enumerateObjectsUsingBlock:v4];
  id v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_1B1AF2190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void ___ZN10EARHelpers19EarTokensToNSStringEP7NSArrayIP26_EARSpeechRecognitionTokenE_block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ([v5 hasSpaceBefore]) {
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) appendString:@" "];
  }
  id v3 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  int v4 = [v5 tokenName];
  [v3 appendString:v4];

  if ([v5 hasSpaceAfter]) {
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) appendString:@" "];
  }
}

void sub_1B1AF2290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

std::string *EARHelpers::QuasarTokensToStdString@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::size_type v2 = result->__r_.__value_.__r.__words[0];
  std::string::size_type size = result->__r_.__value_.__l.__size_;
  if (result->__r_.__value_.__r.__words[0] != size)
  {
    do
    {
      if (*(unsigned char *)(v2 + 45)) {
        std::string::append(a2, " ");
      }
      int v5 = *(char *)(v2 + 23);
      if (v5 >= 0) {
        uint64_t v6 = (const std::string::value_type *)v2;
      }
      else {
        uint64_t v6 = *(const std::string::value_type **)v2;
      }
      if (v5 >= 0) {
        std::string::size_type v7 = *(unsigned __int8 *)(v2 + 23);
      }
      else {
        std::string::size_type v7 = *(void *)(v2 + 8);
      }
      uint64_t result = std::string::append(a2, v6, v7);
      if (*(unsigned char *)(v2 + 44)) {
        uint64_t result = std::string::append(a2, " ");
      }
      v2 += 224;
    }
    while (v2 != size);
  }
  return result;
}

void sub_1B1AF2348(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void EARHelpers::QuasarNbestFromEARSpeechRecognition(EARHelpers *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  [(EARHelpers *)this nBest];
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = [obj countByEnumeratingWithState:&v41 objects:v47 count:16];
  if (v3)
  {
    uint64_t v19 = *(void *)v42;
    do
    {
      uint64_t v4 = 0;
      uint64_t v21 = v3;
      do
      {
        if (*(void *)v42 != v19) {
          objc_enumerationMutation(obj);
        }
        int v5 = *(void **)(*((void *)&v41 + 1) + 8 * v4);
        uint64_t v38 = 0;
        unint64_t v39 = 0;
        unint64_t v40 = 0;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        id v23 = v5;
        uint64_t v6 = [v23 countByEnumeratingWithState:&v34 objects:v46 count:16];
        uint64_t v22 = v4;
        if (v6)
        {
          uint64_t v7 = *(void *)v35;
          do
          {
            for (uint64_t i = 0; i != v6; ++i)
            {
              if (*(void *)v35 != v7) {
                objc_enumerationMutation(v23);
              }
              uint64_t v9 = *(void **)(*((void *)&v34 + 1) + 8 * i);
              if (v9)
              {
                [v9 quasarToken];
              }
              else
              {
                memset(v33, 0, sizeof(v33));
                long long v31 = 0u;
                *(_OWORD *)std::string __p = 0u;
                *(_OWORD *)uint64_t v30 = 0u;
                *(_OWORD *)uint64_t v28 = 0u;
                memset(v29, 0, sizeof(v29));
                memset(v27, 0, sizeof(v27));
                *(_OWORD *)uint64_t v26 = 0u;
                *(_OWORD *)char v24 = 0u;
                memset(v25, 0, sizeof(v25));
              }
              unint64_t v10 = v39;
              if (v39 >= v40)
              {
                unint64_t v39 = std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token>(&v38, (long long *)v24);
                if (SBYTE7(v33[0]) < 0) {
                  operator delete(__p[0]);
                }
              }
              else
              {
                long long v11 = *(_OWORD *)v24;
                *(void *)(v39 + 16) = *(void *)&v25[0];
                *(_OWORD *)unint64_t v10 = v11;
                v24[1] = 0;
                *(void *)&v25[0] = 0;
                v24[0] = 0;
                uint64_t v12 = *(void *)((char *)&v25[1] + 6);
                *(_OWORD *)(v10 + ++*(void *)(result + 24) = *(_OWORD *)((char *)v25 + 8);
                *(void *)(v10 + 38) = v12;
                uint64_t v13 = *(void *)&v27[0];
                *(_OWORD *)(v10 + 48) = *(_OWORD *)v26;
                *(void *)(v10 + 64) = v13;
                *(void *)(v10 + 72) = 0;
                v26[1] = 0;
                *(void *)&v27[0] = 0;
                v26[0] = 0;
                *(void *)(v10 + 80) = 0;
                *(void *)(v10 + 88) = 0;
                *(_OWORD *)(v10 + 72) = *(_OWORD *)((char *)v27 + 8);
                *(void *)(v10 + 88) = *((void *)&v27[1] + 1);
                memset((char *)v27 + 8, 0, 24);
                long long v14 = *(_OWORD *)v28;
                *(void *)(v10 + 112) = *(void *)&v29[0];
                *(void *)(v10 + 120) = 0;
                *(_OWORD *)(v10 + 96) = v14;
                v28[1] = 0;
                *(void *)&v29[0] = 0;
                v28[0] = 0;
                *(void *)(v10 + 128) = 0;
                *(void *)(v10 + 136) = 0;
                *(_OWORD *)(v10 + 120) = *(_OWORD *)((char *)v29 + 8);
                *(void *)(v10 + 136) = *((void *)&v29[1] + 1);
                memset((char *)v29 + 8, 0, 24);
                long long v15 = *(_OWORD *)v30;
                *(void *)(v10 + 160) = v31;
                *(_OWORD *)(v10 + 144) = v15;
                v30[1] = 0;
                *(void *)&long long v31 = 0;
                v30[0] = 0;
                LODWORD(v13) = DWORD2(v31);
                *(_WORD *)(v10 + 172) = WORD6(v31);
                *(_DWORD *)(v10 + 168) = v13;
                long long v16 = *(_OWORD *)__p;
                *(void *)(v10 + 192) = *(void *)&v33[0];
                *(_OWORD *)(v10 + 1--*(_DWORD *)(a9 + 76) = v16;
                __p[1] = 0;
                *(void *)&v33[0] = 0;
                __p[0] = 0;
                long long v17 = *(_OWORD *)((char *)v33 + 8);
                *(_DWORD *)(v10 + 216) = DWORD2(v33[1]);
                *(_OWORD *)(v10 + 200) = v17;
                unint64_t v39 = v10 + 224;
              }
              if (SBYTE7(v31) < 0) {
                operator delete(v30[0]);
              }
              uint64_t v45 = (void **)v29 + 1;
              std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v45);
              if (SBYTE7(v29[0]) < 0) {
                operator delete(v28[0]);
              }
              uint64_t v45 = (void **)v27 + 1;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v45);
              if (SBYTE7(v27[0]) < 0) {
                operator delete(v26[0]);
              }
              if (SBYTE7(v25[0]) < 0) {
                operator delete(v24[0]);
              }
            }
            uint64_t v6 = [v23 countByEnumeratingWithState:&v34 objects:v46 count:16];
          }
          while (v6);
        }

        std::vector<std::vector<quasar::Token>>::emplace_back<std::vector<quasar::Token>>(a2, (uint64_t)&v38);
        v24[0] = &v38;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
        uint64_t v4 = v22 + 1;
      }
      while (v22 + 1 != v21);
      uint64_t v3 = [obj countByEnumeratingWithState:&v41 objects:v47 count:16];
    }
    while (v3);
  }
}

void sub_1B1AF270C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = a11;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<quasar::Token>>::emplace_back<std::vector<quasar::Token>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v17[4] = v4;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v4, v12);
    long long v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)long long v14 = 0;
    *(_OWORD *)long long v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    _OWORD v17[2] = v14 + 24;
    std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(a1, v17);
    unint64_t v8 = (void *)a1[1];
    std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(v17);
  }
  else
  {
    void *v7 = 0;
    v7[1] = 0;
    _DWORD v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    _DWORD v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    unint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_1B1AF28C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void EARHelpers::StdStringUTF8ToUTF16IndexMap(uint64_t *a1@<X0>, void *a2@<X8>)
{
  std::string::size_type v2 = a1;
  if (*((char *)a1 + 23) < 0)
  {
    std::string::size_type v2 = (uint64_t *)*a1;
    unint64_t v4 = a1[1];
  }
  else
  {
    unint64_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (v4)
  {
    unint64_t v5 = 0;
    unsigned int v6 = 0;
    do
    {
      unint64_t v7 = v5 + 1;
      int v8 = *((char *)v2 + v5);
      unsigned int v9 = *((unsigned __int8 *)v2 + v5);
      if (v8 < 0)
      {
        if (v7 == v4) {
          goto LABEL_8;
        }
        if (v9 < 0xE0)
        {
          if (v9 < 0xC2) {
            goto LABEL_25;
          }
          int v12 = v9 & 0x1F;
        }
        else
        {
          if (v9 > 0xEF)
          {
            if (v9 > 0xF4
              || (unint64_t v15 = *((unsigned __int8 *)v2 + v7), ((byte_1B255F510[v15 >> 4] >> (v9 + 16)) & 1) == 0))
            {
LABEL_25:
              unsigned int v9 = -1;
              goto LABEL_26;
            }
            unint64_t v7 = v5 + 2;
            if (v5 + 2 == v4)
            {
LABEL_8:
              unsigned int v9 = -1;
              unint64_t v7 = v4;
              goto LABEL_26;
            }
            unsigned int v11 = *((unsigned __int8 *)v2 + v7) ^ 0x80;
            if (v11 > 0x3F) {
              goto LABEL_25;
            }
            int v10 = v15 & 0x3F | ((v9 - 240) << 6);
          }
          else
          {
            int v10 = v8 & 0xF;
            if (((a00000000000000[*((unsigned char *)v2 + v5) & 0xF] >> (*((unsigned char *)v2 + v7) >> 5)) & 1) == 0) {
              goto LABEL_25;
            }
            unsigned int v11 = *((unsigned char *)v2 + v7) & 0x3F;
          }
          if (++v7 == v4) {
            goto LABEL_8;
          }
          int v12 = v11 | (v10 << 6);
        }
        unsigned int v13 = *((unsigned __int8 *)v2 + v7) ^ 0x80;
        int v14 = v13 | (v12 << 6);
        if (v13 > 0x3F)
        {
          unsigned int v9 = -1;
        }
        else
        {
          ++v7;
          unsigned int v9 = v14;
        }
      }
LABEL_26:
      if (v9 < 0x10000) {
        unsigned int v16 = v6;
      }
      else {
        unsigned int v16 = v6 + 1;
      }
      unint64_t v17 = __PAIR64__(v16, v6);
      std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)a2, v7 - v5 + ((uint64_t)(a2[1] - *a2) >> 3), &v17);
      if (v9 >= 0x10000) {
        v6 += 2;
      }
      else {
        ++v6;
      }
      unint64_t v5 = v7;
    }
    while (v7 < v4);
  }
}

void sub_1B1AF2A7C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

id EARHelpers::shuffledArray(EARHelpers *this, NSArray *a2)
{
  std::string::size_type v2 = this;
  uint64_t v3 = (void *)[(EARHelpers *)v2 mutableCopy];
  uint64_t v4 = 0;
  for (unint64_t i = 0; i < [v3 count]; ++i)
  {
    objc_msgSend(v3, "exchangeObjectAtIndex:withObjectAtIndex:", i, arc4random() % (unint64_t)(v4 + objc_msgSend(v3, "count")) + i);
    --v4;
  }
  unsigned int v6 = (void *)[v3 copy];

  return v6;
}

void sub_1B1AF2B50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id EARHelpers::ContainerToNSSet<std::set<std::string>>(void *a1)
{
  std::string::size_type v2 = [MEMORY[0x1E4F1CA80] setWithCapacity:a1[2]];
  uint64_t v3 = (void *)*a1;
  uint64_t v4 = a1 + 1;
  if ((void *)*a1 != a1 + 1)
  {
    do
    {
      if (*((char *)v3 + 55) < 0)
      {
        unint64_t v5 = (void *)v3[4];
        uint64_t v6 = v3[5];
      }
      else
      {
        unint64_t v5 = v3 + 4;
        uint64_t v6 = *((unsigned __int8 *)v3 + 55);
      }
      unint64_t v7 = objc_msgSend(NSString, "ear_stringWithStringView:", v5, v6);
      [v2 addObject:v7];

      int v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          unsigned int v9 = v8;
          int v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          unsigned int v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          uint64_t v3 = v9;
        }
        while (!v10);
      }
      uint64_t v3 = v9;
    }
    while (v9 != v4);
  }
  unsigned int v11 = (void *)[v2 copy];

  return v11;
}

void sub_1B1AF2C64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id EARHelpers::VectorToArray<std::string>(long long **a1)
{
  std::string::size_type v2 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v3, *((void *)v3 + 1));
      }
      else
      {
        long long v5 = *v3;
        __p.__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      int v8 = objc_msgSend(NSString, "ear_stringWithStringView:", p_p, size, __p.__r_.__value_.__r.__words[0]);
      [v2 addObject:v8];

      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v3 = (long long *)((char *)v3 + 24);
    }
    while (v3 != v4);
  }
  unsigned int v9 = (void *)[v2 copy];

  return v9;
}

void sub_1B1AF2D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void EARHelpers::createNSDataInputStream(EARHelpers *this, NSData *a2)
{
  std::string::size_type v2 = this;
  if (v2)
  {
    uint64_t v3 = (void *)[(EARHelpers *)v2 copy];
  }
  else
  {
    uint64_t v3 = [MEMORY[0x1E4F1C9B8] data];
  }
  id v4 = v3;
  operator new();
}

void sub_1B1AF2E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F8] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA348], MEMORY[0x1E4FBA1F0]);
}

uint64_t std::vector<quasar::Token>::__push_back_slow_path<quasar::Token>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x124924924924924) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492) {
    unint64_t v6 = 0x124924924924924;
  }
  else {
    unint64_t v6 = v4;
  }
  int v14 = a1 + 2;
  if (v6) {
    unint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), v6);
  }
  else {
    unint64_t v7 = 0;
  }
  BOOL v10 = v7;
  unsigned int v11 = &v7[224 * v3];
  unsigned int v13 = &v7[224 * v6];
  std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,quasar::Token>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  int v12 = v11 + 224;
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v10);
  return v8;
}

void sub_1B1AF3030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,quasar::Token>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  long long v4 = *(long long *)((char *)a3 + 24);
  *(void *)(a2 + 38) = *(void *)((char *)a3 + 38);
  *(_OWORD *)(a2 + ++*(void *)(result + 24) = v4;
  long long v5 = a3[3];
  *(void *)(a2 + 64) = *((void *)a3 + 8);
  *(_OWORD *)(a2 + 48) = v5;
  *((void *)a3 + 7) = 0;
  *((void *)a3 + 8) = 0;
  *((void *)a3 + 6) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = *(long long *)((char *)a3 + 72);
  *(void *)(a2 + 88) = *((void *)a3 + 11);
  *((void *)a3 + 9) = 0;
  *((void *)a3 + 10) = 0;
  *((void *)a3 + 11) = 0;
  long long v6 = a3[6];
  *(void *)(a2 + 112) = *((void *)a3 + 14);
  *(_OWORD *)(a2 + 96) = v6;
  *((void *)a3 + 13) = 0;
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 12) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 120) = *(long long *)((char *)a3 + 120);
  *(void *)(a2 + 136) = *((void *)a3 + 17);
  *((void *)a3 + 15) = 0;
  *((void *)a3 + 16) = 0;
  *((void *)a3 + 17) = 0;
  long long v7 = a3[9];
  *(void *)(a2 + 160) = *((void *)a3 + 20);
  *(_OWORD *)(a2 + 144) = v7;
  *((void *)a3 + 19) = 0;
  *((void *)a3 + 20) = 0;
  *((void *)a3 + 18) = 0;
  int v8 = *((_DWORD *)a3 + 42);
  *(_WORD *)(a2 + 172) = *((_WORD *)a3 + 86);
  *(_DWORD *)(a2 + 168) = v8;
  long long v9 = a3[11];
  *(void *)(a2 + 192) = *((void *)a3 + 24);
  *(_OWORD *)(a2 + 1--*(_DWORD *)(a9 + 76) = v9;
  *((void *)a3 + 23) = 0;
  *((void *)a3 + ++*(void *)(result + 24) = 0;
  *((void *)a3 + 22) = 0;
  __n128 result = *(__n128 *)((char *)a3 + 200);
  *(_DWORD *)(a2 + 216) = *((_DWORD *)a3 + 54);
  *(__n128 *)(a2 + 200) = result;
  return result;
}

void std::vector<quasar::Token>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  long long v5 = (long long *)*a1;
  long long v4 = (long long *)a1[1];
  uint64_t v6 = a2[1];
  if (v4 != (long long *)*a1)
  {
    do
    {
      v6 -= 224;
      v4 -= 14;
      std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,quasar::Token>((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<quasar::Token>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 224;
    quasar::Token::~Token((void **)(i - 224));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void **std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  __n128 result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    unsigned int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v12);
    int v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    void v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)int v14 = 0;
    *(_OWORD *)int v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = (void *)a1[1];
    __n128 result = std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(v16);
  }
  else
  {
    void *v7 = 0;
    v7[1] = 0;
    _DWORD v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    _DWORD v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B1AF334C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<quasar::Token>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::vector<quasar::Token>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<quasar::Token>>,std::__tree_node<std::__value_type<std::string,std::vector<quasar::Token>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B1AF33A0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<quasar::Token>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<quasar::Token>>,std::__tree_node<std::__value_type<std::string,std::vector<quasar::Token>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    long long v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      __n128 result = std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<quasar::Token>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          long long v4 = (const void **)v8;
        }
        while (!v9);
      }
      long long v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<quasar::Token>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  unint64_t v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::__construct_node<std::pair<std::string const,std::vector<quasar::Token>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<quasar::Token>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<quasar::Token>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::__construct_node<std::pair<std::string const,std::vector<quasar::Token>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  __n128 result = std::pair<std::string const,std::vector<quasar::Token>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1AF3530(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<quasar::Token>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<quasar::Token>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<quasar::Token>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(this[1].__r_.__value_.__r.__words, *((void *)a2 + 3), *((void *)a2 + 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 5));
  return this;
}

void sub_1B1AF35C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<quasar::Token>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<quasar::Token>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::string::size_type v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<quasar::Token>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<quasar::Token>>,0>(uint64_t a1)
{
  std::string::size_type v2 = (void **)(a1 + 24);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<quasar::Token>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void quasar::CommandTagging::~CommandTagging(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  std::string::size_type v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::destroy((uint64_t)this, this[1]);
}

void *std::vector<quasar::CommandTagging>::__init_with_size[abi:ne180100]<quasar::CommandTagging*,quasar::CommandTagging*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<quasar::TranslationToken>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::CommandTagging>,quasar::CommandTagging*,quasar::CommandTagging*,quasar::CommandTagging*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1AF37A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::CommandTagging>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::CommandTagging>,quasar::CommandTagging*,quasar::CommandTagging*,quasar::CommandTagging*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v8 = 0;
    do
    {
      std::allocator<quasar::CommandTagging>::construct[abi:ne180100]<quasar::CommandTagging,quasar::CommandTagging&>(a1, (std::string *)(a4 + v8), a2 + v8);
      v8 += 72;
    }
    while (a2 + v8 != a3);
    a4 += v8;
  }
  return a4;
}

void sub_1B1AF3830(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 72;
    do
    {
      quasar::CommandTagging::~CommandTagging((void **)(v4 + v2));
      v2 -= 72;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<quasar::CommandTagging>::construct[abi:ne180100]<quasar::CommandTagging,quasar::CommandTagging&>(uint64_t a1, std::string *a2, uint64_t a3)
{
  std::map<std::string,std::vector<quasar::Token>>::map[abi:ne180100]((uint64_t *)a2, (const void ***)a3);
  a2[1].__r_.__value_.__r.__words[0] = 0;
  a2[1].__r_.__value_.__l.__size_ = 0;
  a2[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2 + 1, *(long long **)(a3 + 24), *(long long **)(a3 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 3));
  uint64_t v5 = a2 + 2;
  if (*(char *)(a3 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 48), *(void *)(a3 + 56));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 48);
    a2[2].__r_.__value_.__r.__words[2] = *(void *)(a3 + 64);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1B1AF38EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::destroy(v2, *(void **)(v2 + 8));
  _Unwind_Resume(a1);
}

void std::vector<quasar::CommandTagging>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        quasar::CommandTagging::~CommandTagging(v4 - 9);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  long long v6 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    _DWORD v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *uint64_t v9 = 0;
    *((void *)v7 + 9) = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 7) = v7 + 4;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

std::runtime_error *applesauce::CF::convert_error@<X0>(std::runtime_error *a1@<X8>)
{
  return std::runtime_error::runtime_error(a1, "Could not convert");
}

void applesauce::CF::details::CFDictionary_get_value_to<std::map<std::string,int>>(const __CFDictionary *a1@<X0>, uint64_t a2@<X8>)
{
  CFIndex Count = CFDictionaryGetCount(a1);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  std::vector<void const*>::vector(v13, Count);
  std::vector<void const*>::vector(values, Count);
  CFDictionaryGetKeysAndValues(a1, (const void **)v13[0], (const void **)values[0]);
  if (Count)
  {
    for (uint64_t i = 0; i != Count; ++i)
    {
      applesauce::CF::convert_to<std::string,0>(*((const __CFString **)v13[0] + i), (uint64_t)v7);
      int v6 = applesauce::CF::convert_to<int,0>((const __CFNumber *)values[0][i]);
      *(_OWORD *)std::string __p = *(_OWORD *)v7;
      uint64_t v10 = v8;
      v7[1] = 0;
      uint64_t v8 = 0;
      v7[0] = 0;
      int v11 = v6;
      std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,int>>((uint64_t **)a2, (const void **)__p, (uint64_t)__p);
      if (SHIBYTE(v10) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7[0]);
      }
    }
  }
  if (values[0])
  {
    values[1] = values[0];
    operator delete(values[0]);
  }
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
}

void sub_1B1AF3BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  int v27 = *(void **)(v25 - 56);
  if (v27)
  {
    *(void *)(v25 - 48) = v27;
    operator delete(v27);
  }
  std::__tree<std::string>::destroy(v24, *(char **)(v24 + 8));
  _Unwind_Resume(a1);
}

void *std::vector<void const*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B1AF3CC0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,int>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  __n128 result = *v5;
  if (!*v5)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::pair<std::string const,int> const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void *applesauce::CF::convert_to<std::string,0>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  if (!a1 || (CFTypeID TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(a1)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return applesauce::CF::details::CFString_get_value<true>(a1, a2);
}

void sub_1B1AF3DF0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::convert_to<int,0>(const __CFNumber *a1)
{
  uint64_t result = applesauce::CF::convert_as<int,0>(a1);
  if ((result & 0xFF00000000) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1B1AF3E60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::convert_as<int,0>(const __CFNumber *a1)
{
  if (a1)
  {
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(a1)) {
      return applesauce::CF::details::number_convert_as<int>(a1);
    }
  }
  return applesauce::CF::details::treat_as_BOOL_for_convert_as<int>(a1);
}

uint64_t applesauce::CF::details::treat_as_BOOL_for_convert_as<int>(const __CFBoolean *a1)
{
  if (a1 && (CFTypeID TypeID = CFBooleanGetTypeID(), TypeID == CFGetTypeID(a1)))
  {
    uint64_t Value = CFBooleanGetValue(a1);
    uint64_t v4 = 0x100000000;
  }
  else
  {
    uint64_t Value = 0;
    uint64_t v4 = 0;
  }
  return v4 | Value;
}

uint64_t applesauce::CF::details::number_convert_as<int>(const __CFNumber *a1)
{
  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      CFNumberRef v7 = a1;
      CFNumberType v8 = kCFNumberSInt16Type;
      goto LABEL_17;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberSInt32Type;
      goto LABEL_28;
    case kCFNumberSInt64Type:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberSInt64Type;
      goto LABEL_28;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberFloat32Type;
      goto LABEL_24;
    case kCFNumberFloat64Type:
      double valuePtr = 0.0;
      CFNumberRef v13 = a1;
      CFNumberType v14 = kCFNumberFloat64Type;
      goto LABEL_30;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberCharType;
LABEL_10:
      int Value = CFNumberGetValue(v2, v3, &valuePtr);
      uint64_t v16 = Value != 0;
      if (Value) {
        unsigned __int8 v17 = LOBYTE(valuePtr);
      }
      else {
        unsigned __int8 v17 = 0;
      }
      int v18 = -256;
      if ((v16 & (SLOBYTE(valuePtr) < 0)) == 0) {
        int v18 = 0;
      }
      uint64_t v5 = v16 << 32;
      LODWORD(v6) = v18 & 0xFFFFFF00 | v17;
      int v4 = v6 & 0xFFFFFF00;
      return v5 | v4 & 0xFFFFFF00 | v6;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      CFNumberRef v7 = a1;
      CFNumberType v8 = kCFNumberShortType;
LABEL_17:
      if (CFNumberGetValue(v7, v8, &valuePtr)) {
        uint64_t v6 = SLOWORD(valuePtr) & 0xFFFFFFFFLL | 0x100000000;
      }
      else {
        uint64_t v6 = 0;
      }
      goto LABEL_33;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberIntType;
      goto LABEL_28;
    case kCFNumberLongType:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberLongType;
      goto LABEL_28;
    case kCFNumberLongLongType:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberLongLongType;
      goto LABEL_28;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberFloatType;
LABEL_24:
      int v19 = CFNumberGetValue(v11, v12, &valuePtr);
      uint64_t v20 = (int)*(float *)&valuePtr;
      goto LABEL_31;
    case kCFNumberDoubleType:
      double valuePtr = 0.0;
      CFNumberRef v13 = a1;
      CFNumberType v14 = kCFNumberDoubleType;
      goto LABEL_30;
    case kCFNumberCFIndexType:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberCFIndexType;
      goto LABEL_28;
    case kCFNumberNSIntegerType:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberNSIntegerType;
LABEL_28:
      int v19 = CFNumberGetValue(v9, v10, &valuePtr);
      uint64_t v20 = LODWORD(valuePtr);
      goto LABEL_31;
    case kCFNumberCGFloatType:
      double valuePtr = 0.0;
      CFNumberRef v13 = a1;
      CFNumberType v14 = kCFNumberCGFloatType;
LABEL_30:
      int v19 = CFNumberGetValue(v13, v14, &valuePtr);
      uint64_t v20 = (int)valuePtr;
LABEL_31:
      uint64_t v6 = v20 | 0x100000000;
      if (!v19) {
        uint64_t v6 = 0;
      }
LABEL_33:
      int v4 = v6 & 0xFFFFFF00;
      uint64_t v5 = v6 & 0x100000000;
      break;
    default:
      int v4 = 0;
      uint64_t v5 = 0;
      LOBYTE(v6) = 0;
      break;
  }
  return v5 | v4 & 0xFFFFFF00 | v6;
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x124924924924924) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492) {
    unint64_t v6 = 0x124924924924924;
  }
  else {
    unint64_t v6 = v4;
  }
  CFNumberType v14 = a1 + 2;
  if (v6) {
    CFNumberRef v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), v6);
  }
  else {
    CFNumberRef v7 = 0;
  }
  CFNumberType v10 = v7;
  CFNumberRef v11 = &v7[224 * v3];
  CFNumberRef v13 = &v7[224 * v6];
  std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,quasar::Token>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  CFNumberType v12 = v11 + 224;
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v10);
  return v8;
}

void sub_1B1AF42C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

EARHelpers::NSDataInputStream *EARHelpers::NSDataInputStream::NSDataInputStream(EARHelpers::NSDataInputStream *this, NSData *a2)
{
  uint64_t v3 = a2;
  *((void *)this + 20) = MEMORY[0x1E4FBA4A8] + 16;
  unint64_t v4 = v3;
  uint64_t v7 = [(NSData *)v4 bytes];
  uint64_t v6 = [(NSData *)v4 length];
  boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>::stream<char const*,unsigned long>(this, (uint64_t *)&off_1F0A321F0, &v7, &v6);
  *(void *)this = off_1F0A35948;
  *((void *)this + 19) = v4;
  *((void *)this + 20) = off_1F0A35970;
  return this;
}

void sub_1B1AF43A4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8520](v1);

  _Unwind_Resume(a1);
}

void *boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>::stream<char const*,unsigned long>(void *a1, uint64_t *a2, void *a3, void *a4)
{
  uint64_t v8 = (void *)boost::iostreams::detail::stream_base<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,std::istream>::stream_base((uint64_t)a1, a2 + 1);
  uint64_t v9 = *a2;
  *uint64_t v8 = *a2;
  *(void *)((char *)a1 + *(void *)(v9 - 24)) = a2[5];
  uint64_t v10 = *a3 + *a4;
  *(void *)&long long v12 = *a3;
  *((void *)&v12 + 1) = v10;
  boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>::open_impl(a1, &v12);
  return a1;
}

void sub_1B1AF44B0(_Unwind_Exception *a1)
{
  std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v1 + 16);
  _Unwind_Resume(a1);
}

uint64_t boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>::~stream(uint64_t a1)
{
  uint64_t v2 = std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v2 + 16);
  MEMORY[0x1B3EA8520](a1 + 152);
  return a1;
}

void boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>::~stream(uint64_t a1)
{
  uint64_t v2 = std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v2 + 16);
  MEMORY[0x1B3EA8520](a1 + 152);
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>::~stream(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 16));
  JUMPOUT(0x1B3EA8520);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 16));
  MEMORY[0x1B3EA8520](v1 + 152);
  JUMPOUT(0x1B3EA8670);
}

uint64_t boost::iostreams::detail::stream_base<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,std::istream>::~stream_base(uint64_t a1)
{
  uint64_t v2 = std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v2 + 16);
  MEMORY[0x1B3EA8520](a1 + 152);
  return a1;
}

void boost::iostreams::detail::stream_base<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,std::istream>::~stream_base(uint64_t a1)
{
  uint64_t v2 = std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v2 + 16);
  MEMORY[0x1B3EA8520](a1 + 152);
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'boost::iostreams::detail::stream_base<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,std::istream>::~stream_base(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 16));
  JUMPOUT(0x1B3EA8520);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 16));
  MEMORY[0x1B3EA8520](v1 + 152);
  JUMPOUT(0x1B3EA8670);
}

void EARHelpers::NSDataInputStream::~NSDataInputStream(id *this)
{
  std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(this + 2));
  MEMORY[0x1B3EA8520](this + 20);
}

{
  uint64_t vars8;

  std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(this + 2));
  MEMORY[0x1B3EA8520](this + 20);
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'EARHelpers::NSDataInputStream::~NSDataInputStream(EARHelpers::NSDataInputStream *this)
{
  uint64_t v1 = (id *)((char *)this + *(void *)(*(void *)this - 24));

  std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 2));
  JUMPOUT(0x1B3EA8520);
}

{
  id *v1;
  uint64_t vars8;

  uint64_t v1 = (id *)((char *)this + *(void *)(*(void *)this - 24));

  std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 2));
  MEMORY[0x1B3EA8520](v1 + 20);
  JUMPOUT(0x1B3EA8670);
}

uint64_t boost::iostreams::detail::stream_base<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,std::istream>::stream_base(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = (void *)(a1 + 16);
  std::streambuf::basic_streambuf();
  *(unsigned char *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(unsigned char *)(a1 + 144) = 1;
  *(_DWORD *)(a1 + 80) = 1;
  *(void *)(a1 + 16) = &unk_1F0A47060;
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v5 - 24)) = a2[3];
  uint64_t v6 = a2[1];
  *(void *)a1 = v6;
  *(void *)(a1 + *(void *)(v6 - 24)) = a2[2];
  *(void *)(a1 + 8) = 0;
  uint64_t v7 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v7, v4);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  uint64_t v8 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v8 - 24)) = a2[3];
  return a1;
}

void sub_1B1AF4BB8(_Unwind_Exception *a1)
{
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v1);
  _Unwind_Resume(a1);
}

double boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>::open_impl(void *a1, long long *a2)
{
  uint64_t v3 = (uint64_t)(a1 + 2);
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), 0);
  long long v5 = *a2;
  return boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::open_impl(v3, &v5);
}

void boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(uint64_t a1)
{
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(a1);
  JUMPOUT(0x1B3EA8670);
}

double boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::seekpos@<D0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  return boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::seek_impl(a1, *(void *)(a2 + 128), 0, a3, a4);
}

uint64_t boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::underflow(void *a1)
{
  if (!a1[12])
  {
    boost::iostreams::detail::cant_read(&v4);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v4);
  }
  uint64_t v2 = (unsigned __int8 *)a1[3];
  if (!v2)
  {
    boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::init_get_area((uint64_t)a1);
    uint64_t v2 = (unsigned __int8 *)a1[3];
  }
  if (v2 == (unsigned __int8 *)a1[13]) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *v2;
  }
}

void sub_1B1AF4D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

boost::iostreams::detail *boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::pbackfail(uint64_t a1, boost::iostreams::detail *this)
{
  uint64_t v2 = *(void *)(a1 + 96);
  if (!v2)
  {
    boost::iostreams::detail::cant_read(&v6);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v6);
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3) {
    BOOL v4 = v3 == v2;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    boost::iostreams::detail::bad_putback(&v6);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v6);
  }
  *(void *)(a1 + ++*(void *)(result + 24) = v3 - 1;
  if (this == -1) {
    return 0;
  }
  *(unsigned char *)(v3 - 1) = (_BYTE)this;
  return this;
}

void sub_1B1AF4D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

uint64_t boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::overflow(void *a1, uint64_t a2)
{
  if (!a1[14])
  {
    *(void *)&v6.__val_ = 1;
    v6.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(&v7, "no write access", &v6);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v7);
  }
  if (!a1[6]) {
    boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::init_put_area((uint64_t)a1);
  }
  if (a2 == -1) {
    return 0;
  }
  BOOL v4 = (unsigned char *)a1[6];
  if (v4 == (unsigned char *)a1[15])
  {
    *(void *)&v6.__val_ = 1;
    v6.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(&v7, "write area exhausted", &v6);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v7);
  }
  *BOOL v4 = a2;
  ++a1[6];
  return a2;
}

void sub_1B1AF4E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11)
{
}

void *boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::close_impl(void *result, int a2)
{
  if (a2 == 16)
  {
    uint64_t v2 = result + 14;
    if (!result[14]) {
      return result;
    }
    uint64_t v3 = result + 5;
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 48))(result);
    goto LABEL_7;
  }
  if (a2 == 8)
  {
    uint64_t v2 = result + 12;
    if (result[12])
    {
      uint64_t v3 = result + 2;
LABEL_7:
      *uint64_t v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
      *uint64_t v2 = 0;
      v2[1] = 0;
    }
  }
  return result;
}

uint64_t boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::auto_close(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 128);
}

uint64_t boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::set_auto_close(uint64_t result, char a2)
{
  *(unsigned char *)(result + 128) = a2;
  return result;
}

uint64_t boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::strict_sync()
{
  return 1;
}

void *boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::component_type()
{
}

uint64_t boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::component_impl(uint64_t a1)
{
  return a1 + 72;
}

uint64_t boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::~direct_streambuf(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A47168;
  if (*(unsigned char *)(a1 + 88)) {
    *(unsigned char *)(a1 + 88) = 0;
  }
  return std::streambuf::~streambuf();
}

void boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::~direct_streambuf(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A47168;
  if (*(unsigned char *)(a1 + 88)) {
    *(unsigned char *)(a1 + 88) = 0;
  }
  std::streambuf::~streambuf();
  JUMPOUT(0x1B3EA8670);
}

uint64_t boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A47060;
  if ((*(void *)(a1 + 96) || *(void *)(a1 + 112)) && *(unsigned char *)(a1 + 128)) {
    boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::basic_array_source<char>>>>((_DWORD *)a1, 8, (_DWORD *)a1, 16, a1 + 72);
  }
  *(void *)a1 = &unk_1F0A47168;
  if (*(unsigned char *)(a1 + 88)) {
    *(unsigned char *)(a1 + 88) = 0;
  }
  return std::streambuf::~streambuf();
}

void sub_1B1AF5080(void *a1)
{
}

uint64_t boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::basic_array_source<char>>>>(_DWORD *a1, int a2, _DWORD *a3, int a4, uint64_t a5)
{
  uint64_t result = boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>>(a1, a2, a3, a4);
  if (*(unsigned char *)(a5 + 16)) {
    *(unsigned char *)(a5 + 16) = 0;
  }
  return result;
}

void sub_1B1AF50C0(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(unsigned char *)(v1 + 16)) {
    *(unsigned char *)(v1 + 16) = 0;
  }
  __cxa_rethrow();
}

void sub_1B1AF50D8(_Unwind_Exception *a1)
{
}

uint64_t boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>>(_DWORD *a1, int a2, _DWORD *a3, int a4)
{
  return 0;
}

void sub_1B1AF5124(void *a1)
{
  __cxa_begin_catch(a1);
  boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>::close(v2, v1);
  __cxa_rethrow();
}

void sub_1B1AF5148(_Unwind_Exception *a1)
{
}

_DWORD *boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>::close(_DWORD *result, int a2)
{
  if (a2 == 16)
  {
    int v4 = result[16];
    if ((v4 & 4) != 0) {
      return result;
    }
    int v3 = v4 | 4;
    goto LABEL_7;
  }
  if (a2 == 8)
  {
    int v2 = result[16];
    if ((v2 & 2) == 0)
    {
      int v3 = v2 | 2;
LABEL_7:
      result[16] = v3;
      return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 120))();
    }
  }
  return result;
}

double boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::seek_impl@<D0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10 = a1[12];
  if (!v10)
  {
LABEL_21:
    char v15 = 0;
    uint64_t v16 = -1;
    if ((a4 & 0x10) == 0) {
      goto LABEL_50;
    }
    goto LABEL_36;
  }
  uint64_t v11 = a1[14];
  if (v10 != v11 && (a4 & 0x18) == 24 && v11 != 0)
  {
    boost::iostreams::detail::bad_seek(&v25);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v25);
  }
  if (v11) {
    BOOL v14 = v10 == v11;
  }
  else {
    BOOL v14 = 0;
  }
  char v15 = v14;
  if (v14)
  {
    if (a1[6] || !a1[3]) {
      boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::init_get_area((uint64_t)a1);
    }
  }
  else if ((a4 & 8) == 0)
  {
    goto LABEL_21;
  }
  uint64_t v17 = a1[3];
  if (!v17)
  {
    long long v18 = *((_OWORD *)a1 + 6);
    a1[2] = v18;
    *(_OWORD *)(a1 + 3) = v18;
    uint64_t v17 = v18;
  }
  uint64_t v16 = a2;
  if (a3)
  {
    if (a3 != 1)
    {
      if (a3 != 2)
      {
        uint64_t v16 = 0;
        goto LABEL_34;
      }
      uint64_t v17 = a1[13];
    }
    uint64_t v16 = v17 + a2 - a1[12];
  }
  if (v16 < 0)
  {
LABEL_51:
    boost::iostreams::detail::bad_seek(&v25);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v25);
  }
LABEL_34:
  uint64_t v20 = a1[12];
  uint64_t v19 = a1[13];
  if (v16 > v19 - v20) {
    goto LABEL_51;
  }
  a1[2] = v20;
  a1[3] = v20 + v16;
  a1[4] = v19;
  if ((a4 & 0x10) == 0) {
    goto LABEL_50;
  }
LABEL_36:
  if (v15) {
    goto LABEL_50;
  }
  uint64_t v21 = a1[14];
  if (!v21) {
    goto LABEL_50;
  }
  uint64_t v22 = a1[6];
  if (!v22)
  {
    uint64_t v23 = a1[15];
    a1[5] = v21;
    a1[6] = v21;
    a1[7] = v23;
    uint64_t v22 = v21;
  }
  switch(a3)
  {
    case 0:
      goto LABEL_45;
    case 2:
      a2 = a2 - v21 + a1[15];
LABEL_45:
      uint64_t v16 = a2;
      if (a2 < 0)
      {
LABEL_52:
        boost::iostreams::detail::bad_seek(&v25);
        boost::throw_exception<std::ios_base::failure>((uint64_t)&v25);
      }
      goto LABEL_48;
    case 1:
      a2 = a2 - v21 + v22;
      goto LABEL_45;
  }
  uint64_t v16 = 0;
LABEL_48:
  if (v16 > a1[15] - v21) {
    goto LABEL_52;
  }
  a1[6] = v22 + (int)v16 + (int)v21 - (int)v22;
LABEL_50:
  double result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(void *)(a5 + 128) = v16;
  return result;
}

void sub_1B1AF539C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

void boost::throw_exception<std::ios_base::failure>(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x50uLL);
  boost::wrapexcept<std::ios_base::failure>::wrapexcept(exception, a1);
}

void sub_1B1AF5400(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::ios_base::failure *boost::iostreams::detail::bad_seek@<X0>(std::ios_base::failure *a1@<X8>)
{
  *(void *)&v4.__val_ = 1;
  v4.__cat_ = std::iostream_category();
  return std::ios_base::failure::failure(a1, "bad seek", &v4);
}

uint64_t boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::init_get_area(uint64_t result)
{
  long long v1 = *(_OWORD *)(result + 96);
  *(void *)(result + 16) = v1;
  *(_OWORD *)(result + ++*(void *)(result + 24) = v1;
  if ((void)v1)
  {
    uint64_t v2 = *(void *)(result + 112);
    if (v2) {
      BOOL v3 = (void)v1 == v2;
    }
    else {
      BOOL v3 = 0;
    }
    if (v3)
    {
      uint64_t v4 = *(void *)(result + 48);
      if (v4)
      {
        *(void *)(result + ++*(void *)(result + 24) = v1 + (int)v4 - (int)v1;
        *(void *)(result + 48) = 0;
        *(void *)(result + 56) = 0;
        *(void *)(result + 40) = 0;
      }
    }
  }
  return result;
}

uint64_t boost::wrapexcept<std::ios_base::failure>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 40) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 48));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<std::ios_base::failure>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A46DF8;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)a2);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA448] + 16;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = -1;
  *(void *)a1 = &unk_1F0A46C18;
  *(void *)(a1 + 8) = &unk_1F0A46C48;
  *(void *)(a1 + 40) = &unk_1F0A46C70;
  *(void *)(a1 + 48) = 0;
  return a1;
}

{
  uint64_t v4;
  long long v5;

  *(void *)a1 = &unk_1F0A46DF8;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA448] + 16;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA4A0] + 16;
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = &unk_1F0A47040;
  *(void *)(a1 + 48) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = &unk_1F0A46C18;
  *(void *)(a1 + 8) = &unk_1F0A46C48;
  *(void *)(a1 + 40) = &unk_1F0A46C70;
  return a1;
}

void boost::wrapexcept<std::ios_base::failure>::clone()
{
}

void sub_1B1AF579C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::ios_base::failure>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x50uLL);
  boost::wrapexcept<std::ios_base::failure>::wrapexcept((uint64_t)exception, a1);
}

void sub_1B1AF585C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::ios_base::failure>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 40) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 48));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'boost::wrapexcept<std::ios_base::failure>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 32) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'boost::wrapexcept<std::ios_base::failure>::~wrapexcept(void *a1)
{
  *a1 = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 2);
}

{
  uint64_t vars8;

  *a1 = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 2);
  JUMPOUT(0x1B3EA8670);
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

void sub_1B1AF5C2C(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  }
  *a1 = a2;
  if (a2)
  {
    long long v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 24);
    return v5(a2);
  }
  return result;
}

std::ios_base::failure *boost::iostreams::detail::cant_read@<X0>(std::ios_base::failure *a1@<X8>)
{
  *(void *)&v4.__val_ = 1;
  v4.__cat_ = std::iostream_category();
  return std::ios_base::failure::failure(a1, "no read access", &v4);
}

std::ios_base::failure *boost::iostreams::detail::bad_putback@<X0>(std::ios_base::failure *a1@<X8>)
{
  *(void *)&v4.__val_ = 1;
  v4.__cat_ = std::iostream_category();
  return std::ios_base::failure::failure(a1, "putback buffer full", &v4);
}

uint64_t boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::init_put_area(uint64_t result)
{
  long long v1 = *(_OWORD *)(result + 112);
  *(void *)(result + 40) = v1;
  *(_OWORD *)(result + 48) = v1;
  uint64_t v2 = *(void *)(result + 96);
  if (v2) {
    BOOL v3 = (void)v1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3 && v2 == (void)v1)
  {
    uint64_t v5 = *(void *)(result + 24);
    if (v5)
    {
      *(void *)(result + 48) = v1 + (int)v5 - (int)v1;
      *(void *)(result + ++*(void *)(result + 24) = 0;
      *(void *)(result + 32) = 0;
      *(void *)(result + 16) = 0;
    }
  }
  return result;
}

double boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::open_impl(uint64_t a1, _OWORD *a2)
{
  if (*(void *)(a1 + 96) || *(void *)(a1 + 112))
  {
    *(void *)&v3.__val_ = 1;
    v3.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(&v4, "already open", &v3);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v4);
  }
  if (*(unsigned char *)(a1 + 88)) {
    *(unsigned char *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *a2;
  *(unsigned char *)(a1 + 88) = 1;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 72);
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) &= 0xFFFFFFF9;
  return result;
}

void sub_1B1AF5E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11)
{
}

void sub_1B1AF61DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id EarPmLogger(void)
{
  uint64_t v0 = &unk_1E9C2D000;
  {
    uint64_t v0 = (void *)&unk_1E9C2D000;
    if (v3)
    {
      EarPmLogger(void)::logger = (uint64_t)os_log_create("com.apple.siri", "quasar.pm");
      uint64_t v0 = (void *)&unk_1E9C2D000;
    }
  }
  long long v1 = (void *)v0[463];
  return v1;
}

void sub_1B1AF62F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1B1AF64D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v21, a20);

  _Unwind_Resume(a1);
}

void sub_1B1AF691C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,long long buf,int a30,__int16 a31,char a32,char a33)
{
  if (a2)
  {
    *(void *)&buf = &a14;
    std::vector<quasar::DataFeed>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    long long v35 = __cxa_begin_catch(exception_object);
    long long v36 = EarPmLogger();
    BOOL v37 = os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v37)
      {
        uint64_t v38 = (*(uint64_t (**)(void *))(*(void *)v35 + 16))(v35);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v38;
        _os_log_impl(&dword_1B1A86000, v36, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v37)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1B1A86000, v36, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B1AF68B8);
  }
  _Unwind_Resume(exception_object);
}

void *std::shared_ptr<quasar::TextTokenizer>::operator=[abi:ne180100]<quasar::TextTokenizer,std::default_delete<quasar::TextTokenizer>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<quasar::TextTokenizer>::shared_ptr[abi:ne180100]<quasar::TextTokenizer,std::default_delete<quasar::TextTokenizer>,void>((uint64_t *)&v6, a2);
  int v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void sub_1B1AF6D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,long long buf,int a23,__int16 a24,char a25,char a26)
{
  if (a2)
  {
    int v27 = __cxa_begin_catch(exception_object);
    uint64_t v28 = EarPmLogger();
    BOOL v29 = os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v29)
      {
        uint64_t v30 = (*(uint64_t (**)(void *))(*(void *)v27 + 16))(v27);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v30;
        _os_log_impl(&dword_1B1A86000, v28, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v29)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1B1A86000, v28, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B1AF6D34);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1AF6F7C(_Unwind_Exception *a1)
{
  long long v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B1AF7014(_Unwind_Exception *a1)
{
  long long v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B1AF7068(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  int v3 = EarPmLogger();
  char v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2) {
    -[_EARPhoneticMatchBuilder buildGFsts](v4);
  }
  else {
    [(_EARPhoneticMatchBuilder *)v4 buildGFsts];
  }

  __cxa_end_catch();
  JUMPOUT(0x1B1AF7058);
}

void sub_1B1AF70E4(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  int v3 = EarPmLogger();
  char v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2) {
    -[_EARPhoneticMatchBuilder buildGFsts](v4);
  }
  else {
    [(_EARPhoneticMatchBuilder *)v4 buildGFsts];
  }

  __cxa_end_catch();
  JUMPOUT(0x1B1AF70D4);
}

void sub_1B1AF7160(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  int v3 = EarPmLogger();
  char v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2) {
    -[_EARPhoneticMatchBuilder buildGFsts](v4);
  }
  else {
    [(_EARPhoneticMatchBuilder *)v4 buildGFsts];
  }

  __cxa_end_catch();
  JUMPOUT(0x1B1AF7150);
}

void sub_1B1AF71DC(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  int v3 = EarPmLogger();
  char v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2) {
    -[_EARPhoneticMatchBuilder buildGFsts](v4);
  }
  else {
    [(_EARPhoneticMatchBuilder *)v4 buildGFsts];
  }

  __cxa_end_catch();
  JUMPOUT(0x1B1AF71CCLL);
}

void sub_1B1AF7258(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  int v3 = EarPmLogger();
  char v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2) {
    -[_EARPhoneticMatchBuilder buildGFsts](v4);
  }
  else {
    [(_EARPhoneticMatchBuilder *)v4 buildGFsts];
  }

  __cxa_end_catch();
  JUMPOUT(0x1B1AF7248);
}

void sub_1B1AF735C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, int a10, __int16 a11, char a12, char a13)
{
  if (a2)
  {
    BOOL v14 = __cxa_begin_catch(exception_object);
    char v15 = EarPmLogger();
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(void *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v16)
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B1AF7324);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1AF7520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, int a10, __int16 a11, char a12, char a13)
{
  if (a2)
  {
    BOOL v14 = __cxa_begin_catch(exception_object);
    char v15 = EarPmLogger();
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(void *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v16)
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B1AF74E8);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1AF781C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, long long buf, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
  {
    fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&__p);
    uint64_t v22 = __cxa_begin_catch(exception_object);
    uint64_t v23 = EarPmLogger();
    BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v24)
      {
        uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v22 + 16))(v22);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v25;
        _os_log_impl(&dword_1B1A86000, v23, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v24)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B1A86000, v23, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B1AF77E0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SymbolTable::WriteText(uint64_t a1, uint64_t a2)
{
  v18[19] = *MEMORY[0x1E4F143B8];
  std::ofstream::basic_ofstream(&v16);
  if (*(_DWORD *)&v17[*(void *)(v16 - 24) + 24])
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    char v4 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    uint64_t v5 = (void *)fst::cerr(v4);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SymbolTable::WriteText: Can't open file ", 40);
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = 0;
  }
  else
  {
    fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)__p);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t *, void **))(*(void *)a1 + 80))(a1, &v16, __p);
    if (v14 < 0) {
      operator delete(__p[1]);
    }
  }
  uint64_t v16 = *MEMORY[0x1E4FBA400];
  *(void *)&v17[*(void *)(v16 - 24) - 8] = *(void *)(MEMORY[0x1E4FBA400] + 24);
  MEMORY[0x1B3EA7CF0](v17);
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](v18);
  return v10;
}

void sub_1B1AF7BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  std::ofstream::~ofstream(&a24);
  _Unwind_Resume(a1);
}

void sub_1B1AF7D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, int a10, __int16 a11, char a12, char a13)
{
  if (a2)
  {
    char v14 = __cxa_begin_catch(exception_object);
    char v15 = EarPmLogger();
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(void *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v16)
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B1AF7CC8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SymbolTable::Write(uint64_t a1, uint64_t a2)
{
  v17[19] = *MEMORY[0x1E4F143B8];
  std::ofstream::basic_ofstream(&v15);
  if (*(_DWORD *)&v16[*(void *)(v15 - 24) + 24])
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    char v4 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    uint64_t v5 = (void *)fst::cerr(v4);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SymbolTable::Write: Can't open file ", 36);
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 72))(a1, &v15);
  }
  uint64_t v15 = *MEMORY[0x1E4FBA400];
  *(void *)&v16[*(void *)(v15 - 24) - 8] = *(void *)(MEMORY[0x1E4FBA400] + 24);
  MEMORY[0x1B3EA7CF0](v16);
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](v17);
  return v10;
}

void sub_1B1AF801C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
}

void sub_1B1AF81E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long buf, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
  {

    long long v18 = __cxa_begin_catch(exception_object);
    uint64_t v19 = EarPmLogger();
    BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v20)
      {
        uint64_t v21 = (*(uint64_t (**)(void *))(*(void *)v18 + 16))(v18);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v21;
        _os_log_impl(&dword_1B1A86000, v19, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v20)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B1A86000, v19, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B1AF81A4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1AF8428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, int a10, __int16 a11, char a12, char a13)
{
  if (a2)
  {
    char v14 = __cxa_begin_catch(exception_object);
    uint64_t v15 = EarPmLogger();
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(void *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v16)
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B1AF83F0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1AF86D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long buf, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
  {

    long long v18 = __cxa_begin_catch(exception_object);
    uint64_t v19 = EarPmLogger();
    BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v20)
      {
        uint64_t v21 = (*(uint64_t (**)(void *))(*(void *)v18 + 16))(v18);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v21;
        _os_log_impl(&dword_1B1A86000, v19, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v20)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B1A86000, v19, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B1AF8690);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1AF88EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, int a10, __int16 a11, char a12, char a13)
{
  if (a2)
  {
    char v14 = __cxa_begin_catch(exception_object);
    uint64_t v15 = EarPmLogger();
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(void *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v16)
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B1AF88B4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1AF8B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf, int a14, __int16 a15, char a16, char a17)
{
  if (a2)
  {
    fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(&a11);
    uint64_t v19 = __cxa_begin_catch(exception_object);
    BOOL v20 = EarPmLogger();
    BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v21)
      {
        uint64_t v22 = (*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v22;
        _os_log_impl(&dword_1B1A86000, v20, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v21)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B1A86000, v20, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B1AF8ADCLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(void *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetStart(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  *(void *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(void *)(v4 + 8) & 4;
  return result;
}

void sub_1B1AF8F30(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, long long buf)
{
  if (a2)
  {
    fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&a13);
    uint64_t v17 = __cxa_begin_catch(a1);
    long long v18 = EarPmLogger();
    BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v19)
      {
        uint64_t v20 = (*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v20;
        _os_log_impl(&dword_1B1A86000, v18, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v19)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B1A86000, v18, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B1AF8EF4);
  }
  _Unwind_Resume(a1);
}

void fst::SymbolTable::~SymbolTable(fst::SymbolTable *this)
{
  *(void *)this = &unk_1F0A382C8;
  uint64_t v1 = *((void *)this + 1);
  int v2 = *(_DWORD *)(v1 + 168) - 1;
  *(_DWORD *)(v1 + 168) = v2;
  if (!v2)
  {
    if (*(char *)(v1 + 223) < 0) {
      operator delete(*(void **)(v1 + 200));
    }
    if (*(char *)(v1 + 199) < 0) {
      operator delete(*(void **)(v1 + 176));
    }
    std::__tree<int>::destroy(v1 + 144, *(void **)(v1 + 152));
    uint64_t v3 = *(void **)(v1 + 120);
    if (v3)
    {
      *(void *)(v1 + 128) = v3;
      operator delete(v3);
    }
    fst::internal::DenseSymbolMap::~DenseSymbolMap((fst::internal::DenseSymbolMap *)(v1 + 40));
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    MEMORY[0x1B3EA8670](v1, 0x10B2C404FCE5648);
  }
}

{
  uint64_t vars8;

  fst::SymbolTable::~SymbolTable(this);
  JUMPOUT(0x1B3EA8670);
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A42C20;
  int v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 88);
}

float fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return **(float **)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return (uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 32)
                 - *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 24)) >> 4;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 8);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 16);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::operator=(uint64_t a1)
{
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  int v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  int v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(*(void *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1B1AF9558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::SymbolTable::SymbolTable(fst::SymbolTable *this)
{
  *(void *)this = &unk_1F0A382C8;
  operator new();
}

void sub_1B1AF962C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1B3EA8670](v15, 0x10B2C404FCE5648);
  _Unwind_Resume(a1);
}

std::string *fst::SymbolTableImpl::SymbolTableImpl(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  fst::internal::DenseSymbolMap::DenseSymbolMap((fst::internal::DenseSymbolMap *)&this[1].__r_.__value_.__r.__words[2]);
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[6].__r_.__value_.__r.__words[2] = 0;
  this[6].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[6].__r_.__value_.__l.__size_;
  LODWORD(this[7].__r_.__value_.__l.__data_) = 1;
  this[7].__r_.__value_.__s.__data_[4] = 0;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[2] = 0u;
  return this;
}

void sub_1B1AF96F0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<quasar::DataFeed,std::allocator<quasar::DataFeed>,quasar::DataFeedType,quasar::SystemConfig &,void>@<X0>(void *a1@<X8>)
{
  int v2 = operator new(0xB8uLL);
  unint64_t result = std::__shared_ptr_emplace<quasar::DataFeed>::__shared_ptr_emplace[abi:ne180100]<quasar::DataFeedType,quasar::SystemConfig &,std::allocator<quasar::DataFeed>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1AF975C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::DataFeed>::__shared_ptr_emplace[abi:ne180100]<quasar::DataFeedType,quasar::SystemConfig &,std::allocator<quasar::DataFeed>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62400;
  quasar::DataFeed::DataFeed(a1 + 3);
  return a1;
}

void sub_1B1AF97B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::DataFeed>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::DataFeed>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62400;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::DataFeed>::__on_zero_shared(uint64_t a1)
{
  std::allocator<quasar::DataFeed>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<quasar::DataFeed>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a2 + 112);
  if (*(char *)(a2 + 111) < 0) {
    operator delete(*(void **)(a2 + 88));
  }
  long long v3 = (void **)(a2 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  long long v3 = (void **)a2;
  std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void quasar::DataFeed::~DataFeed(void **this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)(this + 14));
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  int v2 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  int v2 = this;
  std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      long long v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

void std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  char v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        char v6 = v4 - 32;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v4 - 24), *((void **)v4 - 2));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::shared_ptr<quasar::TextTokenizer>::shared_ptr[abi:ne180100]<quasar::TextTokenizer,std::default_delete<quasar::TextTokenizer>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *unint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<quasar::TextTokenizer  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::TextTokenizer  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::TextTokenizer  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

uint64_t std::vector<quasar::DataFeed>::__push_back_slow_path<quasar::DataFeed>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x199999999999999) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 5);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v6 = 0x199999999999999;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    char v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::DataFeed>>((uint64_t)(a1 + 2), v6);
  }
  else {
    char v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = &v7[160 * v3];
  char v13 = &v7[160 * v6];
  std::allocator<quasar::DataFeed>::construct[abi:ne180100]<quasar::DataFeed,quasar::DataFeed>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  long long v12 = v11 + 160;
  std::vector<quasar::DataFeed>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<quasar::DataFeed>::~__split_buffer(&v10);
  return v8;
}

void sub_1B1AF9C7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::DataFeed>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<quasar::DataFeed>::construct[abi:ne180100]<quasar::DataFeed,quasar::DataFeed>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  long long v5 = *(_OWORD *)(a3 + 24);
  *(void *)(a2 + 40) = *(void *)(a3 + 40);
  *(_OWORD *)(a2 + ++*(void *)(result + 24) = v5;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + ++*(void *)(result + 24) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(void *)(a2 + 64) = *(void *)(a3 + 64);
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
  long long v6 = *(_OWORD *)(a3 + 88);
  *(void *)(a2 + 104) = *(void *)(a3 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 88) = 0;
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table(a2 + 112, (uint64_t *)(a3 + 112));
  *(unsigned char *)(a2 + 152) = *(unsigned char *)(a3 + 152);
  return result;
}

uint64_t std::vector<quasar::DataFeed>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::DataFeed>,std::reverse_iterator<quasar::DataFeed*>,std::reverse_iterator<quasar::DataFeed*>,std::reverse_iterator<quasar::DataFeed*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::DataFeed>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x19999999999999ALL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(160 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::DataFeed>,std::reverse_iterator<quasar::DataFeed*>,std::reverse_iterator<quasar::DataFeed*>,std::reverse_iterator<quasar::DataFeed*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  uint64_t v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 160;
      std::allocator<quasar::DataFeed>::construct[abi:ne180100]<quasar::DataFeed,quasar::DataFeed>(a1, v7 - 160, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 160;
      *((void *)&v16 + 1) -= 160;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeed>,std::reverse_iterator<quasar::DataFeed*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeed>,std::reverse_iterator<quasar::DataFeed*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeed>,std::reverse_iterator<quasar::DataFeed*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeed>,std::reverse_iterator<quasar::DataFeed*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::DataFeed>::destroy[abi:ne180100](v3, v1);
      v1 += 160;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::DataFeed>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::DataFeed>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 160;
    std::allocator<quasar::DataFeed>::destroy[abi:ne180100](v4, i - 160);
  }
}

quasar::DataFeed *quasar::DataFeed::DataFeed(quasar::DataFeed *this, const quasar::DataFeed *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<quasar::DataFeedItem>::__init_with_size[abi:ne180100]<quasar::DataFeedItem*,quasar::DataFeedItem*>(this, *(void *)a2, *((void *)a2 + 1), (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 5);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 24);
    *((void *)this + 5) = *((void *)a2 + 5);
    *(_OWORD *)((char *)this + ++*(void *)(result + 24) = v4;
  }
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 6), *((long long **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 88);
    *((void *)this + 13) = *((void *)a2 + 13);
    *(_OWORD *)((char *)this + 88) = v5;
  }
  std::unordered_map<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>::unordered_map((uint64_t)this + 112, (uint64_t)a2 + 112);
  *((unsigned char *)this + 152) = *((unsigned char *)a2 + 152);
  return this;
}

void sub_1B1AFA0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 47) < 0) {
    operator delete(*v11);
  }
  a10 = (void **)v10;
  std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void *std::vector<quasar::DataFeedItem>::__init_with_size[abi:ne180100]<quasar::DataFeedItem*,quasar::DataFeedItem*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::DataFeedItem>,quasar::DataFeedItem*,quasar::DataFeedItem*,quasar::DataFeedItem*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1AFA188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::DataFeedItem>,quasar::DataFeedItem*,quasar::DataFeedItem*,quasar::DataFeedItem*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  int32x2_t v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(_DWORD *)uint64_t v4 = *(_DWORD *)v6;
      std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)(v4 + 8), (const void ***)(v6 + 8));
      v6 += 32;
      uint64_t v4 = v11 + 32;
      v11 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeedItem>,quasar::DataFeedItem*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1AFA240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::map<std::string,std::string>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B1AFA294(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    long long v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1AFA424(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1B1AFA4B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeedItem>,quasar::DataFeedItem*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeedItem>,quasar::DataFeedItem*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeedItem>,quasar::DataFeedItem*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    do
    {
      uint64_t v3 = v1 - 32;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1 - 24, *(void **)(v1 - 16));
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t std::unordered_map<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_1B1AFA5B8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    char v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1B1AFA83C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1AFA8B4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::string::size_type v5 = *((void *)a2 + 4);
  this[1].__r_.__value_.__r.__words[0] = *((void *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::vector<quasar::DataFeed>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    std::string::size_type v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 160;
        std::allocator<quasar::DataFeed>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      std::string::size_type v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::allocate_shared[abi:ne180100]<quasar::PMBuilder,std::allocator<quasar::PMBuilder>,std::string,std::shared_ptr<quasar::TextTokenizer> &,std::vector<quasar::DataFeed> &,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  unint64_t v8 = operator new(0x258uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::PMBuilder>::__shared_ptr_emplace[abi:ne180100]<std::string,std::shared_ptr<quasar::TextTokenizer> &,std::vector<quasar::DataFeed> &,std::allocator<quasar::PMBuilder>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B1AFAA84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::PMBuilder>::__shared_ptr_emplace[abi:ne180100]<std::string,std::shared_ptr<quasar::TextTokenizer> &,std::vector<quasar::DataFeed> &,std::allocator<quasar::PMBuilder>,0>(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62748;
  std::allocator<quasar::PMBuilder>::construct[abi:ne180100]<quasar::PMBuilder,std::string,std::shared_ptr<quasar::TextTokenizer> &,std::vector<quasar::DataFeed> &>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1B1AFAAFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::PMBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62748;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::PMBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62748;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::PMBuilder>::__on_zero_shared(uint64_t a1)
{
}

void std::allocator<quasar::PMBuilder>::construct[abi:ne180100]<quasar::PMBuilder,std::string,std::shared_ptr<quasar::TextTokenizer> &,std::vector<quasar::DataFeed> &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  std::string::size_type v5 = (std::__shared_weak_count *)a4[1];
  uint64_t v6 = *a4;
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::PMBuilder::PMBuilder(a2, a3, &v6, a5);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1B1AFABF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void quasar::PMBuilder::~PMBuilder(quasar::PMBuilder *this)
{
  std::__tree<std::string>::destroy((uint64_t)this + 552, *((char **)this + 70));
  if (*((char *)this + 551) < 0) {
    operator delete(*((void **)this + 66));
  }
  if (*((char *)this + 527) < 0) {
    operator delete(*((void **)this + 63));
  }
  if (*((char *)this + 503) < 0) {
    operator delete(*((void **)this + 60));
  }
  if (*((char *)this + 479) < 0) {
    operator delete(*((void **)this + 57));
  }
  if (*((char *)this + 455) < 0) {
    operator delete(*((void **)this + 54));
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 407) < 0) {
    operator delete(*((void **)this + 48));
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::string::size_type v5 = (void **)((char *)this + 344);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::string::size_type v5 = (void **)((char *)this + 320);
  std::vector<quasar::RegexReplacementRule>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*((char *)this + 319) < 0) {
    operator delete(*((void **)this + 37));
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 36);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 279) < 0) {
    operator delete(*((void **)this + 32));
  }
  if (*((char *)this + 255) < 0) {
    operator delete(*((void **)this + 29));
  }
  if (*((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  std::string::size_type v5 = (void **)((char *)this + 184);
  std::vector<quasar::DataFeed>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::~__hash_table((uint64_t)this + 144);
  fst::SymbolTable::~SymbolTable((quasar::PMBuilder *)((char *)this + 128));
  fst::SymbolTable::~SymbolTable((quasar::PMBuilder *)((char *)this + 112));
  fst::SymbolTable::~SymbolTable((quasar::PMBuilder *)((char *)this + 96));
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)this + 10);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)this + 8);
  std::string::size_type v5 = (void **)((char *)this + 40);
  std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)this + 3);
  std::string::size_type v5 = (void **)this;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void std::vector<quasar::RegexReplacementRule>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (std::locale *)**a1;
  if (v2)
  {
    uint64_t v4 = (std::locale *)v1[1];
    std::string::size_type v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 11;
        std::allocator<quasar::RegexReplacementRule>::destroy[abi:ne180100](v1 + 16, v4);
      }
      while (v4 != v2);
      std::string::size_type v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::RegexReplacementRule>::destroy[abi:ne180100](int a1, std::locale *this)
{
  if (SHIBYTE(this[10].__locale_) < 0) {
    operator delete(this[8].__locale_);
  }
  locale = this[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)locale);
  }
  std::locale::~locale(this);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::SpokenFormSection>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::SpokenFormSection>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 48);
  std::vector<quasar::SpokenFormLine>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::vector<quasar::SpokenFormLine>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    std::string::size_type v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 112;
        std::allocator<quasar::SpokenFormLine>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      std::string::size_type v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::SpokenFormLine>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void **)(a2 + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 87) < 0) {
    operator delete(*(void **)(a2 + 64));
  }
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*(void **)(a2 + 8));
  }
}

void std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    std::string::size_type v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 16;
      uint64_t v7 = v4 - 16;
      unint64_t v8 = v4 - 16;
      do
      {
        unint64_t v9 = *(void (***)(char *))v8;
        v8 -= 16;
        (*v9)(v7);
        v6 -= 16;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      std::string::size_type v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::allocate_shared[abi:ne180100]<quasar::PMBuilder,std::allocator<quasar::PMBuilder>,std::string,std::shared_ptr<quasar::TextTokenizer> &,std::string,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  unint64_t v8 = operator new(0x258uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::PMBuilder>::__shared_ptr_emplace[abi:ne180100]<std::string,std::shared_ptr<quasar::TextTokenizer> &,std::string,std::allocator<quasar::PMBuilder>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B1AFB168(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::PMBuilder>::__shared_ptr_emplace[abi:ne180100]<std::string,std::shared_ptr<quasar::TextTokenizer> &,std::string,std::allocator<quasar::PMBuilder>,0>(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62748;
  std::allocator<quasar::PMBuilder>::construct[abi:ne180100]<quasar::PMBuilder,std::string,std::shared_ptr<quasar::TextTokenizer> &,std::string>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1B1AFB1E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::PMBuilder>::construct[abi:ne180100]<quasar::PMBuilder,std::string,std::shared_ptr<quasar::TextTokenizer> &,std::string>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  std::string::size_type v5 = (std::__shared_weak_count *)a4[1];
  uint64_t v6 = *a4;
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::PMBuilder::PMBuilder(a2, a3, &v6, a5);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1B1AFB254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteFile(fst *a1, uint64_t a2)
{
  v25[19] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream((uint64_t *)&v20);
      if ((v24[*(void *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        uint64_t v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        std::string::size_type v5 = (void *)fst::cerr(v4);
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        int v7 = *(char *)(a2 + 23);
        if (v7 >= 0) {
          unint64_t v8 = (const std::string::value_type *)a2;
        }
        else {
          unint64_t v8 = *(const std::string::value_type **)a2;
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v9 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v10 = 0;
      }
      else
      {
        char v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string __p = *(std::string *)a2;
        }
        __int16 v16 = 257;
        char v17 = 1;
        char v18 = v13;
        uint64_t v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(void *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA400];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(void *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA400]
                                                                                                  + 24);
      MEMORY[0x1B3EA7CF0](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1B3EA8520](v25);
      return v10;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    goto LABEL_5;
  }
  uint64_t v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  char v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = __p;
  }
  __int16 v21 = 257;
  char v22 = 1;
  char v23 = v12;
  uint64_t v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(void *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1B1AFB584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~VectorFstBaseImpl(void *a1)
{
  *a1 = &unk_1F0A3D280;
  uint64_t v2 = (void **)a1[9];
  if (v2 != (void **)a1[8])
  {
    unint64_t v3 = 0;
    uint64_t v2 = (void **)a1[8];
    do
    {
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(v2[v3++]);
      uint64_t v2 = (void **)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (void)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~VectorFstImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Properties(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~VectorFstBaseImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FD50;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(uint64_t result)
{
  if (*(int *)(*(void *)(result + 8) + 56) >= 2) {
    operator new();
  }
  return result;
}

void sub_1B1AFB8AC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  std::string::size_type v5 = (void *)(a1 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A480;
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v7);
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 1, 0))
  {
    int v8 = fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v8);
  }
  unsigned int v18 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v16);
  while (1)
  {
    if (!v16)
    {
      if ((int)v18 >= v17) {
        goto LABEL_31;
      }
LABEL_11:
      uint64_t v9 = v18;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 16))(v16)) {
      break;
    }
    if (!v16) {
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v16 + 24))();
LABEL_12:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddState((void *)a1);
    **(float **)(*v5 + 8 * (int)v9) = (*(float (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v9);
    unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v9);
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve((void **)(*(void *)(*v5 + 8 * (int)v9) + 24), v10);
    std::string::size_type v15 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a2 + 136))(a2, v9, &__p);
    while (1)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        if (v15 >= __p.__r_.__value_.__r.__words[2]) {
          goto LABEL_24;
        }
LABEL_18:
        uint64_t v11 = (_DWORD *)(__p.__r_.__value_.__l.__size_ + 16 * v15);
        goto LABEL_19;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0])) {
        break;
      }
      if (!__p.__r_.__value_.__r.__words[0]) {
        goto LABEL_18;
      }
      uint64_t v11 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__p.__r_.__value_.__l.__data_ + 32))();
LABEL_19:
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddArc(*(void **)(*v5 + 8 * (int)v9), v11);
      if (__p.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 40))(__p.__r_.__value_.__r.__words[0]);
      }
      else {
        ++v15;
      }
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(void *)__p.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_26;
    }
LABEL_24:
    if (v14) {
      --*v14;
    }
LABEL_26:
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 32))(v16);
    }
    else {
      ++v18;
    }
  }
  if (v16) {
    (*(void (**)(void))(*(void *)v16 + 8))();
  }
LABEL_31:
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(void *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1B1AFBDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~VectorFstBaseImpl(v17);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddState(void *a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  unint64_t v3 = a1[10];
  *(_DWORD *)uint64_t v2 = 2139095040;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + ++*(void *)(result + 24) = 0u;
  *((void *)v2 + 5) = 0;
  uint64_t v4 = (void *)a1[9];
  if ((unint64_t)v4 >= v3)
  {
    uint64_t v6 = a1[8];
    uint64_t v7 = ((uint64_t)v4 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v3 - v6;
    uint64_t v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10) {
      uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 10), v10);
    }
    else {
      uint64_t v11 = 0;
    }
    char v12 = &v11[8 * v7];
    char v13 = &v11[8 * v10];
    *(void *)char v12 = v2;
    std::string::size_type v5 = v12 + 8;
    std::string::size_type v15 = (char *)a1[8];
    char v14 = (char *)a1[9];
    if (v14 != v15)
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }
      while (v14 != v15);
      char v14 = (char *)a1[8];
    }
    a1[8] = v12;
    a1[9] = v5;
    a1[10] = v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *uint64_t v4 = v2;
    std::string::size_type v5 = v4 + 1;
  }
  a1[9] = v5;
  return (((unint64_t)v5 - a1[8]) >> 3) - 1;
}

void fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddArc(void *a1, _DWORD *a2)
{
  if (!*a2) {
    ++a1[1];
  }
  if (!a2[1]) {
    ++a1[2];
  }
  uint64_t v4 = (uint64_t)(a1 + 5);
  unint64_t v5 = a1[5];
  uint64_t v6 = (_OWORD *)a1[4];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = a1[3];
    uint64_t v9 = ((uint64_t)v6 - v8) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12) {
      char v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v4, v12);
    }
    else {
      char v13 = 0;
    }
    char v14 = &v13[16 * v9];
    std::string::size_type v15 = &v13[16 * v12];
    *(_OWORD *)char v14 = *(_OWORD *)a2;
    uint64_t v7 = v14 + 16;
    int v17 = (char *)a1[3];
    uint64_t v16 = (char *)a1[4];
    if (v16 != v17)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)a1[3];
    }
    a1[3] = v14;
    a1[4] = v7;
    a1[5] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    _OWORD *v6 = *(_OWORD *)a2;
    uint64_t v7 = v6 + 1;
  }
  a1[4] = v7;
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFinal(void *a1, int a2, float a3)
{
  unint64_t v5 = *(float **)(a1[8] + 8 * a2);
  float v6 = *v5;
  *unint64_t v5 = a3;
  unint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  uint64_t result = fst::SetFinalProperties<fst::TropicalWeightTpl<float>>(v7, v6, a3);
  a1[1] = a1[1] & 4 | result;
  return result;
}

uint64_t fst::SetFinalProperties<fst::TropicalWeightTpl<float>>(unint64_t a1, float a2, float a3)
{
  if (a2 != INFINITY && a2 != 0.0) {
    a1 &= ~0x100000000uLL;
  }
  if (a3 != INFINITY && a3 != 0.0) {
    a1 = a1 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  return a1 & 0x3FFFFFF0007;
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(void *a1, int a2, float *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1[8] + 8 * a2) + 32);
  if (v6 == *(void *)(*(void *)(a1[8] + 8 * a2) + 24)) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = (_DWORD *)(v6 - 16);
  }
  unint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v8, a2, a3, v7);
  uint64_t v9 = *(void **)(a1[8] + 8 * a2);
  fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddArc(v9, a3);
}

uint64_t fst::AddArcProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(unint64_t a1, int a2, float *a3, _DWORD *a4)
{
  float v4 = *a3;
  int v5 = *((_DWORD *)a3 + 1);
  unint64_t v6 = a1 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*(_DWORD *)a3 == v5) {
    unint64_t v6 = a1;
  }
  unint64_t v7 = v6 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v5) {
    unint64_t v7 = v6 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  }
  if (v4 == 0.0) {
    unint64_t v6 = v7;
  }
  if (!v5) {
    unint64_t v6 = v6 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  }
  if (a4)
  {
    if (*a4 > SLODWORD(v4)) {
      unint64_t v6 = v6 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    }
    if (a4[1] > v5) {
      unint64_t v6 = v6 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
    }
  }
  if (a3[2] != INFINITY && a3[2] != 0.0) {
    unint64_t v6 = v6 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  if (*((_DWORD *)a3 + 3) <= a2) {
    unint64_t v6 = v6 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  }
  if ((v6 & 0x4000000000) != 0) {
    return v6 & 0x5D7FFEB0007 | 0x2800000000;
  }
  else {
    return v6 & 0x5D7FFEB0007;
  }
}

uint64_t TVertex::getInEdge(uint64_t this)
{
  do
    this = *(void *)this;
  while (this && *(unsigned char *)(this + 32));
  return this;
}

uint64_t TVertex::getInEdgeCount(uint64_t **this)
{
  uint64_t v1 = *this;
  if (!*this) {
    return 0;
  }
  while (*((unsigned char *)v1 + 32))
  {
    uint64_t v1 = (uint64_t *)*v1;
    if (!v1) {
      return 0;
    }
  }
  uint64_t result = 0;
LABEL_7:
  ++result;
  while (1)
  {
    uint64_t v1 = (uint64_t *)*v1;
    if (!v1) {
      return result;
    }
    if (!*((unsigned char *)v1 + 32)) {
      goto LABEL_7;
    }
  }
}

uint64_t TVertex::getOutEdge(uint64_t this)
{
  do
    this = *(void *)(this + 8);
  while (this && *(unsigned char *)(this + 32));
  return this;
}

uint64_t TVertex::getOutEdgeCount(TVertex *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  while (*(unsigned char *)(v1 + 32))
  {
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      return 0;
    }
  }
  uint64_t result = 0;
LABEL_7:
  ++result;
  while (1)
  {
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      return result;
    }
    if (!*(unsigned char *)(v1 + 32)) {
      goto LABEL_7;
    }
  }
}

void TGraph::TGraph(TGraph *this, char *a2, TSegmenter *a3, char a4)
{
  *(void *)this = a3;
  *((unsigned char *)this + 8) = a4;
  TAllocator::TAllocator((TGraph *)((char *)this + 16), 2048);
  *((_OWORD *)this + 5) = 0u;
  *((void *)this + 18) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 7) = a2;
  *((void *)this + 9) = 0;
  *((void *)this + 8) = TGraph::addVertex(this, a2);
}

void sub_1B1AFC484(_Unwind_Exception *a1)
{
  unint64_t v6 = *(void **)(v1 + 128);
  if (v6)
  {
    *(void *)(v1 + 136) = v6;
    operator delete(v6);
  }
  TGraph::TGraph(v4, v3, v1);
  TAllocator::clear(v2);
  _Unwind_Resume(a1);
}

uint64_t TGraph::addVertex(TGraph *this, char *a2)
{
  if (a2)
  {
    unint64_t v4 = (unint64_t)&a2[-*((void *)this + 7)];
    uint64_t v5 = *((void *)this + 16);
    if (v4 < (*((void *)this + 17) - v5) >> 3)
    {
      uint64_t v6 = *(void *)(v5 + 8 * v4);
      if (v6)
      {
        *(unsigned char *)(v6 + 32) = 0;
        return v6;
      }
    }
    uint64_t Segment = TSegmenter::getSegment(*(TSegmenter **)this, a2);
    unint64_t v8 = a2;
    if (!Segment || (uint64_t v9 = Segment, v8 = a2, *(_DWORD *)(Segment + 24)))
    {
LABEL_7:
      uint64_t v6 = TAllocator::allocate((TGraph *)((char *)this + 16), 48);
      unint64_t v10 = (char **)((char *)this + 80);
      *(void *)(v6 + 40) = (uint64_t)(*((void *)this + 11) - *((void *)this + 10)) >> 3;
      *(void *)(v6 + 16) = v8;
      *(void *)(v6 + ++*(void *)(result + 24) = a2;
      *(unsigned char *)(v6 + 32) = 0;
      *(void *)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      uint64_t v11 = (uint64_t *)*((void *)this + 11);
      unint64_t v12 = *((void *)this + 12);
      if ((unint64_t)v11 >= v12)
      {
        uint64_t v18 = ((char *)v11 - *v10) >> 3;
        if ((unint64_t)(v18 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v12 - (void)*v10;
        uint64_t v20 = v19 >> 2;
        if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
          uint64_t v20 = v18 + 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21) {
          char v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 96, v21);
        }
        else {
          char v22 = 0;
        }
        long long v31 = (uint64_t *)&v22[8 * v18];
        uint64_t v32 = &v22[8 * v21];
        *long long v31 = v6;
        char v13 = v31 + 1;
        long long v34 = (char *)*((void *)this + 10);
        std::string::size_type v33 = (char *)*((void *)this + 11);
        if (v33 != v34)
        {
          do
          {
            uint64_t v35 = *((void *)v33 - 1);
            v33 -= 8;
            *--long long v31 = v35;
          }
          while (v33 != v34);
          std::string::size_type v33 = *v10;
        }
        *((void *)this + 10) = v31;
        *((void *)this + 11) = v13;
        *((void *)this + 12) = v32;
        if (v33) {
          operator delete(v33);
        }
      }
      else
      {
        *uint64_t v11 = v6;
        char v13 = v11 + 1;
      }
      *((void *)this + 11) = v13;
      TGraph::setMap(this, (TVertex *)v6);
      uint64_t v36 = *((void *)this + 9);
      if (!v36 || *(void *)(v36 + 24) < (unint64_t)a2) {
        *((void *)this + 9) = v6;
      }
      return v6;
    }
    unint64_t v8 = a2;
    while (1)
    {
      int v28 = **(_DWORD **)v9;
      {
        operator new();
      }
      if (v28 <= 8202)
      {
        if (v28 != 32 && v28 != 160) {
          goto LABEL_38;
        }
      }
      else if (v28 != 8203 && v28 != 12288 && v28 != 65279)
      {
LABEL_38:
        if (*((unsigned char *)this + 8)) {
          goto LABEL_7;
        }
      }
      unint64_t v8 = *(char **)(v9 + 8);
      uint64_t v30 = TSegmenter::getSegment(*(TSegmenter **)this, v8);
      if (v30)
      {
        uint64_t v9 = v30;
        if (!*(_DWORD *)(v30 + 24)) {
          continue;
        }
      }
      goto LABEL_7;
    }
  }
  uint64_t v6 = TAllocator::allocate((TGraph *)((char *)this + 16), 48);
  char v14 = (char **)((char *)this + 80);
  *(void *)(v6 + 40) = (uint64_t)(*((void *)this + 11) - *((void *)this + 10)) >> 3;
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(unsigned char *)(v6 + 32) = 0;
  std::string::size_type v15 = (uint64_t *)*((void *)this + 11);
  unint64_t v16 = *((void *)this + 12);
  if ((unint64_t)v15 >= v16)
  {
    uint64_t v23 = ((char *)v15 - *v14) >> 3;
    if ((unint64_t)(v23 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v24 = v16 - (void)*v14;
    uint64_t v25 = v24 >> 2;
    if (v24 >> 2 <= (unint64_t)(v23 + 1)) {
      uint64_t v25 = v23 + 1;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v25;
    }
    if (v26) {
      int v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 96, v26);
    }
    else {
      int v27 = 0;
    }
    BOOL v37 = (uint64_t *)&v27[8 * v23];
    uint64_t v38 = &v27[8 * v26];
    *BOOL v37 = v6;
    int v17 = v37 + 1;
    unint64_t v40 = (char *)*((void *)this + 10);
    unint64_t v39 = (char *)*((void *)this + 11);
    if (v39 != v40)
    {
      do
      {
        uint64_t v41 = *((void *)v39 - 1);
        v39 -= 8;
        *--BOOL v37 = v41;
      }
      while (v39 != v40);
      unint64_t v39 = *v14;
    }
    *((void *)this + 10) = v37;
    *((void *)this + 11) = v17;
    *((void *)this + 12) = v38;
    if (v39) {
      operator delete(v39);
    }
  }
  else
  {
    *std::string::size_type v15 = v6;
    int v17 = v15 + 1;
  }
  *((void *)this + 11) = v17;
  return v6;
}

void sub_1B1AFC818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void TGraph::~TGraph(TGraph *this)
{
  uint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 13);
  if (v3)
  {
    *((void *)this + 14) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 10);
  if (v4)
  {
    *((void *)this + 11) = v4;
    operator delete(v4);
  }
  TAllocator::clear((TGraph *)((char *)this + 16));
}

uint64_t TGraph::getVertex(TGraph *this, const char *a2)
{
  unint64_t v2 = (unint64_t)&a2[-*((void *)this + 7)];
  uint64_t v3 = *((void *)this + 16);
  if (v2 >= (*((void *)this + 17) - v3) >> 3) {
    return 0;
  }
  else {
    return *(void *)(v3 + 8 * v2);
  }
}

void TGraph::setMap(TGraph *this, TVertex *a2)
{
  unint64_t v4 = (uint64_t *)((char *)this + 128);
  uint64_t v3 = *((void *)this + 16);
  unint64_t v5 = *((void *)a2 + 3) - *((void *)this + 7);
  if (v5 >= (*((void *)this + 17) - v3) >> 3)
  {
    if (2 * v5 <= 0x100) {
      unint64_t v6 = 256;
    }
    else {
      unint64_t v6 = 2 * v5;
    }
    uint64_t v7 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)this + 128, v6, &v7);
    uint64_t v3 = *v4;
  }
  *(void *)(v3 + 8 * v5) = a2;
}

void TGraph::deleteVertex(TGraph *this, TVertex *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (v2)
  {
    while (*(unsigned char *)(v2 + 32))
    {
      uint64_t v2 = *(void *)(v2 + 8);
      if (!v2) {
        goto LABEL_4;
      }
    }
LABEL_8:
    *(unsigned char *)(v2 + 32) = 1;
    while (1)
    {
      uint64_t v2 = *(void *)(v2 + 8);
      if (!v2) {
        break;
      }
      if (!*(unsigned char *)(v2 + 32)) {
        goto LABEL_8;
      }
    }
  }
LABEL_4:
  uint64_t v3 = *(uint64_t **)a2;
  if (*(void *)a2)
  {
    while (*((unsigned char *)v3 + 32))
    {
      uint64_t v3 = (uint64_t *)*v3;
      if (!v3) {
        goto LABEL_7;
      }
    }
LABEL_12:
    *((unsigned char *)v3 + 32) = 1;
    while (1)
    {
      uint64_t v3 = (uint64_t *)*v3;
      if (!v3) {
        break;
      }
      if (!*((unsigned char *)v3 + 32)) {
        goto LABEL_12;
      }
    }
  }
LABEL_7:
  *((unsigned char *)a2 + 32) = 1;
}

void TGraph::deleteEdge(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 32) = 1;
}

uint64_t TGraph::getNextVertex(TGraph *this, unint64_t a2)
{
  unint64_t v2 = *((void *)this + 7);
  if (v2 > a2) {
    return *((void *)this + 8);
  }
  unint64_t v4 = *(void *)(*((void *)this + 9) + 24);
  if (v4 < a2) {
    return 0;
  }
  for (uint64_t i = (uint64_t *)(*((void *)this + 16) - 8 * v2 + 8 * a2); ; ++i)
  {
    uint64_t result = *i;
    if (*i) {
      break;
    }
    if (++a2 > v4) {
      return 0;
    }
  }
  return result;
}

uint64_t TGraph::getPrevVertex(TGraph *this, unint64_t a2)
{
  unint64_t v2 = *((void *)this + 7);
  if (v2 > a2) {
    return 0;
  }
  uint64_t result = *((void *)this + 9);
  if (*(void *)(result + 24) >= a2)
  {
    for (uint64_t i = (uint64_t *)(*((void *)this + 16) - 8 * v2 + 8 * a2); ; --i)
    {
      uint64_t result = *i;
      if (*i) {
        break;
      }
      if (--a2 < v2) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t TGraph::addEdge(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v9 = (uint64_t *)(a2 + 8);
  for (uint64_t i = *(void *)(a2 + 8); i; uint64_t i = *(void *)(i + 8))
  {
    if (!*(unsigned char *)(i + 32)) {
      break;
    }
  }
  if (*(_DWORD *)a4 != 5)
  {
    uint64_t v10 = 0;
    if (!i || *(_DWORD *)a4 == 2) {
      goto LABEL_22;
    }
    uint64_t v10 = 0;
LABEL_9:
    uint64_t v11 = i;
    int v12 = *(_DWORD *)(i + 48);
    if (v12 != 2 && v12 != 5)
    {
      int v14 = wcscmp(**(const __int32 ***)(a4 + 8), **(const __int32 ***)(v11 + 56));
      if (v14 < 0) {
        goto LABEL_22;
      }
      if (!v14 && *(uint64_t **)(v11 + 24) == a3 && *(unsigned __int8 *)(a4 + 24) == *(unsigned __int8 *)(v11 + 72)) {
        return v11;
      }
    }
    uint64_t i = v11;
    while (1)
    {
      uint64_t i = *(void *)(i + 8);
      if (!i) {
        break;
      }
      if (!*(unsigned char *)(i + 32))
      {
        uint64_t v10 = v11;
        goto LABEL_9;
      }
    }
    uint64_t v10 = v11;
    goto LABEL_22;
  }
  uint64_t v10 = 0;
LABEL_22:
  uint64_t v11 = TAllocator::allocate((TAllocator *)(a1 + 2), 80);
  std::string::size_type v15 = (char **)(a1 + 13);
  uint64_t v16 = (uint64_t)(a1[14] - a1[13]) >> 3;
  *(_DWORD *)(v11 + 48) = 3;
  *(void *)(v11 + 56) = 0;
  *(void *)(v11 + 64) = 0;
  *(unsigned char *)(v11 + 72) = 0;
  *(void *)(v11 + 40) = v16;
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + ++*(void *)(result + 24) = a3;
  *(unsigned char *)(v11 + 32) = 0;
  *(void *)uint64_t v11 = 0;
  *(void *)(v11 + 8) = 0;
  long long v17 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v11 + 48) = *(_OWORD *)a4;
  *(_OWORD *)(v11 + 64) = v17;
  uint64_t v18 = (uint64_t *)a1[14];
  unint64_t v19 = a1[15];
  if ((unint64_t)v18 >= v19)
  {
    uint64_t v21 = ((char *)v18 - *v15) >> 3;
    if ((unint64_t)(v21 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = v19 - (void)*v15;
    uint64_t v23 = v22 >> 2;
    if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
      uint64_t v23 = v21 + 1;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v23;
    }
    if (v24) {
      uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 15), v24);
    }
    else {
      uint64_t v25 = 0;
    }
    unint64_t v26 = (uint64_t *)&v25[8 * v21];
    int v27 = &v25[8 * v24];
    *unint64_t v26 = v11;
    uint64_t v20 = v26 + 1;
    BOOL v29 = (char *)a1[13];
    int v28 = (char *)a1[14];
    if (v28 != v29)
    {
      do
      {
        uint64_t v30 = *((void *)v28 - 1);
        v28 -= 8;
        *--unint64_t v26 = v30;
      }
      while (v28 != v29);
      int v28 = *v15;
    }
    a1[13] = v26;
    a1[14] = v20;
    a1[15] = v27;
    if (v28) {
      operator delete(v28);
    }
  }
  else
  {
    *uint64_t v18 = v11;
    uint64_t v20 = v18 + 1;
  }
  a1[14] = v20;
  long long v31 = (uint64_t *)(v10 + 8);
  if (!v10) {
    long long v31 = v9;
  }
  *(void *)(v11 + 8) = *v31;
  *long long v31 = v11;
  *(void *)uint64_t v11 = *a3;
  *a3 = v11;
  return v11;
}

void TGraph::topologicalSort(void *a1, void **a2, uint64_t a3)
{
  std::vector<unsigned long>::vector(__p, (uint64_t)(a1[11] - a1[10]) >> 3);
  unint64_t v6 = (uint64_t ***)a1[10];
  unint64_t v7 = 0;
  uint64_t v8 = a1[11] - (void)v6;
  if (v8)
  {
    unint64_t v9 = v8 >> 3;
    uint64_t v10 = (uint64_t *)__p[0];
    if (v9 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v9;
    }
    do
    {
      if (!*((unsigned char *)*v6 + 32))
      {
        ++v7;
        *uint64_t v10 = TVertex::getInEdgeCount(*v6);
      }
      ++v6;
      ++v10;
      --v11;
    }
    while (v11);
  }
  a2[1] = *a2;
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(a2, v7);
  unint64_t v12 = (unint64_t)a2[2];
  char v13 = (char *)a2[1];
  if ((unint64_t)v13 >= v12)
  {
    uint64_t v15 = (v13 - (unsigned char *)*a2) >> 3;
    if ((unint64_t)(v15 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = v12 - (void)*a2;
    uint64_t v17 = v16 >> 2;
    if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
      uint64_t v17 = v15 + 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v17;
    }
    if (v18) {
      unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 2), v18);
    }
    else {
      unint64_t v19 = 0;
    }
    uint64_t v20 = &v19[8 * v15];
    uint64_t v21 = &v19[8 * v18];
    *(void *)uint64_t v20 = a1[8];
    int v14 = v20 + 8;
    uint64_t v23 = (char *)*a2;
    uint64_t v22 = (char *)a2[1];
    if (v22 != *a2)
    {
      do
      {
        uint64_t v24 = *((void *)v22 - 1);
        v22 -= 8;
        *((void *)v20 - 1) = v24;
        v20 -= 8;
      }
      while (v22 != v23);
      uint64_t v22 = (char *)*a2;
    }
    *a2 = v20;
    a2[1] = v14;
    a2[2] = v21;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    *(void *)char v13 = a1[8];
    int v14 = v13 + 8;
  }
  a2[1] = v14;
  uint64_t v25 = *a2;
  if (v14 != *a2)
  {
    unint64_t v26 = 0;
    do
    {
      uint64_t v27 = v25[v26];
      if (a3) {
        (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a3 + 24))(a3, v27, a1);
      }
      while (1)
      {
        uint64_t v27 = *(void *)(v27 + 8);
        if (!v27) {
          break;
        }
        if (!*(unsigned char *)(v27 + 32))
        {
LABEL_47:
          if (a3) {
            (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a3 + 16))(a3, v27, a1);
          }
          uint64_t v37 = *(void *)(v27 + 24);
          uint64_t v38 = __p[0];
          --*((void *)__p[0] + *(void *)(v37 + 40));
          if (!v38[*(void *)(v37 + 40)])
          {
            unint64_t v40 = (char *)a2[1];
            unint64_t v39 = (unint64_t)a2[2];
            if ((unint64_t)v40 >= v39)
            {
              uint64_t v41 = (v40 - (unsigned char *)*a2) >> 3;
              if ((unint64_t)(v41 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v28 = v39 - (void)*a2;
              uint64_t v29 = v28 >> 2;
              if (v28 >> 2 <= (unint64_t)(v41 + 1)) {
                uint64_t v29 = v41 + 1;
              }
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v30 = v29;
              }
              if (v30) {
                long long v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 2), v30);
              }
              else {
                long long v31 = 0;
              }
              uint64_t v32 = &v31[8 * v41];
              *(void *)uint64_t v32 = v37;
              std::string::size_type v33 = v32 + 8;
              uint64_t v35 = (char *)*a2;
              long long v34 = (char *)a2[1];
              if (v34 != *a2)
              {
                do
                {
                  uint64_t v36 = *((void *)v34 - 1);
                  v34 -= 8;
                  *((void *)v32 - 1) = v36;
                  v32 -= 8;
                }
                while (v34 != v35);
                long long v34 = (char *)*a2;
              }
              *a2 = v32;
              a2[1] = v33;
              a2[2] = &v31[8 * v30];
              if (v34) {
                operator delete(v34);
              }
            }
            else
            {
              *(void *)unint64_t v40 = v37;
              std::string::size_type v33 = v40 + 8;
            }
            a2[1] = v33;
          }
          while (1)
          {
            uint64_t v27 = *(void *)(v27 + 8);
            if (!v27) {
              goto LABEL_54;
            }
            if (!*(unsigned char *)(v27 + 32)) {
              goto LABEL_47;
            }
          }
        }
      }
LABEL_54:
      ++v26;
      uint64_t v25 = *a2;
    }
    while (v26 < ((unsigned char *)a2[1] - (unsigned char *)*a2) >> 3);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B1AFCFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void TGraph::minimize(TGraph *this)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  TGraph::topologicalSort(this, (void **)&v16, 0);
  unint64_t v2 = v16;
  uint64_t v3 = v17;
  if (v17 == (unsigned char *)v16)
  {
    unint64_t v2 = v17;
    if (!v17) {
      return;
    }
    goto LABEL_42;
  }
  unint64_t v4 = 0;
  do
  {
    uint64_t v5 = v2[v4];
    if (!*(unsigned char *)(v5 + 32))
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6)
      {
        while (*(unsigned char *)(v6 + 32))
        {
          uint64_t v6 = *(void *)(v6 + 8);
          if (!v6) {
            goto LABEL_40;
          }
        }
LABEL_8:
        int v7 = *(_DWORD *)(v6 + 48);
        if (v7 != 2 && v7 != 5)
        {
          uint64_t v9 = v6;
          do
          {
            uint64_t v9 = *(void *)(v9 + 8);
            if (!v9) {
              goto LABEL_13;
            }
          }
          while (*(unsigned char *)(v9 + 32));
          while (1)
          {
            int v10 = *(_DWORD *)(v9 + 48);
            BOOL v11 = v10 == 2 || v10 == 5;
            if (!v11 && !wcscmp(**(const __int32 ***)(v6 + 56), **(const __int32 ***)(v9 + 56)))
            {
              uint64_t v12 = *(void *)(v6 + 24);
              uint64_t v13 = *(void *)(v9 + 24);
              if (v12 == v13)
              {
                *(unsigned char *)(v9 + 32) = 1;
              }
              else if (*(void *)(v12 + 16) == *(void *)(v13 + 16) && TVertex::getInEdgeCount((uint64_t **)v12) == 1)
              {
                int v14 = (TGraph *)TVertex::getInEdgeCount((uint64_t **)v13);
                if (v14 == (TGraph *)1)
                {
                  uint64_t v15 = *(void *)(v13 + 8);
                  if (v15)
                  {
                    while (*(unsigned char *)(v15 + 32))
                    {
                      uint64_t v15 = *(void *)(v15 + 8);
                      if (!v15) {
                        goto LABEL_33;
                      }
                    }
LABEL_35:
                    int v14 = (TGraph *)TGraph::addEdge(this, *(void *)(v6 + 24), *(uint64_t **)(v15 + 24), v15 + 48);
                    while (1)
                    {
                      uint64_t v15 = *(void *)(v15 + 8);
                      if (!v15) {
                        break;
                      }
                      if (!*(unsigned char *)(v15 + 32)) {
                        goto LABEL_35;
                      }
                    }
                  }
LABEL_33:
                  TGraph::deleteVertex(v14, (TVertex *)v13);
                }
              }
            }
            do
            {
              uint64_t v9 = *(void *)(v9 + 8);
              if (!v9) {
                goto LABEL_13;
              }
            }
            while (*(unsigned char *)(v9 + 32));
          }
        }
LABEL_13:
        while (1)
        {
          uint64_t v6 = *(void *)(v6 + 8);
          if (!v6) {
            break;
          }
          if (!*(unsigned char *)(v6 + 32)) {
            goto LABEL_8;
          }
        }
        unint64_t v2 = v16;
        uint64_t v3 = v17;
      }
    }
LABEL_40:
    ++v4;
  }
  while (v4 < (v3 - (unsigned char *)v2) >> 3);
  if (v2)
  {
LABEL_42:
    uint64_t v17 = v2;
    operator delete(v2);
  }
}

void sub_1B1AFD1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void TLocaleInfo::TLocaleInfo(TLocaleInfo *this)
{
  *(void *)this = "e";
  *((unsigned char *)this + 80) = wcscmp((const __int32 *)"e", (const __int32 *)"t") == 0;
  *((void *)this + 1) = "U";
  *((_DWORD *)this + 16) = 2;
  *((void *)this + 9) = 4;
}

void sub_1B1AFD238(_Unwind_Exception *a1)
{
  TCollation::~TCollation(v1);
  _Unwind_Resume(a1);
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = a1[1];
    unint64_t v5 = v4 + a2;
    a1[1] = v4 + a2;
    if (v4)
    {
      unint64_t v6 = v5 - 1;
      if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v10 = *a1 + 8 * (v4 >> 6);
        int v11 = v4 & 0x3F;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v10, a2);
        return a1;
      }
    }
    else
    {
      unint64_t v6 = v5 - 1;
    }
    unint64_t v7 = v6 >> 6;
    if (v5 >= 0x41) {
      unint64_t v8 = v7;
    }
    else {
      unint64_t v8 = 0;
    }
    *(void *)(*a1 + 8 * v8) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B1AFD350(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(kaldi::nnet1::RecurrentBaseComponent *this, uint64_t *a2)
{
  *(void *)this = &unk_1F0A4BB48;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = &unk_1F0A49B30;
  *((_DWORD *)this + 10) = 1;
  uint64_t v2 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v2 - 24)) = a2[1];
  *(_OWORD *)((char *)this + 56) = xmmword_1B255E480;
  *((_DWORD *)this + 18) = -1082130432;
  *(void *)((char *)this + --*(_DWORD *)(a9 + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((unsigned char *)this + 86) = 0;
  *((void *)this + 6) = &unk_1F0A4DB38;
  *((void *)this + 11) = &unk_1F0A4DB58;
  *((void *)this + 12) = 0x100000001;
  double result = 0.0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((void *)this + 19) = 0;
  return result;
}

double kaldi::nnet1::BidirectionalRecurrentComponent::BidirectionalRecurrentComponent(kaldi::nnet1::BidirectionalRecurrentComponent *this, int a2, int a3)
{
  *((_DWORD *)this + 94) = a2;
  *((_DWORD *)this + 95) = a3;
  *((_WORD *)this + 192) = 0;
  *((void *)this + 50) = 0;
  *((void *)this + 51) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 46) = &unk_1F0A4BA20;
  *((void *)this + 52) = &unk_1F0A4A6D0;
  *(_OWORD *)((char *)this + 4++*(void *)(result + 24) = xmmword_1B255E480;
  *((void *)this + 55) = 0x3BF800000;
  *((_DWORD *)this + 112) = 1;
  *((_WORD *)this + 226) = 0;
  *((unsigned char *)this + 454) = 0;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(this, (uint64_t *)&off_1F0A325B8);
  *(void *)uint64_t v3 = off_1F0A4E588;
  *(void *)(v3 + 368) = off_1F0A4E848;
  *(void *)(v3 + 160) = &unk_1F0A4E6E8;
  *(void *)(v3 + 168) = &unk_1F0A4E710;
  double result = 0.0;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 2++*(void *)(result + 24) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 1--*(_DWORD *)(a9 + 76) = 0u;
  *(_OWORD *)(v3 + 345) = 0u;
  return result;
}

void sub_1B1AFD60C(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

kaldi::nnet1::BidirectionalRecurrentComponent *kaldi::nnet1::BidirectionalRecurrentComponent::BidirectionalRecurrentComponent(kaldi::nnet1::BidirectionalRecurrentComponent *this, const std::string *a2)
{
  *((void *)this + 47) = *(std::string::size_type *)((char *)&a2->__r_.__value_.__l.__size_
                                                     + *(void *)(a2->__r_.__value_.__r.__words[0] - 24));
  *((_WORD *)this + 192) = 0;
  *((void *)this + 50) = 0;
  *((void *)this + 51) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 46) = &unk_1F0A4BA20;
  *((void *)this + 52) = &unk_1F0A4A6D0;
  *(_OWORD *)((char *)this + 4++*(void *)(result + 24) = xmmword_1B255E480;
  *((_DWORD *)this + 110) = -1082130432;
  *(void *)((char *)this + 444) = 0x100000003;
  *((_WORD *)this + 226) = 0;
  *((unsigned char *)this + 454) = 0;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(this, (uint64_t *)&off_1F0A325B8);
  *(void *)this = off_1F0A4E588;
  *((void *)this + 46) = off_1F0A4E848;
  *((void *)this + 20) = &unk_1F0A4E6E8;
  *((void *)this + 21) = &unk_1F0A4E710;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((void *)this + 44) = 0;
  std::string::operator=((std::string *)this + 8, a2 + 8);
  std::string::size_type v4 = a2[7].__r_.__value_.__l.__size_ + *(void *)(*(void *)a2[7].__r_.__value_.__l.__size_ - 24);
  unint64_t v5 = (void *)(*(uint64_t (**)(std::string::size_type))(*(void *)v4 + 16))(v4);
  if (v5) {
  *((void *)this + 22) = v5;
  }
  std::string::size_type v6 = a2[7].__r_.__value_.__r.__words[2] + *(void *)(*(void *)a2[7].__r_.__value_.__r.__words[2] - 24);
  unint64_t v7 = (void *)(*(uint64_t (**)(std::string::size_type))(*(void *)v6 + 16))(v6);
  if (v7) {
  *((void *)this + 23) = v7;
  }
  *((unsigned char *)this + 360) = 0;
  return this;
}

void sub_1B1AFD90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v12);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable8BitComponentItf>(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 176);
  if (v2)
  {
    std::string::size_type v4 = *(const void **)(a1 + 184);
    if (!v4)
    {
      if (v3)
      {
LABEL_11:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v6);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v6, "Backward RNN is not quantizable");
LABEL_12:
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v6);
      }
      goto LABEL_10;
    }
  }
  else
  {
    std::string::size_type v4 = *(const void **)(a1 + 184);
    if (!v4) {
      goto LABEL_10;
    }
    uint64_t v3 = 0;
  }
  if (v3)
  {
    if (v5) {
      operator new();
    }
    goto LABEL_11;
  }
LABEL_10:
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v6);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(&v6, "Forward RNN is not quantizable");
  goto LABEL_12;
}

void sub_1B1AFDC84(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40DD337325);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized8Bit(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
}

void kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 176);
  if (v2)
  {
    std::string::size_type v4 = *(const void **)(a1 + 184);
    if (!v4)
    {
      if (v3)
      {
LABEL_11:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v6);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v6, "Backward RNN is not quantizable");
LABEL_12:
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v6);
      }
      goto LABEL_10;
    }
  }
  else
  {
    std::string::size_type v4 = *(const void **)(a1 + 184);
    if (!v4) {
      goto LABEL_10;
    }
    uint64_t v3 = 0;
  }
  if (v3)
  {
    if (v5) {
      operator new();
    }
    goto LABEL_11;
  }
LABEL_10:
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v6);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(&v6, "Forward RNN is not quantizable");
  goto LABEL_12;
}

void sub_1B1AFDF90(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40DD337325);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized16Bit(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
}

void kaldi::nnet1::BidirectionalRecurrentComponent::InitData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::string v67 = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  long long v6 = a2 + 4;
  unint64_t v7 = (std::string::size_type *)(a1 + 192);
  while (1)
  {
    if ((*((unsigned char *)v6 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_32;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v67);
    if ((SHIBYTE(v69) & 0x80000000) == 0) {
      break;
    }
    if (v68 != 24
      || (*v67 == 0x657272756365523CLL ? (BOOL v10 = v67[1] == 0x6E6F706D6F43746ELL) : (BOOL v10 = 0),
          v10 ? (BOOL v11 = v67[2] == 0x3E65707954746E65) : (BOOL v11 = 0),
          !v11))
    {
      if (v68 == 12)
      {
        uint64_t v12 = (void **)v67;
        goto LABEL_27;
      }
LABEL_73:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
      std::string::size_type v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Unknown token ", 14);
      if (v69 >= 0) {
        long long v34 = &v67;
      }
      else {
        long long v34 = (void **)v67;
      }
      if (v69 >= 0) {
        uint64_t v35 = HIBYTE(v69);
      }
      else {
        uint64_t v35 = v68;
      }
      uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
      uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)", a typo in config?", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" (RecurrentComponentType)", 25);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v66);
    }
LABEL_22:
    kaldi::ReadToken(a2, 0, (uint64_t)v7);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if (HIBYTE(v69) == 24)
  {
    if (v67 != (void *)0x657272756365523CLL || v68 != 0x6E6F706D6F43746ELL || v69 != 0x3E65707954746E65) {
      goto LABEL_73;
    }
    goto LABEL_22;
  }
  if (HIBYTE(v69) != 12) {
    goto LABEL_73;
  }
  uint64_t v12 = &v67;
LABEL_27:
  uint64_t v13 = (uint64_t)*v12;
  int v14 = *((_DWORD *)v12 + 2);
  if (v13 != 0x6E6F706D6F432F3CLL || v14 != 1047817829) {
    goto LABEL_73;
  }
LABEL_32:
  uint64_t v16 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType(v7);
  __s1 = 0;
  size_t __n = 0;
  uint64_t v65 = 0;
  kaldi::ReadToken(a2, 0, (uint64_t)&__s1);
  uint64_t v62 = 0;
  uint64_t v17 = HIBYTE(v65);
  if (v65 >= 0) {
    size_t v18 = HIBYTE(v65);
  }
  else {
    size_t v18 = __n;
  }
  uint64_t v19 = *(unsigned __int8 *)(a1 + 215);
  int v20 = (char)v19;
  if ((v19 & 0x80u) != 0) {
    uint64_t v19 = *(void *)(a1 + 200);
  }
  if (v18 != v19)
  {
LABEL_80:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
    uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"you defined two different recurrent component types ", 52);
    int v39 = *(char *)(a1 + 215);
    if (v39 >= 0) {
      uint64_t v40 = (uint64_t)v7;
    }
    else {
      uint64_t v40 = *(void *)(a1 + 192);
    }
    if (v39 >= 0) {
      uint64_t v41 = *(unsigned __int8 *)(a1 + 215);
    }
    else {
      uint64_t v41 = *(void *)(a1 + 200);
    }
    long long v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v40, v41);
    long long v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" vs ", 4);
    if (v65 >= 0) {
      p_s1 = &__s1;
    }
    else {
      p_s1 = __s1;
    }
    if (v65 >= 0) {
      size_t v45 = HIBYTE(v65);
    }
    else {
      size_t v45 = __n;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)p_s1, v45);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v66);
  }
  if (v20 >= 0) {
    uint64_t v21 = (unsigned __int8 *)v7;
  }
  else {
    uint64_t v21 = (unsigned __int8 *)*v7;
  }
  if (v65 < 0)
  {
    if (memcmp(__s1, v21, __n)) {
      goto LABEL_80;
    }
  }
  else if (HIBYTE(v65))
  {
    uint64_t v22 = &__s1;
    while (*(unsigned __int8 *)v22 == *v21)
    {
      uint64_t v22 = (void **)((char *)v22 + 1);
      ++v21;
      if (!--v17) {
        goto LABEL_48;
      }
    }
    goto LABEL_80;
  }
LABEL_48:
  kaldi::ExpectToken(a2, 0, "<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v62 + 4);
  kaldi::ExpectToken(a2, 0, "<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v62);
  kaldi::nnet1::Component::NewComponentOfType(v16);
  if (!v23)
  {
    *(void *)(a1 + 1--*(_DWORD *)(a9 + 76) = 0;
LABEL_107:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
    long long v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"this is not a recurrent component, initialization failed, you used ", 67);
    int v55 = *(char *)(a1 + 215);
    if (v55 >= 0) {
      uint64_t v56 = (uint64_t)v7;
    }
    else {
      uint64_t v56 = *(void *)(a1 + 192);
    }
    if (v55 >= 0) {
      uint64_t v57 = *(unsigned __int8 *)(a1 + 215);
    }
    else {
      uint64_t v57 = *(void *)(a1 + 200);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, v56, v57);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v66);
  }
  *(void *)(a1 + 1--*(_DWORD *)(a9 + 76) = v24;
  if (!v24) {
    goto LABEL_107;
  }
  (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)&v24[*(void *)(*(void *)v24 - 24)] + 96))(&v24[*(void *)(*(void *)v24 - 24)], a2, a3);
  kaldi::ReadToken(a2, 0, (uint64_t)&__s1);
  uint64_t v25 = HIBYTE(v65);
  if (v65 >= 0) {
    size_t v26 = HIBYTE(v65);
  }
  else {
    size_t v26 = __n;
  }
  uint64_t v27 = *(unsigned __int8 *)(a1 + 215);
  int v28 = (char)v27;
  if ((v27 & 0x80u) != 0) {
    uint64_t v27 = *(void *)(a1 + 200);
  }
  if (v26 != v27) {
    goto LABEL_93;
  }
  if (v28 >= 0) {
    uint64_t v29 = (unsigned __int8 *)v7;
  }
  else {
    uint64_t v29 = (unsigned __int8 *)*v7;
  }
  if (v65 < 0)
  {
    if (memcmp(__s1, v29, __n)) {
      goto LABEL_93;
    }
  }
  else if (HIBYTE(v65))
  {
    unint64_t v30 = &__s1;
    while (*(unsigned __int8 *)v30 == *v29)
    {
      unint64_t v30 = (void **)((char *)v30 + 1);
      ++v29;
      if (!--v25) {
        goto LABEL_66;
      }
    }
LABEL_93:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
    std::string::size_type v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"you defined two different recurrent component types ", 52);
    int v47 = *(char *)(a1 + 215);
    if (v47 >= 0) {
      uint64_t v48 = (uint64_t)v7;
    }
    else {
      uint64_t v48 = *(void *)(a1 + 192);
    }
    if (v47 >= 0) {
      uint64_t v49 = *(unsigned __int8 *)(a1 + 215);
    }
    else {
      uint64_t v49 = *(void *)(a1 + 200);
    }
    uint64_t v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, v48, v49);
    unsigned int v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" vs ", 4);
    if (v65 >= 0) {
      std::string::size_type v52 = &__s1;
    }
    else {
      std::string::size_type v52 = __s1;
    }
    if (v65 >= 0) {
      size_t v53 = HIBYTE(v65);
    }
    else {
      size_t v53 = __n;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v66);
  }
LABEL_66:
  kaldi::ExpectToken(a2, 0, "<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v62 + 4);
  kaldi::ExpectToken(a2, 0, "<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v62);
  kaldi::nnet1::Component::NewComponentOfType(v16);
  if (!v31)
  {
    *(void *)(a1 + 184) = 0;
LABEL_115:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
    float v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"this is not a recurrent component, initialization failed, you used ", 67);
    int v59 = *(char *)(a1 + 215);
    if (v59 >= 0) {
      uint64_t v60 = (uint64_t)v7;
    }
    else {
      uint64_t v60 = *(void *)(a1 + 192);
    }
    if (v59 >= 0) {
      uint64_t v61 = *(unsigned __int8 *)(a1 + 215);
    }
    else {
      uint64_t v61 = *(void *)(a1 + 200);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v60, v61);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v66);
  }
  *(void *)(a1 + 184) = v32;
  if (!v32) {
    goto LABEL_115;
  }
  (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)&v32[*(void *)(*(void *)v32 - 24)] + 96))(&v32[*(void *)(*(void *)v32 - 24)], a2, a3);
  (*(void (**)(uint64_t))(*(void *)a1 + 128))(a1);
  if (SHIBYTE(v65) < 0) {
    operator delete(__s1);
  }
  if (SHIBYTE(v69) < 0) {
    operator delete(v67);
  }
}

void sub_1B1AFE6A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 81) < 0) {
    operator delete(*(void **)(v1 - 104));
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::InitData(void *a1, uint64_t *a2, uint64_t a3)
{
}

void kaldi::nnet1::BidirectionalRecurrentComponent::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  for (uint64_t i = (uint64_t)(a1 + 24); ; kaldi::ReadToken(a2, a3, i))
  {
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_32;
    }
    kaldi::ReadToken(a2, a3, (uint64_t)&v25);
    if ((SHIBYTE(v27) & 0x80000000) == 0) {
      break;
    }
    if (v26 != 24
      || (*v25 == 0x657272756365523CLL ? (BOOL v11 = v25[1] == 0x6E6F706D6F43746ELL) : (BOOL v11 = 0),
          v11 ? (BOOL v12 = v25[2] == 0x3E65707954746E65) : (BOOL v12 = 0),
          !v12))
    {
      if (v26 == 12)
      {
        uint64_t v13 = (void **)v25;
        goto LABEL_27;
      }
LABEL_39:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
      uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Unrecognized token ", 19);
      if (v27 >= 0) {
        uint64_t v22 = &v25;
      }
      else {
        uint64_t v22 = (void **)v25;
      }
      if (v27 >= 0) {
        uint64_t v23 = HIBYTE(v27);
      }
      else {
        uint64_t v23 = v26;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
    }
LABEL_22:
    ;
  }
  if (HIBYTE(v27) == 24)
  {
    if (v25 != (void *)0x657272756365523CLL || v26 != 0x6E6F706D6F43746ELL || v27 != 0x3E65707954746E65) {
      goto LABEL_39;
    }
    goto LABEL_22;
  }
  if (HIBYTE(v27) != 12) {
    goto LABEL_39;
  }
  uint64_t v13 = &v25;
LABEL_27:
  uint64_t v14 = (uint64_t)*v13;
  int v15 = *((_DWORD *)v13 + 2);
  if (v14 != 0x6E6F706D6F432F3CLL || v15 != 1047817829) {
    goto LABEL_39;
  }
LABEL_32:
  uint64_t v17 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v17)
  {
    a1[22] = 0;
LABEL_47:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"forward component is not an RNN", 31);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
  }
  a1[22] = v18;
  if (!v18) {
    goto LABEL_47;
  }
  kaldi::ExpectToken(a2, a3, "</Component>");
  uint64_t v19 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v19)
  {
    a1[23] = 0;
LABEL_49:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"backward component is not an RNN", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
  }
  a1[23] = v20;
  if (!v20) {
    goto LABEL_49;
  }
  (*(void (**)(void *))(*a1 + 128))(a1);
  if (SHIBYTE(v27) < 0) {
    operator delete(v25);
  }
}

void sub_1B1AFEA0C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 81) < 0) {
    operator delete(*(void **)(v1 - 104));
  }
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void *kaldi::nnet1::BidirectionalRecurrentComponent::WriteConfig(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "<RecurrentComponentType>");
  kaldi::WriteToken(a2, a3, (char *)(a1 + 192));
  return kaldi::WriteToken(a2, a3, "</Component>");
}

void *virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::WriteConfig(void *a1, void *a2, uint64_t a3)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::WriteConfig((uint64_t)a1 + *(void *)(*a1 - 184), a2, a3);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::WriteData(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void *))(*a1 + 184))(a1);
  kaldi::nnet1::Component::Write(a1[22] + *(void *)(*(void *)a1[22] - 24), a2, a3, a4);
  kaldi::WriteToken(a2, a3, "</Component>");
  uint64_t v8 = a1[23] + *(void *)(*(void *)a1[23] - 24);
  return kaldi::nnet1::Component::Write(v8, a2, a3, a4);
}

uint64_t virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::WriteData(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::WriteData((void *)((char *)a1 + *(void *)(*a1 - 120)), a2, a3, a4);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::NumParams(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  uint64_t v2 = *((void *)this + 22) + *(void *)(**((void **)this + 22) - 24);
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 176))(v2);
  uint64_t v4 = *((void *)this + 23) + *(void *)(**((void **)this + 23) - 24);
  return (*(unsigned int (**)(uint64_t))(*(void *)v4 + 176))(v4) + v3;
}

uint64_t virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::NumParams(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::NumParams((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(void *)(*(void *)this - 192)));
}

void kaldi::nnet1::BidirectionalRecurrentComponent::GetParams(uint64_t a1, void **a2)
{
  uint64_t v4 = *(void *)(a1 + 176) + *(void *)(**(void **)(a1 + 176) - 24);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 176))(v4);
  uint64_t v6 = *(void *)(a1 + 184) + *(void *)(**(void **)(a1 + 184) - 24);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 176))(v6);
  kaldi::Vector<float>::Resize(a2, (v7 + v5), 1);
  memset(v13, 0, sizeof(v13));
  uint64_t v8 = *(void *)(a1 + 176) + *(void *)(**(void **)(a1 + 176) - 24);
  (*(void (**)(uint64_t, const void **))(*(void *)v8 + 184))(v8, v13);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  BOOL v10 = (char *)*a2;
  LODWORD(v11) = v5;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v10, v13);
  uint64_t v9 = *(void *)(a1 + 184) + *(void *)(**(void **)(a1 + 184) - 24);
  (*(void (**)(uint64_t, const void **))(*(void *)v9 + 184))(v9, v13);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  BOOL v10 = (char *)*a2 + 4 * v5;
  LODWORD(v11) = v7;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v10, v13);
  kaldi::Vector<float>::Destroy((uint64_t)v13);
}

void sub_1B1AFEE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::GetParams(void *a1, void **a2)
{
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::SetParams(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 176) + *(void *)(**(void **)(a1 + 176) - 24);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 176))(v4);
  uint64_t v6 = *(void *)(a1 + 184) + *(void *)(**(void **)(a1 + 184) - 24);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 176))(v6);
  uint64_t v8 = *(void *)(a1 + 176) + *(void *)(**(void **)(a1 + 176) - 24);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = *a2;
  LODWORD(v12) = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 192))(v8, &v11);
  uint64_t v9 = *(void *)(a1 + 184) + *(void *)(**(void **)(a1 + 184) - 24);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = *a2 + 4 * v5;
  LODWORD(v12) = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v9 + 192))(v9, &v11);
}

uint64_t virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::SetParams(void *a1, uint64_t *a2)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::SetParams((uint64_t)a1 + *(void *)(*a1 - 208), a2);
}

float kaldi::nnet1::BidirectionalRecurrentComponent::SumParams(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  uint64_t v2 = *((void *)this + 22) + *(void *)(**((void **)this + 22) - 24);
  float v3 = (*(float (**)(uint64_t))(*(void *)v2 + 208))(v2);
  uint64_t v4 = *((void *)this + 23) + *(void *)(**((void **)this + 23) - 24);
  return v3 + (*(float (**)(uint64_t))(*(void *)v4 + 208))(v4);
}

float virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::SumParams(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::SumParams((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(void *)(*(void *)this - 224)));
}

void kaldi::nnet1::BidirectionalRecurrentComponent::GetGradient(void *a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8 = (const void *)(*(uint64_t (**)(void *))(*a1 + 136))(a1);
  if (v8) {
  else
  }
    uint64_t v9 = 0;
  uint64_t v10 = a1[22] + *(void *)(*(void *)a1[22] - 24);
  int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 176))(v10);
  uint64_t v12 = a1[23] + *(void *)(*(void *)a1[23] - 24);
  int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 176))(v12);
  std::vector<unsigned int>::size_type v14 = *(int *)(a2 + 20);
  kaldi::Vector<float>::Resize(a4, (v13 + v11), 1);
  memset(v27, 0, sizeof(v27));
  ((void (*)(std::vector<unsigned int> **))(*v9)[3].__end_cap_.__value_)(v9);
  std::vector<int>::resize(v9[27], v14);
  if ((int)v14 >= 1)
  {
    uint64_t v15 = 0;
    std::vector<unsigned int>::pointer begin = v9[27]->__begin_;
    uint64x2_t v17 = (uint64x2_t)vdupq_n_s64((unint64_t)v14 - 1);
    int64x2_t v18 = (int64x2_t)xmmword_1B255FA20;
    unsigned int v19 = v14 - 1;
    int64x2_t v20 = vdupq_n_s64(2uLL);
    do
    {
      int32x2_t v21 = vmovn_s64((int64x2_t)vcgeq_u64(v17, (uint64x2_t)v18));
      if (v21.i8[0]) {
        begin[v15] = v19;
      }
      if (v21.i8[4]) {
        begin[v15 + 1] = v14 + (v15 ^ 0xFFFFFFFE);
      }
      v15 += 2;
      int64x2_t v18 = vaddq_s64(v18, v20);
      v19 -= 2;
    }
    while (((v14 + 1) & 0x1FFFFFFFELL) != v15);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)v9[30], v14, *(unsigned int *)(a2 + 16), 1, 0);
  kaldi::CuMatrixBase<float>::CopyRows((uint64_t)v9[30], a2, v9[27]);
  uint64_t v22 = (char *)v9[22] + *((void *)v9[22]->__begin_ - 3);
  (*(void (**)(char *, uint64_t, uint64_t, const void **))(*(void *)v22 + 224))(v22, a2, a3, v27);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = (char *)*a4;
  LODWORD(v25) = v11;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v24, v27);
  uint64_t v23 = (char *)v9[23] + *((void *)v9[23]->__begin_ - 3);
  (*(void (**)(char *, std::vector<unsigned int> *, uint64_t, const void **))(*(void *)v23 + 224))(v23, v9[30], a3, v27);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = (char *)*a4 + 4 * v11;
  LODWORD(v25) = v13;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v24, v27);
  ((void (*)(std::vector<unsigned int> **))(*v9)->__end_)(v9);
  kaldi::Vector<float>::Destroy((uint64_t)v27);
}

void sub_1B1AFF3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::GetGradient(void *a1, uint64_t a2, uint64_t a3, void **a4)
{
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::PerturbParams(kaldi::nnet1::BidirectionalRecurrentComponent *this, float a2)
{
  uint64_t v4 = *((void *)this + 22) + *(void *)(**((void **)this + 22) - 24);
  (*(void (**)(uint64_t))(*(void *)v4 + 216))(v4);
  int v5 = *(uint64_t (**)(__n128))(*(void *)(*((void *)this + 23)
                                                    + *(void *)(**((void **)this + 23) - 24))
                                        + 216);
  v6.n128_f32[0] = a2;
  return v5(v6);
}

uint64_t virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::PerturbParams(kaldi::nnet1::BidirectionalRecurrentComponent *this, float a2)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::PerturbParams((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(void *)(*(void *)this - 232)), a2);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::Info(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  (*(void (**)(kaldi::nnet1::BidirectionalRecurrentComponent *, void *, void))(*(void *)this + 184))(this, v18, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n## Forward RNN: input-dim ", 27);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", output-dim ", 13);
  float v3 = (void *)std::ostream::operator<<();
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(*(void *)(*((void *)this + 22)
                                                          + *(void *)(**((void **)this + 22) - 24))
                                              + 64))(v16);
  if ((v17 & 0x80u) == 0) {
    int v5 = v16;
  }
  else {
    int v5 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v6 = v17;
  }
  else {
    uint64_t v6 = (uint64_t)v16[1];
  }
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n## Backward RNN: input-dim ", 28);
  uint64_t v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", output-dim ", 13);
  uint64_t v9 = (void *)std::ostream::operator<<();
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(*(void *)(*((void *)this + 23)
                                                          + *(void *)(**((void **)this + 23) - 24))
                                              + 64))(__p);
  if ((v15 & 0x80u) == 0) {
    int v11 = __p;
  }
  else {
    int v11 = (void **)__p[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v12 = v15;
  }
  else {
    uint64_t v12 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  if ((char)v15 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v17 < 0) {
    operator delete(v16[0]);
  }
  std::stringbuf::str();
  v18[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v18 + *(void *)(v18[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v18[1] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v20);
}

void sub_1B1AFF85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::Info(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::Info((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(void *)(*(void *)this - 80)));
}

void kaldi::nnet1::BidirectionalRecurrentComponent::InfoGradient(kaldi::nnet1::BidirectionalRecurrentComponent *this@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)(*((void *)this + 22)
                                                                + *(void *)(**((void **)this + 22) - 24))
                                                    + 72))(&v13);
  (*(void (**)(void **__return_ptr))(*(void *)(*((void *)this + 23)
                                                          + *(void *)(**((void **)this + 23) - 24))
                                              + 72))(__p);
  if ((v12 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v5 = v12;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  uint64_t v6 = std::string::append(&v13, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v15 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::vector<unsigned int>::size_type v14 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v13, "\n");
  if (v15 >= 0) {
    uint64_t v8 = v14;
  }
  else {
    uint64_t v8 = (void **)v14[0];
  }
  if (v15 >= 0) {
    std::string::size_type v9 = HIBYTE(v15);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v14[1];
  }
  uint64_t v10 = std::string::insert(&v13, 0, (const std::string::value_type *)v8, v9);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
}

void sub_1B1AFFA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::InfoGradient(kaldi::nnet1::BidirectionalRecurrentComponent *this@<X0>, std::string *a2@<X8>)
{
}

void kaldi::nnet1::BidirectionalRecurrentComponent::InfoPropagate(kaldi::nnet1::BidirectionalRecurrentComponent *this@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)(*((void *)this + 22)
                                                                + *(void *)(**((void **)this + 22) - 24))
                                                    + 80))(&v13);
  (*(void (**)(void **__return_ptr))(*(void *)(*((void *)this + 23)
                                                          + *(void *)(**((void **)this + 23) - 24))
                                              + 80))(__p);
  if ((v12 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v5 = v12;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  uint64_t v6 = std::string::append(&v13, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v15 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::vector<unsigned int>::size_type v14 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v13, "\n");
  if (v15 >= 0) {
    uint64_t v8 = v14;
  }
  else {
    uint64_t v8 = (void **)v14[0];
  }
  if (v15 >= 0) {
    std::string::size_type v9 = HIBYTE(v15);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v14[1];
  }
  uint64_t v10 = std::string::insert(&v13, 0, (const std::string::value_type *)v8, v9);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
}

void sub_1B1AFFC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::InfoPropagate(kaldi::nnet1::BidirectionalRecurrentComponent *this@<X0>, std::string *a2@<X8>)
{
}

void kaldi::nnet1::BidirectionalRecurrentComponent::InfoBackPropagate(kaldi::nnet1::BidirectionalRecurrentComponent *this@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)(*((void *)this + 22)
                                                                + *(void *)(**((void **)this + 22) - 24))
                                                    + 88))(&v13);
  (*(void (**)(void **__return_ptr))(*(void *)(*((void *)this + 23)
                                                          + *(void *)(**((void **)this + 23) - 24))
                                              + 88))(__p);
  if ((v12 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v5 = v12;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  uint64_t v6 = std::string::append(&v13, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v15 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::vector<unsigned int>::size_type v14 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v13, "\n");
  if (v15 >= 0) {
    uint64_t v8 = v14;
  }
  else {
    uint64_t v8 = (void **)v14[0];
  }
  if (v15 >= 0) {
    std::string::size_type v9 = HIBYTE(v15);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v14[1];
  }
  uint64_t v10 = std::string::insert(&v13, 0, (const std::string::value_type *)v8, v9);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
}

void sub_1B1AFFE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::InfoBackPropagate(kaldi::nnet1::BidirectionalRecurrentComponent *this@<X0>, std::string *a2@<X8>)
{
}

void kaldi::nnet1::BidirectionalRecurrentComponent::GetInternalMemory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 176);
  long long v7 = *(void (**)(uint64_t, void *))(*(void *)v6 + 112);
  uint64_t v8 = *(void *)(a2 + 8);
  int v9 = *(_DWORD *)(a2 + 28);
  uint64_t v10 = *(void *)(a2 + 32);
  LODWORD(v23[2]) = *(_DWORD *)(v6 + *(void *)(*(void *)v6 - 24) + 12);
  *(void *)((char *)&v23[2] + 4) = *(void *)(a2 + 20);
  HIDWORD(v23[3]) = v9;
  v23[4] = v10;
  v23[0] = &unk_1F0A472A0;
  v23[1] = v8;
  v7(v6, v23);
  int v11 = *(_DWORD *)(a2 + 20);
  std::vector<int>::resize((std::vector<unsigned int> *)(*(void *)(a1 + 216) + 24 * (int)a3), v11);
  if (v11 >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(*(void *)(a1 + 216) + 24 * (int)a3);
    uint64x2_t v14 = (uint64x2_t)vdupq_n_s64((unint64_t)v11 - 1);
    int64x2_t v15 = (int64x2_t)xmmword_1B255FA20;
    int v16 = v11 - 1;
    int64x2_t v17 = vdupq_n_s64(2uLL);
    do
    {
      int32x2_t v18 = vmovn_s64((int64x2_t)vcgeq_u64(v14, (uint64x2_t)v15));
      if (v18.i8[0]) {
        *(_DWORD *)(v13 + 4 * v12) = v16;
      }
      if (v18.i8[4]) {
        *(_DWORD *)(v13 + 4 * v12 + 4) = v11 + (v12 ^ 0xFFFFFFFE);
      }
      v12 += 2;
      int64x2_t v15 = vaddq_s64(v15, v17);
      v16 -= 2;
    }
    while (((v11 + 1) & 0x1FFFFFFFELL) != v12);
  }
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 184) + 112))(*(void *)(a1 + 184), *(void *)(a1 + 264) + 48 * (int)a3, a3);
  uint64_t v19 = *(int *)(*(void *)(a1 + 176) + *(void *)(**(void **)(a1 + 176) - 24) + 12);
  uint64_t v20 = *(void *)(a2 + 8) + 4 * v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 28) - v19;
  uint64_t v21 = *(void *)(a2 + 32);
  LODWORD(v22[2]) = *(_DWORD *)(*(void *)(a1 + 184) + *(void *)(**(void **)(a1 + 184) - 24) + 12);
  *(void *)((char *)&v22[2] + 4) = *(void *)(a2 + 20);
  HIDWORD(v22[3]) = v19;
  v22[4] = v21;
  v22[0] = &unk_1F0A472A0;
  v22[1] = v20;
  kaldi::CuMatrixBase<float>::CopyRows((uint64_t)v22, *(void *)(a1 + 264) + 48 * (int)a3, (void *)(*(void *)(a1 + 216) + 24 * (int)a3));
  v22[0] = &unk_1F0A472A0;
  memset(&v22[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v22);
  v23[0] = &unk_1F0A472A0;
  memset(&v23[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v23);
}

void sub_1B1B00128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *uint64x2_t v14 = 0u;
  v14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  *int64x2_t v15 = 0u;
  v15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  std::vector<unsigned int>::size_type v8 = *(int *)(a2 + 20);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v28, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Running forward propagation for batch std::string::size_type size = ", 45);
    int v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", which contains ", 17);
    uint64_t v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" frames each from ", 18);
    int v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v28);
  }
  std::vector<int>::resize((std::vector<unsigned int> *)(a1[27] + 24 * (int)a4), v8);
  if ((int)v8 >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(a1[27] + 24 * (int)a4);
    uint64x2_t v14 = (uint64x2_t)vdupq_n_s64((unint64_t)v8 - 1);
    int64x2_t v15 = (int64x2_t)xmmword_1B255FA20;
    int v16 = v8 - 1;
    int64x2_t v17 = vdupq_n_s64(2uLL);
    do
    {
      int32x2_t v18 = vmovn_s64((int64x2_t)vcgeq_u64(v14, (uint64x2_t)v15));
      if (v18.i8[0]) {
        *(_DWORD *)(v13 + 4 * v12) = v16;
      }
      if (v18.i8[4]) {
        *(_DWORD *)(v13 + 4 * v12 + 4) = v8 + (v12 ^ 0xFFFFFFFE);
      }
      v12 += 2;
      int64x2_t v15 = vaddq_s64(v15, v17);
      v16 -= 2;
    }
    while (((v8 + 1) & 0x1FFFFFFFELL) != v12);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1[30] + 48 * (int)a4), v8, *(unsigned int *)(a2 + 16), 1, 0);
  kaldi::CuMatrixBase<float>::CopyRows(a1[30] + 48 * (int)a4, a2, (void *)(a1[27] + 24 * (int)a4));
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1[33] + 48 * (int)a4), v8, *(unsigned int *)(a1[23] + *(void *)(*(void *)a1[23] - 24) + 12), 1, 0);
  uint64_t v19 = (_DWORD *)(a1[22] + *(void *)(*(void *)a1[22] - 24));
  uint64_t v20 = *(void *)(a3 + 8);
  int v21 = *(_DWORD *)(a3 + 28);
  uint64_t v22 = *(void *)(a3 + 32);
  LODWORD(v28[2]) = v19[3];
  *(void *)((char *)&v28[2] + 4) = *(void *)(a3 + 20);
  HIDWORD(v28[3]) = v21;
  v28[4] = v22;
  v28[0] = &unk_1F0A472A0;
  v28[1] = v20;
  (*(void (**)(_DWORD *, uint64_t, void *, uint64_t))(*(void *)v19 + 112))(v19, a2, v28, a4);
  uint64_t v23 = a1[23] + *(void *)(*(void *)a1[23] - 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v23 + 112))(v23, a1[30] + 48 * (int)a4, a1[33] + 48 * (int)a4, a4);
  uint64_t v24 = *(int *)(a1[22] + *(void *)(*(void *)a1[22] - 24) + 12);
  uint64_t v25 = *(void *)(a3 + 8) + 4 * v24;
  LODWORD(v++*(void *)(result + 24) = *(_DWORD *)(a3 + 28) - v24;
  uint64_t v26 = *(void *)(a3 + 32);
  LODWORD(v27[2]) = *(_DWORD *)(a1[23] + *(void *)(*(void *)a1[23] - 24) + 12);
  *(void *)((char *)&v27[2] + 4) = *(void *)(a3 + 20);
  HIDWORD(v27[3]) = v24;
  v27[4] = v26;
  v27[0] = &unk_1F0A472A0;
  v27[1] = v25;
  kaldi::CuMatrixBase<float>::CopyRows((uint64_t)v27, a1[33] + 48 * (int)a4, (void *)(a1[27] + 24 * (int)a4));
  v27[0] = &unk_1F0A472A0;
  memset(&v27[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v27);
  v28[0] = &unk_1F0A472A0;
  memset(&v28[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v28);
}

void sub_1B1B00540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *uint64x2_t v14 = 0u;
  v14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  *int64x2_t v15 = 0u;
  v15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void kaldi::nnet1::BidirectionalRecurrentComponent::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  uint64_t v12 = *(unsigned int *)(a2 + 20);
  int v13 = *(_DWORD *)(a1[22] + *(void *)(*(void *)a1[22] - 24) + 12);
  unsigned int v14 = *(_DWORD *)(a1[23] + *(void *)(*(void *)a1[23] - 24) + 12);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v36, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Running backward propagation for batch std::string::size_type size = ", 46);
    int64x2_t v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", which contains ", 17);
    int v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" frames each from ", 18);
    int64x2_t v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v36);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1[36] + 48 * (int)a6), v12, *(unsigned int *)((char *)a1 + *(void *)(*a1 - 24) + 8), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1[39] + 48 * (int)a6), v12, *(unsigned int *)((char *)a1 + *(void *)(*a1 - 24) + 8), 0, 0);
  int32x2_t v18 = (char *)a1[22];
  uint64_t v19 = *(void *)(*(void *)v18 - 24);
  uint64_t v20 = *(void *)(a3 + 8);
  int v21 = *(_DWORD *)(a3 + 28);
  uint64_t v22 = *(void *)(a3 + 32);
  LODWORD(v37[1]) = v13;
  *(void *)((char *)&v37[1] + 4) = *(void *)(a3 + 20);
  HIDWORD(v37[2]) = v21;
  v37[3] = v22;
  uint64_t v36 = &unk_1F0A472A0;
  v37[0] = v20;
  uint64_t v23 = *(void *)(a4 + 8);
  int v24 = *(_DWORD *)(a4 + 28);
  uint64_t v25 = *(void *)(a4 + 32);
  LODWORD(v35[2]) = v13;
  *(void *)((char *)&v35[2] + 4) = *(void *)(a4 + 20);
  HIDWORD(v35[3]) = v24;
  uint64_t v35[4] = v25;
  v35[0] = &unk_1F0A472A0;
  v35[1] = v23;
  (*(void (**)(char *, uint64_t, void **, void *, uint64_t, uint64_t))(*(void *)&v18[v19] + 128))(&v18[v19], a2, &v36, v35, a1[36] + 48 * (int)a6, a6);
  v35[0] = &unk_1F0A472A0;
  memset(&v35[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v35);
  uint64_t v36 = &unk_1F0A472A0;
  memset(v37, 0, sizeof(v37));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v36);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1[42] + 48 * (int)a6), v12, v14, 1, 0);
  uint64_t v26 = a1[42] + 48 * (int)a6;
  uint64_t v27 = *(void *)(a4 + 8) + 4 * v13;
  int v28 = *(_DWORD *)(a4 + 28) - v13;
  uint64_t v29 = *(void *)(a4 + 32);
  LODWORD(v37[1]) = v14;
  *(void *)((char *)&v37[1] + 4) = *(void *)(a4 + 20);
  HIDWORD(v37[2]) = v28;
  v37[3] = v29;
  uint64_t v36 = &unk_1F0A472A0;
  v37[0] = v27;
  kaldi::CuMatrixBase<float>::CopyRows(v26, (uint64_t)&v36, (void *)(a1[27] + 24 * (int)a6));
  uint64_t v36 = &unk_1F0A472A0;
  memset(v37, 0, sizeof(v37));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v36);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1[33] + 48 * (int)a6), v12, v14, 1, 0);
  uint64_t v30 = a1[33] + 48 * (int)a6;
  uint64_t v31 = *(void *)(a3 + 8) + 4 * v13;
  int v32 = *(_DWORD *)(a3 + 28) - v13;
  uint64_t v33 = *(void *)(a3 + 32);
  LODWORD(v37[1]) = v14;
  *(void *)((char *)&v37[1] + 4) = *(void *)(a3 + 20);
  HIDWORD(v37[2]) = v32;
  v37[3] = v33;
  uint64_t v36 = &unk_1F0A472A0;
  v37[0] = v31;
  kaldi::CuMatrixBase<float>::CopyRows(v30, (uint64_t)&v36, (void *)(a1[27] + 24 * (int)a6));
  uint64_t v36 = &unk_1F0A472A0;
  memset(v37, 0, sizeof(v37));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v36);
  uint64_t v34 = a1[23] + *(void *)(*(void *)a1[23] - 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v34 + 128))(v34, a1[30] + 48 * (int)a6, a1[33] + 48 * (int)a6, a1[42] + 48 * (int)a6, a1[39] + 48 * (int)a6, a6);
  if (a5)
  {
    kaldi::CuMatrixBase<float>::CopyRows(a5, a1[39] + 48 * (int)a6, (void *)(a1[27] + 24 * (int)a6));
    kaldi::CuMatrixBase<float>::AddMat(a5, a1[36] + 48 * (int)a6, 111, 1.0, 1.0);
  }
}

void sub_1B1B00A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  *int v11 = 0u;
  v11[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::AccumGradients(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 176) + *(void *)(**(void **)(a1 + 176) - 24);
  (*(void (**)(uint64_t))(*(void *)v2 + 232))(v2);
  float v3 = *(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 184) + *(void *)(**(void **)(a1 + 184) - 24)) + 232);
  return v3();
}

uint64_t virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::AccumGradients(void *a1)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::AccumGradients((uint64_t)a1 + *(void *)(*a1 - 248));
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::UpdateWeights(kaldi::nnet1::BidirectionalRecurrentComponent *this, void *a2)
{
  uint64_t v3 = *((void *)this + 22) + *(void *)(**((void **)this + 22) - 24);
  (*(void (**)(uint64_t))(*(void *)v3 + 256))(v3);
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)(*((void *)this + 23) + *(void *)(**((void **)this + 23) - 24)) + 256);
  return v4();
}

uint64_t virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::UpdateWeights(kaldi::nnet1::BidirectionalRecurrentComponent *this, void *a2)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::UpdateWeights((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(void *)(*(void *)this - 272)), a2);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::SetGradientNormalization(uint64_t a1, float a2)
{
  uint64_t v4 = *(void *)(a1 + 176) + *(void *)(**(void **)(a1 + 176) - 24);
  (*(void (**)(uint64_t))(*(void *)v4 + 240))(v4);
  std::string::size_type v5 = *(uint64_t (**)(__n128))(*(void *)(*(void *)(a1 + 184) + *(void *)(**(void **)(a1 + 184) - 24))
                                        + 240);
  v6.n128_f32[0] = a2;
  return v5(v6);
}

uint64_t virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::SetGradientNormalization(void *a1, float a2)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::SetGradientNormalization((uint64_t)a1 + *(void *)(*a1 - 256), a2);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::NormalizeGradients(kaldi::nnet1::BidirectionalRecurrentComponent *this, float a2)
{
  uint64_t v4 = *((void *)this + 22) + *(void *)(**((void **)this + 22) - 24);
  (*(void (**)(uint64_t))(*(void *)v4 + 248))(v4);
  std::string::size_type v5 = *(uint64_t (**)(__n128))(*(void *)(*((void *)this + 23)
                                                    + *(void *)(**((void **)this + 23) - 24))
                                        + 248);
  v6.n128_f32[0] = a2;
  return v5(v6);
}

uint64_t virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::NormalizeGradients(kaldi::nnet1::BidirectionalRecurrentComponent *this, float a2)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::NormalizeGradients((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(void *)(*(void *)this - 264)), a2);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::Check(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  uint64_t v2 = *((void *)this + 22) + *(void *)(**((void **)this + 22) - 24);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 24))(v2) == 280
    || (uint64_t v3 = *((void *)this + 23) + *(void *)(**((void **)this + 23) - 24),
        (*(unsigned int (**)(uint64_t))(*(void *)v3 + 24))(v3) == 280))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "no recursive recurrent definition");
    goto LABEL_10;
  }
  uint64_t v4 = *((void *)this + 22);
  uint64_t v5 = v4 + *(void *)(*(void *)v4 - 24);
  int v6 = *(_DWORD *)(v5 + 8);
  long long v7 = (char *)this + *(void *)(*(void *)this - 24);
  if (v6 != *((_DWORD *)v7 + 2))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"the forward RNN's input dimension does not match the component's input dimension ", 81);
    int v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" vs ", 4);
    std::ostream::operator<<();
    goto LABEL_10;
  }
  uint64_t v8 = *((void *)this + 23) + *(void *)(**((void **)this + 23) - 24);
  if (*(_DWORD *)(v8 + 8) != v6)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"the backward RNN's input dimension does not match the component's input dimension ", 82);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" vs ", 4);
    std::ostream::operator<<();
    goto LABEL_10;
  }
  if (*(_DWORD *)(v8 + 12) + *(_DWORD *)(v5 + 12) != *((_DWORD *)v7 + 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"the component has output dimension ", 35);
    int v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" , doesn't equal the sum of individual RNN ", 43);
    unsigned int v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" and ", 5);
    std::ostream::operator<<();
LABEL_10:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  (*(void (**)(void))(*(void *)v4 + 128))();
  int v9 = *(uint64_t (**)(void))(**((void **)this + 23) + 128);
  return v9();
}

void sub_1B1B01214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::nnet1::BidirectionalRecurrentComponent::GetHistoryState(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = 3 * a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 176) + 8) + 48 * a3;
  uint64_t v8 = *(int *)(v7 + 16);
  int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 184) + 8) + 48 * a3 + 16);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)a2, *(unsigned int *)(v7 + 20), (v9 + v8), 1, 0);
  uint64_t v10 = *(void *)(a2 + 8);
  int v11 = *(_DWORD *)(a2 + 28);
  uint64_t v12 = *(void *)(a2 + 32);
  LODWORD(v17[1]) = v8;
  *(void *)((char *)&v17[1] + 4) = *(void *)(a2 + 20);
  HIDWORD(v17[2]) = v11;
  v17[3] = v12;
  int v16 = &unk_1F0A472A0;
  v17[0] = v10;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v16, *(void *)(*(void *)(a1 + 176) + 8) + 16 * v6, 111);
  int v16 = &unk_1F0A472A0;
  memset(v17, 0, sizeof(v17));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v16);
  uint64_t v13 = *(void *)(a2 + 8) + 4 * v8;
  int v14 = *(_DWORD *)(a2 + 28) - v8;
  uint64_t v15 = *(void *)(a2 + 32);
  LODWORD(v17[1]) = v9;
  *(void *)((char *)&v17[1] + 4) = *(void *)(a2 + 20);
  HIDWORD(v17[2]) = v14;
  v17[3] = v15;
  int v16 = &unk_1F0A472A0;
  v17[0] = v13;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v16, *(void *)(*(void *)(a1 + 184) + 8) + 48 * a3, 111);
  int v16 = &unk_1F0A472A0;
  memset(v17, 0, sizeof(v17));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v16);
}

void sub_1B1B013AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::BidirectionalRecurrentComponent::GetHistoryState(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8 = *(int *)(*(void *)(*(void *)(a1 + 176) + 8) + 48 * a4 + 16);
  unsigned int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 184) + 8) + 48 * a4 + 16);
  kaldi::CuVector<float>::Resize(a2, v9 + v8, 1);
  uint64_t v10 = *(void *)(a2 + 8);
  uint64_t v25 = &unk_1F0A472D0;
  uint64_t v26 = v10;
  uint64_t v27 = v8;
  uint64_t v28 = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(*(void *)(a1 + 176) + 8) + 48 * a4;
  uint64_t v12 = *(void *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * a3;
  unsigned int v13 = *(_DWORD *)(v11 + 16);
  uint64_t v14 = *(void *)(v11 + 32);
  uint64_t v22 = v12;
  int v21 = &unk_1F0A472D0;
  uint64_t v23 = v13;
  uint64_t v24 = v14;
  kaldi::CuVectorBase<float>::CopyFromVec(&v25, (uint64_t)&v21);
  uint64_t v15 = *(void *)(a2 + 8) + 4 * v8;
  uint64_t v25 = &unk_1F0A472D0;
  uint64_t v26 = v15;
  uint64_t v27 = v9;
  uint64_t v28 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(*(void *)(a1 + 184) + 8) + 48 * a4;
  uint64_t v17 = *(void *)(v16 + 8) + 4 * *(_DWORD *)(v16 + 24) * a3;
  unsigned int v18 = *(_DWORD *)(v16 + 16);
  uint64_t v19 = *(void *)(v16 + 32);
  uint64_t v22 = v17;
  int v21 = &unk_1F0A472D0;
  uint64_t v23 = v18;
  uint64_t v24 = v19;
  return kaldi::CuVectorBase<float>::CopyFromVec(&v25, (uint64_t)&v21);
}

float kaldi::nnet1::BidirectionalRecurrentComponent::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v8 = *(void *)(v6 + 104);
  uint64_t v9 = *(void *)(v6 + 112);
  uint64_t v7 = (uint64_t *)(v6 + 104);
  if (v8 == v9)
  {
    std::vector<kaldi::CuVector<float>>::resize(v7, *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(*(void *)(a1 + 176) + 128), *(int *)(a1 + 80));
  }
  uint64_t v10 = *(void *)(a1 + 184);
  uint64_t v12 = *(void *)(v10 + 104);
  uint64_t v13 = *(void *)(v10 + 112);
  uint64_t v11 = (uint64_t *)(v10 + 104);
  if (v12 == v13)
  {
    std::vector<kaldi::CuVector<float>>::resize(v11, *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(*(void *)(a1 + 184) + 128), *(int *)(a1 + 80));
  }
  int v14 = *(_DWORD *)(a2 + 16);
  if (v14)
  {
    uint64_t v15 = (v14 >> 1);
    uint64_t v16 = *(void *)(a2 + 8);
    v22[0] = &unk_1F0A472D0;
    v22[1] = v16;
    v22[2] = v15;
    uint64_t v23 = *(void *)(a2 + 24);
    v21[0] = &unk_1F0A472D0;
    v21[1] = v16 + 4 * (int)v15;
    _OWORD v21[2] = v15;
    v21[3] = v23;
    double v17 = kaldi::CuVectorBase<float>::Sum((uint64_t)v22);
    uint64_t v18 = *(void *)(*(void *)(a1 + 176) + 104) + 32 * a3;
    if (*(float *)&v17 <= 0.0)
    {
      kaldi::CuVector<float>::Resize(v18, 0, 1);
    }
    else
    {
      kaldi::CuVector<float>::Resize(v18, v15, 1);
      kaldi::CuVectorBase<float>::CopyFromVec((void *)(*(void *)(*(void *)(a1 + 176) + 104) + 32 * a3), (uint64_t)v22);
    }
    kaldi::CuVector<float>::Resize(*(void *)(*(void *)(a1 + 184) + 104) + 32 * a3, v15, 1);
    return kaldi::CuVectorBase<float>::ReverseCopyFromVec(*(void *)(*(void *)(a1 + 184) + 104) + 32 * a3, (uint64_t)v21);
  }
  else
  {
    kaldi::CuVector<float>::Resize(*(void *)(*(void *)(a1 + 176) + 104) + 32 * a3, 0, 1);
    uint64_t v19 = *(void *)(*(void *)(a1 + 184) + 104) + 32 * a3;
    kaldi::CuVector<float>::Resize(v19, 0, 1);
  }
  return result;
}

uint64_t *std::vector<kaldi::CuVector<float>>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  unint64_t v4 = (v3 - *result) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *result + 32 * a2;
      if (v3 != v6)
      {
        uint64_t v7 = v3 - 32;
        uint64_t v8 = (void *)(v3 - 32);
        uint64_t v9 = (void *)(v3 - 32);
        do
        {
          uint64_t v10 = *v9;
          v9 -= 4;
          float result = (uint64_t *)(*(uint64_t (**)(void *))(v10 + 8))(v8);
          v7 -= 32;
          BOOL v11 = v8 == (void *)v6;
          uint64_t v8 = v9;
        }
        while (!v11);
      }
      v2[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    return (uint64_t *)std::vector<kaldi::CuVector<float>>::__append(result, v5);
  }
  return result;
}

uint64_t *std::vector<kaldi::CuMatrix<float>>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *result) >> 4);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    return (uint64_t *)std::vector<kaldi::CuMatrix<float>>::__append(result, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *result + 48 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = v3 - 48;
      uint64_t v9 = (void *)(v3 - 48);
      uint64_t v10 = (void *)(v3 - 48);
      do
      {
        uint64_t v11 = *v10;
        v10 -= 6;
        float result = (uint64_t *)(*(uint64_t (**)(void *))(v11 + 16))(v9);
        v8 -= 48;
        BOOL v12 = v9 == (void *)v7;
        uint64_t v9 = v10;
      }
      while (!v12);
    }
    v2[1] = v7;
  }
  return result;
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::SetTrainOptions(kaldi::nnet1::BidirectionalRecurrentComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(this, a2);
  (*(void (**)(void, const kaldi::nnet1::NnetTrainOptions *))(**((void **)this + 22) + 104))(*((void *)this + 22), a2);
  unint64_t v4 = *(uint64_t (**)(void))(**((void **)this + 23) + 104);
  return v4();
}

void kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *this, const kaldi::nnet1::NnetTrainOptions *lpsrc)
{
  if (v4)
  {
    long long v5 = *(_OWORD *)(v4 + 8);
    *(_OWORD *)((char *)this + 71) = *(_OWORD *)(v4 + 23);
    *(_OWORD *)((char *)this + 56) = v5;
    *((void *)this + 12) = *((void *)v4 + 6);
    unint64_t v6 = (char *)this + *(void *)(*(void *)this - 24);
    long long v7 = *(_OWORD *)((char *)lpsrc + 8);
    *(_OWORD *)(v6 + 71) = *(_OWORD *)((char *)lpsrc + 23);
    *(_OWORD *)(v6 + 56) = v7;
  }
  else if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"need RecurrentNnetTrainOptions in recurrent style component, ignoring SetTrainOptions", 85);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v8);
  }
}

void sub_1B1B01A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::SetTrainOptions(kaldi::nnet1::BidirectionalRecurrentComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::SetTrainOptions((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(void *)(*(void *)this - 280)), a2);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::SetHistoryState()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "This function is probably not meaningful for bidirectional RNNs.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  void v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "This function is probably not meaningful for bidirectional RNNs.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::ResetHistoryState()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "This function is probably not meaningful for bidirectional RNNs.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::HistoryStateSize(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  int v2 = (*(uint64_t (**)(void))(**((void **)this + 22) + 16))(*((void *)this + 22));
  return (*(unsigned int (**)(void))(**((void **)this + 23) + 16))(*((void *)this + 23)) + v2;
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::ResetHistoryState(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  (*(void (**)(void))(**((void **)this + 22) + 32))(*((void *)this + 22));
  int v2 = *(uint64_t (**)(void))(**((void **)this + 23) + 32);
  return v2();
}

uint64_t *kaldi::nnet1::BidirectionalRecurrentComponent::EnsureBuffers(uint64_t *this)
{
  if (!*((unsigned char *)this + 360))
  {
    uint64_t v1 = this;
    (*(void (**)(uint64_t *))(*this + 128))(this);
    unint64_t v2 = *((int *)v1 + 20);
    std::vector<std::vector<int>>::resize(v1 + 27, v2);
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 30, v2);
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 33, v2);
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 36, v2);
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 39, v2);
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 42, v2);
    (*(void (**)(uint64_t))(*(void *)v1[22] + 88))(v1[22]);
    this = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v1[23] + 88))(v1[23]);
    *((unsigned char *)v1 + 360) = 1;
  }
  return this;
}

uint64_t kaldi::nnet1::RecurrentBaseComponent::GetHistoryOptions(kaldi::nnet1::RecurrentBaseComponent *this)
{
  return (uint64_t)this + 88;
}

void kaldi::nnet1::RecurrentBaseComponent::SetHistoryOptions(kaldi::nnet1::RecurrentBaseComponent *this, const kaldi::nnet1::HistoryOptions *a2)
{
  unint64_t v4 = (const void *)(*(uint64_t (**)(kaldi::nnet1::RecurrentBaseComponent *))(*(void *)this + 120))(this);
  if (v5)
  {
    long long v6 = *(_OWORD *)(v5 + 8);
    *(_OWORD *)&v9[15] = *(_OWORD *)(v5 + 23);
    *(_OWORD *)uint64_t v9 = v6;
    uint64_t v8 = &unk_1F0A4DB38;
    uint64_t v10 = &unk_1F0A4DB58;
    int v7 = *((_DWORD *)v5 + 13);
    int v11 = *((_DWORD *)a2 + 2);
    int v12 = v7;
    (*(void (**)(kaldi::nnet1::RecurrentBaseComponent *, void **))(*(void *)this + 104))(this, &v8);
    kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions((kaldi::nnet1::RecurrentNnetTrainOptions *)&v8);
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Inconsistent return type: RecurrentBaseComponent::GetTrainOptions() can not be cast to RecurrentNnetTrainOptions", 112);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
  }
}

void sub_1B1B01EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::RecurrentBaseComponent::GetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *this)
{
  return (uint64_t)this + 48;
}

uint64_t kaldi::nnet1::UpdatableComponent::IsUpdatable(kaldi::nnet1::UpdatableComponent *this)
{
  return 1;
}

void *kaldi::nnet1::Component::Info@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void kaldi::nnet1::Component::GetUnitOutputFnc(uint64_t a1)
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
  unint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GetUnitOutputFnc", 16);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" is not implemented for ", 24);
  unint64_t v4 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  kaldi::nnet1::Component::TypeToMarker(v4, &v8);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v5 = &v8;
  }
  else {
    long long v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  }
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v8.__r_.__value_.__l.__size_;
  }
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, size);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " component.");
  std::string::~string(&v8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
}

{
  void *v2;
  void *v3;
  kaldi::nnet1::Component *v4;
  std::string *v5;
  std::string::size_type size;
  void *v7;
  std::string v8;
  void v9[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
  unint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GetUnitOutputFnc", 16);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" is not implemented for ", 24);
  unint64_t v4 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  kaldi::nnet1::Component::TypeToMarker(v4, &v8);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v5 = &v8;
  }
  else {
    long long v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  }
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v8.__r_.__value_.__l.__size_;
  }
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, size);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " component.");
  std::string::~string(&v8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
}

void kaldi::nnet1::UpdatableComponent::GetNormalizedLearningRate(kaldi::nnet1::UpdatableComponent *this)
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
  unint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GetNormalizedLearningRate", 25);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" is not implemented for ", 24);
  unint64_t v4 = (kaldi::nnet1::Component *)(*(uint64_t (**)(kaldi::nnet1::UpdatableComponent *))(*(void *)this + 24))(this);
  kaldi::nnet1::Component::TypeToMarker(v4, &v8);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v5 = &v8;
  }
  else {
    long long v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  }
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v8.__r_.__value_.__l.__size_;
  }
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, size);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " component.");
  std::string::~string(&v8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
}

void kaldi::nnet1::UpdatableComponent::PerturbParams(kaldi::nnet1::UpdatableComponent *this, float a2)
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"PerturbParams", 13);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" is not implemented for ", 24);
  long long v5 = (kaldi::nnet1::Component *)(*(uint64_t (**)(kaldi::nnet1::UpdatableComponent *))(*(void *)this + 24))(this);
  kaldi::nnet1::Component::TypeToMarker(v5, &v9);
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v6 = &v9;
  }
  else {
    long long v6 = (std::string *)v9.__r_.__value_.__r.__words[0];
  }
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v9.__r_.__value_.__l.__size_;
  }
  std::string v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, size);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, " component.");
  std::string::~string(&v9);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
}

void kaldi::nnet1::UpdatableComponent::GetGradient(uint64_t a1)
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
  unint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GetGradient", 11);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" is not implemented for ", 24);
  unint64_t v4 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  kaldi::nnet1::Component::TypeToMarker(v4, &v8);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v5 = &v8;
  }
  else {
    long long v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  }
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v8.__r_.__value_.__l.__size_;
  }
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, size);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " component.");
  std::string::~string(&v8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
}

void virtual thunk to'kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
}

uint64_t virtual thunk to'kaldi::nnet1::RecurrentBaseComponent::GetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 288) + 48;
}

void kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 368));
}

{
  uint64_t v1;
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 368));
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::Copy(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
}

void sub_1B1B024C0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40DD337325);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::GetType(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  return 280;
}

void kaldi::nnet1::BidirectionalRecurrentComponent::PropagateFnc()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Running on single input doesn't make sense for bidirectional RNNs, since history state is not saved.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void non-virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + 208));
}

{
  kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this - 160));
}

{
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + 200));
}

{
  kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this - 168));
}

void virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  unint64_t v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 368);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(void *)(*(void *)this - 24)));
}

void virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::Copy(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
}

uint64_t virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::GetType(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  return 280;
}

void virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::PropagateFnc()
{
}

void kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent(kaldi::nnet1::BidirectionalRecurrentComponent *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[3];
  *((void *)this + 20) = &unk_1F0A4E6E8;
  *((void *)this + 21) = &unk_1F0A4E710;
  uint64_t v5 = *((void *)this + 22);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 23);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  int v7 = (void **)((char *)this + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  int v7 = (void **)((char *)this + 312);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  int v7 = (void **)((char *)this + 288);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  int v7 = (void **)((char *)this + 264);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  int v7 = (void **)((char *)this + 240);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  int v7 = (void **)((char *)this + 216);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  quasar::Bitmap::~Bitmap((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + 168));
  quasar::Bitmap::~Bitmap((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + 160));
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(this, a2 + 1);
}

uint64_t std::vector<kaldi::CuVector<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      uint64_t v14 = 32 * a2;
      uint64_t v15 = (void *)(v7 + 8);
      uint64_t v16 = v7 + 32 * a2;
      do
      {
        *uint64_t v15 = 0;
        v15[1] = 0;
        void v15[2] = 0;
        *(v15 - 1) = &unk_1F0A517C0;
        v15 += 4;
        v7 += 32;
        v14 -= 32;
      }
      while (v14);
      uint64_t v7 = v16;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    void v21[4] = result;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(result, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    double v17 = &v13[32 * v10];
    v21[0] = v13;
    v21[1] = v17;
    v21[3] = &v13[32 * v12];
    uint64_t v18 = 32 * a2;
    uint64_t v19 = v17 + 8;
    uint64_t v20 = &v17[32 * a2];
    do
    {
      *uint64_t v19 = 0;
      v19[1] = 0;
      void v19[2] = 0;
      *(v19 - 1) = &unk_1F0A517C0;
      v19 += 4;
      v17 += 32;
      v18 -= 32;
    }
    while (v18);
    _OWORD v21[2] = v20;
    std::vector<kaldi::CuVector<float>>::__swap_out_circular_buffer(a1, v21);
    return std::__split_buffer<kaldi::CuVector<float>>::~__split_buffer((uint64_t)v21);
  }
  return result;
}

void sub_1B1B029A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::CuVector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::CuVector<float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::CuVector<float>>,std::reverse_iterator<kaldi::CuVector<float>*>,std::reverse_iterator<kaldi::CuVector<float>*>,std::reverse_iterator<kaldi::CuVector<float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::CuVector<float>>,std::reverse_iterator<kaldi::CuVector<float>*>,std::reverse_iterator<kaldi::CuVector<float>*>,std::reverse_iterator<kaldi::CuVector<float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0; a3 + i != a5; kaldi::CuVector<float>::CuVector((void *)(i + a7), i + a3))
    i -= 32;
  return a6;
}

uint64_t std::__split_buffer<kaldi::CuVector<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(i - 32);
    *(void *)(a1 + 16) = i - 32;
    (*(void (**)(void))(v4 + 8))();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<kaldi::CuMatrix<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 48 * a2;
      uint64_t v14 = 48 * a2;
      uint64_t v15 = *(void *)(result - 8);
      do
      {
        *(_OWORD *)(v7 + ++*(void *)(result + 24) = 0uLL;
        *(_OWORD *)(v7 + 8) = 0uLL;
        *(void *)uint64_t v7 = &unk_1F0A51768;
        *(unsigned char *)(v7 + 40) = 0;
        v7 += 48;
        v15 += 48;
        v14 -= 48;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    v20[4] = result;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(result, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v16 = &v12[48 * v8];
    v20[0] = v12;
    v20[1] = v16;
    v20[3] = &v12[48 * v11];
    double v17 = &v16[48 * a2];
    uint64_t v18 = 48 * a2;
    uint64_t v19 = v16;
    do
    {
      *(_OWORD *)(v19 + ++*(void *)(result + 24) = 0uLL;
      *(_OWORD *)(v19 + 8) = 0uLL;
      *(void *)uint64_t v19 = &unk_1F0A51768;
      v19[40] = 0;
      v19 += 48;
      v16 += 48;
      v18 -= 48;
    }
    while (v18);
    v20[2] = v17;
    std::vector<kaldi::CuMatrix<float>>::__swap_out_circular_buffer(a1, v20);
    return std::__split_buffer<kaldi::CuMatrix<float>>::~__split_buffer((uint64_t)v20);
  }
  return result;
}

void sub_1B1B02CBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::CuMatrix<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::CuMatrix<float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,std::reverse_iterator<kaldi::CuMatrix<float>*>,std::reverse_iterator<kaldi::CuMatrix<float>*>,std::reverse_iterator<kaldi::CuMatrix<float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,std::reverse_iterator<kaldi::CuMatrix<float>*>,std::reverse_iterator<kaldi::CuMatrix<float>*>,std::reverse_iterator<kaldi::CuMatrix<float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0; a3 + i != a5; kaldi::CuMatrix<float>::CuMatrix(i + a7, i + a3, 111))
    i -= 48;
  return a6;
}

uint64_t std::__split_buffer<kaldi::CuMatrix<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(i - 48);
    *(void *)(a1 + 16) = i - 48;
    (*(void (**)(void))(v4 + 16))();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void quasar::lm::fst_builder::FstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::create(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  if (*(_DWORD *)a1 == 2)
  {
    int v2 = *(unsigned __int8 *)(a1 + 17);
    if (*(unsigned char *)(a1 + 16)) {
      BOOL v3 = v2 == 0;
    }
    else {
      BOOL v3 = 0;
    }
    if (v3) {
      operator new();
    }
    if (*(unsigned char *)(a1 + 16)) {
      BOOL v4 = 0;
    }
    else {
      BOOL v4 = v2 == 0;
    }
    if (v4) {
      operator new();
    }
    quasar::lm::LogMessage::LogMessage(v9, 5, "create", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 90);
    Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v9);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Not implemented (", 17);
    uint64_t v7 = quasar::lm::fst_builder::operator<<<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)").", 2);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v9);
  }
  else
  {
    if (*(_DWORD *)a1 == 1) {
      operator new();
    }
    quasar::lm::LogMessage::LogMessage(v9, 5, "create", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 95);
    uint64_t v8 = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Unknown FstBuilder implementation: ", 35);
    std::ostream::operator<<();
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v9);
  }
}

void sub_1B1B03008(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E1C40763D396DLL);
  *uint64_t v1 = 0;
  _Unwind_Resume(a1);
}

void *quasar::lm::fst_builder::operator<<<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(void *a1)
{
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Options(", 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"implementation=", 15);
  BOOL v3 = (void *)std::ostream::operator<<();
  BOOL v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"explicitStartEndMarkers=", 24);
  uint64_t v5 = (void *)std::ostream::operator<<();
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"keepDisambiguationSymbols=", 26);
  uint64_t v7 = (void *)std::ostream::operator<<();
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"removeRedundantStates=", 22);
  unint64_t v9 = (void *)std::ostream::operator<<();
  unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"attachSymbolTables=", 19);
  unint64_t v11 = (void *)std::ostream::operator<<();
  unint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"mutableFst=", 11);
  uint64_t v14 = quasar::lm::fst_builder::operator<<<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v13);
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" ", 1);
  uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"squeezedFst=", 12);
  double v17 = quasar::lm::fst_builder::operator<<<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)")", 1);
  return a1;
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"SqueezedOptions(", 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"acceptor=", 9);
  BOOL v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"quantized=", 10);
  BOOL v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"stream=", 7);
  uint64_t v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)")", 1);
  return a1;
}

{
  void *v2;
  void *v3;

  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"MutableOptions(", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"fst=", 4);
  BOOL v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)")", 1);
  return a1;
}

uint64_t quasar::lm::fst_builder::FstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::addState(uint64_t a1, void *a2, float *a3)
{
  if (*(void *)(a1 + 40) <= (unint64_t)*(int *)(a1 + 60))
  {
    quasar::lm::LogMessage::LogMessage(v8, 5, "addState", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 125);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v8);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v8);
  }
  else
  {
    quasar::lm::nullstream((quasar::lm *)a1);
  }
  (*(void (**)(uint64_t, void *, float *))(*(void *)a1 + 16))(a1, a2, a3);
  *(void *)(a1 + 64) += (uint64_t)(a2[1] - *a2) >> 4;
  if (*a3 > INFINITY || (float)(*a3 + 0.00097656) < INFINITY) {
    ++*(void *)(a1 + 72);
  }
  uint64_t result = *(unsigned int *)(a1 + 60);
  *(_DWORD *)(a1 + 60) = result + 1;
  return result;
}

void sub_1B1B032C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::lm::fst_builder::FstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::build(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80))
  {
    quasar::lm::LogMessage::LogMessage(v11, 5, "build", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 140);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v11);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v11);
  }
  else
  {
    uint64_t v2 = (quasar::lm *)quasar::lm::nullstream((quasar::lm *)a1);
  }
  if (*(void *)(a1 + 40) == *(_DWORD *)(a1 + 60))
  {
    BOOL v3 = (quasar::lm *)quasar::lm::nullstream(v2);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v11, 5, "build", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 142);
    Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Expected ", 9);
    uint64_t v5 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" states, but only observed ", 27);
    uint64_t v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" state(s).", 10);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v11);
  }
  if (*(void *)(a1 + 64) == *(void *)(a1 + 48))
  {
    quasar::lm::nullstream(v3);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v11, 5, "build", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 145);
    uint64_t v7 = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Expected ", 9);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" arcs, but only observed ", 25);
    unint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" arc(s).", 8);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v11);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  *(unsigned char *)(a1 + 80) = 1;
  return result;
}

void sub_1B1B03488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::lm::fst_builder::FstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FstBuilder(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, int a5)
{
  *(void *)a1 = &unk_1F0A57C48;
  long long v6 = *a2;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = a2[1];
  *(_OWORD *)(a1 + 8) = v6;
  *(void *)(a1 + 40) = a3;
  *(void *)(a1 + 48) = a4;
  *(_DWORD *)(a1 + 56) = a5;
  *(void *)(a1 + 68) = 0;
  *(void *)(a1 + 60) = 0;
  *(void *)(a1 + 73) = 0;
  uint64_t v7 = (quasar::lm *)quasar::lm::nullstream((quasar::lm *)a1);
  if (*(void *)(a1 + 40))
  {
    uint64_t v8 = (quasar::lm *)quasar::lm::nullstream(v7);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v12, 5, "FstBuilder", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 114);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v12);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v12);
  }
  if (*(void *)(a1 + 40) * *(void *)(a1 + 40) >= *(void *)(a1 + 48))
  {
    unint64_t v9 = (quasar::lm *)quasar::lm::nullstream(v8);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v12, 5, "FstBuilder", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 115);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v12);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v12);
  }
  if ((*(_DWORD *)(a1 + 56) & 0x80000000) != 0)
  {
    quasar::lm::LogMessage::LogMessage(v12, 5, "FstBuilder", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 117);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v12);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v12);
  }
  else
  {
    unint64_t v10 = (quasar::lm *)quasar::lm::nullstream(v9);
  }
  if (*(void *)(a1 + 40) <= (unint64_t)*(int *)(a1 + 56))
  {
    quasar::lm::LogMessage::LogMessage(v12, 5, "FstBuilder", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 118);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v12);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v12);
  }
  else
  {
    quasar::lm::nullstream(v10);
  }
  return a1;
}

void sub_1B1B0363C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::lm::fst_builder::MutableFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::MutableFstBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7 = (quasar::lm *)quasar::lm::fst_builder::FstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FstBuilder(a1, (long long *)a2, a3, a4, a5);
  *(void *)uint64_t v7 = &unk_1F0A57C78;
  uint64_t v8 = *(void *)(a2 + 8);
  *((void *)v7 + 11) = v8;
  if (v8)
  {
    quasar::lm::nullstream(v7);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v12, 5, "MutableFstBuilder", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 165);
    Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"A mutable FST should be supplied when using ", 44);
    unint64_t v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)".", 1);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v12);
  }
  (*(void (**)(void))(**(void **)(a1 + 88) + 224))(*(void *)(a1 + 88));
  (*(void (**)(void, void))(**(void **)(a1 + 88) + 248))(*(void *)(a1 + 88), *(unsigned int *)(a1 + 40));
  return a1;
}

void sub_1B1B03794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::lm::fst_builder::MutableFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::addStateImpl(uint64_t a1, uint64_t *a2, float *a3)
{
  long long v6 = (quasar::lm *)(*(uint64_t (**)(void))(**(void **)(a1 + 88) + 200))(*(void *)(a1 + 88));
  uint64_t v7 = v6;
  if (v6 == *(_DWORD *)(a1 + 60))
  {
    quasar::lm::nullstream(v6);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v11, 5, "addStateImpl", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 178);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v11);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v11);
  }
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  while (v9 != v8)
  {
    (*(void (**)(void, quasar::lm *, uint64_t))(**(void **)(a1 + 88) + 208))(*(void *)(a1 + 88), v7, v9);
    v9 += 16;
  }
  return (*(uint64_t (**)(void, quasar::lm *, float))(**(void **)(a1 + 88) + 184))(*(void *)(a1 + 88), v7, *a3);
}

void sub_1B1B038D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::lm::fst_builder::MutableFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::buildImpl(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 88) + 176))(*(void *)(a1 + 88), *(unsigned int *)(a1 + 56));
}

uint64_t quasar::lm::fst_builder::Options<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Options(uint64_t result)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_WORD *)(result + 16) = 1;
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

void quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::SqueezedFstBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = quasar::lm::fst_builder::FstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FstBuilder(a1, (long long *)a2, a3, a4, a5);
  *(void *)uint64_t v6 = &unk_1F0A57CD8;
  *(void *)(v6 + 88) = *(void *)(a2 + 24);
  *(unsigned char *)(v6 + 96) = 0;
  operator new();
}

void sub_1B1B03C08(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 104);
  *(void *)(v1 + 104) = 0;
  if (v3) {
    MEMORY[0x1B3EA8670](v3, 0x1000C40451B5BE8);
  }
  _Unwind_Resume(exception_object);
}

void quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::writeHeader(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    quasar::lm::LogMessage::LogMessage(v6, 5, "writeHeader", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 254);
    Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Aligned file format is currently not supported.", 47);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v6);
  }
  else
  {
    quasar::lm::nullstream((quasar::lm *)a1);
  }
  std::string::basic_string[abi:ne180100]<0>(&v13, "");
  long long v9 = 0u;
  long long v10 = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  uint64_t v11 = *(int *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 40);
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::TypeString(&__p);
  std::string::operator=((std::string *)v7, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v3 = (const std::string *)fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
  std::string::operator=((std::string *)&v8[1], v3);
  unsigned int v4 = *(unsigned char *)(a1 + 96) == 0;
  *((void *)&v10 + 1) = 1;
  *(int8x8_t *)&long long v10 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v4), 0x1FuLL)), (int8x8_t)4, (int8x8_t)0x400000003);
  fst::FstHeader::Write();
  fst::SqueezedQuantizationOptions<true,false>::Write();
  if (SHIBYTE(v9) < 0) {
    operator delete(v8[1]);
  }
  if (SHIBYTE(v8[0]) < 0) {
    operator delete(v7[0]);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
}

void sub_1B1B03DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a15);
  if (*(char *)(v15 - 17) < 0) {
    operator delete(*(void **)(v15 - 40));
  }
  _Unwind_Resume(a1);
}

void quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::addStateImpl(uint64_t a1, uint64_t *a2, float *a3)
{
  quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::writeState(a1, a3);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  while (v5 != v6)
  {
    quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::writeArc(a1);
    v5 += 16;
  }
}

void quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::writeState(uint64_t a1, float *a2)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  BOOL v3 = (float)(*a2 + 0.00097656) < INFINITY || *a2 > INFINITY;
  unsigned int v4 = *(void **)(a1 + 88);
  long long v5 = *(_OWORD *)(a1 + 224);
  long long v42 = *(_OWORD *)(a1 + 208);
  long long v43 = v5;
  uint64_t v44 = *(void *)(a1 + 240);
  long long v6 = *(_OWORD *)(a1 + 160);
  long long v38 = *(_OWORD *)(a1 + 144);
  long long v39 = v6;
  long long v7 = *(_OWORD *)(a1 + 192);
  long long v40 = *(_OWORD *)(a1 + 176);
  long long v41 = v7;
  long long v8 = *(_OWORD *)(a1 + 128);
  long long v36 = *(_OWORD *)(a1 + 112);
  long long v37 = v8;
  MEMORY[0x1B3EA7E70](v26, v4);
  long long v9 = (char *)v4 + *(void *)(*v4 - 24);
  if ((v9[32] & 5) == 0)
  {
    uint64_t v10 = *((void *)v9 + 5);
    long long v47 = v36;
    long long v48 = v37;
    long long v49 = v38;
    long long v50 = v39;
    uint64_t v55 = v44;
    long long v53 = v42;
    long long v54 = v43;
    long long v51 = v40;
    long long v52 = v41;
    (*(void (**)(void *__return_ptr))(*(void *)v10 + 40))(v45);
    if (v46 == -1) {
      std::ios_base::clear((std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)), *(_DWORD *)((char *)v4 + *(void *)(*v4 - 24) + 32) | 4);
    }
  }
  MEMORY[0x1B3EA7E80](v26);
  uint64_t v11 = (quasar::lm *)std::ostream::write();
  uint64_t v12 = *(void *)(a1 + 240) + 4;
  *(void *)(a1 + 240) = v12;
  uint64_t v13 = *(void *)(a1 + 88) + *(void *)(**(void **)(a1 + 88) - 24);
  if ((*(unsigned char *)(v13 + 32) & 5) != 0)
  {
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    uint64_t v14 = -1;
    uint64_t v55 = -1;
  }
  else
  {
    uint64_t v11 = (quasar::lm *)(*(void *(**)(long long *__return_ptr))(**(void **)(v13 + 40) + 32))(&v47);
    uint64_t v12 = *(void *)(a1 + 240);
    uint64_t v14 = v55;
  }
  if (v12 == v14)
  {
    quasar::lm::nullstream(v11);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v45, 5, "writeState", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 307);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v45);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v45);
  }
  if (v3)
  {
    uint64_t v15 = *(void **)(a1 + 88);
    long long v16 = *(_OWORD *)(a1 + 480);
    long long v34 = *(_OWORD *)(a1 + 496);
    uint64_t v35 = *(void *)(a1 + 512);
    long long v17 = *(_OWORD *)(a1 + 432);
    long long v29 = *(_OWORD *)(a1 + 416);
    long long v30 = v17;
    long long v18 = *(_OWORD *)(a1 + 448);
    long long v32 = *(_OWORD *)(a1 + 464);
    long long v33 = v16;
    long long v31 = v18;
    long long v19 = *(_OWORD *)(a1 + 400);
    long long v27 = *(_OWORD *)(a1 + 384);
    long long v28 = v19;
    MEMORY[0x1B3EA7E70](v26, v15);
    uint64_t v20 = (char *)v15 + *(void *)(*v15 - 24);
    if ((v20[32] & 5) == 0)
    {
      uint64_t v21 = *((void *)v20 + 5);
      long long v47 = v27;
      long long v48 = v28;
      long long v49 = v29;
      long long v50 = v30;
      uint64_t v55 = v35;
      long long v53 = v33;
      long long v54 = v34;
      long long v51 = v31;
      long long v52 = v32;
      (*(void (**)(void *__return_ptr))(*(void *)v21 + 40))(v45);
      if (v46 == -1) {
        std::ios_base::clear((std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)), *(_DWORD *)((char *)v15 + *(void *)(*v15 - 24) + 32) | 4);
      }
    }
    MEMORY[0x1B3EA7E80](v26);
    uint64_t v22 = (quasar::lm *)std::ostream::write();
    uint64_t v23 = *(void *)(a1 + 512) + 8;
    *(void *)(a1 + 512) = v23;
    uint64_t v24 = *(void *)(a1 + 88) + *(void *)(**(void **)(a1 + 88) - 24);
    if ((*(unsigned char *)(v24 + 32) & 5) != 0)
    {
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      uint64_t v25 = -1;
      uint64_t v55 = -1;
    }
    else
    {
      uint64_t v22 = (quasar::lm *)(*(void *(**)(long long *__return_ptr))(**(void **)(v24 + 40) + 32))(&v47);
      uint64_t v23 = *(void *)(a1 + 512);
      uint64_t v25 = v55;
    }
    if (v23 == v25)
    {
      quasar::lm::nullstream(v22);
    }
    else
    {
      quasar::lm::LogMessage::LogMessage(v45, 5, "writeState", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 318);
      quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v45);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v45);
    }
  }
}

void sub_1B1B04320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  MEMORY[0x1B3EA7E80](va);
  _Unwind_Resume(a1);
}

void quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::writeArc(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  long long v2 = *(_OWORD *)(a1 + 344);
  long long v19 = *(_OWORD *)(a1 + 328);
  long long v20 = v2;
  long long v21 = *(_OWORD *)(a1 + 360);
  long long v3 = *(_OWORD *)(a1 + 264);
  long long v4 = *(_OWORD *)(a1 + 296);
  long long v5 = *(_OWORD *)(a1 + 312);
  long long v16 = *(_OWORD *)(a1 + 280);
  long long v17 = v4;
  long long v6 = *(void **)(a1 + 88);
  uint64_t v22 = *(void *)(a1 + 376);
  long long v18 = v5;
  long long v14 = *(_OWORD *)(a1 + 248);
  long long v15 = v3;
  MEMORY[0x1B3EA7E70](v13, v6);
  long long v7 = (char *)v6 + *(void *)(*v6 - 24);
  if ((v7[32] & 5) == 0)
  {
    uint64_t v8 = *((void *)v7 + 5);
    long long v24 = v14;
    long long v25 = v15;
    long long v26 = v16;
    long long v27 = v17;
    uint64_t v32 = v22;
    long long v30 = v20;
    long long v31 = v21;
    long long v28 = v18;
    long long v29 = v19;
    (*(void (**)(void *__return_ptr))(*(void *)v8 + 40))(v23);
    if (v23[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)), *(_DWORD *)((char *)v6 + *(void *)(*v6 - 24) + 32) | 4);
    }
  }
  MEMORY[0x1B3EA7E80](v13);
  long long v9 = (quasar::lm *)std::ostream::write();
  uint64_t v10 = *(void *)(a1 + 376) + 12;
  *(void *)(a1 + 3--*(_DWORD *)(a9 + 76) = v10;
  uint64_t v11 = *(void *)(a1 + 88) + *(void *)(**(void **)(a1 + 88) - 24);
  if ((*(unsigned char *)(v11 + 32) & 5) != 0)
  {
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    uint64_t v12 = -1;
    uint64_t v32 = -1;
  }
  else
  {
    long long v9 = (quasar::lm *)(*(void *(**)(long long *__return_ptr))(**(void **)(v11 + 40) + 32))(&v24);
    uint64_t v10 = *(void *)(a1 + 376);
    uint64_t v12 = v32;
  }
  if (v10 == v12)
  {
    quasar::lm::nullstream(v9);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v23, 5, "writeArc", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 333);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v23);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v23);
  }
}

void sub_1B1B045D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  MEMORY[0x1B3EA7E80](va);
  _Unwind_Resume(a1);
}

uint64_t quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::buildImpl()
{
  return std::ostream::flush();
}

std::string *fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::TypeString@<X0>(std::string *a1@<X8>)
{
  return std::string::append(a1, "_acceptor");
}

void sub_1B1B04660(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type()
{
  {
    operator new();
  }
  return fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type(void)::type;
}

void sub_1B1B04744(_Unwind_Exception *a1)
{
}

uint64_t fst::SqueezedQuantizationOptions<true,false>::Write()
{
  return 1;
}

void quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::SqueezedFstBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = quasar::lm::fst_builder::FstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FstBuilder(a1, (long long *)a2, a3, a4, a5);
  *(void *)uint64_t v6 = &unk_1F0A57CA8;
  *(void *)(v6 + 88) = *(void *)(a2 + 24);
  *(unsigned char *)(v6 + 96) = 0;
  operator new();
}

void sub_1B1B04AE4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 104);
  *(void *)(v1 + 104) = 0;
  if (v3) {
    MEMORY[0x1B3EA8670](v3, 0x1000C40451B5BE8);
  }
  _Unwind_Resume(exception_object);
}

void quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::writeHeader(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    quasar::lm::LogMessage::LogMessage(v6, 5, "writeHeader", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 254);
    Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Aligned file format is currently not supported.", 47);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v6);
  }
  else
  {
    quasar::lm::nullstream((quasar::lm *)a1);
  }
  std::string::basic_string[abi:ne180100]<0>(&v13, "");
  long long v9 = 0u;
  long long v10 = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  uint64_t v11 = *(int *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 40);
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::TypeString(&__p);
  std::string::operator=((std::string *)v7, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v3 = (const std::string *)fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
  std::string::operator=((std::string *)&v8[1], v3);
  unsigned int v4 = *(unsigned char *)(a1 + 96) == 0;
  *((void *)&v10 + 1) = 1;
  *(int8x8_t *)&long long v10 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v4), 0x1FuLL)), (int8x8_t)4, (int8x8_t)0x400000003);
  fst::FstHeader::Write();
  fst::SqueezedQuantizationOptions<true,false>::Write();
  if (SHIBYTE(v9) < 0) {
    operator delete(v8[1]);
  }
  if (SHIBYTE(v8[0]) < 0) {
    operator delete(v7[0]);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
}

void sub_1B1B04CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a15);
  if (*(char *)(v15 - 17) < 0) {
    operator delete(*(void **)(v15 - 40));
  }
  _Unwind_Resume(a1);
}

void quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::addStateImpl(uint64_t a1, uint64_t *a2, float *a3)
{
  quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::writeState(a1, a3);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  while (v5 != v6)
  {
    quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::writeArc(a1);
    v5 += 16;
  }
}

void quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::writeState(uint64_t a1, float *a2)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  BOOL v3 = (float)(*a2 + 0.00097656) < INFINITY || *a2 > INFINITY;
  unsigned int v4 = *(void **)(a1 + 88);
  long long v5 = *(_OWORD *)(a1 + 224);
  long long v42 = *(_OWORD *)(a1 + 208);
  long long v43 = v5;
  uint64_t v44 = *(void *)(a1 + 240);
  long long v6 = *(_OWORD *)(a1 + 160);
  long long v38 = *(_OWORD *)(a1 + 144);
  long long v39 = v6;
  long long v7 = *(_OWORD *)(a1 + 192);
  long long v40 = *(_OWORD *)(a1 + 176);
  long long v41 = v7;
  long long v8 = *(_OWORD *)(a1 + 128);
  long long v36 = *(_OWORD *)(a1 + 112);
  long long v37 = v8;
  MEMORY[0x1B3EA7E70](v26, v4);
  long long v9 = (char *)v4 + *(void *)(*v4 - 24);
  if ((v9[32] & 5) == 0)
  {
    uint64_t v10 = *((void *)v9 + 5);
    long long v47 = v36;
    long long v48 = v37;
    long long v49 = v38;
    long long v50 = v39;
    uint64_t v55 = v44;
    long long v53 = v42;
    long long v54 = v43;
    long long v51 = v40;
    long long v52 = v41;
    (*(void (**)(void *__return_ptr))(*(void *)v10 + 40))(v45);
    if (v46 == -1) {
      std::ios_base::clear((std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)), *(_DWORD *)((char *)v4 + *(void *)(*v4 - 24) + 32) | 4);
    }
  }
  MEMORY[0x1B3EA7E80](v26);
  uint64_t v11 = (quasar::lm *)std::ostream::write();
  uint64_t v12 = *(void *)(a1 + 240) + 4;
  *(void *)(a1 + 240) = v12;
  uint64_t v13 = *(void *)(a1 + 88) + *(void *)(**(void **)(a1 + 88) - 24);
  if ((*(unsigned char *)(v13 + 32) & 5) != 0)
  {
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    uint64_t v14 = -1;
    uint64_t v55 = -1;
  }
  else
  {
    uint64_t v11 = (quasar::lm *)(*(void *(**)(long long *__return_ptr))(**(void **)(v13 + 40) + 32))(&v47);
    uint64_t v12 = *(void *)(a1 + 240);
    uint64_t v14 = v55;
  }
  if (v12 == v14)
  {
    quasar::lm::nullstream(v11);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v45, 5, "writeState", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 307);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v45);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v45);
  }
  if (v3)
  {
    uint64_t v15 = *(void **)(a1 + 88);
    long long v16 = *(_OWORD *)(a1 + 480);
    long long v34 = *(_OWORD *)(a1 + 496);
    uint64_t v35 = *(void *)(a1 + 512);
    long long v17 = *(_OWORD *)(a1 + 432);
    long long v29 = *(_OWORD *)(a1 + 416);
    long long v30 = v17;
    long long v18 = *(_OWORD *)(a1 + 448);
    long long v32 = *(_OWORD *)(a1 + 464);
    long long v33 = v16;
    long long v31 = v18;
    long long v19 = *(_OWORD *)(a1 + 400);
    long long v27 = *(_OWORD *)(a1 + 384);
    long long v28 = v19;
    MEMORY[0x1B3EA7E70](v26, v15);
    long long v20 = (char *)v15 + *(void *)(*v15 - 24);
    if ((v20[32] & 5) == 0)
    {
      uint64_t v21 = *((void *)v20 + 5);
      long long v47 = v27;
      long long v48 = v28;
      long long v49 = v29;
      long long v50 = v30;
      uint64_t v55 = v35;
      long long v53 = v33;
      long long v54 = v34;
      long long v51 = v31;
      long long v52 = v32;
      (*(void (**)(void *__return_ptr))(*(void *)v21 + 40))(v45);
      if (v46 == -1) {
        std::ios_base::clear((std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)), *(_DWORD *)((char *)v15 + *(void *)(*v15 - 24) + 32) | 4);
      }
    }
    MEMORY[0x1B3EA7E80](v26);
    uint64_t v22 = (quasar::lm *)std::ostream::write();
    uint64_t v23 = *(void *)(a1 + 512) + 8;
    *(void *)(a1 + 512) = v23;
    uint64_t v24 = *(void *)(a1 + 88) + *(void *)(**(void **)(a1 + 88) - 24);
    if ((*(unsigned char *)(v24 + 32) & 5) != 0)
    {
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      uint64_t v25 = -1;
      uint64_t v55 = -1;
    }
    else
    {
      uint64_t v22 = (quasar::lm *)(*(void *(**)(long long *__return_ptr))(**(void **)(v24 + 40) + 32))(&v47);
      uint64_t v23 = *(void *)(a1 + 512);
      uint64_t v25 = v55;
    }
    if (v23 == v25)
    {
      quasar::lm::nullstream(v22);
    }
    else
    {
      quasar::lm::LogMessage::LogMessage(v45, 5, "writeState", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 318);
      quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v45);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v45);
    }
  }
}

void sub_1B1B051FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  MEMORY[0x1B3EA7E80](va);
  _Unwind_Resume(a1);
}

void quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::writeArc(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  long long v2 = *(_OWORD *)(a1 + 328);
  long long v3 = *(_OWORD *)(a1 + 360);
  long long v21 = *(_OWORD *)(a1 + 344);
  long long v22 = v3;
  long long v4 = *(_OWORD *)(a1 + 264);
  long long v5 = *(_OWORD *)(a1 + 296);
  long long v6 = *(_OWORD *)(a1 + 312);
  long long v17 = *(_OWORD *)(a1 + 280);
  long long v18 = v5;
  long long v7 = *(void **)(a1 + 88);
  uint64_t v23 = *(void *)(a1 + 376);
  long long v19 = v6;
  long long v20 = v2;
  long long v15 = *(_OWORD *)(a1 + 248);
  long long v16 = v4;
  MEMORY[0x1B3EA7E70](v14, v7);
  long long v8 = (char *)v7 + *(void *)(*v7 - 24);
  if ((v8[32] & 5) == 0)
  {
    uint64_t v9 = *((void *)v8 + 5);
    long long v25 = v15;
    long long v26 = v16;
    long long v27 = v17;
    long long v28 = v18;
    uint64_t v33 = v23;
    long long v31 = v21;
    long long v32 = v22;
    long long v29 = v19;
    long long v30 = v20;
    (*(void (**)(void *__return_ptr))(*(void *)v9 + 40))(v24);
    if (v24[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)), *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + 32) | 4);
    }
  }
  MEMORY[0x1B3EA7E80](v14);
  uint64_t v10 = (quasar::lm *)std::ostream::write();
  uint64_t v11 = *(void *)(a1 + 376) + 16;
  *(void *)(a1 + 3--*(_DWORD *)(a9 + 76) = v11;
  uint64_t v12 = *(void *)(a1 + 88) + *(void *)(**(void **)(a1 + 88) - 24);
  if ((*(unsigned char *)(v12 + 32) & 5) != 0)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    uint64_t v13 = -1;
    uint64_t v33 = -1;
  }
  else
  {
    uint64_t v10 = (quasar::lm *)(*(void *(**)(long long *__return_ptr))(**(void **)(v12 + 40) + 32))(&v25);
    uint64_t v11 = *(void *)(a1 + 376);
    uint64_t v13 = v33;
  }
  if (v11 == v13)
  {
    quasar::lm::nullstream(v10);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v24, 5, "writeArc", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 333);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v24);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v24);
  }
}

void sub_1B1B054A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  MEMORY[0x1B3EA7E80](va);
  _Unwind_Resume(a1);
}

uint64_t quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::buildImpl()
{
  return std::ostream::flush();
}

std::string *fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::TypeString@<X0>(std::string *a1@<X8>)
{
  return std::string::append(a1, "_transducer");
}

void sub_1B1B05528(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::lm::fst_builder::MutableFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~MutableFstBuilder()
{
}

void *quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::~SqueezedFstBuilder(void *a1)
{
  *a1 = &unk_1F0A57CD8;
  uint64_t v2 = a1[13];
  a1[13] = 0;
  if (v2) {
    MEMORY[0x1B3EA8670](v2, 0x1000C40451B5BE8);
  }
  return a1;
}

void quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::~SqueezedFstBuilder(void *a1)
{
  *a1 = &unk_1F0A57CD8;
  uint64_t v2 = a1[13];
  a1[13] = 0;
  if (v2) {
    MEMORY[0x1B3EA8670](v2, 0x1000C40451B5BE8);
  }
  JUMPOUT(0x1B3EA8670);
}

void *quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::~SqueezedFstBuilder(void *a1)
{
  *a1 = &unk_1F0A57CA8;
  uint64_t v2 = a1[13];
  a1[13] = 0;
  if (v2) {
    MEMORY[0x1B3EA8670](v2, 0x1000C40451B5BE8);
  }
  return a1;
}

void quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::~SqueezedFstBuilder(void *a1)
{
  *a1 = &unk_1F0A57CA8;
  uint64_t v2 = a1[13];
  a1[13] = 0;
  if (v2) {
    MEMORY[0x1B3EA8670](v2, 0x1000C40451B5BE8);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::TropicalWeightTpl<float>::Type()
{
  {
    operator new();
  }
  return fst::TropicalWeightTpl<float>::Type(void)::type;
}

void sub_1B1B058D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1B3EA8670](v15, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

float kaldi::NccfToPovFeature(kaldi *this, float a2)
{
  float v2 = -1.0;
  if (a2 >= -1.0) {
    float v2 = a2;
  }
  if (a2 <= 1.0) {
    float v3 = v2;
  }
  else {
    float v3 = 1.0;
  }
  return pow(1.0001 - v3, 0.15) + -1.0;
}

float kaldi::NccfToPov(kaldi *this, float a2)
{
  float v2 = fabsf(a2);
  if (v2 > 1.0) {
    float v2 = 1.0;
  }
  double v3 = v2;
  double v4 = v2 + -1.0;
  long double v5 = exp(v4 * 7.5) * 5.4 + -5.2 + v2 * 4.8;
  long double v6 = v5 + exp(v3 * -10.0) * -2.0;
  float v7 = v6 + exp(v4 * 20.0) * 4.2;
  return 1.0 / (exp(-v7) + 1.0);
}

void kaldi::ComputeCorrelation(uint64_t a1, int a2, int a3, int a4, void *a5, void *a6)
{
  memset(v27, 0, sizeof(v27));
  kaldi::Vector<float>::Resize(v27, *(unsigned int *)(a1 + 8), 1);
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)v27, (const void **)a1);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = *(const void **)a1;
  LODWORD(v25) = a4;
  double v12 = kaldi::VectorBase<float>::Sum((uint64_t)&v24);
  kaldi::VectorBase<float>::Add((uint64_t)v27, (float)-*(float *)&v12 / (float)a4);
  _OWORD v23[2] = 0;
  v23[0] = (const float *)v27[0];
  v23[1] = (const float *)a4;
  float v13 = kaldi::VecVec<float>((uint64_t)v23, v23);
  if (a2 <= a3)
  {
    float v14 = v13;
    uint64_t v15 = 0;
    uint64_t v16 = 4 * a2;
    int v17 = a3 - a2 + 1;
    do
    {
      int v21 = 0;
      uint64_t v22 = 0;
      long long v19 = (const float *)((char *)v27[0] + v16);
      int v20 = a4;
      float v18 = kaldi::VecVec<float>((uint64_t)&v19, &v19);
      *(float *)(*a5 + 4 * v15) = kaldi::VecVec<float>((uint64_t)v23, &v19);
      *(float *)(*a6 + 4 * v15++) = v14 * v18;
      v16 += 4;
    }
    while (v17 != v15);
  }
  kaldi::Vector<float>::Destroy((uint64_t)v27);
}

void sub_1B1B05B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::ComputeNccf(uint64_t *result, uint64_t *a2, uint64_t *a3, float a4)
{
  uint64_t v4 = *((unsigned int *)result + 2);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *result;
    uint64_t v7 = *a2;
    uint64_t v8 = *a3;
    do
    {
      float v9 = *(float *)(v7 + 4 * v5) + a4;
      float v10 = fabsf(sqrtf(v9));
      BOOL v11 = v9 == -INFINITY;
      float v12 = INFINITY;
      if (!v11) {
        float v12 = v10;
      }
      if (v12 == 0.0) {
        float v13 = 0.0;
      }
      else {
        float v13 = *(float *)(v6 + 4 * v5) / v12;
      }
      *(float *)(v8 + 4 * v5++) = v13;
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t quasar::RecogAudioBufferBase::RecogAudioBufferBase(uint64_t this, char a2)
{
  *(void *)this = &unk_1F0A55258;
  *(unsigned char *)(this + 8) = a2;
  return this;
}

uint64_t quasar::RecogAudioBufferBase::setServerSideEndPointing(uint64_t this, char a2)
{
  *(unsigned char *)(this + 8) = a2;
  return this;
}

void *quasar::operator<<(void *a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 0:
      double v3 = "AudioAdded";
      uint64_t v4 = 10;
      goto LABEL_7;
    case 1:
      double v3 = "AudioEndPointedClient";
      goto LABEL_5;
    case 2:
      double v3 = "AudioEndPointedServer";
LABEL_5:
      uint64_t v4 = 21;
      goto LABEL_7;
    case 3:
      double v3 = "AudioMaxBufferLengthReached";
      uint64_t v4 = 27;
LABEL_7:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
      break;
    default:
      return a1;
  }
  return a1;
}

{
  void *v4;
  char *v5;
  void **v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char *v10;
  void **v11;
  uint64_t v12;
  void *v13;
  void *__p[2];
  unsigned __int8 v16;
  void *v17[2];
  unsigned __int8 v18;

  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{\"gender\": ", 11);
  if (*a2) {
    uint64_t v5 = "\"Female\"";
  }
  else {
    uint64_t v5 = "\"Male\"";
  }
  std::string::basic_string[abi:ne180100]<0>(v17, v5);
  if ((v18 & 0x80u) == 0) {
    uint64_t v6 = v17;
  }
  else {
    uint64_t v6 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    uint64_t v7 = v18;
  }
  else {
    uint64_t v7 = (uint64_t)v17[1];
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
  float v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", \"default\": ", 13);
  if (a2[1]) {
    float v10 = "\"Female\"";
  }
  else {
    float v10 = "\"Male\"";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v10);
  if ((v16 & 0x80u) == 0) {
    BOOL v11 = __p;
  }
  else {
    BOOL v11 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    float v12 = v16;
  }
  else {
    float v12 = (uint64_t)__p[1];
  }
  float v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"}", 1);
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v18 < 0) {
    operator delete(v17[0]);
  }
  return a1;
}

void quasar::AppLmData::AppLmData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::size_type v6 = *(void *)(a3 + 8);
    if (v6)
    {
      std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a3, v6);
      goto LABEL_7;
    }
  }
  else if (*(unsigned char *)(a3 + 23))
  {
    std::string v8 = *(std::string *)a3;
    goto LABEL_7;
  }
  std::string::basic_string[abi:ne180100]<0>(&v8, "app-lm.data");
LABEL_7:
  uint64_t v7 = *a4;
  *a4 = 0;
  void v9[3] = v7;
  std::string::basic_string[abi:ne180100]<0>(v9, "");
  quasar::LmData::LmData();
}

void sub_1B1B06604(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  JUMPOUT(0x1B1B06610);
}

quasar::SystemConfig *quasar::SystemConfig::SystemConfig(quasar::SystemConfig *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  std::string v8 = quasar::SystemConfig::SystemConfig(a1);
  if (quasar::SystemConfig::readJsonFile((uint64_t)v8, a2, a3, a4, 0, 0) == 2)
  {
    memset(v14, 0, sizeof(v14));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    float v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Error reading JSON config file: ", 32);
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v14);
  }
  return a1;
}

void sub_1B1B06798(_Unwind_Exception *a1)
{
  quasar::SystemConfig::~SystemConfig(v1);
  _Unwind_Resume(a1);
}

void quasar::SystemConfig::Register<std::vector<std::pair<std::string,std::string>>>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  quasar::SystemConfig::Register(a1, a2, a3);
  quasar::SystemConfig::Version::Version(&v20, a6, a7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  int v21 = __p;
  uint64_t v15 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1464), (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v21);
  v15[7] = v20;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  quasar::SystemConfig::Version::Version(&v20, a8, a9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  int v21 = __p;
  uint64_t v16 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1488), (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v21);
  v16[7] = v20;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!a5) {
      return;
    }
  }
  else if (!a5)
  {
    return;
  }
  __p[0] = (void *)(a1 + 816);
  int v17 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1512), (const void **)(a1 + 816), (uint64_t)&std::piecewise_construct, (long long **)__p)+ 7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v17, (const void **)__p, (uint64_t)__p);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1B06930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void quasar::AppLmData::getOrderedOovs(quasar::AppLmData *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  double v3 = a2 + 2;
  for (uint64_t i = (char *)this + 1120; ; std::string::operator=((std::string *)(v6 - 56), (const std::string *)(i + 16)))
  {
    uint64_t i = *(char **)i;
    unint64_t v5 = a2[1];
    if (!i) {
      break;
    }
    if (v5 >= *v3)
    {
      uint64_t v6 = std::vector<quasar::AppLmData::Oov>::__emplace_back_slow_path<quasar::AppLmData::Oov const&>(a2, (long long *)(i + 40));
    }
    else
    {
      std::allocator<quasar::AppLmData::Oov>::construct[abi:ne180100]<quasar::AppLmData::Oov,quasar::AppLmData::Oov const&>((int)v3, (std::string *)a2[1], (long long *)(i + 40));
      uint64_t v6 = v5 + 56;
      a2[1] = v5 + 56;
    }
    a2[1] = v6;
  }
  unint64_t v7 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a2) >> 3));
  if (v5 == *a2) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  std::__introsort<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *,false>(*a2, a2[1], v8, 1);
}

void sub_1B1B06A70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<quasar::AppLmData::Oov>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::AppLmData::observeOov(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v5 = a1 + 1104;
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 1104), a2))
  {
    v7.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, a2, (uint64_t)&std::piecewise_construct, (long long **)&v7);
    *((_DWORD *)v6 + 22) += a3;
  }
  else
  {
    long long v11 = 0uLL;
    v14[0] = 0;
    v14[1] = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v14;
    int v15 = a3;
    std::pair<std::string const,quasar::AppLmData::Oov>::pair[abi:ne180100]<std::string&,quasar::AppLmData::Oov&,0>(&v7, (long long *)a2, &v11);
    std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::AppLmData::Oov>>(v5, (unsigned __int8 *)&v7, (long long *)&v7);
    std::__tree<std::string>::destroy((uint64_t)v10, v10[1]);
    if (v9 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v7.__r_.__value_.__l.__data_);
    }
    std::__tree<std::string>::destroy((uint64_t)&v13, v14[0]);
    if (SHIBYTE(v12) < 0) {
      operator delete((void *)v11);
    }
  }
}

void sub_1B1B06B94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  std::pair<std::string const,quasar::AppLmData::Oov>::~pair((uint64_t)va);
  quasar::AppLmData::Oov::~Oov((char **)va1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,quasar::AppLmData::Oov>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void quasar::AppLmData::Oov::~Oov(char **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t quasar::AppLmData::countOovLme(quasar::AppLmData *this)
{
  unsigned int v1 = *((_DWORD *)this + 294) + 1;
  *((_DWORD *)this + 294) = v1;
  int v2 = *((_DWORD *)this + 295);
  BOOL v3 = v1 <= v2 || v2 < 1;
  uint64_t v4 = v3;
  if (!v3 && quasar::gLogLevel >= 6)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Utterance skipped as number of LMEs in utterance exceed threshold", 65);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v6);
  }
  return v4;
}

void sub_1B1B06CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::AppLmData::addSentence(uint64_t a1, unsigned int *a2, std::string *a3, uint64_t a4, uint64_t a5, int a6, _DWORD *a7)
{
  unsigned int v11 = *a2;
  memset(&v60, 0, sizeof(v60));
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v59 = *(std::string *)a4;
  }
  unsigned int v58 = 1;
  if (a6)
  {
    if (*(char *)(a4 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else {
      std::string __str = *(std::string *)a4;
    }
    quasar::LmData::parseCountPhrase(&__str, (uint64_t)&v59, (int *)&v58);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  if (quasar::LmData::tokenizeSentence(a1, (uint64_t)&v59, &v54))
  {
    __p[0] = 0;
    __p[1] = 0;
    long long v36 = 0;
    *(_DWORD *)(a1 + 11--*(_DWORD *)(a9 + 76) = 0;
    uint64_t v13 = v54;
    uint64_t v12 = v55;
    if (v54 != v55)
    {
      while (1)
      {
        uint64_t v14 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1152, (const void **)v13);
        if (a1 + 1160 == v14) {
          break;
        }
        uint64_t v15 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
        if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v60.__r_.__value_.__l.__size_;
        }
        uint64_t v17 = *(unsigned __int8 *)(v13 + 23);
        int v18 = (char)v17;
        if ((v17 & 0x80u) != 0) {
          uint64_t v17 = *(void *)(v13 + 8);
        }
        if (size != v17) {
          goto LABEL_30;
        }
        if (v18 >= 0) {
          char v19 = (unsigned __int8 *)v13;
        }
        else {
          char v19 = *(unsigned __int8 **)v13;
        }
        if ((*((unsigned char *)&v60.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (memcmp(v60.__r_.__value_.__l.__data_, v19, v60.__r_.__value_.__l.__size_)) {
            goto LABEL_30;
          }
        }
        else if (*((unsigned char *)&v60.__r_.__value_.__s + 23))
        {
          uint64_t v20 = &v60;
          while (v20->__r_.__value_.__s.__data_[0] == *v19)
          {
            uint64_t v20 = (std::string *)((char *)v20 + 1);
            ++v19;
            if (!--v15) {
              goto LABEL_38;
            }
          }
LABEL_30:
          std::string::operator=(&v60, (const std::string *)v13);
          ++*(_DWORD *)(a1 + 1176);
          uint64_t v21 = v14 + 56;
LABEL_31:
          uint64_t v22 = (long long *)__p[1];
          if (__p[1] >= v36)
          {
            uint64_t v24 = (void *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)__p, (long long *)v21);
          }
          else
          {
            if (*(char *)(v21 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__p[1], *(const std::string::value_type **)v21, *(void *)(v21 + 8));
            }
            else
            {
              long long v23 = *(_OWORD *)v21;
              *((void *)__p[1] + 2) = *(void *)(v21 + 16);
              long long *v22 = v23;
            }
            uint64_t v24 = (char *)v22 + 24;
          }
          __p[1] = v24;
        }
LABEL_38:
        v13 += 32;
        if (v13 == v12) {
          goto LABEL_39;
        }
      }
      MEMORY[0x1B3EA7B20](&v60, "");
      uint64_t v21 = v13;
      goto LABEL_31;
    }
LABEL_39:
    int v25 = *(_DWORD *)(a1 + 1180);
    if (v25 <= 0 || *(_DWORD *)(a1 + 1176) <= v25)
    {
      uint64_t v26 = quasar::LmData::addTokenizedSentence(a1, *a2, a3, (uint64_t)__p, (_DWORD *)(a1 + 60 * v11 + 108), 0, v58, a7);
    }
    else
    {
      if (quasar::gLogLevel >= 6)
      {
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v37 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"Utterance skipped as number of LMEs in utterance exceed threshold", 65);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v37);
      }
      uint64_t v26 = 0;
      *(_DWORD *)(a1 + 60 * v11 + 116) += v58;
    }
    *(void *)&long long v37 = __p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  }
  else
  {
    if (quasar::gLogLevel >= 6)
    {
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
      std::operator+<char>();
      long long v27 = std::string::append(&v34, "'");
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      long long v36 = (void *)v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v36) >= 0) {
        long long v29 = __p;
      }
      else {
        long long v29 = (void **)__p[0];
      }
      if (SHIBYTE(v36) >= 0) {
        uint64_t v30 = HIBYTE(v36);
      }
      else {
        uint64_t v30 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)v29, v30);
      if (SHIBYTE(v36) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v37);
    }
    uint64_t v26 = 0;
    *(_DWORD *)(a1 + 60 * v11 + 116) += v58;
  }
  *(void *)&long long v37 = &v54;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  return v26;
}

void sub_1B1B07138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void **p_p)
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&p_p);
  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
  p_p = (void **)(v25 - 200);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&p_p);
  if (*(char *)(v25 - 121) < 0) {
    operator delete(*(void **)(v25 - 144));
  }
  if (*(char *)(v25 - 97) < 0) {
    operator delete(*(void **)(v25 - 120));
  }
  _Unwind_Resume(a1);
}

void quasar::AppLmData::addOovTokensFromSentence(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = a3 + 8;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  if (quasar::LmData::tokenizeSentence(a1, a2, &v19))
  {
    uint64_t v5 = v19;
    for (uint64_t i = v20; v5 != i; v5 += 32)
    {
      if (*(char *)(v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)v5, *(void *)(v5 + 8));
      }
      else
      {
        long long v7 = *(_OWORD *)v5;
        v14.__r_.__value_.__r.__words[2] = *(void *)(v5 + 16);
        *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
      }
      if (quasar::lm::SymbolTableData::tokenIsOov(*(quasar::lm::SymbolTableData **)(a1 + 96)))
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a3, (const void **)&v14.__r_.__value_.__l.__data_, (uint64_t)&v14);
        if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 1104), (unsigned __int8 *)&v14))
        {
          *(void *)&long long v9 = &v14;
          uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 1104, (unsigned __int8 *)&v14, (uint64_t)&std::piecewise_construct, (long long **)&v9);
          ++*((_DWORD *)v8 + 22);
        }
        else
        {
          long long v9 = 0uLL;
          v12[0] = 0;
          v12[1] = 0;
          uint64_t v10 = 0;
          unsigned int v11 = v12;
          int v13 = 1;
          std::pair<std::string const,quasar::AppLmData::Oov>::pair[abi:ne180100]<std::string const&,quasar::AppLmData::Oov&,0>((std::string *)&v15, (long long *)&v14, &v9);
          std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::AppLmData::Oov>>(a1 + 1104, (unsigned __int8 *)&v15, &v15);
          std::__tree<std::string>::destroy((uint64_t)v18, v18[1]);
          if (SHIBYTE(v17) < 0) {
            operator delete(*((void **)&v16 + 1));
          }
          if (SBYTE7(v16) < 0) {
            operator delete((void *)v15);
          }
          std::__tree<std::string>::destroy((uint64_t)&v11, v12[0]);
          if (SHIBYTE(v10) < 0) {
            operator delete((void *)v9);
          }
        }
      }
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
    }
  }
  else if (quasar::gLogLevel >= 6)
  {
    memset(v18, 0, sizeof(v18));
    long long v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Failed to tokenize sentence", 27);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v15);
  }
  *(void *)&long long v15 = &v19;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_1B1B0744C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24)
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a24);
  a24 = v25 - 128;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  std::__tree<std::string>::destroy(v24, *(char **)(v24 + 8));
  _Unwind_Resume(a1);
}

uint64_t quasar::AppLmData::setPronsForWord(uint64_t a1, void *a2, std::string *a3, unsigned char *a4)
{
  if (quasar::lm::SymbolTableData::tokenIsOov(*(quasar::lm::SymbolTableData **)(a1 + 96)))
  {
    *(_OWORD *)&v24.__r_.__value_.__r.__words[1] = 0uLL;
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24.__r_.__value_.__l.__size_;
    if (*a4)
    {
      std::string::size_type v8 = a3->__r_.__value_.__r.__words[0];
      long long v29 = &v24;
      p_std::string::size_type size = &v24.__r_.__value_.__l.__size_;
      if ((std::string::size_type *)v8 != &a3->__r_.__value_.__r.__words[1])
      {
        if (*(char *)(v8 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(v8 + 32), *(void *)(v8 + 40));
        }
        else {
          std::string v22 = *(std::string *)(v8 + 32);
        }
        quasar::PhonesetMapping::getNvASRPhoneSequence(*(void *)(a1 + 1144), (uint64_t)&v22);
      }
    }
    long long v9 = (void *)(a1 + 1104);
    if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v9, (unsigned __int8 *)a2))
    {
      int v10 = *a4;
      __p[0] = a2;
      unsigned int v11 = std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v9, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (long long **)__p);
      uint64_t v12 = &v24;
      if (!v10) {
        uint64_t v12 = a3;
      }
      int v13 = (uint64_t **)(v11 + 64);
      if (v13 != (uint64_t **)v12)
      {
        if (v10) {
          std::string v14 = &v24.__r_.__value_.__l.__size_;
        }
        else {
          std::string v14 = &a3->__r_.__value_.__l.__size_;
        }
        std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v13, v12->__r_.__value_.__l.__data_, v14);
      }
    }
    else
    {
      if (*a4) {
        uint64_t v20 = (const void ***)&v24;
      }
      else {
        uint64_t v20 = (const void ***)a3;
      }
      quasar::AppLmData::Oov::Oov(&v22, (long long *)a2, v20, 0);
      std::pair<std::string,quasar::AppLmData::Oov>::pair[abi:ne180100]<std::string const&,quasar::AppLmData::Oov&,0>((std::string *)__p, (long long *)a2, (long long *)&v22);
      std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__emplace_unique_key_args<std::string,std::pair<std::string,quasar::AppLmData::Oov>>((uint64_t)v9, (unsigned __int8 *)__p, (long long *)__p);
      std::__tree<std::string>::destroy((uint64_t)v28, *((char **)&v28[0] + 1));
      if (SHIBYTE(v27) < 0) {
        operator delete(*((void **)&v26 + 1));
      }
      if (SBYTE7(v26) < 0) {
        operator delete(__p[0]);
      }
      std::__tree<std::string>::destroy((uint64_t)v23, v23[1]);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v19 = 1;
    std::__tree<std::string>::destroy((uint64_t)&v24, (char *)v24.__r_.__value_.__l.__size_);
  }
  else
  {
    if (quasar::gLogLevel >= 5)
    {
      memset(v28, 0, sizeof(v28));
      long long v26 = 0u;
      long long v27 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator+<char>();
      long long v15 = std::string::append(&v24, " (word is not OOV)");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v22.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v17 = &v22;
      }
      else {
        long long v17 = (std::string *)v22.__r_.__value_.__r.__words[0];
      }
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v22.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v17, size);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    return 0;
  }
  return v19;
}

void sub_1B1B0788C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, char *a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
}

uint64_t quasar::AppLmData::canAddProns(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6) {
    BOOL v7 = a3[2] == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::string::size_type v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"orthography=", 12);
      int v9 = *(char *)(a2 + 23);
      if (v9 >= 0) {
        uint64_t v10 = a2;
      }
      else {
        uint64_t v10 = *(void *)a2;
      }
      if (v9 >= 0) {
        uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v11 = *(void *)(a2 + 8);
      }
      uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" pronSize=", 10);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    return 3;
  }
  else if (quasar::lm::SymbolTableData::tokenIsOov(*(quasar::lm::SymbolTableData **)(a1 + 96)))
  {
    *(_OWORD *)&v22.__r_.__value_.__r.__words[1] = 0uLL;
    v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22.__r_.__value_.__l.__size_;
    if (a4)
    {
      uint64_t v16 = *a3;
      long long v41 = &v22;
      p_std::string::size_type size = &v22.__r_.__value_.__l.__size_;
      if ((uint64_t *)v16 != a3 + 1)
      {
        if (*(char *)(v16 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)(v16 + 32), *(void *)(v16 + 40));
        }
        else {
          std::string v40 = *(std::string *)(v16 + 32);
        }
        quasar::PhonesetMapping::getNvASRPhoneSequence(*(void *)(a1 + 1144), (uint64_t)&v40);
      }
    }
    uint64_t v13 = 0;
    std::__tree<std::string>::destroy((uint64_t)&v22, (char *)v22.__r_.__value_.__l.__size_);
  }
  else
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator+<char>();
      long long v17 = std::string::append(&v22, " (word is not OOV)");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v19 = &v40;
      }
      else {
        uint64_t v19 = (std::string *)v40.__r_.__value_.__r.__words[0];
      }
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v40.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v19, size);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    return 1;
  }
  return v13;
}

void sub_1B1B07CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, char *a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

void quasar::AppLmData::generateLmeData()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(__p, "•|\\(|\\)|\"|\\[|\\]|\\{|\\}|®|,|;|\\?|\\!|\\\\"");
  quasar::BasicTextSanitizer::BasicTextSanitizer((quasar::TextSanitizer *)v1);
}

void sub_1B1B089C8()
{
}

void sub_1B1B089F8()
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&STACK[0x9F0]);
  STACK[0x9F0] = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x9F0]);
  JUMPOUT(0x1B1B08AE4);
}

void sub_1B1B08A14()
{
}

void sub_1B1B08A20()
{
}

void sub_1B1B08A28()
{
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete((void *)STACK[0x330]);
  }
  JUMPOUT(0x1B1B08B00);
}

void sub_1B1B08A40(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1B08B00);
}

void sub_1B1B08A50()
{
}

void sub_1B1B08A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__tree<std::string>::destroy((uint64_t)&a69, a70);
  STACK[0x9F0] = (unint64_t)&a17;
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x9F0]);
  JUMPOUT(0x1B1B08AA0);
}

uint64_t quasar::AppLmData::getLmeThreshold(quasar::AppLmData *this)
{
  return *((unsigned int *)this + 295);
}

uint64_t *quasar::AppLmData::getSupportedSlots@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  BOOL v3 = (const void **)this[144];
  uint64_t v4 = this + 145;
  if (v3 != (const void **)(this + 145))
  {
    do
    {
      this = std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a2, v3 + 4, (uint64_t)(v3 + 4));
      uint64_t v5 = (uint64_t *)v3[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (uint64_t *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          BOOL v3 = (const void **)v6;
        }
        while (!v7);
      }
      BOOL v3 = (const void **)v6;
    }
    while (v6 != v4);
  }
  return this;
}

void sub_1B1B08B9C(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void quasar::AppLmData::~AppLmData(quasar::AppLmData *this)
{
  *(void *)this = &unk_1F0A59340;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1152, *((void **)this + 145));
  uint64_t v2 = *((void *)this + 143);
  *((void *)this + 143) = 0;
  if (v2) {
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)this + 1144, v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::~__hash_table((uint64_t)this + 1104);
  if (*((char *)this + 1103) < 0) {
    operator delete(*((void **)this + 135));
  }
  if (*((char *)this + 1071) < 0) {
    operator delete(*((void **)this + 131));
  }
  quasar::LmData::~LmData(this);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A59340;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1152, *((void **)this + 145));
  uint64_t v2 = *((void *)this + 143);
  *((void *)this + 143) = 0;
  if (v2) {
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)this + 1144, v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::~__hash_table((uint64_t)this + 1104);
  if (*((char *)this + 1103) < 0) {
    operator delete(*((void **)this + 135));
  }
  if (*((char *)this + 1071) < 0) {
    operator delete(*((void **)this + 131));
  }
  quasar::LmData::~LmData(this);
  JUMPOUT(0x1B3EA8670);
}

std::string *std::pair<std::string const,quasar::AppLmData::Oov>::pair[abi:ne180100]<std::string&,quasar::AppLmData::Oov&,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[2], (const void ***)a3 + 3);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a3 + 12);
  return this;
}

void sub_1B1B08D94(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<std::string>::set[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B1B08E08(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    long long v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      BOOL v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          std::string::size_type v8 = (const void ***)v7;
          BOOL v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          std::string::size_type v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = (char *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  BOOL v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B1B08F30(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::AppLmData::Oov>::pair[abi:ne180100]<std::string const&,quasar::AppLmData::Oov&,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[2], (const void ***)a3 + 3);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a3 + 12);
  return this;
}

void sub_1B1B08FE8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *quasar::AppLmData::Oov::Oov(std::string *this, long long *a2, const void ***a3, int a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  std::set<std::string>::set[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)&this[1], *a3, a3 + 1);
  LODWORD(this[2].__r_.__value_.__l.__data_) = a4;
  return this;
}

void sub_1B1B0909C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<std::string>::set[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *a1, const void **a2, const void ***a3)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a1, a2, a3);
  return a1;
}

void sub_1B1B090F0(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,quasar::AppLmData::Oov>::pair[abi:ne180100]<std::string const&,quasar::AppLmData::Oov&,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[2], (const void ***)a3 + 3);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a3 + 12);
  return this;
}

void sub_1B1B091A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::BasicTextSanitizer::BasicTextSanitizer(quasar::TextSanitizer *a1)
{
}

void sub_1B1B09228(_Unwind_Exception *a1)
{
  quasar::TextSanitizer::~TextSanitizer(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  long long v5 = result;
  if (result[2])
  {
    long long v6 = *result;
    long long v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    _DWORD v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      std::string::size_type v8 = (uint64_t *)v6[1];
    }
    else {
      std::string::size_type v8 = v6;
    }
    long long v15 = result;
    uint64_t v16 = v8;
    long long v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        BOOL v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          long long v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          uint64_t v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              BOOL v9 = a2;
            }
            while (!v12);
          }
          std::string::size_type v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          BOOL v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::string>::__emplace_multi<std::string const&>(v5, (uint64_t)(a2 + 4));
      uint64_t v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          std::string v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          std::string v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1B1B093AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const void **std::__tree<std::string>::__emplace_multi<std::string const&>(uint64_t **a1, uint64_t a2)
{
  std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v5, leaf_high, (uint64_t *)v6);
  return v6;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::AppLmData::Oov>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::AppLmData::Oov>,0>(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 48, *(char **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    JUMPOUT(0x1B3EA8670);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  long long v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  long long v7 = *v6;
  if (!*v6)
  {
    std::string::size_type v8 = v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  long long v7 = (std::string *)(v6 + 4);
  std::string::size_type v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  unsigned char v6[8] = 0;
  unsigned char v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B1B09684(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::vector<quasar::AppLmData::Oov>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<quasar::AppLmData::Oov>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::AppLmData::Oov>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__tree<std::string>::destroy(a2 + 24, *(char **)(a2 + 32));
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

uint64_t std::vector<quasar::AppLmData::Oov>::__emplace_back_slow_path<quasar::AppLmData::Oov const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249) {
    unint64_t v6 = 0x492492492492492;
  }
  else {
    unint64_t v6 = v4;
  }
  std::string v14 = a1 + 2;
  if (v6) {
    long long v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>((uint64_t)(a1 + 2), v6);
  }
  else {
    long long v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = (std::string *)&v7[56 * v3];
  uint64_t v13 = &v7[56 * v6];
  std::allocator<quasar::AppLmData::Oov>::construct[abi:ne180100]<quasar::AppLmData::Oov,quasar::AppLmData::Oov const&>(a1 + 16, v11, a2);
  BOOL v12 = &v11[2].__r_.__value_.__s.__data_[8];
  std::vector<quasar::AppLmData::Oov>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<quasar::AppLmData::Oov>::~__split_buffer(&v10);
  return v8;
}

void sub_1B1B0989C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::AppLmData::Oov>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::allocator<quasar::AppLmData::Oov>::construct[abi:ne180100]<quasar::AppLmData::Oov,quasar::AppLmData::Oov const&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t result = std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[1], (const void ***)a3 + 3);
  LODWORD(this[2].__r_.__value_.__l.__data_) = *((_DWORD *)a3 + 12);
  return result;
}

void sub_1B1B09910(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::AppLmData::Oov>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::AppLmData::Oov>,std::reverse_iterator<quasar::AppLmData::Oov*>,std::reverse_iterator<quasar::AppLmData::Oov*>,std::reverse_iterator<quasar::AppLmData::Oov*>>((uint64_t)(a1 + 2), a1[1], (uint64_t *)a1[1], *a1, (uint64_t *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::AppLmData::Oov>,std::reverse_iterator<quasar::AppLmData::Oov*>,std::reverse_iterator<quasar::AppLmData::Oov*>,std::reverse_iterator<quasar::AppLmData::Oov*>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    uint64_t v8 = a3 - 3;
    do
    {
      long long v9 = *((_OWORD *)v8 - 2);
      *(void *)(v7 - 40) = *(v8 - 2);
      *(_OWORD *)(v7 - 56) = v9;
      *(v8 - 3) = 0;
      *(v8 - 2) = 0;
      *(v8 - 4) = 0;
      *(void *)(v7 - 32) = *(v8 - 1);
      uint64_t v10 = *v8;
      *(void *)(v7 - ++*(void *)(result + 24) = *v8;
      uint64_t v11 = v7 - 24;
      uint64_t v12 = v8[1];
      *(void *)(v7 - 16) = v12;
      if (v12)
      {
        *(void *)(v10 + 16) = v11;
        *(v8 - 1) = (uint64_t)v8;
        *uint64_t v8 = 0;
        v8[1] = 0;
      }
      else
      {
        *(void *)(v7 - 32) = v11;
      }
      *(_DWORD *)(v7 - 8) = *((_DWORD *)v8 + 4);
      uint64_t v7 = *((void *)&v19 + 1) - 56;
      *((void *)&v19 + 1) -= 56;
      uint64_t v13 = v8 - 4;
      v8 -= 7;
    }
    while (v13 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AppLmData::Oov>,std::reverse_iterator<quasar::AppLmData::Oov*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AppLmData::Oov>,std::reverse_iterator<quasar::AppLmData::Oov*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AppLmData::Oov>,std::reverse_iterator<quasar::AppLmData::Oov*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AppLmData::Oov>,std::reverse_iterator<quasar::AppLmData::Oov*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::AppLmData::Oov>::destroy[abi:ne180100](v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::AppLmData::Oov>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::AppLmData::Oov>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 56;
    std::allocator<quasar::AppLmData::Oov>::destroy[abi:ne180100](v4, i - 56);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    v245 = (long long *)(a2 - 56);
    v241 = (const void ***)(a2 - 32);
    unint64_t j = a1;
    while (1)
    {
      while (1)
      {
        uint64_t v7 = j;
        uint64_t v8 = a2 - j;
        uint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2 - j) >> 3);
        a1 = v7;
        if (!(!v5 & v4))
        {
          switch(v9)
          {
            case 0:
            case 1:
              return;
            case 2:
              if (*(char *)(a2 - 33) < 0)
              {
                std::string::__init_copy_ctor_external(&v264, *(const std::string::value_type **)(a2 - 56), *(void *)(a2 - 48));
              }
              else
              {
                long long v96 = *v245;
                v264.__r_.__value_.__r.__words[2] = *(void *)(a2 - 40);
                *(_OWORD *)&v264.__r_.__value_.__l.__data_ = v96;
              }
              std::set<std::string>::set[abi:ne180100](v265, v241);
              unsigned int v266 = *(_DWORD *)(a2 - 8);
              if (*(char *)(v7 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v261, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
              }
              else
              {
                long long v237 = *(_OWORD *)v7;
                v261.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
                *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v237;
              }
              v238 = std::set<std::string>::set[abi:ne180100](v262, (const void ***)(v7 + 24));
              unsigned int v239 = *(_DWORD *)(v7 + 48);
              unsigned int v263 = v239;
              unsigned int v240 = v266;
              std::__tree<std::string>::destroy((uint64_t)v238, (char *)v262[1]);
              if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v261.__r_.__value_.__l.__data_);
              }
              std::__tree<std::string>::destroy((uint64_t)v265, (char *)v265[1]);
              if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v264.__r_.__value_.__l.__data_);
              }
              if (v240 > v239) {
                std::swap[abi:ne180100]<quasar::AppLmData::Oov>(v7, v245);
              }
              break;
            case 3:
              std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(v7, v7 + 56, (uint64_t)v245);
              break;
            case 4:
              std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(v7, v7 + 56, v7 + 112, (uint64_t)v245);
              break;
            case 5:
              std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *,0>(v7, v7 + 56, v7 + 112, v7 + 168, (uint64_t)v245);
              break;
            default:
              JUMPOUT(0);
          }
          return;
        }
        if (v8 <= 1343)
        {
          if (a4)
          {
            if (v7 != a2)
            {
              uint64_t v97 = v7 + 56;
              if (v7 + 56 != a2)
              {
                uint64_t v98 = 0;
                do
                {
                  uint64_t v99 = v97;
                  if (*(char *)(v7 + 79) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v316, *(const std::string::value_type **)v97, *(void *)(v7 + 64));
                  }
                  else
                  {
                    long long v100 = *(_OWORD *)v97;
                    v316.__r_.__value_.__r.__words[2] = *(void *)(v97 + 16);
                    *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v100;
                  }
                  std::set<std::string>::set[abi:ne180100]((uint64_t *)&v317, (const void ***)(v7 + 80));
                  unsigned int v320 = *(_DWORD *)(v7 + 104);
                  if (*(char *)(v7 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v312, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
                  }
                  else
                  {
                    long long v101 = *(_OWORD *)v7;
                    v312.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
                    *(_OWORD *)&v312.__r_.__value_.__l.__data_ = v101;
                  }
                  std::set<std::string>::set[abi:ne180100](&v313, (const void ***)(v7 + 24));
                  unsigned int v102 = *(_DWORD *)(v7 + 48);
                  unsigned int v315 = v102;
                  unsigned int v103 = v320;
                  std::__tree<std::string>::destroy((uint64_t)&v313, v314);
                  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v312.__r_.__value_.__l.__data_);
                  }
                  std::__tree<std::string>::destroy((uint64_t)&v317, v318);
                  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v316.__r_.__value_.__l.__data_);
                  }
                  if (v103 > v102)
                  {
                    long long v104 = *(_OWORD *)v99;
                    v307.__r_.__value_.__r.__words[2] = *(void *)(v99 + 16);
                    *(_OWORD *)&v307.__r_.__value_.__l.__data_ = v104;
                    *(void *)(v99 + 8) = 0;
                    *(void *)(v99 + 16) = 0;
                    *(void *)uint64_t v99 = 0;
                    unint64_t v105 = (void *)(v7 + 88);
                    uint64_t v106 = *(void *)(v7 + 88);
                    v308 = *(char ***)(v7 + 80);
                    v309 = (char *)v106;
                    uint64_t v310 = *(void *)(v7 + 96);
                    if (v310)
                    {
                      *(void *)(v106 + 16) = &v309;
                      *(void *)(v7 + 80) = v105;
                      *unint64_t v105 = 0;
                      *(void *)(v7 + 96) = 0;
                    }
                    else
                    {
                      v308 = &v309;
                    }
                    unsigned int v311 = *(_DWORD *)(v7 + 104);
                    for (uint64_t i = v98; ; i -= 56)
                    {
                      uint64_t v108 = a1;
                      uint64_t v109 = a1 + i;
                      std::string::size_type v110 = (void **)(a1 + i + 56);
                      if (*(char *)(a1 + i + 79) < 0) {
                        operator delete(*v110);
                      }
                      *(_OWORD *)std::string::size_type v110 = *(_OWORD *)v109;
                      *(void *)(a1 + i + 72) = *(void *)(v109 + 16);
                      *(unsigned char *)(v109 + 23) = 0;
                      *(unsigned char *)uint64_t v109 = 0;
                      std::__tree<std::string>::__move_assign(v109 + 80, (void *)(v109 + 24));
                      *(_DWORD *)(v109 + 104) = *(_DWORD *)(v109 + 48);
                      if (!i) {
                        break;
                      }
                      if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0) {
                        std::string::__init_copy_ctor_external(&v303, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
                      }
                      else {
                        std::string v303 = v307;
                      }
                      std::set<std::string>::set[abi:ne180100](&v304, (const void ***)&v308);
                      unsigned int v306 = v311;
                      unint64_t v111 = (const std::string::value_type **)(a1 + i - 56);
                      if (*(char *)(a1 + i - 33) < 0)
                      {
                        std::string::__init_copy_ctor_external(&v298, *v111, *(void *)(a1 + i - 48));
                      }
                      else
                      {
                        long long v112 = *(_OWORD *)v111;
                        v298.__r_.__value_.__r.__words[2] = *(void *)(a1 + i - 40);
                        *(_OWORD *)&v298.__r_.__value_.__l.__data_ = v112;
                      }
                      std::set<std::string>::set[abi:ne180100]((uint64_t *)&v299, (const void ***)(a1 + i - 32));
                      unsigned int v113 = *(_DWORD *)(a1 + i - 8);
                      unsigned int v302 = v113;
                      unsigned int v114 = v306;
                      std::__tree<std::string>::destroy((uint64_t)&v299, v300);
                      if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v298.__r_.__value_.__l.__data_);
                      }
                      std::__tree<std::string>::destroy((uint64_t)&v304, v305);
                      if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v303.__r_.__value_.__l.__data_);
                      }
                      if (v114 <= v113)
                      {
                        uint64_t v108 = a1 + i;
                        break;
                      }
                    }
                    if (*(char *)(v108 + 23) < 0) {
                      operator delete(*(void **)v108);
                    }
                    std::string::size_type v115 = (char ***)(a1 + i + 24);
                    long long v116 = *(_OWORD *)&v307.__r_.__value_.__l.__data_;
                    *(void *)(v108 + 16) = *((void *)&v307.__r_.__value_.__l + 2);
                    *(_OWORD *)uint64_t v108 = v116;
                    *((unsigned char *)&v307.__r_.__value_.__s + 23) = 0;
                    v307.__r_.__value_.__s.__data_[0] = 0;
                    uint64_t v117 = (char **)(v108 + 32);
                    std::__tree<std::string>::destroy((uint64_t)v115, *(char **)(v108 + 32));
                    *std::string::size_type v115 = v308;
                    uint64_t v118 = v309;
                    *(void *)(v108 + 32) = v309;
                    uint64_t v119 = v310;
                    *(void *)(v108 + 40) = v310;
                    if (v119)
                    {
                      unint64_t v120 = 0;
                      *((void *)v118 + 2) = v117;
                      v308 = &v309;
                      v309 = 0;
                      uint64_t v310 = 0;
                    }
                    else
                    {
                      *std::string::size_type v115 = v117;
                      unint64_t v120 = v309;
                    }
                    *(_DWORD *)(v108 + 48) = v311;
                    std::__tree<std::string>::destroy((uint64_t)&v308, v120);
                    if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v307.__r_.__value_.__l.__data_);
                    }
                  }
                  uint64_t v97 = v99 + 56;
                  v98 += 56;
                  uint64_t v7 = v99;
                }
                while (v99 + 56 != a2);
              }
            }
          }
          else if (v7 != a2)
          {
            uint64_t v214 = v7 + 56;
            if (v7 + 56 != a2)
            {
              v215 = (unsigned int *)(v7 + 104);
              do
              {
                uint64_t v216 = v214;
                if (*(char *)(v7 + 79) < 0)
                {
                  std::string::__init_copy_ctor_external(&v316, *(const std::string::value_type **)v214, *(void *)(v7 + 64));
                }
                else
                {
                  long long v217 = *(_OWORD *)v214;
                  v316.__r_.__value_.__r.__words[2] = *(void *)(v214 + 16);
                  *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v217;
                }
                v218 = (void *)(v7 + 80);
                std::set<std::string>::set[abi:ne180100]((uint64_t *)&v317, (const void ***)(v7 + 80));
                unsigned int v320 = *(_DWORD *)(v7 + 104);
                if (*(char *)(v7 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v312, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
                }
                else
                {
                  long long v219 = *(_OWORD *)v7;
                  v312.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
                  *(_OWORD *)&v312.__r_.__value_.__l.__data_ = v219;
                }
                std::set<std::string>::set[abi:ne180100](&v313, (const void ***)(v7 + 24));
                uint64_t v220 = v7;
                unsigned int v221 = *(_DWORD *)(v7 + 48);
                unsigned int v315 = v221;
                unsigned int v222 = v320;
                std::__tree<std::string>::destroy((uint64_t)&v313, v314);
                if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v312.__r_.__value_.__l.__data_);
                }
                std::__tree<std::string>::destroy((uint64_t)&v317, v318);
                if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v316.__r_.__value_.__l.__data_);
                }
                if (v222 > v221)
                {
                  long long v223 = *(_OWORD *)v216;
                  v307.__r_.__value_.__r.__words[2] = *(void *)(v216 + 16);
                  *(_OWORD *)&v307.__r_.__value_.__l.__data_ = v223;
                  *(void *)(v216 + 8) = 0;
                  *(void *)(v216 + 16) = 0;
                  *(void *)uint64_t v216 = 0;
                  v224 = (void *)(v220 + 88);
                  uint64_t v225 = *(void *)(v220 + 88);
                  v308 = *(char ***)(v220 + 80);
                  v309 = (char *)v225;
                  uint64_t v310 = *(void *)(v220 + 96);
                  if (v310)
                  {
                    *(void *)(v225 + 16) = &v309;
                    void *v218 = v224;
                    void *v224 = 0;
                    *(void *)(v220 + 96) = 0;
                  }
                  else
                  {
                    v308 = &v309;
                  }
                  unsigned int v311 = *(_DWORD *)(v220 + 104);
                  v226 = v215;
                  do
                  {
                    v227 = (void **)(v226 - 12);
                    if (*((char *)v226 - 25) < 0) {
                      operator delete(*v227);
                    }
                    *(_OWORD *)v227 = *(_OWORD *)(v226 - 26);
                    *((void *)v226 - 4) = *((void *)v226 - 11);
                    *((unsigned char *)v226 - 81) = 0;
                    *((unsigned char *)v226 - 104) = 0;
                    std::__tree<std::string>::__move_assign((uint64_t)(v226 - 6), (void *)v226 - 10);
                    unsigned int *v226 = *(v226 - 14);
                    if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0) {
                      std::string::__init_copy_ctor_external(&v303, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
                    }
                    else {
                      std::string v303 = v307;
                    }
                    std::set<std::string>::set[abi:ne180100](&v304, (const void ***)&v308);
                    unsigned int v306 = v311;
                    if (*((char *)v226 - 137) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v298, *((const std::string::value_type **)v226 - 20), *((void *)v226 - 19));
                    }
                    else
                    {
                      long long v228 = *((_OWORD *)v226 - 10);
                      v298.__r_.__value_.__r.__words[2] = *((void *)v226 - 18);
                      *(_OWORD *)&v298.__r_.__value_.__l.__data_ = v228;
                    }
                    std::set<std::string>::set[abi:ne180100]((uint64_t *)&v299, (const void ***)v226 - 17);
                    unsigned int v229 = *(v226 - 28);
                    unsigned int v302 = v229;
                    unsigned int v230 = v306;
                    std::__tree<std::string>::destroy((uint64_t)&v299, v300);
                    if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v298.__r_.__value_.__l.__data_);
                    }
                    std::__tree<std::string>::destroy((uint64_t)&v304, v305);
                    if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v303.__r_.__value_.__l.__data_);
                    }
                    v226 -= 14;
                  }
                  while (v230 > v229);
                  v231 = (void **)(v226 - 12);
                  if (*((char *)v226 - 25) < 0) {
                    operator delete(*v231);
                  }
                  long long v232 = *(_OWORD *)&v307.__r_.__value_.__l.__data_;
                  *((void *)v226 - 4) = *((void *)&v307.__r_.__value_.__l + 2);
                  *(_OWORD *)v231 = v232;
                  *((unsigned char *)&v307.__r_.__value_.__s + 23) = 0;
                  v307.__r_.__value_.__s.__data_[0] = 0;
                  v233 = v226 - 4;
                  std::__tree<std::string>::destroy((uint64_t)(v226 - 6), *((char **)v226 - 2));
                  *((void *)v226 - 3) = v308;
                  v234 = v309;
                  *((void *)v226 - 2) = v309;
                  uint64_t v235 = v310;
                  *((void *)v226 - 1) = v310;
                  if (v235)
                  {
                    v236 = 0;
                    *((void *)v234 + 2) = v233;
                    v308 = &v309;
                    v309 = 0;
                    uint64_t v310 = 0;
                  }
                  else
                  {
                    *((void *)v226 - 3) = v233;
                    v236 = v309;
                  }
                  unsigned int *v226 = v311;
                  std::__tree<std::string>::destroy((uint64_t)&v308, v236);
                  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v307.__r_.__value_.__l.__data_);
                  }
                }
                uint64_t v214 = v216 + 56;
                v215 += 14;
                uint64_t v7 = v216;
              }
              while (v216 + 56 != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            unint64_t v242 = v8;
            int64_t v254 = (unint64_t)(v9 - 2) >> 1;
            int64_t v121 = v254;
            do
            {
              int64_t v122 = v121;
              if (v254 >= v121)
              {
                uint64_t v123 = (2 * v121) | 1;
                uint64_t v124 = v7 + 56 * v123;
                uint64_t v125 = 2 * v121 + 2;
                int64_t v248 = v121;
                if (v125 < v9)
                {
                  if (*(char *)(v124 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v316, *(const std::string::value_type **)v124, *(void *)(v124 + 8));
                  }
                  else
                  {
                    long long v126 = *(_OWORD *)v124;
                    v316.__r_.__value_.__r.__words[2] = *(void *)(v124 + 16);
                    *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v126;
                  }
                  std::set<std::string>::set[abi:ne180100]((uint64_t *)&v317, (const void ***)(v7 + 56 * v123 + 24));
                  unsigned int v320 = *(_DWORD *)(v7 + 56 * v123 + 48);
                  if (*(char *)(v124 + 79) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v312, *(const std::string::value_type **)(v124 + 56), *(void *)(v124 + 64));
                  }
                  else
                  {
                    long long v127 = *(_OWORD *)(v124 + 56);
                    v312.__r_.__value_.__r.__words[2] = *(void *)(v124 + 72);
                    *(_OWORD *)&v312.__r_.__value_.__l.__data_ = v127;
                  }
                  std::set<std::string>::set[abi:ne180100](&v313, (const void ***)(v124 + 80));
                  unsigned int v128 = *(_DWORD *)(v124 + 104);
                  unsigned int v315 = v128;
                  unsigned int v129 = v320;
                  std::__tree<std::string>::destroy((uint64_t)&v313, v314);
                  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v312.__r_.__value_.__l.__data_);
                  }
                  std::__tree<std::string>::destroy((uint64_t)&v317, v318);
                  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v316.__r_.__value_.__l.__data_);
                  }
                  if (v129 > v128)
                  {
                    v124 += 56;
                    uint64_t v123 = v125;
                  }
                }
                if (*(char *)(v124 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v307, *(const std::string::value_type **)v124, *(void *)(v124 + 8));
                }
                else
                {
                  long long v130 = *(_OWORD *)v124;
                  v307.__r_.__value_.__r.__words[2] = *(void *)(v124 + 16);
                  *(_OWORD *)&v307.__r_.__value_.__l.__data_ = v130;
                }
                std::set<std::string>::set[abi:ne180100]((uint64_t *)&v308, (const void ***)(v124 + 24));
                int64_t v131 = v248;
                uint64_t v132 = v7 + 56 * v248;
                unsigned int v311 = *(_DWORD *)(v124 + 48);
                if (*(char *)(v132 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v303, *(const std::string::value_type **)v132, *(void *)(v132 + 8));
                  int64_t v131 = v248;
                }
                else
                {
                  long long v133 = *(_OWORD *)v132;
                  v303.__r_.__value_.__r.__words[2] = *(void *)(v132 + 16);
                  *(_OWORD *)&v303.__r_.__value_.__l.__data_ = v133;
                }
                uint64_t v134 = (const void ***)(v7 + 56 * v131 + 24);
                uint64_t v135 = v131;
                unint64_t v136 = std::set<std::string>::set[abi:ne180100](&v304, v134);
                uint64_t v137 = v7 + 56 * v135;
                unsigned int v140 = *(_DWORD *)(v137 + 48);
                uint64_t v139 = (unsigned int *)(v137 + 48);
                unsigned int v138 = v140;
                unsigned int v306 = v140;
                unsigned int v141 = v311;
                std::__tree<std::string>::destroy((uint64_t)v136, v305);
                if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v303.__r_.__value_.__l.__data_);
                }
                std::__tree<std::string>::destroy((uint64_t)&v308, v309);
                if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v307.__r_.__value_.__l.__data_);
                }
                int64_t v122 = v248;
                if (v141 <= v138)
                {
                  long long v142 = *(_OWORD *)v132;
                  v298.__r_.__value_.__r.__words[2] = *(void *)(v132 + 16);
                  *(_OWORD *)&v298.__r_.__value_.__l.__data_ = v142;
                  *(void *)(v132 + 8) = 0;
                  *(void *)(v132 + 16) = 0;
                  *(void *)uint64_t v132 = 0;
                  v299 = *v134;
                  uint64_t v143 = v7 + 56 * v248;
                  float32x2_t v146 = *(char **)(v143 + 32);
                  unint64_t v144 = (const void **)(v143 + 32);
                  unint64_t v145 = v146;
                  v300 = v146;
                  v301 = v144[1];
                  if (v301)
                  {
                    *((void *)v145 + 2) = &v300;
                    *uint64_t v134 = v144;
                    *unint64_t v144 = 0;
                    v144[1] = 0;
                  }
                  else
                  {
                    v299 = (const void **)&v300;
                  }
                  unsigned int v302 = *v139;
                  do
                  {
                    uint64_t v147 = v124;
                    if (*(char *)(v132 + 23) < 0) {
                      operator delete(*(void **)v132);
                    }
                    long long v148 = *(_OWORD *)v124;
                    *(void *)(v132 + 16) = *(void *)(v124 + 16);
                    *(_OWORD *)uint64_t v132 = v148;
                    *(unsigned char *)(v124 + 23) = 0;
                    *(unsigned char *)uint64_t v124 = 0;
                    uint64_t v149 = (uint64_t *)(v124 + 24);
                    std::__tree<std::string>::__move_assign(v132 + 24, (void *)(v124 + 24));
                    *(_DWORD *)(v132 + 48) = *(_DWORD *)(v124 + 48);
                    if (v254 < v123) {
                      break;
                    }
                    uint64_t v150 = (2 * v123) | 1;
                    uint64_t v124 = v7 + 56 * v150;
                    uint64_t v151 = 2 * v123 + 2;
                    if (v151 < v9)
                    {
                      if (*(char *)(v124 + 23) < 0)
                      {
                        std::string::__init_copy_ctor_external(&v293, *(const std::string::value_type **)v124, *(void *)(v124 + 8));
                      }
                      else
                      {
                        long long v152 = *(_OWORD *)v124;
                        v293.__r_.__value_.__r.__words[2] = *(void *)(v124 + 16);
                        *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v152;
                      }
                      std::set<std::string>::set[abi:ne180100]((uint64_t *)&v294, (const void ***)(v7 + 56 * v150 + 24));
                      unsigned int v297 = *(_DWORD *)(v7 + 56 * v150 + 48);
                      if (*(char *)(v124 + 79) < 0)
                      {
                        std::string::__init_copy_ctor_external(&v289, *(const std::string::value_type **)(v124 + 56), *(void *)(v124 + 64));
                      }
                      else
                      {
                        long long v153 = *(_OWORD *)(v124 + 56);
                        v289.__r_.__value_.__r.__words[2] = *(void *)(v124 + 72);
                        *(_OWORD *)&v289.__r_.__value_.__l.__data_ = v153;
                      }
                      std::set<std::string>::set[abi:ne180100](&v290, (const void ***)(v124 + 80));
                      unsigned int v154 = *(_DWORD *)(v124 + 104);
                      unsigned int v292 = v154;
                      unsigned int v155 = v297;
                      std::__tree<std::string>::destroy((uint64_t)&v290, v291);
                      if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v289.__r_.__value_.__l.__data_);
                      }
                      std::__tree<std::string>::destroy((uint64_t)&v294, v295);
                      if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v293.__r_.__value_.__l.__data_);
                      }
                      uint64_t v123 = (2 * v123) | 1;
                      BOOL v75 = v155 > v154;
                      uint64_t v7 = a1;
                      if (v75)
                      {
                        v124 += 56;
                        uint64_t v123 = v151;
                      }
                    }
                    else
                    {
                      uint64_t v123 = (2 * v123) | 1;
                    }
                    if (*(char *)(v124 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v285, *(const std::string::value_type **)v124, *(void *)(v124 + 8));
                    }
                    else
                    {
                      long long v156 = *(_OWORD *)v124;
                      v285.__r_.__value_.__r.__words[2] = *(void *)(v124 + 16);
                      *(_OWORD *)&v285.__r_.__value_.__l.__data_ = v156;
                    }
                    std::set<std::string>::set[abi:ne180100](&v286, (const void ***)(v124 + 24));
                    unsigned int v288 = *(_DWORD *)(v124 + 48);
                    if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0) {
                      std::string::__init_copy_ctor_external(&v281, v298.__r_.__value_.__l.__data_, v298.__r_.__value_.__l.__size_);
                    }
                    else {
                      std::string v281 = v298;
                    }
                    std::set<std::string>::set[abi:ne180100](&v282, &v299);
                    unsigned int v157 = v302;
                    unsigned int v284 = v302;
                    unsigned int v158 = v288;
                    std::__tree<std::string>::destroy((uint64_t)&v282, v283);
                    if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v281.__r_.__value_.__l.__data_);
                    }
                    std::__tree<std::string>::destroy((uint64_t)&v286, v287);
                    if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v285.__r_.__value_.__l.__data_);
                    }
                    uint64_t v132 = v147;
                  }
                  while (v158 <= v157);
                  if (*(char *)(v147 + 23) < 0) {
                    operator delete(*(void **)v147);
                  }
                  long long v159 = *(_OWORD *)&v298.__r_.__value_.__l.__data_;
                  *(void *)(v147 + 16) = *((void *)&v298.__r_.__value_.__l + 2);
                  *(_OWORD *)uint64_t v147 = v159;
                  *((unsigned char *)&v298.__r_.__value_.__s + 23) = 0;
                  v298.__r_.__value_.__s.__data_[0] = 0;
                  uint64_t v160 = v147 + 32;
                  std::__tree<std::string>::destroy(v147 + 24, *(char **)(v147 + 32));
                  *(void *)(v147 + ++*(void *)(result + 24) = v299;
                  float v161 = v300;
                  *(void *)(v147 + 32) = v300;
                  float v162 = v301;
                  *(void *)(v147 + 40) = v301;
                  if (v162)
                  {
                    float v163 = 0;
                    *((void *)v161 + 2) = v160;
                    v299 = (const void **)&v300;
                    v300 = 0;
                    v301 = 0;
                  }
                  else
                  {
                    uint64_t *v149 = v160;
                    float v163 = v300;
                  }
                  *(_DWORD *)(v147 + 48) = v302;
                  std::__tree<std::string>::destroy((uint64_t)&v299, v163);
                  if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v298.__r_.__value_.__l.__data_);
                  }
                  int64_t v122 = v248;
                }
              }
              int64_t v121 = v122 - 1;
            }
            while (v122);
            uint64_t v164 = v7;
            int64_t v165 = v242 / 0x38;
            v246 = (void *)(v164 + 32);
            do
            {
              uint64_t v166 = a1;
              long long v167 = *(_OWORD *)a1;
              uint64_t v168 = *(void *)(a1 + 24);
              v293.__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
              *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v167;
              *(void *)(a1 + 8) = 0;
              *(void *)(a1 + 16) = 0;
              *(void *)a1 = 0;
              uint64_t v169 = *(void *)(a1 + 32);
              uint64_t v170 = *(void *)(a1 + 40);
              v294 = (char **)v168;
              v295 = (char *)v169;
              uint64_t v296 = v170;
              if (v170)
              {
                *(void *)(v169 + 16) = &v295;
                *(void *)(a1 + ++*(void *)(result + 24) = v246;
                void *v246 = 0;
                v246[1] = 0;
              }
              else
              {
                v294 = &v295;
              }
              uint64_t v171 = 0;
              unsigned int v297 = *(_DWORD *)(a1 + 48);
              do
              {
                uint64_t v172 = v171 + 1;
                uint64_t v173 = v166 + 56 * (v171 + 1);
                uint64_t v174 = 2 * v171;
                uint64_t v171 = (2 * v171) | 1;
                uint64_t v175 = v174 + 2;
                if (v174 + 2 < v165)
                {
                  if (*(char *)(v173 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v316, *(const std::string::value_type **)v173, *(void *)(v173 + 8));
                  }
                  else
                  {
                    long long v176 = *(_OWORD *)v173;
                    v316.__r_.__value_.__r.__words[2] = *(void *)(v173 + 16);
                    *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v176;
                  }
                  std::set<std::string>::set[abi:ne180100]((uint64_t *)&v317, (const void ***)(v166 + 56 * v172 + 24));
                  unsigned int v320 = *(_DWORD *)(v166 + 56 * v172 + 48);
                  if (*(char *)(v173 + 79) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v312, *(const std::string::value_type **)(v173 + 56), *(void *)(v173 + 64));
                  }
                  else
                  {
                    long long v177 = *(_OWORD *)(v173 + 56);
                    v312.__r_.__value_.__r.__words[2] = *(void *)(v173 + 72);
                    *(_OWORD *)&v312.__r_.__value_.__l.__data_ = v177;
                  }
                  v178 = std::set<std::string>::set[abi:ne180100](&v313, (const void ***)(v173 + 80));
                  unsigned int v179 = *(_DWORD *)(v173 + 104);
                  unsigned int v315 = v179;
                  unsigned int v180 = v320;
                  std::__tree<std::string>::destroy((uint64_t)v178, v314);
                  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v312.__r_.__value_.__l.__data_);
                  }
                  std::__tree<std::string>::destroy((uint64_t)&v317, v318);
                  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v316.__r_.__value_.__l.__data_);
                  }
                  if (v180 > v179)
                  {
                    v173 += 56;
                    uint64_t v171 = v175;
                  }
                }
                if (*(char *)(v166 + 23) < 0) {
                  operator delete(*(void **)v166);
                }
                long long v181 = *(_OWORD *)v173;
                *(void *)(v166 + 16) = *(void *)(v173 + 16);
                *(_OWORD *)uint64_t v166 = v181;
                *(unsigned char *)(v173 + 23) = 0;
                *(unsigned char *)uint64_t v173 = 0;
                v182 = (uint64_t *)(v173 + 24);
                std::__tree<std::string>::__move_assign(v166 + 24, (void *)(v173 + 24));
                *(_DWORD *)(v166 + 48) = *(_DWORD *)(v173 + 48);
                uint64_t v166 = v173;
              }
              while (v171 <= (uint64_t)((unint64_t)(v165 - 2) >> 1));
              v183 = (void **)(a2 - 56);
              int v184 = *(char *)(v173 + 23);
              if (v173 == a2 - 56)
              {
                if (v184 < 0) {
                  operator delete(*(void **)v173);
                }
                long long v190 = *(_OWORD *)&v293.__r_.__value_.__l.__data_;
                *(void *)(v173 + 16) = *((void *)&v293.__r_.__value_.__l + 2);
                *(_OWORD *)uint64_t v173 = v190;
                *((unsigned char *)&v293.__r_.__value_.__s + 23) = 0;
                v293.__r_.__value_.__s.__data_[0] = 0;
                uint64_t v191 = v173 + 32;
                std::__tree<std::string>::destroy(v173 + 24, *(char **)(v173 + 32));
                *(void *)(v173 + ++*(void *)(result + 24) = v294;
                v192 = v295;
                *(void *)(v173 + 32) = v295;
                uint64_t v193 = v296;
                *(void *)(v173 + 40) = v296;
                if (v193)
                {
                  *((void *)v192 + 2) = v191;
                  v294 = &v295;
                  v295 = 0;
                  uint64_t v296 = 0;
                }
                else
                {
                  uint64_t *v182 = v191;
                }
                *(_DWORD *)(v173 + 48) = v297;
              }
              else
              {
                if (v184 < 0) {
                  operator delete(*(void **)v173);
                }
                long long v185 = *(_OWORD *)v183;
                *(void *)(v173 + 16) = *(void *)(a2 - 40);
                *(_OWORD *)uint64_t v173 = v185;
                *(unsigned char *)(a2 - 33) = 0;
                *(unsigned char *)(a2 - 56) = 0;
                std::__tree<std::string>::__move_assign(v173 + 24, (void *)(a2 - 32));
                *(_DWORD *)(v173 + 48) = *(_DWORD *)(a2 - 8);
                if (*(char *)(a2 - 33) < 0) {
                  operator delete(*v183);
                }
                long long v186 = *(_OWORD *)&v293.__r_.__value_.__l.__data_;
                *(void *)(a2 - 40) = *((void *)&v293.__r_.__value_.__l + 2);
                *(_OWORD *)v183 = v186;
                *((unsigned char *)&v293.__r_.__value_.__s + 23) = 0;
                v293.__r_.__value_.__s.__data_[0] = 0;
                unint64_t v187 = a2 - 24;
                std::__tree<std::string>::destroy(a2 - 32, *(char **)(a2 - 24));
                *(void *)(a2 - 32) = v294;
                v188 = v295;
                *(void *)(a2 - ++*(void *)(result + 24) = v295;
                uint64_t v189 = v296;
                *(void *)(a2 - 16) = v296;
                if (v189)
                {
                  *((void *)v188 + 2) = v187;
                  v294 = &v295;
                  v295 = 0;
                  uint64_t v296 = 0;
                }
                else
                {
                  *(void *)(a2 - 32) = v187;
                }
                *(_DWORD *)(a2 - 8) = v297;
                uint64_t v194 = v173 + 56 - a1;
                if (v194 >= 57)
                {
                  unint64_t v195 = (v194 / 0x38uLL - 2) >> 1;
                  unint64_t v196 = a1 + 56 * v195;
                  if (*(char *)(v196 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v316, *(const std::string::value_type **)v196, *(void *)(v196 + 8));
                  }
                  else
                  {
                    long long v197 = *(_OWORD *)v196;
                    v316.__r_.__value_.__r.__words[2] = *(void *)(v196 + 16);
                    *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v197;
                  }
                  std::set<std::string>::set[abi:ne180100]((uint64_t *)&v317, (const void ***)(a1 + 56 * v195 + 24));
                  unsigned int v320 = *(_DWORD *)(a1 + 56 * v195 + 48);
                  if (*(char *)(v173 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v312, *(const std::string::value_type **)v173, *(void *)(v173 + 8));
                  }
                  else
                  {
                    long long v198 = *(_OWORD *)v173;
                    v312.__r_.__value_.__r.__words[2] = *(void *)(v173 + 16);
                    *(_OWORD *)&v312.__r_.__value_.__l.__data_ = v198;
                  }
                  std::set<std::string>::set[abi:ne180100](&v313, (const void ***)(v173 + 24));
                  unsigned int v199 = *(_DWORD *)(v173 + 48);
                  unsigned int v315 = v199;
                  unsigned int v200 = v320;
                  std::__tree<std::string>::destroy((uint64_t)&v313, v314);
                  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v312.__r_.__value_.__l.__data_);
                  }
                  std::__tree<std::string>::destroy((uint64_t)&v317, v318);
                  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v316.__r_.__value_.__l.__data_);
                  }
                  if (v200 > v199)
                  {
                    long long v201 = *(_OWORD *)v173;
                    v307.__r_.__value_.__r.__words[2] = *(void *)(v173 + 16);
                    *(_OWORD *)&v307.__r_.__value_.__l.__data_ = v201;
                    *(void *)(v173 + 8) = 0;
                    *(void *)(v173 + 16) = 0;
                    *(void *)uint64_t v173 = 0;
                    v308 = *(char ***)(v173 + 24);
                    v202 = (void *)(v173 + 32);
                    uint64_t v203 = *(void *)(v173 + 32);
                    v309 = (char *)v203;
                    uint64_t v310 = *(void *)(v173 + 40);
                    if (v310)
                    {
                      *(void *)(v203 + 16) = &v309;
                      uint64_t *v182 = (uint64_t)v202;
                      void *v202 = 0;
                      *(void *)(v173 + 40) = 0;
                    }
                    else
                    {
                      v308 = &v309;
                    }
                    unsigned int v311 = *(_DWORD *)(v173 + 48);
                    do
                    {
                      unint64_t v204 = v196;
                      if (*(char *)(v173 + 23) < 0) {
                        operator delete(*(void **)v173);
                      }
                      long long v205 = *(_OWORD *)v196;
                      *(void *)(v173 + 16) = *(void *)(v196 + 16);
                      *(_OWORD *)uint64_t v173 = v205;
                      *(unsigned char *)(v196 + 23) = 0;
                      *(unsigned char *)unint64_t v196 = 0;
                      v206 = (unint64_t *)(v196 + 24);
                      std::__tree<std::string>::__move_assign(v173 + 24, (void *)(v196 + 24));
                      *(_DWORD *)(v173 + 48) = *(_DWORD *)(v196 + 48);
                      if (!v195) {
                        break;
                      }
                      unint64_t v195 = (v195 - 1) >> 1;
                      unint64_t v196 = a1 + 56 * v195;
                      if (*(char *)(v196 + 23) < 0)
                      {
                        std::string::__init_copy_ctor_external(&v303, *(const std::string::value_type **)v196, *(void *)(v196 + 8));
                      }
                      else
                      {
                        long long v207 = *(_OWORD *)v196;
                        v303.__r_.__value_.__r.__words[2] = *(void *)(v196 + 16);
                        *(_OWORD *)&v303.__r_.__value_.__l.__data_ = v207;
                      }
                      std::set<std::string>::set[abi:ne180100](&v304, (const void ***)(a1 + 56 * v195 + 24));
                      unsigned int v306 = *(_DWORD *)(a1 + 56 * v195 + 48);
                      if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0) {
                        std::string::__init_copy_ctor_external(&v298, v307.__r_.__value_.__l.__data_, v307.__r_.__value_.__l.__size_);
                      }
                      else {
                        std::string v298 = v307;
                      }
                      std::set<std::string>::set[abi:ne180100]((uint64_t *)&v299, (const void ***)&v308);
                      unsigned int v208 = v311;
                      unsigned int v302 = v311;
                      unsigned int v209 = v306;
                      std::__tree<std::string>::destroy((uint64_t)&v299, v300);
                      if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v298.__r_.__value_.__l.__data_);
                      }
                      std::__tree<std::string>::destroy((uint64_t)&v304, v305);
                      if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v303.__r_.__value_.__l.__data_);
                      }
                      uint64_t v173 = v204;
                    }
                    while (v209 > v208);
                    if (*(char *)(v204 + 23) < 0) {
                      operator delete(*(void **)v204);
                    }
                    long long v210 = *(_OWORD *)&v307.__r_.__value_.__l.__data_;
                    *(void *)(v204 + 16) = *((void *)&v307.__r_.__value_.__l + 2);
                    *(_OWORD *)unint64_t v204 = v210;
                    *((unsigned char *)&v307.__r_.__value_.__s + 23) = 0;
                    v307.__r_.__value_.__s.__data_[0] = 0;
                    unint64_t v211 = v204 + 32;
                    std::__tree<std::string>::destroy(v204 + 24, *(char **)(v204 + 32));
                    *(void *)(v204 + ++*(void *)(result + 24) = v308;
                    v212 = v309;
                    *(void *)(v204 + 32) = v309;
                    uint64_t v213 = v310;
                    *(void *)(v204 + 40) = v310;
                    if (v213)
                    {
                      *((void *)v212 + 2) = v211;
                      v212 = 0;
                      v308 = &v309;
                      v309 = 0;
                      uint64_t v310 = 0;
                    }
                    else
                    {
                      unint64_t *v206 = v211;
                    }
                    *(_DWORD *)(v204 + 48) = v311;
                    std::__tree<std::string>::destroy((uint64_t)&v308, v212);
                    if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v307.__r_.__value_.__l.__data_);
                    }
                    v183 = (void **)(a2 - 56);
                  }
                }
              }
              std::__tree<std::string>::destroy((uint64_t)&v294, v295);
              if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v293.__r_.__value_.__l.__data_);
              }
              a2 = (unint64_t)v183;
              BOOL v75 = v165-- <= 2;
            }
            while (!v75);
          }
          return;
        }
        unint64_t v10 = (unint64_t)v9 >> 1;
        uint64_t v11 = (long long *)(v7 + 56 * ((unint64_t)v9 >> 1));
        if ((unint64_t)v8 < 0x1C01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>((uint64_t)v11, v7, (uint64_t)v245);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(v7, (uint64_t)v11, (uint64_t)v245);
          uint64_t v12 = v7 + 56;
          uint64_t v13 = 56 * v10;
          uint64_t v14 = v13 + v7 - 56;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(v12, v14, a2 - 112);
          uint64_t v15 = v12 + v13;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(a1 + 112, v15, a2 - 168);
          uint64_t v16 = v14;
          uint64_t v7 = a1;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(v16, (uint64_t)v11, v15);
          std::swap[abi:ne180100]<quasar::AppLmData::Oov>(a1, v11);
        }
        --a3;
        if (a4) {
          break;
        }
        if (*(char *)(v7 - 33) < 0)
        {
          std::string::__init_copy_ctor_external(&v258, *(const std::string::value_type **)(v7 - 56), *(void *)(v7 - 48));
        }
        else
        {
          long long v17 = *(_OWORD *)(v7 - 56);
          v258.__r_.__value_.__r.__words[2] = *(void *)(v7 - 40);
          *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v17;
        }
        std::set<std::string>::set[abi:ne180100](v259, (const void ***)(v7 - 32));
        unsigned int v260 = *(_DWORD *)(v7 - 8);
        if (*(char *)(v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v255, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
        }
        else
        {
          long long v18 = *(_OWORD *)v7;
          v255.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
          *(_OWORD *)&v255.__r_.__value_.__l.__data_ = v18;
        }
        long long v19 = std::set<std::string>::set[abi:ne180100](v256, (const void ***)(v7 + 24));
        unsigned int v20 = *(_DWORD *)(v7 + 48);
        unsigned int v257 = v20;
        unsigned int v21 = v260;
        std::__tree<std::string>::destroy((uint64_t)v19, (char *)v256[1]);
        if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v255.__r_.__value_.__l.__data_);
        }
        std::__tree<std::string>::destroy((uint64_t)v259, (char *)v259[1]);
        if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v258.__r_.__value_.__l.__data_);
        }
        if (v21 > v20) {
          break;
        }
        long long v57 = *(_OWORD *)v7;
        unsigned int v58 = *(const void ***)(v7 + 24);
        v316.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
        *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v57;
        *(void *)(v7 + 8) = 0;
        *(void *)(v7 + 16) = 0;
        *(void *)uint64_t v7 = 0;
        std::string v59 = (void *)(v7 + 32);
        uint64_t v60 = *(void *)(v7 + 32);
        v317 = (char **)v58;
        v318 = (char *)v60;
        uint64_t v319 = *(void *)(v7 + 40);
        if (v319)
        {
          *(void *)(v60 + 16) = &v318;
          *(void *)(v7 + ++*(void *)(result + 24) = v59;
          *std::string v59 = 0;
          *(void *)(v7 + 40) = 0;
        }
        else
        {
          v317 = &v318;
        }
        unsigned int v320 = *(_DWORD *)(v7 + 48);
        if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v312, v316.__r_.__value_.__l.__data_, v316.__r_.__value_.__l.__size_);
        }
        else {
          std::string v312 = v316;
        }
        std::set<std::string>::set[abi:ne180100](&v313, (const void ***)&v317);
        unsigned int v315 = v320;
        if (*(char *)(a2 - 33) < 0)
        {
          std::string::__init_copy_ctor_external(&v307, *(const std::string::value_type **)(a2 - 56), *(void *)(a2 - 48));
        }
        else
        {
          long long v61 = *v245;
          v307.__r_.__value_.__r.__words[2] = *(void *)(a2 - 40);
          *(_OWORD *)&v307.__r_.__value_.__l.__data_ = v61;
        }
        uint64_t v252 = v7 + 24;
        uint64_t v62 = std::set<std::string>::set[abi:ne180100]((uint64_t *)&v308, v241);
        unsigned int v63 = *(_DWORD *)(a2 - 8);
        unsigned int v311 = v63;
        unsigned int v64 = v315;
        std::__tree<std::string>::destroy((uint64_t)v62, v309);
        if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v307.__r_.__value_.__l.__data_);
        }
        std::__tree<std::string>::destroy((uint64_t)&v313, v314);
        if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v312.__r_.__value_.__l.__data_);
        }
        uint64_t v65 = v7;
        if (v64 <= v63)
        {
          for (unint64_t j = v7 + 56; j < a2; j += 56)
          {
            if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v293, v316.__r_.__value_.__l.__data_, v316.__r_.__value_.__l.__size_);
            }
            else {
              std::string v293 = v316;
            }
            std::set<std::string>::set[abi:ne180100]((uint64_t *)&v294, (const void ***)&v317);
            unsigned int v297 = v320;
            if (*(char *)(j + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v289, *(const std::string::value_type **)j, *(void *)(j + 8));
            }
            else
            {
              long long v92 = *(_OWORD *)j;
              v289.__r_.__value_.__r.__words[2] = *(void *)(j + 16);
              *(_OWORD *)&v289.__r_.__value_.__l.__data_ = v92;
            }
            int v93 = std::set<std::string>::set[abi:ne180100](&v290, (const void ***)(j + 24));
            unsigned int v94 = *(_DWORD *)(j + 48);
            unsigned int v292 = v94;
            unsigned int v95 = v297;
            std::__tree<std::string>::destroy((uint64_t)v93, v291);
            if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v289.__r_.__value_.__l.__data_);
            }
            std::__tree<std::string>::destroy((uint64_t)&v294, v295);
            if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v293.__r_.__value_.__l.__data_);
            }
            if (v95 > v94) {
              break;
            }
          }
        }
        else
        {
          do
          {
            if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v303, v316.__r_.__value_.__l.__data_, v316.__r_.__value_.__l.__size_);
            }
            else {
              std::string v303 = v316;
            }
            std::set<std::string>::set[abi:ne180100](&v304, (const void ***)&v317);
            unint64_t j = v65 + 56;
            unsigned int v306 = v320;
            if (*(char *)(v65 + 79) < 0)
            {
              std::string::__init_copy_ctor_external(&v298, *(const std::string::value_type **)(v65 + 56), *(void *)(v65 + 64));
            }
            else
            {
              long long v66 = *(_OWORD *)j;
              v298.__r_.__value_.__r.__words[2] = *(void *)(v65 + 72);
              *(_OWORD *)&v298.__r_.__value_.__l.__data_ = v66;
            }
            std::string v67 = std::set<std::string>::set[abi:ne180100]((uint64_t *)&v299, (const void ***)(v65 + 80));
            unsigned int v68 = *(_DWORD *)(v65 + 104);
            unsigned int v302 = v68;
            unsigned int v69 = v306;
            std::__tree<std::string>::destroy((uint64_t)v67, v300);
            if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v298.__r_.__value_.__l.__data_);
            }
            std::__tree<std::string>::destroy((uint64_t)&v304, v305);
            if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v303.__r_.__value_.__l.__data_);
            }
            v65 += 56;
          }
          while (v69 <= v68);
        }
        char v70 = (long long *)a2;
        if (j < a2)
        {
          unint64_t v71 = a2;
          do
          {
            if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v285, v316.__r_.__value_.__l.__data_, v316.__r_.__value_.__l.__size_);
            }
            else {
              std::string v285 = v316;
            }
            std::set<std::string>::set[abi:ne180100](&v286, (const void ***)&v317);
            char v70 = (long long *)(v71 - 56);
            unsigned int v288 = v320;
            if (*(char *)(v71 - 33) < 0)
            {
              std::string::__init_copy_ctor_external(&v281, *(const std::string::value_type **)(v71 - 56), *(void *)(v71 - 48));
            }
            else
            {
              long long v72 = *v70;
              v281.__r_.__value_.__r.__words[2] = *(void *)(v71 - 40);
              *(_OWORD *)&v281.__r_.__value_.__l.__data_ = v72;
            }
            std::set<std::string>::set[abi:ne180100](&v282, (const void ***)(v71 - 32));
            unsigned int v73 = *(_DWORD *)(v71 - 8);
            unsigned int v284 = v73;
            unsigned int v74 = v288;
            std::__tree<std::string>::destroy((uint64_t)&v282, v283);
            if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v281.__r_.__value_.__l.__data_);
            }
            std::__tree<std::string>::destroy((uint64_t)&v286, v287);
            if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v285.__r_.__value_.__l.__data_);
            }
            v71 -= 56;
            BOOL v75 = v74 > v73;
            uint64_t v7 = a1;
          }
          while (v75);
        }
        while (j < (unint64_t)v70)
        {
          std::swap[abi:ne180100]<quasar::AppLmData::Oov>(j, v70);
          unint64_t v76 = j;
          do
          {
            if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v277, v316.__r_.__value_.__l.__data_, v316.__r_.__value_.__l.__size_);
            }
            else {
              std::string v277 = v316;
            }
            std::set<std::string>::set[abi:ne180100](&v278, (const void ***)&v317);
            unint64_t j = v76 + 56;
            unsigned int v280 = v320;
            if (*(char *)(v76 + 79) < 0)
            {
              std::string::__init_copy_ctor_external(&v273, *(const std::string::value_type **)(v76 + 56), *(void *)(v76 + 64));
            }
            else
            {
              long long v77 = *(_OWORD *)j;
              v273.__r_.__value_.__r.__words[2] = *(void *)(v76 + 72);
              *(_OWORD *)&v273.__r_.__value_.__l.__data_ = v77;
            }
            std::set<std::string>::set[abi:ne180100](&v274, (const void ***)(v76 + 80));
            unsigned int v78 = *(_DWORD *)(v76 + 104);
            unsigned int v276 = v78;
            unsigned int v79 = v280;
            std::__tree<std::string>::destroy((uint64_t)&v274, v275);
            if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v273.__r_.__value_.__l.__data_);
            }
            std::__tree<std::string>::destroy((uint64_t)&v278, v279);
            if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v277.__r_.__value_.__l.__data_);
            }
            v76 += 56;
          }
          while (v79 <= v78);
          uint64_t v80 = v70;
          do
          {
            if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v270, v316.__r_.__value_.__l.__data_, v316.__r_.__value_.__l.__size_);
            }
            else {
              std::string v270 = v316;
            }
            std::set<std::string>::set[abi:ne180100](v271, (const void ***)&v317);
            char v70 = (long long *)((char *)v80 - 56);
            unsigned int v272 = v320;
            if (*((char *)v80 - 33) < 0)
            {
              std::string::__init_copy_ctor_external(&v267, *((const std::string::value_type **)v80 - 7), *((void *)v80 - 6));
            }
            else
            {
              long long v81 = *v70;
              v267.__r_.__value_.__r.__words[2] = *((void *)v80 - 5);
              *(_OWORD *)&v267.__r_.__value_.__l.__data_ = v81;
            }
            long long v82 = std::set<std::string>::set[abi:ne180100](v268, (const void ***)v80 - 4);
            unsigned int v83 = *((_DWORD *)v80 - 2);
            unsigned int v269 = v83;
            unsigned int v84 = v272;
            std::__tree<std::string>::destroy((uint64_t)v82, (char *)v268[1]);
            if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v267.__r_.__value_.__l.__data_);
            }
            std::__tree<std::string>::destroy((uint64_t)v271, (char *)v271[1]);
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v270.__r_.__value_.__l.__data_);
            }
            uint64_t v80 = (long long *)((char *)v80 - 56);
            BOOL v75 = v84 > v83;
            uint64_t v7 = a1;
          }
          while (v75);
        }
        int v85 = (void **)(j - 56);
        if (j - 56 != v7)
        {
          if (*(char *)(v7 + 23) < 0) {
            operator delete(*(void **)v7);
          }
          long long v86 = *(_OWORD *)v85;
          *(void *)(v7 + 16) = *(void *)(j - 40);
          *(_OWORD *)uint64_t v7 = v86;
          *(unsigned char *)(j - 33) = 0;
          *(unsigned char *)(j - 56) = 0;
          std::__tree<std::string>::__move_assign(v252, (void *)(j - 32));
          *(_DWORD *)(v7 + 48) = *(_DWORD *)(j - 8);
        }
        if (*(char *)(j - 33) < 0) {
          operator delete(*v85);
        }
        long long v87 = *(_OWORD *)&v316.__r_.__value_.__l.__data_;
        *(void *)(j - 40) = *((void *)&v316.__r_.__value_.__l + 2);
        *(_OWORD *)int v85 = v87;
        *((unsigned char *)&v316.__r_.__value_.__s + 23) = 0;
        v316.__r_.__value_.__s.__data_[0] = 0;
        unint64_t v88 = j - 24;
        std::__tree<std::string>::destroy(j - 32, *(char **)(j - 24));
        *(void *)(j - 32) = v317;
        uint64_t v89 = v318;
        *(void *)(j - ++*(void *)(result + 24) = v318;
        uint64_t v90 = v319;
        *(void *)(j - 16) = v319;
        if (v90)
        {
          uint64_t v91 = 0;
          *((void *)v89 + 2) = v88;
          v317 = &v318;
          v318 = 0;
          uint64_t v319 = 0;
        }
        else
        {
          *(void *)(j - 32) = v88;
          uint64_t v91 = v318;
        }
        *(_DWORD *)(j - 8) = v320;
        std::__tree<std::string>::destroy((uint64_t)&v317, v91);
        if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v316.__r_.__value_.__l.__data_);
        }
LABEL_107:
        a4 = 0;
      }
      long long v22 = *(_OWORD *)v7;
      v316.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
      *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v22;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(void *)uint64_t v7 = 0;
      long long v23 = (void *)(v7 + 32);
      uint64_t v24 = *(void *)(v7 + 32);
      v317 = *(char ***)(v7 + 24);
      v318 = (char *)v24;
      uint64_t v319 = *(void *)(v7 + 40);
      uint64_t v244 = v7 + 24;
      if (v319)
      {
        *(void *)(v24 + 16) = &v318;
        *(void *)(v7 + ++*(void *)(result + 24) = v23;
        *long long v23 = 0;
        *(void *)(v7 + 40) = 0;
      }
      else
      {
        v317 = &v318;
      }
      uint64_t v25 = 0;
      unsigned int v320 = *(_DWORD *)(v7 + 48);
      do
      {
        long long v26 = (const std::string::value_type **)(v7 + v25 + 56);
        if (*(char *)(v7 + v25 + 79) < 0)
        {
          std::string::__init_copy_ctor_external(&v312, *v26, *(void *)(v7 + v25 + 64));
        }
        else
        {
          long long v27 = *(_OWORD *)v26;
          v312.__r_.__value_.__r.__words[2] = *(void *)(v7 + v25 + 72);
          *(_OWORD *)&v312.__r_.__value_.__l.__data_ = v27;
        }
        std::set<std::string>::set[abi:ne180100](&v313, (const void ***)(v7 + v25 + 80));
        unsigned int v315 = *(_DWORD *)(v7 + v25 + 104);
        if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v307, v316.__r_.__value_.__l.__data_, v316.__r_.__value_.__l.__size_);
        }
        else {
          std::string v307 = v316;
        }
        long long v28 = std::set<std::string>::set[abi:ne180100]((uint64_t *)&v308, (const void ***)&v317);
        unsigned int v29 = v320;
        unsigned int v311 = v320;
        unsigned int v30 = v315;
        std::__tree<std::string>::destroy((uint64_t)v28, v309);
        if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v307.__r_.__value_.__l.__data_);
        }
        std::__tree<std::string>::destroy((uint64_t)&v313, v314);
        if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v312.__r_.__value_.__l.__data_);
        }
        v25 += 56;
      }
      while (v30 > v29);
      unint64_t v251 = v7 + v25;
      unint64_t v31 = a2;
      if (v25 == 56)
      {
        long long v35 = (long long *)a2;
        if (v251 < a2)
        {
          for (unint64_t k = a2 - 56; ; k -= 56)
          {
            if (*(char *)(k + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v303, *(const std::string::value_type **)k, *(void *)(k + 8));
            }
            else
            {
              long long v37 = *(_OWORD *)k;
              v303.__r_.__value_.__r.__words[2] = *(void *)(k + 16);
              *(_OWORD *)&v303.__r_.__value_.__l.__data_ = v37;
            }
            std::set<std::string>::set[abi:ne180100](&v304, (const void ***)(k + 24));
            unsigned int v306 = *(_DWORD *)(k + 48);
            if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v298, v316.__r_.__value_.__l.__data_, v316.__r_.__value_.__l.__size_);
            }
            else {
              std::string v298 = v316;
            }
            std::set<std::string>::set[abi:ne180100]((uint64_t *)&v299, (const void ***)&v317);
            unsigned int v38 = v320;
            unsigned int v302 = v320;
            unsigned int v39 = v306;
            std::__tree<std::string>::destroy((uint64_t)&v299, v300);
            if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v298.__r_.__value_.__l.__data_);
            }
            std::__tree<std::string>::destroy((uint64_t)&v304, v305);
            if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v303.__r_.__value_.__l.__data_);
            }
            if (v39 > v38 || v251 >= k) {
              break;
            }
          }
          long long v35 = (long long *)k;
        }
      }
      else
      {
        do
        {
          if (*(char *)(v31 - 33) < 0)
          {
            std::string::__init_copy_ctor_external(&v293, *(const std::string::value_type **)(v31 - 56), *(void *)(v31 - 48));
          }
          else
          {
            long long v32 = *(_OWORD *)(v31 - 56);
            v293.__r_.__value_.__r.__words[2] = *(void *)(v31 - 40);
            *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v32;
          }
          std::set<std::string>::set[abi:ne180100]((uint64_t *)&v294, (const void ***)(v31 - 32));
          unsigned int v297 = *(_DWORD *)(v31 - 8);
          if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v289, v316.__r_.__value_.__l.__data_, v316.__r_.__value_.__l.__size_);
          }
          else {
            std::string v289 = v316;
          }
          v31 -= 56;
          std::set<std::string>::set[abi:ne180100](&v290, (const void ***)&v317);
          unsigned int v33 = v320;
          unsigned int v292 = v320;
          unsigned int v34 = v297;
          std::__tree<std::string>::destroy((uint64_t)&v290, v291);
          if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v289.__r_.__value_.__l.__data_);
          }
          std::__tree<std::string>::destroy((uint64_t)&v294, v295);
          if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v293.__r_.__value_.__l.__data_);
          }
          long long v35 = (long long *)v31;
        }
        while (v34 <= v33);
      }
      unint64_t j = v251;
      v247 = v35;
      if (v251 < (unint64_t)v35)
      {
        std::string v40 = v35;
        do
        {
          std::swap[abi:ne180100]<quasar::AppLmData::Oov>(j, v40);
          unint64_t v41 = j;
          do
          {
            unint64_t j = v41 + 56;
            if (*(char *)(v41 + 79) < 0)
            {
              std::string::__init_copy_ctor_external(&v285, *(const std::string::value_type **)(v41 + 56), *(void *)(v41 + 64));
            }
            else
            {
              long long v42 = *(_OWORD *)j;
              v285.__r_.__value_.__r.__words[2] = *(void *)(v41 + 72);
              *(_OWORD *)&v285.__r_.__value_.__l.__data_ = v42;
            }
            std::set<std::string>::set[abi:ne180100](&v286, (const void ***)(v41 + 80));
            unsigned int v288 = *(_DWORD *)(v41 + 104);
            if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v281, v316.__r_.__value_.__l.__data_, v316.__r_.__value_.__l.__size_);
            }
            else {
              std::string v281 = v316;
            }
            std::set<std::string>::set[abi:ne180100](&v282, (const void ***)&v317);
            unsigned int v43 = v320;
            unsigned int v284 = v320;
            unsigned int v44 = v288;
            std::__tree<std::string>::destroy((uint64_t)&v282, v283);
            if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v281.__r_.__value_.__l.__data_);
            }
            std::__tree<std::string>::destroy((uint64_t)&v286, v287);
            if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v285.__r_.__value_.__l.__data_);
            }
            v41 += 56;
          }
          while (v44 > v43);
          long long v45 = v40;
          do
          {
            std::string v40 = (long long *)((char *)v45 - 56);
            if (*((char *)v45 - 33) < 0)
            {
              std::string::__init_copy_ctor_external(&v277, *((const std::string::value_type **)v45 - 7), *((void *)v45 - 6));
            }
            else
            {
              long long v46 = *v40;
              v277.__r_.__value_.__r.__words[2] = *((void *)v45 - 5);
              *(_OWORD *)&v277.__r_.__value_.__l.__data_ = v46;
            }
            std::set<std::string>::set[abi:ne180100](&v278, (const void ***)v45 - 4);
            unsigned int v280 = *((_DWORD *)v45 - 2);
            if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v273, v316.__r_.__value_.__l.__data_, v316.__r_.__value_.__l.__size_);
            }
            else {
              std::string v273 = v316;
            }
            std::set<std::string>::set[abi:ne180100](&v274, (const void ***)&v317);
            unsigned int v47 = v320;
            unsigned int v276 = v320;
            unsigned int v48 = v280;
            std::__tree<std::string>::destroy((uint64_t)&v274, v275);
            if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v273.__r_.__value_.__l.__data_);
            }
            std::__tree<std::string>::destroy((uint64_t)&v278, v279);
            if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v277.__r_.__value_.__l.__data_);
            }
            long long v45 = (long long *)((char *)v45 - 56);
          }
          while (v48 <= v47);
        }
        while (j < (unint64_t)v40);
      }
      long long v49 = (void **)(j - 56);
      if (j - 56 != a1)
      {
        if (*(char *)(a1 + 23) < 0) {
          operator delete(*(void **)a1);
        }
        long long v50 = *(_OWORD *)v49;
        *(void *)(a1 + 16) = *(void *)(j - 40);
        *(_OWORD *)a1 = v50;
        *(unsigned char *)(j - 33) = 0;
        *(unsigned char *)(j - 56) = 0;
        std::__tree<std::string>::__move_assign(v244, (void *)(j - 32));
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(j - 8);
      }
      if (*(char *)(j - 33) < 0) {
        operator delete(*v49);
      }
      long long v51 = *(_OWORD *)&v316.__r_.__value_.__l.__data_;
      *(void *)(j - 40) = *((void *)&v316.__r_.__value_.__l + 2);
      *(_OWORD *)long long v49 = v51;
      *((unsigned char *)&v316.__r_.__value_.__s + 23) = 0;
      v316.__r_.__value_.__s.__data_[0] = 0;
      unint64_t v52 = j - 24;
      std::__tree<std::string>::destroy(j - 32, *(char **)(j - 24));
      *(void *)(j - 32) = v317;
      long long v53 = v318;
      *(void *)(j - ++*(void *)(result + 24) = v318;
      uint64_t v54 = v319;
      *(void *)(j - 16) = v319;
      if (v54)
      {
        uint64_t v55 = 0;
        *((void *)v53 + 2) = v52;
        v317 = &v318;
        v318 = 0;
        uint64_t v319 = 0;
      }
      else
      {
        *(void *)(j - 32) = v52;
        uint64_t v55 = v318;
      }
      *(_DWORD *)(j - 8) = v320;
      std::__tree<std::string>::destroy((uint64_t)&v317, v55);
      if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v316.__r_.__value_.__l.__data_);
      }
      if (v251 < (unint64_t)v247)
      {
LABEL_106:
        std::__introsort<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *,false>(a1, j - 56, a3, a4 & 1);
        goto LABEL_107;
      }
      BOOL v56 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(a1, j - 56);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(j, a2))
      {
        break;
      }
      if (!v56) {
        goto LABEL_106;
      }
    }
    a2 = j - 56;
    if (!v56) {
      continue;
    }
    break;
  }
}

void sub_1B1B0BE9C(_Unwind_Exception *a1)
{
  quasar::AppLmData::Oov::~Oov((char **)(v1 - 208));
  quasar::AppLmData::Oov::~Oov((char **)(v1 - 144));
  _Unwind_Resume(a1);
}

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(a1, a2, a3, a4);
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v43 = *(std::string *)a5;
  }
  std::set<std::string>::set[abi:ne180100](v44, (const void ***)(a5 + 24));
  unsigned int v45 = *(_DWORD *)(a5 + 48);
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v40 = *(std::string *)a4;
  }
  unint64_t v10 = std::set<std::string>::set[abi:ne180100](v41, (const void ***)(a4 + 24));
  unsigned int v11 = *(_DWORD *)(a4 + 48);
  unsigned int v42 = v11;
  unsigned int v12 = v45;
  std::__tree<std::string>::destroy((uint64_t)v10, (char *)v41[1]);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  std::__tree<std::string>::destroy((uint64_t)v44, (char *)v44[1]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (v12 > v11)
  {
    std::swap[abi:ne180100]<quasar::AppLmData::Oov>(a4, (long long *)a5);
    if (*(char *)(a4 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else {
      std::string v37 = *(std::string *)a4;
    }
    std::set<std::string>::set[abi:ne180100](v38, (const void ***)(a4 + 24));
    unsigned int v39 = *(_DWORD *)(a4 + 48);
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v34 = *(std::string *)a3;
    }
    uint64_t v13 = std::set<std::string>::set[abi:ne180100](v35, (const void ***)(a3 + 24));
    unsigned int v14 = *(_DWORD *)(a3 + 48);
    unsigned int v36 = v14;
    unsigned int v15 = v39;
    std::__tree<std::string>::destroy((uint64_t)v13, (char *)v35[1]);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    std::__tree<std::string>::destroy((uint64_t)v38, (char *)v38[1]);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (v15 > v14)
    {
      std::swap[abi:ne180100]<quasar::AppLmData::Oov>(a3, (long long *)a4);
      if (*(char *)(a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      }
      else {
        std::string v31 = *(std::string *)a3;
      }
      std::set<std::string>::set[abi:ne180100](v32, (const void ***)(a3 + 24));
      unsigned int v33 = *(_DWORD *)(a3 + 48);
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v28 = *(std::string *)a2;
      }
      uint64_t v16 = std::set<std::string>::set[abi:ne180100](v29, (const void ***)(a2 + 24));
      unsigned int v17 = *(_DWORD *)(a2 + 48);
      unsigned int v30 = v17;
      unsigned int v18 = v33;
      std::__tree<std::string>::destroy((uint64_t)v16, (char *)v29[1]);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      std::__tree<std::string>::destroy((uint64_t)v32, (char *)v32[1]);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if (v18 > v17)
      {
        std::swap[abi:ne180100]<quasar::AppLmData::Oov>(a2, (long long *)a3);
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string v25 = *(std::string *)a2;
        }
        std::set<std::string>::set[abi:ne180100](v26, (const void ***)(a2 + 24));
        unsigned int v27 = *(_DWORD *)(a2 + 48);
        if (*(char *)(a1 + 23) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
        }
        else {
          std::string __p = *(std::string *)a1;
        }
        long long v19 = std::set<std::string>::set[abi:ne180100](v23, (const void ***)(a1 + 24));
        unsigned int v20 = *(_DWORD *)(a1 + 48);
        unsigned int v24 = v20;
        unsigned int v21 = v27;
        std::__tree<std::string>::destroy((uint64_t)v19, (char *)v23[1]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::__tree<std::string>::destroy((uint64_t)v26, (char *)v26[1]);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v25.__r_.__value_.__l.__data_);
        }
        if (v21 > v20) {
          std::swap[abi:ne180100]<quasar::AppLmData::Oov>(a1, (long long *)a2);
        }
      }
    }
  }
}

void sub_1B1B0C6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char *a24)
{
  std::__tree<std::string>::destroy(v24, a24);
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v51 = *(std::string *)a2;
  }
  std::set<std::string>::set[abi:ne180100](v52, (const void ***)(a2 + 24));
  unsigned int v53 = *(_DWORD *)(a2 + 48);
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v48 = *(std::string *)a1;
  }
  uint64_t v6 = std::set<std::string>::set[abi:ne180100](v49, (const void ***)(a1 + 24));
  unsigned int v7 = *(_DWORD *)(a1 + 48);
  unsigned int v50 = v7;
  unsigned int v8 = v53;
  std::__tree<std::string>::destroy((uint64_t)v6, (char *)v49[1]);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  std::__tree<std::string>::destroy((uint64_t)v52, (char *)v52[1]);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  int v9 = *(char *)(a3 + 23);
  if (v8 <= v7)
  {
    if (v9 < 0) {
      std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v45 = *(std::string *)a3;
    }
    std::set<std::string>::set[abi:ne180100](v46, (const void ***)(a3 + 24));
    unsigned int v47 = *(_DWORD *)(a3 + 48);
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v42 = *(std::string *)a2;
    }
    unsigned int v14 = std::set<std::string>::set[abi:ne180100](v43, (const void ***)(a2 + 24));
    unsigned int v15 = *(_DWORD *)(a2 + 48);
    unsigned int v44 = v15;
    unsigned int v16 = v47;
    std::__tree<std::string>::destroy((uint64_t)v14, (char *)v43[1]);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    std::__tree<std::string>::destroy((uint64_t)v46, (char *)v46[1]);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if (v16 > v15)
    {
      std::swap[abi:ne180100]<quasar::AppLmData::Oov>(a2, (long long *)a3);
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v39 = *(std::string *)a2;
      }
      std::set<std::string>::set[abi:ne180100](v40, (const void ***)(a2 + 24));
      unsigned int v41 = *(_DWORD *)(a2 + 48);
      if (*(char *)(a1 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
      }
      else {
        std::string v36 = *(std::string *)a1;
      }
      unsigned int v21 = std::set<std::string>::set[abi:ne180100](v37, (const void ***)(a1 + 24));
      unsigned int v22 = *(_DWORD *)(a1 + 48);
      unsigned int v38 = v22;
      unsigned int v23 = v41;
      std::__tree<std::string>::destroy((uint64_t)v21, (char *)v37[1]);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      std::__tree<std::string>::destroy((uint64_t)v40, (char *)v40[1]);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      if (v23 > v22)
      {
        uint64_t v13 = a1;
        unsigned int v20 = (long long *)a2;
        goto LABEL_59;
      }
    }
  }
  else
  {
    if (v9 < 0) {
      std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v33 = *(std::string *)a3;
    }
    std::set<std::string>::set[abi:ne180100](v34, (const void ***)(a3 + 24));
    unsigned int v35 = *(_DWORD *)(a3 + 48);
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v30 = *(std::string *)a2;
    }
    unint64_t v10 = std::set<std::string>::set[abi:ne180100](v31, (const void ***)(a2 + 24));
    unsigned int v11 = *(_DWORD *)(a2 + 48);
    unsigned int v32 = v11;
    unsigned int v12 = v35;
    std::__tree<std::string>::destroy((uint64_t)v10, (char *)v31[1]);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    std::__tree<std::string>::destroy((uint64_t)v34, (char *)v34[1]);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    uint64_t v13 = a1;
    if (v12 > v11) {
      goto LABEL_51;
    }
    std::swap[abi:ne180100]<quasar::AppLmData::Oov>(a1, (long long *)a2);
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v27 = *(std::string *)a3;
    }
    std::set<std::string>::set[abi:ne180100](v28, (const void ***)(a3 + 24));
    unsigned int v29 = *(_DWORD *)(a3 + 48);
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    unsigned int v17 = std::set<std::string>::set[abi:ne180100](v25, (const void ***)(a2 + 24));
    unsigned int v18 = *(_DWORD *)(a2 + 48);
    unsigned int v26 = v18;
    unsigned int v19 = v29;
    std::__tree<std::string>::destroy((uint64_t)v17, (char *)v25[1]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::__tree<std::string>::destroy((uint64_t)v28, (char *)v28[1]);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (v19 > v18)
    {
      uint64_t v13 = a2;
LABEL_51:
      unsigned int v20 = (long long *)a3;
LABEL_59:
      std::swap[abi:ne180100]<quasar::AppLmData::Oov>(v13, v20);
    }
  }
}