void *std::vector<std::array<unsigned long,4ul>>::__init_with_size[abi:ne180100]<std::array<unsigned long,4ul>*,std::array<unsigned long,4ul>*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  void *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (void)a2;
    if (v8) {
      result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1C32190(_Unwind_Exception *exception_object)
{
  v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::VoiceCommandInterpretation>::__push_back_slow_path<quasar::VoiceCommandInterpretation const&>(uint64_t *a1, const quasar::VoiceCommandInterpretation *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x249249249249249) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x124924924924924) {
    unint64_t v9 = 0x249249249249249;
  }
  else {
    unint64_t v9 = v5;
  }
  v17 = a1 + 2;
  if (v9) {
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandInterpretation>>(v7, v9);
  }
  else {
    v10 = 0;
  }
  v13 = v10;
  v14 = (std::string *)&v10[112 * v4];
  v16 = &v10[112 * v9];
  quasar::VoiceCommandInterpretation::VoiceCommandInterpretation(v14, a2);
  v15 = &v14[4].__r_.__value_.__s.__data_[16];
  std::vector<quasar::VoiceCommandInterpretation>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::VoiceCommandInterpretation>::~__split_buffer(&v13);
  return v11;
}

void sub_1B1C322B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::VoiceCommandInterpretation>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *LHash<unsigned int,Trie<unsigned int,unsigned int>>::alloc(void *a1, unsigned int a2)
{
  char v3 = -1;
  do
    uint64_t v4 = (1 << ++v3);
  while (v4 < a2);
  result = BM_malloc(24 * (v4 - 1) + 32);
  uint64_t v6 = 0;
  *a1 = result;
  *(_DWORD *)result = *(_DWORD *)result & 0xFFFFFFE0 | v3 & 0x1F;
  *(_DWORD *)*a1 &= 0x1Fu;
  do
  {
    uint64_t v7 = *a1 + v6;
    *(_DWORD *)(v7 + 24) = -1;
    *(void *)(v7 + 8) = 0;
    *(_DWORD *)(v7 + 16) = 0;
    v6 += 24;
    --v4;
  }
  while (v4);
  return result;
}

void LHash<unsigned int,Trie<unsigned int,unsigned int>>::clear(void *a1, unsigned int a2)
{
  uint64_t v4 = (void *)*a1;
  if (v4)
  {
    BM_free(v4, 24 * ~(-1 << *(_DWORD *)v4) + 32);
    *a1 = 0;
  }
  if (a2)
  {
    if (a2 >= 8) {
      a2 = (float)((float)(a2 + 1) / 0.8);
    }
    LHash<unsigned int,Trie<unsigned int,unsigned int>>::alloc(a1, a2);
  }
}

void *LHash<unsigned int,Trie<unsigned int,unsigned int>>::~LHash(void *a1)
{
  return a1;
}

void *LHash<unsigned int,Trie<unsigned int,unsigned int>>::operator=(void *a1, _DWORD **a2)
{
  if (a2 != a1)
  {
    if (*a2)
    {
      uint64_t v4 = 1 << (**a2 & 0x1F);
      LHash<unsigned int,Trie<unsigned int,unsigned int>>::clear(a1, 0);
      LHash<unsigned int,Trie<unsigned int,unsigned int>>::alloc(a1, v4);
      uint64_t v5 = 0;
      do
      {
        int v6 = (*a2)[v5 + 6];
        if (v6 != -1)
        {
          uint64_t v7 = *a1 + v5 * 4;
          *(_DWORD *)(v7 + 24) = v6;
          *(void *)(v7 + 8) = 0;
          *(_DWORD *)(v7 + 16) = 0;
          unint64_t v8 = &(*a2)[v5];
          uint64_t v9 = *a1 + v5 * 4;
          LHash<unsigned int,Trie<unsigned int,unsigned int>>::operator=(v9 + 8, v8 + 2);
          *(_DWORD *)(v9 + 16) = v8[4];
        }
        v5 += 6;
        --v4;
      }
      while (v4);
      *(_DWORD *)*a1 = **a2 & 0xFFFFFFE0 | *(_DWORD *)*a1 & 0x1F;
    }
    else
    {
      LHash<unsigned int,Trie<unsigned int,unsigned int>>::clear(a1, 0);
    }
  }
  return a1;
}

uint64_t LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(_DWORD **a1, unsigned int a2, _DWORD *a3)
{
  char v3 = *a1;
  if (!*a1) {
    return 0;
  }
  uint64_t v4 = v3 + 2;
  unint64_t v5 = *v3;
  char v6 = v5 & 0x1F;
  if ((*v3 & 0x1Fu) > 2)
  {
    uint64_t v9 = -1 << v6;
    unint64_t v7 = ((1103515245 * (unint64_t)a2 + 12345) >> (30 - v6)) & ~(-1 << v6);
    int v10 = v4[6 * v7 + 4];
    if (v10 == -1)
    {
LABEL_10:
      uint64_t result = 0;
    }
    else
    {
      int v11 = ~v9;
      while (v10 != a2)
      {
        LODWORD(v7) = (v7 + 1) & v11;
        int v10 = v4[6 * v7 + 4];
        if (v10 == -1) {
          goto LABEL_10;
        }
      }
      uint64_t result = 1;
    }
  }
  else if (v5 >= 0x20)
  {
    uint64_t v12 = 0;
    unint64_t v7 = v5 >> 5;
    v13 = v3 + 6;
    while (1)
    {
      int v14 = *v13;
      v13 += 6;
      if (v14 == a2) {
        break;
      }
      if (v7 == ++v12) {
        goto LABEL_14;
      }
    }
    uint64_t result = 1;
    LODWORD(v7) = v12;
  }
  else
  {
    LODWORD(v7) = 0;
LABEL_14:
    uint64_t result = 0;
  }
  *a3 = v7;
  return result;
}

uint64_t LHash<unsigned int,Trie<unsigned int,unsigned int>>::insert(void *a1, unsigned int a2, unsigned char *a3)
{
  if (!*a1) {
    LHash<unsigned int,Trie<unsigned int,unsigned int>>::alloc(a1, 1u);
  }
  unsigned int v20 = 0;
  int v6 = LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate((_DWORD **)a1, a2, &v20);
  *a3 = v6;
  unint64_t v7 = (void *)*a1;
  if (!v6)
  {
    unint64_t v8 = *(unsigned int *)v7;
    uint64_t v9 = 1 << (v8 & 0x1F);
    unint64_t v10 = v8 >> 5;
    if (v8 >= 0xE0) {
      unsigned int v11 = (float)((float)(v10 + 2) / 0.8);
    }
    else {
      unsigned int v11 = v10 + 1;
    }
    if (v11 > v9)
    {
      LHash<unsigned int,Trie<unsigned int,unsigned int>>::alloc(a1, v11);
      *(_DWORD *)*a1 = v8 & 0xFFFFFFE0 | *(_DWORD *)*a1 & 0x1F;
      if ((*(_DWORD *)*a1 & 0x1Fu) >= 3)
      {
        uint64_t v12 = (unsigned int *)(v7 + 3);
        uint64_t v13 = 1 << (v8 & 0x1F);
        do
        {
          if (*v12 != -1)
          {
            LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate((_DWORD **)a1, *v12, &v20);
            uint64_t v14 = *a1 + 24 * v20;
            long long v15 = *((_OWORD *)v12 - 1);
            *(void *)(v14 + 24) = *(void *)v12;
            *(_OWORD *)(v14 + 8) = v15;
          }
          v12 += 6;
          --v13;
        }
        while (v13);
      }
      else
      {
        memcpy((void *)(*a1 + 8), v7 + 1, 24 * v10);
      }
      BM_free(v7, 24 * (v9 - 1) + 32);
      LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate((_DWORD **)a1, a2, &v20);
      unint64_t v7 = (void *)*a1;
    }
    LODWORD(v7[3 * v20 + 3]) = a2;
    uint64_t v16 = 3 * v20;
    v17 = &v7[3 * v20 + 1];
    void *v17 = 0;
    v17[1] = 0;
    uint64_t v18 = *a1 + 8 * v16;
    *(void *)(v18 + 8) = 0;
    *(_DWORD *)(v18 + 16) = 0;
    *(_DWORD *)*a1 += 32;
    unint64_t v7 = (void *)*a1;
  }
  return (uint64_t)&v7[3 * v20 + 1];
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,unsigned int>>::LHashIter(uint64_t result, _DWORD **a2, uint64_t a3)
{
  char v3 = *a2;
  *(void *)uint64_t result = *a2;
  *(_DWORD *)(result + 8) = 0;
  if (v3)
  {
    *(_DWORD *)(result + 12) = *v3 >> 5;
    *(void *)(result + 16) = a3;
    *(void *)(result + 24) = 0;
    LHashIter<unsigned int,Trie<unsigned int,unsigned int>>::sortKeys();
  }
  *(_DWORD *)(result + 12) = 0;
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = 0;
  return result;
}

void LHashIter<unsigned int,Trie<unsigned int,unsigned int>>::sortKeys()
{
}

void sub_1B1C3298C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    MEMORY[0x1B3EA8630](a12, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,unsigned int>>::next(uint64_t a1, _DWORD *a2)
{
  v2 = *(_DWORD **)a1;
  if (!*(void *)a1) {
    return 0;
  }
  unsigned int v10 = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 == *(_DWORD *)(a1 + 12)) {
    return 0;
  }
  uint64_t v9 = v2;
  uint64_t v7 = *(void *)(a1 + 24);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(&v9, *(_DWORD *)(v7 + 4 * v4), &v10);
  uint64_t v8 = *(void *)a1 + 24 * v10;
  uint64_t result = v8 + 8;
  *a2 = *(_DWORD *)(v8 + 24);
  return result;
}

void sub_1B1C32A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Trie<unsigned int,unsigned int>::Trie(uint64_t a1, unsigned int a2)
{
  *(void *)a1 = 0;
  if (a2)
  {
    if (a2 >= 8) {
      a2 = (float)((float)(a2 + 1) / 0.8);
    }
    LHash<unsigned int,Trie<unsigned int,unsigned int>>::alloc((void *)a1, a2);
  }
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

_DWORD **Trie<unsigned int,unsigned int>::~Trie(_DWORD **a1)
{
  LHashIter<unsigned int,Trie<unsigned int,unsigned int>>::LHashIter((uint64_t)v4, a1, 0);
  int v3 = 0;
  while (LHashIter<unsigned int,Trie<unsigned int,unsigned int>>::next((uint64_t)v4, &v3))
    Trie<unsigned int,unsigned int>::~Trie();
  if (v5) {
    MEMORY[0x1B3EA8630](v5, 0x1000C8052888210);
  }
  LHash<unsigned int,Trie<unsigned int,unsigned int>>::clear(a1, 0);
  return a1;
}

uint64_t Trie<unsigned int,unsigned int>::findTrie(_DWORD **a1, unsigned int *a2, unsigned char *a3)
{
  uint64_t v4 = a1;
  if (!a2 || (unsigned int v6 = *a2, v6 == -1))
  {
    *a3 = 1;
  }
  else
  {
    unsigned int v8 = 0;
    if (LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(a1, v6, &v8))
    {
      return Trie<unsigned int,unsigned int>::findTrie(*v4 + 24 * v8 + 8, a2 + 1, a3);
    }
    else
    {
      uint64_t v4 = 0;
      *a3 = 0;
    }
  }
  return (uint64_t)v4;
}

uint64_t Trie<unsigned int,unsigned int>::find(_DWORD **a1, unsigned int a2)
{
  int v5 = 0;
  if (LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(a1, a2, &v5)) {
    uint64_t v3 = (uint64_t)&(*a1)[6 * v5 + 2];
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3) {
    return v3 + 8;
  }
  else {
    return 0;
  }
}

void *Trie<unsigned int,unsigned int>::insertTrie(void *result, unsigned int *a2, unsigned char *a3)
{
  if (!a2 || (unsigned int v5 = *a2, v5 == -1))
  {
LABEL_6:
    *a3 = 1;
  }
  else
  {
    unsigned int v6 = a2 + 1;
    while (1)
    {
      uint64_t result = (void *)LHash<unsigned int,Trie<unsigned int,unsigned int>>::insert(result, v5, a3);
      if (!*a3) {
        break;
      }
      unsigned int v7 = *v6++;
      unsigned int v5 = v7;
      if (v7 == -1) {
        goto LABEL_6;
      }
    }
    char v8 = 0;
    return (void *)Trie<unsigned int,unsigned int>::insertTrie(result, v6, &v8);
  }
  return result;
}

uint64_t Trie<unsigned int,unsigned int>::dump(_DWORD **a1, int a2)
{
  LHashIter<unsigned int,Trie<unsigned int,unsigned int>>::LHashIter((uint64_t)v11, a1, 0);
  int v10 = 0;
  uint64_t v3 = (void *)MEMORY[0x1E4FBA240];
  uint64_t v4 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    uint64_t v5 = LHashIter<unsigned int,Trie<unsigned int,unsigned int>>::next((uint64_t)v11, &v10);
    if (!v5) {
      break;
    }
    for (int i = a2; i; --i)
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" ", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Key = ", 6);
    unsigned int v7 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
    char v8 = std::locale::use_facet(&v13, v4);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(&v13);
    std::ostream::put();
    std::ostream::flush();
    Trie<unsigned int,unsigned int>::dump(v5, (a2 + 5));
  }
  uint64_t result = v12;
  if (v12) {
    return MEMORY[0x1B3EA8630](v12, 0x1000C8052888210);
  }
  return result;
}

void sub_1B1C32E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14)
{
  if (a13) {
    MEMORY[0x1B3EA8630](a13, 0x1000C8052888210);
  }
  _Unwind_Resume(a1);
}

uint64_t TrieIter2<unsigned int,unsigned int>::TrieIter2(uint64_t a1, _DWORD **a2, _DWORD *a3, int a4, uint64_t a5)
{
  unsigned int v6 = a3;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  LHashIter<unsigned int,Trie<unsigned int,unsigned int>>::LHashIter(a1 + 32, a2, a5);
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  if (!a4) {
    goto LABEL_4;
  }
  if (a4 == 1)
  {
    ++v6;
LABEL_4:
    *unsigned int v6 = -1;
  }
  return a1;
}

uint64_t TrieIter2<unsigned int,unsigned int>::~TrieIter2(uint64_t a1)
{
  if (*(void *)(a1 + 64))
  {
    uint64_t v2 = TrieIter2<unsigned int,unsigned int>::~TrieIter2();
    MEMORY[0x1B3EA8670](v2, 0x10F0C40A7879D68);
  }
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3) {
    MEMORY[0x1B3EA8630](v3, 0x1000C8052888210);
  }
  *(void *)(a1 + 56) = 0;
  return a1;
}

uint64_t TrieIter2<unsigned int,unsigned int>::next(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    if (v2 == 1)
    {
      uint64_t v3 = a1 + 32;
      uint64_t v4 = *(_DWORD **)(a1 + 8);
      return LHashIter<unsigned int,Trie<unsigned int,unsigned int>>::next(v3, v4);
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 64);
      if (v6)
      {
        uint64_t result = TrieIter2<unsigned int,unsigned int>::next(v6);
        if (result) {
          return result;
        }
        uint64_t v7 = *(void *)(a1 + 64);
        if (v7)
        {
          uint64_t v8 = TrieIter2<unsigned int,unsigned int>::~TrieIter2(v7);
          MEMORY[0x1B3EA8670](v8, 0x10F0C40A7879D68);
        }
        *(void *)(a1 + 64) = 0;
      }
      uint64_t result = LHashIter<unsigned int,Trie<unsigned int,unsigned int>>::next(a1 + 32, *(_DWORD **)(a1 + 8));
      if (result) {
        operator new();
      }
    }
  }
  else if (*(unsigned char *)(a1 + 72))
  {
    return 0;
  }
  else
  {
    *(unsigned char *)(a1 + 72) = 1;
    return *(void *)a1;
  }
  return result;
}

void sub_1B1C33044(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F0C40A7879D68);
  _Unwind_Resume(a1);
}

uint64_t SArray_compareKey<unsigned int>(int a1, int a2)
{
  return (a1 - a2);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int v10 = (unsigned int *)result;
LABEL_2:
  unsigned int v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    int v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * *(a2 - 1) + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * *v11 + 16));
          if ((result & 0x80000000) != 0)
          {
            unsigned int v22 = *v11;
            *unsigned int v11 = *(a2 - 1);
            *(a2 - 1) = v22;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v11, v11 + 1, a2 - 1, a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v11, v11 + 1, v11 + 2, a2 - 1, a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *,unsigned int *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v11, &v11[v15 >> 1], a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v11 + 1, v17 - 1, a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v11 + 2, &v11[v16 + 1], a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v17 - 1, v17, &v11[v16 + 1], a3);
      unsigned int v18 = *v11;
      *unsigned int v11 = *v17;
      unsigned int *v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(&v11[v15 >> 1], v11, a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * *(v11 - 1) + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * *v11 + 16)) & 0x80000000) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &>(v11, a2, a3);
      unsigned int v11 = (unsigned int *)result;
      goto LABEL_19;
    }
LABEL_14:
    v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &>(v11, a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v11, v19, a3);
    unsigned int v11 = v19 + 1;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v19 + 1, a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *,false>(v10, v19, a3, -v13, a5 & 1);
      unsigned int v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>((uint64_t)v11, a2, a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>((uint64_t)v11, a2, a3);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  if ((unsigned int *)result != a2)
  {
    uint64_t v4 = (unsigned int *)result;
    char v5 = (unsigned int *)(result + 4);
    if ((unsigned int *)(result + 4) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (unsigned int *)result;
      do
      {
        unsigned int v10 = *v8;
        unsigned int v9 = v8[1];
        uint64_t v8 = v5;
        uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * v9 + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * v10 + 16));
        if ((result & 0x80000000) != 0)
        {
          unsigned int v11 = *v8;
          uint64_t v12 = v7;
          while (1)
          {
            *(unsigned int *)((char *)v4 + v12 + 4) = *(unsigned int *)((char *)v4 + v12);
            if (!v12) {
              break;
            }
            uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * v11 + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * *(unsigned int *)((char *)v4 + v12 - 4) + 16));
            v12 -= 4;
            if ((result & 0x80000000) == 0)
            {
              uint64_t v13 = (unsigned int *)((char *)v4 + v12 + 4);
              goto LABEL_10;
            }
          }
          uint64_t v13 = v4;
LABEL_10:
          unsigned int *v13 = v11;
        }
        char v5 = v8 + 1;
        v7 += 4;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  if ((unsigned int *)result != a2)
  {
    uint64_t v4 = (unsigned int *)result;
    for (int i = (unsigned int *)(result + 4); v4 + 1 != a2; int i = v4 + 1)
    {
      unsigned int v8 = *v4;
      unsigned int v7 = v4[1];
      uint64_t v4 = i;
      uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * v7 + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * v8 + 16));
      if ((result & 0x80000000) != 0)
      {
        unsigned int v9 = *v4;
        unsigned int v10 = v4;
        do
        {
          unsigned int v11 = v10;
          unsigned int v12 = *--v10;
          *unsigned int v11 = v12;
          uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * v9 + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * *(v11 - 2) + 16));
        }
        while ((result & 0x80000000) != 0);
        unsigned int *v10 = v9;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  int v8 = (*(uint64_t (**)(void, void))(a4 + 16))(*(unsigned int *)(*(void *)a4 + 8 + 24 * *a2 + 16), *(unsigned int *)(*(void *)a4 + 8 + 24 * *a1 + 16));
  int v9 = (*(uint64_t (**)(void, void))(a4 + 16))(*(unsigned int *)(*(void *)a4 + 8 + 24 * *a3 + 16), *(unsigned int *)(*(void *)a4 + 8 + 24 * *a2 + 16));
  if (v8 < 0)
  {
    unsigned int v11 = *a1;
    if (v9 < 0)
    {
      *a1 = *a3;
      *a3 = v11;
    }
    else
    {
      *a1 = *a2;
      *a2 = v11;
      if (((*(uint64_t (**)(void, void))(a4 + 16))(*(unsigned int *)(*(void *)a4 + 8 + 24 * *a3 + 16), *(unsigned int *)(*(void *)a4 + 8 + 24 * v11 + 16)) & 0x80000000) != 0)
      {
        unsigned int v12 = *a2;
        *a2 = *a3;
        *a3 = v12;
        return 2;
      }
    }
  }
  else
  {
    if ((v9 & 0x80000000) == 0) {
      return 0;
    }
    unsigned int v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    if (((*(uint64_t (**)(void, void))(a4 + 16))(*(unsigned int *)(*(void *)a4 + 8 + 24 * *a2 + 16), *(unsigned int *)(*(void *)a4 + 8 + 24 * *a1 + 16)) & 0x80000000) != 0)
    {
      unsigned int v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
      return 2;
    }
  }
  return 1;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  unsigned int v6 = *a1;
  if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * *a1 + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * *(a2 - 1) + 16)) & 0x80000000) != 0)
  {
    int v8 = a1;
    do
    {
      unsigned int v9 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * v6 + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * v9 + 16)) & 0x80000000) == 0);
  }
  else
  {
    unsigned int v7 = a1 + 1;
    do
    {
      int v8 = v7;
      if (v7 >= v4) {
        break;
      }
      ++v7;
    }
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * v6 + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * *v8 + 16)) & 0x80000000) == 0);
  }
  if (v8 < v4)
  {
    do
      unsigned int v10 = *--v4;
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * v6 + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * v10 + 16)) & 0x80000000) != 0);
  }
  while (v8 < v4)
  {
    unsigned int v11 = *v8;
    *int v8 = *v4;
    *uint64_t v4 = v11;
    do
    {
      unsigned int v12 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * v6 + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * v12 + 16)) & 0x80000000) == 0);
    do
      unsigned int v13 = *--v4;
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * v6 + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * v13 + 16)) & 0x80000000) != 0);
  }
  if (v8 - 1 != a1) {
    *a1 = *(v8 - 1);
  }
  *(v8 - 1) = v6;
  return v8;
}

unsigned int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  unsigned int v7 = *a1;
  do
    int v8 = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * a1[++v6] + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * v7 + 16));
  while (v8 < 0);
  unsigned int v9 = &a1[v6];
  unsigned int v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      unsigned int v12 = *--a2;
    }
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * v12 + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * v7 + 16)) & 0x80000000) == 0);
  }
  else
  {
    do
      unsigned int v11 = *--a2;
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * v11 + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * v7 + 16)) & 0x80000000) == 0);
  }
  if (v9 < a2)
  {
    unsigned int v13 = (int *)&a1[v6];
    unsigned int v14 = (int *)a2;
    do
    {
      int v15 = *v13;
      int *v13 = *v14;
      int *v14 = v15;
      do
      {
        unsigned int v16 = v13[1];
        ++v13;
      }
      while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * v16 + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * v7 + 16)) & 0x80000000) != 0);
      do
        unsigned int v17 = *--v14;
      while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * v17 + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * v7 + 16)) & 0x80000000) == 0);
    }
    while (v13 < v14);
    unsigned int v10 = (unsigned int *)(v13 - 1);
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  unsigned int *v10 = v7;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * *(a2 - 1) + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * *a1 + 16)) & 0x80000000) != 0)
      {
        unsigned int v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unsigned int v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      unsigned int v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * *v10 + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * *v9 + 16)) & 0x80000000) != 0)
    {
      unsigned int v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v14 + 12) = *(unsigned int *)((char *)a1 + v14 + 8);
        if (v14 == -8) {
          break;
        }
        int v15 = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * v13 + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * *(unsigned int *)((char *)a1 + v14 + 4) + 16));
        v14 -= 4;
        if ((v15 & 0x80000000) == 0)
        {
          unsigned int v16 = (unsigned int *)((char *)a1 + v14 + 12);
          goto LABEL_12;
        }
      }
      unsigned int v16 = a1;
LABEL_12:
      unsigned int *v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    unsigned int v9 = v10;
    v11 += 4;
    if (++v10 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a2, a3, a5);
  uint64_t result = (*(uint64_t (**)(void, void))(a5 + 16))(*(unsigned int *)(*(void *)a5 + 8 + 24 * *a4 + 16), *(unsigned int *)(*(void *)a5 + 8 + 24 * *a3 + 16));
  if ((result & 0x80000000) != 0)
  {
    unsigned int v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = (*(uint64_t (**)(void, void))(a5 + 16))(*(unsigned int *)(*(void *)a5 + 8 + 24 * *a3 + 16), *(unsigned int *)(*(void *)a5 + 8 + 24 * *a2 + 16));
    if ((result & 0x80000000) != 0)
    {
      unsigned int v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = (*(uint64_t (**)(void, void))(a5 + 16))(*(unsigned int *)(*(void *)a5 + 8 + 24 * *a2 + 16), *(unsigned int *)(*(void *)a5 + 8 + 24 * *a1 + 16));
      if ((result & 0x80000000) != 0)
      {
        unsigned int v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a2, a3, a4, a6);
  uint64_t result = (*(uint64_t (**)(void, void))(a6 + 16))(*(unsigned int *)(*(void *)a6 + 8 + 24 * *a5 + 16), *(unsigned int *)(*(void *)a6 + 8 + 24 * *a4 + 16));
  if ((result & 0x80000000) != 0)
  {
    unsigned int v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = (*(uint64_t (**)(void, void))(a6 + 16))(*(unsigned int *)(*(void *)a6 + 8 + 24 * *a4 + 16), *(unsigned int *)(*(void *)a6 + 8 + 24 * *a3 + 16));
    if ((result & 0x80000000) != 0)
    {
      unsigned int v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = (*(uint64_t (**)(void, void))(a6 + 16))(*(unsigned int *)(*(void *)a6 + 8 + 24 * *a3 + 16), *(unsigned int *)(*(void *)a6 + 8 + 24 * *a2 + 16));
      if ((result & 0x80000000) != 0)
      {
        unsigned int v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = (*(uint64_t (**)(void, void))(a6 + 16))(*(unsigned int *)(*(void *)a6 + 8 + 24 * *a2 + 16), *(unsigned int *)(*(void *)a6 + 8 + 24 * *a1 + 16));
        if ((result & 0x80000000) != 0)
        {
          unsigned int v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unsigned int v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    unsigned int v13 = a2;
    if (a2 != a3)
    {
      unsigned int v14 = a2;
      do
      {
        if (((*(uint64_t (**)(void, void))(a4 + 16))(*(unsigned int *)(*(void *)a4 + 8 + 24 * *v14 + 16), *(unsigned int *)(*(void *)a4 + 8 + 24 * *a1 + 16)) & 0x80000000) != 0)
        {
          unsigned int v15 = *v14;
          unsigned int *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      unsigned int v13 = a3;
    }
    if (v8 >= 5)
    {
      uint64_t v16 = (unint64_t)v8 >> 2;
      unsigned int v17 = a2 - 1;
      do
      {
        unsigned int v18 = *a1;
        v19 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a4, v16);
        if (v17 == v19)
        {
          unsigned int *v19 = v18;
        }
        else
        {
          unsigned int *v19 = *v17;
          unsigned int *v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>((uint64_t)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v6 = result;
    int64_t v16 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v9 = ((uint64_t)a4 - result) >> 1;
      uint64_t v10 = v9 + 1;
      unint64_t v11 = (unsigned int *)(result + 4 * (v9 + 1));
      uint64_t v12 = v9 + 2;
      if (v9 + 2 < a3
        && (*(int (**)(void, void))(a2 + 16))(*(unsigned int *)(*(void *)a2 + 8 + 24 * *v11 + 16), *(unsigned int *)(*(void *)a2 + 8 + 24 * v11[1] + 16)) < 0)
      {
        ++v11;
        uint64_t v10 = v12;
      }
      uint64_t result = (*(uint64_t (**)(void, void))(a2 + 16))(*(unsigned int *)(*(void *)a2 + 8 + 24 * *v11 + 16), *(unsigned int *)(*(void *)a2 + 8 + 24 * *v5 + 16));
      if ((result & 0x80000000) == 0)
      {
        unsigned int v13 = *v5;
        do
        {
          unsigned int v14 = v11;
          *char v5 = *v11;
          if (v16 < v10) {
            break;
          }
          uint64_t v15 = (2 * v10) | 1;
          unint64_t v11 = (unsigned int *)(v6 + 4 * v15);
          if (2 * v10 + 2 < a3
            && (*(int (**)(void, void))(a2 + 16))(*(unsigned int *)(*(void *)a2 + 8 + 24 * *v11 + 16), *(unsigned int *)(*(void *)a2 + 8 + 24 * v11[1] + 16)) < 0)
          {
            ++v11;
            uint64_t v15 = 2 * v10 + 2;
          }
          uint64_t result = (*(uint64_t (**)(void, void))(a2 + 16))(*(unsigned int *)(*(void *)a2 + 8 + 24 * *v11 + 16), *(unsigned int *)(*(void *)a2 + 8 + 24 * v13 + 16));
          char v5 = v14;
          uint64_t v10 = v15;
        }
        while ((result & 0x80000000) == 0);
        unsigned int *v14 = v13;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3
      && (*(int (**)(void, void))(a2 + 16))(*(unsigned int *)(*(void *)a2 + 8 + 24 * *v9 + 16), *(unsigned int *)(*(void *)a2 + 8 + 24 * a1[v6 + 2] + 16)) < 0)
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (unsigned int *)(result + 4 * (v4 >> 1));
    uint64_t v9 = (unsigned int *)(a2 - 4);
    uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * *v8 + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * *(unsigned int *)(a2 - 4) + 16));
    if ((result & 0x80000000) != 0)
    {
      unsigned int v10 = *v9;
      do
      {
        uint64_t v11 = v8;
        *uint64_t v9 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (unsigned int *)(v6 + 4 * v7);
        uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * *v8 + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * v10 + 16));
        uint64_t v9 = v11;
      }
      while ((result & 0x80000000) != 0);
      *uint64_t v11 = v10;
    }
  }
  return result;
}

void std::default_delete<quasar::lm::TokenStringAndCount const>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    char v5 = (void **)(a2 + 104);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
    uint64_t v3 = *(void **)(a2 + 80);
    if (v3)
    {
      *(void *)(a2 + 88) = v3;
      operator delete(v3);
    }
    unint64_t v4 = *(void **)(a2 + 56);
    if (v4)
    {
      *(void *)(a2 + 64) = v4;
      operator delete(v4);
    }
    char v5 = (void **)(a2 + 32);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*(void **)(a2 + 8));
    }
    MEMORY[0x1B3EA8670](a2, 0x1032C40D9E35CA9);
  }
}

void Array<char>::alloc()
{
}

void Array<char const**>::alloc()
{
}

uint64_t Array<char const**>::operator[](int *a1, uint64_t a2)
{
  unint64_t v2 = a2 - *a1;
  if (v2 >= a1[1])
  {
    a1[1] = v2 + 1;
    if (v2 >= a1[4]) {
      Array<char const**>::alloc();
    }
  }
  return *((void *)a1 + 1) + 8 * v2;
}

uint64_t quasar::NFHatTransformer::estimateSilenceDuration(quasar::NFHatTransformer *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = kaldi::MatrixBase<float>::NumRows(a2);
  if ((int)result >= 1)
  {
    int v9 = 0;
    do
    {
      quasar::NFHatTransformer::estimateSilenceDuration(a1, *(float *)(*(void *)a2 + 4 * *(_DWORD *)(a2 + 16) * v9), a3);
      float v10 = *(double *)a1;
      uint64_t v12 = *(float **)(a4 + 8);
      unint64_t v11 = *(void *)(a4 + 16);
      if ((unint64_t)v12 >= v11)
      {
        unsigned int v14 = *(float **)a4;
        uint64_t v15 = ((uint64_t)v12 - *(void *)a4) >> 2;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v11 - (void)v14;
        if (v17 >> 1 > v16) {
          unint64_t v16 = v17 >> 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 16, v18);
          unsigned int v14 = *(float **)a4;
          uint64_t v12 = *(float **)(a4 + 8);
        }
        else
        {
          v19 = 0;
        }
        char v20 = (float *)&v19[4 * v15];
        *char v20 = v10;
        unsigned int v13 = v20 + 1;
        while (v12 != v14)
        {
          int v21 = *((_DWORD *)v12-- - 1);
          *((_DWORD *)v20-- - 1) = v21;
        }
        *(void *)a4 = v20;
        *(void *)(a4 + 8) = v13;
        *(void *)(a4 + 16) = &v19[4 * v18];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *uint64_t v12 = v10;
        unsigned int v13 = v12 + 1;
      }
      *(void *)(a4 + 8) = v13;
      ++v9;
      uint64_t result = kaldi::MatrixBase<float>::NumRows(a2);
    }
    while (v9 < (int)result);
  }
  return result;
}

void quasar::NFHatTransformer::estimateSilenceDuration(quasar::NFHatTransformer *this, float a2, int a3)
{
  double v6 = *((double *)this + 9);
  double v7 = *((double *)this + 7);
  double v8 = v6 * v7;
  double v9 = 1.0 - v6;
  double v10 = (1.0 - v6) * (1.0 - v7);
  double v11 = v6 * (1.0 - v7);
  double v12 = v9 * v7;
  if (v12 <= v11) {
    double v13 = v11;
  }
  else {
    double v13 = v12;
  }
  if (v8 <= v10) {
    double v14 = v10;
  }
  else {
    double v14 = v8;
  }
  if (v8 <= v10)
  {
    *((_DWORD *)this + 20) = 0;
    double v16 = 0.0;
  }
  else
  {
    unsigned int v15 = *((_DWORD *)this + 20) + 1;
    *((_DWORD *)this + 20) = v15;
    double v16 = (double)v15;
  }
  float v17 = *((double *)this + 8);
  double v18 = v14 * powf(a2, v17);
  double v19 = v18 / (v18 + v13 * powf(1.0 - a2, v17));
  *((double *)this + 9) = v19;
  *(double *)this = v19 * v16 * (double)a3;
  if (*((unsigned char *)this + 84))
  {
    unint64_t v20 = *((void *)this + 3);
    int v21 = (double *)*((void *)this + 2);
    if ((unint64_t)v21 >= v20)
    {
      v23 = (double *)*((void *)this + 1);
      uint64_t v24 = v21 - v23;
      if ((unint64_t)(v24 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = v20 - (void)v23;
      unint64_t v26 = (uint64_t)(v20 - (void)v23) >> 2;
      if (v26 <= v24 + 1) {
        unint64_t v26 = v24 + 1;
      }
      if (v25 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v26;
      }
      if (v27)
      {
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 24, v27);
        v23 = (double *)*((void *)this + 1);
        int v21 = (double *)*((void *)this + 2);
        double v19 = *((double *)this + 9);
      }
      else
      {
        v28 = 0;
      }
      v29 = (double *)&v28[8 * v24];
      v30 = &v28[8 * v27];
      double *v29 = v19;
      unsigned int v22 = v29 + 1;
      while (v21 != v23)
      {
        uint64_t v31 = *((void *)v21-- - 1);
        *((void *)v29-- - 1) = v31;
      }
      *((void *)this + 1) = v29;
      *((void *)this + 2) = v22;
      *((void *)this + 3) = v30;
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      *int v21 = v19;
      unsigned int v22 = v21 + 1;
    }
    unint64_t v32 = *((void *)this + 6);
    *((void *)this + 2) = v22;
    v33 = (char *)*((void *)this + 5);
    if ((unint64_t)v33 >= v32)
    {
      v35 = (unsigned char *)*((void *)this + 4);
      uint64_t v36 = (v33 - v35) >> 2;
      if ((unint64_t)(v36 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v37 = v32 - (void)v35;
      unint64_t v38 = (uint64_t)(v32 - (void)v35) >> 1;
      if (v38 <= v36 + 1) {
        unint64_t v38 = v36 + 1;
      }
      if (v37 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v39 = v38;
      }
      if (v39)
      {
        v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 48, v39);
        v35 = (unsigned char *)*((void *)this + 4);
        v33 = (char *)*((void *)this + 5);
      }
      else
      {
        v40 = 0;
      }
      v41 = &v40[4 * v36];
      v42 = &v40[4 * v39];
      *(_DWORD *)v41 = *((_DWORD *)this + 20);
      v34 = v41 + 4;
      while (v33 != v35)
      {
        int v43 = *((_DWORD *)v33 - 1);
        v33 -= 4;
        *((_DWORD *)v41 - 1) = v43;
        v41 -= 4;
      }
      *((void *)this + 4) = v41;
      *((void *)this + 5) = v34;
      *((void *)this + 6) = v42;
      if (v35) {
        operator delete(v35);
      }
    }
    else
    {
      *(_DWORD *)v33 = *((_DWORD *)this + 20);
      v34 = v33 + 4;
    }
    *((void *)this + 5) = v34;
  }
}

uint64_t quasar::getLmScoreType(uint64_t a1)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    int v1 = *(unsigned __int8 *)(a1 + 23);
    if (v1 != 7)
    {
      uint64_t v2 = a1;
      if (v1 != 9)
      {
        if (v1 != 10) {
          goto LABEL_37;
        }
        if (*(void *)a1 != 0x7270676F6C67656ELL || *(_WORD *)(a1 + 8) != 25199) {
          goto LABEL_37;
        }
        return 0;
      }
      goto LABEL_25;
    }
    if (*(_DWORD *)a1 != 1885826924 || *(_DWORD *)(a1 + 3) != 1651470960)
    {
LABEL_37:
      memset(v18, 0, sizeof(v18));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
      double v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Unknown LM score type \"", 23);
      int v13 = *(char *)(a1 + 23);
      if (v13 >= 0) {
        uint64_t v14 = a1;
      }
      else {
        uint64_t v14 = *(void *)a1;
      }
      if (v13 >= 0) {
        uint64_t v15 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v15 = *(void *)(a1 + 8);
      }
      double v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "\"");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v18);
    }
    return 1;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5 == 7)
  {
    if (**(_DWORD **)a1 == 1885826924 && *(_DWORD *)(*(void *)a1 + 3) == 1651470960) {
      return 1;
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  else if (v5 == 10 && **(void **)a1 == 0x7270676F6C67656ELL && *(_WORD *)(*(void *)a1 + 8) == 25199)
  {
    return 0;
  }
  if (v5 != 9) {
    goto LABEL_37;
  }
  uint64_t v2 = *(void *)a1;
LABEL_25:
  uint64_t v8 = *(void *)v2;
  int v9 = *(unsigned __int8 *)(v2 + 8);
  if (v8 != 0x6F72703031676F6CLL || v9 != 98) {
    goto LABEL_37;
  }
  return 2;
}

void *quasar::getLmScoreType@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 >= 3)
  {
    memset(v4, 0, sizeof(v4));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Coding error");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
  }
  uint64_t v2 = off_1E5FFE818[a1];
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void quasar::LmInfo::getScoresFromTokenList(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 != v5)
  {
    int v9 = (void *)(a2 + 16);
    double v10 = *(_DWORD **)(a2 + 8);
    do
    {
      int v11 = *(_DWORD *)(v4 + 24);
      if ((unint64_t)v10 >= *v9)
      {
        double v12 = *(_DWORD **)a2;
        uint64_t v13 = ((uint64_t)v10 - *(void *)a2) >> 2;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = *v9 - (void)v12;
        if (v15 >> 1 > v14) {
          unint64_t v14 = v15 >> 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          float v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v9, v16);
          double v12 = *(_DWORD **)a2;
          double v10 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          float v17 = 0;
        }
        double v18 = &v17[4 * v13];
        *(_DWORD *)double v18 = v11;
        double v19 = v18 + 4;
        while (v10 != v12)
        {
          int v20 = *--v10;
          *((_DWORD *)v18 - 1) = v20;
          v18 -= 4;
        }
        *(void *)a2 = v18;
        *(void *)(a2 + 8) = v19;
        *(void *)(a2 + 16) = &v17[4 * v16];
        if (v12) {
          operator delete(v12);
        }
        double v10 = v19;
      }
      else
      {
        *v10++ = v11;
      }
      *(void *)(a2 + 8) = v10;
      if (*(unsigned char *)(v4 + 37))
      {
        uint64_t v21 = *a4;
        uint64_t v22 = *a3;
        if (*a4 >= (unint64_t)((a3[1] - *a3) >> 2))
        {
          memset(v24, 0, 272);
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, "wrong dimensionality of logScores vector");
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v24);
        }
        int v23 = *(_DWORD *)(v4 + 32);
        *a4 = v21 + 1;
        *(_DWORD *)(v22 + 4 * v21) = v23;
      }
      v4 += 88;
    }
    while (v4 != v5);
  }
}

void sub_1B1C34E24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::CorpusStats::addUtterance(quasar::CorpusStats *this, quasar::LmInfo *a2)
{
  unint64_t v5 = *((void *)this + 11);
  uint64_t v4 = (char *)this + 88;
  unint64_t v6 = *((void *)v4 - 1);
  if (v6 >= v5)
  {
    uint64_t v7 = std::vector<quasar::LmInfo>::__push_back_slow_path<quasar::LmInfo const&>((uint64_t *)this + 9, (uint64_t)a2);
  }
  else
  {
    std::allocator<quasar::LmInfo>::construct[abi:ne180100]<quasar::LmInfo,quasar::LmInfo const&>((uint64_t)v4, *((void *)v4 - 1), (uint64_t)a2);
    uint64_t v7 = v6 + 104;
    *((void *)this + 10) = v6 + 104;
  }
  *((void *)this + 10) = v7;
  if (!*((unsigned char *)a2 + 72)) {
    goto LABEL_28;
  }
  if (*(void *)(*((void *)a2 + 2) - 64)) {
    BOOL v8 = quasar::gLogLevel < 2;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    memset(v27, 0, sizeof(v27));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"utterance doesn't end with sentence-end symbol(", 47);
    int v9 = (void *)std::ostream::operator<<();
    double v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)":", 1);
    uint64_t v11 = *((void *)a2 + 2);
    uint64_t v14 = *(void *)(v11 - 88);
    uint64_t v12 = v11 - 88;
    uint64_t v13 = v14;
    int v15 = *(char *)(v12 + 23);
    if (v15 >= 0) {
      uint64_t v16 = v12;
    }
    else {
      uint64_t v16 = v13;
    }
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      uint64_t v17 = *(void *)(v12 + 8);
    }
    double v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v16, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)")", 1);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v27);
  }
  if (*((unsigned char *)a2 + 36))
  {
    ++*((void *)this + 2);
    *((double *)this + 1) = *((double *)this + 1) + *((float *)a2 + 8);
    uint64_t v19 = *((void *)a2 + 1);
    uint64_t v20 = *((void *)a2 + 2);
    if (v19 == v20) {
      goto LABEL_26;
    }
    char v21 = 1;
    do
    {
      BOOL v22 = *(unsigned char *)(v19 + 37) != 0;
      if (*(unsigned char *)(v19 + 37)) {
        uint64_t v23 = 24;
      }
      else {
        uint64_t v23 = 40;
      }
      ++*(void *)((char *)this + v23);
      if (*(unsigned char *)(v19 + 36)) {
        ++*((void *)this + 4);
      }
      v21 &= v22;
      v19 += 88;
    }
    while (v19 != v20);
    if (v21) {
LABEL_26:
    }
      quasar::CorpusStats::updateNgramHits(this, a2);
    uint64_t v24 = (char *)this + 24;
    uint64_t result = 1;
    uint64_t v26 = -1;
  }
  else
  {
LABEL_28:
    uint64_t result = 0;
    uint64_t v24 = (char *)this + 48;
    uint64_t v26 = 1;
  }
  *(void *)v24 += v26;
  return result;
}

void sub_1B1C3501C(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 80) = v2;
  _Unwind_Resume(exception_object);
}

void quasar::CorpusStats::updateNgramHits(quasar::CorpusStats *this, const quasar::LmInfo *a2)
{
  uint64_t v4 = (char *)*((void *)a2 + 10);
  uint64_t v5 = *((void *)a2 + 11);
  unint64_t v6 = (char *)a2 + 80;
  if (v4 != (char *)v5)
  {
    int v9 = (int *)*((void *)this + 12);
    double v10 = (int *)*((void *)this + 13);
    BOOL v8 = (char *)this + 96;
    if (v9 == v10)
    {
      uint64_t v11 = v9;
      if (v8 != v6)
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v8, v4, v5, (v5 - (uint64_t)v4) >> 2);
        int v9 = (int *)*((void *)this + 12);
        uint64_t v11 = (int *)*((void *)this + 13);
      }
      std::vector<std::vector<unsigned long long>>::resize((uint64_t *)this + 15, v11 - v9);
      int v9 = (int *)*((void *)this + 13);
      if (v9 == *((int **)this + 12))
      {
        double v10 = (int *)*((void *)this + 13);
      }
      else
      {
        uint64_t v12 = 0;
        unint64_t v13 = 0;
        int v9 = (int *)*((void *)this + 12);
        do
        {
          std::vector<unsigned long>::resize(*((void *)this + 15) + v12, v9[v13++] + 1);
          int v9 = (int *)*((void *)this + 12);
          double v10 = (int *)*((void *)this + 13);
          v12 += 24;
        }
        while (v13 < v10 - v9);
      }
    }
    uint64_t v14 = (char *)v10 - (char *)v9;
    int v15 = (const void *)*((void *)a2 + 10);
    if ((char *)v10 - (char *)v9 != *((void *)a2 + 11) - (void)v15 || memcmp(v9, v15, (char *)v10 - (char *)v9))
    {
      if (quasar::gLogLevel < 2) {
        return;
      }
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v27 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Ngram orders from previous utterances inconsistent with ones from current utterance", 83);
      goto LABEL_14;
    }
    uint64_t v16 = *((void *)a2 + 1);
    uint64_t v17 = *((void *)a2 + 2);
    if (v16 == v17)
    {
LABEL_20:
      if (v10 != v9)
      {
        uint64_t v19 = 0;
        uint64_t v20 = v14 >> 2;
        if ((unint64_t)(v14 >> 2) <= 1) {
          uint64_t v20 = 1;
        }
        do
        {
          int v21 = v9[v19];
          if (v21 && v16 != v17)
          {
            BOOL v22 = (void *)(*((void *)this + 15) + 24 * v19);
            LODWORD(v23) = 1;
            uint64_t v24 = v16;
            do
            {
              if (v21 >= (int)v23 + 1) {
                int v25 = v23 + 1;
              }
              else {
                int v25 = v21;
              }
              unint64_t v23 = (v25 - *(_DWORD *)(*(void *)(v24 + 64) + 4 * v19));
              if ((v23 & 0x80000000) == 0 && v23 < (uint64_t)(v22[1] - *v22) >> 3) {
                ++*(void *)(*v22 + 8 * v23);
              }
              v24 += 88;
            }
            while (v24 != v17);
          }
          ++v19;
        }
        while (v19 != v20);
      }
    }
    else
    {
      uint64_t v18 = *((void *)a2 + 1);
      while (*(void *)(v18 + 72) - *(void *)(v18 + 64) == v14)
      {
        v18 += 88;
        if (v18 == v17) {
          goto LABEL_20;
        }
      }
      if (quasar::gLogLevel >= 2)
      {
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v27 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Unexpected number of backoffs: ", 31);
        uint64_t v26 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" vs ", 4);
        std::ostream::operator<<();
LABEL_14:
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v27);
      }
    }
  }
}

void sub_1B1C352F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::vector<std::vector<unsigned long long>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<unsigned long long>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        double v10 = *(void **)(v8 - 24);
        v8 -= 24;
        int v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

double quasar::CorpusStats::getPerplexity(quasar::CorpusStats *this, int a2)
{
  unint64_t v2 = *((void *)this + 3);
  if (a2) {
    v2 += *((void *)this + 2);
  }
  double result = 1.0e21;
  if (v2 && (*((void *)this + 1) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v4 = *((double *)this + 1) / (double)v2;
    int v5 = *(_DWORD *)this;
    if (*(_DWORD *)this == 2)
    {
      double result = __exp10(-v4);
    }
    else
    {
      if (v5 == 1)
      {
        double v4 = -v4;
      }
      else if (v5)
      {
        memset(v6, 0, sizeof(v6));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "Coding error");
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v6);
      }
      double result = exp(v4);
    }
    if (result > 1.0e20) {
      return 1.0e20;
    }
  }
  return result;
}

void sub_1B1C354A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL quasar::CorpusStats::computePerplexity(quasar::CorpusStats *this)
{
  double Perplexity = quasar::CorpusStats::getPerplexity(this, 1);
  *((double *)this + 7) = Perplexity;
  if (Perplexity == 1.0e21) {
    return 0;
  }
  double v4 = quasar::CorpusStats::getPerplexity(this, 0);
  *((double *)this + 8) = v4;
  return v4 != 1.0e21;
}

void quasar::CorpusStats::Ptree(quasar::CorpusStats *this@<X0>, int a2@<W1>, quasar::PTree *a3@<X8>)
{
  quasar::PTree::PTree(a3);
  std::string::basic_string[abi:ne180100]<0>(v42, "utterances");
  unint64_t v6 = (quasar *)*((void *)this + 2);
  LODWORD(v24[0]) = quasar::getType(v6);
  std::to_string((std::string *)((char *)v24 + 8), (unint64_t)v6);
  long long v25 = 0uLL;
  *(void *)&long long v26 = 0;
  BYTE8(v26) = 1;
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v42, (uint64_t)v24, 1);
  quasar::PTree::~PTree((quasar::PTree *)v24);
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v42, "words");
  uint64_t v7 = (quasar *)*((void *)this + 3);
  LODWORD(v24[0]) = quasar::getType(v7);
  std::to_string((std::string *)((char *)v24 + 8), (unint64_t)v7);
  long long v25 = 0uLL;
  *(void *)&long long v26 = 0;
  BYTE8(v26) = 1;
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v42, (uint64_t)v24, 1);
  quasar::PTree::~PTree((quasar::PTree *)v24);
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v42, "OOVs");
  uint64_t v8 = (quasar *)*((void *)this + 4);
  LODWORD(v24[0]) = quasar::getType(v8);
  std::to_string((std::string *)((char *)v24 + 8), (unint64_t)v8);
  long long v25 = 0uLL;
  *(void *)&long long v26 = 0;
  BYTE8(v26) = 1;
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v42, (uint64_t)v24, 1);
  quasar::PTree::~PTree((quasar::PTree *)v24);
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v42, "invalidTokens");
  int v9 = (quasar *)*((void *)this + 5);
  LODWORD(v24[0]) = quasar::getType(v9);
  std::to_string((std::string *)((char *)v24 + 8), (unint64_t)v9);
  long long v25 = 0uLL;
  *(void *)&long long v26 = 0;
  BYTE8(v26) = 1;
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v42, (uint64_t)v24, 1);
  quasar::PTree::~PTree((quasar::PTree *)v24);
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v42, "invalidUtterances");
  double v10 = (quasar *)*((void *)this + 6);
  LODWORD(v24[0]) = quasar::getType(v10);
  std::to_string((std::string *)((char *)v24 + 8), (unint64_t)v10);
  long long v25 = 0uLL;
  *(void *)&long long v26 = 0;
  BYTE8(v26) = 1;
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v42, (uint64_t)v24, 1);
  quasar::PTree::~PTree((quasar::PTree *)v24);
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v42, "scoreType");
  quasar::getLmScoreType(*(_DWORD *)this, v40);
  quasar::PTree::PTree(v24, v40);
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v42, (uint64_t)v24, 1);
  quasar::PTree::~PTree((quasar::PTree *)v24);
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  if (v43 < 0)
  {
    operator delete(v42[0]);
    if (!a2) {
      goto LABEL_19;
    }
  }
  else if (!a2)
  {
    goto LABEL_19;
  }
  uint64_t v11 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v42, "logProb");
  double v12 = *((double *)this + 1);
  LODWORD(v24[0]) = quasar::getType(v11, *(float *)&v12);
  std::to_string((std::string *)((char *)v24 + 8), v12);
  long long v25 = 0uLL;
  *(void *)&long long v26 = 0;
  BYTE8(v26) = 1;
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v42, (uint64_t)v24, 1);
  quasar::PTree::~PTree((quasar::PTree *)v24);
  if (v43 < 0) {
    operator delete(v42[0]);
  }
LABEL_19:
  double v13 = *((double *)this + 7);
  if (v13 == 1.0e21)
  {
    BOOL v14 = quasar::CorpusStats::computePerplexity(this);
    char v15 = quasar::gLogLevel < 4 || v14;
    if ((v15 & 1) == 0)
    {
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v25 = 0u;
      memset(v24, 0, sizeof(v24));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"perplexity calculation failed, words ", 37);
      uint64_t v16 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" logprob = ", 11);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v24);
    }
    double v13 = *((double *)this + 7);
  }
  if (v13 != 1.0e21)
  {
    uint64_t v17 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v42, "PPL");
    double v18 = *((double *)this + 7);
    LODWORD(v24[0]) = quasar::getType(v17, *(float *)&v18);
    std::to_string((std::string *)((char *)v24 + 8), v18);
    long long v25 = 0uLL;
    *(void *)&long long v26 = 0;
    BYTE8(v26) = 1;
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)v42, (uint64_t)v24, 1);
    quasar::PTree::~PTree((quasar::PTree *)v24);
    if (v43 < 0) {
      operator delete(v42[0]);
    }
    uint64_t v19 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v42, "PPL1");
    double v20 = *((double *)this + 8);
    LODWORD(v24[0]) = quasar::getType(v19, *(float *)&v20);
    std::to_string((std::string *)((char *)v24 + 8), v20);
    long long v25 = 0uLL;
    *(void *)&long long v26 = 0;
    BYTE8(v26) = 1;
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)v42, (uint64_t)v24, 1);
    quasar::PTree::~PTree((quasar::PTree *)v24);
    if (v43 < 0) {
      operator delete(v42[0]);
    }
  }
  uint64_t v21 = *((void *)this + 15);
  uint64_t v22 = *((void *)this + 16);
  unint64_t v23 = (quasar ****)((char *)this + 120);
  if (v21 != v22)
  {
    std::string::basic_string[abi:ne180100]<0>(v42, "ngramHits");
    quasar::vec2dToPtree<unsigned long long>(v23, (quasar::PTree *)v24);
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)v42, (uint64_t)v24, 1);
    quasar::PTree::~PTree((quasar::PTree *)v24);
    if (v43 < 0) {
      operator delete(v42[0]);
    }
  }
}

void sub_1B1C35A38(_Unwind_Exception *a1)
{
  quasar::PTree::~PTree(v1);
  _Unwind_Resume(a1);
}

void quasar::vec2dToPtree<unsigned long long>(quasar ****a1@<X0>, quasar::PTree *a2@<X8>)
{
  quasar::PTree::PTree(a2);
  double v4 = *a1;
  int v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      quasar::PTree::PTree((quasar::PTree *)v15);
      unint64_t v6 = *v4;
      uint64_t v7 = v4[1];
      while (v6 != v7)
      {
        uint64_t v8 = *v6;
        int Type = quasar::getType(*v6);
        std::to_string(&v10, (unint64_t)v8);
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        char v14 = 1;
        quasar::PTree::addChild((quasar::PTree *)v15, (const quasar::PTree *)&Type);
        quasar::PTree::~PTree((quasar::PTree *)&Type);
        ++v6;
      }
      quasar::PTree::addChild(a2, (const quasar::PTree *)v15);
      quasar::PTree::~PTree((quasar::PTree *)v15);
      v4 += 3;
    }
    while (v4 != v5);
  }
}

void sub_1B1C35C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  quasar::PTree::~PTree((quasar::PTree *)va);
  quasar::PTree::~PTree(v9);
  _Unwind_Resume(a1);
}

void quasar::CorpusStats::print(quasar::CorpusStats *this)
{
  if (quasar::gLogLevel >= 4)
  {
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v12 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Computed perplexity for ", 24);
    unint64_t v2 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" sentences, ", 12);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" words, ", 8);
    double v4 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" OOVs, ", 7);
    int v5 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" invalid tokens, ", 17);
    unint64_t v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" invalid utterances", 19);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v12);
  }
  if (*((double *)this + 7) == 1.0e21)
  {
    BOOL v7 = quasar::CorpusStats::computePerplexity(this);
    int v8 = quasar::gLogLevel;
    if (v7 || quasar::gLogLevel < 4) {
      goto LABEL_8;
    }
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v12 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"logprob = ", 10);
    int v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"perplexity calculation failed", 29);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v12);
  }
  int v8 = quasar::gLogLevel;
LABEL_8:
  if (v8 >= 4)
  {
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v12 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"logprob = ", 10);
    std::string v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ppl = ", 7);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ppl1 = ", 8);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v12);
  }
}

void sub_1B1C35E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::CorpusStats::collectLogScores(char **a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3 = a3;
  double v4 = (uint64_t *)a2;
  int v5 = a1;
  BOOL v7 = *a1;
  unint64_t v6 = (uint64_t *)a1[1];
  int v8 = *(int **)*a1;
  if (*a1 == (char *)v6)
  {
LABEL_8:
    int v91 = *v8;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 8) = 0u;
    uint64_t v103 = 0;
    uint64_t v12 = *((void *)v8 + 9);
    if (*((void *)v8 + 10) != v12)
    {
      unint64_t v13 = 0;
      int v14 = 0;
      while (1)
      {
        uint64_t v15 = v12 + 104 * v13;
        long long v16 = (unsigned __int8 *)(v15 + 40);
        if (quasar::gLogLevel >= 6)
        {
          long long v119 = 0u;
          long long v120 = 0u;
          long long v117 = 0u;
          long long v118 = 0u;
          long long v115 = 0u;
          long long v116 = 0u;
          long long v113 = 0u;
          long long v114 = 0u;
          long long v111 = 0u;
          long long v112 = 0u;
          long long v109 = 0u;
          long long v110 = 0u;
          long long v107 = 0u;
          long long v108 = 0u;
          long long v105 = 0u;
          long long v106 = 0u;
          long long v104 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
          long long v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"aligning scores of utterance ", 29);
          int v18 = *(char *)(v15 + 63);
          if (v18 >= 0) {
            uint64_t v19 = v15 + 40;
          }
          else {
            uint64_t v19 = *(void *)v16;
          }
          if (v18 >= 0) {
            uint64_t v20 = *(unsigned __int8 *)(v15 + 63);
          }
          else {
            uint64_t v20 = *(void *)(v15 + 48);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v104);
          BOOL v7 = *v5;
        }
        uint64_t v94 = v12 + 104 * v13;
        int v95 = v14;
        int v21 = *(unsigned __int8 *)(v94 + 36);
        uint64_t v22 = v5[1] - v7;
        if ((unint64_t)v22 >= 9)
        {
          unint64_t v23 = v22 >> 3;
          uint64_t v24 = *(unsigned __int8 *)(v15 + 63);
          unint64_t v92 = v13;
          size_t __n = *(void *)(v15 + 48);
          if ((v24 & 0x80u) == 0) {
            uint64_t v25 = *(unsigned __int8 *)(v15 + 63);
          }
          else {
            uint64_t v25 = *(void *)(v15 + 48);
          }
          unint64_t v26 = 1;
          while (1)
          {
            uint64_t v27 = *(void *)(*(void *)&v7[8 * v26] + 72);
            uint64_t v28 = v27 + 104 * v13;
            uint64_t v29 = v28 + 40;
            uint64_t v30 = *(unsigned __int8 *)(v28 + 63);
            uint64_t v31 = *(void *)(v28 + 48);
            if ((v30 & 0x80u) == 0) {
              uint64_t v31 = v30;
            }
            if (v25 != v31) {
              goto LABEL_76;
            }
            long long v32 = (v30 & 0x80u) == 0 ? (unsigned __int8 *)v29 : *(unsigned __int8 **)v29;
            if ((v24 & 0x80) != 0)
            {
              long long v35 = *(const void **)v16;
              long long v36 = v5;
              long long v37 = v16;
              unint64_t v38 = v23;
              long long v39 = v7;
              int v40 = memcmp(v35, v32, __n);
              BOOL v7 = v39;
              unint64_t v23 = v38;
              long long v16 = v37;
              int v5 = v36;
              unint64_t v13 = v92;
              if (v40) {
                goto LABEL_76;
              }
            }
            else if (v24)
            {
              long long v33 = v16;
              uint64_t v34 = v24;
              while (*v33 == *v32)
              {
                ++v33;
                ++v32;
                if (!--v34) {
                  goto LABEL_36;
                }
              }
LABEL_76:
              if (quasar::gLogLevel < 2) {
                return 0;
              }
              long long v119 = 0u;
              long long v120 = 0u;
              long long v117 = 0u;
              long long v118 = 0u;
              long long v115 = 0u;
              long long v116 = 0u;
              long long v113 = 0u;
              long long v114 = 0u;
              long long v111 = 0u;
              long long v112 = 0u;
              long long v109 = 0u;
              long long v110 = 0u;
              long long v107 = 0u;
              long long v108 = 0u;
              long long v105 = 0u;
              long long v106 = 0u;
              long long v104 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
              v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"Utterance ", 10);
              int v63 = *(char *)(v29 + 23);
              if (v63 >= 0) {
                uint64_t v64 = v29;
              }
              else {
                uint64_t v64 = *(void *)v29;
              }
              if (v63 >= 0) {
                uint64_t v65 = *(unsigned __int8 *)(v29 + 23);
              }
              else {
                uint64_t v65 = *(void *)(v29 + 8);
              }
              v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, v64, v65);
              v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" doesn't match ", 15);
              int v68 = (char)v16[23];
              if (v68 >= 0) {
                uint64_t v69 = (uint64_t)v16;
              }
              else {
                uint64_t v69 = *(void *)v16;
              }
              if (v68 >= 0) {
                uint64_t v70 = v16[23];
              }
              else {
                uint64_t v70 = *((void *)v16 + 1);
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v69, v70);
              goto LABEL_127;
            }
LABEL_36:
            if (*(unsigned __int8 *)(v27 + 104 * v13 + 36) != v21) {
              break;
            }
            unint64_t v26 = (v26 + 1);
            if (v23 <= v26) {
              goto LABEL_38;
            }
          }
          if (quasar::gLogLevel < 2) {
            return 0;
          }
          long long v119 = 0u;
          long long v120 = 0u;
          long long v117 = 0u;
          long long v118 = 0u;
          long long v115 = 0u;
          long long v116 = 0u;
          long long v113 = 0u;
          long long v114 = 0u;
          long long v111 = 0u;
          long long v112 = 0u;
          long long v109 = 0u;
          long long v110 = 0u;
          long long v107 = 0u;
          long long v108 = 0u;
          long long v105 = 0u;
          long long v106 = 0u;
          long long v104 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
          v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"Utterance ", 10);
          int v85 = (char)v16[23];
          if (v85 >= 0) {
            uint64_t v86 = (uint64_t)v16;
          }
          else {
            uint64_t v86 = *(void *)v16;
          }
          if (v85 >= 0) {
            uint64_t v87 = v16[23];
          }
          else {
            uint64_t v87 = *((void *)v16 + 1);
          }
          v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, v86, v87);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)" doesn't match isValidScore", 27);
LABEL_127:
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v104);
          return 0;
        }
LABEL_38:
        if (!v21)
        {
          double v4 = (uint64_t *)a2;
          uint64_t v3 = a3;
          ++*(void *)(a3 + 48);
          int v60 = v95;
          goto LABEL_74;
        }
        double v4 = (uint64_t *)a2;
        uint64_t v3 = a3;
        ++*(void *)(a3 + 16);
        __p = 0;
        v101 = 0;
        uint64_t v102 = 0;
        uint64_t v41 = v103;
        quasar::LmInfo::getScoresFromTokenList(v94, (uint64_t)&__p, *a2, &v103);
        long long v42 = *v5;
        uint64_t v43 = v103;
        if ((unint64_t)(v5[1] - *v5) < 9) {
          goto LABEL_68;
        }
        unint64_t v44 = 1;
        unsigned int v45 = 2;
        char v46 = 1;
        do
        {
          uint64_t v98 = 0;
          uint64_t v99 = v41;
          __s2 = 0;
          v97 = 0;
          quasar::LmInfo::getScoresFromTokenList(*(void *)(*(void *)&v42[8 * v44] + 72) + 104 * v13, (uint64_t)&__s2, &(*a2)[3 * v44], &v99);
          if (!memcmp(__p, __s2, v101 - (unsigned char *)__p))
          {
            if (v99 == v43)
            {
              char v52 = 1;
              goto LABEL_62;
            }
            if (quasar::gLogLevel >= 5)
            {
              long long v119 = 0u;
              long long v120 = 0u;
              long long v117 = 0u;
              long long v118 = 0u;
              long long v115 = 0u;
              long long v116 = 0u;
              long long v113 = 0u;
              long long v114 = 0u;
              long long v111 = 0u;
              long long v112 = 0u;
              long long v109 = 0u;
              long long v110 = 0u;
              long long v107 = 0u;
              long long v108 = 0u;
              long long v105 = 0u;
              long long v106 = 0u;
              long long v104 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
              v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"Utterance ", 10);
              int v54 = (char)v16[23];
              if (v54 >= 0) {
                uint64_t v55 = (uint64_t)v16;
              }
              else {
                uint64_t v55 = *(void *)v16;
              }
              if (v54 >= 0) {
                uint64_t v56 = v16[23];
              }
              else {
                uint64_t v56 = *((void *)v16 + 1);
              }
              v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, v55, v56);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)" has non-matching number of token scores", 40);
              goto LABEL_60;
            }
          }
          else if (quasar::gLogLevel >= 5)
          {
            long long v119 = 0u;
            long long v120 = 0u;
            long long v117 = 0u;
            long long v118 = 0u;
            long long v115 = 0u;
            long long v116 = 0u;
            long long v113 = 0u;
            long long v114 = 0u;
            long long v111 = 0u;
            long long v112 = 0u;
            long long v109 = 0u;
            long long v110 = 0u;
            long long v107 = 0u;
            long long v108 = 0u;
            long long v105 = 0u;
            long long v106 = 0u;
            long long v104 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
            v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"Utterance ", 10);
            int v48 = (char)v16[23];
            if (v48 >= 0) {
              uint64_t v49 = (uint64_t)v16;
            }
            else {
              uint64_t v49 = *(void *)v16;
            }
            if (v48 >= 0) {
              uint64_t v50 = v16[23];
            }
            else {
              uint64_t v50 = *((void *)v16 + 1);
            }
            v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v49, v50);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" has non-matching token ids", 27);
LABEL_60:
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v104);
          }
          char v46 = 0;
          char v52 = 0;
LABEL_62:
          if (__s2)
          {
            v97 = __s2;
            operator delete(__s2);
          }
          if ((v52 & 1) == 0) {
            break;
          }
          unint64_t v44 = v45;
          long long v42 = *v5;
          ++v45;
        }
        while (v44 < (v5[1] - *v5) >> 3);
        if (v46)
        {
          uint64_t v43 = v103;
LABEL_68:
          v58 = __p;
          uint64_t v59 = *(void *)(a3 + 32) - (v43 - v41) + ((v101 - (unsigned char *)__p) >> 2);
          *(void *)(a3 + 24) = v43 - v41 + *(void *)(a3 + 24) - 1;
          *(void *)(a3 + 32) = v59;
        }
        else
        {
          uint64_t v103 = v41;
          v58 = __p;
        }
        int v60 = v95;
        if (v58)
        {
          v101 = v58;
          operator delete(v58);
        }
        BOOL v7 = *v5;
LABEL_74:
        unint64_t v13 = (v60 + 1);
        uint64_t v12 = *(void *)(*(void *)v7 + 72);
        int v14 = v13;
        if (0x4EC4EC4EC4EC4EC5 * ((*(void *)(*(void *)v7 + 80) - v12) >> 3) <= v13)
        {
          unint64_t v61 = v103;
          goto LABEL_91;
        }
      }
    }
    unint64_t v61 = 0;
LABEL_91:
    uint64_t v71 = *v4;
    if (v61 < (uint64_t)(*(void *)(*v4 + 8) - *(void *)*v4) >> 2)
    {
      if (quasar::gLogLevel >= 5)
      {
        long long v119 = 0u;
        long long v120 = 0u;
        long long v117 = 0u;
        long long v118 = 0u;
        long long v115 = 0u;
        long long v116 = 0u;
        long long v113 = 0u;
        long long v114 = 0u;
        long long v111 = 0u;
        long long v112 = 0u;
        long long v109 = 0u;
        long long v110 = 0u;
        long long v107 = 0u;
        long long v108 = 0u;
        long long v105 = 0u;
        long long v106 = 0u;
        long long v104 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"dimensionality of logScores was chosen too big: ", 48);
        v72 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)" vs. ", 5);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v104);
        uint64_t v71 = *v4;
      }
      uint64_t v73 = v4[1];
      while (v71 != v73)
      {
        std::vector<float>::resize(v71, v61);
        v71 += 24;
      }
    }
    if (*(void *)(v3 + 16) + *(void *)(v3 + 24) == v61)
    {
      switch(v91)
      {
        case 2:
          uint64_t v78 = *v4;
          uint64_t v79 = v4[1];
          if (*v4 != v79)
          {
            do
            {
              v80 = *(float **)v78;
              v81 = *(float **)(v78 + 8);
              while (v80 != v81)
              {
                float v82 = *v80 * 2.30258509;
                *v80++ = v82;
              }
              v78 += 24;
            }
            while (v78 != v79);
          }
          goto LABEL_118;
        case 1:
LABEL_118:
          uint64_t result = 1;
          *(_DWORD *)uint64_t v3 = 1;
          return result;
        case 0:
          uint64_t v74 = *v4;
          uint64_t v75 = v4[1];
          while (v74 != v75)
          {
            v76 = *(float **)v74;
            v77 = *(float **)(v74 + 8);
            while (v76 != v77)
            {
              float *v76 = -*v76;
              ++v76;
            }
            v74 += 24;
          }
          goto LABEL_118;
      }
      long long v119 = 0u;
      long long v120 = 0u;
      long long v117 = 0u;
      long long v118 = 0u;
      long long v115 = 0u;
      long long v116 = 0u;
      long long v113 = 0u;
      long long v114 = 0u;
      long long v111 = 0u;
      long long v112 = 0u;
      long long v109 = 0u;
      long long v110 = 0u;
      long long v107 = 0u;
      long long v108 = 0u;
      long long v105 = 0u;
      long long v106 = 0u;
      long long v104 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v104, "unsupported LmScoreType");
    }
    else
    {
      long long v119 = 0u;
      long long v120 = 0u;
      long long v117 = 0u;
      long long v118 = 0u;
      long long v115 = 0u;
      long long v116 = 0u;
      long long v113 = 0u;
      long long v114 = 0u;
      long long v111 = 0u;
      long long v112 = 0u;
      long long v109 = 0u;
      long long v110 = 0u;
      long long v107 = 0u;
      long long v108 = 0u;
      long long v105 = 0u;
      long long v106 = 0u;
      long long v104 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v104, "number of collected tokens and utterances inconsistent");
    }
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v104);
  }
  char v9 = 1;
  std::string v10 = *a1;
  while (1)
  {
    if ((v9 & 1) == 0)
    {
      uint64_t v11 = *(_DWORD **)v10;
      if (**(_DWORD **)v10 != *v8)
      {
        if (quasar::gLogLevel >= 2)
        {
          long long v119 = 0u;
          long long v120 = 0u;
          long long v117 = 0u;
          long long v118 = 0u;
          long long v115 = 0u;
          long long v116 = 0u;
          long long v113 = 0u;
          long long v114 = 0u;
          long long v111 = 0u;
          long long v112 = 0u;
          long long v109 = 0u;
          long long v110 = 0u;
          long long v107 = 0u;
          long long v108 = 0u;
          long long v105 = 0u;
          long long v106 = 0u;
          long long v104 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"Score types do not match", 24);
          goto LABEL_127;
        }
        return 0;
      }
      if (*((void *)v11 + 2) != *((void *)v8 + 2))
      {
        if (quasar::gLogLevel >= 2)
        {
          long long v119 = 0u;
          long long v120 = 0u;
          long long v117 = 0u;
          long long v118 = 0u;
          long long v115 = 0u;
          long long v116 = 0u;
          long long v113 = 0u;
          long long v114 = 0u;
          long long v111 = 0u;
          long long v112 = 0u;
          long long v109 = 0u;
          long long v110 = 0u;
          long long v107 = 0u;
          long long v108 = 0u;
          long long v105 = 0u;
          long long v106 = 0u;
          long long v104 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"Number of utterances don't match", 32);
          goto LABEL_127;
        }
        return 0;
      }
      if (*((void *)v11 + 3) != *((void *)v8 + 3)) {
        break;
      }
    }
    char v9 = 0;
    v10 += 8;
    if (v10 == (char *)v6) {
      goto LABEL_8;
    }
  }
  if (quasar::gLogLevel >= 2)
  {
    long long v119 = 0u;
    long long v120 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    long long v115 = 0u;
    long long v116 = 0u;
    long long v113 = 0u;
    long long v114 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v104 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"Number of tokens don't match", 28);
    goto LABEL_127;
  }
  return 0;
}

void sub_1B1C36824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

BOOL quasar::CorpusStats::interpolateCorpusStatsWithBestWeights(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  double v4 = a1[1];
  if (*a1 != v4)
  {
    uint64_t v8 = *(void *)(a2 + 8);
    if (*(void *)a2 != v8 && (v4 - v3) >> 3 != (v8 - *(void *)a2) >> 2)
    {
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "number of CorpusStats and interpolation weights don't match");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    unint64_t v9 = *(void *)(*(void *)v3 + 16) + *(void *)(*(void *)v3 + 24);
    std::vector<float>::vector(__p, v9);
    std::vector<std::vector<float>>::vector(v21, (v4 - v3) >> 3, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((quasar::CorpusStats::collectLogScores(a1, v21, a3) & 1) == 0)
    {
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"could not retrieve scores from CorpusStats", 42);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    if (*(void *)a2 == *(void *)(a2 + 8)
      && (kaldi::quasar::EstimateLinearWeights((uint64_t)v21, (float **)a2, 20, 0.00097656) & 1) == 0)
    {
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"iterative process to obtain optimal interpolation weights failed", 64);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    unint64_t v10 = (v21[0][1] - *v21[0]) >> 2;
    std::vector<float>::vector(&v19, v10);
    if ((kaldi::quasar::InterpolateLogScoresLinearly((uint64_t)v21, a2, (uint64_t *)&v19) & 1) == 0)
    {
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"something went wrong with log-score interpolation", 49);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    uint64_t v11 = (float *)v19;
    double v12 = 0.0;
    while (v11 != v20)
    {
      float v13 = *v11++;
      double v12 = v12 + v13;
    }
    *(double *)(a3 + 8) = v12;
    int v14 = quasar::gLogLevel;
    BOOL v15 = v10 >= v9;
    unint64_t v16 = v10 - v9;
    if (!v15)
    {
      if (quasar::gLogLevel >= 5)
      {
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"number of collected log-scores doesn't match CorpusStats", 56);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        int v14 = quasar::gLogLevel;
      }
      *(void *)(a3 + 24) += v16;
    }
    if (**(_DWORD **)*a1 != *(_DWORD *)a3 && v14 >= 5)
    {
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Input scores are not logProb format, logScores are not comparable", 65);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    quasar::CorpusStats::computePerplexity((quasar::CorpusStats *)a3);
    if (v19)
    {
      uint64_t v20 = (float *)v19;
      operator delete(v19);
    }
    __p[0] = v21;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  return v3 != v4;
}

void sub_1B1C36C74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1C36CB8);
}

void sub_1B1C36C8C()
{
}

void sub_1B1C36C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  if (__p) {
    operator delete(__p);
  }
  a15 = &a12;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

std::string *quasar::FstLmScorerOptions::FstLmScorerOptions(std::string *this, long long *a2, std::string::value_type a3, void **a4, std::string::value_type a5, long long *a6, std::string::size_type a7, std::string::value_type a8, char a9, char a10, int a11, char a12)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v19 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v19;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__s.__data_[0] = a3;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::shared_ptr<kaldi::quasar::LmHandle>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*>(&this[2].__r_.__value_.__l.__size_, *a4, a4[1], ((char *)a4[1] - (char *)*a4) >> 4);
  this[3].__r_.__value_.__s.__data_[8] = a5;
  uint64_t v20 = (std::string *)((char *)this + 88);
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v21 = *a6;
    this[4].__r_.__value_.__l.__size_ = *((void *)a6 + 2);
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
  }
  this[4].__r_.__value_.__r.__words[2] = a7;
  this[5].__r_.__value_.__s.__data_[0] = a8;
  this[5].__r_.__value_.__s.__data_[1] = a9;
  this[5].__r_.__value_.__s.__data_[2] = a10;
  HIDWORD(this[5].__r_.__value_.__r.__words[0]) = a11;
  this[5].__r_.__value_.__s.__data_[8] = a12;
  return this;
}

void sub_1B1C36DCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

void quasar::FstLmScorer::FstLmScorer(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *a1 = &unk_1F0A51B68;
  a1[1] = v3;
  a1[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void sub_1B1C36E9C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x1022C40109BEE27);
  double v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void quasar::FstLmScorer::FstLmScorer(void *a1, uint64_t a2)
{
  std::allocate_shared[abi:ne180100]<quasar::SpeechRecognizerConfig,std::allocator<quasar::SpeechRecognizerConfig>,std::string const&,void>(a2, &v3);
  quasar::FstLmScorer::FstLmScorer(a1, &v3);
}

void sub_1B1C36F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::FstLmScorer::FstLmScorer(uint64_t a1, void **a2)
{
  *(void *)a1 = &unk_1F0A51B68;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  std::vector<std::shared_ptr<quasar::Decoder>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>((void *)(a1 + 32), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(unsigned char *)(a1 + 56) = 0;
  return a1;
}

void sub_1B1C36FA4(_Unwind_Exception *a1)
{
  std::unique_ptr<quasar::SpeechRecognizerModelLoader>::reset[abi:ne180100]((quasar::SpeechRecognizerModelLoader **)(v1 + 24), 0);
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(a1);
}

void quasar::FstLmScorer::~FstLmScorer(quasar::SpeechRecognizerModelLoader **this)
{
  *this = (quasar::SpeechRecognizerModelLoader *)&unk_1F0A51B68;
  uint64_t v3 = (void **)(this + 4);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::unique_ptr<quasar::SpeechRecognizerModelLoader>::reset[abi:ne180100](this + 3, 0);
  uint64_t v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  uint64_t vars8;

  quasar::FstLmScorer::~FstLmScorer(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::FstLmScorer::getLinearCompactLattice()
{
}

void sub_1B1C371E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst(v21);
  _Unwind_Resume(a1);
}

float quasar::FstLmScorer::convertLmCost(int a1, float a2)
{
  if (a1 == 2)
  {
    double v3 = a2 / 2.30258509;
    goto LABEL_7;
  }
  if (a1 == 1)
  {
    double v3 = a2;
LABEL_7:
    float v4 = fmin(v3, 1.0e10);
    return -v4;
  }
  if (a1)
  {
    memset(v5, 0, sizeof(v5));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "Coding error");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v5);
  }
  return fmax(a2, -1.0e10);
}

void quasar::FstLmScorer::convertLmCost(float **a1@<X0>, int a2@<W1>, float **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  double v3 = *a1;
  float v4 = a1[1];
  if (*a1 != v4)
  {
    uint64_t v7 = (uint64_t)(a3 + 2);
    do
    {
      float v8 = quasar::FstLmScorer::convertLmCost(a2, *v3);
      float v9 = v8;
      uint64_t v11 = a3[1];
      unint64_t v10 = (unint64_t)a3[2];
      if ((unint64_t)v11 >= v10)
      {
        float v13 = *a3;
        uint64_t v14 = v11 - *a3;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v10 - (void)v13;
        if (v16 >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          int v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v7, v17);
          float v13 = *a3;
          uint64_t v11 = a3[1];
        }
        else
        {
          int v18 = 0;
        }
        long long v19 = (float *)&v18[4 * v14];
        float *v19 = v9;
        double v12 = v19 + 1;
        while (v11 != v13)
        {
          int v20 = *((_DWORD *)v11-- - 1);
          *((_DWORD *)v19-- - 1) = v20;
        }
        *a3 = v19;
        a3[1] = v12;
        a3[2] = (float *)&v18[4 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *uint64_t v11 = v8;
        double v12 = v11 + 1;
      }
      a3[1] = v12;
      ++v3;
    }
    while (v3 != v4);
  }
}

void sub_1B1C37440(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::FstLmScorer::computeLmScore(uint64_t a1, int a2, int a3, long long *a4, int a5, std::string::value_type a6, int a7, void **a8, std::string::value_type a9, long long *a10, uint64_t a11, int a12, int a13, uint64_t a14, char a15)
{
  quasar::FstLmScorerOptions::FstLmScorerOptions(&v16, a4, a6, a8, a9, a10, 0xFFFFFFFFFFFFFFFFLL, a12, SBYTE1(a12), SBYTE2(a12), a13, a15);
  quasar::FstLmScorer::computeLmScore(a1, (uint64_t)&v16);
}

void sub_1B1C37574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::FstLmScorerOptions::~FstLmScorerOptions((void **)va);
  _Unwind_Resume(a1);
}

void quasar::FstLmScorer::computeLmScore(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v11 = 0uLL;
  uint64_t v12 = 0;
  float v4 = *(uint64_t **)(a2 + 24);
  int v5 = *(uint64_t **)(a2 + 32);
  unint64_t v6 = (long long *)(a2 + 24);
  if (v4 != v5)
  {
    if (&v11 == v6) {
      goto LABEL_8;
    }
    goto LABEL_3;
  }
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if (v7)
  {
    quasar::SpeechRecognizerModelLoader::getDecoderChain(*(void *)(a1 + 24), (const void **)a2, 1, &v9);
    std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate((uint64_t *)&v11);
    long long v11 = v9;
    uint64_t v12 = v10;
    uint64_t v10 = 0;
    long long v9 = 0uLL;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v9;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  }
  else if (&v11 != (long long *)(a1 + 32))
  {
    float v4 = *(uint64_t **)(a1 + 32);
    int v5 = *(uint64_t **)(a1 + 40);
LABEL_3:
    std::vector<std::shared_ptr<quasar::Decoder>>::__assign_with_size[abi:ne180100]<std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>((uint64_t)&v11, v4, v5, ((char *)v5 - (char *)v4) >> 4);
  }
LABEL_8:
  operator new();
}

void sub_1B1C391E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a68);
  }
  JUMPOUT(0x1B1C394BCLL);
}

void sub_1B1C39208()
{
}

void sub_1B1C39210(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1C3950CLL);
}

void sub_1B1C39220()
{
}

void sub_1B1C3923C()
{
}

void sub_1B1C39244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (STACK[0x3A8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x3A8]);
  }
  if (!a72) {
    JUMPOUT(0x1B1C394E0);
  }
  JUMPOUT(0x1B1C394DCLL);
}

void sub_1B1C39268()
{
}

void sub_1B1C39270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a64);
  STACK[0x320] = v71;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);
  STACK[0x320] = (unint64_t)&STACK[0x350];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);
  STACK[0x320] = (unint64_t)&STACK[0x368];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);
  if (STACK[0x388]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x388]);
  }
  if (STACK[0x398]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x398]);
  }
  if (SLOBYTE(STACK[0x3B7]) < 0) {
    operator delete((void *)STACK[0x3A0]);
  }
  if (STACK[0x3C8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x3C8]);
  }
  STACK[0x3A0] = (unint64_t)&a71;
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3A0]);
  if (STACK[0x3D8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x3D8]);
  }
  if (STACK[0x3E8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x3E8]);
  }
  if (STACK[0x3F8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x3F8]);
  }
  if (STACK[0x408]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x408]);
  }
  if (STACK[0x418]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x418]);
  }
  if (STACK[0x428]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x428]);
  }
  JUMPOUT(0x1B1C394E8);
}

void sub_1B1C39358()
{
}

void sub_1B1C39364(_Unwind_Exception *a1)
{
  STACK[0x430] = v1 - 240;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x430]);
  _Unwind_Resume(a1);
}

void sub_1B1C3936C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (v69 < 0) {
    operator delete(v70);
  }
  if (a69 < 0) {
    JUMPOUT(0x1B1C3948CLL);
  }
  JUMPOUT(0x1B1C3949CLL);
}

void sub_1B1C39384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,std::__split_buffer<std::wstring> *a63)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a73);
  if (a69 < 0) {
    JUMPOUT(0x1B1C3948CLL);
  }
  JUMPOUT(0x1B1C3949CLL);
}

void sub_1B1C39394()
{
}

void sub_1B1C393A4()
{
  v0 = (atomic_ullong *)STACK[0x790];
  if (STACK[0x790])
  {
    if (!atomic_fetch_add(v0 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
      (*(void (**)(atomic_ullong *))(*v0 + 16))(v0);
    }
  }
  JUMPOUT(0x1B1C394E8);
}

void sub_1B1C393E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void ***a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void **a59,uint64_t a60,uint64_t a61,void *a62,void *a63)
{
  std::__function::__value_func<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::~__value_func[abi:ne180100]((void *)(v73 - 208));
  if (a58 < 0) {
    operator delete(a53);
  }
  a53 = &a59;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  a59 = (void **)&a73;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a59);
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  if (a62)
  {
    a63 = a62;
    operator delete(a62);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst(&a65);
  uint64_t v74 = *(void **)(v73 - 144);
  if (v74)
  {
    *(void *)(v73 - 136) = v74;
    operator delete(v74);
  }
  if (a67)
  {
    a68 = a67;
    operator delete(a67);
  }
  JUMPOUT(0x1B1C3949CLL);
}

void sub_1B1C393F8()
{
  std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::~__value_func[abi:ne180100]((void *)(v0 - 176));
  JUMPOUT(0x1B1C39404);
}

void sub_1B1C39498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a64 = (uint64_t)&STACK[0x320];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a64);
  unint64_t v71 = (void *)STACK[0x3A0];
  if (STACK[0x3A0])
  {
    STACK[0x3A8] = (unint64_t)v71;
    operator delete(v71);
  }
  if (a70) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a70);
  }
  if (STACK[0x308]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x308]);
  }
  if (STACK[0x318]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x318]);
  }
  quasar::DecoderPassData::~DecoderPassData((quasar::DecoderPassData *)&STACK[0x430]);
  if (STACK[0x7A0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x7A0]);
  }
  std::promise<quasar::Location>::~promise((uint64_t *)(v70 - 248));
  JUMPOUT(0x1B1C394FCLL);
}

void quasar::FstLmScorerOptions::~FstLmScorerOptions(void **this)
{
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  uint64_t v2 = this + 7;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 3;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void quasar::FstLmScorer::getDecoder<quasar::OnlineLatticeBiglmLmeFasterDecoder>(uint64_t a1@<X0>, quasar::Decoder ***a2@<X1>, int a3@<W2>, quasar::Decoder **a4@<X8>)
{
  if (a3 && *(void *)(a1 + 32) == *(void *)(a1 + 40) && !*(unsigned char *)(a1 + 56))
  {
    uint64_t v7 = *a2;
    float v8 = a2[1];
    while (v7 != v8)
    {
      if (quasar::Decoder::isInitialized(*v7))
      {
        memset(v14, 0, 272);
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "Decoder chain was not lazily initialized");
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v14);
      }
      v7 += 2;
    }
    *(unsigned char *)(a1 + 56) = 1;
  }
  *a4 = 0;
  a4[1] = 0;
  long long v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 != v10)
  {
    long long v11 = 0;
    while (*v9)
    {
      if (!v12) {
        goto LABEL_16;
      }
      uint64_t v13 = (std::__shared_weak_count *)v9[1];
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
LABEL_17:
      *a4 = v12;
      a4[1] = (quasar::Decoder *)v13;
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      if (v12)
      {
        quasar::SpeechRecognizerModelLoader::initDecoderIfNeeded(*(quasar::SystemConfig ***)(a1 + 24), v12);
        return;
      }
      v9 += 2;
      long long v11 = v13;
      if (v9 == v10) {
        return;
      }
    }
    uint64_t v12 = 0;
LABEL_16:
    uint64_t v13 = 0;
    goto LABEL_17;
  }
}

void sub_1B1C39730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::initLmInfo<quasar::FstLmScorerOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 112);
  if (v4 != -1)
  {
    *(void *)(a3 + 64) = v4;
    return 1;
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 111);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a1 + 96);
  }
  if (!v7) {
    return 1;
  }
  uint64_t v8 = quasar::SymbolTableList::strToSymbolId(a2, a1 + 88);
  *(void *)(a3 + 64) = v8;
  if (v8 != -1) {
    return 1;
  }
  if (quasar::gLogLevel >= 1)
  {
    memset(v14, 0, sizeof(v14));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Could not find OOV word \"", 25);
    int v10 = *(char *)(a1 + 111);
    if (v10 >= 0) {
      uint64_t v11 = a1 + 88;
    }
    else {
      uint64_t v11 = *(void *)(a1 + 88);
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(a1 + 111);
    }
    else {
      uint64_t v12 = *(void *)(a1 + 96);
    }
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\" in symbol table(s)", 20);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v14);
  }
  return 0;
}

void sub_1B1C39850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::filterTokenIds<quasar::FstLmScorerOptions>(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, std::vector<unsigned int> *a6)
{
  std::vector<long long>::reserve((void **)a5, (a4[1] - *a4) >> 3);
  std::vector<int>::reserve(a6, (a4[1] - *a4) >> 3);
  uint64_t v12 = *a4;
  if (a4[1] == *a4) {
    return 1;
  }
  unint64_t v13 = 0;
  uint64_t v87 = a5 + 16;
  uint64_t p_end_cap = (uint64_t)&a6->__end_cap_;
  while (*(void *)(v12 + 8 * v13) != -1)
  {
    if (a3 && quasar::gLogLevel >= 6)
    {
      long long v104 = 0u;
      long long v105 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      long long v100 = 0u;
      long long v101 = 0u;
      long long v98 = 0u;
      long long v99 = 0u;
      long long v96 = 0u;
      long long v97 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v89 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
      uint64_t v14 = *a3 + 24 * v13;
      int v15 = *(char *)(v14 + 23);
      if (v15 >= 0) {
        uint64_t v16 = *a3 + 24 * v13;
      }
      else {
        uint64_t v16 = *(void *)v14;
      }
      if (v15 >= 0) {
        uint64_t v17 = *(unsigned __int8 *)(v14 + 23);
      }
      else {
        uint64_t v17 = *(void *)(v14 + 8);
      }
      int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, v16, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
      std::ostream::operator<<();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v89);
    }
    std::vector<unsigned int>::pointer end = a6->__end_;
    value = a6->__end_cap_.__value_;
    if (end >= value)
    {
      std::vector<unsigned int>::pointer begin = a6->__begin_;
      uint64_t v29 = end - a6->__begin_;
      unint64_t v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 62) {
        goto LABEL_126;
      }
      uint64_t v31 = (char *)value - (char *)begin;
      if (v31 >> 1 > v30) {
        unint64_t v30 = v31 >> 1;
      }
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v32 = v30;
      }
      if (v32)
      {
        long long v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(p_end_cap, v32);
        std::vector<unsigned int>::pointer begin = a6->__begin_;
        std::vector<unsigned int>::pointer end = a6->__end_;
      }
      else
      {
        long long v33 = 0;
      }
      unint64_t v44 = (unsigned int *)&v33[4 * v29];
      *unint64_t v44 = v13;
      long long v21 = v44 + 1;
      while (end != begin)
      {
        unsigned int v45 = *--end;
        *--unint64_t v44 = v45;
      }
      a6->__begin_ = v44;
      a6->__end_ = v21;
      a6->__end_cap_.__value_ = (unsigned int *)&v33[4 * v32];
      if (begin) {
        operator delete(begin);
      }
    }
    else
    {
      *std::vector<unsigned int>::pointer end = v13;
      long long v21 = end + 1;
    }
    a6->__end_ = v21;
    uint64_t v46 = *a4;
    int v48 = *(void **)(a5 + 8);
    unint64_t v47 = *(void *)(a5 + 16);
    if ((unint64_t)v48 >= v47)
    {
      v51 = *(void **)a5;
      uint64_t v52 = ((uint64_t)v48 - *(void *)a5) >> 3;
      unint64_t v53 = v52 + 1;
      if ((unint64_t)(v52 + 1) >> 61) {
        goto LABEL_127;
      }
      uint64_t v54 = v47 - (void)v51;
      if (v54 >> 2 > v53) {
        unint64_t v53 = v54 >> 2;
      }
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v55 = v53;
      }
      if (v55)
      {
        uint64_t v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v87, v55);
        v51 = *(void **)a5;
        int v48 = *(void **)(a5 + 8);
      }
      else
      {
        uint64_t v56 = 0;
      }
      v57 = &v56[8 * v52];
      *(void *)v57 = *(void *)(v46 + 8 * v13);
      uint64_t v50 = v57 + 8;
      while (v48 != v51)
      {
        uint64_t v58 = *--v48;
        *((void *)v57 - 1) = v58;
        v57 -= 8;
      }
      goto LABEL_108;
    }
    uint64_t v49 = *(void *)(v46 + 8 * v13);
LABEL_56:
    *int v48 = v49;
    uint64_t v50 = v48 + 1;
LABEL_110:
    *(void *)(a5 + 8) = v50;
LABEL_111:
    ++v13;
    uint64_t v12 = *a4;
    if (v13 >= (a4[1] - *a4) >> 3) {
      return 1;
    }
  }
  if (*(unsigned char *)(a1 + 80))
  {
    if (quasar::gLogLevel >= 6)
    {
      if (a3)
      {
        long long v104 = 0uLL;
        long long v105 = 0uLL;
        long long v102 = 0uLL;
        long long v103 = 0uLL;
        long long v100 = 0uLL;
        long long v101 = 0uLL;
        long long v98 = 0uLL;
        long long v99 = 0uLL;
        long long v96 = 0uLL;
        long long v97 = 0uLL;
        long long v94 = 0uLL;
        long long v95 = 0uLL;
        long long v92 = 0uLL;
        long long v93 = 0uLL;
        long long v90 = 0uLL;
        long long v91 = 0uLL;
        long long v89 = 0uLL;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
        uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Could not find \"", 16);
        uint64_t v23 = *a3 + 24 * v13;
        int v24 = *(char *)(v23 + 23);
        if (v24 >= 0) {
          uint64_t v25 = *a3 + 24 * v13;
        }
        else {
          uint64_t v25 = *(void *)v23;
        }
        if (v24 >= 0) {
          uint64_t v26 = *(unsigned __int8 *)(v23 + 23);
        }
        else {
          uint64_t v26 = *(void *)(v23 + 8);
        }
        long long v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v25, v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\" in symbol table(s), ignoring token", 36);
      }
      else
      {
        long long v104 = 0uLL;
        long long v105 = 0uLL;
        long long v102 = 0uLL;
        long long v103 = 0uLL;
        long long v100 = 0uLL;
        long long v101 = 0uLL;
        long long v98 = 0uLL;
        long long v99 = 0uLL;
        long long v96 = 0uLL;
        long long v97 = 0uLL;
        long long v94 = 0uLL;
        long long v95 = 0uLL;
        long long v92 = 0uLL;
        long long v93 = 0uLL;
        long long v90 = 0uLL;
        long long v91 = 0uLL;
        long long v89 = 0uLL;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Could not find token at position ", 33);
        uint64_t v59 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" in symbol table(s), ignoring token", 35);
      }
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v89);
    }
    goto LABEL_111;
  }
  if (*(void *)(a2 + 64) != -1)
  {
    if (quasar::gLogLevel >= 6)
    {
      if (a3)
      {
        long long v104 = 0uLL;
        long long v105 = 0uLL;
        long long v102 = 0uLL;
        long long v103 = 0uLL;
        long long v100 = 0uLL;
        long long v101 = 0uLL;
        long long v98 = 0uLL;
        long long v99 = 0uLL;
        long long v96 = 0uLL;
        long long v97 = 0uLL;
        long long v94 = 0uLL;
        long long v95 = 0uLL;
        long long v92 = 0uLL;
        long long v93 = 0uLL;
        long long v90 = 0uLL;
        long long v91 = 0uLL;
        long long v89 = 0uLL;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
        long long v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Could not find \"", 16);
        uint64_t v35 = *a3 + 24 * v13;
        int v36 = *(char *)(v35 + 23);
        if (v36 >= 0) {
          uint64_t v37 = *a3 + 24 * v13;
        }
        else {
          uint64_t v37 = *(void *)v35;
        }
        if (v36 >= 0) {
          uint64_t v38 = *(unsigned __int8 *)(v35 + 23);
        }
        else {
          uint64_t v38 = *(void *)(v35 + 8);
        }
        long long v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v37, v38);
        int v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"\" in symbol table(s), replacing with \"", 38);
        char v41 = *(unsigned char *)(a1 + 111);
        if (v41 >= 0) {
          uint64_t v42 = a1 + 88;
        }
        else {
          uint64_t v42 = *(void *)(a1 + 88);
        }
        if (v41 >= 0) {
          uint64_t v43 = *(unsigned __int8 *)(a1 + 111);
        }
        else {
          uint64_t v43 = *(void *)(a1 + 96);
        }
      }
      else
      {
        long long v104 = 0uLL;
        long long v105 = 0uLL;
        long long v102 = 0uLL;
        long long v103 = 0uLL;
        long long v100 = 0uLL;
        long long v101 = 0uLL;
        long long v98 = 0uLL;
        long long v99 = 0uLL;
        long long v96 = 0uLL;
        long long v97 = 0uLL;
        long long v94 = 0uLL;
        long long v95 = 0uLL;
        long long v92 = 0uLL;
        long long v93 = 0uLL;
        long long v90 = 0uLL;
        long long v91 = 0uLL;
        long long v89 = 0uLL;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Could not find token at positiob ", 33);
        int v60 = (void *)std::ostream::operator<<();
        int v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)" in symbol table(s), replacing with \"", 37);
        char v61 = *(unsigned char *)(a1 + 111);
        if (v61 >= 0) {
          uint64_t v42 = a1 + 88;
        }
        else {
          uint64_t v42 = *(void *)(a1 + 88);
        }
        if (v61 >= 0) {
          uint64_t v43 = *(unsigned __int8 *)(a1 + 111);
        }
        else {
          uint64_t v43 = *(void *)(a1 + 96);
        }
      }
      v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"\" ", 2);
      std::ostream::operator<<();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v89);
    }
    std::vector<unsigned int>::pointer v64 = a6->__end_;
    int v63 = a6->__end_cap_.__value_;
    if (v64 >= v63)
    {
      std::vector<unsigned int>::pointer v66 = a6->__begin_;
      uint64_t v67 = v64 - a6->__begin_;
      unint64_t v68 = v67 + 1;
      if ((unint64_t)(v67 + 1) >> 62) {
LABEL_126:
      }
        std::vector<int>::__throw_length_error[abi:ne180100]();
      uint64_t v69 = (char *)v63 - (char *)v66;
      if (v69 >> 1 > v68) {
        unint64_t v68 = v69 >> 1;
      }
      if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v70 = v68;
      }
      if (v70)
      {
        unint64_t v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(p_end_cap, v70);
        std::vector<unsigned int>::pointer v66 = a6->__begin_;
        std::vector<unsigned int>::pointer v64 = a6->__end_;
      }
      else
      {
        unint64_t v71 = 0;
      }
      v72 = (unsigned int *)&v71[4 * v67];
      unsigned int *v72 = v13;
      uint64_t v65 = v72 + 1;
      while (v64 != v66)
      {
        unsigned int v73 = *--v64;
        *--v72 = v73;
      }
      a6->__begin_ = v72;
      a6->__end_ = v65;
      a6->__end_cap_.__value_ = (unsigned int *)&v71[4 * v70];
      if (v66) {
        operator delete(v66);
      }
    }
    else
    {
      *std::vector<unsigned int>::pointer v64 = v13;
      uint64_t v65 = v64 + 1;
    }
    a6->__end_ = v65;
    int v48 = *(void **)(a5 + 8);
    unint64_t v74 = *(void *)(a5 + 16);
    if ((unint64_t)v48 < v74)
    {
      uint64_t v49 = *(void *)(a2 + 64);
      goto LABEL_56;
    }
    v51 = *(void **)a5;
    uint64_t v75 = ((uint64_t)v48 - *(void *)a5) >> 3;
    unint64_t v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 61) {
LABEL_127:
    }
      std::vector<int>::__throw_length_error[abi:ne180100]();
    uint64_t v77 = v74 - (void)v51;
    if (v77 >> 2 > v76) {
      unint64_t v76 = v77 >> 2;
    }
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v55 = v76;
    }
    if (v55)
    {
      uint64_t v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v87, v55);
      v51 = *(void **)a5;
      int v48 = *(void **)(a5 + 8);
    }
    else
    {
      uint64_t v56 = 0;
    }
    v57 = &v56[8 * v75];
    *(void *)v57 = *(void *)(a2 + 64);
    uint64_t v50 = v57 + 8;
    while (v48 != v51)
    {
      uint64_t v78 = *--v48;
      *((void *)v57 - 1) = v78;
      v57 -= 8;
    }
LABEL_108:
    *(void *)a5 = v57;
    *(void *)(a5 + 8) = v50;
    *(void *)(a5 + 16) = &v56[8 * v55];
    if (v51) {
      operator delete(v51);
    }
    goto LABEL_110;
  }
  if (a3)
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v104 = 0u;
      long long v105 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      long long v100 = 0u;
      long long v101 = 0u;
      long long v98 = 0u;
      long long v99 = 0u;
      long long v96 = 0u;
      long long v97 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v89 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
      v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Could not find \"", 16);
      uint64_t v81 = *a3 + 24 * v13;
      int v82 = *(char *)(v81 + 23);
      if (v82 >= 0) {
        uint64_t v83 = *a3 + 24 * v13;
      }
      else {
        uint64_t v83 = *(void *)v81;
      }
      if (v82 >= 0) {
        uint64_t v84 = *(unsigned __int8 *)(v81 + 23);
      }
      else {
        uint64_t v84 = *(void *)(v81 + 8);
      }
      int v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, v83, v84);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"\" in symbol table(s)", 20);
LABEL_124:
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v89);
    }
  }
  else if (quasar::gLogLevel >= 1)
  {
    long long v104 = 0u;
    long long v105 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v94 = 0u;
    long long v95 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    long long v89 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Could not find token at position ", 33);
    uint64_t v86 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)" in symbol table(s)", 19);
    goto LABEL_124;
  }
  return 0;
}

void sub_1B1C39FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  _Unwind_Resume(a1);
}

void quasar::FstLmScorer::getDecoder<quasar::OnlineLmRescoringDecoder>(uint64_t a1@<X0>, quasar::Decoder ***a2@<X1>, int a3@<W2>, quasar::Decoder **a4@<X8>)
{
  if (a3 && *(void *)(a1 + 32) == *(void *)(a1 + 40) && !*(unsigned char *)(a1 + 56))
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    while (v7 != v8)
    {
      if (quasar::Decoder::isInitialized(*v7))
      {
        memset(v14, 0, 272);
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "Decoder chain was not lazily initialized");
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v14);
      }
      v7 += 2;
    }
    *(unsigned char *)(a1 + 56) = 1;
  }
  *a4 = 0;
  a4[1] = 0;
  long long v9 = *a2;
  int v10 = a2[1];
  if (*a2 != v10)
  {
    uint64_t v11 = 0;
    while (*v9)
    {
      if (!v12) {
        goto LABEL_16;
      }
      unint64_t v13 = (std::__shared_weak_count *)v9[1];
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
LABEL_17:
      *a4 = v12;
      a4[1] = (quasar::Decoder *)v13;
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      if (v12)
      {
        quasar::SpeechRecognizerModelLoader::initDecoderIfNeeded(*(quasar::SystemConfig ***)(a1 + 24), v12);
        return;
      }
      v9 += 2;
      uint64_t v11 = v13;
      if (v9 == v10) {
        return;
      }
    }
    uint64_t v12 = 0;
LABEL_16:
    unint64_t v13 = 0;
    goto LABEL_17;
  }
}

void sub_1B1C3A1C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::resolvePlaceholder(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6)
{
  quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getPlaceholder(a1, &v59);
  std::string::size_type size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v59.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if (!a2)
    {
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"No regional model map from 1st pass GeoContext available", 56);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    unint64_t v13 = (uint64_t *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a2, (const void **)&v59.__r_.__value_.__l.__data_);
    uint64_t v14 = v13;
    if (a2 + 1 == (uint64_t **)v13)
    {
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"placeholder ", 12);
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v32 = &v59;
      }
      else {
        unint64_t v32 = (std::string *)v59.__r_.__value_.__r.__words[0];
      }
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v33 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v33 = v59.__r_.__value_.__l.__size_;
      }
      long long v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
      uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" not found in model-map for region ", 35);
      int v36 = *(char *)(a4 + 23);
      if (v36 >= 0) {
        uint64_t v37 = a4;
      }
      else {
        uint64_t v37 = *(void *)a4;
      }
      if (v36 >= 0) {
        uint64_t v38 = *(unsigned __int8 *)(a4 + 23);
      }
      else {
        uint64_t v38 = *(void *)(a4 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    uint64_t v16 = v13[7];
    int v15 = (std::__shared_weak_count *)v13[8];
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (a6)
    {
      std::__tree<std::string>::__remove_node_pointer(a2, v13);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)(v14 + 4));
      operator delete(v14);
    }
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr(v16, (std::string *)__p);
    std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(a1 + 24, (long long *)__p);
    if (SBYTE7(v43) < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v16, (uint64_t)__p, &v40);
    uint64_t v17 = *(void *)(a5 + 24);
    if (!v17) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(std::string *__return_ptr))(*(void *)v17 + 48))(&v39);
    long long v18 = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = 0uLL;
    long long v19 = *(std::__shared_weak_count **)(a1 + 64);
    *(_OWORD *)(a1 + 56) = v18;
    if (v19)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      if (v39.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v39.__r_.__value_.__l.__size_);
      }
    }
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
    if (SBYTE7(v43) < 0) {
      operator delete(__p[0]);
    }
    if (quasar::gLogLevel >= 4)
    {
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Using location-specific bigG for ", 33);
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v21 = &v59;
      }
      else {
        long long v21 = (std::string *)v59.__r_.__value_.__r.__words[0];
      }
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v22 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v22 = v59.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
      int v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" from region ", 13);
      int v25 = *(char *)(a1 + 47);
      if (v25 >= 0) {
        uint64_t v26 = a1 + 24;
      }
      else {
        uint64_t v26 = *(void *)(a1 + 24);
      }
      if (v25 >= 0) {
        uint64_t v27 = *(unsigned __int8 *)(a1 + 47);
      }
      else {
        uint64_t v27 = *(void *)(a1 + 32);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    uint64_t v28 = *a3;
    std::operator+<char>();
    uint64_t v29 = std::string::append(&v39, "]");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    *(void *)&long long v43 = *((void *)&v29->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    quasar::SpeechRequestResultData::addDumpAA(v28, (long long *)__p, (const std::string *)(a1 + 24));
    if (SBYTE7(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
}

void sub_1B1C3A5A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (*(char *)(v24 - 81) < 0) {
    operator delete(*(void **)(v24 - 104));
  }
  _Unwind_Resume(exception_object);
}

void quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::resolvePlaceholder(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6)
{
  quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getPlaceholder(a1, &v59);
  std::string::size_type size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v59.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if (!a2)
    {
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"No regional model map from 1st pass GeoContext available", 56);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    unint64_t v13 = (uint64_t *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a2, (const void **)&v59.__r_.__value_.__l.__data_);
    uint64_t v14 = v13;
    if (a2 + 1 == (uint64_t **)v13)
    {
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"placeholder ", 12);
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v32 = &v59;
      }
      else {
        unint64_t v32 = (std::string *)v59.__r_.__value_.__r.__words[0];
      }
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v33 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v33 = v59.__r_.__value_.__l.__size_;
      }
      long long v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
      uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" not found in model-map for region ", 35);
      int v36 = *(char *)(a4 + 23);
      if (v36 >= 0) {
        uint64_t v37 = a4;
      }
      else {
        uint64_t v37 = *(void *)a4;
      }
      if (v36 >= 0) {
        uint64_t v38 = *(unsigned __int8 *)(a4 + 23);
      }
      else {
        uint64_t v38 = *(void *)(a4 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    uint64_t v16 = v13[7];
    int v15 = (std::__shared_weak_count *)v13[8];
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (a6)
    {
      std::__tree<std::string>::__remove_node_pointer(a2, v13);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)(v14 + 4));
      operator delete(v14);
    }
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr(v16, (std::string *)__p);
    std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(a1 + 24, (long long *)__p);
    if (SBYTE7(v43) < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v16, (uint64_t)__p, &v40);
    uint64_t v17 = *(void *)(a5 + 24);
    if (!v17) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(std::string *__return_ptr))(*(void *)v17 + 48))(&v39);
    long long v18 = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = 0uLL;
    long long v19 = *(std::__shared_weak_count **)(a1 + 64);
    *(_OWORD *)(a1 + 56) = v18;
    if (v19)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      if (v39.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v39.__r_.__value_.__l.__size_);
      }
    }
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
    if (SBYTE7(v43) < 0) {
      operator delete(__p[0]);
    }
    if (quasar::gLogLevel >= 4)
    {
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Using location-specific bigG for ", 33);
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v21 = &v59;
      }
      else {
        long long v21 = (std::string *)v59.__r_.__value_.__r.__words[0];
      }
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v22 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v22 = v59.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
      uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" from region ", 13);
      int v25 = *(char *)(a1 + 47);
      if (v25 >= 0) {
        uint64_t v26 = a1 + 24;
      }
      else {
        uint64_t v26 = *(void *)(a1 + 24);
      }
      if (v25 >= 0) {
        uint64_t v27 = *(unsigned __int8 *)(a1 + 47);
      }
      else {
        uint64_t v27 = *(void *)(a1 + 32);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    uint64_t v28 = *a3;
    std::operator+<char>();
    uint64_t v29 = std::string::append(&v39, "]");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    *(void *)&long long v43 = *((void *)&v29->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    quasar::SpeechRequestResultData::addDumpAA(v28, (long long *)__p, (const std::string *)(a1 + 24));
    if (SBYTE7(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
}

void sub_1B1C3AA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (*(char *)(v24 - 81) < 0) {
    operator delete(*(void **)(v24 - 104));
  }
  _Unwind_Resume(exception_object);
}

BOOL quasar::compute(void *a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, void *a10, unsigned int a11, uint64_t a12, int a13, uint64_t *a14, char a15, int a16)
{
  long long v30 = 0;
  uint64_t v31 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a8, *(void *)(a8 + 8), (uint64_t)(*(void *)(a8 + 8) - *(void *)a8) >> 2);
  uint64_t v23 = *a9;
  uint64_t v24 = (std::__shared_weak_count *)a9[1];
  if (v24)
  {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v35 = v24;
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v35 = 0;
  }
  uint64_t v34 = v23;
  quasar::loadConstituentDfsts(a2, a3, a4, a5, a6, a7, (__int32 **)&__p, &v34, v36, 0, a16);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  quasar::createDfst((uint64_t)v36, a10, a11, a14, a15, (uint64_t)a1, &v32);
  uint64_t v37 = (void **)v36;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v37);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (__p)
  {
    long long v30 = __p;
    operator delete(__p);
  }
  uint64_t v27 = v32;
  uint64_t v28 = v33;
  if (v33) {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v25 = quasar::compute(a1, &v27, (uint64_t)a10, a11, a12, a13);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  return v25;
}

void sub_1B1C3AC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::verifyLmInfo(void *a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a4 + 16) - *(void *)(a4 + 8)) >> 3);
  uint64_t v10 = *a2;
  uint64_t v9 = a2[1];
  uint64_t v11 = (v9 - *a2) >> 3;
  if (!*(unsigned char *)(a4 + 72))
  {
    if (v8 != v11)
    {
      if (quasar::gLogLevel >= 4) {
        goto LABEL_4;
      }
      return 1;
    }
LABEL_6:
    if (v9 == v10) {
      return 0;
    }
    uint64_t v12 = 0;
    for (uint64_t i = 24; ; i += 88)
    {
      uint64_t v14 = (uint64_t *)(*(void *)(a4 + 8) + i);
      uint64_t v16 = *v14;
      int v15 = (std::string *)(v14 - 3);
      if (v16 != *(void *)(v10 + 8 * v12)) {
        break;
      }
      if (a1)
      {
        std::string::operator=(v15, (const std::string *)(*a1 + 24 * *(unsigned int *)(*a3 + 4 * v12)));
        uint64_t v10 = *a2;
        uint64_t v9 = a2[1];
      }
      if (++v12 >= (unint64_t)((v9 - v10) >> 3)) {
        return 0;
      }
    }
    if (quasar::gLogLevel >= 4)
    {
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v18 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Mismatch in token IDs", 21);
      goto LABEL_17;
    }
    return 1;
  }
  if (v8 == v11 + 1) {
    goto LABEL_6;
  }
  if (quasar::gLogLevel >= 4)
  {
LABEL_4:
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v18 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Mismatch in tokenLmInfos and filteredIds sizes", 46);
LABEL_17:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v18);
  }
  return 1;
}

void sub_1B1C3AF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::SimpleFstLmRescorerOptions::SimpleFstLmRescorerOptions(uint64_t a1, char a2, long long *a3, uint64_t a4, int a5, char a6)
{
  *(unsigned char *)a1 = a2;
  uint64_t v10 = (std::string *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v11 = *a3;
    v10->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *(void *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 40) = a5;
  *(unsigned char *)(a1 + 44) = a6;
  return a1;
}

uint64_t quasar::SimpleFstLmRescorer::SimpleFstLmRescorer(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v8;
  }
  uint64_t v9 = *(void *)(a2 + 32);
  *(void *)(a1 + 37) = *(void *)(a2 + 37);
  *(void *)(a1 + 32) = v9;
  uint64_t v10 = operator new(0x30uLL);
  v10[1] = 0;
  v10[2] = 0;
  void *v10 = &unk_1F0A60090;
  v10[3] = 0;
  long long v11 = v10 + 3;
  v10[4] = 0;
  v10[5] = 0;
  *(void *)(a1 + 48) = v10 + 3;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = *a4;
  uint64_t v12 = a4[1];
  *(void *)(a1 + 72) = v12;
  if (v12)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    long long v11 = *(uint64_t **)(a1 + 48);
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  unint64_t v13 = (std::__shared_weak_count *)a3[1];
  uint64_t v15 = *a3;
  uint64_t v16 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::SymbolTableList::addSymbolTable(v11, &v15, 0, -1);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  return a1;
}

void sub_1B1C3B0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v7 = *(std::__shared_weak_count **)(v4 + 72);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  long long v8 = *(std::__shared_weak_count **)(v4 + 56);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (*(char *)(v4 + 31) < 0) {
    operator delete(*v5);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::SimpleFstLmRescorer::computeLmScore(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  quasar::SymbolTableList::strsToSymbolIds(*(void *)(a1 + 48), a2, __p);
  uint64_t v6 = quasar::SimpleFstLmRescorer::computeLmScore(a1, (uint64_t *)__p, a3, a2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v6;
}

void sub_1B1C3B184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::SimpleFstLmRescorer::computeLmScore(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  long long v8 = (uint64_t *)(a1 + 80);
  if (*(void *)(a1 + 80) == *(void *)(a1 + 88))
  {
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 72);
    uint64_t v20 = *(void *)(a1 + 64);
    long long v21 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    quasar::createConstituentDfstsFromSecondPassDecoder(&v20, &v16);
    std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate(v8);
    *(_OWORD *)(a1 + 80) = v16;
    *(void *)(a1 + 96) = v17;
    uint64_t v17 = 0;
    long long v16 = 0uLL;
    unint64_t v13 = &v16;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
  }
  uint64_t v10 = 1;
  char v18 = 1;
  kaldi::Timer::Reset((kaldi::Timer *)&v16, (clockid_t)a2);
  uint64_t v19 = 0;
  if (quasar::initLmInfo<quasar::SimpleFstLmRescorerOptions>(a1, *(void *)(a1 + 48), a3))
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    memset(&v12, 0, sizeof(v12));
    if (quasar::filterTokenIds<quasar::SimpleFstLmRescorerOptions>(a1, a3, a4, a2, (uint64_t)&v13, &v12)) {
      quasar::FstLmScorer::getLinearCompactLattice();
    }
    uint64_t v10 = 2;
    if (v12.__begin_)
    {
      v12.__end_ = v12.__begin_;
      operator delete(v12.__begin_);
    }
    if (v13)
    {
      uint64_t v14 = v13;
      operator delete(v13);
    }
  }
  return v10;
}

void sub_1B1C3B380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst(&a17);
  if (a19)
  {
    a20 = (uint64_t)a19;
    operator delete(a19);
  }
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void quasar::createConstituentDfstsFromSecondPassDecoder(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  double v3 = (uint64_t **)(*a1 + 592);
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  memset(v9, 0, sizeof(v9));
  int v10 = 1065353216;
  __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v4 = 0;
  int v5 = 0;
  quasar::loadConstituentDfsts(v3, (uint64_t **)(v2 + 616), v12, v11, (uint64_t)v9, 0xFFFFFFFFLL, (__int32 **)&__p, &v4, a2, 0, 0x20000);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v9);
  *(void *)&v9[0] = v11;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v9);
  *(void *)&v9[0] = v12;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v9);
}

void sub_1B1C3B4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, uint64_t a13, uint64_t a14, void **a15)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  quasar::createConstituentDfstsFromSecondPassDecoder((uint64_t)&a12);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a15);
  a15 = (void **)(v15 - 64);
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](&a15);
  a15 = (void **)(v15 - 40);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

uint64_t quasar::initLmInfo<quasar::SimpleFstLmRescorerOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4 != -1)
  {
    *(void *)(a3 + 64) = v4;
    return 1;
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 31);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a1 + 16);
  }
  if (!v7) {
    return 1;
  }
  uint64_t v8 = quasar::SymbolTableList::strToSymbolId(a2, a1 + 8);
  *(void *)(a3 + 64) = v8;
  if (v8 != -1) {
    return 1;
  }
  if (quasar::gLogLevel >= 1)
  {
    memset(v14, 0, sizeof(v14));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Could not find OOV word \"", 25);
    int v10 = *(char *)(a1 + 31);
    if (v10 >= 0) {
      uint64_t v11 = a1 + 8;
    }
    else {
      uint64_t v11 = *(void *)(a1 + 8);
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(a1 + 31);
    }
    else {
      uint64_t v12 = *(void *)(a1 + 16);
    }
    unint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\" in symbol table(s)", 20);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v14);
  }
  return 0;
}

void sub_1B1C3B61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::filterTokenIds<quasar::SimpleFstLmRescorerOptions>(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, std::vector<unsigned int> *a6)
{
  std::vector<long long>::reserve((void **)a5, (a4[1] - *a4) >> 3);
  std::vector<int>::reserve(a6, (a4[1] - *a4) >> 3);
  uint64_t v12 = *a4;
  if (a4[1] == *a4) {
    return 1;
  }
  unint64_t v13 = 0;
  uint64_t v87 = a5 + 16;
  uint64_t p_end_cap = (uint64_t)&a6->__end_cap_;
  while (*(void *)(v12 + 8 * v13) != -1)
  {
    if (a3 && quasar::gLogLevel >= 6)
    {
      long long v104 = 0u;
      long long v105 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      long long v100 = 0u;
      long long v101 = 0u;
      long long v98 = 0u;
      long long v99 = 0u;
      long long v96 = 0u;
      long long v97 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v89 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
      uint64_t v14 = *a3 + 24 * v13;
      int v15 = *(char *)(v14 + 23);
      if (v15 >= 0) {
        uint64_t v16 = *a3 + 24 * v13;
      }
      else {
        uint64_t v16 = *(void *)v14;
      }
      if (v15 >= 0) {
        uint64_t v17 = *(unsigned __int8 *)(v14 + 23);
      }
      else {
        uint64_t v17 = *(void *)(v14 + 8);
      }
      char v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, v16, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
      std::ostream::operator<<();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v89);
    }
    std::vector<unsigned int>::pointer end = a6->__end_;
    value = a6->__end_cap_.__value_;
    if (end >= value)
    {
      std::vector<unsigned int>::pointer begin = a6->__begin_;
      uint64_t v29 = end - a6->__begin_;
      unint64_t v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 62) {
        goto LABEL_126;
      }
      uint64_t v31 = (char *)value - (char *)begin;
      if (v31 >> 1 > v30) {
        unint64_t v30 = v31 >> 1;
      }
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v32 = v30;
      }
      if (v32)
      {
        long long v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(p_end_cap, v32);
        std::vector<unsigned int>::pointer begin = a6->__begin_;
        std::vector<unsigned int>::pointer end = a6->__end_;
      }
      else
      {
        long long v33 = 0;
      }
      long long v44 = (unsigned int *)&v33[4 * v29];
      *long long v44 = v13;
      long long v21 = v44 + 1;
      while (end != begin)
      {
        unsigned int v45 = *--end;
        *--long long v44 = v45;
      }
      a6->__begin_ = v44;
      a6->__end_ = v21;
      a6->__end_cap_.__value_ = (unsigned int *)&v33[4 * v32];
      if (begin) {
        operator delete(begin);
      }
    }
    else
    {
      *std::vector<unsigned int>::pointer end = v13;
      long long v21 = end + 1;
    }
    a6->__end_ = v21;
    uint64_t v46 = *a4;
    long long v48 = *(void **)(a5 + 8);
    unint64_t v47 = *(void *)(a5 + 16);
    if ((unint64_t)v48 >= v47)
    {
      long long v51 = *(void **)a5;
      uint64_t v52 = ((uint64_t)v48 - *(void *)a5) >> 3;
      unint64_t v53 = v52 + 1;
      if ((unint64_t)(v52 + 1) >> 61) {
        goto LABEL_127;
      }
      uint64_t v54 = v47 - (void)v51;
      if (v54 >> 2 > v53) {
        unint64_t v53 = v54 >> 2;
      }
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v55 = v53;
      }
      if (v55)
      {
        long long v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v87, v55);
        long long v51 = *(void **)a5;
        long long v48 = *(void **)(a5 + 8);
      }
      else
      {
        long long v56 = 0;
      }
      long long v57 = &v56[8 * v52];
      *(void *)long long v57 = *(void *)(v46 + 8 * v13);
      long long v50 = v57 + 8;
      while (v48 != v51)
      {
        uint64_t v58 = *--v48;
        *((void *)v57 - 1) = v58;
        v57 -= 8;
      }
      goto LABEL_108;
    }
    uint64_t v49 = *(void *)(v46 + 8 * v13);
LABEL_56:
    *long long v48 = v49;
    long long v50 = v48 + 1;
LABEL_110:
    *(void *)(a5 + 8) = v50;
LABEL_111:
    ++v13;
    uint64_t v12 = *a4;
    if (v13 >= (a4[1] - *a4) >> 3) {
      return 1;
    }
  }
  if (*(unsigned char *)a1)
  {
    if (quasar::gLogLevel >= 6)
    {
      if (a3)
      {
        long long v104 = 0uLL;
        long long v105 = 0uLL;
        long long v102 = 0uLL;
        long long v103 = 0uLL;
        long long v100 = 0uLL;
        long long v101 = 0uLL;
        long long v98 = 0uLL;
        long long v99 = 0uLL;
        long long v96 = 0uLL;
        long long v97 = 0uLL;
        long long v94 = 0uLL;
        long long v95 = 0uLL;
        long long v92 = 0uLL;
        long long v93 = 0uLL;
        long long v90 = 0uLL;
        long long v91 = 0uLL;
        long long v89 = 0uLL;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
        long long v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Could not find \"", 16);
        uint64_t v23 = *a3 + 24 * v13;
        int v24 = *(char *)(v23 + 23);
        if (v24 >= 0) {
          uint64_t v25 = *a3 + 24 * v13;
        }
        else {
          uint64_t v25 = *(void *)v23;
        }
        if (v24 >= 0) {
          uint64_t v26 = *(unsigned __int8 *)(v23 + 23);
        }
        else {
          uint64_t v26 = *(void *)(v23 + 8);
        }
        long long v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v25, v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\" in symbol table(s), ignoring token", 36);
      }
      else
      {
        long long v104 = 0uLL;
        long long v105 = 0uLL;
        long long v102 = 0uLL;
        long long v103 = 0uLL;
        long long v100 = 0uLL;
        long long v101 = 0uLL;
        long long v98 = 0uLL;
        long long v99 = 0uLL;
        long long v96 = 0uLL;
        long long v97 = 0uLL;
        long long v94 = 0uLL;
        long long v95 = 0uLL;
        long long v92 = 0uLL;
        long long v93 = 0uLL;
        long long v90 = 0uLL;
        long long v91 = 0uLL;
        long long v89 = 0uLL;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Could not find token at position ", 33);
        std::string v59 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" in symbol table(s), ignoring token", 35);
      }
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v89);
    }
    goto LABEL_111;
  }
  if (*(void *)(a2 + 64) != -1)
  {
    if (quasar::gLogLevel >= 6)
    {
      if (a3)
      {
        long long v104 = 0uLL;
        long long v105 = 0uLL;
        long long v102 = 0uLL;
        long long v103 = 0uLL;
        long long v100 = 0uLL;
        long long v101 = 0uLL;
        long long v98 = 0uLL;
        long long v99 = 0uLL;
        long long v96 = 0uLL;
        long long v97 = 0uLL;
        long long v94 = 0uLL;
        long long v95 = 0uLL;
        long long v92 = 0uLL;
        long long v93 = 0uLL;
        long long v90 = 0uLL;
        long long v91 = 0uLL;
        long long v89 = 0uLL;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
        long long v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Could not find \"", 16);
        uint64_t v35 = *a3 + 24 * v13;
        int v36 = *(char *)(v35 + 23);
        if (v36 >= 0) {
          uint64_t v37 = *a3 + 24 * v13;
        }
        else {
          uint64_t v37 = *(void *)v35;
        }
        if (v36 >= 0) {
          uint64_t v38 = *(unsigned __int8 *)(v35 + 23);
        }
        else {
          uint64_t v38 = *(void *)(v35 + 8);
        }
        std::string v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v37, v38);
        uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"\" in symbol table(s), replacing with \"", 38);
        char v41 = *(unsigned char *)(a1 + 31);
        if (v41 >= 0) {
          uint64_t v42 = a1 + 8;
        }
        else {
          uint64_t v42 = *(void *)(a1 + 8);
        }
        if (v41 >= 0) {
          uint64_t v43 = *(unsigned __int8 *)(a1 + 31);
        }
        else {
          uint64_t v43 = *(void *)(a1 + 16);
        }
      }
      else
      {
        long long v104 = 0uLL;
        long long v105 = 0uLL;
        long long v102 = 0uLL;
        long long v103 = 0uLL;
        long long v100 = 0uLL;
        long long v101 = 0uLL;
        long long v98 = 0uLL;
        long long v99 = 0uLL;
        long long v96 = 0uLL;
        long long v97 = 0uLL;
        long long v94 = 0uLL;
        long long v95 = 0uLL;
        long long v92 = 0uLL;
        long long v93 = 0uLL;
        long long v90 = 0uLL;
        long long v91 = 0uLL;
        long long v89 = 0uLL;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Could not find token at positiob ", 33);
        int v60 = (void *)std::ostream::operator<<();
        uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)" in symbol table(s), replacing with \"", 37);
        char v61 = *(unsigned char *)(a1 + 31);
        if (v61 >= 0) {
          uint64_t v42 = a1 + 8;
        }
        else {
          uint64_t v42 = *(void *)(a1 + 8);
        }
        if (v61 >= 0) {
          uint64_t v43 = *(unsigned __int8 *)(a1 + 31);
        }
        else {
          uint64_t v43 = *(void *)(a1 + 16);
        }
      }
      v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"\" ", 2);
      std::ostream::operator<<();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v89);
    }
    std::vector<unsigned int>::pointer v64 = a6->__end_;
    int v63 = a6->__end_cap_.__value_;
    if (v64 >= v63)
    {
      std::vector<unsigned int>::pointer v66 = a6->__begin_;
      uint64_t v67 = v64 - a6->__begin_;
      unint64_t v68 = v67 + 1;
      if ((unint64_t)(v67 + 1) >> 62) {
LABEL_126:
      }
        std::vector<int>::__throw_length_error[abi:ne180100]();
      uint64_t v69 = (char *)v63 - (char *)v66;
      if (v69 >> 1 > v68) {
        unint64_t v68 = v69 >> 1;
      }
      if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v70 = v68;
      }
      if (v70)
      {
        unint64_t v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(p_end_cap, v70);
        std::vector<unsigned int>::pointer v66 = a6->__begin_;
        std::vector<unsigned int>::pointer v64 = a6->__end_;
      }
      else
      {
        unint64_t v71 = 0;
      }
      v72 = (unsigned int *)&v71[4 * v67];
      unsigned int *v72 = v13;
      uint64_t v65 = v72 + 1;
      while (v64 != v66)
      {
        unsigned int v73 = *--v64;
        *--v72 = v73;
      }
      a6->__begin_ = v72;
      a6->__end_ = v65;
      a6->__end_cap_.__value_ = (unsigned int *)&v71[4 * v70];
      if (v66) {
        operator delete(v66);
      }
    }
    else
    {
      *std::vector<unsigned int>::pointer v64 = v13;
      uint64_t v65 = v64 + 1;
    }
    a6->__end_ = v65;
    long long v48 = *(void **)(a5 + 8);
    unint64_t v74 = *(void *)(a5 + 16);
    if ((unint64_t)v48 < v74)
    {
      uint64_t v49 = *(void *)(a2 + 64);
      goto LABEL_56;
    }
    long long v51 = *(void **)a5;
    uint64_t v75 = ((uint64_t)v48 - *(void *)a5) >> 3;
    unint64_t v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 61) {
LABEL_127:
    }
      std::vector<int>::__throw_length_error[abi:ne180100]();
    uint64_t v77 = v74 - (void)v51;
    if (v77 >> 2 > v76) {
      unint64_t v76 = v77 >> 2;
    }
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v55 = v76;
    }
    if (v55)
    {
      long long v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v87, v55);
      long long v51 = *(void **)a5;
      long long v48 = *(void **)(a5 + 8);
    }
    else
    {
      long long v56 = 0;
    }
    long long v57 = &v56[8 * v75];
    *(void *)long long v57 = *(void *)(a2 + 64);
    long long v50 = v57 + 8;
    while (v48 != v51)
    {
      uint64_t v78 = *--v48;
      *((void *)v57 - 1) = v78;
      v57 -= 8;
    }
LABEL_108:
    *(void *)a5 = v57;
    *(void *)(a5 + 8) = v50;
    *(void *)(a5 + 16) = &v56[8 * v55];
    if (v51) {
      operator delete(v51);
    }
    goto LABEL_110;
  }
  if (a3)
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v104 = 0u;
      long long v105 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      long long v100 = 0u;
      long long v101 = 0u;
      long long v98 = 0u;
      long long v99 = 0u;
      long long v96 = 0u;
      long long v97 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v89 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
      v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Could not find \"", 16);
      uint64_t v81 = *a3 + 24 * v13;
      int v82 = *(char *)(v81 + 23);
      if (v82 >= 0) {
        uint64_t v83 = *a3 + 24 * v13;
      }
      else {
        uint64_t v83 = *(void *)v81;
      }
      if (v82 >= 0) {
        uint64_t v84 = *(unsigned __int8 *)(v81 + 23);
      }
      else {
        uint64_t v84 = *(void *)(v81 + 8);
      }
      int v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, v83, v84);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"\" in symbol table(s)", 20);
LABEL_124:
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v89);
    }
  }
  else if (quasar::gLogLevel >= 1)
  {
    long long v104 = 0u;
    long long v105 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v94 = 0u;
    long long v95 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    long long v89 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Could not find token at position ", 33);
    uint64_t v86 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)" in symbol table(s)", 19);
    goto LABEL_124;
  }
  return 0;
}

void sub_1B1C3BD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  _Unwind_Resume(a1);
}

BOOL quasar::compute(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, int a6, uint64_t *a7, char a8)
{
  v22[24] = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v22, (clockid_t)a2);
  uint64_t v23 = 0;
  quasar::createDfst(a2, a3, a4, a7, a8, (uint64_t)a1, &v20);
  uint64_t v18 = v20;
  uint64_t v19 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v16 = quasar::compute(a1, &v18, (uint64_t)a3, a4, a5, a6);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  return v16;
}

void sub_1B1C3BEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void quasar::loadConstituentDfsts(uint64_t **a1@<X0>, uint64_t **a2@<X1>, uint64_t **a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int32 **a7@<X6>, uint64_t *a8@<X7>, void *a9@<X8>, unsigned __int8 a10, int a11)
{
  kaldi::quasar::ConvertLmeFsts(a4, (uint64_t *)v54);
  memset(v53, 0, sizeof(v53));
  uint64_t v14 = *a1;
  int v15 = a1[1];
  if (*a1 != v15)
  {
    do
    {
      if (a6 == -1)
      {
        uint64_t v17 = *v14;
        std::string::basic_string[abi:ne180100]<0>(v37, "");
        quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v17, (uint64_t)v37, &v46);
        uint64_t v18 = operator new(4uLL);
        __p[0] = v18;
        *uint64_t v18 = 0;
        __p[1] = v18 + 1;
        long long v50 = v18 + 1;
        kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddBackoffFst();
      }
      uint64_t v16 = *v14;
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v16, (uint64_t)__p, &v51);
      LODWORD(v37[0]) = a6;
      v37[1] = v51;
      *(void *)&long long v38 = v52;
      if (v52) {
        atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      DWORD2(v38) = -1;
      unint64_t v47 = 0;
      uint64_t v48 = 0;
      uint64_t v46 = &v47;
      kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddBackoffFst((uint64_t)v53, (unsigned int *)v37, (uint64_t *)v54, 1, a10, a11, 0x20000, (uint64_t)&v46);
      std::__tree<int>::destroy((uint64_t)&v46, v47);
      if ((void)v38) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v38);
      }
      if (v52) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v52);
      }
      if (SHIBYTE(v50) < 0) {
        operator delete(__p[0]);
      }
      v14 += 2;
    }
    while (v14 != v15);
  }
  uint64_t v19 = *a3;
  uint64_t v20 = a3[1];
  if (*a3 == v20) {
    goto LABEL_37;
  }
  char v21 = 0;
  long long v22 = *a3;
  do
  {
    uint64_t v23 = *v22;
    v22 += 2;
    v21 |= *(unsigned char *)(v23 + 8) != 0;
  }
  while (v22 != v20);
  if ((v21 & 1) == 0)
  {
LABEL_37:
    int v24 = *a2;
    uint64_t v25 = a2[1];
    if (*a2 != v25)
    {
      do
      {
        uint64_t v26 = *v24;
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v26, (uint64_t)__p, &v44);
        long long v27 = v44;
        unint64_t v47 = 0;
        uint64_t v48 = 0;
        uint64_t v46 = &v47;
        uint64_t v28 = *a8;
        if (*a8)
        {
          std::string::basic_string[abi:ne180100]<0>(v40, "");
          quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v28, (uint64_t)v40, &v42);
          uint64_t v29 = v42;
        }
        else
        {
          uint64_t v29 = 0;
        }
        *(_OWORD *)uint64_t v37 = 0u;
        long long v38 = 0u;
        int v39 = 1065353216;
        uint64_t v31 = v37;
        kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddNnlm((uint64_t)v53, v27, v54, a5, a7, (uint64_t)&v46, v29, 1u, a10, a11);
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v37);
        if (v28)
        {
          if (v43) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v43);
          }
          if (v41 < 0) {
            operator delete(v40[0]);
          }
        }
        std::__tree<int>::destroy((uint64_t)&v46, v47);
        if (v45) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v45);
        }
        if (SHIBYTE(v50) < 0) {
          operator delete(__p[0]);
        }
        v24 += 2;
      }
      while (v24 != v25);
      uint64_t v19 = *a3;
      uint64_t v20 = a3[1];
    }
  }
  for (; v19 != v20; v19 += 2)
  {
    uint64_t v30 = *v19;
    v37[1] = 0;
    *(void *)&long long v38 = 0;
    v37[0] = &v37[1];
    (*(void (**)(uint64_t, _OWORD *, unsigned int **, uint64_t, uint64_t, void, void, void **, uint64_t, uint64_t, void **))(*(void *)v30 + 16))(v30, v53, v54, a6, 1, 0, a11, v37, a5, 0x20000, v31);
    std::__tree<int>::destroy((uint64_t)v37, (void *)v37[1]);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__init_with_size[abi:ne180100]<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>(a9, *(void **)&v53[0], *((void **)&v53[0] + 1), (uint64_t)(*((void *)&v53[0] + 1) - *(void *)&v53[0]) >> 4);
  v37[0] = (char *)&v53[1] + 8;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  v37[0] = v53;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  *(void *)&v53[0] = v54;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
}

void sub_1B1C3C2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  unsigned int v45 = kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterministicOnDemandFstCreator((void **)(v43 - 160));
  *(void *)(v43 - 160) = v43 - 112;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v45);
  _Unwind_Resume(a1);
}

void quasar::createDfst(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, char a5@<W4>, uint64_t a6@<X6>, void *a7@<X8>)
{
  int v38 = a3;
  char v37 = a5;
  uint64_t v11 = (_DWORD *)*a2;
  uint64_t v12 = (_DWORD *)a2[1];
  if (a6 && v11 == v12) {
    kaldi::quasar::GetBestInterpWeights((void **)a1, &v20);
  }
  if (v11 == v12)
  {
    *a7 = 0;
    a7[1] = 0;
    return;
  }
  if (v12 - v11 != (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4)
  {
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v20 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Num new Lms = ", 14);
    uint64_t v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" but num interp weights = ", 26);
    std::ostream::operator<<();
LABEL_23:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v20);
  }
  unint64_t v13 = (_DWORD *)*a2;
  do
  {
    if ((*v13 & 0x7FFFFFFFu) >= 0x7F800000)
    {
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v20, "At least one interpolation weight is not finite.");
      goto LABEL_23;
    }
    ++v13;
  }
  while (v13 != v12);
  unint64_t v14 = 0;
  memset(v19, 0, sizeof(v19));
  do
  {
    if (quasar::gLogLevel >= 6)
    {
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"LM component ", 13);
      int v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" weight: ", 9);
      std::ostream::operator<<();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v20);
      uint64_t v11 = (_DWORD *)*a2;
    }
    long long v16 = *(_OWORD *)(*(void *)a1 + 16 * v14);
    long long v20 = v16;
    if (*((void *)&v16 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    LODWORD(v21) = v11[v14];
    std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::push_back[abi:ne180100](v19, (uint64_t)&v20);
    if (*((void *)&v20 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
    }
    ++v14;
    uint64_t v11 = (_DWORD *)*a2;
  }
  while (v14 < (uint64_t)(a2[1] - *a2) >> 2);
  std::allocate_shared[abi:ne180100]<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType &,BOOL const&,void>(v19, &v38, &v37, &v20);
  std::allocate_shared[abi:ne180100]<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::shared_ptr<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> const&,void>((uint64_t *)&v20, a4, &v18);
  *(_OWORD *)a7 = v18;
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  *(void *)&long long v20 = v19;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_1B1C3C778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddBackoffFst(uint64_t a1, unsigned int *a2, uint64_t *a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)a2 + 1);
  if (v8 && (*(unsigned int (**)(uint64_t))(*(void *)v8 + 24))(v8) != -1)
  {
    uint64_t v14 = *a2;
    LOBYTE(v19[0]) = 1;
    v19[1] = a6;
    v19[2] = 0;
    uint64_t v19[3] = v14;
    v19[4] = 0x100000002;
    long long v20 = xmmword_1B2565910;
    char v21 = 0;
    uint64_t v22 = 0;
    std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::vector(v18, 1uLL, (uint64_t)a2);
    std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>>(v18, v18[1], *a3, a3[1], (a3[1] - *a3) >> 5);
    std::vector<unsigned int>::pointer end = 0;
    memset(&__p, 0, sizeof(__p));
    if (a4)
    {
      fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetLabels((unsigned int **)a3, (std::vector<unsigned int> *)&v23);
      std::vector<int> __p = v23;
      std::vector<unsigned int>::pointer end = v23.__end_;
    }
    std::vector<int>::insert<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,0>(&__p, end, *(int **)a8, (int *)(a8 + 8));
    operator new();
  }
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v19, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"the base LM is NULL or empty", 28);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v19);
  }
  return 0;
}

void sub_1B1C3CAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)(v15 - 120));
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a12;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *(void *)(result + 56);
  if (!v3)
  {
    uint64_t v14 = result;
    LODWORD(v6) = *(char *)(a2 + 23);
    if ((v6 & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      LODWORD(v6) = *(char *)(a2 + 23);
      if ((v6 & 0x80000000) != 0)
      {
        uint64_t v6 = *(void *)(a2 + 8);
        goto LABEL_10;
      }
    }
    else
    {
      std::string v33 = *(std::string *)a2;
    }
    uint64_t v6 = v6;
LABEL_10:
    if (!v6) {
      MEMORY[0x1B3EA7B20](&v33, "uninitialized model component");
    }
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getPlaceholder(v14, (std::string *)__p);
    if (SBYTE7(v16) < 0)
    {
      uint64_t v7 = __p[1];
      operator delete(__p[0]);
      if (!v7) {
        goto LABEL_16;
      }
    }
    else if (!BYTE7(v16))
    {
      goto LABEL_16;
    }
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getPlaceholder(v14, &v32);
    int v10 = std::string::insert(&v32, 0, " for location-specific placeholder ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    *(void *)&long long v16 = *((void *)&v10->__r_.__value_.__l + 2);
    *(_OWORD *)std::vector<int> __p = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v16) & 0x80u) == 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    if ((SBYTE7(v16) & 0x80u) == 0) {
      std::string::size_type v13 = BYTE7(v16);
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(&v33, (const std::string::value_type *)v12, v13);
    if (SBYTE7(v16) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
LABEL_16:
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)std::vector<int> __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &v33;
    }
    else {
      uint64_t v8 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v33.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v8, size);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  uint64_t v4 = *(void *)(result + 64);
  *a3 = v3;
  a3[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1B1C3CD44()
{
}

void kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddBackoffFst()
{
}

void sub_1B1C3CEDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddNnlm(uint64_t a1, const void *a2, unsigned int **a3, uint64_t a4, __int32 **a5, uint64_t a6, uint64_t a7, unsigned int a8, unsigned __int8 a9, uint64_t a10)
{
  memset(v62, 0, 24);
  std::string v59 = 0;
  int v60 = 0;
  char v61 = 0;
  uint64_t v14 = *a3;
  std::string::size_type v13 = a3[1];
  if (*a3 != v13)
  {
    do
    {
      if (!a7
        || ((uint64_t v15 = a5[1], (v16 = wmemchr(*a5, *v14, v15 - *a5)) != 0) ? (v17 = v16) : (v17 = v15), v17 == a5[1]))
      {
        long long v51 = 0uLL;
        *(void *)&long long v52 = 0;
        long long v57 = 0;
        uint64_t v58 = 0;
        long long v56 = (void **)&v57;
        char v18 = kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddBackoffFst(a1, v14, (uint64_t *)&v51, 0, a9, a10, 0x20000, (uint64_t)&v56);
        std::__tree<int>::destroy((uint64_t)&v56, v57);
        long long v56 = (void **)&v51;
        std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](&v56);
        if (v18)
        {
          std::vector<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::push_back[abi:ne180100](v62, (long long *)(*(void *)(a1 + 8) - 16));
          uint64_t v19 = *(void *)(a1 + 8);
          long long v20 = *(std::__shared_weak_count **)(v19 - 8);
          if (v20) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          }
          *(void *)(a1 + 8) = v19 - 16;
          long long v21 = v60;
          if (v60 >= v61)
          {
            long long v23 = v59;
            uint64_t v24 = (v60 - v59) >> 2;
            unint64_t v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v26 = v61 - v59;
            if ((v61 - v59) >> 1 > v25) {
              unint64_t v25 = v26 >> 1;
            }
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v27 = v25;
            }
            if (v27)
            {
              long long v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v61, v27);
              long long v23 = v59;
              long long v21 = v60;
            }
            else
            {
              long long v28 = 0;
            }
            long long v29 = (unsigned int *)&v28[4 * v24];
            unsigned int *v29 = *v14;
            long long v22 = (char *)(v29 + 1);
            while (v21 != v23)
            {
              unsigned int v30 = *((_DWORD *)v21 - 1);
              v21 -= 4;
              *--long long v29 = v30;
            }
            std::string v59 = (char *)v29;
            int v60 = v22;
            char v61 = &v28[4 * v27];
            if (v23) {
              operator delete(v23);
            }
          }
          else
          {
            *(_DWORD *)int v60 = *v14;
            long long v22 = v21 + 4;
          }
          int v60 = v22;
        }
      }
      v14 += 8;
    }
    while (v14 != v13);
  }
  long long v31 = a2;
  if (a7 && *a5 != a5[1])
  {
    long long v56 = 0;
    long long v57 = 0;
    uint64_t v58 = 0;
    v55[0] = 0;
    v55[1] = 0;
    uint64_t v54 = v55;
    long long v51 = 0u;
    long long v52 = 0u;
    LODWORD(v53) = 1065353216;
    kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddNnlm(a1, a7, &v56, a4, a5, &v54, 0, a8, -1.0, a9, a10, &v51, a6);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v51);
    std::__tree<int>::destroy((uint64_t)&v54, v55[0]);
    *(void *)&long long v51 = &v56;
    std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
    std::string v32 = *a5;
    std::string v33 = a5[1];
    if (*a5 != v33)
    {
      do
      {
        long long v34 = v60;
        if (v60 >= v61)
        {
          long long v36 = v59;
          uint64_t v37 = (v60 - v59) >> 2;
          unint64_t v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v39 = v61 - v59;
          if ((v61 - v59) >> 1 > v38) {
            unint64_t v38 = v39 >> 1;
          }
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v38;
          }
          if (v40)
          {
            char v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v61, v40);
            long long v36 = v59;
            long long v34 = v60;
          }
          else
          {
            char v41 = 0;
          }
          uint64_t v42 = (__int32 *)&v41[4 * v37];
          __int32 *v42 = *v32;
          long long v35 = (char *)(v42 + 1);
          while (v34 != v36)
          {
            __int32 v43 = *((_DWORD *)v34 - 1);
            v34 -= 4;
            *--uint64_t v42 = v43;
          }
          std::string v59 = (char *)v42;
          int v60 = v35;
          char v61 = &v41[4 * v40];
          if (v36) {
            operator delete(v36);
          }
        }
        else
        {
          *(_DWORD *)int v60 = *v32;
          long long v35 = v34 + 4;
        }
        int v60 = v35;
        std::vector<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::push_back[abi:ne180100](v62, (long long *)(*(void *)(a1 + 8) - 16));
        ++v32;
      }
      while (v32 != v33);
    }
    uint64_t v44 = *(void *)(a1 + 8);
    unsigned int v45 = *(std::__shared_weak_count **)(v44 - 8);
    long long v31 = a2;
    if (v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v45);
    }
    *(void *)(a1 + 8) = v44 - 16;
  }
  if (v31)
  {
    {
      long long v56 = 0;
      long long v57 = 0;
      uint64_t v58 = 0;
      if (!a7) {
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v56, *a5, (uint64_t)a5[1], a5[1] - *a5);
      }
      operator new();
    }
    {
      operator new();
    }
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)"the provided NnlmEvaluator is neither DNN nor RNN", 49);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v51);
  }
  if (v59)
  {
    int v60 = v59;
    operator delete(v59);
  }
  *(void *)&long long v51 = v62;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
  return 0;
}

void sub_1B1C3D660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)va);
  long long v11 = *(void **)(v9 - 152);
  if (v11)
  {
    *(void *)(v9 - 144) = v11;
    operator delete(v11);
  }
  *(void *)(v9 - 152) = v9 - 128;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v9 - 152));
  _Unwind_Resume(a1);
}

uint64_t quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *(void *)(result + 56);
  if (!v3)
  {
    uint64_t v14 = result;
    LODWORD(v6) = *(char *)(a2 + 23);
    if ((v6 & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      LODWORD(v6) = *(char *)(a2 + 23);
      if ((v6 & 0x80000000) != 0)
      {
        uint64_t v6 = *(void *)(a2 + 8);
        goto LABEL_10;
      }
    }
    else
    {
      std::string v33 = *(std::string *)a2;
    }
    uint64_t v6 = v6;
LABEL_10:
    if (!v6) {
      MEMORY[0x1B3EA7B20](&v33, "uninitialized model component");
    }
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getPlaceholder(v14, (std::string *)__p);
    if (SBYTE7(v16) < 0)
    {
      uint64_t v7 = __p[1];
      operator delete(__p[0]);
      if (!v7) {
        goto LABEL_16;
      }
    }
    else if (!BYTE7(v16))
    {
      goto LABEL_16;
    }
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getPlaceholder(v14, &v32);
    int v10 = std::string::insert(&v32, 0, " for location-specific placeholder ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    *(void *)&long long v16 = *((void *)&v10->__r_.__value_.__l + 2);
    *(_OWORD *)std::vector<int> __p = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v16) & 0x80u) == 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    if ((SBYTE7(v16) & 0x80u) == 0) {
      std::string::size_type v13 = BYTE7(v16);
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(&v33, (const std::string::value_type *)v12, v13);
    if (SBYTE7(v16) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
LABEL_16:
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)std::vector<int> __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &v33;
    }
    else {
      uint64_t v8 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v33.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v8, size);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  uint64_t v4 = *(void *)(result + 64);
  *a3 = v3;
  a3[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1B1C3D9DC()
{
}

void **kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterministicOnDemandFstCreator(void **a1)
{
  uint64_t v3 = a1 + 3;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a1;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetLabels(unsigned int **a1@<X0>, std::vector<unsigned int> *a2@<X8>)
{
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<int>::reserve(a2, ((char *)a1[1] - (char *)*a1) >> 5);
  uint64_t v4 = *a1;
  int v5 = a1[1];
  if (*a1 != v5)
  {
    uint64_t p_end_cap = &a2->__end_cap_;
    std::vector<unsigned int>::pointer end = a2->__end_;
    do
    {
      if (end >= p_end_cap->__value_)
      {
        std::vector<unsigned int>::pointer begin = a2->__begin_;
        uint64_t v10 = end - a2->__begin_;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = (char *)p_end_cap->__value_ - (char *)begin;
        if (v12 >> 1 > v11) {
          unint64_t v11 = v12 >> 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&a2->__end_cap_, v13);
          std::vector<unsigned int>::pointer begin = a2->__begin_;
          std::vector<unsigned int>::pointer end = a2->__end_;
        }
        else
        {
          uint64_t v14 = 0;
        }
        uint64_t v15 = (unsigned int *)&v14[4 * v10];
        unsigned int *v15 = *v4;
        uint64_t v8 = v15 + 1;
        while (end != begin)
        {
          unsigned int v16 = *--end;
          *--uint64_t v15 = v16;
        }
        a2->__begin_ = v15;
        a2->__end_ = v8;
        a2->__end_cap_.__value_ = (unsigned int *)&v14[4 * v13];
        if (begin) {
          operator delete(begin);
        }
      }
      else
      {
        *std::vector<unsigned int>::pointer end = *v4;
        uint64_t v8 = end + 1;
      }
      a2->__end_ = v8;
      v4 += 8;
      std::vector<unsigned int>::pointer end = v8;
    }
    while (v4 != v5);
  }
}

void sub_1B1C3DB80(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<int>::pointer std::vector<int>::insert<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,0>(std::vector<int> *a1, int *a2, int *a3, int *a4)
{
  if (a3 == a4)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    int v5 = a3;
    do
    {
      uint64_t v6 = (int *)*((void *)v5 + 1);
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = *(int **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (int *)*((void *)v5 + 2);
          BOOL v8 = *(void *)v7 == (void)v5;
          int v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      int v5 = v7;
    }
    while (v7 != a4);
  }
  return std::vector<int>::__insert_with_size[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(a1, a2, a3, a4, v4);
}

void **kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::CacheAddedDfst(uint64_t *a1, char a2)
{
  if (a2) {
    operator new();
  }
  return std::vector<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::push_back[abi:ne180100](a1, (long long *)(a1[4] - 16));
}

void sub_1B1C3DD90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = a1[1];
    uint64_t v7 = v6 + 32 * a2;
    do
    {
      *(_DWORD *)uint64_t v6 = *(_DWORD *)a3;
      *(void *)(v6 + 8) = *(void *)(a3 + 8);
      uint64_t v8 = *(void *)(a3 + 16);
      *(void *)(v6 + 16) = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      *(_DWORD *)(v6 + 24) = *(_DWORD *)(a3 + 24);
      v6 += 32;
    }
    while (v6 != v7);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B1C3DEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = a1 + 2;
    uint64_t v10 = v11;
    unint64_t v12 = *(v9 - 1);
    if (a5 <= (uint64_t)(v11 - v12) >> 5)
    {
      uint64_t v19 = v12 - a2;
      uint64_t v20 = (uint64_t)(v12 - a2) >> 5;
      if (v20 >= a5)
      {
        uint64_t v21 = a3 + 32 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 32 * v20;
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>((uint64_t)v9, v21, a4, *(v9 - 1));
        if (v19 < 1) {
          return v5;
        }
      }
      std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__move_range((uint64_t)a1, v5, v12, v5 + 32 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 5);
      if (v14 >> 59) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = (a2 - v13) >> 5;
      uint64_t v16 = v10 - v13;
      if (v16 >> 4 > v14) {
        unint64_t v14 = v16 >> 4;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      v26[4] = v9;
      if (v17) {
        long long v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)v9, v17);
      }
      else {
        long long v18 = 0;
      }
      long long v22 = &v18[32 * v15];
      v26[0] = v18;
      v26[1] = v22;
      v26[3] = &v18[32 * v17];
      long long v23 = &v22[32 * a5];
      do
      {
        *(_DWORD *)long long v22 = *(_DWORD *)v7;
        *((void *)v22 + 1) = *(void *)(v7 + 8);
        uint64_t v24 = *(void *)(v7 + 16);
        *((void *)v22 + 2) = v24;
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        *((_DWORD *)v22 + 6) = *(_DWORD *)(v7 + 24);
        v22 += 32;
        v7 += 32;
      }
      while (v22 != v23);
      v26[2] = v23;
      uint64_t v5 = std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~__split_buffer(v26);
    }
  }
  return v5;
}

void sub_1B1C3E100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
      *(_OWORD *)(v8 + 8) = *(_OWORD *)(v9 + 8);
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(_DWORD *)(v8 + 24) = *(_DWORD *)(v9 + 24);
      v8 += 32;
      v9 += 32;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>((uint64_t)&v11, a2, v7, v6);
}

uint64_t std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::reverse_iterator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>,std::reverse_iterator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>,std::reverse_iterator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *(_DWORD *)uint64_t v4 = *(_DWORD *)a2;
      *(void *)(v4 + 8) = *(void *)(a2 + 8);
      uint64_t v5 = *(void *)(a2 + 16);
      *(void *)(v4 + 16) = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(a2 + 24);
      v4 += 32;
      a2 += 32;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 16);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 32;
  }
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = a4 + v7;
      *(_DWORD *)(v9 - 32) = *(_DWORD *)(a3 + v7 - 32);
      long long v10 = *(_OWORD *)(a3 + v7 - 24);
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      uint64_t v11 = *(std::__shared_weak_count **)(a4 + v7 - 16);
      *(_OWORD *)(v9 - 24) = v10;
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      *(_DWORD *)(v9 - 8) = *(_DWORD *)(v8 - 8);
      v7 -= 32;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    *(_DWORD *)a4 = *(_DWORD *)v5;
    uint64_t v8 = *(void *)(v5 + 8);
    uint64_t v7 = *(void *)(v5 + 16);
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *(std::__shared_weak_count **)(a4 + 16);
    *(void *)(a4 + 8) = v8;
    *(void *)(a4 + 16) = v7;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    *(_DWORD *)(a4 + 24) = *(_DWORD *)(v5 + 24);
    a4 += 32;
    v5 += 32;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::reverse_iterator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>,std::reverse_iterator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>,std::reverse_iterator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 32;
    do
    {
      int v9 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)uint64_t v8 = v9;
      *(_OWORD *)(v8 + 8) = *(_OWORD *)(a3 + 8);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(_DWORD *)(v8 + 24) = *(_DWORD *)(a3 + 24);
      *((void *)&v15 + 1) = v8;
      v8 -= 32;
      v7 -= 32;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::reverse_iterator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *(_DWORD *)uint64_t v4 = *(_DWORD *)a2;
      *(_OWORD *)(v4 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(a2 + 24);
      v4 += 32;
      a2 += 32;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::reverse_iterator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::reverse_iterator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::reverse_iterator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 32;
  }
}

void **std::__split_buffer<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 32;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 16);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 32;
    }
  }
}

std::vector<int>::pointer std::vector<int>::__insert_with_size[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(std::vector<int> *a1, int *a2, int *a3, void *a4, uint64_t a5)
{
  std::vector<int>::pointer v5 = a2;
  if (a5 >= 1)
  {
    char v7 = a3;
    value = a1->__end_cap_.__value_;
    uint64_t p_end_cap = (std::allocator<int> *)&a1->__end_cap_;
    uint64_t v10 = value;
    unint64_t v12 = *((void *)p_end_cap - 1);
    if (a5 <= (uint64_t)((uint64_t)value - v12) >> 2)
    {
      __v.__first_ = a3;
      std::__advance[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(&__v, a5);
      std::vector<int>::pointer end = a1->__end_;
      uint64_t v21 = (char *)end - (char *)v5;
      if (a5 > end - v5)
      {
        __v.__first_ = v7;
        std::__advance[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(&__v, v21 >> 2);
        std::vector<int>::__construct_at_end<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t)a1, __v.__first_, a4);
        if (v21 < 1) {
          return v5;
        }
        std::vector<int>::pointer end = a1->__end_;
      }
      long long v22 = &v5[a5];
      long long v23 = &end[-a5];
      uint64_t v24 = end;
      if ((unint64_t)v23 < v12)
      {
        uint64_t v24 = end;
        do
        {
          int v25 = *v23++;
          *v24++ = v25;
        }
        while ((unint64_t)v23 < v12);
      }
      a1->__end_ = v24;
      if (end != v22) {
        memmove(&end[-(end - v22)], v5, (char *)end - (char *)v22);
      }
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,int *,0>(v7, __v.__first_, v5);
    }
    else
    {
      std::vector<int>::pointer begin = a1->__begin_;
      unint64_t v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
      if (v14 >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = a2 - begin;
      uint64_t v16 = (char *)v10 - (char *)begin;
      if (v16 >> 1 > v14) {
        unint64_t v14 = v16 >> 1;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      __v.__end_cap_.__value_ = p_end_cap;
      if (v17) {
        long long v18 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v17);
      }
      else {
        long long v18 = 0;
      }
      long long v26 = &v18[v15];
      __v.__first_ = v18;
      __v.__begin_ = v26;
      __v.__end_cap_.__value_ = &v18[v17];
      long long v27 = &v26[a5];
      do
      {
        *v26++ = v7[7];
        long long v28 = (int *)*((void *)v7 + 1);
        if (v28)
        {
          do
          {
            long long v29 = v28;
            long long v28 = *(int **)v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            long long v29 = (int *)*((void *)v7 + 2);
            BOOL v30 = *(void *)v29 == (void)v7;
            char v7 = v29;
          }
          while (!v30);
        }
        char v7 = v29;
      }
      while (v26 != v27);
      __v.__end_ = v27;
      std::vector<int>::pointer v5 = std::vector<int>::__swap_out_circular_buffer(a1, &__v, v5);
      if (__v.__end_ != __v.__begin_) {
        __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
      }
                                                       + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
      if (__v.__first_) {
        operator delete(__v.__first_);
      }
    }
  }
  return v5;
}

void sub_1B1C3E8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<int>::__construct_at_end<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(_DWORD **)(result + 8);
  if (a2 != a3)
  {
    do
    {
      _DWORD *v3 = *((_DWORD *)a2 + 7);
      uint64_t v4 = (void *)a2[1];
      if (v4)
      {
        do
        {
          std::vector<int>::pointer v5 = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          std::vector<int>::pointer v5 = (void *)a2[2];
          BOOL v6 = *v5 == (void)a2;
          a2 = v5;
        }
        while (!v6);
      }
      ++v3;
      a2 = v5;
    }
    while (v5 != a3);
  }
  *(void *)(result + 8) = v3;
  return result;
}

void **std::__advance[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(void **result, uint64_t a2)
{
  if (a2 < 0)
  {
    char v7 = *result;
    do
    {
      uint64_t v8 = (void *)*v7;
      if (*v7)
      {
        do
        {
          uint64_t v4 = v8;
          uint64_t v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v7[2];
          BOOL v5 = *v4 == (void)v7;
          char v7 = v4;
        }
        while (v5);
      }
      char v7 = v4;
    }
    while (!__CFADD__(a2++, 1));
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = *result;
    do
    {
      uint64_t v3 = (void *)v2[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          uint64_t v2 = v4;
        }
        while (!v5);
      }
      uint64_t v2 = v4;
    }
    while (a2-- > 1);
  }
  void *result = v4;
  return result;
}

void *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,int *,0>(void *result, void *a2, _DWORD *a3)
{
  if (result != a2)
  {
    do
    {
      *a3 = *((_DWORD *)result + 7);
      uint64_t v3 = (void *)result[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)result[2];
          BOOL v5 = *v4 == (void)result;
          uint64_t result = v4;
        }
        while (!v5);
      }
      ++a3;
      uint64_t result = v4;
    }
    while (v4 != a2);
    return a2;
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::reverse_iterator<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>,std::reverse_iterator<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>,std::reverse_iterator<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::reverse_iterator<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>,std::reverse_iterator<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>,std::reverse_iterator<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::reverse_iterator<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::reverse_iterator<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::BackoffDeterministicOnDemandFst(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_1F0A3F7C8;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__init_with_size[abi:ne180100]<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>((void *)(a1 + 8), *a2, a2[1], (a2[1] - *a2) >> 5);
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 48), *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(void *)(a1 + 112) = 0;
  long long v28 = 0;
  long long v29 = 0;
  BOOL v30 = 0;
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  if (*a2 == v8)
  {
    long long v26 = 0;
    int v25 = 0;
  }
  else
  {
    char v9 = 1;
    do
    {
      if (v9)
      {
        uint64_t v10 = *(void *)(v7 + 8);
        if (!v10 || (*(unsigned int (**)(uint64_t))(*(void *)v10 + 24))(v10) == -1)
        {
          if (kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"the base LM is NULL or empty", 28);
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
          }
          operator new();
        }
      }
      uint64_t v11 = *(void *)(v7 + 8);
      if (!v11 || (*(unsigned int (**)(uint64_t))(*(void *)v11 + 24))(v11) == -1)
      {
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1 + 72, (int *)v7, (_DWORD *)v7);
      }
      else
      {
        uint64_t v12 = *(void *)(v7 + 8);
        int v13 = *(_DWORD *)v7;
        long long v14 = v29;
        if (v29 >= v30)
        {
          uint64_t v16 = ((char *)v29 - v28) >> 4;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v18 = (char *)v30 - v28;
          if (((char *)v30 - v28) >> 3 > v17) {
            unint64_t v17 = v18 >> 3;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19) {
            uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v30, v19);
          }
          else {
            uint64_t v20 = 0;
          }
          uint64_t v21 = &v20[16 * v16];
          *(_DWORD *)uint64_t v21 = v13;
          *((void *)v21 + 1) = v12;
          long long v23 = (int *)v28;
          long long v22 = v29;
          uint64_t v24 = v21;
          if (v29 != (int *)v28)
          {
            do
            {
              *((_OWORD *)v24 - 1) = *((_OWORD *)v22 - 1);
              v24 -= 16;
              v22 -= 4;
            }
            while (v22 != v23);
            long long v22 = (int *)v28;
          }
          long long v15 = (int *)(v21 + 16);
          long long v28 = v24;
          long long v29 = (int *)(v21 + 16);
          BOOL v30 = (int *)&v20[16 * v19];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          int *v29 = v13;
          *((void *)v14 + 1) = v12;
          long long v15 = v14 + 4;
        }
        long long v29 = v15;
      }
      char v9 = 0;
      v7 += 32;
    }
    while (v7 != v8);
    long long v26 = v28;
    int v25 = v29;
  }
  do
  {
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v26 + 1) + 64))(*((void *)v26 + 1), 268697600, 1);
    (*(void (**)(void, uint64_t, void))(**((void **)v26 + 1) + 64))(*((void *)v26 + 1), 268697600, 0);
    v26 += 16;
  }
  while (v26 != (char *)v25);
  if ((unint64_t)((char *)v29 - v28) > 0x10) {
    operator new();
  }
  if (v29 != (int *)v28)
  {
    *(void *)(a1 + 32) = *((void *)v28 + 1);
    operator new();
  }
  std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
}

void sub_1B1C3EFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void **a11)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a11);
  uint64_t v16 = *(void **)(v14 - 112);
  if (v16)
  {
    *(void *)(v14 - 104) = v16;
    operator delete(v16);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v13);
  unint64_t v17 = *v12;
  if (*v12)
  {
    *(void *)(v11 + 56) = v17;
    operator delete(v17);
  }
  a11 = a9;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))();
}

float fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  if (*a3)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN3fst14BackoffArcInfoENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v16);
    uint64_t v6 = v16;
    uint64_t v7 = v17;
    uint64_t v18 = v16;
    unint64_t v19 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = (std::__shared_weak_count *)a3[1];
    *a3 = v6;
    a3[1] = v7;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  float v9 = fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::FinalNoPhiState(a1, a2, (uint64_t)&v18);
  *(float *)&uint64_t v16 = v9;
  int v20 = 2139095040;
  if (v9 == INFINITY)
  {
    if (*a3)
    {
      _ZNSt3__115allocate_sharedB8ne180100IN3fst14BackoffArcInfoENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v16);
      uint64_t v11 = v16;
      uint64_t v10 = v17;
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      uint64_t v12 = v19;
      uint64_t v18 = v11;
      unint64_t v19 = v10;
      if (v12)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        uint64_t v10 = v19;
      }
      uint64_t v13 = v18;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = (std::__shared_weak_count *)a3[1];
      *a3 = v13;
      a3[1] = v10;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
    }
    float v9 = fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::FinalUsingPhiState(a1, a2, (uint64_t)&v18);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  return v9;
}

void sub_1B1C3F1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

float fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Final(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  float v2 = (*(float (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 8))(a1, a2, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

void sub_1B1C3F26C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetArc(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, void *a5)
{
  unsigned int v36 = a3;
  uint64_t v34 = 0;
  long long v35 = 0;
  if (*a5)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN3fst14BackoffArcInfoENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v32);
    uint64_t v10 = v32;
    float v9 = v33;
    uint64_t v32 = 0;
    std::string v33 = 0;
    uint64_t v11 = v35;
    uint64_t v34 = v10;
    long long v35 = v9;
    if (v11)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      float v9 = v35;
    }
    uint64_t v12 = v34;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = (std::__shared_weak_count *)a5[1];
    *a5 = v12;
    a5[1] = v9;
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 72), (int *)&v36))
  {
    goto LABEL_11;
  }
  if (fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetNonPhiArc(a1, a2, v36, a4, (uint64_t)&v34))goto LABEL_51; {
  long long v15 = *(_DWORD **)(a1 + 48);
  }
  uint64_t v16 = *(_DWORD **)(a1 + 56);
  if (v15 == v16)
  {
LABEL_11:
    uint64_t v14 = 0;
    goto LABEL_52;
  }
  while (a2 == -1)
  {
LABEL_34:
    if (++v15 == v16) {
      goto LABEL_11;
    }
  }
  float v17 = 0.0;
  uint64_t v18 = a2;
  while (1)
  {
    LODWORD(v32) = *v15;
    if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 72), (int *)&v32))
    {
      if (*(unsigned char *)(a1 + 40))
      {
        fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(*(void *)(a1 + 128), v18);
        if (!fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(*(void *)(a1 + 128), v32))goto LABEL_17; {
        uint64_t v22 = (uint64_t)fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(*(void *)(a1 + 128));
        }
      }
      else
      {
        fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(*(void *)(a1 + 112), v18);
        if (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(*(void *)(a1 + 112), v32))goto LABEL_17; {
        uint64_t v22 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(*(void *)(a1 + 112));
        }
      }
      uint64_t v23 = *(unsigned int *)(v22 + 12);
      if (v23 != -1)
      {
        float v24 = *(float *)(v22 + 8);
        if (fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetNonPhiArc(a1, v23, v36, a4, (uint64_t)&v34))break; {
      }
        }
    }
LABEL_17:
    uint64_t BackoffState = fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetBackoffState(a1, v18, &v32);
    uint64_t v18 = BackoffState;
    float v20 = NAN;
    if (v17 != -INFINITY)
    {
      float v20 = NAN;
      if (*(float *)&v32 != -INFINITY)
      {
        float v20 = INFINITY;
        if (*(float *)&v32 != INFINITY && v17 != INFINITY) {
          float v20 = v17 + *(float *)&v32;
        }
      }
    }
    float v17 = v20;
    if (BackoffState == -1) {
      goto LABEL_34;
    }
  }
  float v25 = *(float *)(a4 + 8);
  float v26 = NAN;
  if (v25 != -INFINITY && v24 != -INFINITY)
  {
    BOOL v27 = v25 == INFINITY || v24 == INFINITY;
    float v28 = v24 + v25;
    if (v27) {
      float v28 = INFINITY;
    }
    float v26 = NAN;
    if (v28 != -INFINITY && v17 != -INFINITY)
    {
      float v26 = INFINITY;
      BOOL v29 = v28 == INFINITY || v17 == INFINITY;
      float v30 = v17 + v28;
      if (!v29) {
        float v26 = v30;
      }
    }
  }
  *(float *)(a4 + 8) = v26;
LABEL_51:
  uint64_t v14 = 1;
LABEL_52:
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  return v14;
}

void sub_1B1C3F558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetArc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, a2, a3, a4, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v4;
}

void sub_1B1C3F5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~BackoffDeterministicOnDemandFst(uint64_t a1)
{
  fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~BackoffDeterministicOnDemandFst(a1);
  JUMPOUT(0x1B3EA8670);
}

void *std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__init_with_size[abi:ne180100]<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1C3F6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ReplaceFst()
{
}

void sub_1B1C3F738(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C4062370947);
  _Unwind_Resume(a1);
}

void fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ReplaceFst(void *a1)
{
  fst::ImplToFst<fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(*(void *)(a1 + 8));
}

float fst::ImplToFst<fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy()
{
}

void sub_1B1C3F91C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitStateIterator()
{
}

void sub_1B1C3FA10(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  return fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(*(uint64_t **)(a1 + 8), a2, a3);
}

uint64_t fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitMatcher(void *a1, int a2)
{
  if (!*(unsigned char *)(a1[1] + 160))
  {
    if (a2 == 1)
    {
      unint64_t v5 = *(uint64_t (**)(void))(*a1 + 64);
    }
    else
    {
      if (a2) {
        goto LABEL_2;
      }
      unint64_t v5 = *(uint64_t (**)(void))(*a1 + 64);
    }
    if (v5()) {
      operator new();
    }
  }
LABEL_2:
  if (FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    float v2 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
    uint64_t v3 = (void *)fst::cerr(v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Not using replace matcher", 25);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  return 0;
}

void sub_1B1C3FB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  MEMORY[0x1B3EA8670](v18, 0x10E1C40D49367F0);
  _Unwind_Resume(a1);
}

uint64_t fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ReplaceFstImpl(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(a1, a3);
  *(void *)uint64_t v5 = &unk_1F0A3BB90;
  *(void *)(v5 + 132) = *(void *)(a3 + 32);
  *(_OWORD *)(v5 + 144) = *(_OWORD *)(a3 + 40);
  uint64_t v107 = a3;
  uint64_t v6 = *(void *)(a3 + 64);
  if (!v6) {
    operator new();
  }
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 168) = v6;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  uint64_t v106 = a1 + 200;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(void *)(a1 + 240) = 0;
  long long v105 = (char **)(a1 + 240);
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "replace");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (!*(void *)(a1 + 144)) {
    *(_DWORD *)(a1 + 132) = 1;
  }
  if (!*(void *)(a1 + 152)) {
    *(_DWORD *)(a1 + 136) = 1;
  }
  if (a2[1] == *a2
    || (uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*a2 + 8) + 112))(*(void *)(*a2 + 8)),
        fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v7), uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(*a2 + 8) + 120))(*(void *)(*a2 + 8)), fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v8), v9 = (int *)*a2, (v10 = a2[1] - *a2) == 0))
  {
    int v14 = 1;
    int v13 = 1;
  }
  else
  {
    unint64_t v11 = v10 >> 4;
    if (v11 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v11;
    }
    int v13 = 1;
    LOBYTE(v14) = 1;
    do
    {
      uint64_t v15 = *v9;
      v9 += 4;
      BOOL v16 = v15 > 0;
      int v14 = (v15 < 0) & v14;
      BOOL v17 = v11 >= v15 && v16;
      v13 &= v17;
      --v12;
    }
    while (v12);
  }
  int v102 = v14;
  int v103 = v13;
  memset(&__str, 0, sizeof(__str));
  uint64_t v104 = a1 + 256;
  unint64_t v19 = *(void **)(a1 + 248);
  unint64_t v18 = *(void *)(a1 + 256);
  if ((unint64_t)v19 >= v18)
  {
    uint64_t v21 = ((char *)v19 - *v105) >> 3;
    if ((unint64_t)(v21 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = v18 - (void)*v105;
    uint64_t v23 = v22 >> 2;
    if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
      uint64_t v23 = v21 + 1;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v23;
    }
    if (v24) {
      float v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v104, v24);
    }
    else {
      float v25 = 0;
    }
    float v26 = &v25[8 * v21];
    BOOL v27 = &v25[8 * v24];
    *(void *)float v26 = 0;
    float v20 = v26 + 8;
    BOOL v29 = *(char **)(a1 + 240);
    float v28 = *(char **)(a1 + 248);
    if (v28 != v29)
    {
      do
      {
        uint64_t v30 = *((void *)v28 - 1);
        v28 -= 8;
        *((void *)v26 - 1) = v30;
        v26 -= 8;
      }
      while (v28 != v29);
      float v28 = *v105;
    }
    *(void *)(a1 + 240) = v26;
    *(void *)(a1 + 248) = v20;
    *(void *)(a1 + 256) = v27;
    if (v28) {
      operator delete(v28);
    }
  }
  else
  {
    void *v19 = 0;
    float v20 = v19 + 1;
  }
  *(void *)(a1 + 248) = v20;
  uint64_t v31 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v32 = 0;
    int v33 = 1;
    int v34 = 1;
    int v35 = 1;
    while (1)
    {
      int v109 = v33;
      LODWORD(v110[0]) = 0;
      uint64_t v36 = v31 + 16 * v32;
      LODWORD(v110[0]) = *(_DWORD *)v36;
      uint64_t v37 = *(void *)(v36 + 8);
      uint64_t v39 = *(void *)(a1 + 240);
      uint64_t v38 = *(void *)(a1 + 248);
      v113[0] = v110;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v106, (int *)v110, (uint64_t)&std::piecewise_construct, (_DWORD **)v113)+ 5) = (unint64_t)(v38 - v39) >> 3;
      std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)(a1 + 176), (int *)v110, v110);
      uint64_t v40 = v37;
      if (!*(unsigned char *)(v107 + 56)) {
        uint64_t v40 = (*(uint64_t (**)(uint64_t, void))(*(void *)v37 + 88))(v37, 0);
      }
      uint64_t v42 = *(uint64_t **)(a1 + 248);
      unint64_t v41 = *(void *)(a1 + 256);
      if ((unint64_t)v42 >= v41)
      {
        uint64_t v44 = ((char *)v42 - *v105) >> 3;
        if ((unint64_t)(v44 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v45 = v41 - (void)*v105;
        uint64_t v46 = v45 >> 2;
        if (v45 >> 2 <= (unint64_t)(v44 + 1)) {
          uint64_t v46 = v44 + 1;
        }
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v47 = v46;
        }
        if (v47) {
          uint64_t v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v104, v47);
        }
        else {
          uint64_t v48 = 0;
        }
        uint64_t v49 = (uint64_t *)&v48[8 * v44];
        *uint64_t v49 = v40;
        __int32 v43 = v49 + 1;
        long long v51 = *(char **)(a1 + 240);
        long long v50 = *(char **)(a1 + 248);
        if (v50 != v51)
        {
          do
          {
            uint64_t v52 = *((void *)v50 - 1);
            v50 -= 8;
            *--uint64_t v49 = v52;
          }
          while (v50 != v51);
          long long v50 = *v105;
        }
        *(void *)(a1 + 240) = v49;
        *(void *)(a1 + 248) = v43;
        *(void *)(a1 + 256) = &v48[8 * v47];
        if (v50) {
          operator delete(v50);
        }
      }
      else
      {
        uint64_t *v42 = v40;
        __int32 v43 = v42 + 1;
      }
      *(void *)(a1 + 248) = v43;
      BOOL v53 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 24))(v37) != -1;
      BOOL v54 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v37 + 64))(v37, 0x10000000, 0) != 0;
      BOOL v55 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v37 + 64))(v37, 0x40000000, 0) != 0;
      uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v37 + 64))(v37, 0x3FFFFFFF0004, 0);
      uint64_t v57 = v56;
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_ >= __str.__r_.__value_.__r.__words[2])
      {
        int v60 = (void *)__str.__r_.__value_.__r.__words[0];
        uint64_t v61 = (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3;
        unint64_t v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        int64_t v63 = __str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0];
        if ((uint64_t)(__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0]) >> 2 > v62) {
          unint64_t v62 = v63 >> 2;
        }
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v62;
        }
        if (v64)
        {
          uint64_t v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&__str.__r_.__value_.__r.__words[2], v64);
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
          int v60 = (void *)__str.__r_.__value_.__r.__words[0];
        }
        else
        {
          uint64_t v65 = 0;
        }
        std::vector<unsigned int>::pointer v66 = (uint64_t *)&v65[8 * v61];
        uint64_t *v66 = v57;
        std::string::size_type v59 = (std::string::size_type)(v66 + 1);
        while ((void *)size != v60)
        {
          uint64_t v67 = *(void *)(size - 8);
          size -= 8;
          *--std::vector<unsigned int>::pointer v66 = v67;
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
        __str.__r_.__value_.__l.__size_ = v59;
        __str.__r_.__value_.__r.__words[2] = (std::string::size_type)&v65[8 * v64];
        if (v60) {
          operator delete(v60);
        }
      }
      else
      {
        *(void *)__str.__r_.__value_.__l.__size_ = v56;
        std::string::size_type v59 = size + 8;
      }
      __str.__r_.__value_.__l.__size_ = v59;
      if (!v32) {
        goto LABEL_96;
      }
      unint64_t v68 = *(fst **)(a1 + 40);
      uint64_t v69 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(void *)v37 + 112))(v37);
      if (!fst::CompatSymbols(v68, v69, (const fst::SymbolTable *)1)) {
        break;
      }
LABEL_85:
      uint64_t v75 = *(fst **)(a1 + 48);
      unint64_t v76 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(void *)v37 + 120))(v37);
      if (!fst::CompatSymbols(v75, v76, (const fst::SymbolTable *)1))
      {
        int v77 = FLAGS_fst_error_fatal;
        if (FLAGS_fst_error_fatal)
        {
          std::string::basic_string[abi:ne180100]<0>(v118, "FATAL");
          uint64_t v78 = fst::LogMessage::LogMessage((fst *)&v120, (uint64_t)v118);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
          uint64_t v78 = fst::LogMessage::LogMessage((fst *)&v117, (uint64_t)__p);
        }
        uint64_t v79 = (void *)fst::cerr(v78);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"ReplaceFstImpl: output symbols of Fst ", 38);
        v80 = (void *)std::ostream::operator<<();
        uint64_t v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)" does not match output symbols of base Fst ", 43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"(0'th fst)", 10);
        if (v77)
        {
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v120);
          if (v119 < 0)
          {
            int v82 = (void *)v118[0];
            goto LABEL_94;
          }
        }
        else
        {
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v117);
          if (v116 < 0)
          {
            int v82 = __p[0];
LABEL_94:
            operator delete(v82);
          }
        }
        *(void *)(a1 + 8) |= 4uLL;
      }
LABEL_96:
      int v33 = v53 & v109;
      v35 &= v54;
      v34 &= v55;
      ++v32;
      uint64_t v31 = *a2;
      if (v32 >= (uint64_t)(a2[1] - *a2) >> 4) {
        goto LABEL_99;
      }
    }
    int v70 = FLAGS_fst_error_fatal;
    if (FLAGS_fst_error_fatal)
    {
      std::string::basic_string[abi:ne180100]<0>(v124, "FATAL");
      unint64_t v71 = fst::LogMessage::LogMessage((fst *)&v126, (uint64_t)v124);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v121, "ERROR");
      unint64_t v71 = fst::LogMessage::LogMessage((fst *)&v123, (uint64_t)v121);
    }
    v72 = (void *)fst::cerr(v71);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"ReplaceFstImpl: input symbols of Fst ", 37);
    unsigned int v73 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" does not match input symbols of base Fst (0'th fst)", 52);
    if (v70)
    {
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v126);
      if (v125 < 0)
      {
        unint64_t v74 = (void *)v124[0];
LABEL_83:
        operator delete(v74);
      }
    }
    else
    {
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v123);
      if (v122 < 0)
      {
        unint64_t v74 = (void *)v121[0];
        goto LABEL_83;
      }
    }
    *(void *)(a1 + 8) |= 4uLL;
    goto LABEL_85;
  }
  int v35 = 1;
  int v34 = 1;
  int v33 = 1;
LABEL_99:
  LODWORD(v110[0]) = *(void *)(v107 + 24);
  v113[0] = v110;
  int v83 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v106, (int *)v110, (uint64_t)&std::piecewise_construct, (_DWORD **)v113)+ 5);
  if (!v83 && *(void *)(a1 + 248) - *(void *)(a1 + 240) >= 9uLL)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(v113, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(v113, "ERROR");
    }
    uint64_t v84 = fst::LogMessage::LogMessage((fst *)v128, (uint64_t)v113);
    int v85 = (void *)fst::cerr(v84);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"ReplaceFstImpl: no Fst corresponding to root label '", 52);
    uint64_t v86 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"' in the input tuple vector", 27);
    fst::LogMessage::~LogMessage((fst::LogMessage *)v128);
    if (v114 < 0) {
      operator delete(v113[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
  }
  if (v83 <= 1) {
    int v87 = 1;
  }
  else {
    int v87 = v83;
  }
  *(_DWORD *)(a1 + 264) = v87;
  int v89 = *(_DWORD *)(a1 + 132);
  int v88 = *(_DWORD *)(a1 + 136);
  int v90 = (v89 - 2) < 2 || v89 == 4 && *(void *)(a1 + 144) != -1 || (v88 & 0xFFFFFFFE) == 2;
  uint64_t v91 = *(void *)(a1 + 8) & 4 | fst::ReplaceProperties((uint64_t **)&__str, (v87 - 1), (v89 & 0xFFFFFFFD) == 1, (v88 & 0xFFFFFFFD) == 1, v90, v33);
  *(void *)(a1 + 8) = v91;
  if (v35 && (*(_DWORD *)(a1 + 136) & 0xFFFFFFFD) == 1)
  {
    int v92 = v102;
    if ((*(_DWORD *)(a1 + 132) & 0xFFFFFFFD) != 1) {
      int v92 = 1;
    }
    if ((v92 | v103) == 1)
    {
      v91 |= 0x10000000uLL;
      *(void *)(a1 + 8) = v91;
    }
  }
  if (v34 && (*(_DWORD *)(a1 + 136) - 1) <= 1)
  {
    int v93 = v102;
    if ((*(_DWORD *)(a1 + 132) - 3) < 0xFFFFFFFE) {
      int v93 = 1;
    }
    if ((v93 | v103) == 1) {
      *(void *)(a1 + 8) = v91 | 0x40000000;
    }
  }
  uint64_t v94 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 1342177280);
  char v95 = v33 ^ 1;
  if (!v94) {
    char v95 = 1;
  }
  *(unsigned char *)(a1 + 160) = v95;
  if (FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v110, "INFO");
    long long v96 = fst::LogMessage::LogMessage((fst *)&v112, (uint64_t)v110);
    long long v97 = (void *)fst::cerr(v96);
    long long v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"ReplaceFstImpl::ReplaceFstImpl: always_cache = ", 47);
    long long v99 = *(unsigned char *)(a1 + 160) ? "true" : "false";
    uint64_t v100 = *(unsigned char *)(a1 + 160) ? 4 : 5;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)v99, v100);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v112);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
  }
  if (__str.__r_.__value_.__r.__words[0])
  {
    __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1B1C406A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v51 - 89));
  if (a34 < 0) {
    operator delete(__p);
  }
  BOOL v53 = *(void **)(v51 - 120);
  if (v53)
  {
    *(void *)(v51 - 112) = v53;
    operator delete(v53);
  }
  BOOL v54 = *a13;
  if (*a13)
  {
    v50[31] = v54;
    operator delete(v54);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a15);
  std::__tree<int>::destroy(a14, *a9);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v50);
  _Unwind_Resume(a1);
}

void fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ReplaceFstImpl(uint64_t a1)
{
  fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ReplaceFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(void *a1, uint64_t a2)
{
  if ((a2 & 4) != 0)
  {
    uint64_t v4 = a1[30];
    if ((unint64_t)(a1[31] - v4) >= 9)
    {
      unint64_t v5 = 1;
      do
      {
        if ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(v4 + 8 * v5) + 64))(*(void *)(v4 + 8 * v5), 4, 0))
        {
          a1[1] |= 4uLL;
        }
        ++v5;
        uint64_t v4 = a1[30];
      }
      while (v5 < (a1[31] - v4) >> 3);
    }
  }
  return a1[1] & a2;
}

void *fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>::DefaultReplaceStateTable(void *a1)
{
  a1[1] = a1;
  a1[2] = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(a1 + 3), 0, a1 + 1, a1 + 2);
  a1[15] = a1 + 14;
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  a1[16] = a1 + 14;
  std::unordered_set<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashEqual,std::allocator<long>>::unordered_set((uint64_t)(a1 + 17), 0, a1 + 15, a1 + 16);
  a1[24] = 0;
  a1[25] = 0;
  a1[26] = 0;
  return a1;
}

void sub_1B1C409F4(_Unwind_Exception *a1)
{
  fst::CompactHashStateTable<fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>>::~CompactHashStateTable(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactHashStateTable<fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>>::~CompactHashStateTable(uint64_t a1)
{
  float v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 24);
  return a1;
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, void *a3, void *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(void *)(a1 + 48) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B1C40A8C(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashEqual,std::allocator<long>>::unordered_set(uint64_t a1, size_t a2, void *a3, void *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(void *)(a1 + 48) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B1C40AE8(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReplaceStackPrefix<int,int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReplaceStackPrefix<int,int>>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReplaceStackPrefix<int,int>>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v18 = a6;
  *((void *)&v18 + 1) = a7;
  long long v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  char v16 = 0;
  if (a3 == a5)
  {
    uint64_t v13 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      uint64_t v10 = (void *)(v7 - 24);
      v10[2] = 0;
      unint64_t v11 = *(const void **)(v9 - 24);
      uint64_t v12 = *(void *)(v9 - 16);
      v9 -= 24;
      std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(v10, v11, v12, (v12 - (uint64_t)v11) >> 3);
      uint64_t v7 = *((void *)&v18 + 1) - 24;
      *((void *)&v18 + 1) -= 24;
    }
    while (v9 != a5);
    uint64_t v13 = v18;
  }
  char v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

void sub_1B1C40C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1C40C9C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ReplaceFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3BB90;
  uint64_t v2 = *(void *)(a1 + 168);
  if (v2)
  {
    uint64_t v9 = (void **)(v2 + 192);
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v9);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v2 + 136);
    uint64_t v3 = *(void **)(v2 + 80);
    if (v3)
    {
      *(void *)(v2 + 88) = v3;
      operator delete(v3);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v2 + 24);
    MEMORY[0x1B3EA8670](v2, 0x10E0C400D6CF2F0);
  }
  uint64_t v4 = *(void **)(a1 + 240);
  uint64_t v5 = *(void *)(a1 + 248);
  if ((unint64_t)(v5 - (void)v4) >= 9)
  {
    unint64_t v6 = 1;
    do
    {
      uint64_t v7 = v4[v6];
      if (v7)
      {
        (*(void (**)(void))(*(void *)v7 + 8))(v4[v6]);
        uint64_t v4 = *(void **)(a1 + 240);
        uint64_t v5 = *(void *)(a1 + 248);
      }
      ++v6;
    }
    while (v6 < (v5 - (uint64_t)v4) >> 3);
  }
  if (v4)
  {
    *(void *)(a1 + 248) = v4;
    operator delete(v4);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 200);
  std::__tree<int>::destroy(a1 + 176, *(void **)(a1 + 184));
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl((void *)a1);
}

void *fst::ImplToFst<fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A43928;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 60)) {
    return *(unsigned int *)(a1 + 64);
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
  {
    *(unsigned char *)(a1 + 60) = 1;
    return *(unsigned int *)(a1 + 64);
  }
  if (*(unsigned char *)(a1 + 60)) {
    return *(unsigned int *)(a1 + 64);
  }
  uint64_t v3 = *(void *)(a1 + 240);
  if (*(void *)(a1 + 248) - v3 == 8)
  {
    uint64_t result = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 64) = -1;
    *(unsigned char *)(a1 + 60) = 1;
    if ((*(_DWORD *)(a1 + 68) & 0x80000000) != 0) {
      *(_DWORD *)(a1 + 68) = 0;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(v3 + 8 * *(int *)(a1 + 264));
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
    if (result != -1)
    {
      unsigned int v5 = result;
      memset(__p, 0, sizeof(__p));
      Id = (void *)fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::FindId((void *)(*(void *)(a1 + 168) + 112), (uint64_t)__p, 1);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      uint64_t v7 = *(void **)(a1 + 168);
      unsigned int v8 = *(_DWORD *)(a1 + 264);
      __p[0] = Id;
      __p[1] = (void *)__PAIR64__(v5, v8);
      uint64_t result = fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::FindId(v7, __p, 1);
      *(_DWORD *)(a1 + 64) = result;
      *(unsigned char *)(a1 + 60) = 1;
      if (*(_DWORD *)(a1 + 68) <= (int)result) {
        *(_DWORD *)(a1 + 68) = result + 1;
      }
    }
  }
  return result;
}

void sub_1B1C40FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::FindId(void *a1, uint64_t a2, int a3)
{
  a1[13] = a2;
  uint64_t v6 = (uint64_t)(a1 + 3);
  uint64_t v7 = std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashEqual,std::allocator<long>>::find<long>(a1 + 3, &fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::kCurrentKey);
  if (v7) {
    return v7[2];
  }
  if (!a3) {
    return -1;
  }
  unint64_t v10 = a1[11];
  uint64_t v9 = a1 + 10;
  unint64_t v11 = a1[12];
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - a1[10]) >> 3);
  if (v10 >= v11)
  {
    uint64_t v12 = std::vector<fst::ReplaceStackPrefix<int,int>>::__push_back_slow_path<fst::ReplaceStackPrefix<int,int> const&>(v9, a2);
  }
  else
  {
    std::vector<fst::ReplaceStackPrefix<int,int>>::__construct_one_at_end[abi:ne180100]<fst::ReplaceStackPrefix<int,int> const&>((uint64_t)v9, a2);
    uint64_t v12 = v10 + 24;
  }
  a1[11] = v12;
  std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashEqual,std::allocator<long>>::__emplace_unique_key_args<long,long const&>(v6, (uint64_t *)&v13, &v13);
  return v13;
}

void *std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashEqual,std::allocator<long>>::find<long>(void *a1, uint64_t *a2)
{
  unint64_t v4 = fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashFunc::operator()(a1 + 4, *a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = (void *)*v10;
  if (*v10)
  {
    uint64_t v12 = a1 + 6;
    do
    {
      unint64_t v13 = v11[1];
      if (v13 == v6)
      {
        if (fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashEqual::operator()(v12, v11[2], *a2))
        {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashFunc::operator()(uint64_t *a1, uint64_t a2)
{
  if (a2 < -1) {
    return 0;
  }
  uint64_t v2 = *a1;
  if (a2 == -1) {
    uint64_t v3 = *(uint64_t **)(v2 + 104);
  }
  else {
    uint64_t v3 = (uint64_t *)(*(void *)(v2 + 80) + 24 * a2);
  }
  uint64_t v5 = *v3;
  uint64_t result = 0;
  uint64_t v6 = v3[1] - *v3;
  if (v6)
  {
    unint64_t v7 = v6 >> 3;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    unint64_t v8 = (int *)(v5 + 4);
    do
    {
      result += *(v8 - 1) + 7853 * *v8;
      v8 += 2;
      --v7;
    }
    while (v7);
  }
  return result;
}

BOOL fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashEqual::operator()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 < -1 || a3 < -1) {
    return a2 == a3;
  }
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 1;
  if (a2 == -1) {
    uint64_t v5 = *(void *)(v3 + 104);
  }
  else {
    uint64_t v5 = *(void *)(v3 + 80) + 24 * a2;
  }
  if (a3 == -1) {
    uint64_t v7 = *(void *)(v3 + 104);
  }
  else {
    uint64_t v7 = *(void *)(v3 + 80) + 24 * a3;
  }
  return std::equal_to<fst::ReplaceStackPrefix<int,int>>::operator()[abi:ne180100](v4, v5, v7);
}

BOOL std::equal_to<fst::ReplaceStackPrefix<int,int>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(_DWORD **)a2;
  uint64_t v3 = *(_DWORD **)(a2 + 8);
  unint64_t v5 = ((uint64_t)v3 - *(void *)a2) >> 3;
  uint64_t v6 = *(_DWORD **)a3;
  if (v5 != (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3) {
    return 0;
  }
  if (v3 == v4) {
    return 1;
  }
  uint64_t v7 = v5 <= 1 ? 1 : ((uint64_t)v3 - *(void *)a2) >> 3;
  if (*v4 != *v6 || v4[1] != v6[1]) {
    return 0;
  }
  unint64_t v8 = v6 + 3;
  unint64_t v9 = v4 + 3;
  uint64_t v10 = 1;
  do
  {
    unint64_t v11 = v10;
    if (v7 == v10) {
      break;
    }
    if (*(v9 - 1) != *(v8 - 1)) {
      break;
    }
    int v13 = *v9;
    v9 += 2;
    int v12 = v13;
    int v14 = *v8;
    v8 += 2;
    ++v10;
  }
  while (v12 == v14);
  return v11 >= v5;
}

void *std::vector<fst::ReplaceStackPrefix<int,int>>::__construct_one_at_end[abi:ne180100]<fst::ReplaceStackPrefix<int,int> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  void *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1B1C41378(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReplaceStackPrefix<int,int>>::__push_back_slow_path<fst::ReplaceStackPrefix<int,int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  char v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  std::vector<fst::ReplaceStackPrefix<int,int>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B1C41484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashEqual,std::allocator<long>>::__emplace_unique_key_args<long,long const&>(uint64_t a1, uint64_t *a2, void *a3)
{
  unint64_t v7 = fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashFunc::operator()((uint64_t *)(a1 + 32), *a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v8)
        {
          if (fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashEqual::operator()((uint64_t *)(a1 + 48), i[2], *a2))
          {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 40);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    *uint64_t v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B1C416CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::FindId(void *a1, _OWORD *a2, int a3)
{
  a1[13] = a2;
  uint64_t v6 = (uint64_t)(a1 + 3);
  unint64_t v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, &fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::kCurrentKey);
  if (v7) {
    return *((unsigned int *)v7 + 4);
  }
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = a1[10];
  uint8x8_t v10 = (_OWORD *)a1[11];
  uint64_t v11 = ((uint64_t)v10 - v9) >> 4;
  unsigned int v22 = v11;
  unint64_t v12 = a1[12];
  if ((unint64_t)v10 >= v12)
  {
    unint64_t v14 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v12 - v9;
    if (v15 >> 3 > v14) {
      unint64_t v14 = v15 >> 3;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16) {
      BOOL v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a1 + 12), v16);
    }
    else {
      BOOL v17 = 0;
    }
    unint64_t v18 = &v17[16 * v11];
    unint64_t v19 = &v17[16 * v16];
    *(_OWORD *)unint64_t v18 = *a2;
    int v13 = v18 + 16;
    uint64_t v21 = (char *)a1[10];
    size_t v20 = (char *)a1[11];
    if (v20 != v21)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v20 - 1);
        v18 -= 16;
        v20 -= 16;
      }
      while (v20 != v21);
      size_t v20 = (char *)a1[10];
    }
    a1[10] = v18;
    a1[11] = v13;
    a1[12] = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    _OWORD *v10 = *a2;
    int v13 = v10 + 1;
  }
  a1[11] = v13;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v22, &v22);
  return v22;
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::find<int>(void *a1, int *a2)
{
  uint64_t v3 = *a2;
  if ((int)v3 < -1)
  {
    unint64_t v6 = 0;
  }
  else
  {
    uint64_t v4 = a1[4];
    if (v3 == -1) {
      uint64_t v5 = *(void *)(v4 + 104);
    }
    else {
      uint64_t v5 = *(void *)(v4 + 80) + 16 * v3;
    }
    unint64_t v6 = *(void *)v5 + 7853 * *(int *)(v5 + 8) + 7867 * *(int *)(v5 + 12);
  }
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v11 = *(uint64_t ***)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  unint64_t v12 = *v11;
  if (*v11)
  {
    int v13 = a1 + 6;
    do
    {
      unint64_t v14 = v12[1];
      if (v14 == v6)
      {
        if (fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashEqual::operator()(v13, *((_DWORD *)v12 + 4), *a2))
        {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(void *)&v7) {
            v14 %= *(void *)&v7;
          }
        }
        else
        {
          v14 &= *(void *)&v7 - 1;
        }
        if (v14 != v10) {
          return 0;
        }
      }
      unint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  return v12;
}

BOOL fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  if (a2 < -1 || a3 < -1)
  {
    return a2 == a3;
  }
  else
  {
    uint64_t v3 = *a1;
    if (a2 == -1) {
      uint64_t v4 = *(void *)(v3 + 104);
    }
    else {
      uint64_t v4 = *(void *)(v3 + 80) + 16 * a2;
    }
    if (a3 == -1) {
      uint64_t v7 = *(void *)(v3 + 104);
    }
    else {
      uint64_t v7 = *(void *)(v3 + 80) + 16 * a3;
    }
    if (*(void *)v4 != *(void *)v7 || *(_DWORD *)(v4 + 8) != *(_DWORD *)(v7 + 8)) {
      return 0;
    }
    return *(_DWORD *)(v4 + 12) == *(_DWORD *)(v7 + 12);
  }
}

void *std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v7 = *a2;
  if ((int)v7 < -1)
  {
    unint64_t v10 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v7 == -1) {
      uint64_t v9 = *(void *)(v8 + 104);
    }
    else {
      uint64_t v9 = *(void *)(v8 + 80) + 16 * v7;
    }
    unint64_t v10 = *(void *)v9 + 7853 * *(int *)(v9 + 8) + 7867 * *(int *)(v9 + 12);
  }
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v10;
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
    unint64_t v14 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashEqual::operator()((uint64_t *)(a1 + 48), *((_DWORD *)i + 4), *a2))
          {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  *((_DWORD *)i + 4) = *a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 40);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)uint64_t i = *v24;
LABEL_44:
    *unint64_t v24 = i;
    goto LABEL_45;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B1C41C60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

float fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  if (fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2))
  {
    uint64_t v4 = *(void *)(a1 + 120);
    if (*(_DWORD *)(v4 + 76) == a2) {
      uint64_t v5 = (_DWORD **)(v4 + 80);
    }
    else {
      uint64_t v5 = (_DWORD **)(*(void *)(v4 + 8) + 8 * a2 + 8);
    }
    return *(float *)*v5;
  }
  else
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 168) + 80);
    if (*(void *)(v6 + 16 * a2))
    {
      float v7 = INFINITY;
    }
    else
    {
      uint64_t v8 = v6 + 16 * a2;
      uint64_t v9 = *(void *)(*(void *)(a1 + 240) + 8 * *(int *)(v8 + 8));
      float v7 = (*(float (**)(uint64_t, void))(*(void *)v9 + 32))(v9, *(unsigned int *)(v8 + 12));
    }
    if (*(unsigned char *)(a1 + 160)
      || fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2))
    {
      MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      *(float *)MutableState = v7;
      *((_DWORD *)MutableState + 12) |= 9u;
    }
  }
  return v7;
}

uint64_t fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  if (!fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2))
  {
    if (!*(unsigned char *)(a1 + 160))
    {
      long long v9 = *(_OWORD *)(*(void *)(*(void *)(a1 + 168) + 80) + 16 * a2);
      if (HIDWORD(v9) == -1) {
        return 0;
      }
      uint64_t v7 = *(void *)(*(void *)(a1 + 240) + 8 * SDWORD2(v9));
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
      return v8
           + fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeFinalArc(a1, (uint64_t *)&v9, 0, 15);
    }
    fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Expand((uint64_t *)a1, a2);
  }
  uint64_t v4 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * a2 + 8;
  }
  return (uint64_t)(*(void *)(*(void *)v5 + 32) - *(void *)(*(void *)v5 + 24)) >> 4;
}

void fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Expand(uint64_t *a1, int a2)
{
  long long v14 = *(_OWORD *)(*(void *)(a1[21] + 80) + 16 * a2);
  if (HIDWORD(v14) != -1)
  {
    uint64_t v4 = *(void *)(a1[30] + 8 * SDWORD2(v14));
    unint64_t v13 = 0;
    (*(void (**)(uint64_t))(*(void *)v4 + 136))(v4);
    if (fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeFinalArc((uint64_t)a1, (uint64_t *)&v14, (uint64_t)&v8, 15))
    {
      MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(a1[15], a2);
      fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v8);
    }
    while (1)
    {
      if (v9)
      {
        if ((*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9))
        {
LABEL_15:
          fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs((uint64_t)a1, a2);
          if (v9)
          {
            (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
          }
          else if (v12)
          {
            --*v12;
          }
          return;
        }
        if (v9)
        {
          uint64_t v6 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 32))(v9);
          goto LABEL_8;
        }
      }
      else if (v13 >= v11)
      {
        goto LABEL_15;
      }
      uint64_t v6 = (int *)(v10 + 16 * v13);
LABEL_8:
      if (fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeArc((uint64_t)a1, (uint64_t)&v14, v6, (uint64_t)&v8, 15))
      {
        uint64_t v7 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(a1[15], a2);
        fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(v7, &v8);
      }
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 40))(v9);
      }
      else {
        ++v13;
      }
    }
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs((uint64_t)a1, a2);
}

void sub_1B1C42074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15)
{
  if (a12)
  {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  else if (a15)
  {
    --*a15;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeFinalArc(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v4 = *((unsigned int *)a2 + 3);
  if (v4 == -1) {
    return 0;
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 240) + 8 * *((int *)a2 + 2));
  LODWORD(v19) = (*(float (**)(uint64_t, void))(*(void *)v9 + 32))(v9, *((unsigned int *)a2 + 3));
  int v23 = 2139095040;
  if (*(float *)&v19 == INFINITY) {
    return 0;
  }
  uint64_t v10 = *a2;
  if (!*a2) {
    return 0;
  }
  if (a3)
  {
    int v11 = *(_DWORD *)(a1 + 136);
    if ((v11 & 0xFFFFFFFD) == 1) {
      int v12 = 0;
    }
    else {
      int v12 = *(_DWORD *)(a1 + 152);
    }
    *(_DWORD *)a3 = v12;
    if ((v11 - 1) >= 2) {
      int v14 = *(_DWORD *)(a1 + 152);
    }
    else {
      int v14 = 0;
    }
    *(_DWORD *)(a3 + 4) = v14;
    if ((a4 & 8) != 0)
    {
      uint64_t v15 = *(void *)(*(void *)(a1 + 168) + 192) + 24 * v10;
      unint64_t v21 = 0;
      uint64_t v22 = 0;
      std::vector<int> __p = 0;
      std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(&__p, *(const void **)v15, *(void *)(v15 + 8), (uint64_t)(*(void *)(v15 + 8) - *(void *)v15) >> 3);
      v21 -= 8;
      uint64_t Id = fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::FindId((void *)(*(void *)(a1 + 168) + 112), (uint64_t)&__p, 1);
      if (__p)
      {
        unint64_t v21 = (char *)__p;
        operator delete(__p);
      }
      uint64_t v17 = *(void *)(v15 + 8);
      float v18 = *(void **)(a1 + 168);
      *(void *)&long long v19 = Id;
      *((void *)&v19 + 1) = *(void *)(v17 - 8);
      *(_DWORD *)(a3 + 12) = fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::FindId(v18, &v19, 1);
    }
    if ((a4 & 4) != 0) {
      *(float *)(a3 + 8) = (*(float (**)(uint64_t, uint64_t))(*(void *)v9 + 32))(v9, v4);
    }
  }
  return 1;
}

void sub_1B1C4228C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeArc(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int a5)
{
  BOOL v7 = (a5 & 0xFFFFFFFA) != 0 || (*(_DWORD *)(a1 + 132) & 0xFFFFFFFD) == 1;
  if (!v7)
  {
    *(_OWORD *)a4 = *(_OWORD *)a3;
    return 1;
  }
  char v8 = a5;
  int v12 = a3 + 1;
  LODWORD(v11) = a3[1];
  if (!v11 || (int)v11 < *(_DWORD *)(*(void *)(a1 + 176) + 28)) {
    goto LABEL_13;
  }
  uint64_t v13 = a1 + 184;
  uint64_t v14 = *(void *)(a1 + 184);
  if (v14)
  {
    do
    {
      uint64_t v15 = v14;
      uint64_t v14 = *(void *)(v14 + 8);
    }
    while (v14);
  }
  else
  {
    do
    {
      uint64_t v15 = *(void *)(v13 + 16);
      BOOL v7 = *(void *)v15 == v13;
      uint64_t v13 = v15;
    }
    while (v7);
  }
  if ((int)v11 > *(_DWORD *)(v15 + 28))
  {
LABEL_13:
    if ((a5 & 8) != 0)
    {
      uint64_t v17 = *(void **)(a1 + 168);
      unsigned int v18 = *(_DWORD *)(a2 + 8);
      unsigned int v19 = a3[3];
      *(void *)&long long v38 = *(void *)a2;
      *((void *)&v38 + 1) = __PAIR64__(v19, v18);
      int Id = fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::FindId(v17, &v38, 1);
      LODWORD(v11) = a3[1];
    }
    else
    {
      int Id = -1;
    }
    int v20 = *a3;
LABEL_17:
    int v21 = a3[2];
    *(_DWORD *)a4 = v20;
    *(_DWORD *)(a4 + 4) = v11;
    *(_DWORD *)(a4 + 8) = v21;
LABEL_18:
    *(_DWORD *)(a4 + 12) = Id;
    return 1;
  }
  int v23 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 200), a3 + 1);
  if (!v23)
  {
    if ((v8 & 8) != 0)
    {
      uint64_t v31 = *(void **)(a1 + 168);
      unsigned int v32 = *(_DWORD *)(a2 + 8);
      unsigned int v33 = a3[3];
      *(void *)&long long v38 = *(void *)a2;
      *((void *)&v38 + 1) = __PAIR64__(v33, v32);
      int Id = fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::FindId(v31, &v38, 1);
    }
    else
    {
      int Id = -1;
    }
    int v34 = a3[2];
    *(void *)a4 = *(void *)a3;
    *(_DWORD *)(a4 + 8) = v34;
    goto LABEL_18;
  }
  uint64_t v24 = *((int *)v23 + 5);
  uint64_t v25 = *(void *)(*(void *)(a1 + 240) + 8 * v24);
  uint64_t v26 = *(void *)(*(void *)(a1 + 168) + 192) + 24 * *(void *)a2;
  std::vector<int> __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(&__p, *(const void **)v26, *(void *)(v26 + 8), (uint64_t)(*(void *)(v26 + 8) - *(void *)v26) >> 3);
  fst::ReplaceStackPrefix<int,int>::Push(&__p, *(_DWORD *)(a2 + 8), a3[3]);
  uint64_t v27 = fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::FindId((void *)(*(void *)(a1 + 168) + 112), (uint64_t)&__p, 1);
  if (__p)
  {
    uint64_t v36 = __p;
    operator delete(__p);
  }
  unsigned int v28 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 24))(v25);
  if (v28 != -1)
  {
    if ((v8 & 8) != 0)
    {
      BOOL v29 = *(void **)(a1 + 168);
      *(void *)&long long v38 = v27;
      *((void *)&v38 + 1) = __PAIR64__(v28, v24);
      int Id = fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::FindId(v29, &v38, 1);
    }
    else
    {
      int Id = -1;
    }
    LODWORD(v11) = 0;
    int v30 = *(_DWORD *)(a1 + 132);
    if ((v30 & 0xFFFFFFFD) == 1) {
      int v20 = 0;
    }
    else {
      int v20 = *a3;
    }
    if ((v30 - 1) >= 2)
    {
      uint64_t v11 = *(void *)(a1 + 144);
      if (v11 == -1) {
        LODWORD(v11) = *v12;
      }
    }
    goto LABEL_17;
  }
  return 0;
}

void sub_1B1C42524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ReplaceStackPrefix<int,int>::Push(void **a1, unsigned int a2, uint64_t a3)
{
  unint64_t v8 = (unint64_t)a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  uint64_t v9 = *(unint64_t **)(v6 - 8);
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v11 = ((char *)v9 - (unsigned char *)*a1) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v7 - (void)*a1;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v16 = &v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *(void *)unint64_t v16 = a2 | (unint64_t)(a3 << 32);
    uint64_t v10 = v16 + 8;
    unsigned int v19 = (char *)*a1;
    unsigned int v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      unsigned int v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v10;
    a1[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *uint64_t v9 = a2 | (unint64_t)(a3 << 32);
    uint64_t v10 = v9 + 1;
  }
  a1[1] = v10;
}

uint64_t fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  if (fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2))
  {
LABEL_4:
    uint64_t v4 = *(void *)(a1 + 120);
    if (*(_DWORD *)(v4 + 76) == a2) {
      uint64_t v5 = v4 + 80;
    }
    else {
      uint64_t v5 = *(void *)(v4 + 8) + 8 * a2 + 8;
    }
    return *(void *)(*(void *)v5 + 8);
  }
  if (*(unsigned char *)(a1 + 160) || !(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x10000000))
  {
    fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Expand((uint64_t *)a1, a2);
    goto LABEL_4;
  }
  long long v19 = *(_OWORD *)(*(void *)(*(void *)(a1 + 168) + 80) + 16 * a2);
  if (HIDWORD(v19) == -1) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 240) + 8 * SDWORD2(v19));
  if ((*(_DWORD *)(a1 + 132) & 0xFFFFFFFD) != 1)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
    goto LABEL_31;
  }
  unint64_t v18 = 0;
  (*(void (**)(uint64_t))(*(void *)v8 + 136))(v8);
  uint64_t v6 = 0;
  while (1)
  {
    while (v14)
    {
      char v9 = (*(uint64_t (**)())(*(void *)v14 + 24))();
      uint64_t v10 = v14;
      if (v9) {
        goto LABEL_27;
      }
      uint64_t v11 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)v14 + 32))();
      uint64_t v10 = v14;
      if (*v11)
      {
        uint64_t v12 = (*(uint64_t (**)(void))(*(void *)v14 + 32))();
        goto LABEL_20;
      }
LABEL_21:
      ++v6;
      if (!v10) {
        goto LABEL_24;
      }
      (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
    }
    if (v18 >= v16) {
      goto LABEL_29;
    }
    if (*(_DWORD *)(v15 + 16 * v18)) {
      break;
    }
    ++v6;
LABEL_24:
    ++v18;
  }
  uint64_t v12 = v15 + 16 * v18;
LABEL_20:
  BOOL IsNonTerminal = fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::IsNonTerminal((void *)a1, *(_DWORD *)(v12 + 4));
  uint64_t v10 = v14;
  if (IsNonTerminal) {
    goto LABEL_21;
  }
LABEL_27:
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    goto LABEL_31;
  }
LABEL_29:
  if (v17) {
    --*v17;
  }
LABEL_31:
  if ((*(_DWORD *)(a1 + 136) & 0xFFFFFFFD) == 1) {
    v6 += fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeFinalArc(a1, (uint64_t *)&v19, 0, 15);
  }
  return v6;
}

void sub_1B1C42904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

BOOL fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::IsNonTerminal(void *a1, int a2)
{
  int v7 = a2;
  if (*(_DWORD *)(a1[22] + 28) > a2) {
    return 0;
  }
  uint64_t v2 = a1 + 23;
  uint64_t v3 = a1[23];
  if (v3)
  {
    do
    {
      uint64_t v4 = v3;
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3);
  }
  else
  {
    do
    {
      uint64_t v4 = v2[2];
      BOOL v5 = *(void *)v4 == (void)v2;
      uint64_t v2 = (void *)v4;
    }
    while (v5);
  }
  return *(_DWORD *)(v4 + 28) >= a2
      && std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a1 + 25, &v7) != 0;
}

uint64_t fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  if (fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2))
  {
LABEL_4:
    uint64_t v4 = *(void *)(a1 + 120);
    if (*(_DWORD *)(v4 + 76) == a2) {
      uint64_t v5 = v4 + 80;
    }
    else {
      uint64_t v5 = *(void *)(v4 + 8) + 8 * a2 + 8;
    }
    return *(void *)(*(void *)v5 + 16);
  }
  if (*(unsigned char *)(a1 + 160) || !(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x40000000))
  {
    fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Expand((uint64_t *)a1, a2);
    goto LABEL_4;
  }
  long long v19 = *(_OWORD *)(*(void *)(*(void *)(a1 + 168) + 80) + 16 * a2);
  if (HIDWORD(v19) == -1) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 240) + 8 * SDWORD2(v19));
  if ((*(_DWORD *)(a1 + 132) - 1) >= 2)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 56))(v8);
    goto LABEL_31;
  }
  unint64_t v18 = 0;
  (*(void (**)(uint64_t))(*(void *)v8 + 136))(v8);
  uint64_t v6 = 0;
  while (1)
  {
    while (v14)
    {
      char v9 = (*(uint64_t (**)())(*(void *)v14 + 24))();
      uint64_t v10 = v14;
      if (v9) {
        goto LABEL_27;
      }
      uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v14 + 32))();
      uint64_t v10 = v14;
      if (*(_DWORD *)(v11 + 4))
      {
        uint64_t v12 = (*(uint64_t (**)(void))(*(void *)v14 + 32))();
        goto LABEL_20;
      }
LABEL_21:
      ++v6;
      if (!v10) {
        goto LABEL_24;
      }
      (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
    }
    if (v18 >= v16) {
      goto LABEL_29;
    }
    if (*(_DWORD *)(v15 + 16 * v18 + 4)) {
      break;
    }
    ++v6;
LABEL_24:
    ++v18;
  }
  uint64_t v12 = v15 + 16 * v18;
LABEL_20:
  BOOL IsNonTerminal = fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::IsNonTerminal((void *)a1, *(_DWORD *)(v12 + 4));
  uint64_t v10 = v14;
  if (IsNonTerminal) {
    goto LABEL_21;
  }
LABEL_27:
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    goto LABEL_31;
  }
LABEL_29:
  if (v17) {
    --*v17;
  }
LABEL_31:
  if ((*(_DWORD *)(a1 + 136) - 1) <= 1) {
    v6 += fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeFinalArc(a1, (uint64_t *)&v19, 0, 15);
  }
  return v6;
}

void sub_1B1C42C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

void *fst::ImplToFst<fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(void *result, uint64_t a2, int a3)
{
  void *result = &unk_1F0A43928;
  if (a3) {
    operator new();
  }
  uint64_t v3 = *(void *)(a2 + 8);
  result[1] = v3;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

void sub_1B1C42D3C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C4062370947);
  _Unwind_Resume(a1);
}

void fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ReplaceFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1C430A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  long long v19 = *v17;
  if (*v17)
  {
    *(void *)(v15 + 248) = v19;
    operator delete(v19);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v16);
  std::__tree<int>::destroy(a9, *(void **)(v15 + 184));
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl((void *)v15);
  _Unwind_Resume(a1);
}

void *fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>::DefaultReplaceStateTable(void *a1, uint64_t a2)
{
  a1[1] = a1;
  a1[2] = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(a1 + 3), 0, a1 + 1, a1 + 2);
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::CompactHashBiTable(a1 + 14, (void *)(a2 + 112));
  return a1;
}

void sub_1B1C43188(_Unwind_Exception *a1)
{
  fst::CompactHashStateTable<fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>>::~CompactHashStateTable(v1);
  _Unwind_Resume(a1);
}

void *fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::CompactHashBiTable(void *a1, void *a2)
{
  a1[1] = a1;
  a1[2] = a1;
  uint64_t v4 = (uint64_t)(a1 + 3);
  std::unordered_set<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashEqual,std::allocator<long>>::unordered_set((uint64_t)(a1 + 3), a2[6], a1 + 1, a1 + 2);
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  std::vector<fst::ReplaceStackPrefix<int,int>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>*,fst::ReplaceStackPrefix<int,int>*>(a1 + 10, a2[10], a2[11], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[11] - a2[10]) >> 3));
  for (uint64_t i = (void *)a2[5]; i; uint64_t i = (void *)*i)
    std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)1>::HashEqual,std::allocator<long>>::__emplace_unique_key_args<long,long const&>(v4, i + 2, i + 2);
  return a1;
}

void sub_1B1C4323C(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::vector<fst::ReplaceStackPrefix<int,int>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>*,fst::ReplaceStackPrefix<int,int>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::ReplaceStackPrefix<int,int>>,fst::ReplaceStackPrefix<int,int>*,fst::ReplaceStackPrefix<int,int>*,fst::ReplaceStackPrefix<int,int>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1C432CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::ReplaceStackPrefix<int,int>>,fst::ReplaceStackPrefix<int,int>*,fst::ReplaceStackPrefix<int,int>*,fst::ReplaceStackPrefix<int,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,fst::ReplaceStackPrefix<int,int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1C4338C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,fst::ReplaceStackPrefix<int,int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::unordered_map<int,int>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(int **)(a2 + 16); i; uint64_t i = *(int **)i)
    std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int const,int> const&>(a1, i + 4, (void *)i + 2);
  return a1;
}

void sub_1B1C43438(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int const,int> const&>(uint64_t a1, int *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    char v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = 0;
  v10[1] = v6;
  v10[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  long long v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *v10 = *v19;
LABEL_38:
    void *v19 = v10;
    goto LABEL_39;
  }
  void *v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    long long v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1B1C43658(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~StateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~CacheStateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  int v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if (v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  int v6 = v5;
  do
  {
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v17 = -1;
    uint64_t v18 = -1;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v16 = v6;
    int v22 = 15;
    int v31 = 0;
    uint64_t v23 = 0;
    uint64_t v26 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v27 = 0;
    int v30 = 0;
    fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Reinit_((int *)&v15);
    fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFlags((int *)&v15, 15, 31);
    uint64_t v7 = v19;
    uint64_t v8 = v21;
    while (v7 < v8)
    {
      uint64_t v9 = *(void *)(a1 + 16);
      int v10 = fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(&v15)[3];
      if (*(_DWORD *)(v9 + 68) <= v10) {
        *(_DWORD *)(v9 + 68) = v10 + 1;
      }
      uint64_t v8 = v21;
      uint64_t v7 = ++v19;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(*(void *)(a1 + 16), v6);
    int v11 = *(_DWORD *)(a1 + 24);
    int v12 = *(_DWORD *)(*(void *)(a1 + 16) + 68);
    fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~ArcIterator(&v15);
    BOOL v13 = v11 < v12;
    BOOL v4 = v11 >= v12;
    if (v13) {
      break;
    }
    int v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(*(void *)(a1 + 16));
  }
  while (v6 < *(_DWORD *)(*(void *)(a1 + 16) + 68));
  return v4;
}

void sub_1B1C43840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~ArcIterator((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFlags(int *a1, int a2, int a3)
{
  char v3 = a2;
  int v5 = a1[14] & ~a3;
  uint64_t result = *(void *)(*(void *)a1 + 8);
  if (*(unsigned char *)(result + 160)) {
    int v7 = 15;
  }
  else {
    int v7 = 31;
  }
  int v8 = v7 & a2 | v5;
  a1[14] = v8;
  if ((v8 & 0x10) == 0 && a1[44] != 15)
  {
    uint64_t result = fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(result, a1[2]);
    if ((result & 1) == 0) {
      a1[44] = 0;
    }
  }
  if ((v3 & 0x10) != 0 && !a1[44])
  {
    return (uint64_t)fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Init(a1);
  }
  return result;
}

int *fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(void *a1)
{
  int v2 = *((_DWORD *)a1 + 44);
  if (v2)
  {
    uint64_t v3 = a1[5];
  }
  else
  {
    if ((a1[7] & 0x10) != 0)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      BOOL v4 = fst::LogMessage::LogMessage((fst *)&v17, (uint64_t)__p);
      int v5 = (void *)fst::cerr(v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"ReplaceFst: inconsistent arc iterator flags", 43);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v17);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    (*(void (**)(void, void, void *))(*(void *)*a1 + 136))(*a1, *((unsigned int *)a1 + 2), a1 + 10);
    uint64_t v3 = 0;
    a1[20] = a1 + 10;
    int v2 = 15;
    *((_DWORD *)a1 + 44) = 15;
    a1[5] = 0;
  }
  uint64_t v6 = a1[4] - v3;
  if (v6 < 0)
  {
    int v9 = *((_DWORD *)a1 + 14);
    if (((*((_DWORD *)a1 + 49) ^ 0xF) & v9) != 0)
    {
      fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeFinalArc(*(void *)(*a1 + 8), a1 + 2, (uint64_t)a1 + 180, v9 & 0xF);
      *((_DWORD *)a1 + 49) = a1[7] & 0xF;
    }
    return (int *)a1 + 45;
  }
  else
  {
    int v7 = (void *)a1[20];
    if (*v7)
    {
      (*(void (**)(void, uint64_t))(*(void *)*v7 + 64))(*v7, v6);
      int v8 = (int *)(*(uint64_t (**)(void))(**(void **)a1[20] + 32))(*(void *)a1[20]);
      int v2 = *((_DWORD *)a1 + 44);
    }
    else
    {
      int v8 = (int *)(v7[1] + 16 * v6);
    }
    int v10 = *((_DWORD *)a1 + 14);
    if (((v2 ^ 0xF) & v10) != 0)
    {
      uint64_t v11 = (uint64_t)(a1 + 2);
      uint64_t v13 = *a1;
      uint64_t v12 = (uint64_t)a1 + 60;
      fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeArc(*(void *)(v13 + 8), v11, v8, v12, v10 & 0xF);
      return (int *)v12;
    }
  }
  return v8;
}

void sub_1B1C43AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Reinit_(int *a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 8);
  if (*(unsigned char *)(v3 + 160))
  {
    char HasArcs = fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(v3, a1[2]);
    uint64_t v2 = *(void *)a1;
    if ((HasArcs & 1) == 0)
    {
      fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Expand(*(uint64_t **)(v2 + 8), a1[2]);
      uint64_t v2 = *(void *)a1;
    }
  }
  int v5 = fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(*(void *)(v2 + 8), a1[2]);
  uint64_t v6 = *(void *)a1;
  uint64_t result = *(void *)(*(void *)a1 + 8);
  if (v5)
  {
    uint64_t result = fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(result, a1[2], (void *)a1 + 10);
    *((void *)a1 + 6) = *((void *)a1 + 12);
    *((void *)a1 + 20) = a1 + 20;
    a1[44] = 15;
    *((void *)a1 + 14) = 0;
    *((void *)a1 + 17) = 0;
    return result;
  }
  *((_OWORD *)a1 + 1) = *(_OWORD *)(*(void *)(*(void *)(result + 168) + 80) + 16 * a1[2]);
  uint64_t v8 = a1[7];
  if (v8 == -1)
  {
    *((void *)a1 + 6) = 0;
    return result;
  }
  int v10 = (uint64_t *)(a1 + 28);
  uint64_t v9 = *((void *)a1 + 14);
  uint64_t v11 = *(void *)(*(void *)(*(void *)(v6 + 8) + 240) + 8 * a1[6]);
  if (v9)
  {
    if (v11 != *((void *)a1 + 18)) {
      goto LABEL_9;
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9)) {
      goto LABEL_12;
    }
    uint64_t v9 = *v10;
    if (*v10) {
LABEL_9:
    }
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    *((void *)a1 + 14) = 0;
    uint64_t v8 = a1[7];
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v11 + 136))(v11, v8, (uint64_t *)a1 + 14);
  *((void *)a1 + 18) = v11;
LABEL_12:
  *((void *)a1 + 20) = v10;
  unsigned int v12 = fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeFinalArc(*(void *)(*(void *)a1 + 8), (uint64_t *)a1 + 2, (uint64_t)(a1 + 45), 7);
  a1[49] = 7;
  if (*((void *)a1 + 14)) {
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v11 + 40))(v11, a1[7]);
  }
  else {
    uint64_t result = *((void *)a1 + 16);
  }
  *((void *)a1 + 19) = result;
  *((void *)a1 + 5) = v12;
  *((void *)a1 + 6) = result + v12;
  a1[44] = 0;
  *((void *)a1 + 10) = 0;
  *((void *)a1 + 13) = 0;
  return result;
}

unsigned char *fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Init(unsigned char *result)
{
  uint64_t v1 = result;
  if ((result[56] & 0x10) != 0)
  {
    *((void *)result + 20) = result + 112;
    if ((*(_DWORD *)(*(void *)(*(void *)result + 8) + 132) & 0xFFFFFFFD) == 1) {
      int v3 = 4;
    }
    else {
      int v3 = 5;
    }
    *((_DWORD *)result + 44) = v3;
    uint64_t v2 = *((void *)result + 6) - *((void *)result + 19);
  }
  else
  {
    uint64_t result = (unsigned char *)(*(uint64_t (**)(void))(**(void **)result + 136))();
    uint64_t v2 = 0;
    *((void *)v1 + 20) = v1 + 80;
    *((_DWORD *)v1 + 44) = 15;
  }
  *((void *)v1 + 5) = v2;
  return result;
}

void *fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~ArcIterator(void *a1)
{
  uint64_t v2 = (_DWORD *)a1[13];
  if (v2) {
    --*v2;
  }
  int v3 = (_DWORD *)a1[17];
  if (v3) {
    --*v3;
  }
  uint64_t v4 = a1[14];
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    a1[14] = 0;
  }
  return a1;
}

uint64_t fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(uint64_t *a1, int a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Expand(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator((uint64_t)a1, a2, a3);
  }
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ReplaceFstMatcher(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_1F0A3CF98;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 8);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_DWORD *)(a1 + 64) = a3;
  *(_WORD *)(a1 + 69) = 0;
  *(void *)(a1 + 72) = -1;
  *(void *)(a1 + 80) = -1;
  *(_OWORD *)(a1 + 104) = xmmword_1B25616E0;
  if (a3 == 1) {
    *(void *)(a1 + 104) = 0xFFFFFFFF00000000;
  }
  fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitMatchers(a1);
  return a1;
}

void sub_1B1C43F3C(_Unwind_Exception *exception_object)
{
  int v3 = v2;
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitMatchers(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  unint64_t v2 = (uint64_t)(*(void *)(v1 + 248) - *(void *)(v1 + 240)) >> 3;
  uint64_t v5 = 0;
  std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(a1 + 32, v2, &v5);
  uint64_t v3 = *(void *)(v1 + 240);
  if (*(void *)(v1 + 248) != v3)
  {
    unint64_t v4 = 0;
    do
    {
      if (*(void *)(v3 + 8 * v4)) {
        operator new();
      }
      ++v4;
      uint64_t v3 = *(void *)(v1 + 240);
    }
    while (v4 < (*(void *)(v1 + 248) - v3) >> 3);
  }
}

void sub_1B1C44088(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1020C403A3A3D98);
  _Unwind_Resume(a1);
}

void fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ReplaceFstMatcher(void *a1)
{
  fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ReplaceFstMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy()
{
}

void sub_1B1C44140(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40D49367F0);
  _Unwind_Resume(a1);
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (v2 == 3) {
    return 3;
  }
  if (v2) {
    uint64_t v6 = 0x40000000;
  }
  else {
    uint64_t v6 = 0x10000000;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (v2) {
    uint64_t v8 = 3221225472;
  }
  else {
    uint64_t v8 = 805306368;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0) {
    return *(unsigned int *)(a1 + 64);
  }
  uint64_t v10 = 0x80000000;
  if (!v2) {
    uint64_t v10 = 0x20000000;
  }
  if ((v9 & v10) != 0) {
    return 3;
  }
  else {
    return 4;
  }
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 56) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 56) = a2;
    *(_OWORD *)(result + 72) = *(_OWORD *)(*(void *)(*(void *)(*(void *)(result + 16) + 168) + 80) + 16 * a2);
    uint64_t v3 = *(unsigned int *)(result + 84);
    if (v3 == -1)
    {
      *(unsigned char *)(result + 68) = 1;
    }
    else
    {
      unint64_t v4 = *(_DWORD **)(*(void *)(result + 32) + 8 * *(int *)(result + 80));
      *(void *)(result + ++*(_DWORD *)(result + 24) = v4;
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)v4 + 56))(**(void **)v4, v3);
      v4[18] = v3;
      *(_DWORD *)(v2 + 116) = *(_DWORD *)(v2 + 56);
      *(unsigned char *)(v2 + 70) = 0;
    }
  }
  return result;
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find_(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 60) = a2;
  if ((a2 + 1) > 1)
  {
    uint64_t v8 = *(unsigned char **)(a1 + 24);
    return fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(v8, a2);
  }
  else
  {
    if (!a2) {
      *(unsigned char *)(a1 + 69) = 1;
    }
    *(unsigned char *)(a1 + 70) = fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeFinalArc(*(void *)(a1 + 16), (uint64_t *)(a1 + 72), 0, 15);
    unint64_t v4 = *(void ***)(a1 + 24);
    uint64_t v5 = v4 + 3;
    v4[6] = v4 + 3;
    *((unsigned char *)v4 + 56) = 0;
    if ((_BYTE)v4[1])
    {
      uint64_t v9 = v4[2];
      while (1)
      {
        v4[6] = v9;
        if (v9 == v5) {
          break;
        }
        char v10 = (*(uint64_t (**)(void, void))(*(void *)**v4 + 64))(**v4, *((unsigned int *)v9 + 7));
        uint64_t v11 = v4[6];
        if (v10)
        {
          if (v11 == v5) {
            break;
          }
          *((unsigned char *)v4 + 76) = 0;
          return 1;
        }
        unsigned int v12 = (void *)v11[1];
        if (v12)
        {
          do
          {
            uint64_t v9 = v12;
            unsigned int v12 = (void *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            uint64_t v9 = (void *)v11[2];
            BOOL v13 = *v9 == (void)v11;
            uint64_t v11 = v9;
          }
          while (!v13);
        }
      }
    }
    char v6 = (*(uint64_t (**)(void, uint64_t))(*(void *)**v4 + 64))(**v4, 0xFFFFFFFFLL);
    *((unsigned char *)v4 + 76) = v6 ^ 1;
    if (v6)
    {
      return 1;
    }
    else
    {
      if (a2) {
        BOOL v13 = *(unsigned char *)(a1 + 70) == 0;
      }
      else {
        BOOL v13 = 0;
      }
      return !v13;
    }
  }
}

BOOL fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done_(uint64_t a1)
{
  return !*(unsigned char *)(a1 + 69) && !*(unsigned char *)(a1 + 70) && *(unsigned char *)(*(void *)(a1 + 24) + 76) != 0;
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 69)) {
    return a1 + 104;
  }
  if (*(unsigned char *)(a1 + 70))
  {
    uint64_t v2 = a1 + 88;
    fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeFinalArc(*(void *)(a1 + 16), (uint64_t *)(a1 + 72), a1 + 88, 15);
  }
  else
  {
    uint64_t v3 = *(int **)(a1 + 24);
    if (*((unsigned char *)v3 + 56)) {
      unint64_t v4 = v3 + 15;
    }
    else {
      unint64_t v4 = (int *)(*(uint64_t (**)(void))(***(void ***)v3 + 80))(**(void **)v3);
    }
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = a1 + 72;
    uint64_t v2 = a1 + 88;
    fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeArc(v5, v6, v4, v2, 15);
  }
  return v2;
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 69))
  {
    *(unsigned char *)(result + 69) = 0;
  }
  else if (*(unsigned char *)(result + 70))
  {
    *(unsigned char *)(result + 70) = 0;
  }
  else
  {
    return fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next(*(void *)(result + 24));
  }
  return result;
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

void fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddMultiEpsLabel(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v2 = a1 + 16;
    fst::CompactSet<int,-1>::Insert(v2, a2);
  }
  else
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v3 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
    unint64_t v4 = (void *)fst::cerr(v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"MultiEpsMatcher: Bad multi-eps label: 0", 39);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1B1C4464C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MultiEpsMatcher(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, char a6)
{
  if (!a5) {
    operator new();
  }
  *(void *)uint64_t result = a5;
  *(_DWORD *)(result + 8) = a4;
  *(unsigned char *)(result + 12) = a6;
  *(void *)(result + 32) = 0;
  *(void *)(result + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = result + 24;
  *(void *)(result + 40) = -1;
  *(void *)(result + 48) = 0;
  if (a3) {
    int v6 = 0;
  }
  else {
    int v6 = -1;
  }
  if (a3) {
    int v7 = -1;
  }
  else {
    int v7 = 0;
  }
  *(_DWORD *)(result + 60) = v6;
  *(_DWORD *)(result + 64) = v7;
  *(void *)(result + 68) = 0xFFFFFFFF00000000;
  return result;
}

void sub_1B1C44750(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void *fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ReplaceFstMatcher(void *a1)
{
  *a1 = &unk_1F0A3CF98;
  unint64_t v4 = a1 + 4;
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = (void *)v4[1];
  if (v3 == v2)
  {
    uint64_t v2 = v3;
    if (!v3) {
      return a1;
    }
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  do
  {
    if (v2[v5])
    {
      uint64_t v6 = fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2[v5]);
      MEMORY[0x1B3EA8670](v6, 0x1020C403A3A3D98);
      uint64_t v2 = (void *)a1[4];
      uint64_t v3 = (void *)a1[5];
    }
    ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 12))
  {
    uint64_t v2 = *(void **)a1;
    if (*(void *)a1)
    {
      if (*v2) {
        (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
      }
      MEMORY[0x1B3EA8670](v2, 0x20C4093837F09);
    }
  }
  std::__tree<int>::destroy(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ReplaceFstMatcher(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_1F0A3CF98;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(v3 + 8);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  LODWORD(v3) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 64) = v3;
  *(_WORD *)(a1 + 69) = 0;
  *(void *)(a1 + 72) = -1;
  *(void *)(a1 + 80) = -1;
  *(_OWORD *)(a1 + 104) = xmmword_1B25616E0;
  if (v3 == 1) {
    *(void *)(a1 + 104) = 0xFFFFFFFF00000000;
  }
  fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitMatchers(a1);
  return a1;
}

void sub_1B1C44938(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SortedMatcher(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)a1 = &unk_1F0A38F88;
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 36) = a4;
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_1B25616E0;
  *(unsigned char *)(a1 + 74) = 0;
  fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::MemoryPool((void *)(a1 + 80), 1);
}

void sub_1B1C44ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~MemoryPool(v18);
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36AE0;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36AE0;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SortedMatcher(void *a1)
{
  fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SortedMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Copy()
{
}

void sub_1B1C44C00(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Type(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3) {
    return 3;
  }
  if (v2) {
    uint64_t v6 = 0x40000000;
  }
  else {
    uint64_t v6 = 0x10000000;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (v2) {
    uint64_t v8 = 3221225472;
  }
  else {
    uint64_t v8 = 805306368;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0) {
    return *(unsigned int *)(a1 + 32);
  }
  uint64_t v10 = 0x80000000;
  if (!v2) {
    uint64_t v10 = 0x20000000;
  }
  if ((v9 & v10) != 0) {
    return 3;
  }
  else {
    return 4;
  }
}

uint64_t fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 74)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 72)) {
    *(unsigned char *)(result + 72) = 0;
  }
  else {
    ++*(void *)(*(void *)(result + 24) + 32);
  }
  return result;
}

float fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Final_(uint64_t a1, int a2)
{
  return fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(*(void *)(*(void *)(a1 + 8) + 8), a2);
}

uint64_t fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Priority_(uint64_t a1, int a2)
{
  return fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(*(void *)(*(void *)(a1 + 8) + 8), a2);
}

void fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36AE0;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B1C44D84(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Size()
{
  return 200;
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37A98;
  a1[1] = 208 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B1C44E9C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37A98;
  int v2 = a1 + 3;
  for (uint64_t i = (void *)a1[4]; i != v2; uint64_t i = (void *)i[1])
  {
    unint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Link>::Size()
{
  return 208;
}

void *fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SortedMatcher(void *a1)
{
  *a1 = &unk_1F0A38F88;
  int v2 = (void *)a1[3];
  if (v2)
  {
    uint64_t v3 = fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~ArcIterator(v2);
    v3[25] = a1[17];
    a1[17] = v3;
  }
  uint64_t v4 = a1[1];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  a1[10] = &unk_1F0A36AE0;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Link>::~MemoryArena(a1 + 11);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(a1 + 10));
  return a1;
}

void fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SortedMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A38F88;
  *(void *)(a1 + 8) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 88))(*(void *)(a2 + 8), a3);
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::MemoryPool((void *)(a1 + 80), 1);
}

uint64_t fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 16) != a2)
  {
    uint64_t v3 = result;
    *(_DWORD *)(result + 16) = a2;
    if (*(_DWORD *)(result + 32) == 3)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      uint64_t v4 = fst::LogMessage::LogMessage((fst *)&v10, (uint64_t)__p);
      unint64_t v5 = (void *)fst::cerr(v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v10);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
      *(unsigned char *)(v3 + 74) = 1;
    }
    uint64_t v6 = *(int **)(v3 + 24);
    if (v6)
    {
      fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Reinit(v6, *(void *)(v3 + 8), a2);
      uint64_t v7 = *(void *)(v3 + 24);
    }
    else
    {
      uint64_t v7 = *(void *)(v3 + 136);
      if (v7)
      {
        *(void *)(v3 + 136) = *(void *)(v7 + 200);
      }
      else
      {
        uint64_t v7 = fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Link>::Allocate((void *)(v3 + 88), 1);
        *(void *)(v7 + 200) = 0;
      }
      *(void *)uint64_t v7 = *(void *)(v3 + 8);
      *(_DWORD *)(v7 + 8) = a2;
      *(void *)(v7 + 16) = -1;
      *(void *)(v7 + ++*(_DWORD *)(result + 24) = -1;
      *(void *)(v7 + 32) = 0;
      *(void *)(v7 + 40) = 0;
      *(_DWORD *)(v7 + 56) = 15;
      *(_DWORD *)(v7 + 196) = 0;
      *(void *)(v7 + 80) = 0;
      *(void *)(v7 + 136) = 0;
      *(void *)(v7 + 104) = 0;
      *(void *)(v7 + 112) = 0;
      *(void *)(v7 + 160) = 0;
      *(void *)(v7 + 168) = 0;
      *(void *)(v7 + 152) = 0;
      *(_DWORD *)(v7 + 176) = 0;
      fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Reinit_((int *)v7);
      *(void *)(v3 + ++*(_DWORD *)(result + 24) = v7;
    }
    fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFlags((int *)v7, 16, 16);
    uint64_t result = fst::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(*(void *)(*(void *)(v3 + 8) + 8), a2);
    *(void *)(v3 + 48) = result;
    *(_DWORD *)(v3 + 68) = a2;
  }
  return result;
}

void sub_1B1C45278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

int *fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Reinit(int *a1, uint64_t a2, int a3)
{
  if (a1[2] != a3)
  {
    uint64_t v3 = (_DWORD *)*((void *)a1 + 13);
    if (v3) {
      --*v3;
    }
    uint64_t v4 = (_DWORD *)*((void *)a1 + 17);
    if (v4) {
      --*v4;
    }
    a1[14] = 0;
    a1[44] = 0;
    a1[49] = 0;
    *((void *)a1 + 19) = 0;
    *((void *)a1 + 4) = 0;
    *((void *)a1 + 5) = 0;
    a1[2] = a3;
    return (int *)fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Reinit_(a1);
  }
  return a1;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Link>::Allocate(void *a1, uint64_t a2)
{
  uint64_t v3 = 208 * a2;
  unint64_t v4 = a1[1];
  if (832 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

BOOL fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 73) = 1;
  if (*(unsigned char *)(a1 + 74))
  {
    BOOL result = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 40) = -1;
  }
  else
  {
    *(unsigned char *)(a1 + 72) = a2 == 0;
    if (a2 == -1) {
      int v4 = 0;
    }
    else {
      int v4 = a2;
    }
    *(_DWORD *)(a1 + 40) = v4;
    return (fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Search(a1) & 1) != 0
        || *(unsigned char *)(a1 + 72) != 0;
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Search(uint64_t a1)
{
  int v2 = *(int **)(a1 + 24);
  if (*(_DWORD *)(a1 + 32)) {
    int v3 = 2;
  }
  else {
    int v3 = 1;
  }
  fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFlags(v2, v3, 15);
  if (*(_DWORD *)(a1 + 40) < *(_DWORD *)(a1 + 36))
  {
    int v4 = *(void **)(a1 + 24);
    v4[4] = 0;
    if ((uint64_t)v4[6] < 1) {
      return 0;
    }
    while (1)
    {
      int v5 = *(_DWORD *)(a1 + 32);
      uint64_t v6 = fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(v4);
      uint64_t v7 = v6 + 1;
      if (!v5) {
        uint64_t v7 = v6;
      }
      int v8 = *v7;
      int v9 = *(_DWORD *)(a1 + 40);
      BOOL v10 = v8 == v9;
      int v11 = v8 <= v9 ? 0 : 7;
      if (v10) {
        int v11 = 1;
      }
      if (v11) {
        break;
      }
      int v4 = *(void **)(a1 + 24);
      uint64_t v12 = v4[4] + 1;
      v4[4] = v12;
      if (v12 >= v4[6]) {
        return 0;
      }
    }
    uint64_t result = 0;
    if (v11 == 1) {
      return 1;
    }
    return result;
  }
  unint64_t v14 = *(void *)(a1 + 48);
  if (!v14)
  {
    unint64_t v15 = 0;
LABEL_35:
    uint64_t result = 0;
    *(void *)(*(void *)(a1 + 24) + 32) = v15;
    return result;
  }
  unint64_t v15 = 0;
  while (1)
  {
    unint64_t v16 = (v14 + v15) >> 1;
    char v17 = *(void **)(a1 + 24);
    v17[4] = v16;
    int v18 = *(_DWORD *)(a1 + 32);
    uint64_t v19 = fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(v17);
    uint64_t v20 = v19 + 1;
    if (!v18) {
      uint64_t v20 = v19;
    }
    int v21 = *v20;
    int v22 = *(_DWORD *)(a1 + 40);
    if (v21 <= v22) {
      break;
    }
    unint64_t v14 = (v14 + v15) >> 1;
LABEL_25:
    if (v15 >= v14) {
      goto LABEL_35;
    }
  }
  if (v21 < v22)
  {
    unint64_t v15 = v16 + 1;
    goto LABEL_25;
  }
  while (v16 > v15)
  {
    uint64_t v23 = *(void **)(a1 + 24);
    v23[4] = --v16;
    int v24 = *(_DWORD *)(a1 + 32);
    uint64_t v25 = fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(v23);
    uint64_t v26 = v25 + 1;
    if (!v24) {
      uint64_t v26 = v25;
    }
    if (*v26 != *(_DWORD *)(a1 + 40))
    {
      *(void *)(*(void *)(a1 + 24) + 32) = v16 + 1;
      return 1;
    }
  }
  return 1;
}

BOOL fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (*(void *)(v3 + 32) >= *(void *)(v3 + 48)) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 73)) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 32)) {
    int v4 = 2;
  }
  else {
    int v4 = 1;
  }
  fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFlags((int *)v3, v4, 15);
  int v5 = *(_DWORD *)(a1 + 32);
  uint64_t v6 = fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(*(void **)(a1 + 24));
  uint64_t v7 = v6 + 1;
  if (!v5) {
    uint64_t v7 = v6;
  }
  return *v7 != *(_DWORD *)(a1 + 40);
}

int *fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    return (int *)(a1 + 56);
  }
  fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFlags(*(int **)(a1 + 24), 15, 15);
  uint64_t v3 = *(void **)(a1 + 24);
  return fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(v3);
}

float fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::FinalNoPhiState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float result = (*(float (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32));
  v11[2] = result;
  v11[1] = INFINITY;
  if (result == INFINITY)
  {
    uint64_t BackoffState = fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetBackoffState(a1, a2, v11);
    if (BackoffState == -1)
    {
      return INFINITY;
    }
    else
    {
      if (*(void *)a3) {
        ++*(_DWORD *)(*(void *)a3 + 8);
      }
      float v8 = fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::FinalNoPhiState(a1, BackoffState, a3);
      float result = NAN;
      if (v11[0] != -INFINITY && v8 != -INFINITY)
      {
        float result = INFINITY;
        BOOL v9 = v8 == INFINITY || v11[0] == INFINITY;
        float v10 = v11[0] + v8;
        if (!v9) {
          return v10;
        }
      }
    }
  }
  return result;
}

float fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::FinalUsingPhiState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(int **)(a1 + 48); i != *(int **)(a1 + 56); ++i)
  {
    float v17 = *(float *)i;
    if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 72), (int *)&v17))
    {
      if (*(unsigned char *)(a1 + 40))
      {
        fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(*(void *)(a1 + 128), a2);
        if (!fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(*(void *)(a1 + 128), SLODWORD(v17)))continue; {
        uint64_t v7 = (uint64_t)fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(*(void *)(a1 + 128));
        }
      }
      else
      {
        fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(*(void *)(a1 + 112), a2);
        if (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(*(void *)(a1 + 112), SLODWORD(v17)))continue; {
        uint64_t v7 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(*(void *)(a1 + 112));
        }
      }
      float v9 = *(float *)(v7 + 8);
      uint64_t v8 = *(unsigned int *)(v7 + 12);
      v16[0] = v9;
      if (v8 != -1)
      {
        float v10 = fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::FinalNoPhiState(a1, v8, a3);
        float v17 = v10;
        v16[1] = INFINITY;
        if (v10 != INFINITY)
        {
          float result = NAN;
          if (v9 != -INFINITY && v10 != -INFINITY)
          {
            float result = INFINITY;
            BOOL v12 = v9 == INFINITY || v10 == INFINITY;
            float v13 = v10 + v9;
LABEL_27:
            if (!v12) {
              return v13;
            }
          }
          return result;
        }
      }
    }
  }
  uint64_t BackoffState = fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetBackoffState(a1, a2, v16);
  if (BackoffState == -1) {
    return INFINITY;
  }
  if (*(void *)a3) {
    ++*(_DWORD *)(*(void *)a3 + 8);
  }
  float v15 = fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::FinalUsingPhiState(a1, BackoffState, a3);
  float result = NAN;
  if (v16[0] != -INFINITY && v15 != -INFINITY)
  {
    float result = INFINITY;
    BOOL v12 = v15 == INFINITY || v16[0] == INFINITY;
    float v13 = v16[0] + v15;
    goto LABEL_27;
  }
  return result;
}

void *_ZNSt3__115allocate_sharedB8ne180100IN3fst14BackoffArcInfoENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  int v2 = operator new(0x28uLL);
  float result = _ZNSt3__120__shared_ptr_emplaceIN3fst14BackoffArcInfoENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C45A40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN3fst14BackoffArcInfoENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E298;
  fst::BackoffArcInfo::BackoffArcInfo((uint64_t)(a1 + 3));
  return a1;
}

void sub_1B1C45A9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::BackoffArcInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E298;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::BackoffArcInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E298;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::BackoffArcInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetBackoffState(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    uint64_t v6 = *(void **)(a1 + 120);
    if (!v6) {
      operator new();
    }
    fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reinit(v6, *(void *)(a1 + 32), a2);
    uint64_t v7 = *(void **)(a1 + 120);
    if (*v7)
    {
      if (((*(uint64_t (**)(void))(*(void *)*v7 + 24))(*v7) & 1) == 0)
      {
        uint64_t v7 = *(void **)(a1 + 120);
        if (*v7)
        {
          float v9 = (int *)(*(uint64_t (**)(void))(*(void *)*v7 + 32))(*v7);
          goto LABEL_16;
        }
        goto LABEL_15;
      }
    }
    else if (v7[4] < v7[2])
    {
LABEL_15:
      float v9 = (int *)(v7[1] + 16 * v7[4]);
      goto LABEL_16;
    }
    return 0xFFFFFFFFLL;
  }
  int v5 = *(int **)(a1 + 136);
  if (!v5) {
    operator new();
  }
  fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Reinit(v5, *(void *)(a1 + 32), a2);
  fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFlags(*(int **)(a1 + 136), 16, 16);
  fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFlags(*(int **)(a1 + 136), 1, 15);
  fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFlags(*(int **)(a1 + 136), 8, 8);
  uint64_t v8 = *(void **)(a1 + 136);
  if (v8[4] >= v8[6]) {
    return 0xFFFFFFFFLL;
  }
  float v9 = fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(v8);
LABEL_16:
  if (*v9) {
    return 0xFFFFFFFFLL;
  }
  *a3 = v9[2];
  return v9[3];
}

void sub_1B1C45D58(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1070C401ACC3EEFLL);
  _Unwind_Resume(a1);
}

uint64_t fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetNonPhiArc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(unsigned char *)(a1 + 40))
  {
    fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(*(void *)(a1 + 128), a2);
    if (fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(*(void *)(a1 + 128), a3))
    {
      float v10 = fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(*(void *)(a1 + 128));
LABEL_6:
      *(_OWORD *)a4 = *v10;
      return 1;
    }
  }
  else
  {
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(*(void *)(a1 + 112), a2);
    if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(*(void *)(a1 + 112), a3))
    {
      float v10 = (_OWORD *)fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(*(void *)(a1 + 112));
      goto LABEL_6;
    }
  }
  uint64_t BackoffState = fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetBackoffState(a1, a2, v17);
  if (BackoffState == -1) {
    return 0;
  }
  v17[2] = v17[0];
  v17[1] = INFINITY;
  if (v17[0] == INFINITY)
  {
    uint64_t result = 0;
    *(_DWORD *)(a4 + 8) = 2139095040;
  }
  else
  {
    uint64_t result = fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetNonPhiArc(a1, BackoffState, a3, a4, a5, v17[0]);
    if (result)
    {
      float v13 = *(float *)(a4 + 8);
      float v14 = NAN;
      if (v13 != -INFINITY)
      {
        float v14 = NAN;
        if (v17[0] != -INFINITY)
        {
          float v14 = INFINITY;
          BOOL v15 = v17[0] == INFINITY || v13 == INFINITY;
          float v16 = v13 + v17[0];
          if (!v15) {
            float v14 = v16;
          }
        }
      }
      *(float *)(a4 + 8) = v14;
      if (*(void *)a5) {
        ++*(_DWORD *)(*(void *)a5 + 8);
      }
      return 1;
    }
  }
  return result;
}

uint64_t fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~BackoffDeterministicOnDemandFst(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3F7C8;
  int v2 = *(void **)(a1 + 120);
  if (v2)
  {
    if (*v2)
    {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    else
    {
      uint64_t v3 = (_DWORD *)v2[3];
      if (v3) {
        --*v3;
      }
    }
    MEMORY[0x1B3EA8670](v2, 0x1070C401ACC3EEFLL);
  }
  uint64_t v4 = *(void *)(a1 + 112);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  int v5 = *(void **)(a1 + 136);
  if (v5)
  {
    uint64_t v6 = fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~ArcIterator(v5);
    MEMORY[0x1B3EA8670](v6, 0x1070C40BAB1B673);
  }
  uint64_t v7 = *(void *)(a1 + 128);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (*(unsigned char *)(a1 + 41))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 72);
  float v9 = *(void **)(a1 + 48);
  if (v9)
  {
    *(void *)(a1 + 56) = v9;
    operator delete(v9);
  }
  int v11 = (void **)(a1 + 8);
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  return a1;
}

float fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeFinalEosRecursively(uint64_t a1, uint64_t a2)
{
  float result = (*(float (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32));
  int v12 = LODWORD(result);
  float v11 = INFINITY;
  if (result != INFINITY) {
    return result;
  }
  for (uint64_t i = *(int **)(a1 + 48); i != *(int **)(a1 + 56); ++i)
  {
    int v12 = *i;
    if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 72), &v12))
    {
      if (*(unsigned char *)(a1 + 40))
      {
        fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(*(void *)(a1 + 128), a2);
        if (fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(*(void *)(a1 + 128), v12))
        {
          uint64_t v6 = (uint64_t)fst::SortedMatcher<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(*(void *)(a1 + 128));
          goto LABEL_10;
        }
      }
      else
      {
        fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(*(void *)(a1 + 112), a2);
        if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(*(void *)(a1 + 112), v12))
        {
          uint64_t v6 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(*(void *)(a1 + 112));
LABEL_10:
          int v7 = *(_DWORD *)(v6 + 12);
          float v11 = *(float *)(v6 + 8);
          if (v7 != -1) {
            goto LABEL_13;
          }
        }
      }
    }
  }
  if (fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetBackoffState(a1, a2, &v11) == -1)return INFINITY; {
LABEL_13:
  }
  float v8 = fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComputeFinalEosRecursively(a1);
  float result = NAN;
  if (v11 != -INFINITY && v8 != -INFINITY)
  {
    float result = INFINITY;
    BOOL v9 = v8 == INFINITY || v11 == INFINITY;
    float v10 = v11 + v8;
    if (!v9) {
      return v10;
    }
  }
  return result;
}

void std::__shared_ptr_pointer<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void **std::vector<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  int v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    float v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, v13);
    BOOL v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    uint64_t v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)BOOL v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__swap_out_circular_buffer(a1, v18);
    BOOL v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v18);
  }
  else
  {
    *int v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    BOOL v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1B1C463F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheDeterministicOnDemandFst(void *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  *a1 = &unk_1F0A3F778;
  a1[1] = v5;
  a1[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  fst::MultiWayArcCache<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::MultiWayArcCache(a1 + 3, a3, 8uLL);
  a1[7] = 0;
  a1[8] = 0;
  return a1;
}

void sub_1B1C46474(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return (***(uint64_t (****)(void))(a1 + 8))(*(void *)(a1 + 8));
}

uint64_t fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8))();
}

uint64_t fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetArc(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5)
{
  uint64_t v10 = fst::MultiWayArcCache<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Find((uint64_t *)(a1 + 24), a2, a3);
  if (v11)
  {
    uint64_t result = 0;
    ++*(void *)(a1 + 56);
    if (*(float *)(v10 + 8) == -INFINITY) {
      return result;
    }
    *a4 = *(_OWORD *)v10;
  }
  else
  {
    ++*(void *)(a1 + 64);
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, _OWORD *, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), a2, a3, a4, a5);
    if (!result) {
      return result;
    }
    *(_OWORD *)uint64_t v10 = *a4;
  }
  return 1;
}

void fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheDeterministicOnDemandFst(void *a1)
{
  fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheDeterministicOnDemandFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::FinalEos(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))();
}

void *fst::MultiWayArcCache<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::MultiWayArcCache(void *a1, unint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  char v4 = -1;
  do
  {
    ++v4;
    BOOL v5 = a3 > 1;
    a3 >>= 1;
  }
  while (v5);
  unint64_t v6 = 1 << v4;
  a1[3] = v6;
  char v7 = -1;
  do
  {
    ++v7;
    BOOL v5 = a2 > 1;
    a2 >>= 1;
  }
  while (v5);
  unint64_t v8 = 1 << v7;
  if (v8 <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = v8;
  }
  std::vector<std::pair<int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::resize((uint64_t)a1, v9);
  uint64_t v10 = (_DWORD *)*a1;
  char v11 = (_DWORD *)a1[1];
  if ((_DWORD *)*a1 != v11)
  {
    do
    {
      _DWORD *v10 = -1;
      v10 += 5;
    }
    while (v10 != v11);
  }
  return a1;
}

void sub_1B1C466B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::pair<int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 20 * a2;
  }
}

void std::vector<std::pair<int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__append(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  BOOL v5 = v6;
  char v7 = *(_DWORD **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - (unsigned char *)v7) >> 2) >= a2)
  {
    if (a2)
    {
      unint64_t v13 = &v7[5 * a2];
      uint64_t v14 = 20 * a2;
      do
      {
        *char v7 = 0;
        v7 += 5;
        v14 -= 20;
      }
      while (v14);
      char v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v7 - (unsigned char *)*a1) >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xCCCCCCCCCCCCCCCLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x666666666666666) {
      unint64_t v11 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    BOOL v15 = &v12[20 * v8];
    uint64_t v16 = &v15[20 * a2];
    uint64_t v17 = 20 * a2;
    int v18 = v15;
    do
    {
      *(_DWORD *)int v18 = 0;
      v18 += 20;
      v17 -= 20;
    }
    while (v17);
    uint64_t v19 = &v12[20 * v11];
    int v21 = (char *)*a1;
    uint64_t v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        long long v22 = *(_OWORD *)(v20 - 20);
        *((_DWORD *)v15 - 1) = *((_DWORD *)v20 - 1);
        *(_OWORD *)(v15 - 20) = v22;
        v15 -= 20;
        v20 -= 20;
      }
      while (v20 != v21);
      uint64_t v20 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v19;
    if (v20)
    {
      operator delete(v20);
    }
  }
}

uint64_t fst::MultiWayArcCache<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Find(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[3];
  unint64_t v5 = (26597 * a2 + 50329 * (int)a3) & -v4 & (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 2) - 1);
  if (v4)
  {
    unint64_t v6 = (_DWORD *)(v3 + 20 * v5 + 4);
    uint64_t v7 = a1[3];
    unint64_t v8 = (26597 * a2 + 50329 * (int)a3) & -v4 & (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 2) - 1);
    while (*(v6 - 1) != a2 || *v6 != a3)
    {
      v6 += 5;
      ++v8;
      if (!--v7) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    unint64_t v8 = v5 + v4 - 1;
    unint64_t v10 = (unsigned int *)(v3 + 20 * v8);
    unsigned int *v10 = a2;
    v10[1] = a3;
    v10[3] = 2143289344;
    uint64_t v3 = *a1;
  }
  if (v8 != v5)
  {
    uint64_t v11 = 5 * v8;
    uint64_t v12 = (int *)(v3 + 4 * v11);
    int v13 = *v12;
    long long v19 = *(_OWORD *)(v12 + 1);
    uint64_t v14 = 20 * v5 - 4 * v11;
    BOOL v15 = v12;
    do
    {
      int v16 = *(v15 - 5);
      v15 -= 5;
      *uint64_t v12 = v16;
      *(_OWORD *)(v12 + 1) = *((_OWORD *)v12 - 1);
      uint64_t v12 = v15;
      v14 += 20;
    }
    while (v14);
    uint64_t v17 = *a1 + 20 * v5;
    *(_DWORD *)uint64_t v17 = v13;
    *(_OWORD *)(v17 + 4) = v19;
    uint64_t v3 = *a1;
  }
  return v3 + 20 * v5 + 4;
}

void *fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheDeterministicOnDemandFst(void *a1)
{
  *a1 = &unk_1F0A3F778;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"CacheDeterministicOnDemandFst cache hit rate = ", 47);
    unint64_t v2 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"/", 1);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", std::string::size_type size = ", 9);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v7);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return a1;
}

void std::__shared_ptr_pointer<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getPlaceholder(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (quasar::isPlaceholder((unsigned __int8 *)a1))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      uint64_t v4 = *(const std::string::value_type **)a1;
      std::string::size_type v5 = *(void *)(a1 + 8);
      std::string::__init_copy_ctor_external(a2, v4, v5);
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

void fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::BackoffDeterministicOnDemandFst(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A3F7C8;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 48), *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 32) = a2;
  operator new();
}

void sub_1B1C46CAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v6 = v5;
  MEMORY[0x1B3EA8670](v6, 0x10E1C4003B7394BLL);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4);
  unint64_t v8 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 56) = v8;
    operator delete(v8);
  }
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::RecurrentNeuralDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::RecurrentNeuralDeterministicFst(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, char a6, int **a7, uint64_t a8, float a9, uint64_t a10)
{
  uint64_t v14 = a1;
  *(void *)a1 = &unk_1F0A51588;
  *(void *)(a1 + 8) = a2;
  BOOL v15 = *(Ngram **)(a2 + 8);
  *(void *)(a1 + 16) = v15;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v56 = a1 + 40;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)(a1 + 80) = 0;
  BOOL v55 = (uint64_t *)(a1 + 80);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0x100000000;
  *(_OWORD *)(a1 + 120) = 0u;
  unint64_t v62 = (void *)(a1 + 120);
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 160) = 0u;
  unint64_t v64 = (void *)(a1 + 160);
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_OWORD *)(a1 + 200) = 0u;
  uint64_t v65 = a1 + 200;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_OWORD *)(a1 + 280) = 0u;
  int v60 = (void *)(a1 + 280);
  uint64_t v61 = (void *)(a1 + 240);
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  uint64_t v59 = a1 + 320;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  *(void *)(a1 + 360) = 0;
  int64_t v63 = (uint64_t *)(a1 + 360);
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(unsigned char *)(a1 + 384) = a6;
  *(float *)(a1 + 388) = a9;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 464);
  unsigned int v16 = Ngram::getorder(v15);
  *(_DWORD *)(v14 + 28) = kaldi::quasar::NnlmDecoderWord::GetWordId(v15, v16);
  if (v64 != (void *)a10)
  {
    *(_DWORD *)(v14 + 192) = *(_DWORD *)(a10 + 32);
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<long long,void *> *>>(v64, *(void **)(a10 + 16), 0);
  }
  if (a4[1] != *a4)
  {
    unint64_t v17 = 0;
    unsigned int v18 = 0;
    long long v19 = (float *)(a8 + 8);
    uint64_t v57 = v14;
    uint64_t v58 = a3;
    do
    {
      Wordint Id = 0;
      Wordint Id = kaldi::quasar::NnlmDecoderWord::GetWordId(*(kaldi::quasar::NnlmDecoderWord **)(v14 + 16), *(_DWORD *)(*a3 + 4 * v17));
      if (WordId == *(_DWORD *)(v14 + 28))
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"The LME class ", 14);
          uint64_t v20 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" is not modeled by the NNLM", 27);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v66);
        }
      }
      else
      {
        std::vector<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::push_back[abi:ne180100](v63, (long long *)(*a4 + 16 * v17));
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v62, (int *)(*a3 + 4 * v17), (_DWORD *)(*a3 + 4 * v17));
        *(void *)__x = &WordId;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v61, &WordId, (uint64_t)&std::piecewise_construct, (_DWORD **)__x)+ 5) = v18;
        if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a5, (int *)(*a3 + 4 * v17)))
        {
          int v21 = (int *)(*a3 + 4 * v17);
          long long v22 = a5;
          uint64_t v23 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a5, v21);
          int v24 = v23;
          if (!v23) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          uint64_t v25 = v19;
          int v26 = *v21;
          *(void *)__x = (char *)v23 + 20;
          uint64_t v27 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v60, (int *)v23 + 5, (uint64_t)&std::piecewise_construct, (_DWORD **)__x);
          *((_DWORD *)v27 + 5) = v26;
          *((_DWORD *)v27 + 6) = 1;
          int v28 = *v21;
          *(void *)__x = v24 + 3;
          uint64_t v29 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v60, (int *)v24 + 6, (uint64_t)&std::piecewise_construct, (_DWORD **)__x);
          *((_DWORD *)v29 + 5) = v28;
          *((_DWORD *)v29 + 6) = 2;
          *(void *)__x = v21;
          int v30 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v60, v21, (uint64_t)&std::piecewise_construct, (_DWORD **)__x);
          *((_DWORD *)v30 + 5) = v18;
          *((_DWORD *)v30 + 6) = 0;
          long long v19 = v25;
          uint64_t v31 = *(void *)v25;
          a5 = v22;
          uint64_t v14 = v57;
          a3 = v58;
          if (!v31) {
            goto LABEL_20;
          }
          int v32 = *v21;
          unsigned int v33 = v19;
          do
          {
            int v34 = *(_DWORD *)(v31 + 28);
            BOOL v35 = v34 < v32;
            if (v34 >= v32) {
              uint64_t v36 = (uint64_t *)v31;
            }
            else {
              uint64_t v36 = (uint64_t *)(v31 + 8);
            }
            if (!v35) {
              unsigned int v33 = (float *)v31;
            }
            uint64_t v31 = *v36;
          }
          while (*v36);
          if (v33 != v19 && v32 >= *((_DWORD *)v33 + 7)) {
            double v37 = v33[8];
          }
          else {
LABEL_20:
          }
            double v37 = 1.0;
          v66.__begin_ = (std::vector<int>::pointer)v18;
          *(double *)&v66.__end_ = v37;
          std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::pair<int,double>>(v59, (int *)&v66, (uint64_t)&v66);
        }
        v66.__begin_ = (std::vector<int>::pointer)*(int *)(*a3 + 4 * v17);
        std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__erase_unique<long long>(v64, (unint64_t *)&v66);
        ++v18;
      }
      ++v17;
    }
    while (v17 < (uint64_t)(a4[1] - *a4) >> 4);
  }
  long long v38 = *a7;
  uint64_t v39 = a7[1];
  if (*a7 != v39)
  {
    do
    {
      uint64_t v40 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a5, v38);
      unint64_t v41 = v40;
      if (!v40) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      int v42 = *v38;
      *(void *)__x = (char *)v40 + 20;
      __int32 v43 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v65, (int *)v40 + 5, (uint64_t)&std::piecewise_construct, (_DWORD **)__x);
      *((_DWORD *)v43 + 5) = v42;
      *((_DWORD *)v43 + 6) = 1;
      int v44 = *v38;
      *(void *)__x = v41 + 3;
      uint64_t v45 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v65, (int *)v41 + 6, (uint64_t)&std::piecewise_construct, (_DWORD **)__x);
      *((_DWORD *)v45 + 5) = v44;
      *((_DWORD *)v45 + 6) = 2;
      ++v38;
    }
    while (v38 != v39);
  }
  if (*(void *)(v14 + 264) < (unint64_t)((uint64_t)(*(void *)(v14 + 368) - *(void *)(v14 + 360)) >> 4))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"multiple LME FSTs are mapped into the same non-terminals classes, wrong config?", 79);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
    }
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__clear[abi:ne180100](v63);
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(v62);
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(v61);
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(v60);
  }
  *(_DWORD *)(v14 + 112) = kaldi::MatrixBase<float>::NumCols(*(void *)(v14 + 16)) + 1;
  uint64_t v46 = *(kaldi::quasar::NnlmDecoderWord **)(v14 + 16);
  unsigned int v47 = kaldi::quasar::NnlmDecoderWord::BosSymbol(v46);
  __x[0] = kaldi::quasar::NnlmDecoderWord::GetWordId(v46, v47);
  std::vector<int>::vector(&v66, 1uLL, __x);
  LODWORD(v46) = *(_DWORD *)(v14 + 104);
  *(void *)__x = &v66;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(v56, &v66.__begin_, (uint64_t)&std::piecewise_construct, (uint64_t *)__x)+ 10) = v46;
  unint64_t v48 = *(void *)(v14 + 88);
  if (v48 >= *(void *)(v14 + 96))
  {
    uint64_t v49 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v55, (uint64_t)&v66);
  }
  else
  {
    std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v55, (uint64_t)&v66);
    uint64_t v49 = v48 + 24;
  }
  *(void *)(v14 + 88) = v49;
  int v50 = quasar::artifact::AppLmArtifactLifeCycleStage::operator int(*(void *)(v14 + 16));
  int v51 = kaldi::MatrixBase<float>::NumCols(*(void *)(v14 + 16));
  float v52 = log((double)(v50 - v51 + 1));
  *(float *)(v14 + 32) = v52;
  if (v66.__begin_)
  {
    v66.__end_ = v66.__begin_;
    operator delete(v66.__begin_);
  }
  return v14;
}

void sub_1B1C472C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  std::vector<int> __p = a19;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a15);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a16);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a17);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a21);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a20);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a18);
  std::vector<int> __p = a11;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(a12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::RecurrentNeuralDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Start(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

float kaldi::quasar::RecurrentNeuralDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Final(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 80) + 24 * a2;
  std::vector<int> __p = 0;
  int v32 = 0;
  unint64_t v33 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v4, *(void *)(v4 + 8), (uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 2);
  float v5 = *(float *)(a1 + 388);
  if (v5 < 0.0 || *(_DWORD *)(a1 + 104) != a2)
  {
    uint64_t v6 = __p;
    int v7 = *(_DWORD *)(a1 + 112);
    if (*(_DWORD *)__p / v7 >= 1) {
      *(int *)__p %= v7;
    }
    unint64_t v8 = v32;
    float v9 = 0.0;
    if ((unint64_t)(v32 - v6) >= 0xD
      && *((_DWORD *)v32 - 2) == *(_DWORD *)(a1 + 112)
      && (uint64_t v10 = *((unsigned int *)v32 - 1),
          v32 -= 8,
          int v34 = v8 - 12,
          uint64_t v11 = *(void *)(*(void *)(a1 + 360)
                          + 16
                          * *((unsigned int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a1 + 240, (int *)v8 - 3, (uint64_t)&std::piecewise_construct, (_DWORD **)&v34)+ 5)), float v9 = (*(float (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v10), *(float *)&v34 = v9, v35 = 2139095040, v9 == INFINITY))
    {
      float v5 = INFINITY;
    }
    else
    {
      uint64_t v12 = *(kaldi::quasar::CEAttnEncoderDecoder **)(a1 + 16);
      unsigned int v13 = kaldi::quasar::CEAttnEncoderDecoder::BlankIndex(v12);
      Wordint Id = kaldi::quasar::NnlmDecoderWord::GetWordId(v12, v13);
      int v15 = WordId;
      unsigned int v16 = v32;
      if ((unint64_t)v32 >= v33)
      {
        unsigned int v18 = (char *)__p;
        uint64_t v19 = (v32 - (unsigned char *)__p) >> 2;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = v33 - (void)__p;
        if ((uint64_t)(v33 - (void)__p) >> 1 > v20) {
          unint64_t v20 = v21 >> 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v33, v22);
          unsigned int v18 = (char *)__p;
          unsigned int v16 = v32;
        }
        else
        {
          uint64_t v23 = 0;
        }
        int v24 = &v23[4 * v19];
        uint64_t v25 = &v23[4 * v22];
        *(_DWORD *)int v24 = v15;
        unint64_t v17 = v24 + 4;
        while (v16 != v18)
        {
          int v26 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v24 - 1) = v26;
          v24 -= 4;
        }
        std::vector<int> __p = v24;
        int v32 = v17;
        unint64_t v33 = (unint64_t)v25;
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(_DWORD *)int v32 = WordId;
        unint64_t v17 = v16 + 4;
      }
      int v32 = v17;
      (*(void (**)(void, void **))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), &__p);
      float v5 = NAN;
      if (v9 != -INFINITY && v27 != -INFINITY)
      {
        BOOL v28 = v27 == INFINITY || v9 == INFINITY;
        float v29 = v9 + v27;
        if (v28) {
          float v5 = INFINITY;
        }
        else {
          float v5 = v29;
        }
      }
    }
  }
  if (__p)
  {
    int v32 = (char *)__p;
    operator delete(__p);
  }
  return v5;
}

void sub_1B1C47670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::RecurrentNeuralDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetArc(uint64_t a1, unsigned int a2, uint64_t a3, _DWORD *a4)
{
  v159[0] = a3;
  int v7 = (uint64_t *)(a1 + 80);
  uint64_t v8 = *(void *)(a1 + 80) + 24 * a2;
  std::vector<int> __p = 0;
  v157 = 0;
  v158 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2);
  v150[0] = (void *)a3;
  if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v7 + 10, (unint64_t *)v150))
  {
    goto LABEL_2;
  }
  int v155 = 0;
  uint64_t v12 = (int *)(a1 + 112);
  int v11 = *(_DWORD *)(a1 + 112);
  int v13 = *(_DWORD *)__p / v11;
  signed int v14 = a3;
  int v155 = v13 - 1;
  if (v13 >= 1)
  {
    *(int *)__p %= v11;
    if ((v155 & 0x80000000) == 0) {
      goto LABEL_15;
    }
    signed int v14 = v159[0];
  }
  if (*(unsigned char *)(a1 + 384))
  {
    if (v14 >= (int)quasar::artifact::AppLmArtifactLifeCycleStage::operator int(*(void *)(a1 + 16))) {
      goto LABEL_14;
    }
    if (*(unsigned char *)(a1 + 384))
    {
LABEL_20:
      unsigned int v16 = v157;
      if ((unint64_t)((char *)v157 - (unsigned char *)__p) >= 0xD && *(v157 - 2) == *v12)
      {
        uint64_t v17 = *(v157 - 1);
        v157 -= 2;
        v150[0] = v16 - 3;
        int v18 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a1 + 240, v16 - 3, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 5);
      }
      else
      {
        uint64_t v17 = 0xFFFFFFFFLL;
        int v18 = -1;
      }
      if (*(unsigned char *)(a1 + 384))
      {
        a4[1] = v159[0];
        if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 280), v159))
        {
          v150[0] = v159;
          if (*((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 280, v159, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 6) == 1)
          {
            v150[0] = v159;
            v159[0] = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 280, v159, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 5);
            v150[0] = v159;
            int v155 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 280, v159, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 5);
          }
        }
      }
      LODWORD(v152.__begin_) = 0;
      Wordint Id = kaldi::quasar::NnlmDecoderWord::GetWordId(*(kaldi::quasar::NnlmDecoderWord **)(a1 + 16), v159[0]);
      LODWORD(v152.__begin_) = WordId;
      int v20 = *(_DWORD *)(a1 + 28);
      if (WordId == v20)
      {
        if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 200), v159))
        {
          v150[0] = v159;
          if (*((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 200, v159, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 6) == 1)
          {
            uint64_t v21 = *(kaldi::quasar::NnlmDecoderWord **)(a1 + 16);
            v150[0] = v159;
            unint64_t v22 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 200, v159, (uint64_t)&std::piecewise_construct, (_DWORD **)v150);
            LODWORD(v152.__begin_) = kaldi::quasar::NnlmDecoderWord::GetWordId(v21, *((_DWORD *)v22 + 5));
            std::vector<int>::push_back[abi:ne180100]((uint64_t)&__p, &v152);
LABEL_62:
            a4[2] = 0;
            goto LABEL_78;
          }
          v150[0] = v159;
          if (*((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 200, v159, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 6) == 2)goto LABEL_62; {
LABEL_78:
          }
          if (v17 != -1)
          {
            uint64_t v49 = *(void *)(*(void *)(a1 + 360) + 16 * v18);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v49 + 16))(v49, v17);
            float v51 = *((float *)a4 + 2);
            float v52 = NAN;
            if (v51 != -INFINITY && v50 != -INFINITY)
            {
              float v52 = INFINITY;
              BOOL v53 = v51 == INFINITY || v50 == INFINITY;
              float v54 = v50 + v51;
              if (!v53) {
                float v52 = v54;
              }
            }
            *((float *)a4 + 2) = v52;
          }
          if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 120), v159))
          {
            a4[1] = a3;
            goto LABEL_187;
          }
          a4[1] = 0;
          v150[0] = v157 - 1;
          uint64_t v55 = *((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a1 + 240, v157 - 1, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 5);
          uint64_t v56 = v157;
          if (v157 < v158)
          {
            int *v157 = *v12;
            uint64_t v57 = v56 + 1;
LABEL_105:
            v157 = v57;
            uint64_t v67 = *(uint64_t (****)(void))(*(void *)(a1 + 360) + 16 * v55);
            int v68 = (**v67)(v67);
            int v69 = v68;
            int v70 = v157;
            if (v157 >= v158)
            {
              v72 = (int *)__p;
              uint64_t v73 = ((char *)v157 - (unsigned char *)__p) >> 2;
              unint64_t v74 = v73 + 1;
              if ((unint64_t)(v73 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v75 = (char *)v158 - (unsigned char *)__p;
              if (((char *)v158 - (unsigned char *)__p) >> 1 > v74) {
                unint64_t v74 = v75 >> 1;
              }
              if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v76 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v76 = v74;
              }
              if (v76)
              {
                int v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v158, v76);
                v72 = (int *)__p;
                int v70 = v157;
              }
              else
              {
                int v77 = 0;
              }
              uint64_t v78 = &v77[4 * v73];
              uint64_t v79 = (int *)&v77[4 * v76];
              *(_DWORD *)uint64_t v78 = v69;
              unint64_t v71 = (int *)(v78 + 4);
              while (v70 != v72)
              {
                int v80 = *--v70;
                *((_DWORD *)v78 - 1) = v80;
                v78 -= 4;
              }
              std::vector<int> __p = v78;
              v157 = v71;
              v158 = v79;
              if (v72) {
                operator delete(v72);
              }
            }
            else
            {
              int *v157 = v68;
              unint64_t v71 = v70 + 1;
            }
            v157 = v71;
            if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 280), v159))
            {
              v150[0] = v159;
              if (!*((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 280, v159, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 6))
              {
                v150[0] = v159;
                int v155 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 280, v159, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 5);
              }
            }
            goto LABEL_187;
          }
          uint64_t v58 = (int *)__p;
          uint64_t v59 = ((char *)v157 - (unsigned char *)__p) >> 2;
          unint64_t v60 = v59 + 1;
          if (!((unint64_t)(v59 + 1) >> 62))
          {
            uint64_t v61 = (char *)v158 - (unsigned char *)__p;
            if (((char *)v158 - (unsigned char *)__p) >> 1 > v60) {
              unint64_t v60 = v61 >> 1;
            }
            if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v62 = v60;
            }
            if (v62)
            {
              int64_t v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v158, v62);
              uint64_t v58 = (int *)__p;
              uint64_t v56 = v157;
            }
            else
            {
              int64_t v63 = 0;
            }
            unint64_t v64 = &v63[4 * v59];
            uint64_t v65 = (int *)&v63[4 * v62];
            *(_DWORD *)unint64_t v64 = *v12;
            uint64_t v57 = (int *)(v64 + 4);
            while (v56 != v58)
            {
              int v66 = *--v56;
              *((_DWORD *)v64 - 1) = v66;
              v64 -= 4;
            }
            std::vector<int> __p = v64;
            v157 = v57;
            v158 = v65;
            if (v58) {
              operator delete(v58);
            }
            goto LABEL_105;
          }
LABEL_243:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (*(void *)(a1 + 224)) {
          goto LABEL_2;
        }
      }
      uint64_t v23 = v157;
      if (v157 >= v158)
      {
        uint64_t v25 = (int *)__p;
        uint64_t v26 = ((char *)v157 - (unsigned char *)__p) >> 2;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62) {
          goto LABEL_243;
        }
        uint64_t v28 = (char *)v158 - (unsigned char *)__p;
        if (((char *)v158 - (unsigned char *)__p) >> 1 > v27) {
          unint64_t v27 = v28 >> 1;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          int v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v158, v29);
          uint64_t v25 = (int *)__p;
          uint64_t v23 = v157;
        }
        else
        {
          int v30 = 0;
        }
        unint64_t v41 = &v30[4 * v26];
        int v42 = (int *)&v30[4 * v29];
        *(_DWORD *)unint64_t v41 = v152.__begin_;
        int v24 = (int *)(v41 + 4);
        while (v23 != v25)
        {
          int v43 = *--v23;
          *((_DWORD *)v41 - 1) = v43;
          v41 -= 4;
        }
        std::vector<int> __p = v41;
        v157 = v24;
        v158 = v42;
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        int *v157 = (int)v152.__begin_;
        int v24 = v23 + 1;
      }
      v157 = v24;
      float v44 = (*(float (**)(void, void **))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), &__p);
      *((float *)a4 + 2) = v44;
      if (WordId == v20)
      {
        float v45 = NAN;
        if (v44 != -INFINITY)
        {
          float v46 = *(float *)(a1 + 32);
          float v45 = NAN;
          if (v46 != -INFINITY)
          {
            float v45 = INFINITY;
            BOOL v47 = v46 == INFINITY || v44 == INFINITY;
            float v48 = v44 + v46;
            if (!v47) {
              float v45 = v48;
            }
          }
        }
        *((float *)a4 + 2) = v45;
      }
      goto LABEL_78;
    }
    signed int v14 = v159[0];
  }
  if (!kaldi::quasar::NnlmDecoderWord::IsPhoneWord(*(kaldi::quasar::NnlmDecoderWord **)(a1 + 16), v14)) {
    goto LABEL_20;
  }
LABEL_14:
  if (v155 < 0) {
    goto LABEL_45;
  }
LABEL_15:
  if ((kaldi::quasar::NnlmDecoderWord::IsPhoneWord(*(kaldi::quasar::NnlmDecoderWord **)(a1 + 16), v159[0]) & 1) != 0
    || std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 120), v159))
  {
    goto LABEL_2;
  }
  if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 280), v159))
  {
    int v15 = v155;
    goto LABEL_44;
  }
  v152.__begin_ = v159;
  v152.__begin_ = (std::vector<int>::pointer)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 280, v159, (uint64_t)&std::piecewise_construct, &v152.__begin_)+ 5;
  int v15 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 280, v152.__begin_, (uint64_t)&std::piecewise_construct, &v152.__begin_)+ 5);
  if (v15 != v155)
  {
LABEL_2:
    uint64_t v9 = 0;
    goto LABEL_3;
  }
LABEL_44:
  if ((v15 & 0x80000000) == 0) {
    goto LABEL_47;
  }
LABEL_45:
  if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 280), v159))
  {
    goto LABEL_2;
  }
  int v15 = v155;
LABEL_47:
  char v154 = 0;
  int v153 = 0;
  int LmeArc = kaldi::quasar::RecurrentNeuralDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetLmeArc(a1, &__p, v159[0], v15 >= 0, (uint64_t)v150, &v154);
  int v153 = LmeArc;
  if (LmeArc < 0) {
    goto LABEL_2;
  }
  int v32 = *(_DWORD *)(a1 + 28);
  unint64_t v33 = (int *)__p;
  int v34 = v157;
  uint64_t v35 = ((char *)v157 - (unsigned char *)__p) >> 2;
  if ((unint64_t)((char *)v157 - (unsigned char *)__p) < 0xD
    || (uint64_t v36 = (char *)__p + 4 * v35, *((_DWORD *)v36 - 2) != *v12))
  {
    if (v157 >= v158)
    {
      unint64_t v81 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 62) {
        goto LABEL_244;
      }
      uint64_t v82 = (char *)v158 - (unsigned char *)__p;
      if (((char *)v158 - (unsigned char *)__p) >> 1 > v81) {
        unint64_t v81 = v82 >> 1;
      }
      if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v83 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v83 = v81;
      }
      if (v83)
      {
        uint64_t v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v158, v83);
        unint64_t v33 = (int *)__p;
        int v34 = v157;
        int v85 = v153;
      }
      else
      {
        uint64_t v84 = 0;
        int v85 = LmeArc;
      }
      uint64_t v86 = &v84[4 * v35];
      int v87 = (int *)&v84[4 * v83];
      *(_DWORD *)uint64_t v86 = v85;
      uint64_t v40 = (int *)(v86 + 4);
      while (v34 != v33)
      {
        int v88 = *--v34;
        *((_DWORD *)v86 - 1) = v88;
        v86 -= 4;
      }
      std::vector<int> __p = v86;
      v157 = v40;
      v158 = v87;
      if (v33) {
        operator delete(v33);
      }
    }
    else
    {
      int *v157 = LmeArc;
      uint64_t v40 = v34 + 1;
    }
    v157 = v40;
    float v89 = (*(float (**)(void, void **))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), &__p);
    float v90 = NAN;
    if (v89 != -INFINITY)
    {
      float v90 = NAN;
      if (*(float *)&v150[1] != -INFINITY)
      {
        float v90 = INFINITY;
        BOOL v91 = *(float *)&v150[1] == INFINITY || v89 == INFINITY;
        float v92 = v89 + *(float *)&v150[1];
        if (!v91) {
          float v90 = v92;
        }
      }
    }
    *((float *)a4 + 2) = v90;
    if (LmeArc == v32)
    {
      float v93 = NAN;
      if (v90 != -INFINITY)
      {
        float v94 = *(float *)(a1 + 32);
        float v93 = NAN;
        if (v94 != -INFINITY)
        {
          float v93 = INFINITY;
          BOOL v95 = v94 == INFINITY || v90 == INFINITY;
          float v96 = v90 + v94;
          if (!v95) {
            float v93 = v96;
          }
        }
      }
      *((float *)a4 + 2) = v93;
    }
    long long v98 = v157;
    long long v97 = v158;
    if (v157 >= v158)
    {
      uint64_t v100 = (int *)__p;
      uint64_t v101 = ((char *)v157 - (unsigned char *)__p) >> 2;
      unint64_t v102 = v101 + 1;
      if ((unint64_t)(v101 + 1) >> 62) {
        goto LABEL_244;
      }
      uint64_t v103 = (char *)v158 - (unsigned char *)__p;
      if (((char *)v158 - (unsigned char *)__p) >> 1 > v102) {
        unint64_t v102 = v103 >> 1;
      }
      if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v104 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v104 = v102;
      }
      if (v104)
      {
        long long v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v158, v104);
        uint64_t v100 = (int *)__p;
        long long v98 = v157;
      }
      else
      {
        long long v105 = 0;
      }
      uint64_t v106 = &v105[4 * v101];
      long long v97 = (int *)&v105[4 * v104];
      *(_DWORD *)uint64_t v106 = *v12;
      long long v99 = (int *)(v106 + 4);
      while (v98 != v100)
      {
        int v107 = *--v98;
        *((_DWORD *)v106 - 1) = v107;
        v106 -= 4;
      }
      std::vector<int> __p = v106;
      v157 = v99;
      v158 = v97;
      if (v100)
      {
        operator delete(v100);
        long long v97 = v158;
      }
    }
    else
    {
      int *v157 = *v12;
      long long v99 = v98 + 1;
    }
    v157 = v99;
    if (v99 < v97)
    {
      *long long v99 = HIDWORD(v150[1]);
      long long v108 = v99 + 1;
LABEL_186:
      v157 = v108;
      a4[1] = HIDWORD(v150[0]);
      goto LABEL_187;
    }
    int v109 = (int *)__p;
    uint64_t v110 = ((char *)v99 - (unsigned char *)__p) >> 2;
    unint64_t v111 = v110 + 1;
    if (!((unint64_t)(v110 + 1) >> 62))
    {
      uint64_t v112 = (char *)v97 - (unsigned char *)__p;
      if (v112 >> 1 > v111) {
        unint64_t v111 = v112 >> 1;
      }
      if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v113 = v111;
      }
      if (v113)
      {
        char v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v158, v113);
        int v109 = (int *)__p;
        long long v99 = v157;
      }
      else
      {
        char v114 = 0;
      }
      long long v115 = &v114[4 * v110];
      char v116 = (int *)&v114[4 * v113];
      *(_DWORD *)long long v115 = HIDWORD(v150[1]);
      long long v108 = (int *)(v115 + 4);
      while (v99 != v109)
      {
        int v117 = *--v99;
        *((_DWORD *)v115 - 1) = v117;
        v115 -= 4;
      }
      std::vector<int> __p = v115;
      v157 = v108;
      v158 = v116;
      if (v109) {
        operator delete(v109);
      }
      goto LABEL_186;
    }
LABEL_244:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  int v38 = *((_DWORD *)v36 - 3);
  double v37 = (int *)(v36 - 12);
  if (LmeArc != v38 || v154)
  {
    uint64_t v136 = *(v157 - 1);
    v152.__begin_ = v37;
    uint64_t v137 = *((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a1 + 240, v37, (uint64_t)&std::piecewise_construct, &v152.__begin_)+ 5);
    v157 -= 2;
    std::vector<int>::push_back[abi:ne180100]((uint64_t)&__p, &v153);
    float v138 = (*(float (**)(void, void **))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), &__p);
    float v139 = v138;
    if (LmeArc == v32)
    {
      float v139 = NAN;
      if (v138 != -INFINITY)
      {
        float v140 = *(float *)(a1 + 32);
        float v139 = NAN;
        if (v140 != -INFINITY)
        {
          BOOL v141 = v140 == INFINITY || v138 == INFINITY;
          float v142 = v138 + v140;
          if (v141) {
            float v139 = INFINITY;
          }
          else {
            float v139 = v142;
          }
        }
      }
    }
    std::vector<int>::push_back[abi:ne180100]((uint64_t)&__p, (_DWORD *)(a1 + 112));
    std::vector<int>::push_back[abi:ne180100]((uint64_t)&__p, (_DWORD *)&v150[1] + 1);
    a4[1] = HIDWORD(v150[0]);
    uint64_t v143 = *(void *)(*(void *)(a1 + 360) + 16 * v137);
    float v144 = (*(float (**)(uint64_t, uint64_t))(*(void *)v143 + 16))(v143, v136);
    *(float *)&v152.__begin_ = v144;
    v159[1] = 2139095040;
    if (v144 == INFINITY) {
      goto LABEL_2;
    }
    float v145 = NAN;
    if (v144 != -INFINITY)
    {
      float v145 = NAN;
      if (*(float *)&v150[1] != -INFINITY)
      {
        BOOL v146 = *(float *)&v150[1] == INFINITY || v144 == INFINITY;
        float v147 = v144 + *(float *)&v150[1];
        if (v146) {
          float v147 = INFINITY;
        }
        float v145 = NAN;
        if (v147 != -INFINITY && v139 != -INFINITY)
        {
          float v145 = INFINITY;
          BOOL v148 = v147 == INFINITY || v139 == INFINITY;
          float v149 = v139 + v147;
          if (!v148) {
            float v145 = v149;
          }
        }
      }
    }
    *((float *)a4 + 2) = v145;
  }
  else
  {
    *(v157 - 1) = HIDWORD(v150[1]);
    *(void **)(a4 + 1) = *(void **)((char *)v150 + 4);
    if ((v155 & 0x80000000) == 0)
    {
      uint64_t v39 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 320), &v155);
      if (v39) {
        *((float *)a4 + 2) = *((float *)a4 + 2) * *((float *)v39 + 5);
      }
      if ((v155 & 0x80000000) == 0)
      {
        if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 280), v159))
        {
          v152.__begin_ = v159;
          if (*((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 280, v159, (uint64_t)&std::piecewise_construct, &v152.__begin_)+ 6) == 2)
          {
            int v155 = -1;
            v157 -= 2;
          }
        }
      }
    }
  }
LABEL_187:
  if (v159[0] == a3)
  {
    long long v118 = v157;
  }
  else
  {
    LOBYTE(v152.__begin_) = 0;
    kaldi::quasar::RecurrentNeuralDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetLmeArc(a1, &__p, a3, v155 >= 0, (uint64_t)v150, &v152);
    if ((v155 & 0x80000000) == 0)
    {
      char v119 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 320), &v155);
      if (v119) {
        *(float *)&v150[1] = *(float *)&v150[1] * *((float *)v119 + 5);
      }
    }
    long long v118 = v157;
    *(v157 - 1) = HIDWORD(v150[1]);
    a4[1] = HIDWORD(v150[0]);
    float v120 = *((float *)a4 + 2);
    float v121 = NAN;
    if (v120 != -INFINITY)
    {
      float v121 = NAN;
      if (*(float *)&v150[1] != -INFINITY)
      {
        float v121 = INFINITY;
        BOOL v122 = *(float *)&v150[1] == INFINITY || v120 == INFINITY;
        float v123 = v120 + *(float *)&v150[1];
        if (!v122) {
          float v121 = v123;
        }
      }
    }
    *((float *)a4 + 2) = v121;
  }
  memset(&v152, 0, sizeof(v152));
  std::vector<int>::pointer begin = __p;
  uint64_t v125 = ((char *)v118 - (unsigned char *)__p) >> 2;
  int v126 = v125 - 1;
  if ((unint64_t)((char *)v118 - (unsigned char *)__p) >= 0xD)
  {
    int v127 = *((_DWORD *)__p + v125 - 2);
    int v128 = v125 - 3;
    if (v127 == *v12) {
      int v126 = v128;
    }
  }
  int v129 = *(_DWORD *)(a1 + 24);
  BOOL v130 = __OFSUB__(v126, v129);
  int v131 = v126 - v129;
  if ((v131 < 0) ^ v130 | (v131 == 0))
  {
    v152.__begin_ = (std::vector<int>::pointer)__p;
    v152.__end_ = v118;
    std::vector<int> __p = 0;
    v157 = 0;
    v152.__end_cap_.__value_ = v158;
    v158 = 0;
  }
  else
  {
    std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v152, 0, (char *)__p + 4 * v131, (char *)v118, ((char *)v118 - ((unsigned char *)__p + 4 * v131)) >> 2);
    std::vector<int>::pointer begin = v152.__begin_;
  }
  if ((v155 & 0x80000000) == 0) {
    *begin += *v12 + *v12 * v155;
  }
  memset(v150, 0, sizeof(v150));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v150, begin, (uint64_t)v152.__end_, v152.__end_ - begin);
  int v151 = *(_DWORD *)(a1 + 108);
  v132 = std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::pair<std::vector<int>,int> &>(a1 + 40, (int **)v150, (uint64_t)v150);
  if (v133)
  {
    ++*(_DWORD *)(a1 + 108);
    unint64_t v134 = *(void *)(a1 + 88);
    if (v134 >= *(void *)(a1 + 96))
    {
      uint64_t v135 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v7, (uint64_t)v150);
    }
    else
    {
      std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v7, (uint64_t)v150);
      uint64_t v135 = v134 + 24;
    }
    *(void *)(a1 + 88) = v135;
  }
  *a4 = a3;
  a4[3] = *((_DWORD *)v132 + 10);
  if (v150[0])
  {
    v150[1] = v150[0];
    operator delete(v150[0]);
  }
  if (v152.__begin_)
  {
    v152.__end_ = v152.__begin_;
    operator delete(v152.__begin_);
  }
  uint64_t v9 = 1;
LABEL_3:
  if (__p)
  {
    v157 = (int *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_1B1C48694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::RecurrentNeuralDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~RecurrentNeuralDeterministicFst(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A51588;
  uint64_t v2 = a1 + 40;
  uint64_t v4 = (void **)(a1 + 360);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 320);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 280);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 240);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 200);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 160);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 120);
  uint64_t v4 = (void **)(a1 + 80);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(v2);
  return a1;
}

{
  uint64_t v2;
  void **v4;

  *(void *)a1 = &unk_1F0A51588;
  uint64_t v2 = a1 + 40;
  uint64_t v4 = (void **)(a1 + 360);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 320);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 280);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 240);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 200);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 160);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 120);
  uint64_t v4 = (void **)(a1 + 80);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(v2);
  return MEMORY[0x1B3EA8670](a1, 0x10E1C406E7053A8);
}

uint64_t kaldi::quasar::RecurrentNeuralDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FinalEos(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<long long,void *> *>>(void *a1, void *a2, void *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  uint64_t v8 = (void *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      unint64_t v9 = a2[2];
      v8[2] = v9;
      uint64_t v10 = (void *)*v8;
      v8[1] = v9;
      inserted = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__node_insert_multi_prepare((uint64_t)a1, v9, v8 + 2);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi_perform(a1, v8, inserted);
      a2 = (void *)*a2;
      uint64_t v8 = v10;
      if (!v10) {
        goto LABEL_9;
      }
    }
    do
    {
      uint64_t v12 = (void *)*v8;
      operator delete(v8);
      uint64_t v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_multi<long long const&>(a1, a2 + 2);
      a2 = (void *)*a2;
    }
  }
}

void sub_1B1C4897C(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1B1C4899C(_Unwind_Exception *a1)
{
}

void *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__rehash<false>(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  unsigned int v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    uint64_t result = v16;
    unsigned int v16 = (void *)*v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = v16[1];
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    BOOL v21 = v19 == a2 && v16[2] == *a3;
    int v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = (void *)*v7; *v7; uint64_t i = (void *)*v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (void *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *uint64_t v7 = v13;
            void *v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_multi<long long const&>(void *a1, unint64_t *a2)
{
  int8x8_t v4 = operator new(0x18uLL);
  unint64_t v5 = *a2;
  v4[2] = *a2;
  *int8x8_t v4 = 0;
  v4[1] = v5;
  inserted = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4 + 2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_1B1C48DD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    BOOL v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      size_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          size_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  size_t v11 = operator new(0x20uLL);
  *size_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  *((_DWORD *)v11 + 6) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *size_t v11 = *v20;
LABEL_38:
    *unint64_t v20 = v11;
    goto LABEL_39;
  }
  *size_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1B1C48FF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::pair<int,double>>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      BOOL v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          BOOL v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  BOOL v10 = operator new(0x18uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  float v12 = *(double *)(a3 + 8);
  *((float *)v10 + 5) = v12;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    void *v10 = *v20;
LABEL_38:
    *unint64_t v20 = v10;
    goto LABEL_39;
  }
  void *v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v21 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1B1C4921C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__erase_unique<long long>(void *a1, unint64_t *a2)
{
  uint64_t result = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a1, a2);
  if (result)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  unint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  void *v6;
  void *result;
  unint64_t v8;

  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  unint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a1 + 8);
  void *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1B1C49368(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::RecurrentNeuralDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetLmeArc(uint64_t a1, void *a2, uint64_t a3, char a4, uint64_t a5, unsigned char *a6)
{
  *a6 = 0;
  unsigned int v20 = -1;
  uint64_t v11 = a2[1] - *a2;
  if ((unint64_t)v11 >= 0xD)
  {
    uint64_t v12 = *a2 + 4 * (v11 >> 2);
    if (*(_DWORD *)(v12 - 8) == *(_DWORD *)(a1 + 112))
    {
      unsigned int v20 = *(_DWORD *)(v12 - 12);
      unint64_t v21 = &v20;
      uint64_t v14 = *(void *)(*(void *)(a1 + 360)
                      + 16
                      * *((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a1 + 240, (int *)&v20, (uint64_t)&std::piecewise_construct, &v21)+ 5));
      if ((*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, *(unsigned int *)(a2[1] - 4), a3, a5))return v20; {
    }
      }
  }
  uint64_t result = 0xFFFFFFFFLL;
  if (*(unsigned char *)(a1 + 384) && (a4 & 1) == 0)
  {
    unint64_t v16 = (uint64_t **)(a1 + 256);
    do
    {
      unint64_t v16 = (uint64_t **)*v16;
      if (!v16) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v17 = *(void *)(*(void *)(a1 + 360) + 16 * *((int *)v16 + 5));
      uint64_t v18 = (**(uint64_t (***)(uint64_t))v17)(v17);
    }
    while (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, v18, a3, a5));
    uint64_t v19 = v20;
    uint64_t result = *((unsigned int *)v16 + 4);
    if (v20 == result)
    {
      *a6 = 1;
      return v19;
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::pair<std::vector<int>,int> &>(uint64_t a1, int **a2, uint64_t a3)
{
  unint64_t v7 = *a2;
  unint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    uint8x8_t v9 = *a2;
    do
    {
      uint64_t v10 = *v9++;
      unint64_t v8 = v10 + 7853 * v8;
    }
    while (v9 != v6);
  }
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v11) {
        unint64_t v3 = v8 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v8;
    }
    uint64_t v14 = *(void **)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      BOOL v15 = (void *)*v14;
      if (*v14)
      {
        size_t v16 = (char *)v6 - (char *)v7;
        do
        {
          unint64_t v17 = v15[1];
          if (v17 == v8)
          {
            uint64_t v18 = (const void *)v15[2];
            if (v15[3] - (void)v18 == v16 && !memcmp(v18, v7, v16)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v17 >= v11) {
                v17 %= v11;
              }
            }
            else
            {
              v17 &= v11 - 1;
            }
            if (v17 != v3) {
              break;
            }
          }
          BOOL v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__construct_node_hash<std::pair<std::vector<int>,int> &>(a1, v8, a3, (uint64_t)&v28);
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11) {
        unint64_t v3 = v8 % v11;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v8;
    }
  }
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    void *v28 = *v25;
    *uint64_t v25 = v28;
  }
  else
  {
    void *v28 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v28)
    {
      unint64_t v26 = *(void *)(*v28 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11) {
          v26 %= v11;
        }
      }
      else
      {
        v26 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v28;
    }
  }
  BOOL v15 = v28;
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_1B1C4984C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,int>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__construct_node_hash<std::pair<std::vector<int>,int> &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  void v8[3] = 0;
  v8[4] = 0;
  v8[2] = 0;
  uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8 + 2, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  *((_DWORD *)v8 + 10) = *(_DWORD *)(a3 + 24);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1C498F4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<kaldi::quasar::RecurrentNeuralDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::RecurrentNeuralDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::RecurrentNeuralDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t kaldi::quasar::NeuralNgramDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NeuralNgramDeterministicFst(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, char a6)
{
  uint64_t v8 = a1;
  *(void *)a1 = &unk_1F0A514C8;
  *(void *)(a1 + 8) = a2;
  uint8x8_t v9 = *(Ngram **)(a2 + 8);
  *(void *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v37 = a1 + 32;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(void *)(a1 + 72) = 0;
  uint64_t v36 = (uint64_t *)(a1 + 72);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0x100000000;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 112) = 0u;
  int v43 = (void *)(a1 + 112);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(_OWORD *)(a1 + 152) = 0u;
  int v42 = (void *)(a1 + 152);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 1065353216;
  *(_OWORD *)(a1 + 192) = 0u;
  uint64_t v10 = (void *)(a1 + 192);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 2++*(_DWORD *)(result + 24) = 1065353216;
  *(void *)(a1 + 232) = 0;
  float v44 = (uint64_t *)(a1 + 232);
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 256) = a6;
  unsigned int v11 = Ngram::getorder(v9);
  *(_DWORD *)(v8 + ++*(_DWORD *)(result + 24) = kaldi::quasar::NnlmDecoderWord::GetWordId(v9, v11);
  uint64_t v40 = (uint64_t)v10;
  uint8x8_t v12 = a3;
  if (a4[1] != *a4)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    int v16 = 0;
    uint64_t v38 = v8;
    uint64_t v39 = a4;
    do
    {
      Wordint Id = 0;
      Wordint Id = kaldi::quasar::NnlmDecoderWord::GetWordId(*(kaldi::quasar::NnlmDecoderWord **)(v8 + 16), *(_DWORD *)(*v12 + v14));
      if (WordId == *(_DWORD *)(v8 + 24))
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v45);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"The LME class ", 14);
          unint64_t v17 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" is not modeled by the NNLM", 27);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v45);
        }
      }
      else
      {
        std::vector<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::push_back[abi:ne180100](v44, (long long *)(*a4 + v13));
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v43, (int *)(*v12 + v14), (_DWORD *)(*v12 + v14));
        *(void *)__x = &WordId;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v42, &WordId, (uint64_t)&std::piecewise_construct, (_DWORD **)__x)+ 5) = v16;
        if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a5, (int *)(*v12 + v14)))
        {
          uint64_t v18 = (int *)(*v12 + v14);
          float v19 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a5, v18);
          float v20 = v19;
          if (!v19) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          BOOL v21 = a5;
          int v22 = *v18;
          *(void *)__x = (char *)v19 + 20;
          uint64_t v10 = (void *)v40;
          unint64_t v23 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v40, (int *)v19 + 5, (uint64_t)&std::piecewise_construct, (_DWORD **)__x);
          *((_DWORD *)v23 + 5) = v22;
          *((_DWORD *)v23 + 6) = 1;
          int v24 = *v18;
          *(void *)__x = v20 + 3;
          uint64_t v25 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v40, (int *)v20 + 6, (uint64_t)&std::piecewise_construct, (_DWORD **)__x);
          *((_DWORD *)v25 + 5) = v24;
          *((_DWORD *)v25 + 6) = 2;
          *(void *)__x = v18;
          unint64_t v26 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v40, v18, (uint64_t)&std::piecewise_construct, (_DWORD **)__x);
          *((_DWORD *)v26 + 5) = v16;
          *((_DWORD *)v26 + 6) = 0;
          a5 = v21;
          uint64_t v8 = v38;
          a4 = v39;
          uint8x8_t v12 = a3;
        }
        ++v16;
      }
      ++v15;
      v14 += 4;
      v13 += 16;
    }
    while (v15 < (uint64_t)(a4[1] - *a4) >> 4);
  }
  if (*(void *)(v8 + 176) < (unint64_t)((uint64_t)(*(void *)(v8 + 240) - *(void *)(v8 + 232)) >> 4))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"multiple LME FSTs are mapped into the same non-terminals classes, wrong config?", 79);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v45);
    }
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__clear[abi:ne180100](v44);
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(v43);
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(v42);
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(v10);
  }
  *(_DWORD *)(v8 + 104) = kaldi::MatrixBase<float>::NumCols(*(void *)(v8 + 16)) + 1;
  uint64_t v27 = *(int *)(v8 + 108);
  uint64_t v28 = *(kaldi::quasar::NnlmDecoderWord **)(v8 + 16);
  unsigned int v29 = kaldi::quasar::NnlmDecoderWord::BosSymbol(v28);
  __x[0] = kaldi::quasar::NnlmDecoderWord::GetWordId(v28, v29);
  std::vector<int>::vector(&v45, v27 + 1, __x);
  LODWORD(v28) = *(_DWORD *)(v8 + 96);
  *(void *)__x = &v45;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(v37, &v45.__begin_, (uint64_t)&std::piecewise_construct, (uint64_t *)__x)+ 10) = v28;
  unint64_t v30 = *(void *)(v8 + 80);
  if (v30 >= *(void *)(v8 + 88))
  {
    uint64_t v31 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v36, (uint64_t)&v45);
  }
  else
  {
    std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v36, (uint64_t)&v45);
    uint64_t v31 = v30 + 24;
  }
  *(void *)(v8 + 80) = v31;
  int v32 = quasar::artifact::AppLmArtifactLifeCycleStage::operator int(*(void *)(v8 + 16));
  int v33 = kaldi::MatrixBase<float>::NumCols(*(void *)(v8 + 16));
  float v34 = log((double)(v32 - v33 + 1));
  *(float *)(v8 + 28) = v34;
  if (v45.__begin_)
  {
    v45.__end_ = v45.__begin_;
    operator delete(v45.__begin_);
  }
  return v8;
}

void sub_1B1C49DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *__p, uint64_t a19)
{
  std::vector<int> __p = a17;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a13);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a15);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a16);
  std::vector<int> __p = a9;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(a10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::NeuralNgramDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Start(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

float kaldi::quasar::NeuralNgramDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Final(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 72) + 24 * a2;
  std::vector<int> __p = 0;
  uint64_t v31 = 0;
  unint64_t v32 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  uint8x8_t v4 = __p;
  int64_t v5 = v31 - ((unsigned char *)__p + 4);
  if (v31 != (char *)__p + 4) {
    memmove(__p, (char *)__p + 4, v31 - ((unsigned char *)__p + 4));
  }
  unint64_t v6 = (int *)&v4[v5];
  uint64_t v31 = &v4[v5];
  float v7 = 0.0;
  if (*(int *)(a1 + 108) < (unint64_t)((&v4[v5] - (unsigned char *)__p) >> 2)
    && (uint64_t v8 = *(v6 - 1),
        uint64_t v31 = (char *)(v6 - 1),
        int v33 = (char *)(v6 - 2),
        uint64_t v9 = *(void *)(*(void *)(a1 + 232)
                       + 16
                       * *((unsigned int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a1 + 152, v6 - 2, (uint64_t)&std::piecewise_construct, (_DWORD **)&v33)+ 5)), float v7 = (*(float (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v8), *(float *)&v33 = v7, v34 = 2139095040, v7 == INFINITY))
  {
    float v10 = INFINITY;
  }
  else
  {
    unsigned int v11 = *(kaldi::quasar::CEAttnEncoderDecoder **)(a1 + 16);
    unsigned int v12 = kaldi::quasar::CEAttnEncoderDecoder::BlankIndex(v11);
    Wordint Id = kaldi::quasar::NnlmDecoderWord::GetWordId(v11, v12);
    int v14 = WordId;
    unint64_t v15 = v31;
    if ((unint64_t)v31 >= v32)
    {
      unint64_t v17 = (char *)__p;
      uint64_t v18 = (v31 - (unsigned char *)__p) >> 2;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v20 = v32 - (void)__p;
      if ((uint64_t)(v32 - (void)__p) >> 1 > v19) {
        unint64_t v19 = v20 >> 1;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        int v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v32, v21);
        unint64_t v17 = (char *)__p;
        unint64_t v15 = v31;
      }
      else
      {
        int v22 = 0;
      }
      unint64_t v23 = &v22[4 * v18];
      int v24 = &v22[4 * v21];
      *(_DWORD *)unint64_t v23 = v14;
      int v16 = v23 + 4;
      while (v15 != v17)
      {
        int v25 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *((_DWORD *)v23 - 1) = v25;
        v23 -= 4;
      }
      std::vector<int> __p = v23;
      uint64_t v31 = v16;
      unint64_t v32 = (unint64_t)v24;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v31 = WordId;
      int v16 = v15 + 4;
    }
    uint64_t v31 = v16;
    (*(void (**)(void, void **))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), &__p);
    float v10 = NAN;
    if (v7 != -INFINITY && v26 != -INFINITY)
    {
      BOOL v27 = v26 == INFINITY || v7 == INFINITY;
      float v28 = v7 + v26;
      if (v27) {
        float v10 = INFINITY;
      }
      else {
        float v10 = v28;
      }
    }
  }
  if (__p)
  {
    uint64_t v31 = (char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_1B1C4A140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::NeuralNgramDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetArc(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  int v156 = a3;
  uint64_t v7 = a1 + 72;
  uint64_t v8 = *(void *)(a1 + 72) + 24 * a2;
  std::vector<int> __p = 0;
  char v154 = 0;
  unint64_t v155 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2);
  int v9 = *(_DWORD *)(v7 + 32);
  int v10 = *(_DWORD *)__p / v9;
  int v11 = v10 - 1;
  if (v10 >= 1)
  {
    *(int *)__p %= v9;
    goto LABEL_3;
  }
  signed int v20 = a3;
  if (*(unsigned char *)(a1 + 256))
  {
    if ((int)quasar::artifact::AppLmArtifactLifeCycleStage::operator int(*(void *)(a1 + 16)) <= (int)a3) {
      goto LABEL_3;
    }
    if (*(unsigned char *)(a1 + 256))
    {
LABEL_14:
      unint64_t v21 = __p;
      int64_t v22 = v154 - ((unsigned char *)__p + 4);
      if (v154 != (char *)__p + 4) {
        memmove(__p, (char *)__p + 4, v154 - ((unsigned char *)__p + 4));
      }
      uint64_t v49 = (int *)&v21[v22];
      char v154 = &v21[v22];
      if (*(int *)(a1 + 108) >= (unint64_t)((&v21[v22] - (unsigned char *)__p) >> 2))
      {
        uint64_t v50 = 0xFFFFFFFFLL;
        int v51 = -1;
      }
      else
      {
        uint64_t v50 = *(v49 - 1);
        char v154 = (char *)(v49 - 1);
        v150[0] = v49 - 2;
        int v51 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a1 + 152, v49 - 2, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 5);
      }
      if (*(unsigned char *)(a1 + 256))
      {
        *(_DWORD *)(a4 + 4) = v156;
        if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 192), &v156))
        {
          v150[0] = &v156;
          if (*((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 192, &v156, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 6) == 1)
          {
            v150[0] = &v156;
            int v156 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 192, &v156, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 5);
            v150[0] = &v156;
            int v11 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 192, &v156, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 5);
          }
        }
      }
      Wordint Id = kaldi::quasar::NnlmDecoderWord::GetWordId(*(kaldi::quasar::NnlmDecoderWord **)(a1 + 16), v156);
      int v53 = WordId;
      int v54 = *(_DWORD *)(a1 + 24);
      uint64_t v55 = v154;
      if ((unint64_t)v154 >= v155)
      {
        uint64_t v57 = (char *)__p;
        uint64_t v58 = (v154 - (unsigned char *)__p) >> 2;
        unint64_t v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v60 = v155 - (void)__p;
        if ((uint64_t)(v155 - (void)__p) >> 1 > v59) {
          unint64_t v59 = v60 >> 1;
        }
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v59;
        }
        if (v61)
        {
          unint64_t v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v155, v61);
          uint64_t v57 = (char *)__p;
          uint64_t v55 = v154;
        }
        else
        {
          unint64_t v62 = 0;
        }
        int v85 = &v62[4 * v58];
        uint64_t v86 = &v62[4 * v61];
        *(_DWORD *)int v85 = v53;
        uint64_t v56 = v85 + 4;
        while (v55 != v57)
        {
          int v87 = *((_DWORD *)v55 - 1);
          v55 -= 4;
          *((_DWORD *)v85 - 1) = v87;
          v85 -= 4;
        }
        std::vector<int> __p = v85;
        char v154 = v56;
        unint64_t v155 = (unint64_t)v86;
        if (v57) {
          operator delete(v57);
        }
      }
      else
      {
        *(_DWORD *)char v154 = WordId;
        uint64_t v56 = v55 + 4;
      }
      char v154 = v56;
      float v88 = (*(float (**)(void, void **))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), &__p);
      *(float *)(a4 + 8) = v88;
      if (v53 == v54)
      {
        float v89 = NAN;
        if (v88 != -INFINITY)
        {
          float v90 = *(float *)(a1 + 28);
          float v89 = NAN;
          if (v90 != -INFINITY)
          {
            float v89 = INFINITY;
            BOOL v91 = v90 == INFINITY || v88 == INFINITY;
            float v92 = v88 + v90;
            if (!v91) {
              float v89 = v92;
            }
          }
        }
        *(float *)(a4 + 8) = v89;
      }
      if (v50 != -1)
      {
        uint64_t v93 = *(void *)(*(void *)(a1 + 232) + 16 * v51);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v93 + 16))(v93, v50);
        float v95 = *(float *)(a4 + 8);
        float v96 = NAN;
        if (v95 != -INFINITY && v94 != -INFINITY)
        {
          float v96 = INFINITY;
          BOOL v97 = v95 == INFINITY || v94 == INFINITY;
          float v98 = v94 + v95;
          if (!v97) {
            float v96 = v98;
          }
        }
        *(float *)(a4 + 8) = v96;
      }
      if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 112), &v156))
      {
        *(_DWORD *)(a4 + 4) = 0;
        v150[0] = v154 - 4;
        long long v99 = *(uint64_t (****)(void))(*(void *)(a1 + 232)
                                                 + 16
                                                 * *((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a1 + 152, (int *)v154 - 1, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 5));
        int v100 = (**v99)(v99);
        int v101 = v100;
        unint64_t v102 = v154;
        if ((unint64_t)v154 >= v155)
        {
          unint64_t v104 = (char *)__p;
          uint64_t v105 = (v154 - (unsigned char *)__p) >> 2;
          unint64_t v106 = v105 + 1;
          if ((unint64_t)(v105 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v107 = v155 - (void)__p;
          if ((uint64_t)(v155 - (void)__p) >> 1 > v106) {
            unint64_t v106 = v107 >> 1;
          }
          if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v108 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v108 = v106;
          }
          if (v108)
          {
            int v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v155, v108);
            unint64_t v104 = (char *)__p;
            unint64_t v102 = v154;
          }
          else
          {
            int v109 = 0;
          }
          uint64_t v137 = &v109[4 * v105];
          float v138 = &v109[4 * v108];
          *(_DWORD *)uint64_t v137 = v101;
          uint64_t v103 = v137 + 4;
          while (v102 != v104)
          {
            int v139 = *((_DWORD *)v102 - 1);
            v102 -= 4;
            *((_DWORD *)v137 - 1) = v139;
            v137 -= 4;
          }
          std::vector<int> __p = v137;
          char v154 = v103;
          unint64_t v155 = (unint64_t)v138;
          if (v104) {
            operator delete(v104);
          }
        }
        else
        {
          *(_DWORD *)char v154 = v100;
          uint64_t v103 = v102 + 4;
        }
        char v154 = v103;
        if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 192), &v156))
        {
          v150[0] = &v156;
          if (!*((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 192, &v156, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 6))
          {
            v150[0] = &v156;
            int v11 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 192, &v156, (uint64_t)&std::piecewise_construct, (_DWORD **)v150)+ 5);
          }
        }
      }
      else
      {
        *(_DWORD *)(a4 + 4) = a3;
      }
      goto LABEL_201;
    }
    signed int v20 = v156;
  }
  if (!kaldi::quasar::NnlmDecoderWord::IsPhoneWord(*(kaldi::quasar::NnlmDecoderWord **)(a1 + 16), v20)) {
    goto LABEL_14;
  }
LABEL_3:
  char v152 = 0;
  int LmeArc = kaldi::quasar::NeuralNgramDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetLmeArc(a1, &__p, v156, v10 > 0, (uint64_t)v150, &v152);
  int v13 = LmeArc;
  if (LmeArc < 0) {
    goto LABEL_191;
  }
  int v14 = *(_DWORD *)(a1 + 24);
  unint64_t v15 = (char *)__p;
  uint64_t v16 = *(int *)(a1 + 108);
  if (v16 + 1 != (v154 - (unsigned char *)__p) >> 2)
  {
    unint64_t v23 = (int *)((char *)__p + 4 * v16);
    if (LmeArc == *v23 && v152 == 0)
    {
      *((_DWORD *)v154 - 1) = HIDWORD(v150[1]);
      *(void **)(a4 + 4) = *(void **)((char *)v150 + 4);
      if (v10 < 1) {
        goto LABEL_201;
      }
      if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 192), &v156))goto LABEL_201; {
      v157 = &v156;
      }
      if (*((_DWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 192, &v156, (uint64_t)&std::piecewise_construct, &v157)+ 6) != 2)goto LABEL_201; {
      uint64_t v37 = *(void *)(*(void *)(a1 + 232) + 16 * (v10 - 1));
      }
      (*(void (**)(uint64_t, void))(*(void *)v37 + 16))(v37, *((unsigned int *)v154 - 1));
      float v39 = *(float *)(a4 + 8);
      float v40 = NAN;
      if (v39 != -INFINITY && v38 != -INFINITY)
      {
        float v40 = INFINITY;
        BOOL v41 = v39 == INFINITY || v38 == INFINITY;
        float v42 = v38 + v39;
        if (!v41) {
          float v40 = v42;
        }
      }
      *(float *)(a4 + 8) = v40;
      v154 -= 4;
      goto LABEL_190;
    }
    uint64_t v25 = *((unsigned int *)v154 - 1);
    v157 = (int *)((char *)__p + 4 * v16);
    uint64_t v26 = *((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a1 + 152, v23, (uint64_t)&std::piecewise_construct, &v157)+ 5);
    BOOL v27 = (char *)__p;
    int64_t v28 = v154 - ((unsigned char *)__p + 4);
    if (v154 != (char *)__p + 4) {
      memmove(__p, (char *)__p + 4, v154 - ((unsigned char *)__p + 4));
    }
    unsigned int v29 = &v27[v28];
    unint64_t v30 = v29 - 4;
    char v154 = v29 - 4;
    if ((unint64_t)(v29 - 4) >= v155)
    {
      int v43 = (char *)__p;
      uint64_t v44 = (v30 - (unsigned char *)__p) >> 2;
      unint64_t v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v46 = v155 - (void)__p;
      if ((uint64_t)(v155 - (void)__p) >> 1 > v45) {
        unint64_t v45 = v46 >> 1;
      }
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v47 = v45;
      }
      if (v47)
      {
        float v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v155, v47);
        int v43 = (char *)__p;
        unint64_t v30 = v154;
      }
      else
      {
        float v48 = 0;
      }
      uint64_t v110 = &v48[4 * v44];
      unint64_t v111 = &v48[4 * v47];
      *(_DWORD *)uint64_t v110 = v13;
      unsigned int v29 = v110 + 4;
      while (v30 != v43)
      {
        int v112 = *((_DWORD *)v30 - 1);
        v30 -= 4;
        *((_DWORD *)v110 - 1) = v112;
        v110 -= 4;
      }
      std::vector<int> __p = v110;
      char v154 = v29;
      unint64_t v155 = (unint64_t)v111;
      if (v43) {
        operator delete(v43);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v30 = v13;
    }
    char v154 = v29;
    float v113 = (*(float (**)(void, void **))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), &__p);
    float v114 = v113;
    if (v13 == v14)
    {
      float v114 = NAN;
      if (v113 != -INFINITY)
      {
        float v115 = *(float *)(a1 + 28);
        float v114 = NAN;
        if (v115 != -INFINITY)
        {
          BOOL v116 = v115 == INFINITY || v113 == INFINITY;
          float v117 = v113 + v115;
          if (v116) {
            float v114 = INFINITY;
          }
          else {
            float v114 = v117;
          }
        }
      }
    }
    long long v118 = v154;
    if ((unint64_t)v154 >= v155)
    {
      float v120 = (char *)__p;
      uint64_t v121 = (v154 - (unsigned char *)__p) >> 2;
      unint64_t v122 = v121 + 1;
      if ((unint64_t)(v121 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v123 = v155 - (void)__p;
      if ((uint64_t)(v155 - (void)__p) >> 1 > v122) {
        unint64_t v122 = v123 >> 1;
      }
      if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v124 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v124 = v122;
      }
      if (v124)
      {
        uint64_t v125 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v155, v124);
        float v120 = (char *)__p;
        long long v118 = v154;
      }
      else
      {
        uint64_t v125 = 0;
      }
      int v126 = &v125[4 * v121];
      int v127 = &v125[4 * v124];
      *(_DWORD *)int v126 = HIDWORD(v150[1]);
      char v119 = v126 + 4;
      while (v118 != v120)
      {
        int v128 = *((_DWORD *)v118 - 1);
        v118 -= 4;
        *((_DWORD *)v126 - 1) = v128;
        v126 -= 4;
      }
      std::vector<int> __p = v126;
      char v154 = v119;
      unint64_t v155 = (unint64_t)v127;
      if (v120) {
        operator delete(v120);
      }
    }
    else
    {
      *(_DWORD *)char v154 = HIDWORD(v150[1]);
      char v119 = v118 + 4;
    }
    char v154 = v119;
    *(_DWORD *)(a4 + 4) = HIDWORD(v150[0]);
    uint64_t v129 = *(void *)(*(void *)(a1 + 232) + 16 * v26);
    float v130 = (*(float (**)(uint64_t, uint64_t))(*(void *)v129 + 16))(v129, v25);
    *(float *)&v157 = v130;
    int v158 = 2139095040;
    if (v130 != INFINITY)
    {
      float v131 = NAN;
      if (v130 != -INFINITY)
      {
        float v131 = NAN;
        if (*(float *)&v150[1] != -INFINITY)
        {
          BOOL v132 = *(float *)&v150[1] == INFINITY || v130 == INFINITY;
          float v133 = v130 + *(float *)&v150[1];
          if (v132) {
            float v133 = INFINITY;
          }
          float v131 = NAN;
          if (v133 != -INFINITY && v114 != -INFINITY)
          {
            float v131 = INFINITY;
            BOOL v134 = v133 == INFINITY || v114 == INFINITY;
            float v135 = v114 + v133;
            if (!v134) {
              float v131 = v135;
            }
          }
        }
      }
      *(float *)(a4 + 8) = v131;
LABEL_190:
      int v11 = -1;
      goto LABEL_201;
    }
LABEL_191:
    uint64_t v136 = 0;
    goto LABEL_220;
  }
  int64_t v17 = v154 - ((unsigned char *)__p + 4);
  if (v154 != (char *)__p + 4) {
    memmove(__p, (char *)__p + 4, v154 - ((unsigned char *)__p + 4));
  }
  uint64_t v18 = &v15[v17];
  char v154 = &v15[v17];
  if ((unint64_t)&v15[v17] >= v155)
  {
    uint64_t v31 = (char *)__p;
    uint64_t v32 = (v18 - (unsigned char *)__p) >> 2;
    unint64_t v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 62) {
      goto LABEL_223;
    }
    uint64_t v34 = v155 - (void)__p;
    if ((uint64_t)(v155 - (void)__p) >> 1 > v33) {
      unint64_t v33 = v34 >> 1;
    }
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v35 = v33;
    }
    if (v35)
    {
      uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v155, v35);
      uint64_t v31 = (char *)__p;
      uint64_t v18 = v154;
    }
    else
    {
      uint64_t v36 = 0;
    }
    int64_t v63 = &v36[4 * v32];
    unint64_t v64 = &v36[4 * v35];
    *(_DWORD *)int64_t v63 = v13;
    unint64_t v19 = v63 + 4;
    while (v18 != v31)
    {
      int v65 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *((_DWORD *)v63 - 1) = v65;
      v63 -= 4;
    }
    std::vector<int> __p = v63;
    char v154 = v19;
    unint64_t v155 = (unint64_t)v64;
    if (v31) {
      operator delete(v31);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v18 = v13;
    unint64_t v19 = v18 + 4;
  }
  char v154 = v19;
  float v66 = (*(float (**)(void, void **))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), &__p);
  float v67 = NAN;
  if (v66 != -INFINITY)
  {
    float v67 = NAN;
    if (*(float *)&v150[1] != -INFINITY)
    {
      float v67 = INFINITY;
      BOOL v68 = *(float *)&v150[1] == INFINITY || v66 == INFINITY;
      float v69 = v66 + *(float *)&v150[1];
      if (!v68) {
        float v67 = v69;
      }
    }
  }
  *(float *)(a4 + 8) = v67;
  if (v13 == v14)
  {
    float v70 = NAN;
    if (v67 != -INFINITY)
    {
      float v71 = *(float *)(a1 + 28);
      float v70 = NAN;
      if (v71 != -INFINITY)
      {
        float v70 = INFINITY;
        BOOL v72 = v71 == INFINITY || v67 == INFINITY;
        float v73 = v67 + v71;
        if (!v72) {
          float v70 = v73;
        }
      }
    }
    *(float *)(a4 + 8) = v70;
  }
  unint64_t v74 = v154;
  if ((unint64_t)v154 >= v155)
  {
    unint64_t v76 = (char *)__p;
    uint64_t v77 = (v154 - (unsigned char *)__p) >> 2;
    unint64_t v78 = v77 + 1;
    if (!((unint64_t)(v77 + 1) >> 62))
    {
      uint64_t v79 = v155 - (void)__p;
      if ((uint64_t)(v155 - (void)__p) >> 1 > v78) {
        unint64_t v78 = v79 >> 1;
      }
      if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v80 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v80 = v78;
      }
      if (v80)
      {
        unint64_t v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v155, v80);
        unint64_t v76 = (char *)__p;
        unint64_t v74 = v154;
      }
      else
      {
        unint64_t v81 = 0;
      }
      uint64_t v82 = &v81[4 * v77];
      unint64_t v83 = &v81[4 * v80];
      *(_DWORD *)uint64_t v82 = HIDWORD(v150[1]);
      uint64_t v75 = v82 + 4;
      while (v74 != v76)
      {
        int v84 = *((_DWORD *)v74 - 1);
        v74 -= 4;
        *((_DWORD *)v82 - 1) = v84;
        v82 -= 4;
      }
      std::vector<int> __p = v82;
      char v154 = v75;
      unint64_t v155 = (unint64_t)v83;
      if (v76) {
        operator delete(v76);
      }
      goto LABEL_106;
    }
LABEL_223:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  *(_DWORD *)char v154 = HIDWORD(v150[1]);
  uint64_t v75 = v74 + 4;
LABEL_106:
  char v154 = v75;
  *(_DWORD *)(a4 + 4) = HIDWORD(v150[0]);
LABEL_201:
  if (v156 != a3)
  {
    LOBYTE(v157) = 0;
    kaldi::quasar::NeuralNgramDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetLmeArc(a1, &__p, a3, v11 >= 0, (uint64_t)v150, &v157);
    *((_DWORD *)v154 - 1) = HIDWORD(v150[1]);
    *(_DWORD *)(a4 + 4) = HIDWORD(v150[0]);
    float v140 = *(float *)(a4 + 8);
    float v141 = NAN;
    if (v140 != -INFINITY)
    {
      float v141 = NAN;
      if (*(float *)&v150[1] != -INFINITY)
      {
        float v141 = INFINITY;
        BOOL v142 = *(float *)&v150[1] == INFINITY || v140 == INFINITY;
        float v143 = v140 + *(float *)&v150[1];
        if (!v142) {
          float v141 = v143;
        }
      }
    }
    *(float *)(a4 + 8) = v141;
  }
  float v144 = __p;
  if ((v11 & 0x80000000) == 0) {
    *(_DWORD *)__p += *(_DWORD *)(a1 + 104) + *(_DWORD *)(a1 + 104) * v11;
  }
  memset(v150, 0, sizeof(v150));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v150, v144, (uint64_t)v154, (v154 - (unsigned char *)v144) >> 2);
  int v151 = *(_DWORD *)(a1 + 100);
  float v145 = std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::pair<std::vector<int>,int> &>(a1 + 32, (int **)v150, (uint64_t)v150);
  if (v146)
  {
    ++*(_DWORD *)(a1 + 100);
    unint64_t v147 = *(void *)(a1 + 80);
    if (v147 >= *(void *)(a1 + 88))
    {
      uint64_t v148 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>((uint64_t *)v7, (uint64_t)v150);
    }
    else
    {
      std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>(v7, (uint64_t)v150);
      uint64_t v148 = v147 + 24;
    }
    *(void *)(a1 + 80) = v148;
  }
  *(_DWORD *)a4 = a3;
  *(_DWORD *)(a4 + 12) = *((_DWORD *)v145 + 10);
  if (v150[0])
  {
    v150[1] = v150[0];
    operator delete(v150[0]);
  }
  uint64_t v136 = 1;
LABEL_220:
  if (__p)
  {
    char v154 = (char *)__p;
    operator delete(__p);
  }
  return v136;
}

void sub_1B1C4AF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1C4AFB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1C4AF98);
}

uint64_t kaldi::quasar::NeuralNgramDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~NeuralNgramDeterministicFst(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A514C8;
  uint64_t v2 = a1 + 32;
  uint8x8_t v4 = (void **)(a1 + 232);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 192);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 152);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 112);
  uint8x8_t v4 = (void **)(a1 + 72);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(v2);
  return a1;
}

{
  uint64_t v2;
  void **v4;

  *(void *)a1 = &unk_1F0A514C8;
  uint64_t v2 = a1 + 32;
  uint8x8_t v4 = (void **)(a1 + 232);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 192);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 152);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 112);
  uint8x8_t v4 = (void **)(a1 + 72);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(v2);
  return MEMORY[0x1B3EA8670](a1, 0x10E1C408DCDB8B8);
}

uint64_t kaldi::quasar::NeuralNgramDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetLmeArc(uint64_t a1, void *a2, uint64_t a3, char a4, uint64_t a5, unsigned char *a6)
{
  *a6 = 0;
  unsigned int v19 = -1;
  uint64_t v11 = *(int *)(a1 + 108);
  if (v11 + 1 < (unint64_t)((uint64_t)(a2[1] - *a2) >> 2))
  {
    unsigned int v19 = *(_DWORD *)(*a2 + 4 * v11);
    signed int v20 = &v19;
    uint64_t v13 = *(void *)(*(void *)(a1 + 232)
                    + 16
                    * *((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a1 + 152, (int *)&v19, (uint64_t)&std::piecewise_construct, &v20)+ 5));
    if ((*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, *(unsigned int *)(a2[1] - 4), a3, a5))return v19; {
  }
    }
  uint64_t result = 0xFFFFFFFFLL;
  if (*(unsigned char *)(a1 + 256) && (a4 & 1) == 0)
  {
    unint64_t v15 = (uint64_t **)(a1 + 168);
    do
    {
      unint64_t v15 = (uint64_t **)*v15;
      if (!v15) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v16 = *(void *)(*(void *)(a1 + 232) + 16 * *((int *)v15 + 5));
      uint64_t v17 = (**(uint64_t (***)(uint64_t))v16)(v16);
    }
    while (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, v17, a3, a5));
    uint64_t v18 = v19;
    uint64_t result = *((unsigned int *)v15 + 4);
    if (v19 == result)
    {
      *a6 = 1;
      return v18;
    }
  }
  return result;
}

void std::__shared_ptr_pointer<kaldi::quasar::NeuralNgramDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::NeuralNgramDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::NeuralNgramDeterministicFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *std::vector<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__init_with_size[abi:ne180100]<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1C4B3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint8x8_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint8x8_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void **std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v12);
    int v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *(_OWORD *)int v14 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *((_DWORD *)v14 + 4) = *(_DWORD *)(a2 + 16);
    float v16[2] = v14 + 24;
    std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = a1[1];
    uint64_t result = std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer(v16);
  }
  else
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(_DWORD *)(v7 + 16) = *(_DWORD *)(a2 + 16);
    uint64_t v8 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v8;
  return result;
}

void sub_1B1C4B5A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>,std::reverse_iterator<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>*>,std::reverse_iterator<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>*>,std::reverse_iterator<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>,std::reverse_iterator<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>*>,std::reverse_iterator<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>*>,std::reverse_iterator<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 24;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 24);
      a3 -= 24;
      *(_OWORD *)uint64_t v8 = v9;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(a3 + 16);
      *((void *)&v15 + 1) = v8;
      v8 -= 24;
      v7 -= 24;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>,std::reverse_iterator<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>,std::reverse_iterator<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>,std::reverse_iterator<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>,std::reverse_iterator<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 24;
  }
}

void **std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 24;
    uint8x8_t v4 = *(std::__shared_weak_count **)(v1 - 16);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 24;
    }
  }
}

void *std::allocate_shared[abi:ne180100]<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType &,BOOL const&,void>@<X0>(uint64_t *a1@<X1>, int *a2@<X2>, char *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x88uLL);
  uint64_t result = std::__shared_ptr_emplace<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType &,BOOL const&,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B1C4B830(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType &,BOOL const&,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,0>(void *a1, uint64_t *a2, int *a3, char *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E420;
  fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InterpolateDeterministicOnDemandFst((uint64_t)(a1 + 3), a2, *a3, *a4);
  return a1;
}

void sub_1B1C4B894(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E420;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E420;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))();
}

uint64_t fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InterpolateDeterministicOnDemandFst(uint64_t a1, uint64_t *a2, int a3, char a4)
{
  *(void *)a1 = &unk_1F0A3F908;
  *(void *)(a1 + 8) = 0;
  uint64_t v5 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 32) = a3;
  unint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6)
  {
LABEL_37:
    *(_DWORD *)(a1 + 108) = -1;
  }
  else
  {
    uint64_t v32 = (uint64_t *)(a1 + 80);
    uint64_t v33 = a1 + 40;
    uint64_t v10 = 0;
    float v11 = 0.0;
    do
    {
      float v12 = *(float *)(v7 + 16);
      if (v12 >= 0.00097656 || (a4 & 1) == 0)
      {
        if (!*(void *)v7 || (***(unsigned int (****)(void))v7)(*(void *)v7) == -1)
        {
          if (kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"the individual DeterministicOnDemandFst is NULL or empty", 56);
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
          }
          goto LABEL_37;
        }
        int v13 = (***(uint64_t (****)(void))v7)();
        int v14 = v13;
        long long v15 = v36;
        if (v36 >= (int *)v37)
        {
          uint64_t v17 = v35;
          uint64_t v18 = v36 - v35;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = v37 - (char *)v35;
          if ((v37 - (char *)v35) >> 1 > v19) {
            unint64_t v19 = v20 >> 1;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21)
          {
            int64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v37, v21);
            uint64_t v17 = v35;
            long long v15 = v36;
          }
          else
          {
            int64_t v22 = 0;
          }
          unint64_t v23 = (int *)&v22[4 * v18];
          int *v23 = v14;
          uint64_t v16 = v23 + 1;
          while (v15 != v17)
          {
            int v24 = *--v15;
            *--unint64_t v23 = v24;
          }
          unint64_t v35 = v23;
          uint64_t v36 = v16;
          uint64_t v37 = &v22[4 * v21];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *uint64_t v36 = v13;
          uint64_t v16 = v15 + 1;
        }
        uint64_t v36 = v16;
        unint64_t v25 = *(void *)(a1 + 16);
        if (v25 >= *(void *)(a1 + 24))
        {
          uint64_t v10 = std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::__push_back_slow_path<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float> const&>(v5, v7);
        }
        else
        {
          *(void *)unint64_t v25 = *(void *)v7;
          uint64_t v26 = *(void *)(v7 + 8);
          *(void *)(v25 + 8) = v26;
          if (v26) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
          }
          *(_DWORD *)(v25 + 16) = *(_DWORD *)(v7 + 16);
          uint64_t v10 = v25 + 24;
        }
        float v11 = v11 + v12;
        *(void *)(a1 + 16) = v10;
        uint64_t v6 = a2[1];
      }
      v7 += 24;
    }
    while (v7 != v6);
    uint64_t v27 = *v5;
    if (v10 == *v5) {
      goto LABEL_37;
    }
    if (!*(_DWORD *)(a1 + 32))
    {
      if (v11 != 1.0)
      {
        BOOL v28 = COERCE_INT(fabs(v11 + -1.0)) <= 2139095039
           && fabsf(v11 + -1.0) <= (float)((float)(fabsf(v11) + 1.0) * 0.01);
        if (!v28 && kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"you are requesting linear interpolation, but the total weight is not 1: ", 72);
          std::ostream::operator<<();
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
          uint64_t v27 = *(void *)(a1 + 8);
          uint64_t v10 = *(void *)(a1 + 16);
        }
      }
      while (v27 != v10)
      {
        *(float *)(v27 + 16) = -logf(*(float *)(v27 + 16));
        v27 += 24;
      }
    }
    *(_DWORD *)(a1 + 108) = 0;
    float v38 = &v35;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(v33, &v35, (uint64_t)&std::piecewise_construct, (uint64_t *)&v38)+ 10) = 0;
    unint64_t v30 = *(void *)(a1 + 88);
    if (v30 >= *(void *)(a1 + 96))
    {
      uint64_t v31 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v32, (uint64_t)&v35);
    }
    else
    {
      std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v32, (uint64_t)&v35);
      uint64_t v31 = v30 + 24;
    }
    *(void *)(a1 + 88) = v31;
    *(_DWORD *)(a1 + 104) = 1;
  }
  if (v35)
  {
    uint64_t v36 = v35;
    operator delete(v35);
  }
  return a1;
}

void sub_1B1C4BD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void **a11)
{
  int v13 = *(void **)(v11 - 144);
  if (v13)
  {
    *(void *)(v11 - 136) = v13;
    operator delete(v13);
  }
  a11 = a9;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a11);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(a10);
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Start(uint64_t a1)
{
  return *(unsigned int *)(a1 + 108);
}

float fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Final(uint64_t a1, int a2, void *a3)
{
  if (*a3)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN3fst13InterpArcInfoENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__p);
    uint64_t v7 = (char *)__p;
    uint64_t v6 = (std::__shared_weak_count *)v33;
    if (v33) {
      atomic_fetch_add_explicit(v33 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = (std::__shared_weak_count *)a3[1];
    *a3 = v7;
    a3[1] = v6;
    unint64_t v30 = v6;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  else
  {
    unint64_t v30 = 0;
    uint64_t v7 = 0;
  }
  long long v9 = (unsigned int **)(*(void *)(a1 + 80) + 24 * a2);
  std::vector<fst::TropicalWeightTpl<float>>::vector(&__p, v9[1] - *v9);
  uint64_t v10 = *v9;
  if (*v9 != v9[1])
  {
    uint64_t v11 = 0;
    float v12 = (void **)(v7 + 32);
    do
    {
      if (*a3) {
        _ZNSt3__115allocate_sharedB8ne180100IN3fst7ArcInfoENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v31);
      }
      else {
        long long v31 = 0uLL;
      }
      uint64_t v13 = *(void *)(*(void *)(a1 + 8) + 24 * v11);
      float v14 = (*(float (**)(uint64_t, void, long long *))(*(void *)v13 + 8))(v13, *v10, &v31);
      *((float *)__p + v11) = v14;
      if (*a3)
      {
        std::vector<std::shared_ptr<fst::ArcInfo>>::push_back[abi:ne180100]((uint64_t *)v7 + 1, &v31);
        int v15 = *((_DWORD *)__p + v11);
        uint64_t v17 = (char *)*((void *)v7 + 5);
        unint64_t v16 = *((void *)v7 + 6);
        if ((unint64_t)v17 >= v16)
        {
          unint64_t v19 = (char *)*v12;
          uint64_t v20 = (v17 - (unsigned char *)*v12) >> 2;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v22 = v16 - (void)v19;
          if (v22 >> 1 > v21) {
            unint64_t v21 = v22 >> 1;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v21;
          }
          if (v23)
          {
            int v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v7 + 48), v23);
            unint64_t v19 = (char *)*((void *)v7 + 4);
            uint64_t v17 = (char *)*((void *)v7 + 5);
          }
          else
          {
            int v24 = 0;
          }
          unint64_t v25 = &v24[4 * v20];
          *(_DWORD *)unint64_t v25 = v15;
          uint64_t v18 = v25 + 4;
          while (v17 != v19)
          {
            int v26 = *((_DWORD *)v17 - 1);
            v17 -= 4;
            *((_DWORD *)v25 - 1) = v26;
            v25 -= 4;
          }
          *((void *)v7 + 4) = v25;
          *((void *)v7 + 5) = v18;
          *((void *)v7 + 6) = &v24[4 * v23];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v17 = v15;
          uint64_t v18 = v17 + 4;
        }
        *((void *)v7 + 5) = v18;
      }
      if (*((void *)&v31 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
      }
      ++v10;
      ++v11;
    }
    while (v10 != v9[1]);
  }
  float InterpolatedWeight = fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetInterpolatedWeight(a1, (float **)&__p);
  float v28 = InterpolatedWeight;
  if (*a3)
  {
    *((void *)v7 + 7) = 0;
    *((float *)v7 + 16) = InterpolatedWeight;
  }
  if (__p)
  {
    uint64_t v33 = (atomic_ullong *)__p;
    operator delete(__p);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  return v28;
}

void sub_1B1C4C02C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetArc(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (*a5)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN3fst13InterpArcInfoENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__p);
    long long v9 = (char *)__p;
    uint64_t v10 = v95;
    if (v95) {
      atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = (std::__shared_weak_count *)a5[1];
    *a5 = v9;
    a5[1] = v10;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  else
  {
    uint64_t v10 = 0;
    long long v9 = 0;
  }
  uint64_t v12 = *(void *)(a1 + 80);
  unint64_t v102 = 0;
  uint64_t v103 = 0;
  unint64_t v104 = 0;
  long long v99 = 0;
  int v100 = 0;
  int v101 = 0;
  uint64_t v13 = *(void **)(a1 + 8);
  if (v13 == *(void **)(a1 + 16))
  {
    uint64_t v85 = 0;
    goto LABEL_133;
  }
  float v88 = v10;
  char v92 = 0;
  uint64_t v14 = 0;
  int v87 = (uint64_t *)(a1 + 80);
  int v15 = (uint64_t *)(v12 + 24 * a2);
  uint64_t v93 = (uint64_t *)(v9 + 8);
  BOOL v91 = (void **)(v9 + 32);
  uint64_t v90 = (uint64_t)(v9 + 48);
  int v16 = -1;
  do
  {
    if (*a5) {
      _ZNSt3__115allocate_sharedB8ne180100IN3fst7ArcInfoENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v98);
    }
    else {
      long long v98 = 0uLL;
    }
    char v17 = (*(uint64_t (**)(void, void, uint64_t, void **, long long *))(*(void *)*v13 + 24))(*v13, *(unsigned int *)(*v15 + 4 * v14), a3, &__p, &v98);
    uint64_t v18 = v100;
    if (v17)
    {
      if (v100 >= v101)
      {
        uint64_t v21 = (v100 - (unsigned char *)v99) >> 2;
        if ((unint64_t)(v21 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v22 = (v101 - (unsigned char *)v99) >> 1;
        if (v22 <= v21 + 1) {
          unint64_t v22 = v21 + 1;
        }
        if ((unint64_t)(v101 - (unsigned char *)v99) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v22;
        }
        if (v23) {
          int v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v101, v23);
        }
        else {
          int v24 = 0;
        }
        unsigned int v29 = &v24[4 * v21];
        *(_DWORD *)unsigned int v29 = v95;
        unint64_t v19 = v29 + 4;
        long long v31 = (char *)v99;
        unint64_t v30 = v100;
        if (v100 != v99)
        {
          do
          {
            int v32 = *((_DWORD *)v30 - 1);
            v30 -= 4;
            *((_DWORD *)v29 - 1) = v32;
            v29 -= 4;
          }
          while (v30 != v31);
          unint64_t v30 = (char *)v99;
        }
        long long v99 = v29;
        int v100 = v19;
        int v101 = &v24[4 * v23];
        if (v30) {
          operator delete(v30);
        }
      }
      else
      {
        *(_DWORD *)int v100 = v95;
        unint64_t v19 = v18 + 4;
      }
      int v100 = v19;
      if (v16 == -1) {
        int v16 = HIDWORD(__p);
      }
      uint64_t v33 = v103;
      if ((unint64_t)v103 >= v104)
      {
        unint64_t v35 = v102;
        uint64_t v36 = (v103 - v102) >> 2;
        unint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62) {
          goto LABEL_140;
        }
        uint64_t v38 = v104 - (void)v102;
        if ((uint64_t)(v104 - (void)v102) >> 1 > v37) {
          unint64_t v37 = v38 >> 1;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v37;
        }
        if (v39)
        {
          float v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v104, v39);
          unint64_t v35 = v102;
          uint64_t v33 = v103;
        }
        else
        {
          float v40 = 0;
        }
        int v54 = &v40[4 * v36];
        *(_DWORD *)int v54 = HIDWORD(v95);
        uint64_t v34 = v54 + 4;
        while (v33 != v35)
        {
          int v55 = *((_DWORD *)v33 - 1);
          v33 -= 4;
          *((_DWORD *)v54 - 1) = v55;
          v54 -= 4;
        }
        unint64_t v102 = v54;
        uint64_t v103 = v34;
        unint64_t v104 = (unint64_t)&v40[4 * v39];
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v103 = HIDWORD(v95);
        uint64_t v34 = v33 + 4;
      }
      uint64_t v103 = v34;
      if (!*a5)
      {
        char v92 = 1;
        goto LABEL_117;
      }
      std::vector<std::shared_ptr<fst::ArcInfo>>::push_back[abi:ne180100](v93, &v98);
      int v56 = (int)v95;
      uint64_t v58 = (char *)*((void *)v9 + 5);
      unint64_t v57 = *((void *)v9 + 6);
      if ((unint64_t)v58 < v57)
      {
        *(_DWORD *)uint64_t v58 = v95;
        unint64_t v59 = v58 + 4;
        char v92 = 1;
        goto LABEL_94;
      }
      uint64_t v60 = (char *)*v91;
      uint64_t v61 = (v58 - (unsigned char *)*v91) >> 2;
      unint64_t v62 = v61 + 1;
      if ((unint64_t)(v61 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v63 = v57 - (void)v60;
      if (v63 >> 1 > v62) {
        unint64_t v62 = v63 >> 1;
      }
      if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v64 = v62;
      }
      if (v64)
      {
        int v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v90, v64);
        uint64_t v60 = (char *)*((void *)v9 + 4);
        uint64_t v58 = (char *)*((void *)v9 + 5);
      }
      else
      {
        int v65 = 0;
      }
      uint64_t v77 = &v65[4 * v61];
      *(_DWORD *)uint64_t v77 = v56;
      float v70 = v77 + 4;
      while (v58 != v60)
      {
        int v78 = *((_DWORD *)v58 - 1);
        v58 -= 4;
        *((_DWORD *)v77 - 1) = v78;
        v77 -= 4;
      }
      *((void *)v9 + 4) = v77;
      *((void *)v9 + 5) = v70;
      *((void *)v9 + 6) = &v65[4 * v64];
      if (v60) {
        operator delete(v60);
      }
      char v92 = 1;
LABEL_116:
      *((void *)v9 + 5) = v70;
      goto LABEL_117;
    }
    if (v100 >= v101)
    {
      uint64_t v25 = (v100 - (unsigned char *)v99) >> 2;
      if ((unint64_t)(v25 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v26 = (v101 - (unsigned char *)v99) >> 1;
      if (v26 <= v25 + 1) {
        unint64_t v26 = v25 + 1;
      }
      if ((unint64_t)(v101 - (unsigned char *)v99) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v26;
      }
      if (v27) {
        float v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v101, v27);
      }
      else {
        float v28 = 0;
      }
      BOOL v41 = &v28[4 * v25];
      *(_DWORD *)BOOL v41 = 2139095040;
      uint64_t v20 = v41 + 4;
      int v43 = (char *)v99;
      float v42 = v100;
      if (v100 != v99)
      {
        do
        {
          int v44 = *((_DWORD *)v42 - 1);
          v42 -= 4;
          *((_DWORD *)v41 - 1) = v44;
          v41 -= 4;
        }
        while (v42 != v43);
        float v42 = (char *)v99;
      }
      long long v99 = v41;
      int v100 = v20;
      int v101 = &v28[4 * v27];
      if (v42) {
        operator delete(v42);
      }
    }
    else
    {
      *(_DWORD *)int v100 = 2139095040;
      uint64_t v20 = v18 + 4;
    }
    int v100 = v20;
    uint64_t v45 = *v15;
    uint64_t v46 = v103;
    if ((unint64_t)v103 >= v104)
    {
      float v48 = v102;
      uint64_t v49 = (v103 - v102) >> 2;
      unint64_t v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 62) {
LABEL_140:
      }
        std::vector<int>::__throw_length_error[abi:ne180100]();
      uint64_t v51 = v104 - (void)v102;
      if ((uint64_t)(v104 - (void)v102) >> 1 > v50) {
        unint64_t v50 = v51 >> 1;
      }
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v52 = v50;
      }
      if (v52)
      {
        int v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v104, v52);
        float v48 = v102;
        uint64_t v46 = v103;
      }
      else
      {
        int v53 = 0;
      }
      float v66 = &v53[4 * v49];
      *(_DWORD *)float v66 = *(_DWORD *)(v45 + 4 * v14);
      unint64_t v47 = v66 + 4;
      while (v46 != v48)
      {
        int v67 = *((_DWORD *)v46 - 1);
        v46 -= 4;
        *((_DWORD *)v66 - 1) = v67;
        v66 -= 4;
      }
      unint64_t v102 = v66;
      uint64_t v103 = v47;
      unint64_t v104 = (unint64_t)&v53[4 * v52];
      if (v48) {
        operator delete(v48);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v103 = *(_DWORD *)(v45 + 4 * v14);
      unint64_t v47 = v46 + 4;
    }
    uint64_t v103 = v47;
    if (*a5)
    {
      std::vector<std::shared_ptr<fst::ArcInfo>>::push_back[abi:ne180100](v93, &v98);
      float v69 = (char *)*((void *)v9 + 5);
      unint64_t v68 = *((void *)v9 + 6);
      if ((unint64_t)v69 >= v68)
      {
        float v71 = (char *)*v91;
        uint64_t v72 = (v69 - (unsigned char *)*v91) >> 2;
        unint64_t v73 = v72 + 1;
        if ((unint64_t)(v72 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v74 = v68 - (void)v71;
        if (v74 >> 1 > v73) {
          unint64_t v73 = v74 >> 1;
        }
        if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v75 = v73;
        }
        if (v75)
        {
          unint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v90, v75);
          float v71 = (char *)*((void *)v9 + 4);
          float v69 = (char *)*((void *)v9 + 5);
        }
        else
        {
          unint64_t v76 = 0;
        }
        uint64_t v79 = &v76[4 * v72];
        *(_DWORD *)uint64_t v79 = 2139095040;
        float v70 = v79 + 4;
        while (v69 != v71)
        {
          int v80 = *((_DWORD *)v69 - 1);
          v69 -= 4;
          *((_DWORD *)v79 - 1) = v80;
          v79 -= 4;
        }
        *((void *)v9 + 4) = v79;
        *((void *)v9 + 5) = v70;
        *((void *)v9 + 6) = &v76[4 * v75];
        if (v71) {
          operator delete(v71);
        }
      }
      else
      {
        *(_DWORD *)float v69 = 2139095040;
        unint64_t v59 = v69 + 4;
LABEL_94:
        float v70 = v59;
      }
      goto LABEL_116;
    }
LABEL_117:
    if (*((void *)&v98 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v98 + 1));
    }
    v13 += 3;
    ++v14;
  }
  while (v13 != *(void **)(a1 + 16));
  if (v92)
  {
    uint64_t v10 = v88;
    *(_DWORD *)a4 = a3;
    *(_DWORD *)(a4 + 4) = v16;
    float InterpolatedWeight = fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetInterpolatedWeight(a1, (float **)&v99);
    *(float *)(a4 + 8) = InterpolatedWeight;
    if (*a5)
    {
      *((void *)v9 + 7) = v16;
      *((float *)v9 + 16) = InterpolatedWeight;
    }
    std::vector<int> __p = 0;
    float v95 = 0;
    uint64_t v96 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v102, (uint64_t)v103, (v103 - v102) >> 2);
    int v97 = *(_DWORD *)(a1 + 104);
    *(_DWORD *)(a4 + 12) = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::pair<std::vector<int>,int> &>(a1 + 40, (int **)&__p, (uint64_t)&__p)+ 10);
    if (v82)
    {
      ++*(_DWORD *)(a1 + 104);
      unint64_t v83 = *(void *)(a1 + 88);
      if (v83 >= *(void *)(a1 + 96))
      {
        uint64_t v84 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v87, (uint64_t)&v102);
      }
      else
      {
        std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v87, (uint64_t)&v102);
        uint64_t v84 = v83 + 24;
      }
      *(void *)(a1 + 88) = v84;
    }
    if (__p)
    {
      float v95 = (std::__shared_weak_count *)__p;
      operator delete(__p);
    }
    uint64_t v85 = 1;
  }
  else
  {
    uint64_t v85 = 0;
    uint64_t v10 = v88;
  }
LABEL_133:
  if (v99)
  {
    int v100 = (char *)v99;
    operator delete(v99);
  }
  if (v102)
  {
    uint64_t v103 = v102;
    operator delete(v102);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return v85;
}

void sub_1B1C4C7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  float v28 = *(void **)(v26 - 136);
  if (v28)
  {
    *(void *)(v26 - 128) = v28;
    operator delete(v28);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~InterpolateDeterministicOnDemandFst(uint64_t a1)
{
  fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~InterpolateDeterministicOnDemandFst(a1);
  JUMPOUT(0x1B3EA8670);
}

float fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FinalEos(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = v3 + 24 * a2;
  uint64_t v5 = 24 * a2;
  uint64_t v7 = *(void *)(v4 + 8);
  uint64_t v6 = (void *)(v4 + 8);
  std::vector<fst::TropicalWeightTpl<float>>::vector(__p, (v7 - *(void *)(v3 + v5)) >> 2);
  uint64_t v8 = *(void *)(v3 + v5);
  if (v8 != *v6)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    do
    {
      float v11 = (*(float (**)(void, void))(**(void **)(*(void *)(a1 + 8) + v10) + 56))(*(void *)(*(void *)(a1 + 8) + v10), *(unsigned int *)(v8 + v9));
      *(float *)((char *)__p[0] + v9) = v11;
      v10 += 24;
      v9 += 4;
    }
    while (v8 + v9 != *v6);
  }
  float InterpolatedWeight = fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetInterpolatedWeight(a1, (float **)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return InterpolatedWeight;
}

void sub_1B1C4C96C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::__push_back_slow_path<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  float v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  void v15[3] = &v10[24 * v9];
  *(void *)float v11 = *(void *)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  *((void *)v11 + 1) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)&v10[24 * v4 + 16] = *(_DWORD *)(a2 + 16);
  v15[2] = v11 + 24;
  std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer(v15);
  return v13;
}

void sub_1B1C4CAA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<fst::ArcInfo>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, v13);
    int v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    uint64_t v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)int v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<fst::ArcInfo>>::__swap_out_circular_buffer(a1, v18);
    unint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1B1C4CBBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

float fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetInterpolatedWeight(uint64_t a1, float **a2)
{
  int v4 = *(_DWORD *)(a1 + 32);
  if (!v4)
  {
    std::vector<int> __p = 0;
    uint64_t v38 = 0;
    unint64_t v39 = 0;
    uint64_t v12 = *a2;
    unint64_t v11 = a2[1];
    if (*a2 == v11)
    {
      uint64_t v25 = 0;
      unint64_t v13 = 0;
    }
    else
    {
      unint64_t v13 = 0;
      uint64_t v14 = 0;
      do
      {
        float v41 = 0.0;
        float v41 = *v12;
        int v40 = 2139095040;
        if (v41 != INFINITY)
        {
          float v15 = -(float)(*(float *)(*(void *)(a1 + 8) + 24 * v14 + 16) + *v12);
          if (v13 >= v39)
          {
            long long v17 = __p;
            uint64_t v18 = v13 - __p;
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v20 = (char *)v39 - (char *)__p;
            if (((char *)v39 - (char *)__p) >> 1 > v19) {
              unint64_t v19 = v20 >> 1;
            }
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v19;
            }
            if (v21)
            {
              unint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v39, v21);
              long long v17 = __p;
              unint64_t v13 = v38;
            }
            else
            {
              unint64_t v22 = 0;
            }
            unint64_t v23 = (float *)&v22[4 * v18];
            float *v23 = v15;
            uint64_t v16 = v23 + 1;
            while (v13 != v17)
            {
              int v24 = *((_DWORD *)v13-- - 1);
              *((_DWORD *)v23-- - 1) = v24;
            }
            std::vector<int> __p = v23;
            unint64_t v39 = (float *)&v22[4 * v21];
            if (v17) {
              operator delete(v17);
            }
          }
          else
          {
            float *v13 = v15;
            uint64_t v16 = v13 + 1;
          }
          uint64_t v38 = v16;
          unint64_t v11 = a2[1];
          unint64_t v13 = v16;
        }
        ++v12;
        ++v14;
      }
      while (v12 != v11);
      uint64_t v25 = __p;
    }
    uint64_t v26 = v13 - v25;
    if (v26)
    {
      if (v26 == 1)
      {
        float v5 = -*v25;
        goto LABEL_49;
      }
      float v28 = v25 + 1;
      float v29 = *v25;
      while (v28 != v13)
      {
        float v30 = *v28++;
        float v31 = v30;
        if (v30 > v29) {
          float v29 = v31;
        }
      }
      float v32 = 0.0;
      if (v25 != v13)
      {
        uint64_t v33 = v25;
        do
        {
          float v34 = *v33 - v29;
          if (v34 >= -15.942) {
            float v32 = v32 + expf(v34);
          }
          ++v33;
        }
        while (v33 != v13);
      }
      float v27 = v29 + logf(v32);
    }
    else
    {
      float v27 = -INFINITY;
    }
    float v5 = -v27;
    if (!v25) {
      return v5;
    }
LABEL_49:
    operator delete(v25);
    return v5;
  }
  float v5 = 0.0;
  if (v4 == 1)
  {
    unint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    if (*a2 == v7) {
      return INFINITY;
    }
    char v8 = 1;
    uint64_t v9 = 16;
    do
    {
      float v10 = *v6;
      float __pa = *v6;
      float v41 = INFINITY;
      if (__pa != INFINITY)
      {
        char v8 = 0;
        float v5 = v5 + (float)(*(float *)(*(void *)(a1 + 8) + v9) * v10);
      }
      ++v6;
      v9 += 24;
    }
    while (v6 != v7);
    if (v8) {
      return INFINITY;
    }
  }
  return v5;
}

void sub_1B1C4CE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN3fst13InterpArcInfoENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x60uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN3fst13InterpArcInfoENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C4CEF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN3fst13InterpArcInfoENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E228;
  fst::InterpArcInfo::InterpArcInfo((fst::InterpArcInfo *)(a1 + 3));
  return a1;
}

void sub_1B1C4CF4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::InterpArcInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E228;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::InterpArcInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E228;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::InterpArcInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::vector<fst::TropicalWeightTpl<float>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    a1[1] += 4 * a2;
  }
  return a1;
}

void sub_1B1C4D044(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN3fst7ArcInfoENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x20uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN3fst7ArcInfoENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C4D098(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN3fst7ArcInfoENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E538;
  fst::ArcInfo::ArcInfo(a1 + 3);
  return a1;
}

void sub_1B1C4D0F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ArcInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E538;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::ArcInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E538;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::ArcInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::vector<std::shared_ptr<fst::ArcInfo>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<fst::ArcInfo>>,std::reverse_iterator<std::shared_ptr<fst::ArcInfo>*>,std::reverse_iterator<std::shared_ptr<fst::ArcInfo>*>,std::reverse_iterator<std::shared_ptr<fst::ArcInfo>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<fst::ArcInfo>>,std::reverse_iterator<std::shared_ptr<fst::ArcInfo>*>,std::reverse_iterator<std::shared_ptr<fst::ArcInfo>*>,std::reverse_iterator<std::shared_ptr<fst::ArcInfo>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<fst::ArcInfo>>,std::reverse_iterator<std::shared_ptr<fst::ArcInfo>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<fst::ArcInfo>>,std::reverse_iterator<std::shared_ptr<fst::ArcInfo>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~InterpolateDeterministicOnDemandFst(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3F908;
  uint64_t v2 = (void **)(a1 + 8);
  int v4 = (void **)(a1 + 80);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(a1 + 40);
  int v4 = v2;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void *std::allocate_shared[abi:ne180100]<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::shared_ptr<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> const&,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x38uLL);
  uint64_t result = std::__shared_ptr_emplace<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> const&,std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B1C4D3A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> const&,std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E458;
  std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::construct[abi:ne180100]<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> const&>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1B1C4D41C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E458;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))();
}

void std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::construct[abi:ne180100]<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> const&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v5 = *a3;
  uint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::LeftContextDeterministicOnDemandFst(a2, (uint64_t)&v5, a4);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1B1C4D524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::LeftContextDeterministicOnDemandFst(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_1F0A3F958;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = (***(uint64_t (****)(void))(a1 + 8))(*(void *)(a1 + 8));
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  if (*a3 != v6)
  {
    do
    {
      if ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8)))
      {
        int v7 = v10;
      }
      else
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Invalid word symbol, clipping left context", 42);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v9);
        }
        int v7 = (***(uint64_t (****)(void))(a1 + 8))(*(void *)(a1 + 8));
      }
      *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = v7;
      v5 += 4;
    }
    while (v5 != v6);
  }
  return a1;
}

void sub_1B1C4D690(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Final(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8))();
}

uint64_t fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetArc(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

void *fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~LeftContextDeterministicOnDemandFst(void *a1)
{
  *a1 = &unk_1F0A3F958;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~LeftContextDeterministicOnDemandFst(void *a1)
{
  *a1 = &unk_1F0A3F958;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1B3EA8670);
}

void *std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1C4D838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  int v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *int v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1C4D988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  int v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *int v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

BOOL quasar::compute(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  v87[24] = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v87, (clockid_t)a2);
  uint64_t v88 = 0;
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = (char *)operator new(0x30uLL);
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = 0;
    *((void *)v11 + 3) = 0;
    *(void *)unint64_t v11 = &unk_1F0A62AC8;
    *((void *)v11 + 4) = 0;
    *((void *)v11 + 5) = 0;
    uint64_t v85 = (uint64_t *)(v11 + 24);
    uint64_t v86 = (std::__shared_weak_count *)v11;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 1, 1uLL, memory_order_relaxed);
    char v12 = kaldi::RescoreCompactLatticeWithDeterministicOnDemandFst(v10, a6, a1, &v85, 0);
    if (v86) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v86);
    }
    if (v12)
    {
      if (quasar::gLogLevel >= 6)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v64);
        kaldi::WriteCompactLattice(&v64, 0, (uint64_t)a1);
        if (quasar::gLogLevel >= 6)
        {
          long long v83 = 0u;
          long long v84 = 0u;
          long long v81 = 0u;
          long long v82 = 0u;
          long long v79 = 0u;
          long long v80 = 0u;
          long long v77 = 0u;
          long long v78 = 0u;
          long long v75 = 0u;
          long long v76 = 0u;
          long long v73 = 0u;
          long long v74 = 0u;
          *(_OWORD *)uint64_t v72 = 0u;
          memset(v71, 0, sizeof(v71));
          *(_OWORD *)float v70 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v70);
          std::stringbuf::str();
          if ((v63 & 0x80u) == 0) {
            char v13 = __p;
          }
          else {
            char v13 = (void **)__p[0];
          }
          if ((v63 & 0x80u) == 0) {
            uint64_t v14 = v63;
          }
          else {
            uint64_t v14 = (uint64_t)__p[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v13, v14);
          if ((char)v63 < 0) {
            operator delete(__p[0]);
          }
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v70);
        }
        unint64_t v64 = (void *)*MEMORY[0x1E4FBA418];
        *(void **)((char *)&v64 + *((void *)v64 - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
        int v65 = (void *)(MEMORY[0x1E4FBA470] + 16);
        if (v68 < 0) {
          operator delete(v67);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1B3EA8520](&v69);
      }
      float TotalCostFromLinearCompactLattice = kaldi::quasar::GetTotalCostFromLinearCompactLattice(a1, (unsigned char *)(a5 + 72));
      float v16 = quasar::FstLmScorer::convertLmCost(*(_DWORD *)a5, TotalCostFromLinearCompactLattice);
      if (quasar::gLogLevel >= 6)
      {
        long long v83 = 0u;
        long long v84 = 0u;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        long long v73 = 0u;
        long long v74 = 0u;
        *(_OWORD *)uint64_t v72 = 0u;
        memset(v71, 0, sizeof(v71));
        *(_OWORD *)float v70 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v70);
        long long v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"LM score (type=", 15);
        quasar::getLmScoreType(*(_DWORD *)a5, &v64);
        if ((v66 & 0x80u) == 0) {
          uint64_t v18 = &v64;
        }
        else {
          uint64_t v18 = v64;
        }
        if ((v66 & 0x80u) == 0) {
          uint64_t v19 = v66;
        }
        else {
          uint64_t v19 = (uint64_t)v65;
        }
        uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)") = ", 4);
        std::ostream::operator<<();
        if ((char)v66 < 0) {
          operator delete(v64);
        }
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v70);
      }
      uint64_t v22 = *((void *)v11 + 3);
      uint64_t v21 = *((void *)v11 + 4);
      if (v22 != v21)
      {
        uint64_t v60 = *((void *)v11 + 4);
        do
        {
          if (*(void *)v22)
          {
            if (v23)
            {
              int v24 = (float **)v23;
              uint64_t v25 = *(std::__shared_weak_count **)(v22 + 8);
              if (v25) {
                atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v61 = v25;
              uint64_t v26 = *(void *)(a5 + 64);
              uint64_t v27 = *((void *)v23 + 7);
              char v29 = v26 != -1 && v27 == v26;
              BOOL v30 = (*((_DWORD *)v23 + 16) & 0x7FFFFFFFu) < 0x7F800000;
              float v31 = quasar::FstLmScorer::convertLmCost(*(_DWORD *)a5, *((float *)v23 + 16));
              quasar::FstLmScorer::convertLmCost(v24 + 4, *(_DWORD *)a5, (float **)&v64);
              quasar::TokenLmInfo::TokenLmInfo((uint64_t)v70, v27, v29, v30, (uint64_t)&v64, v31);
              unint64_t v32 = *(void *)(a5 + 16);
              if (v32 >= *(void *)(a5 + 24))
              {
                uint64_t v35 = std::vector<quasar::TokenLmInfo>::__push_back_slow_path<quasar::TokenLmInfo>((uint64_t *)(a5 + 8), (uint64_t)v70);
                uint64_t v36 = v72[0];
                *(void *)(a5 + 16) = v35;
                if (v36)
                {
                  v72[1] = v36;
                  operator delete(v36);
                }
              }
              else
              {
                long long v33 = *(_OWORD *)v70;
                *(void *)(v32 + 16) = *(void *)&v71[0];
                *(_OWORD *)unint64_t v32 = v33;
                v70[1] = 0;
                *(void *)&v71[0] = 0;
                v70[0] = 0;
                uint64_t v34 = *(void *)((char *)v71 + 14);
                *(void *)(v32 + ++*(_DWORD *)(result + 24) = *((void *)&v71[0] + 1);
                *(void *)(v32 + 30) = v34;
                *(void *)(v32 + 48) = 0;
                *(void *)(v32 + 56) = 0;
                *(void *)(v32 + 40) = 0;
                *(_OWORD *)(v32 + 40) = *(_OWORD *)((char *)&v71[1] + 8);
                *(void *)(v32 + 56) = *((void *)&v71[2] + 1);
                *(void *)(v32 + 64) = 0;
                memset((char *)&v71[1] + 8, 0, 24);
                *(void *)(v32 + 72) = 0;
                *(void *)(v32 + 80) = 0;
                *(_OWORD *)(v32 + 64) = *(_OWORD *)v72;
                *(void *)(v32 + 80) = v73;
                v72[0] = 0;
                v72[1] = 0;
                *(void *)&long long v73 = 0;
                *(void *)(a5 + 16) = v32 + 88;
              }
              if (*((void *)&v71[1] + 1))
              {
                *(void *)&v71[2] = *((void *)&v71[1] + 1);
                operator delete(*((void **)&v71[1] + 1));
              }
              if (SBYTE7(v71[0]) < 0) {
                operator delete(v70[0]);
              }
              if (v64)
              {
                int v65 = v64;
                operator delete(v64);
              }
              if (v30) {
                *(float *)(a5 + 32) = *((float *)v24 + 16) + *(float *)(a5 + 32);
              }
              unint64_t v37 = v24[1];
              uint64_t v38 = v24[2];
              while (v37 != v38)
              {
                if (*(void *)v37)
                {
                  if (v39)
                  {
                    int v40 = v39;
                    float v41 = (std::__shared_weak_count *)*((void *)v37 + 1);
                    if (v41) {
                      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    uint64_t v42 = *(void *)(a5 + 16);
                    int v43 = *(char **)(v42 - 16);
                    unint64_t v44 = *(void *)(v42 - 8);
                    if ((unint64_t)v43 >= v44)
                    {
                      uint64_t v46 = *(char **)(v42 - 24);
                      uint64_t v47 = (v43 - v46) >> 2;
                      if ((unint64_t)(v47 + 1) >> 62) {
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      }
                      unint64_t v48 = v44 - (void)v46;
                      unint64_t v49 = (uint64_t)(v44 - (void)v46) >> 1;
                      if (v49 <= v47 + 1) {
                        unint64_t v49 = v47 + 1;
                      }
                      if (v48 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v50 = v49;
                      }
                      if (v50)
                      {
                        uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v42 - 8, v50);
                        uint64_t v46 = *(char **)(v42 - 24);
                        int v43 = *(char **)(v42 - 16);
                      }
                      else
                      {
                        uint64_t v51 = 0;
                      }
                      unint64_t v52 = &v51[4 * v47];
                      *(_DWORD *)unint64_t v52 = v40[2];
                      uint64_t v45 = v52 + 4;
                      while (v43 != v46)
                      {
                        int v53 = *((_DWORD *)v43 - 1);
                        v43 -= 4;
                        *((_DWORD *)v52 - 1) = v53;
                        v52 -= 4;
                      }
                      *(void *)(v42 - ++*(_DWORD *)(result + 24) = v52;
                      *(void *)(v42 - 16) = v45;
                      *(void *)(v42 - 8) = &v51[4 * v50];
                      if (v46) {
                        operator delete(v46);
                      }
                    }
                    else
                    {
                      *(_DWORD *)int v43 = v39[2];
                      uint64_t v45 = v43 + 4;
                    }
                    *(void *)(v42 - 16) = v45;
                    if (v41) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
                    }
                  }
                }
                v37 += 4;
              }
              uint64_t v21 = v60;
              if (v61) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v61);
              }
            }
          }
          v22 += 16;
        }
        while (v22 != v21);
      }
      float v54 = *(float *)(a5 + 32);
      *(unsigned char *)(a5 + 36) = (LODWORD(v54) & 0x7FFFFFFFu) < 0x7F800000;
      float v55 = quasar::FstLmScorer::convertLmCost(*(_DWORD *)a5, v54);
      *(float *)(a5 + 32) = v55;
      BOOL v56 = v16 == v55;
      if (v16 == v55 || quasar::gLogLevel < 4) {
        goto LABEL_90;
      }
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      *(_OWORD *)uint64_t v72 = 0u;
      memset(v71, 0, sizeof(v71));
      *(_OWORD *)float v70 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"lmScore=", 8);
      uint64_t v58 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" doesn't match expected score=", 30);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v70);
    }
    else if (quasar::gLogLevel >= 2)
    {
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      *(_OWORD *)uint64_t v72 = 0u;
      memset(v71, 0, sizeof(v71));
      *(_OWORD *)float v70 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Rescoring failed", 16);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v70);
    }
    BOOL v56 = 0;
LABEL_90:
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v11);
    return v56;
  }
  return 0;
}

void sub_1B1C4E238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a59);
  std::ostringstream::~ostringstream((uint64_t)&a23);
  std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<fst::ArcInfo>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62AC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<fst::ArcInfo>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62AC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<fst::ArcInfo>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void quasar::TokenLmInfo::~TokenLmInfo(quasar::TokenLmInfo *this)
{
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 5);
  if (v3)
  {
    *((void *)this + 6) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t std::vector<quasar::TokenLmInfo>::__push_back_slow_path<quasar::TokenLmInfo>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1745D1745D1745DLL) {
    unint64_t v9 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v17[4] = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>>(v7, v9);
  unint64_t v11 = &v10[88 * v4];
  v17[0] = v10;
  v17[1] = v11;
  float v17[3] = &v10[88 * v12];
  uint64_t v13 = *(void *)(a2 + 16);
  *(_OWORD *)unint64_t v11 = *(_OWORD *)a2;
  *((void *)v11 + 2) = v13;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v14 = *(void *)(a2 + 30);
  *((void *)v11 + 3) = *(void *)(a2 + 24);
  *(void *)(v11 + 30) = v14;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 5) = 0;
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a2 + 40);
  *((void *)v11 + 7) = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *((void *)v11 + 9) = 0;
  *((void *)v11 + 10) = 0;
  *((void *)v11 + 8) = 0;
  *((_OWORD *)v11 + 4) = *(_OWORD *)(a2 + 64);
  *((void *)v11 + 10) = *(void *)(a2 + 80);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  v17[2] = v11 + 88;
  std::vector<quasar::TokenLmInfo>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<quasar::TokenLmInfo>::~__split_buffer(v17);
  return v15;
}

void sub_1B1C4E5B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TokenLmInfo>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::TokenLmInfo>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TokenLmInfo>,std::reverse_iterator<quasar::TokenLmInfo*>,std::reverse_iterator<quasar::TokenLmInfo*>,std::reverse_iterator<quasar::TokenLmInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TokenLmInfo>,std::reverse_iterator<quasar::TokenLmInfo*>,std::reverse_iterator<quasar::TokenLmInfo*>,std::reverse_iterator<quasar::TokenLmInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 88);
      *(void *)(v7 - 72) = *(void *)(a3 - 72);
      *(_OWORD *)(v7 - 88) = v8;
      *(void *)(a3 - 80) = 0;
      *(void *)(a3 - 72) = 0;
      *(void *)(a3 - 88) = 0;
      uint64_t v9 = *(void *)(a3 - 64);
      *(void *)(v7 - 58) = *(void *)(a3 - 58);
      *(void *)(v7 - 64) = v9;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 48) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 - 48);
      *(void *)(v7 - 32) = *(void *)(a3 - 32);
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v15 + 1) - 88;
      *((void *)&v15 + 1) -= 88;
      a3 -= 88;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TokenLmInfo>,std::reverse_iterator<quasar::TokenLmInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TokenLmInfo>,std::reverse_iterator<quasar::TokenLmInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TokenLmInfo>,std::reverse_iterator<quasar::TokenLmInfo*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TokenLmInfo>,std::reverse_iterator<quasar::TokenLmInfo*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::TokenLmInfo>::destroy[abi:ne180100](v3, v1);
      v1 += 88;
    }
    while (v1 != v2);
  }
}

void std::allocator<quasar::TokenLmInfo>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 64);
  if (v3)
  {
    *(void *)(a2 + 72) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a2 + 40);
  if (v4)
  {
    *(void *)(a2 + 48) = v4;
    operator delete(v4);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v5 = *(void **)a2;
    operator delete(v5);
  }
}

void **std::__split_buffer<quasar::TokenLmInfo>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::TokenLmInfo>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 88;
    std::allocator<quasar::TokenLmInfo>::destroy[abi:ne180100](v4, i - 88);
  }
}

uint64_t quasar::TokenLmInfo::TokenLmInfo(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, float a6)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = a2;
  *(float *)(a1 + 32) = a6;
  *(unsigned char *)(a1 + 36) = a3;
  *(unsigned char *)(a1 + 37) = a4;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 40), *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  return a1;
}

void sub_1B1C4E8F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::DecoderPassData::~DecoderPassData(quasar::DecoderPassData *this)
{
  uint64_t v21 = (void **)((char *)this + 824);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v21);
  uint64_t v21 = (void **)((char *)this + 792);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
  uint64_t v21 = (void **)((char *)this + 768);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
  uint64_t v21 = (void **)((char *)this + 744);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 696);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 85);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 655) < 0) {
    operator delete(*((void **)this + 79));
  }
  if (*((char *)this + 631) < 0) {
    operator delete(*((void **)this + 76));
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 75);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v21 = (void **)((char *)this + 568);
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100](&v21);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 68);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 66);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v21 = (void **)((char *)this + 496);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v21);
  uint64_t v21 = (void **)((char *)this + 472);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v21);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 58);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 408);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::__tree<int>::destroy((uint64_t)this + 368, *((void **)this + 47));
  long long v8 = (void *)*((void *)this + 43);
  if (v8)
  {
    *((void *)this + 44) = v8;
    operator delete(v8);
  }
  uint64_t v21 = (void **)((char *)this + 320);
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](&v21);
  uint64_t v9 = (void *)*((void *)this + 37);
  if (v9)
  {
    *((void *)this + 38) = v9;
    operator delete(v9);
  }
  uint64_t v21 = (void **)((char *)this + 272);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v21);
  uint64_t v21 = (void **)((char *)this + 248);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v21);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  char v13 = (void *)*((void *)this + 18);
  if (v13)
  {
    *((void *)this + 19) = v13;
    operator delete(v13);
  }
  long long v14 = (void *)*((void *)this + 15);
  if (v14) {
    operator delete(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  float v16 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  long long v17 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  uint64_t v19 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t v20 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
}

void std::__shared_ptr_emplace<quasar::SymbolTableList>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60090;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SymbolTableList>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60090;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::SymbolTableList>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<quasar::SymbolTableList::Data>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::vector<quasar::SymbolTableList::Data>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<quasar::SymbolTableList::Data>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<quasar::SymbolTableList::Data>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 24);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::vector<quasar::LmInfo>::__push_back_slow_path<quasar::LmInfo const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x276276276276276) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - *a1) >> 3)) >= 0x13B13B13B13B13BLL) {
    unint64_t v6 = 0x276276276276276;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::LmInfo>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  unint64_t v11 = &v7[104 * v3];
  char v13 = &v7[104 * v6];
  std::allocator<quasar::LmInfo>::construct[abi:ne180100]<quasar::LmInfo,quasar::LmInfo const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  uint64_t v12 = v11 + 104;
  std::vector<quasar::LmInfo>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<quasar::LmInfo>::~__split_buffer(&v10);
  return v8;
}

void sub_1B1C4ED64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::LmInfo>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::allocator<quasar::LmInfo>::construct[abi:ne180100]<quasar::LmInfo,quasar::LmInfo const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + ++*(_DWORD *)(result + 24) = 0;
  std::vector<quasar::TokenLmInfo>::__init_with_size[abi:ne180100]<quasar::TokenLmInfo*,quasar::TokenLmInfo*>((std::string *)(a2 + 8), *(long long **)(a3 + 8), *(long long **)(a3 + 16), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 3));
  int v5 = *(_DWORD *)(a3 + 32);
  *(unsigned char *)(a2 + 36) = *(unsigned char *)(a3 + 36);
  *(_DWORD *)(a2 + 32) = v5;
  if (*(char *)(a3 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a2 + 40), *(const std::string::value_type **)(a3 + 40), *(void *)(a3 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 40);
    *(void *)(a2 + 56) = *(void *)(a3 + 56);
    *(_OWORD *)(a2 + 40) = v6;
  }
  uint64_t v7 = *(void *)(a3 + 64);
  char v8 = *(unsigned char *)(a3 + 72);
  *(void *)(a2 + 80) = 0;
  *(unsigned char *)(a2 + 72) = v8;
  *(void *)(a2 + 64) = v7;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(a2 + 80), *(const void **)(a3 + 80), *(void *)(a3 + 88), (uint64_t)(*(void *)(a3 + 88) - *(void *)(a3 + 80)) >> 2);
}

void sub_1B1C4EE54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<quasar::TokenLmInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<quasar::TokenLmInfo>::__init_with_size[abi:ne180100]<quasar::TokenLmInfo*,quasar::TokenLmInfo*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<std::pair<std::string,quasar::PTree>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TokenLmInfo>,quasar::TokenLmInfo*,quasar::TokenLmInfo*,quasar::TokenLmInfo*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B1C4EEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::TokenLmInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TokenLmInfo>,quasar::TokenLmInfo*,quasar::TokenLmInfo*,quasar::TokenLmInfo*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  unint64_t v4 = this;
  unint64_t v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  _OWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    int v7 = a1;
    do
    {
      std::allocator<quasar::TokenLmInfo>::construct[abi:ne180100]<quasar::TokenLmInfo,quasar::TokenLmInfo&>(v7, v4, v6);
      long long v6 = (long long *)((char *)v6 + 88);
      unint64_t v4 = (std::string *)((char *)v12 + 88);
      uint64_t v12 = (std::string *)((char *)v12 + 88);
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TokenLmInfo>,quasar::TokenLmInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B1C4EFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::allocator<quasar::TokenLmInfo>::construct[abi:ne180100]<quasar::TokenLmInfo,quasar::TokenLmInfo&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::string::size_type v6 = *((void *)a3 + 3);
  std::string::size_type v7 = *(void *)((char *)a3 + 30);
  this[1].__r_.__value_.__r.__words[2] = 0;
  *(std::string::size_type *)((char *)this[1].__r_.__value_.__r.__words + 6) = v7;
  this[1].__r_.__value_.__r.__words[0] = v6;
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&this[1].__r_.__value_.__r.__words[2], *((const void **)a3 + 5), *((void *)a3 + 6), (uint64_t)(*((void *)a3 + 6) - *((void *)a3 + 5)) >> 2);
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[2].__r_.__value_.__r.__words[2], *((const void **)a3 + 8), *((void *)a3 + 9), (uint64_t)(*((void *)a3 + 9) - *((void *)a3 + 8)) >> 2);
}

void sub_1B1C4F058(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TokenLmInfo>,quasar::TokenLmInfo*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TokenLmInfo>,quasar::TokenLmInfo*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TokenLmInfo>,quasar::TokenLmInfo*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 88;
      std::allocator<quasar::TokenLmInfo>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::vector<quasar::TokenLmInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::allocator<quasar::TokenLmInfo>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<quasar::LmInfo>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::LmInfo>,std::reverse_iterator<quasar::LmInfo*>,std::reverse_iterator<quasar::LmInfo*>,std::reverse_iterator<quasar::LmInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::LmInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(104 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::LmInfo>,std::reverse_iterator<quasar::LmInfo*>,std::reverse_iterator<quasar::LmInfo*>,std::reverse_iterator<quasar::LmInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  void v14[2] = &v17;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    do
    {
      int v8 = *(_DWORD *)(a3 - 104);
      a3 -= 104;
      *(_DWORD *)(v7 - 104) = v8;
      *(void *)(v7 - 88) = 0;
      *(void *)(v7 - 80) = 0;
      *(void *)(v7 - 96) = 0;
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 80) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + ++*(_DWORD *)(result + 24) = 0;
      int v9 = *(_DWORD *)(a3 + 32);
      *(unsigned char *)(v7 - 68) = *(unsigned char *)(a3 + 36);
      *(_DWORD *)(v7 - 72) = v9;
      long long v10 = *(_OWORD *)(a3 + 40);
      *(void *)(v7 - 48) = *(void *)(a3 + 56);
      *(_OWORD *)(v7 - 64) = v10;
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 40) = 0;
      uint64_t v11 = *(void *)(a3 + 64);
      *(unsigned char *)(v7 - 32) = *(unsigned char *)(a3 + 72);
      *(void *)(v7 - 40) = v11;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = *(_OWORD *)(a3 + 80);
      *(void *)(v7 - 8) = *(void *)(a3 + 96);
      *(void *)(a3 + 80) = 0;
      *(void *)(a3 + 88) = 0;
      *(void *)(a3 + 96) = 0;
      uint64_t v7 = *((void *)&v17 + 1) - 104;
      *((void *)&v17 + 1) -= 104;
    }
    while (a3 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmInfo>,std::reverse_iterator<quasar::LmInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmInfo>,std::reverse_iterator<quasar::LmInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmInfo>,std::reverse_iterator<quasar::LmInfo*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmInfo>,std::reverse_iterator<quasar::LmInfo*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::LmInfo>::destroy[abi:ne180100](v3, v1);
      v1 += 104;
    }
    while (v1 != v2);
  }
}

void std::allocator<quasar::LmInfo>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 80);
  if (v3)
  {
    *(void *)(a2 + 88) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 63) < 0) {
    operator delete(*(void **)(a2 + 40));
  }
  uint64_t v4 = (void **)(a2 + 8);
  std::vector<quasar::TokenLmInfo>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void **std::__split_buffer<quasar::LmInfo>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::LmInfo>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 104;
    std::allocator<quasar::LmInfo>::destroy[abi:ne180100](v4, i - 104);
  }
}

void std::vector<std::vector<unsigned long long>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    char v15 = v12;
    long long v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    long long v17 = &v16[v14];
    std::vector<std::vector<unsigned long long>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1B1C4F62C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned long long>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long long>>,std::reverse_iterator<std::vector<unsigned long long>*>,std::reverse_iterator<std::vector<unsigned long long>*>,std::reverse_iterator<std::vector<unsigned long long>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long long>>,std::reverse_iterator<std::vector<unsigned long long>*>,std::reverse_iterator<std::vector<unsigned long long>*>,std::reverse_iterator<std::vector<unsigned long long>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long long>>,std::reverse_iterator<std::vector<unsigned long long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long long>>,std::reverse_iterator<std::vector<unsigned long long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::vector<std::vector<float>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    long long v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      *uint64_t v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1B1C4F830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<std::shared_ptr<kaldi::quasar::LmHandle>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::LmHandle>>,std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1C4F8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::LmHandle>>,std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::LmHandle>>,std::shared_ptr<kaldi::quasar::LmHandle>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::LmHandle>>,std::shared_ptr<kaldi::quasar::LmHandle>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::vector<std::shared_ptr<quasar::Decoder>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::Decoder>>,std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1C4FA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::Decoder>>,std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::Decoder>>,std::shared_ptr<quasar::Decoder>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::Decoder>>,std::shared_ptr<quasar::Decoder>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::allocate_shared[abi:ne180100]<quasar::SpeechRecognizerConfig,std::allocator<quasar::SpeechRecognizerConfig>,std::string const&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x670uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::SpeechRecognizerConfig>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SpeechRecognizerConfig>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1C4FB38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::SpeechRecognizerConfig>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SpeechRecognizerConfig>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A610F8;
  std::allocator<quasar::SpeechRecognizerConfig>::construct[abi:ne180100]<quasar::SpeechRecognizerConfig,std::string const&>((quasar::DecoderOptions *)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B1C4FBA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SpeechRecognizerConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A610F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SpeechRecognizerConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A610F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::SpeechRecognizerConfig>::__on_zero_shared(uint64_t a1)
{
}

void std::allocator<quasar::SpeechRecognizerConfig>::construct[abi:ne180100]<quasar::SpeechRecognizerConfig,std::string const&>(quasar::DecoderOptions *a1, uint64_t a2, uint64_t a3)
{
  memset(v7, 0, sizeof(v7));
  memset(v5, 0, sizeof(v5));
  int v6 = 1065353216;
  quasar::DecoderOptions::defaultDecoderOptions(a1);
  quasar::SpeechRecognizerConfig::SpeechRecognizerConfig(a2, a3, v7, v5, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v5);
  *(void *)&v5[0] = v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v5);
}

void sub_1B1C4FCC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  a9 = (void **)&a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

quasar::SpeechRecognizerModelLoader *std::unique_ptr<quasar::SpeechRecognizerModelLoader>::reset[abi:ne180100](quasar::SpeechRecognizerModelLoader **a1, quasar::SpeechRecognizerModelLoader *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::SpeechRecognizerModelLoader::~SpeechRecognizerModelLoader(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void std::vector<std::shared_ptr<quasar::Decoder>>::__assign_with_size[abi:ne180100]<std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100]((void *)a1, v12);
    long long v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::Decoder>>,std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    char v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *>((uint64_t)&v20, a2, v15, v9);
    long long v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::Decoder>>,std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *>((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      uint64_t v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_1B1C4FE78(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1C4FE80(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  int v6 = a3;
  do
  {
    uint64_t v8 = *v5;
    uint64_t v7 = v5[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = (std::__shared_weak_count *)a4[1];
    *a4 = v8;
    a4[1] = v7;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    a4 += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

void std::__assoc_state<quasar::Location>::set_value<quasar::Location const&>(uint64_t a1, _OWORD *a2)
{
  char v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 136) & 1) != 0
    || (v6.__ptr_ = 0, uint64_t v5 = *(void *)(a1 + 16), std::exception_ptr::~exception_ptr(&v6), v5))
  {
    std::__throw_future_error[abi:ne180100](2u);
  }
  *(_OWORD *)(a1 + 144) = *a2;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_1B1C4FFD0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::weak_ptr<quasar::Decoder>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::weak_ptr<quasar::Decoder>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    char v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  a1[1] = v2;
}

void std::__shared_ptr_emplace<quasar::SpeechRequestResultData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SpeechRequestResultData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61408;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::SpeechRequestResultData>::__on_zero_shared(uint64_t a1)
{
}

double quasar::SpeechRequestResultData::SpeechRequestResultData(quasar::SpeechRequestResultData *this)
{
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)this = _Q1;
  *((_OWORD *)this + 1) = xmmword_1B2565920;
  *((_OWORD *)this + 2) = _Q1;
  *((_OWORD *)this + 3) = _Q1;
  *((_OWORD *)this + 4) = _Q1;
  *((void *)this + 10) = -1;
  *((void *)this + 11) = 0xBFF0000000000000;
  *((_DWORD *)this + ++*(_DWORD *)(result + 24) = -1;
  *((void *)this + 13) = 0xBFF0000000000000;
  *((_DWORD *)this + 28) = -1;
  *((unsigned char *)this + 116) = 0;
  *((void *)this + 15) = -1;
  *((void *)this + 16) = 0;
  *((unsigned char *)this + 136) = 0;
  double result = 0.0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((void *)this + ++*(_DWORD *)(result + 24) = 850045863;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = (char *)this + 264;
  *((void *)this + 35) = (char *)this + 288;
  *((void *)this + 36) = 0;
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 38) = (char *)this + 312;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((void *)this + 47) = 0;
  return result;
}

void quasar::SpeechRequestResultData::~SpeechRequestResultData(quasar::SpeechRequestResultData *this)
{
  char v4 = (void **)((char *)this + 360);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 304, *((void **)this + 39));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 280, *((void **)this + 36));
  std::__tree<std::string>::destroy((uint64_t)this + 256, *((char **)this + 33));
  std::mutex::~mutex((std::mutex *)this + 3);
  char v4 = (void **)((char *)this + 168);
  std::vector<quasar::PhoneticMatchResult>::__destroy_vector::operator()[abi:ne180100](&v4);
  char v4 = (void **)((char *)this + 144);
  std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void std::vector<quasar::PhoneticMatchResult>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<quasar::PhoneticMatchResult>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::PhoneticMatchResult>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0) {
    operator delete(*(void **)(a2 + 40));
  }
  uint64_t v3 = (void **)(a2 + 16);
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 9;
        std::allocator<quasar::PhoneticMatchAlignmentSpan>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::PhoneticMatchAlignmentSpan>::destroy[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v3 = a2 + 6;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a2 + 3;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a2;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<quasar::PhoneticMatchDecoderStat>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<quasar::PhoneticMatchDecoderStat>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 17) < 0) {
      operator delete(*(void **)(i - 40));
    }
  }
  a1[1] = v2;
}

void *std::allocate_shared[abi:ne180100]<quasar::DecoderChainOutput,std::allocator<quasar::DecoderChainOutput>,std::shared_ptr<quasar::SymbolTableList>,std::shared_ptr<quasar::SpeechRequestResultData>,void>@<X0>(long long *a1@<X1>, long long *a2@<X2>, void *a3@<X8>)
{
  std::exception_ptr v6 = operator new(0x4A8uLL);
  double result = std::__shared_ptr_emplace<quasar::DecoderChainOutput>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SymbolTableList>,std::shared_ptr<quasar::SpeechRequestResultData>,std::allocator<quasar::DecoderChainOutput>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B1C50504(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::DecoderChainOutput>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SymbolTableList>,std::shared_ptr<quasar::SpeechRequestResultData>,std::allocator<quasar::DecoderChainOutput>,0>(void *a1, long long *a2, long long *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60598;
  std::allocator<quasar::DecoderChainOutput>::construct[abi:ne180100]<quasar::DecoderChainOutput,std::shared_ptr<quasar::SymbolTableList>,std::shared_ptr<quasar::SpeechRequestResultData>>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1B1C50578(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::DecoderChainOutput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60598;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::DecoderChainOutput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60598;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::DecoderChainOutput>::__on_zero_shared(uint64_t a1)
{
}

void std::allocator<quasar::DecoderChainOutput>::construct[abi:ne180100]<quasar::DecoderChainOutput,std::shared_ptr<quasar::SymbolTableList>,std::shared_ptr<quasar::SpeechRequestResultData>>(uint64_t a1, uint64_t a2, long long *a3, long long *a4)
{
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  long long v5 = *a4;
  long long v6 = v4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  quasar::DecoderChainOutput::DecoderChainOutput(a2, &v6, &v5);
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
  if (*((void *)&v6 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
  }
}

void sub_1B1C5066C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void quasar::DecoderChainOutput::~DecoderChainOutput(void **this)
{
  if (*((char *)this + 1167) < 0) {
    operator delete(this[143]);
  }
  unint64_t v32 = this + 139;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v32);
  uint64_t v2 = (std::__shared_weak_count *)this[133];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 1055) < 0) {
    operator delete(this[129]);
  }
  uint64_t v3 = this[126];
  if (v3)
  {
    this[127] = v3;
    operator delete(v3);
  }
  long long v4 = this[123];
  if (v4)
  {
    this[124] = v4;
    operator delete(v4);
  }
  if (*((char *)this + 959) < 0) {
    operator delete(this[117]);
  }
  if (*((char *)this + 903) < 0) {
    operator delete(this[110]);
  }
  unint64_t v32 = this + 105;
  std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100](&v32);
  long long v5 = this[99];
  if (v5)
  {
    this[100] = v5;
    operator delete(v5);
  }
  long long v6 = this[95];
  if (v6)
  {
    this[96] = v6;
    operator delete(v6);
  }
  uint64_t v7 = this[91];
  if (v7)
  {
    this[92] = v7;
    operator delete(v7);
  }
  uint64_t v8 = this[87];
  if (v8)
  {
    this[88] = v8;
    operator delete(v8);
  }
  unint64_t v32 = this + 82;
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100](&v32);
  uint64_t v9 = (std::__shared_weak_count *)this[81];
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)this[77];
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  unint64_t v32 = this + 73;
  std::vector<quasar::LmeInfo>::__destroy_vector::operator()[abi:ne180100](&v32);
  uint64_t v11 = (std::__shared_weak_count *)this[71];
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  unint64_t v12 = (std::__shared_weak_count *)this[69];
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  long long v13 = (std::__shared_weak_count *)this[62];
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  unint64_t v14 = (std::__shared_weak_count *)this[60];
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  char v15 = (std::__shared_weak_count *)this[54];
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)this[52];
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  uint64_t v17 = (std::__shared_weak_count *)this[50];
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  unint64_t v32 = this + 46;
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100](&v32);
  uint64_t v18 = (std::__shared_weak_count *)this[45];
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  uint64_t v19 = (std::__shared_weak_count *)this[43];
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  char v20 = (std::__shared_weak_count *)this[41];
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  char v21 = (std::__shared_weak_count *)this[39];
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  uint64_t v22 = (std::__shared_weak_count *)this[37];
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  unint64_t v23 = (std::__shared_weak_count *)this[35];
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  int v24 = (std::__shared_weak_count *)this[33];
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  uint64_t v25 = (std::__shared_weak_count *)this[31];
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  uint64_t v26 = (std::__shared_weak_count *)this[29];
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  uint64_t v27 = (std::__shared_weak_count *)this[27];
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (*((unsigned char *)this + 200))
  {
    float v28 = (std::__shared_weak_count *)this[24];
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
  }
  char v29 = (std::__shared_weak_count *)this[22];
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  BOOL v30 = (std::__shared_weak_count *)this[20];
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)(this + 15), this[16]);
  unint64_t v32 = this + 12;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v32);
  float v31 = this[9];
  if (v31)
  {
    this[10] = v31;
    operator delete(v31);
  }
  unint64_t v32 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v32);
  unint64_t v32 = this + 3;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v32);
  unint64_t v32 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v32);
}

void std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    long long v4 = (void **)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        long long v6 = v4;
        std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    long long v4 = (char *)v1[1];
    long long v5 = v2;
    if (v4 != v2)
    {
      do
        kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)(v4 - 264));
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void kaldi::quasar::WordConf::~WordConf(kaldi::quasar::WordConf *this)
{
  long long v4 = (void **)((char *)this + 240);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = (void *)*((void *)this + 27);
  if (v2)
  {
    *((void *)this + 28) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 21);
  if (v3)
  {
    *((void *)this + 22) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void std::vector<quasar::LmeInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<quasar::LmeInfo>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<quasar::LmeInfo>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN5kaldi5TimerENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN5kaldi5TimerENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_((uint64_t)v2, v3);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1B1C50BB0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceIN5kaldi5TimerENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(uint64_t a1, clockid_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F0A5EF48;
  *(unsigned char *)(a1 + 48) = 1;
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 24), a2);
  *(void *)(a1 + 56) = 0;
  return a1;
}

void sub_1B1C50C18(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::Timer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EF48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::Timer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EF48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void *std::allocate_shared[abi:ne180100]<quasar::SpeechRequestData,std::allocator<quasar::SpeechRequestData>,std::shared_ptr<quasar::RunAsyncParams> &,decltype(nullptr),decltype(nullptr),std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location,std::shared_ptr<kaldi::Timer>,unsigned long,void>@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void **a4@<X4>, _OWORD *a5@<X5>, long long *a6@<X6>, void *a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = operator new(0xF8uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::SpeechRequestData>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::RunAsyncParams> &,decltype(nullptr),decltype(nullptr),std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location,std::shared_ptr<kaldi::Timer>,unsigned long,std::allocator<quasar::SpeechRequestData>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1B1C50D38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::SpeechRequestData>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::RunAsyncParams> &,decltype(nullptr),decltype(nullptr),std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location,std::shared_ptr<kaldi::Timer>,unsigned long,std::allocator<quasar::SpeechRequestData>,0>(void *a1, void *a2, uint64_t a3, uint64_t a4, void **a5, _OWORD *a6, long long *a7, void *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A604F0;
  std::allocator<quasar::SpeechRequestData>::construct[abi:ne180100]<quasar::SpeechRequestData,std::shared_ptr<quasar::RunAsyncParams> &,decltype(nullptr),decltype(nullptr),std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location,std::shared_ptr<kaldi::Timer>,unsigned long>((uint64_t)&v10, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_1B1C50DC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SpeechRequestData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A604F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SpeechRequestData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A604F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::SpeechRequestData>::__on_zero_shared(uint64_t a1)
{
}

void std::allocator<quasar::SpeechRequestData>::construct[abi:ne180100]<quasar::SpeechRequestData,std::shared_ptr<quasar::RunAsyncParams> &,decltype(nullptr),decltype(nullptr),std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location,std::shared_ptr<kaldi::Timer>,unsigned long>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void **a6, _OWORD *a7, long long *a8, void *a9)
{
  uint64_t v12 = 0;
  long long v13 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  long long v9 = *a8;
  *(void *)a8 = 0;
  *((void *)a8 + 1) = 0;
  quasar::SpeechRequestData::SpeechRequestData(a2, a3, &v12, &v10, a6, a7, &v9, *a9 != 0, 1, 4uLL);
  if (*((void *)&v9 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_1B1C50EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, ...)
{
  va_start(va, a5);
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  std::allocator<quasar::SpeechRequestData>::construct[abi:ne180100]<quasar::SpeechRequestData,std::shared_ptr<quasar::RunAsyncParams> &,decltype(nullptr),decltype(nullptr),std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location,std::shared_ptr<kaldi::Timer>,unsigned long>((uint64_t)va, v5 - 32);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>,std::__wrap_iter<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>>(uint64_t *a1, void *a2, uint64_t *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    long long v9 = a1 + 2;
    uint64_t v10 = v11;
    unint64_t v12 = *(v9 - 1);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      uint64_t v19 = v12 - (void)a2;
      uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 4;
      if (v20 >= a5)
      {
        char v21 = &a3[2 * a5];
      }
      else
      {
        char v21 = &a3[2 * v20];
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>((uint64_t)v9, v21, a4, (void *)*(v9 - 1));
        if (v19 < 1) {
          return v5;
        }
      }
      std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[2 * a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *>((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
      if (v14 >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 4;
      uint64_t v16 = v10 - v13;
      if (v16 >> 3 > v14) {
        unint64_t v14 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      v26[4] = v9;
      if (v17) {
        uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v9, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v22 = (uint64_t *)&v18[16 * v15];
      v26[0] = v18;
      v26[1] = v22;
      v26[3] = &v18[16 * v17];
      unint64_t v23 = &v22[2 * a5];
      do
      {
        *uint64_t v22 = *v7;
        uint64_t v24 = v7[1];
        v22[1] = v24;
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        v22 += 2;
        v7 += 2;
      }
      while (v22 != v23);
      v26[2] = v23;
      uint64_t v5 = (void *)std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v26);
    }
  }
  return v5;
}

void sub_1B1C510AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__move_range(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)((char *)a2 + v6 - a4);
  uint64_t v8 = (_OWORD *)v6;
  if ((unint64_t)v7 < a3)
  {
    long long v9 = v7;
    uint64_t v8 = *(_OWORD **)(a1 + 8);
    do
    {
      *v8++ = *(_OWORD *)v9;
      *long long v9 = 0;
      v9[1] = 0;
      v9 += 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>> *,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>> *,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>> *>((uint64_t)&v11, a2, v7, v6);
}

uint64_t std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::reverse_iterator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>,std::reverse_iterator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>,std::reverse_iterator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>(v7, (uint64_t)a3, a1[1], (_OWORD *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>> *,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>> *,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>> *>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    do
    {
      long long v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *uint64_t v7 = 0;
      v7[1] = 0;
      uint64_t v9 = *(std::__shared_weak_count **)(a4 - 8);
      *(_OWORD *)(a4 - 16) = v8;
      a4 -= 16;
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::reverse_iterator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>,std::reverse_iterator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>,std::reverse_iterator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    long long v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *long long v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::reverse_iterator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

_OWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  long long v4 = a4;
  long long v9 = a4;
  long long v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4++ = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      a2 += 16;
    }
    while (a2 != a3);
    long long v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::reverse_iterator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>,std::__wrap_iter<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>>(uint64_t *a1, void *a2, uint64_t *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    char v7 = a3;
    uint64_t v11 = a1[2];
    long long v9 = a1 + 2;
    uint64_t v10 = v11;
    unint64_t v12 = *(v9 - 1);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      uint64_t v19 = v12 - (void)a2;
      uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 4;
      if (v20 >= a5)
      {
        char v21 = &a3[2 * a5];
      }
      else
      {
        char v21 = &a3[2 * v20];
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>((uint64_t)v9, v21, a4, (void *)*(v9 - 1));
        if (v19 < 1) {
          return v5;
        }
      }
      std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[2 * a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *>((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
      if (v14 >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 4;
      uint64_t v16 = v10 - v13;
      if (v16 >> 3 > v14) {
        unint64_t v14 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      v26[4] = v9;
      if (v17) {
        uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v9, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v22 = (uint64_t *)&v18[16 * v15];
      v26[0] = v18;
      v26[1] = v22;
      v26[3] = &v18[16 * v17];
      unint64_t v23 = &v22[2 * a5];
      do
      {
        *uint64_t v22 = *v7;
        uint64_t v24 = v7[1];
        v22[1] = v24;
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        v22 += 2;
        v7 += 2;
      }
      while (v22 != v23);
      v26[2] = v23;
      uint64_t v5 = (void *)std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v26);
    }
  }
  return v5;
}

void sub_1B1C51514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>,std::reverse_iterator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>,std::reverse_iterator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>,std::reverse_iterator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>(v7, (uint64_t)a3, a1[1], (_OWORD *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>,std::reverse_iterator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>,std::reverse_iterator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>,std::reverse_iterator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>,std::reverse_iterator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

_OWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  long long v4 = a4;
  long long v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4++ = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      a2 += 16;
    }
    while (a2 != a3);
    long long v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>,std::reverse_iterator<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 24);
      a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 40);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "masterlm");
  }
}

uint64_t std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(uint64_t a1, long long *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((unsigned char *)a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a1 + ++*(_DWORD *)(result + 24) = 1;
  }
  return a1;
}

void std::__function::__func<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_0,std::allocator<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::~__func()
{
}

void *std::__function::__func<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_0,std::allocator<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1F0A5CA10;
  return result;
}

void std::__function::__func<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_0,std::allocator<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5CA10;
}

void std::__function::__func<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_0,std::allocator<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::operator()(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

uint64_t std::__function::__func<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_0,std::allocator<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_0,std::allocator<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::target_type()
{
}

void *std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_1,std::allocator<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::~__func()
{
}

void *std::__function::__func<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_1,std::allocator<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1F0A5CA68;
  return result;
}

void std::__function::__func<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_1,std::allocator<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5CA68;
}

void std::__function::__func<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_1,std::allocator<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::operator()(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

uint64_t std::__function::__func<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_1,std::allocator<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_1,std::allocator<quasar::FstLmScorer::computeLmScore(quasar::FstLmScorerOptions const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,quasar::Location const&,std::vector<std::string> const&,quasar::LmInfo &,std::vector<int> const&,std::vector<std::string> const&)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target_type()
{
}

void *std::__function::__value_func<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void quasar::QuasarG2PBase::QuasarG2PBase(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a2[1];
  uint64_t v13 = *a2;
  uint64_t v14 = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = a3[1];
  uint64_t v11 = *a3;
  uint64_t v12 = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t Ptree = quasar::SystemConfig::getPtree(a5, a7);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-prons");
  quasar::PTree::getIntOptional<int>(Ptree, (uint64_t)__p);
}

void sub_1B1C51CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a22 && a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v28[351] < 0) {
    operator delete(*v29);
  }
  if (v28[327] < 0) {
    operator delete(*v30);
  }
  quasar::G2P::~G2P((quasar::G2P *)v28);
  _Unwind_Resume(a1);
}

void quasar::G2P::G2P(void *a1, void *a2, void *a3)
{
  *a1 = &unk_1F0A58CA8;
  a1[1] = *a2;
  uint64_t v3 = a2[1];
  a1[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  a1[3] = *a3;
  uint64_t v4 = a3[1];
  a1[4] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void sub_1B1C51EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::unique_ptr<quasar::PronCombinator>::reset[abi:ne180100](v10 + 5, 0);
  uint64_t v12 = (std::__shared_weak_count *)v10[4];
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)v10[2];
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::QuasarG2PBase::tokenIsLegal(quasar::QuasarG2PBase *this, const Token *a2, BOOL *a3)
{
  *a3 = 0;
  unint64_t size = *((unsigned __int8 *)&a2->tokenName.__r_.__value_.var0.var1 + 23);
  if ((size & 0x80u) != 0) {
    unint64_t size = a2->tokenName.__r_.__value_.var0.var1.__size_;
  }
  if (size)
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)this + 64))(&__p);
    memset(&v11, 0, sizeof(v11));
    uint64_t v6 = (*(uint64_t (**)(quasar::QuasarG2PBase *))(*(void *)this + 72))(this);
    if (v6)
    {
      tokenize_entry(&__p, (uint64_t)this + 328, v6, a3, (uint64_t *)&v13);
      std::vector<std::string>::__vdeallocate(&v11);
      *(_OWORD *)&v11.__begin_ = v13;
      v11.__end_cap_.__value_ = (std::wstring *)v14;
      *(void *)&long long v14 = 0;
      long long v13 = 0uLL;
      BOOL v30 = (void **)&v13;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v30);
      BOOL v7 = v11.__begin_ == v11.__end_;
    }
    else
    {
      std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
      }
      BOOL v7 = v9 == 0;
    }
    uint64_t v8 = !v7;
    *(void *)&long long v13 = &v11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v13 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Empty token received", 20);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v13);
    }
    return 0;
  }
  return v8;
}

void sub_1B1C52154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1B1C52168(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,long long a27,long long a28,long long a29,long long a30,long long a31,long long a32,long long a33,long long a34)
{
  switch(a2)
  {
    case 4:
      uint64_t v34 = __cxa_begin_catch(a1);
      if (quasar::gLogLevel >= 2)
      {
        uint64_t v35 = v34;
        a33 = 0u;
        a34 = 0u;
        a31 = 0u;
        a32 = 0u;
        a29 = 0u;
        a30 = 0u;
        a27 = 0u;
        a28 = 0u;
        a25 = 0u;
        a26 = 0u;
        a23 = 0u;
        a24 = 0u;
        a21 = 0u;
        a22 = 0u;
        a19 = 0u;
        a20 = 0u;
        a18 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a18);
        uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a18, (uint64_t)"Not enough space, ", 18);
        unint64_t v37 = (const char *)(*(uint64_t (**)(void *))(*(void *)v35 + 16))(v35);
        size_t v38 = strlen(v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a18);
      }
      break;
    case 3:
      unint64_t v39 = __cxa_begin_catch(a1);
      if (quasar::gLogLevel >= 2)
      {
        int v40 = v39;
        a33 = 0u;
        a34 = 0u;
        a31 = 0u;
        a32 = 0u;
        a29 = 0u;
        a30 = 0u;
        a27 = 0u;
        a28 = 0u;
        a25 = 0u;
        a26 = 0u;
        a23 = 0u;
        a24 = 0u;
        a21 = 0u;
        a22 = 0u;
        a19 = 0u;
        a20 = 0u;
        a18 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a18);
        float v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a18, (uint64_t)"Invalid UTF-8, ", 15);
        uint64_t v42 = (const char *)(*(uint64_t (**)(void *))(*(void *)v40 + 16))(v40);
        size_t v43 = strlen(v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a18);
      }
      break;
    case 2:
      unint64_t v44 = __cxa_begin_catch(a1);
      if (quasar::gLogLevel >= 2)
      {
        uint64_t v45 = v44;
        a33 = 0u;
        a34 = 0u;
        a31 = 0u;
        a32 = 0u;
        a29 = 0u;
        a30 = 0u;
        a27 = 0u;
        a28 = 0u;
        a25 = 0u;
        a26 = 0u;
        a23 = 0u;
        a24 = 0u;
        a21 = 0u;
        a22 = 0u;
        a19 = 0u;
        a20 = 0u;
        a18 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a18);
        uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a18, (uint64_t)"Invalid code point, ", 20);
        uint64_t v47 = (const char *)(*(uint64_t (**)(void *))(*(void *)v45 + 16))(v45);
        size_t v48 = strlen(v47);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a18);
      }
      break;
    case 1:
      unint64_t v49 = __cxa_begin_catch(a1);
      if (quasar::gLogLevel >= 2)
      {
        unint64_t v50 = v49;
        a33 = 0u;
        a34 = 0u;
        a31 = 0u;
        a32 = 0u;
        a29 = 0u;
        a30 = 0u;
        a27 = 0u;
        a28 = 0u;
        a25 = 0u;
        a26 = 0u;
        a23 = 0u;
        a24 = 0u;
        a21 = 0u;
        a22 = 0u;
        a19 = 0u;
        a20 = 0u;
        a18 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a18);
        uint64_t v51 = (const char *)(*(uint64_t (**)(void *))(*(void *)v50 + 16))(v50);
        size_t v52 = strlen(v51);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a18, (uint64_t)v51, v52);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a18);
      }
      break;
    default:
      *(void *)&a18 = &a9;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      if (a17 < 0) {
        operator delete(__p);
      }
      JUMPOUT(0x1B1C52160);
  }
  __cxa_end_catch();
  JUMPOUT(0x1B1C5211CLL);
}

void quasar::QuasarG2PBase::normalizeToken(const std::locale *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&matches, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string matches = *(std::string *)a2;
  }
  quasar::trim(&matches);
  if (SHIBYTE(matches.__r_.__value_.__r.__words[2]) < 0)
  {
    if (matches.__r_.__value_.__l.__size_) {
      goto LABEL_6;
    }
LABEL_24:
    std::string::basic_string[abi:ne180100]<0>(a3, "");
    goto LABEL_170;
  }
  if (!*((unsigned char *)&matches.__r_.__value_.__s + 23)) {
    goto LABEL_24;
  }
LABEL_6:
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  char v81 = 0;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  char v84 = 0;
  char v85 = 0;
  uint64_t v86 = 0;
  std::pair<const wchar_t *, const wchar_t *> v5 = (std::pair<const wchar_t *, const wchar_t *>)0;
  memset(v78, 0, 41);
  {
    std::pair<const wchar_t *, const wchar_t *> v5 = (std::pair<const wchar_t *, const wchar_t *>)0;
    if (v59) {
      operator new();
    }
  }
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  *(std::pair<const wchar_t *, const wchar_t *> *)&__p.__matches_.__begin_ = v5;
  *(std::pair<const wchar_t *, const wchar_t *> *)&__p.__matches_.__end_cap_.__value_ = v5;
  *(std::pair<const wchar_t *, const wchar_t *> *)((char *)&__p.__unmatched_.std::pair<const wchar_t *, const wchar_t *>
                                                 + 1) = v5;
  std::string::size_type size = HIBYTE(matches.__r_.__value_.__r.__words[2]);
  if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v7 = (__int32 *)&matches;
  }
  else {
    BOOL v7 = (__int32 *)matches.__r_.__value_.__r.__words[0];
  }
  if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = matches.__r_.__value_.__l.__size_;
  }
  int v8 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_1, v7, (__int32 *)((char *)v7 + size), &__p, 0);
  std::string::size_type v9 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
  if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = &matches;
  }
  else {
    uint64_t v10 = (std::string *)matches.__r_.__value_.__r.__words[0];
  }
  if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v9 = matches.__r_.__value_.__l.__size_;
  }
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v78, (uint64_t)v10, (std::sub_match<std::__wrap_iter<const wchar_t *>> *)((char *)v10 + v9), (uint64_t *)&__p, 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if (!v8)
  {
    {
      operator new();
    }
    {
      operator new();
    }
    memset(&__p.__prefix_, 0, 17);
    memset(&__p.__suffix_, 0, 17);
    __p.__ready_ = 0;
    __p.__position_start_ = 0;
    memset(&__p, 0, 41);
    std::string::size_type v11 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
    if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = (__int32 *)&matches;
    }
    else {
      uint64_t v12 = (__int32 *)matches.__r_.__value_.__r.__words[0];
    }
    if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v11 = matches.__r_.__value_.__l.__size_;
    }
    int v13 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_2, v12, (__int32 *)((char *)v12 + v11), &__p, 0);
    std::string::size_type v14 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
    if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v15 = &matches;
    }
    else {
      long long v15 = (std::string *)matches.__r_.__value_.__r.__words[0];
    }
    if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v14 = matches.__r_.__value_.__l.__size_;
    }
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v78, (uint64_t)v15, (std::sub_match<std::__wrap_iter<const wchar_t *>> *)((char *)v15 + v14), (uint64_t *)&__p, 0);
    if (__p.__matches_.__begin_)
    {
      __p.__matches_.__end_ = __p.__matches_.__begin_;
      operator delete(__p.__matches_.__begin_);
    }
    if (v13)
    {
      memset(&__p, 0, 24);
      std::string::size_type v16 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
      if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v17.__i_ = (std::__wrap_iter<const char *>::iterator_type)&matches;
      }
      else {
        v17.__i_ = (std::__wrap_iter<const char *>::iterator_type)matches.__r_.__value_.__r.__words[0];
      }
      if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v16 = matches.__r_.__value_.__l.__size_;
      }
      v18.__i_ = &v17.__i_[v16];
      std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>((std::string *)&__p, v17, v18, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_3, "_", 0);
      if (SHIBYTE(matches.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(matches.__r_.__value_.__l.__data_);
      }
      std::string matches = (std::string)__p.__matches_;
    }
    {
      operator new();
    }
    {
      operator new();
    }
    memset(&__p.__prefix_, 0, 17);
    memset(&__p.__suffix_, 0, 17);
    __p.__ready_ = 0;
    __p.__position_start_ = 0;
    memset(&__p, 0, 41);
    std::string::size_type v19 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
    if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string matches = (__int32 *)&matches;
    }
    else {
      p_std::string matches = (__int32 *)matches.__r_.__value_.__r.__words[0];
    }
    if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v19 = matches.__r_.__value_.__l.__size_;
    }
    int v21 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_4, p_matches, (__int32 *)((char *)p_matches + v19), &__p, 0);
    std::string::size_type v22 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
    if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v23 = &matches;
    }
    else {
      long long v23 = (std::string *)matches.__r_.__value_.__r.__words[0];
    }
    if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v22 = matches.__r_.__value_.__l.__size_;
    }
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v78, (uint64_t)v23, (std::sub_match<std::__wrap_iter<const wchar_t *>> *)((char *)v23 + v22), (uint64_t *)&__p, 0);
    if (__p.__matches_.__begin_)
    {
      __p.__matches_.__end_ = __p.__matches_.__begin_;
      operator delete(__p.__matches_.__begin_);
    }
    if (v21)
    {
      memset(&__p, 0, 24);
      std::string::size_type v24 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
      if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v25.__i_ = (std::__wrap_iter<const char *>::iterator_type)&matches;
      }
      else {
        v25.__i_ = (std::__wrap_iter<const char *>::iterator_type)matches.__r_.__value_.__r.__words[0];
      }
      if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v24 = matches.__r_.__value_.__l.__size_;
      }
      v26.__i_ = &v25.__i_[v24];
      std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>((std::string *)&__p, v25, v26, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_5, "_", 0);
      if (SHIBYTE(matches.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(matches.__r_.__value_.__l.__data_);
      }
      std::string matches = (std::string)__p.__matches_;
    }
    {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(__s1, "");
    std::string::basic_string[abi:ne180100]<0>(__n, "");
    long long v27 = a1 + 13;
    uint64_t v28 = (uint64_t)&a1[14];
    quasar::toUpper((uint64_t)&matches, v27, v28, (std::string *)&__p);
    if (SHIBYTE(value) < 0) {
      operator delete(__s1[0]);
    }
    *(_OWORD *)__s1 = *(_OWORD *)&__p.__matches_.__begin_;
    value = __p.__matches_.__end_cap_.__value_;
    quasar::toLower((uint64_t)&matches, v27, v28, (std::string *)&__p);
    if (SHIBYTE(v64) < 0) {
      operator delete((void *)__n[0]);
    }
    *(_OWORD *)size_t __n = *(_OWORD *)&__p.__matches_.__begin_;
    unint64_t v64 = __p.__matches_.__end_cap_.__value_;
    uint64_t v29 = HIBYTE(value);
    if (SHIBYTE(value) >= 0) {
      BOOL v30 = (char *)HIBYTE(value);
    }
    else {
      BOOL v30 = (char *)__s1[1];
    }
    std::string::size_type v31 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
    if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v31 = matches.__r_.__value_.__l.__size_;
    }
    if (v30 != (char *)v31) {
      goto LABEL_115;
    }
    if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v32 = &matches;
    }
    else {
      unint64_t v32 = (std::string *)matches.__r_.__value_.__r.__words[0];
    }
    if ((HIBYTE(value) & 0x80) != 0)
    {
      if (memcmp(__s1[0], v32, (size_t)__s1[1])) {
        goto LABEL_115;
      }
    }
    else if (HIBYTE(value))
    {
      long long v33 = __s1;
      uint64_t v34 = v32;
      while (*(unsigned __int8 *)v33 == v34->__r_.__value_.__s.__data_[0])
      {
        long long v33 = (void **)((char *)v33 + 1);
        uint64_t v34 = (std::string *)((char *)v34 + 1);
        if (!--v29) {
          goto LABEL_92;
        }
      }
      goto LABEL_115;
    }
LABEL_92:
    uint64_t v35 = HIBYTE(v64);
    if (SHIBYTE(v64) >= 0) {
      size_t v36 = HIBYTE(v64);
    }
    else {
      size_t v36 = __n[1];
    }
    if ((char *)v36 == v30)
    {
      if ((HIBYTE(v64) & 0x80) == 0)
      {
        if (HIBYTE(v64))
        {
          unint64_t v37 = __n;
          size_t v38 = v32;
          while (*(unsigned __int8 *)v37 == v38->__r_.__value_.__s.__data_[0])
          {
            unint64_t v37 = (size_t *)((char *)v37 + 1);
            size_t v38 = (std::string *)((char *)v38 + 1);
            if (!--v35) {
              goto LABEL_115;
            }
          }
          goto LABEL_103;
        }
LABEL_115:
        {
          operator new();
        }
        {
          operator new();
        }
        memset(&__p.__prefix_, 0, 17);
        memset(&__p.__suffix_, 0, 17);
        __p.__ready_ = 0;
        __p.__position_start_ = 0;
        memset(&__p, 0, 41);
        std::string::size_type v42 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
        if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v43 = (__int32 *)&matches;
        }
        else {
          size_t v43 = (__int32 *)matches.__r_.__value_.__r.__words[0];
        }
        if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v42 = matches.__r_.__value_.__l.__size_;
        }
        int v44 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_7, v43, (__int32 *)((char *)v43 + v42), &__p, 0);
        std::string::size_type v45 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
        if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v46 = &matches;
        }
        else {
          uint64_t v46 = (std::string *)matches.__r_.__value_.__r.__words[0];
        }
        if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v45 = matches.__r_.__value_.__l.__size_;
        }
        std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v78, (uint64_t)v46, (std::sub_match<std::__wrap_iter<const wchar_t *>> *)((char *)v46 + v45), (uint64_t *)&__p, 0);
        if (__p.__matches_.__begin_)
        {
          __p.__matches_.__end_ = __p.__matches_.__begin_;
          operator delete(__p.__matches_.__begin_);
        }
        if (v44)
        {
          memset(&__p, 0, 24);
          std::string::size_type v47 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
          if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v48.__i_ = (std::__wrap_iter<const char *>::iterator_type)&matches;
          }
          else {
            v48.__i_ = (std::__wrap_iter<const char *>::iterator_type)matches.__r_.__value_.__r.__words[0];
          }
          if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v47 = matches.__r_.__value_.__l.__size_;
          }
          v49.__i_ = &v48.__i_[v47];
          std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>((std::string *)&__p, v48, v49, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_8, "_$1", 0);
          if (SHIBYTE(matches.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(matches.__r_.__value_.__l.__data_);
          }
          std::string matches = (std::string)__p.__matches_;
        }
        {
          operator new();
        }
        memset(&__p, 0, 24);
        std::string::size_type v50 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
        if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v51.__i_ = (std::__wrap_iter<const char *>::iterator_type)&matches;
        }
        else {
          v51.__i_ = (std::__wrap_iter<const char *>::iterator_type)matches.__r_.__value_.__r.__words[0];
        }
        if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v50 = matches.__r_.__value_.__l.__size_;
        }
        v52.__i_ = &v51.__i_[v50];
        std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>((std::string *)&__p, v51, v52, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_9, "_", 0);
        if (SHIBYTE(matches.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(matches.__r_.__value_.__l.__data_);
        }
        std::string matches = (std::string)__p.__matches_;
        {
          operator new();
        }
        memset(&__p, 0, 24);
        std::string::size_type v53 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
        if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v54.__i_ = (std::__wrap_iter<const char *>::iterator_type)&matches;
        }
        else {
          v54.__i_ = (std::__wrap_iter<const char *>::iterator_type)matches.__r_.__value_.__r.__words[0];
        }
        if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v53 = matches.__r_.__value_.__l.__size_;
        }
        v55.__i_ = &v54.__i_[v53];
        std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>((std::string *)&__p, v54, v55, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_10, "_", 0);
        if (SHIBYTE(matches.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(matches.__r_.__value_.__l.__data_);
        }
        std::string matches = (std::string)__p.__matches_;
        {
          operator new();
        }
        memset(&__p, 0, 24);
        std::string::size_type v56 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
        if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v57.__i_ = (std::__wrap_iter<const char *>::iterator_type)&matches;
        }
        else {
          v57.__i_ = (std::__wrap_iter<const char *>::iterator_type)matches.__r_.__value_.__r.__words[0];
        }
        if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v56 = matches.__r_.__value_.__l.__size_;
        }
        v58.__i_ = &v57.__i_[v56];
        std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>((std::string *)&__p, v57, v58, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_11, "|", 0);
        if (SHIBYTE(matches.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(matches.__r_.__value_.__l.__data_);
        }
        std::string matches = (std::string)__p.__matches_;
        quasar::toLower((uint64_t)&matches, v27, v28, (std::string *)&__p);
        if (SHIBYTE(matches.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(matches.__r_.__value_.__l.__data_);
        }
        matches.__r_.__value_.__r.__words[2] = (std::string::size_type)__p.__matches_.__end_cap_.__value_;
        *(_OWORD *)a3 = *(_OWORD *)&__p.__matches_.__begin_;
        a3[2] = *((void *)&matches.__r_.__value_.__l + 2);
        memset(&matches, 0, sizeof(matches));
        if (SHIBYTE(v64) < 0) {
          operator delete((void *)__n[0]);
        }
        if (SHIBYTE(value) < 0) {
          operator delete(__s1[0]);
        }
        goto LABEL_168;
      }
      if (!memcmp((const void *)__n[0], v32, __n[1])) {
        goto LABEL_115;
      }
    }
LABEL_103:
    memset(&__p.__prefix_, 0, 17);
    memset(&__p.__suffix_, 0, 17);
    __p.__ready_ = 0;
    __p.__position_start_ = 0;
    memset(&__p, 0, 41);
    char v39 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(quasar::QuasarG2PBase::normalizeToken(std::string const&)::PATTERN_6, (__int32 *)v32, (__int32 *)&v30[(void)v32], &__p, 0);
    std::string::size_type v40 = HIBYTE(matches.__r_.__value_.__r.__words[2]);
    if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v41 = &matches;
    }
    else {
      float v41 = (std::string *)matches.__r_.__value_.__r.__words[0];
    }
    if ((matches.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v40 = matches.__r_.__value_.__l.__size_;
    }
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v78, (uint64_t)v41, (std::sub_match<std::__wrap_iter<const wchar_t *>> *)((char *)v41 + v40), (uint64_t *)&__p, 0);
    if (__p.__matches_.__begin_)
    {
      __p.__matches_.__end_ = __p.__matches_.__begin_;
      operator delete(__p.__matches_.__begin_);
    }
    if ((v39 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      tokenize_utf8_string(&matches, (uint64_t)&__p, (uint64_t)v62);
      v60[0] = (uint64_t)"_";
      v60[1] = 1;
      quasar::join<std::vector<std::string>>(v62, v60);
      if (SHIBYTE(matches.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(matches.__r_.__value_.__l.__data_);
      }
      std::string matches = v61;
      v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
      if (SHIBYTE(__p.__matches_.__end_cap_.__value_) < 0) {
        operator delete(__p.__matches_.__begin_);
      }
    }
    goto LABEL_115;
  }
  if (quasar::gLogLevel >= 2)
  {
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    memset(&__p, 0, sizeof(__p));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"input contains | which is the separator for g2p model.", 54);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
  }
  std::string::basic_string[abi:ne180100]<0>(a3, "");
LABEL_168:
  if (v78[0].__begin_)
  {
    v78[0].__end_ = v78[0].__begin_;
    operator delete(v78[0].__begin_);
  }
LABEL_170:
  if (SHIBYTE(matches.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(matches.__r_.__value_.__l.__data_);
  }
}

void sub_1B1C53248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long __p, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,long long a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,long long a36,long long a37,long long a38,long long a39,long long a40,long long a41,long long a42,long long a43,long long a44,long long a45,long long a46,long long a47,long long a48,long long a49,long long a50)
{
  MEMORY[0x1B3EA8670](v50, 0x1060C4040BE2400);
  if (a21 < 0) {
    operator delete((void *)__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  std::string::size_type v53 = *(void **)(v51 - 208);
  if (v53)
  {
    *(void *)(v51 - 200) = v53;
    operator delete(v53);
  }
  if (*(char *)(v51 - 73) < 0) {
    operator delete(*(void **)(v51 - 96));
  }
  _Unwind_Resume(a1);
}

void quasar::QuasarG2PBase::chopTokenIntoUTF8Units(quasar::QuasarG2PBase *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  (*(void (**)(std::string *__return_ptr))(*(void *)this + 64))(&__p);
  memset(&v7, 0, sizeof(v7));
  uint64_t v5 = (*(uint64_t (**)(quasar::QuasarG2PBase *))(*(void *)this + 72))(this);
  if (v5)
  {
    tokenize_entry(&__p, (uint64_t)this + 328, v5, 0, (uint64_t *)&v11);
    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)&v7);
    std::string v7 = v11;
    memset(&v11, 0, sizeof(v11));
    std::string::size_type v9 = &v11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
    *a2 = v7;
    memset(&v7, 0, sizeof(v7));
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v11 = __p;
    }
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    std::string::size_type v9 = a2;
    char v10 = 0;
    uint64_t v6 = (std::string *)operator new(0x18uLL);
    a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    a2->__r_.__value_.__l.__size_ = (std::string::size_type)v6;
    a2->__r_.__value_.__r.__words[2] = (std::string::size_type)&v6[1];
    a2->__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&a2->__r_.__value_.__r.__words[2], (long long *)&v11, v12, v6);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B1C53A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,long long a27,long long a28,long long a29,long long a30,long long a31,long long a32,long long a33,long long a34,long long a35,long long a36)
{
  switch(a2)
  {
    case 4:
      unint64_t v37 = __cxa_begin_catch(a1);
      if (quasar::gLogLevel >= 2)
      {
        size_t v38 = v37;
        a35 = 0u;
        a36 = 0u;
        a33 = 0u;
        a34 = 0u;
        a31 = 0u;
        a32 = 0u;
        a29 = 0u;
        a30 = 0u;
        a27 = 0u;
        a28 = 0u;
        a25 = 0u;
        a26 = 0u;
        a23 = 0u;
        a24 = 0u;
        a21 = 0u;
        a22 = 0u;
        a20 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a20);
        char v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a20, (uint64_t)"Not enough space, ", 18);
        std::string::size_type v40 = (const char *)(*(uint64_t (**)(void *))(*(void *)v38 + 16))(v38);
        size_t v41 = strlen(v40);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a20);
      }
      break;
    case 3:
      std::string::size_type v42 = __cxa_begin_catch(a1);
      if (quasar::gLogLevel >= 2)
      {
        size_t v43 = v42;
        a35 = 0u;
        a36 = 0u;
        a33 = 0u;
        a34 = 0u;
        a31 = 0u;
        a32 = 0u;
        a29 = 0u;
        a30 = 0u;
        a27 = 0u;
        a28 = 0u;
        a25 = 0u;
        a26 = 0u;
        a23 = 0u;
        a24 = 0u;
        a21 = 0u;
        a22 = 0u;
        a20 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a20);
        int v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a20, (uint64_t)"Invalid UTF-8, ", 15);
        std::string::size_type v45 = (const char *)(*(uint64_t (**)(void *))(*(void *)v43 + 16))(v43);
        size_t v46 = strlen(v45);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a20);
      }
      break;
    case 2:
      std::string::size_type v47 = __cxa_begin_catch(a1);
      if (quasar::gLogLevel >= 2)
      {
        std::__wrap_iter<const char *> v48 = v47;
        a35 = 0u;
        a36 = 0u;
        a33 = 0u;
        a34 = 0u;
        a31 = 0u;
        a32 = 0u;
        a29 = 0u;
        a30 = 0u;
        a27 = 0u;
        a28 = 0u;
        a25 = 0u;
        a26 = 0u;
        a23 = 0u;
        a24 = 0u;
        a21 = 0u;
        a22 = 0u;
        a20 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a20);
        std::__wrap_iter<const char *> v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a20, (uint64_t)"Invalid code point, ", 20);
        uint64_t v50 = (const char *)(*(uint64_t (**)(void *))(*(void *)v48 + 16))(v48);
        size_t v51 = strlen(v50);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a20);
      }
      break;
    default:
      if (a2 != 1)
      {
        *(void *)&a20 = &a9;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
        if (a17 < 0) {
          operator delete(__p);
        }
        _Unwind_Resume(a1);
      }
      std::__wrap_iter<const char *> v52 = __cxa_begin_catch(a1);
      if (quasar::gLogLevel >= 2)
      {
        std::string::size_type v53 = v52;
        a35 = 0u;
        a36 = 0u;
        a33 = 0u;
        a34 = 0u;
        a31 = 0u;
        a32 = 0u;
        a29 = 0u;
        a30 = 0u;
        a27 = 0u;
        a28 = 0u;
        a25 = 0u;
        a26 = 0u;
        a23 = 0u;
        a24 = 0u;
        a21 = 0u;
        a22 = 0u;
        a20 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a20);
        std::__wrap_iter<const char *> v54 = (const char *)(*(uint64_t (**)(void *))(*(void *)v53 + 16))(v53);
        size_t v55 = strlen(v54);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a20, (uint64_t)v54, v55);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a20);
      }
      break;
  }
  __cxa_end_catch();
  JUMPOUT(0x1B1C53940);
}

uint64_t kaldi::LatticeWordAligner::ComputationState::OutputSilenceArc(uint64_t a1, uint64_t a2, kaldi::TransitionModel *this, uint64_t a4, unsigned char *a5)
{
  if (*(void *)a1 == *(void *)(a1 + 8)) {
    return 0;
  }
  unsigned int v10 = kaldi::TransitionModel::TransitionIdToPhone(this, **(_DWORD **)a1);
  if (kaldi::WordBoundaryInfo::TypeOfPhone((kaldi::WordBoundaryInfo *)a2, v10) != 5) {
    return 0;
  }
  uint64_t v29 = a4;
  uint64_t v11 = *(void *)(a1 + 8) - *(void *)a1;
  unint64_t v12 = v11 >> 2;
  uint64_t v13 = 0;
  if (v11)
  {
    if (v12 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v11 >> 2;
    }
    while (1)
    {
      int v15 = *(_DWORD *)(*(void *)a1 + 4 * v13);
      if (kaldi::TransitionModel::TransitionIdToPhone(this, v15) != v10 && !*a5)
      {
        *a5 = 1;
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"Phone changed before final transition-id found [broken lattice or mismatched model or wrong --reorder option?]", 110);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v37);
        }
      }
      if (kaldi::TransitionModel::IsFinal(this, v15)) {
        break;
      }
      if (v14 == ++v13)
      {
        uint64_t v13 = v14;
        break;
      }
    }
  }
  if (v13 == v12) {
    return 0;
  }
  unint64_t v16 = v13 + 1;
  if (*(unsigned char *)(a2 + 56) && v16 < v12)
  {
    while (kaldi::TransitionModel::IsSelfLoop(this, *(_DWORD *)(*(void *)a1 + 4 * v16)))
    {
      if (v12 == ++v16) {
        return 0;
      }
    }
  }
  if (v16 == v12) {
    return 0;
  }
  if (kaldi::TransitionModel::TransitionIdToPhone(this, *(_DWORD *)(*(void *)a1 + 4 * v16 - 4)) != v10
    && !*a5
    && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"Phone changed unexpectedly in lattice [broken lattice or mismatched model?]", 75);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v37);
  }
  std::__wrap_iter<const char *> v18 = *(int **)a1;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v34 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(&v34, v18, (uint64_t)&v18[v16], v16);
  int v19 = *(_DWORD *)(a2 + 24);
  uint64_t v30 = *(void *)(a1 + 48);
  unint64_t v32 = 0;
  uint64_t v33 = 0;
  std::string::size_type v31 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v31, v34, (uint64_t)v35, (v35 - (unsigned char *)v34) >> 2);
  LODWORD(v37) = v19;
  HIDWORD(v37) = v19;
  uint64_t v38 = v30;
  std::string::size_type v40 = 0;
  uint64_t v41 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v31, (uint64_t)v32, (v32 - (unsigned char *)v31) >> 2);
  int v20 = -1;
  int v42 = -1;
  *(void *)uint64_t v29 = v37;
  *(void *)(v29 + 8) = v38;
  if (&v37 != (uint64_t *)v29)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v29 + 16), (char *)__p, (uint64_t)v40, (v40 - (unsigned char *)__p) >> 2);
    int v20 = v42;
  }
  *(_DWORD *)(v29 + 40) = v20;
  if (__p)
  {
    std::string::size_type v40 = __p;
    operator delete(__p);
  }
  if (v31)
  {
    unint64_t v32 = v31;
    operator delete(v31);
  }
  std::string::size_type v22 = *(char **)(a1 + 24);
  int v21 = *(char **)(a1 + 32);
  if (v22 != v21)
  {
    do
    {
      if (*(_DWORD *)v22 != *(_DWORD *)(a2 + 24)) {
        break;
      }
      long long v23 = v22;
      int64_t v24 = v21 - (v22 + 4);
      if (v21 != v22 + 4)
      {
        memmove(v22, v22 + 4, v21 - (v22 + 4));
        long long v23 = *(char **)(a1 + 24);
      }
      int v21 = &v22[v24];
      *(void *)(a1 + 32) = &v22[v24];
      std::string::size_type v22 = v23;
    }
    while (v23 != v21);
  }
  if (v16)
  {
    std::__wrap_iter<const char *> v26 = *(int **)a1;
    std::__wrap_iter<const char *> v25 = *(unsigned char **)(a1 + 8);
    long long v27 = (unsigned char *)(*(void *)a1 + 4 * v16);
    int64_t v28 = v25 - v27;
    if (v25 != v27) {
      memmove(*(void **)a1, v27, v25 - v27);
    }
    *(void *)(a1 + 8) = (char *)v26 + v28;
  }
  *(void *)(a1 + 48) = 0;
  if (v34)
  {
    uint64_t v35 = v34;
    operator delete(v34);
  }
  return 1;
}

void sub_1B1C5414C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21)
{
}

uint64_t kaldi::WordBoundaryInfo::TypeOfPhone(kaldi::WordBoundaryInfo *this, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0 || a2 > (unint64_t)((uint64_t)(*((void *)this + 1) - *(void *)this) >> 2))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Phone ", 6);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, " was not specified in word-boundary file (or options)");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return *(unsigned int *)(*(void *)this + 4 * a2);
}

uint64_t kaldi::LatticeWordAligner::ComputationState::OutputUnpronouncedWordArc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(int **)(a1 + 24);
  if (v4 == *(int **)(a1 + 32)) {
    return 0;
  }
  uint64_t v5 = *(uint64_t **)(a2 + 40);
  if (!v5) {
    return 0;
  }
  int v8 = *v4;
  while (1)
  {
    int v9 = *((_DWORD *)v5 + 7);
    if (v8 >= v9) {
      break;
    }
LABEL_7:
    uint64_t v5 = (uint64_t *)*v5;
    if (!v5) {
      return 0;
    }
  }
  if (v9 < v8)
  {
    ++v5;
    goto LABEL_7;
  }
  *(_OWORD *)int v15 = 0u;
  long long v16 = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v15[1], 0, 0, 0);
  LODWORD(v17) = v8;
  HIDWORD(v17) = v8;
  std::__wrap_iter<const char *> v18 = v15[0];
  int v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v15[1], v16, (uint64_t)(v16 - (unint64_t)v15[1]) >> 2);
  int v11 = -1;
  int v22 = -1;
  *(void *)a4 = v17;
  *(void *)(a4 + 8) = v18;
  if (&v17 != (uint64_t *)a4)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a4 + 16), (char *)__p, (uint64_t)v20, (v20 - (unsigned char *)__p) >> 2);
    int v11 = v22;
  }
  *(_DWORD *)(a4 + 40) = v11;
  if (__p)
  {
    int v20 = __p;
    operator delete(__p);
  }
  if (v15[1])
  {
    *(void **)&long long v16 = v15[1];
    operator delete(v15[1]);
  }
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v14 = v12 - (v13 + 4);
  if (v12 != v13 + 4) {
    memmove(*(void **)(a1 + 24), (const void *)(v13 + 4), v12 - (v13 + 4));
  }
  *(void *)(a1 + 32) = v13 + v14;
  return 1;
}

void sub_1B1C5437C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a10) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::LatticeWordAligner::ComputationState::OutputOnePhoneWordArc(uint64_t a1, uint64_t a2, kaldi::TransitionModel *this, uint64_t a4, unsigned char *a5)
{
  if (*(void *)a1 == *(void *)(a1 + 8)) {
    return 0;
  }
  uint64_t v6 = *(int **)(a1 + 24);
  if (v6 == *(int **)(a1 + 32)) {
    return 0;
  }
  int v11 = *v6;
  for (uint64_t i = *(uint64_t **)(a2 + 40); i; uint64_t i = (uint64_t *)*i)
  {
    int v13 = *((_DWORD *)i + 7);
    if (v11 >= v13)
    {
      if (v13 >= v11) {
        return 0;
      }
      ++i;
    }
  }
  unsigned int v14 = kaldi::TransitionModel::TransitionIdToPhone(this, **(_DWORD **)a1);
  if (kaldi::WordBoundaryInfo::TypeOfPhone((kaldi::WordBoundaryInfo *)a2, v14) != 3) {
    return 0;
  }
  uint64_t v31 = a4;
  uint64_t v15 = *(void *)(a1 + 8) - *(void *)a1;
  unint64_t v16 = v15 >> 2;
  uint64_t v17 = 0;
  if (v15)
  {
    if (v16 <= 1) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = v15 >> 2;
    }
    while (1)
    {
      int v19 = *(_DWORD *)(*(void *)a1 + 4 * v17);
      if (kaldi::TransitionModel::TransitionIdToPhone(this, v19) != v14
        && !*a5
        && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Phone changed before final transition-id found [broken lattice or mismatched model or wrong --reorder option?]", 110);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v39);
      }
      if (kaldi::TransitionModel::IsFinal(this, v19)) {
        break;
      }
      if (v18 == ++v17)
      {
        uint64_t v17 = v18;
        break;
      }
    }
  }
  if (v17 == v16) {
    return 0;
  }
  unint64_t v20 = v17 + 1;
  if (*(unsigned char *)(a2 + 56) && v20 < v16)
  {
    while (kaldi::TransitionModel::IsSelfLoop(this, *(_DWORD *)(*(void *)a1 + 4 * v20)))
    {
      uint64_t result = 0;
      if (v16 == ++v20) {
        return result;
      }
    }
  }
  if (v20 == v16) {
    return 0;
  }
  if (kaldi::TransitionModel::TransitionIdToPhone(this, *(_DWORD *)(*(void *)a1 + 4 * v20 - 4)) != v14
    && !*a5)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Phone changed unexpectedly in lattice [broken lattice or mismatched model?]", 75);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v39);
    }
    *a5 = 1;
  }
  int v22 = *(int **)a1;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v36 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(&v36, v22, (uint64_t)&v22[v20], v20);
  uint64_t v32 = *(void *)(a1 + 48);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v33, v36, (uint64_t)v37, (v37 - (unsigned char *)v36) >> 2);
  LODWORD(v39) = v11;
  HIDWORD(v39) = v11;
  uint64_t v40 = v32;
  int v42 = 0;
  uint64_t v43 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v33, (uint64_t)v34, (v34 - (unsigned char *)v33) >> 2);
  int v23 = -1;
  int v44 = -1;
  *(void *)uint64_t v31 = v39;
  *(void *)(v31 + 8) = v40;
  if (&v39 != (uint64_t *)v31)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v31 + 16), (char *)__p, (uint64_t)v42, (v42 - (unsigned char *)__p) >> 2);
    int v23 = v44;
  }
  *(_DWORD *)(v31 + 40) = v23;
  if (__p)
  {
    int v42 = __p;
    operator delete(__p);
  }
  if (v33)
  {
    uint64_t v34 = v33;
    operator delete(v33);
  }
  if (v20)
  {
    std::__wrap_iter<const char *> v25 = *(int **)a1;
    int64_t v24 = *(unsigned char **)(a1 + 8);
    std::__wrap_iter<const char *> v26 = (unsigned char *)(*(void *)a1 + 4 * v20);
    int64_t v27 = v24 - v26;
    if (v24 != v26) {
      memmove(*(void **)a1, v26, v24 - v26);
    }
    *(void *)(a1 + 8) = (char *)v25 + v27;
  }
  uint64_t v29 = *(void *)(a1 + 24);
  uint64_t v28 = *(void *)(a1 + 32);
  uint64_t v30 = v28 - (v29 + 4);
  if (v28 != v29 + 4) {
    memmove(*(void **)(a1 + 24), (const void *)(v29 + 4), v28 - (v29 + 4));
  }
  *(void *)(a1 + 32) = v29 + v30;
  *(void *)(a1 + 48) = 0;
  if (v36)
  {
    uint64_t v37 = v36;
    operator delete(v36);
  }
  return 1;
}

void sub_1B1C546F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21)
{
}

uint64_t kaldi::LatticeWordAligner::ComputationState::OutputNormalWordArc(uint64_t a1, uint64_t a2, kaldi::TransitionModel *this, uint64_t a4, unsigned char *a5)
{
  if (*(void *)a1 == *(void *)(a1 + 8)) {
    return 0;
  }
  uint64_t v6 = *(int **)(a1 + 24);
  if (v6 == *(int **)(a1 + 32)) {
    return 0;
  }
  int v11 = *v6;
  for (uint64_t i = *(uint64_t **)(a2 + 40); i; uint64_t i = (uint64_t *)*i)
  {
    int v13 = *((_DWORD *)i + 7);
    if (v11 >= v13)
    {
      if (v13 >= v11) {
        return 0;
      }
      ++i;
    }
  }
  unsigned int v14 = kaldi::TransitionModel::TransitionIdToPhone(this, **(_DWORD **)a1);
  if (kaldi::WordBoundaryInfo::TypeOfPhone((kaldi::WordBoundaryInfo *)a2, v14) != 1) {
    return 0;
  }
  uint64_t v15 = *(void *)(a1 + 8) - *(void *)a1;
  unint64_t v16 = v15 >> 2;
  uint64_t v17 = 0;
  if (v15)
  {
    if (v16 <= 1) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = v15 >> 2;
    }
    while (!kaldi::TransitionModel::IsFinal(this, *(_DWORD *)(*(void *)a1 + 4 * v17)))
    {
      if (v18 == ++v17)
      {
        uint64_t v17 = v18;
        break;
      }
    }
  }
  if (v17 == v16) {
    return 0;
  }
  unint64_t v19 = v17 + 1;
  if (*(unsigned char *)(a2 + 56) && v19 < v16)
  {
    while (kaldi::TransitionModel::IsSelfLoop(this, *(_DWORD *)(*(void *)a1 + 4 * v19)))
    {
      uint64_t result = 0;
      if (v16 == ++v19) {
        return result;
      }
    }
  }
  if (v19 == v16) {
    return 0;
  }
  if (kaldi::TransitionModel::TransitionIdToPhone(this, *(_DWORD *)(*(void *)a1 + 4 * v19 - 4)) != v14
    && !*a5)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Phone changed unexpectedly in lattice [broken lattice or mismatched model?]", 75);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v41);
    }
    *a5 = 1;
  }
  if (v19 < v16)
  {
    do
    {
      unsigned int v21 = kaldi::TransitionModel::TransitionIdToPhone(this, *(_DWORD *)(*(void *)a1 + 4 * v19));
      if (kaldi::WordBoundaryInfo::TypeOfPhone((kaldi::WordBoundaryInfo *)a2, v21) == 2) {
        break;
      }
      if (kaldi::WordBoundaryInfo::TypeOfPhone((kaldi::WordBoundaryInfo *)a2, v21) != 4 && !*a5)
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Unexpected phone ", 17);
          int v22 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" found inside a word.", 21);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v41);
        }
        *a5 = 1;
      }
      uint64_t result = 0;
      ++v19;
    }
    while (v16 != v19);
  }
  if (v19 == v16) {
    return 0;
  }
  int v23 = kaldi::TransitionModel::TransitionIdToPhone(this, *(_DWORD *)(*(void *)a1 + 4 * v19));
  if (v19 < v16)
  {
    do
    {
      if (kaldi::TransitionModel::TransitionIdToPhone(this, *(_DWORD *)(*(void *)a1 + 4 * v19)) != v23
        && !*a5)
      {
        *a5 = 1;
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Phone changed before final transition-id found [broken lattice or mismatched model or wrong --reorder option?]", 110);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v41);
        }
      }
      if (kaldi::TransitionModel::IsFinal(this, *(_DWORD *)(*(void *)a1 + 4 * v19))) {
        break;
      }
      uint64_t result = 0;
      ++v19;
    }
    while (v16 != v19);
  }
  if (v19 == v16) {
    return 0;
  }
  unint64_t v24 = v19 + 1;
  if (*(unsigned char *)(a2 + 56) && v24 < v16)
  {
    while (kaldi::TransitionModel::IsSelfLoop(this, *(_DWORD *)(*(void *)a1 + 4 * v24)))
    {
      uint64_t result = 0;
      if (v16 == ++v24) {
        return result;
      }
    }
  }
  if (v24 == v16) {
    return 0;
  }
  if (kaldi::TransitionModel::TransitionIdToPhone(this, *(_DWORD *)(*(void *)a1 + 4 * v24 - 4)) != v23
    && !*a5)
  {
    *a5 = 1;
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Phone changed while following final self-loop [broken lattice or mismatched model or wrong --reorder option?]", 109);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v41);
    }
  }
  std::__wrap_iter<const char *> v25 = *(int **)a1;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v38 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(&v38, v25, (uint64_t)&v25[v24], v24);
  uint64_t v34 = *(void *)(a1 + 48);
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v35 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v35, v38, (uint64_t)v39, (v39 - (unsigned char *)v38) >> 2);
  LODWORD(v41) = v11;
  HIDWORD(v41) = v11;
  uint64_t v42 = v34;
  int v44 = 0;
  uint64_t v45 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v35, (uint64_t)v36, (v36 - (unsigned char *)v35) >> 2);
  int v26 = -1;
  int v46 = -1;
  *(void *)a4 = v41;
  *(void *)(a4 + 8) = v42;
  if (&v41 != (uint64_t *)a4)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a4 + 16), (char *)__p, (uint64_t)v44, (v44 - (unsigned char *)__p) >> 2);
    int v26 = v46;
  }
  *(_DWORD *)(a4 + 40) = v26;
  if (__p)
  {
    int v44 = __p;
    operator delete(__p);
  }
  if (v35)
  {
    uint64_t v36 = v35;
    operator delete(v35);
  }
  if (v24)
  {
    uint64_t v28 = *(int **)a1;
    int64_t v27 = *(unsigned char **)(a1 + 8);
    uint64_t v29 = (unsigned char *)(*(void *)a1 + 4 * v24);
    int64_t v30 = v27 - v29;
    if (v27 != v29) {
      memmove(*(void **)a1, v29, v27 - v29);
    }
    *(void *)(a1 + 8) = (char *)v28 + v30;
  }
  uint64_t v32 = *(void *)(a1 + 24);
  uint64_t v31 = *(void *)(a1 + 32);
  uint64_t v33 = v31 - (v32 + 4);
  if (v31 != v32 + 4) {
    memmove(*(void **)(a1 + 24), (const void *)(v32 + 4), v31 - (v32 + 4));
  }
  *(void *)(a1 + 32) = v32 + v33;
  *(void *)(a1 + 48) = 0;
  if (v38)
  {
    uint64_t v39 = v38;
    operator delete(v38);
  }
  return 1;
}

void sub_1B1C54C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19)
{
}

void kaldi::LatticeWordAligner::ComputationState::OutputArcForce(uint64_t a1, uint64_t a2, kaldi::TransitionModel *this, uint64_t a4, unsigned char *a5)
{
  int v9 = *(int **)a1;
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    if (*a5)
    {
      uint64_t v18 = *(int **)a1;
    }
    else
    {
      *a5 = 1;
      uint64_t v18 = v9;
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Discarding word-ids at the end of a sentence, that don't have alignments.", 73);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v44);
        uint64_t v18 = *(int **)a1;
        int v9 = *(int **)(a1 + 8);
      }
    }
    uint64_t v38 = *(void *)(a1 + 48);
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v41 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v41, v18, (uint64_t)v9, v9 - v18);
    uint64_t v44 = 0;
    uint64_t v45 = v38;
    std::string::size_type v47 = 0;
    uint64_t v48 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v41, (uint64_t)v42, (v42 - (unsigned char *)v41) >> 2);
    int v35 = -1;
    int v49 = -1;
    *(void *)a4 = v44;
    *(void *)(a4 + 8) = v45;
    if (&v44 != (uint64_t *)a4)
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a4 + 16), (char *)__p, (uint64_t)v47, (v47 - (unsigned char *)__p) >> 2);
      int v35 = v49;
    }
    *(_DWORD *)(a4 + 40) = v35;
    if (__p)
    {
      std::string::size_type v47 = __p;
      operator delete(__p);
    }
    *(void *)(a1 + 48) = 0;
    uint64_t v17 = *(void *)(a1 + 24);
LABEL_42:
    *(void *)(a1 + 32) = v17;
    if (v41)
    {
      uint64_t v42 = v41;
      operator delete(v41);
    }
    return;
  }
  int v11 = *(int **)(a1 + 24);
  if (v11 != *(int **)(a1 + 32))
  {
    int v12 = *v11;
    if (!*a5)
    {
      unsigned int v25 = kaldi::TransitionModel::TransitionIdToPhone(this, *v9);
      unsigned int v26 = kaldi::TransitionModel::TransitionIdToPhone(this, *(_DWORD *)(*(void *)(a1 + 8) - 4));
      BOOL v27 = kaldi::WordBoundaryInfo::TypeOfPhone((kaldi::WordBoundaryInfo *)a2, v25) == 3 && v25 == v26;
      if (!v27
        && (kaldi::WordBoundaryInfo::TypeOfPhone((kaldi::WordBoundaryInfo *)a2, v25) != 1
         || kaldi::WordBoundaryInfo::TypeOfPhone((kaldi::WordBoundaryInfo *)a2, v26) != 2)
        && (kaldi::WordBoundaryInfo::TypeOfPhone((kaldi::WordBoundaryInfo *)a2, v25) != 5
         || kaldi::WordBoundaryInfo::TypeOfPhone((kaldi::WordBoundaryInfo *)a2, v26) != 5))
      {
        goto LABEL_60;
      }
      uint64_t v28 = *(void *)(a1 + 8);
      if (*(unsigned char *)(a2 + 56))
      {
        uint64_t v29 = ((unint64_t)(v28 - *(void *)a1) >> 2) - 1;
        uint64_t v30 = 4 * (int)v29;
        while (1)
        {
          uint64_t v31 = v30;
          uint64_t v32 = *(int **)a1;
          if ((int)v29 < 1) {
            break;
          }
          BOOL IsSelfLoop = kaldi::TransitionModel::IsSelfLoop(this, v32[v29]);
          uint64_t v30 = v31 - 4;
          --v29;
          if (!IsSelfLoop)
          {
            uint64_t v32 = *(int **)a1;
            break;
          }
        }
        uint64_t v34 = (int *)((char *)v32 + v31);
      }
      else
      {
        uint64_t v34 = (int *)(v28 - 4);
      }
      if (!kaldi::TransitionModel::IsFinal(this, *v34))
      {
LABEL_60:
        *a5 = 1;
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Invalid word at end of lattice [partial lattice, forced out?]", 61);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v44);
        }
      }
    }
    uint64_t v37 = *(void *)(a1 + 48);
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v41 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v41, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
    LODWORD(v44) = v12;
    HIDWORD(v44) = v12;
    uint64_t v45 = v37;
    std::string::size_type v47 = 0;
    uint64_t v48 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v41, (uint64_t)v42, (v42 - (unsigned char *)v41) >> 2);
    int v13 = -1;
    int v49 = -1;
    *(void *)a4 = v44;
    *(void *)(a4 + 8) = v45;
    if (&v44 != (uint64_t *)a4)
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a4 + 16), (char *)__p, (uint64_t)v47, (v47 - (unsigned char *)__p) >> 2);
      int v13 = v49;
    }
    *(_DWORD *)(a4 + 40) = v13;
    if (__p)
    {
      std::string::size_type v47 = __p;
      operator delete(__p);
    }
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 8) = *(void *)a1;
    uint64_t v15 = *(void *)(a1 + 24);
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v16 = v14 - (v15 + 4);
    if (v14 != v15 + 4) {
      memmove(*(void **)(a1 + 24), (const void *)(v15 + 4), v14 - (v15 + 4));
    }
    uint64_t v17 = v15 + v16;
    goto LABEL_42;
  }
  unsigned int v19 = kaldi::TransitionModel::TransitionIdToPhone(this, *v9);
  if (kaldi::WordBoundaryInfo::TypeOfPhone((kaldi::WordBoundaryInfo *)a2, v19) == 5)
  {
    if (v19 == kaldi::TransitionModel::TransitionIdToPhone(this, *(_DWORD *)(*(void *)(a1 + 8) - 4)))
    {
      if (!*a5)
      {
        unint64_t v20 = *(int **)a1;
        uint64_t v21 = (*(void *)(a1 + 8) - *(void *)a1) >> 2;
        if (*(unsigned char *)(a2 + 56))
        {
          uint64_t v22 = (int)v21 - 1;
          do
          {
            BOOL v23 = kaldi::TransitionModel::IsSelfLoop(this, *(_DWORD *)(*(void *)a1 + 4 * v22));
            LODWORD(v21) = v21 - 1;
            BOOL v24 = v22-- < 1;
          }
          while (!v24 && v23);
          unint64_t v20 = *(int **)a1;
        }
        else
        {
          LODWORD(v21) = v21 - 1;
        }
        if (!kaldi::TransitionModel::IsFinal(this, v20[(int)v21]))
        {
          *a5 = 1;
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Broken silence arc at end of utterance (does not reach end of silence)", 70);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v44);
          }
        }
      }
    }
    else if (!*a5)
    {
      *a5 = 1;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v44, "Broken silence arc at end of utterance (the phone changed); code error");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v44);
    }
    uint64_t v40 = *(void *)(a1 + 48);
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v41 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v41, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
    LODWORD(v44) = *(_DWORD *)(a2 + 24);
    HIDWORD(v44) = v44;
    uint64_t v45 = v40;
    std::string::size_type v47 = 0;
    uint64_t v48 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v41, (uint64_t)v42, (v42 - (unsigned char *)v41) >> 2);
    int v36 = -1;
    int v49 = -1;
    *(void *)a4 = v44;
    *(void *)(a4 + 8) = v45;
    if (&v44 == (uint64_t *)a4) {
      goto LABEL_52;
    }
  }
  else
  {
    if (!*a5)
    {
      *a5 = 1;
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Partial word detected at end of utterance", 41);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v44);
      }
    }
    uint64_t v39 = *(void *)(a1 + 48);
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v41 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v41, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
    LODWORD(v44) = *(_DWORD *)(a2 + 28);
    HIDWORD(v44) = v44;
    uint64_t v45 = v39;
    std::string::size_type v47 = 0;
    uint64_t v48 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v41, (uint64_t)v42, (v42 - (unsigned char *)v41) >> 2);
    int v36 = -1;
    int v49 = -1;
    *(void *)a4 = v44;
    *(void *)(a4 + 8) = v45;
    if (&v44 == (uint64_t *)a4) {
      goto LABEL_52;
    }
  }
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a4 + 16), (char *)__p, (uint64_t)v47, (v47 - (unsigned char *)__p) >> 2);
  int v36 = v49;
LABEL_52:
  *(_DWORD *)(a4 + 40) = v36;
  if (__p)
  {
    std::string::size_type v47 = __p;
    operator delete(__p);
  }
  if (v41)
  {
    uint64_t v42 = v41;
    operator delete(v41);
  }
  *(void *)(a1 + 8) = *(void *)a1;
  *(void *)(a1 + 48) = 0;
}

void kaldi::LoadUnpronouncedWords(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  char v19 = 0;
  uint64_t v3 = (kaldi::Input *)kaldi::Input::Input(v18, a1, &v19);
  uint64_t v4 = kaldi::Input::Stream(v3);
  if (v19)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Not expecting binary unpronounced words file.", 45);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v17);
  }
  uint64_t v5 = (void *)v4;
  std::string __p = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v6 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
    std::string v7 = std::locale::use_facet(&v17, v6);
    unsigned __int8 v8 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
    std::locale::~locale(&v17);
    int v9 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (uint64_t)&__p, v8);
    if ((*((unsigned char *)v9 + *(void *)(*v9 - 24) + 32) & 5) != 0) {
      break;
    }
    int v13 = 0;
    if ((kaldi::ConvertStringToInteger<int>((uint64_t)&__p, &v13) & 1) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v17);
      unsigned int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Invalid line in unpronounced words file: ", 41);
      if (v16 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (v16 >= 0) {
        uint64_t v12 = HIBYTE(v16);
      }
      else {
        uint64_t v12 = v15;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)p_p, v12);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v17);
    }
    std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)a2, &v13, &v13);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
  kaldi::Input::~Input((kaldi::Input *)v18);
}

void sub_1B1C55530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  kaldi::Input::~Input((kaldi::Input *)(v17 - 64));
  std::__tree<int>::destroy(v16, *(void **)(v16 + 8));
  _Unwind_Resume(a1);
}

uint64_t kaldi::ConvertStringToInteger<int>(uint64_t a1, _DWORD *a2)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v3 = (const char *)a1;
  }
  else {
    uint64_t v3 = *(const char **)a1;
  }
  __endptr = 0;
  *__error() = 0;
  uint64_t v4 = strtoll(v3, &__endptr, 10);
  if (__endptr == v3) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = __endptr - 1;
  uint64_t v7 = MEMORY[0x1E4F14390];
  do
  {
    unsigned int v8 = v6[1];
    if ((v8 & 0x80000000) != 0) {
      int v9 = __maskrune(v8, 0x4000uLL);
    }
    else {
      int v9 = *(_DWORD *)(v7 + 4 * v8 + 60) & 0x4000;
    }
    ++v6;
  }
  while (v9);
  if (v6 == v3 || *v6) {
    return 0;
  }
  int v11 = __error();
  uint64_t result = 0;
  if (!*v11 && !((unint64_t)(v5 + 0x80000000) >> 32))
  {
    *a2 = v5;
    return 1;
  }
  return result;
}

uint64_t kaldi::WordBoundaryInfo::WordBoundaryInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = a1 + 40;
  *(void *)(a1 + 32) = a1 + 40;
  uint64_t v7 = (void *)(a1 + 32);
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = *(void *)a2;
  char v16 = 0;
  kaldi::Input::Input(v15, a3, &v16);
  unsigned int v8 = (void *)kaldi::Input::Stream((kaldi::Input *)v15);
  kaldi::WordBoundaryInfo::Init((std::vector<int> *)a1, v8);
  if (*(char *)(a4 + 23) < 0)
  {
    if (!*(void *)(a4 + 8)) {
      goto LABEL_9;
    }
  }
  else if (!*(unsigned char *)(a4 + 23))
  {
    goto LABEL_9;
  }
  kaldi::LoadUnpronouncedWords(a4, (uint64_t)&v12);
  std::__tree<int>::destroy((uint64_t)v7, *(void **)(a1 + 40));
  int v9 = v13;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v9;
  uint64_t v10 = v14;
  *(void *)(a1 + 48) = v14;
  if (v10)
  {
    _OWORD v9[2] = v6;
    uint64_t v12 = &v13;
    int v13 = 0;
    uint64_t v14 = 0;
    int v9 = 0;
  }
  else
  {
    *uint64_t v7 = v6;
  }
  std::__tree<int>::destroy((uint64_t)&v12, v9);
LABEL_9:
  kaldi::Input::~Input((kaldi::Input *)v15);
  return a1;
}

void sub_1B1C55774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::Input::~Input((kaldi::Input *)va);
  std::__tree<int>::destroy(v6, *(void **)(v5 + 40));
  unsigned int v8 = *(void **)v5;
  if (*(void *)v5)
  {
    *(void *)(v5 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void kaldi::WordBoundaryInfo::Init(std::vector<int> *a1, void *a2)
{
  memset(&v31, 0, sizeof(v31));
  uint64_t v4 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
    uint64_t v5 = std::locale::use_facet(&v26, v4);
    unsigned __int8 v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
    std::locale::~locale(&v26);
    uint64_t v7 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v31, v6);
    if ((*((unsigned char *)v7 + *(void *)(*v7 - 24) + 32) & 5) != 0) {
      break;
    }
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    kaldi::SplitStringToVector(&v31, " \t\r", 1, (uint64_t)&v28);
    unsigned int v27 = 0;
    if (v29 - v28 != 48 || (kaldi::ConvertStringToInteger<int>(v28, &v27) & 1) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      char v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Invalid line in word-boundary file: ", 36);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v20 = &v31;
      }
      else {
        unint64_t v20 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v31.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, size);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v26);
    }
    if (v27 >= (unint64_t)(a1->__end_ - a1->__begin_))
    {
      LODWORD(v26.__locale_) = 0;
      std::vector<int>::resize(a1, v27 + 1, (std::vector<int>::const_reference)&v26);
    }
    if (*(char *)(v28 + 47) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v28 + 24), *(void *)(v28 + 32));
    }
    else {
      std::string __p = *(std::string *)(v28 + 24);
    }
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      p_p = &__p;
      switch(*((unsigned char *)&__p.__r_.__value_.__s + 23))
      {
        case 3:
          goto LABEL_52;
        case 5:
          if (LODWORD(__p.__r_.__value_.__l.__data_) != 1768383842 || __p.__r_.__value_.__s.__data_[4] != 110) {
            goto LABEL_51;
          }
          goto LABEL_64;
        case 7:
          if (LODWORD(__p.__r_.__value_.__l.__data_) != 2003726190
            || *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 3) != 1685221239)
          {
            goto LABEL_81;
          }
          goto LABEL_63;
        case 8:
          goto LABEL_44;
        case 9:
          if (__p.__r_.__value_.__r.__words[0] == 0x6F74656C676E6973 && __p.__r_.__value_.__s.__data_[8] == 110) {
            goto LABEL_65;
          }
          if (HIBYTE(__p.__r_.__value_.__r.__words[2]) == 8)
          {
            p_p = &__p;
            goto LABEL_44;
          }
LABEL_51:
          if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 3) {
            goto LABEL_81;
          }
LABEL_52:
          if (LOWORD(__p.__r_.__value_.__l.__data_) != 28261 || __p.__r_.__value_.__s.__data_[2] != 100)
          {
LABEL_81:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
            uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Invalid line in word-boundary file: ", 36);
            if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              BOOL v23 = &v31;
            }
            else {
              BOOL v23 = (std::string *)v31.__r_.__value_.__r.__words[0];
            }
            if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v24 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v24 = v31.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v26);
          }
          return;
        default:
          goto LABEL_81;
      }
LABEL_57:
      int v15 = 2;
      goto LABEL_66;
    }
    std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ == 5)
    {
      if (*(_DWORD *)__p.__r_.__value_.__l.__data_ == 1768383842
        && *(unsigned char *)(__p.__r_.__value_.__r.__words[0] + 4) == 110)
      {
LABEL_64:
        int v15 = 1;
        goto LABEL_66;
      }
      std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
    }
    else if (__p.__r_.__value_.__l.__size_ == 7 {
           && *(_DWORD *)__p.__r_.__value_.__l.__data_ == 2003726190
    }
           && *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 3) == 1685221239)
    {
LABEL_63:
      int v15 = 5;
      goto LABEL_66;
    }
    if (v10 == 9)
    {
      if (*(void *)__p.__r_.__value_.__l.__data_ == 0x6F74656C676E6973
        && *(unsigned char *)(__p.__r_.__value_.__r.__words[0] + 8) == 110)
      {
LABEL_65:
        int v15 = 3;
        goto LABEL_66;
      }
      std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
    }
    if (v10 == 3)
    {
      if (*(_WORD *)__p.__r_.__value_.__l.__data_ == 28261 && *(unsigned char *)(__p.__r_.__value_.__r.__words[0] + 2) == 100) {
        goto LABEL_57;
      }
      std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
    }
    if (v10 != 8) {
      goto LABEL_81;
    }
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_44:
    if (p_p->__r_.__value_.__r.__words[0] != 0x6C616E7265746E69) {
      goto LABEL_81;
    }
    int v15 = 4;
LABEL_66:
    a1->__begin_[v27] = v15;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    v26.__locale_ = (std::locale::__imp *)&v28;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  }
  if (a1->__begin_ == a1->__end_)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Empty word-boundary file", 24);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v26);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
}

void sub_1B1C55C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)(v13 - 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  if (*(char *)(v13 - 89) < 0) {
    operator delete(*(void **)(v13 - 112));
  }
  _Unwind_Resume(a1);
}

void sub_1B1C55C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13)
{
  std::locale::~locale(&a13);
  if (*(char *)(v13 - 89) < 0) {
    operator delete(*(void **)(v13 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::WordAlignLattice(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  kaldi::LatticeWordAligner::LatticeWordAligner((uint64_t)v7, a1, a2, a3, a4, a5);
  uint64_t v5 = kaldi::LatticeWordAligner::AlignLattice((kaldi::LatticeWordAligner *)v7);
  std::__hash_table<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,std::__unordered_map_hasher<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleHash,kaldi::LatticeWordAligner::TupleEqual,true>,std::__unordered_map_equal<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleEqual,kaldi::LatticeWordAligner::TupleHash,true>,std::allocator<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>>>::~__hash_table((uint64_t)&v12);
  std::deque<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::~deque[abi:ne180100](v11);
  std::__tree<int>::destroy((uint64_t)v10, v10[1]);
  if (__p)
  {
    int v9 = __p;
    operator delete(__p);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst(v7);
  return v5;
}

void sub_1B1C55D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::LatticeWordAligner::AlignLattice(kaldi::LatticeWordAligner *this)
{
  (*(void (**)(void))(**((void **)this + 13) + 224))(*((void *)this + 13));
  int v2 = *(_DWORD *)(*((void *)this + 1) + 88);
  if (v2 == -1)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Trying to word-align empty lattice.", 35);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    }
  }
  else
  {
    uint64_t v17 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)uint64_t v14 = 0u;
    kaldi::LatticeWordAligner::ComputationState::ComputationState((kaldi::LatticeWordAligner::ComputationState *)v7, (const kaldi::LatticeWordAligner::ComputationState *)v14);
    LODWORD(v10) = v2;
    kaldi::LatticeWordAligner::ComputationState::ComputationState((kaldi::LatticeWordAligner::ComputationState *)v11, (const kaldi::LatticeWordAligner::ComputationState *)v7);
    if (__p)
    {
      int v9 = __p;
      operator delete(__p);
    }
    if (v7[0])
    {
      v7[1] = v7[0];
      operator delete(v7[0]);
    }
    uint64_t StateForTuple = kaldi::LatticeWordAligner::GetStateForTuple(this, &v10, 1);
    (*(void (**)(void, uint64_t))(**((void **)this + 13) + 176))(*((void *)this + 13), StateForTuple);
    do
    {
      if (!*((void *)this + 19)) {
        kaldi::LatticeWordAligner::RemoveEpsilonsFromLattice(this);
      }
      if (*((int *)this + 24) >= 1
        && (*(int (**)(void))(**((void **)this + 13) + 160))(*((void *)this + 13)) > *((_DWORD *)this + 24))
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Number of states in lattice exceeded max-states of ", 51);
          uint64_t v4 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", original lattice had ", 23);
          uint64_t v5 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" states.  Returning what we have.", 33);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v18);
        }
        kaldi::LatticeWordAligner::RemoveEpsilonsFromLattice(this);
      }
      kaldi::LatticeWordAligner::ProcessQueueElement(this);
    }
    while (!*((unsigned char *)this + 200));
    (*(void (**)(void))(**((void **)this + 13) + 224))(*((void *)this + 13));
    if (v12)
    {
      uint64_t v13 = v12;
      operator delete(v12);
    }
    if (v11[0])
    {
      v11[1] = v11[0];
      operator delete(v11[0]);
    }
    if (*((void *)&v15 + 1))
    {
      *(void *)&long long v16 = *((void *)&v15 + 1);
      operator delete(*((void **)&v15 + 1));
    }
    if (v14[0])
    {
      v14[1] = v14[0];
      operator delete(v14[0]);
    }
  }
  return 0;
}

void sub_1B1C56000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  kaldi::LatticeWordAligner::Tuple::~Tuple((kaldi::LatticeWordAligner::Tuple *)va);
  kaldi::LatticeWordAligner::ComputationState::~ComputationState((kaldi::LatticeWordAligner::ComputationState *)va1);
  _Unwind_Resume(a1);
}

void kaldi::LatticeWordAligner::~LatticeWordAligner(kaldi::LatticeWordAligner *this)
{
  std::__hash_table<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,std::__unordered_map_hasher<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleHash,kaldi::LatticeWordAligner::TupleEqual,true>,std::__unordered_map_equal<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleEqual,kaldi::LatticeWordAligner::TupleHash,true>,std::allocator<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>>>::~__hash_table((uint64_t)this + 160);
  std::deque<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::~deque[abi:ne180100]((void *)this + 14);
  std::__tree<int>::destroy((uint64_t)this + 64, *((void **)this + 9));
  int v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst(this);
}

uint64_t kaldi::LatticeWordAligner::LatticeWordAligner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  v18[4] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v11;
  ++*(_DWORD *)(v11 + 56);
  *(void *)a1 = &unk_1F0A46010;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = a4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<kaldi::WordBoundaryInfo::PhoneType>::__init_with_size[abi:ne180100]<kaldi::WordBoundaryInfo::PhoneType*,kaldi::WordBoundaryInfo::PhoneType*>((void *)(a1 + 32), *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  *(void *)(a1 + 56) = *(void *)(a4 + 24);
  std::set<int>::set[abi:ne180100]((uint64_t *)(a1 + 64), a4 + 32);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a4 + 56);
  *(_DWORD *)(a1 + 96) = a5;
  *(void *)(a1 + 104) = a6;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(unsigned char *)(a1 + 200) = 0;
  v17[0] = 0;
  unint64_t v12 = fst::TestProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a1, 17039360, v17);
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v17[0] | 4) | v17[0] & v12;
  if ((v12 & 0x1040000) != 0x40000 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"[Lattice has input epsilons and/or is not input-deterministic ", 62);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"(in Mohri sense)]-- i.e. lattice is not deterministic.  ", 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Word-alignment may be slow and-or blow up in memory.", 52);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
  }
  uint64_t v18[3] = 0;
  fst::CreateSuperFinal<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a1, (uint64_t)v18);
  std::__function::__value_func<void ()(int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&)>::~__value_func[abi:ne180100](v18);
  if (!*(_DWORD *)(a1 + 60) || !*(_DWORD *)(a1 + 56))
  {
    int v15 = fst::HighestNumberedOutputSymbol<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a2)
        + 1;
    if (!*(_DWORD *)(a1 + 60)) {
      *(_DWORD *)(a1 + 60) = v15;
    }
    if (!*(_DWORD *)(a1 + 56)) {
      *(_DWORD *)(a1 + 56) = v15;
    }
  }
  return a1;
}

void sub_1B1C562CC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,std::__unordered_map_hasher<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleHash,kaldi::LatticeWordAligner::TupleEqual,true>,std::__unordered_map_equal<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleEqual,kaldi::LatticeWordAligner::TupleHash,true>,std::allocator<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>>>::~__hash_table(v4);
  std::deque<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::~deque[abi:ne180100](v3);
  kaldi::WordBoundaryInfo::~WordBoundaryInfo(v2);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst(v1);
  _Unwind_Resume(a1);
}

void sub_1B1C56340(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1C56338);
}

uint64_t fst::HighestNumberedOutputSymbol<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1)
{
  unsigned int v12 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v10);
  uint64_t v2 = 0;
  while (1)
  {
    if (!v10)
    {
      if ((int)v12 >= v11) {
        return v2;
      }
LABEL_7:
      uint64_t v3 = v12;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 16))(v10)) {
      break;
    }
    if (!v10) {
      goto LABEL_7;
    }
    uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v10 + 24))();
LABEL_8:
    unint64_t v9 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v3, v7);
    while (1)
    {
      if (!v7[0])
      {
        if (v9 >= v7[2]) {
          goto LABEL_24;
        }
LABEL_18:
        int v5 = *(_DWORD *)(v7[1] + 48 * v9 + 4);
        if ((int)v2 <= v5) {
          uint64_t v2 = v5;
        }
        else {
          uint64_t v2 = v2;
        }
        goto LABEL_21;
      }
      if ((*(unsigned int (**)(void))(*(void *)v7[0] + 24))(v7[0])) {
        break;
      }
      if (!v7[0]) {
        goto LABEL_18;
      }
      int v4 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)v7[0] + 32))() + 4);
      if ((int)v2 <= v4) {
        uint64_t v2 = v4;
      }
      else {
        uint64_t v2 = v2;
      }
      if (v7[0]) {
        (*(void (**)(void))(*(void *)v7[0] + 40))();
      }
      else {
LABEL_21:
      }
        ++v9;
    }
    if (v7[0])
    {
      (*(void (**)(void))(*(void *)v7[0] + 8))();
      goto LABEL_26;
    }
LABEL_24:
    if (v8) {
      --*v8;
    }
LABEL_26:
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 32))(v10);
    }
    else {
      ++v12;
    }
  }
  if (v10) {
    (*(void (**)(void))(*(void *)v10 + 8))();
  }
  return v2;
}

void sub_1B1C565E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::WordBoundaryInfo::~WordBoundaryInfo(kaldi::WordBoundaryInfo *this)
{
  std::__tree<int>::destroy((uint64_t)this + 32, *((void **)this + 5));
  uint64_t v2 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

void *std::vector<kaldi::WordBoundaryInfo::PhoneType>::__init_with_size[abi:ne180100]<kaldi::WordBoundaryInfo::PhoneType*,kaldi::WordBoundaryInfo::PhoneType*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unsigned __int8 v6 = result;
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1C56714(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,std::__unordered_map_hasher<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleHash,kaldi::LatticeWordAligner::TupleEqual,true>,std::__unordered_map_equal<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleEqual,kaldi::LatticeWordAligner::TupleHash,true>,std::allocator<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,std::__unordered_map_hasher<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleHash,kaldi::LatticeWordAligner::TupleEqual,true>,std::__unordered_map_equal<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleEqual,kaldi::LatticeWordAligner::TupleHash,true>,std::allocator<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,std::__unordered_map_hasher<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleHash,kaldi::LatticeWordAligner::TupleEqual,true>,std::__unordered_map_equal<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleEqual,kaldi::LatticeWordAligner::TupleHash,true>,std::allocator<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<kaldi::LatticeWordAligner::Tuple const,int>,0>(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<kaldi::LatticeWordAligner::Tuple const,int>,0>(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void kaldi::LatticeWordAligner::Tuple::~Tuple(kaldi::LatticeWordAligner::Tuple *this)
{
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

void kaldi::LatticeWordAligner::ComputationState::~ComputationState(kaldi::LatticeWordAligner::ComputationState *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

uint64_t std::deque<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  int v4 = (void **)a1[2];
  if (v4 == v3)
  {
    int v4 = (void **)a1[1];
  }
  else
  {
    unint64_t v5 = a1[4];
    unsigned __int8 v6 = &v3[v5 / 0x38];
    uint64_t v7 = (char *)*v6 + 72 * (v5 % 0x38);
    unint64_t v8 = (unint64_t)v3[(a1[5] + v5) / 0x38] + 72 * ((a1[5] + v5) % 0x38);
    if (v7 != (char *)v8)
    {
      do
      {
        std::allocator<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::destroy[abi:ne180100]((uint64_t)v2, v7);
        v7 += 72;
        if (v7 - (unsigned char *)*v6 == 4032)
        {
          unint64_t v9 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      uint64_t v3 = (void **)a1[1];
      int v4 = (void **)a1[2];
    }
  }
  void *v2 = 0;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      int v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 28;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 56;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    uint64_t v13 = *v3++;
    operator delete(v13);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

void std::allocator<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::destroy[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[4];
  if (v3)
  {
    a2[5] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a2[1];
  if (v4)
  {
    a2[2] = v4;
    operator delete(v4);
  }
}

uint64_t kaldi::LatticeWordAligner::GetStateForTuple(kaldi::LatticeWordAligner *this, int **a2, int a3)
{
  unsigned __int8 v6 = (char *)this + 160;
  uint64_t v7 = std::__hash_table<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,std::__unordered_map_hasher<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleHash,kaldi::LatticeWordAligner::TupleEqual,true>,std::__unordered_map_equal<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleEqual,kaldi::LatticeWordAligner::TupleHash,true>,std::allocator<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>>>::find<kaldi::LatticeWordAligner::Tuple>((void *)this + 20, a2);
  if (v7) {
    return *((unsigned int *)v7 + 20);
  }
  uint64_t v8 = (*(uint64_t (**)(void))(**((void **)this + 13) + 200))(*((void *)this + 13));
  unint64_t v10 = a2;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,std::__unordered_map_hasher<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleHash,kaldi::LatticeWordAligner::TupleEqual,true>,std::__unordered_map_equal<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleEqual,kaldi::LatticeWordAligner::TupleHash,true>,std::allocator<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>>>::__emplace_unique_key_args<kaldi::LatticeWordAligner::Tuple,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeWordAligner::Tuple const&>,std::tuple<>>((uint64_t)v6, a2, (uint64_t)&std::piecewise_construct, (_DWORD **)&v10)+ 20) = v8;
  if (a3)
  {
    LODWORD(v10) = *(_DWORD *)a2;
    kaldi::LatticeWordAligner::ComputationState::ComputationState((kaldi::LatticeWordAligner::ComputationState *)v11, (const kaldi::LatticeWordAligner::ComputationState *)(a2 + 1));
    int v14 = v8;
    std::deque<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::push_front((uint64_t)this + 112, &v10);
    if (__p)
    {
      uint64_t v13 = __p;
      operator delete(__p);
    }
    if (v11[0])
    {
      v11[1] = v11[0];
      operator delete(v11[0]);
    }
  }
  return v8;
}

void sub_1B1C56B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::LatticeWordAligner::RemoveEpsilonsFromLattice(kaldi::LatticeWordAligner *this)
{
  uint64_t v1 = *((void *)this + 13);
  int32x2_t v2 = vdup_n_s32(0x7F800000u);
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  std::string __p = 0;
  fst::RmEpsilon<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(v1);
}

void sub_1B1C56D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::LatticeWordAligner::ProcessQueueElement(kaldi::LatticeWordAligner *this)
{
  int32x2_t v2 = (void *)((char *)this + 112);
  unint64_t v3 = *((void *)this + 19) + *((void *)this + 18) - 1;
  uint64_t v4 = (_DWORD *)(*(void *)(*((void *)this + 15) + 8 * (v3 / 0x38)) + 72 * (v3 % 0x38));
  LODWORD(v48) = *v4;
  kaldi::LatticeWordAligner::ComputationState::ComputationState((kaldi::LatticeWordAligner::ComputationState *)v49, (const kaldi::LatticeWordAligner::ComputationState *)(v4 + 2));
  unint64_t v5 = *((void *)this + 19) + *((void *)this + 18) - 1;
  uint64_t v6 = *(unsigned int *)(*(void *)(*((void *)this + 15) + 8 * (v5 / 0x38)) + 72 * (v5 % 0x38) + 64);
  std::deque<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::pop_back(v2);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  int v39 = (int)v48;
  kaldi::LatticeWordAligner::ComputationState::ComputationState((kaldi::LatticeWordAligner::ComputationState *)v40, (const kaldi::LatticeWordAligner::ComputationState *)v49);
  if (kaldi::LatticeWordAligner::ComputationState::OutputArc((uint64_t)v49, (uint64_t)this + 32, *((kaldi::TransitionModel **)this + 2), (uint64_t)v43, (unsigned char *)this + 200))
  {
    int StateForTuple = kaldi::LatticeWordAligner::GetStateForTuple(this, &v48, 1);
    (*(void (**)(void, uint64_t, unsigned char *))(**((void **)this + 13) + 208))(*((void *)this + 13), v6, v43);
    goto LABEL_30;
  }
  uint64_t v7 = *(void *)(*(void *)(*((void *)this + 1) + 64) + 8 * (int)v48);
  uint64_t v29 = *(int **)v7;
  std::string v31 = 0;
  uint64_t v32 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v7 + 8), *(void *)(v7 + 16), (uint64_t)(*(void *)(v7 + 16) - *(void *)(v7 + 8)) >> 2);
  LODWORD(v23[0]) = v29;
  v28.i32[0] = 2139095040;
  float v52 = INFINITY;
  if (*(float *)&v29 != INFINITY)
  {
    int v8 = 1;
    unint64_t v9 = __p;
    if (!__p) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  unint64_t v9 = __p;
  if (*((float *)&v29 + 1) != v52 || v31 != __p)
  {
    int v8 = 1;
    if (!__p) {
      goto LABEL_6;
    }
LABEL_5:
    std::string v31 = v9;
    operator delete(v9);
    goto LABEL_6;
  }
  int v8 = 0;
  if (__p) {
    goto LABEL_5;
  }
LABEL_6:
  if (v8)
  {
    uint64_t v10 = *(void *)(*(void *)(*((void *)this + 1) + 64) + 8 * (int)v48);
    uint64_t v29 = *(int **)v10;
    std::string v31 = 0;
    uint64_t v32 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v10 + 8), *(void *)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 2);
    LODWORD(v23[0]) = v29;
    v28.i32[0] = 0;
    float v52 = 0.0;
    if (*(float *)&v29 == 0.0)
    {
      unint64_t v11 = __p;
      if (!__p)
      {
LABEL_10:
        int v35 = (int)v48;
        kaldi::LatticeWordAligner::ComputationState::ComputationState((kaldi::LatticeWordAligner::ComputationState *)v36, (const kaldi::LatticeWordAligner::ComputationState *)v49);
        kaldi::LatticeWordAligner::ProcessFinal((uint64_t)this, (uint64_t)&v35, v6);
        if (v37)
        {
          uint64_t v38 = v37;
          operator delete(v37);
        }
        if (v36[0])
        {
          v36[1] = v36[0];
          operator delete(v36[0]);
        }
        goto LABEL_14;
      }
    }
    else
    {
      unint64_t v11 = __p;
      if (!__p) {
        goto LABEL_10;
      }
    }
    std::string v31 = v11;
    operator delete(v11);
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v12 = *(void *)(*(void *)(*((void *)this + 1) + 64) + 8 * (int)v48);
  uint64_t v14 = *(void *)(v12 + 48);
  uint64_t v13 = *(void *)(v12 + 56);
  if (v13 == v14) {
    int v15 = 0;
  }
  else {
    int v15 = *(float32x2_t **)(v12 + 48);
  }
  if (v13 != v14)
  {
    if ((unint64_t)((v13 - v14) / 48) <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = (v13 - v14) / 48;
    }
    do
    {
      LODWORD(v29) = v48;
      kaldi::LatticeWordAligner::ComputationState::ComputationState((kaldi::LatticeWordAligner::ComputationState *)&__p, (const kaldi::LatticeWordAligner::ComputationState *)v49);
      kaldi::LatticeWordAligner::ComputationState::Advance((uint64_t)&__p, v15, &v28);
      LODWORD(v29) = v15[5].i32[0];
      int v17 = kaldi::LatticeWordAligner::GetStateForTuple(this, &v29, 1);
      uint64_t v18 = *((void *)this + 13);
      float32x2_t v19 = v28;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      unint64_t v20 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v20, 0, 0, 0);
      v23[0] = 0;
      v23[1] = v19;
      unsigned int v25 = 0;
      uint64_t v26 = 0;
      std::string::size_type v24 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, v20, (uint64_t)v21, (v21 - (unsigned char *)v20) >> 2);
      int v27 = v17;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v18 + 208))(v18, v6, v23);
      if (v24)
      {
        unsigned int v25 = v24;
        operator delete(v24);
      }
      if (v20)
      {
        uint64_t v21 = v20;
        operator delete(v20);
      }
      if (v33)
      {
        uint64_t v34 = v33;
        operator delete(v33);
      }
      if (__p)
      {
        std::string v31 = __p;
        operator delete(__p);
      }
      v15 += 6;
      --v16;
    }
    while (v16);
  }
LABEL_30:
  if (v41)
  {
    uint64_t v42 = v41;
    operator delete(v41);
  }
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
  if (v44)
  {
    uint64_t v45 = v44;
    operator delete(v44);
  }
  if (v50)
  {
    size_t v51 = v50;
    operator delete(v50);
  }
  if (v49[0])
  {
    v49[1] = v49[0];
    operator delete(v49[0]);
  }
}

void sub_1B1C57270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  kaldi::LatticeWordAligner::Tuple::~Tuple((kaldi::LatticeWordAligner::Tuple *)&a29);
  kaldi::LatticeWordAligner::Tuple::~Tuple((kaldi::LatticeWordAligner::Tuple *)&a37);
  int v39 = *(void **)(v37 - 192);
  if (v39)
  {
    *(void *)(v37 - 184) = v39;
    operator delete(v39);
  }
  kaldi::LatticeWordAligner::Tuple::~Tuple((kaldi::LatticeWordAligner::Tuple *)(v37 - 160));
  _Unwind_Resume(a1);
}

kaldi::LatticeWordAligner::ComputationState *kaldi::LatticeWordAligner::ComputationState::ComputationState(kaldi::LatticeWordAligner::ComputationState *this, const kaldi::LatticeWordAligner::ComputationState *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(this, *(const void **)a2, *((void *)a2 + 1), (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 2);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 2);
  *((void *)this + 6) = *((void *)a2 + 6);
  return this;
}

void sub_1B1C57374(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int64x2_t std::deque<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::push_front(uint64_t a1, _DWORD *a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    std::deque<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::__add_front_capacity((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0x38));
  unint64_t v7 = *v6 + 72 * (v4 % 0x38);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v8 == *v6) {
    uint64_t v8 = *(v6 - 1) + 4032;
  }
  *(_DWORD *)(v8 - 72) = *a2;
  kaldi::LatticeWordAligner::ComputationState::ComputationState((kaldi::LatticeWordAligner::ComputationState *)(v8 - 64), (const kaldi::LatticeWordAligner::ComputationState *)(a2 + 2));
  *(_DWORD *)(v8 - 8) = a2[16];
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1B255FD00);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,std::__unordered_map_hasher<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleHash,kaldi::LatticeWordAligner::TupleEqual,true>,std::__unordered_map_equal<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleEqual,kaldi::LatticeWordAligner::TupleHash,true>,std::allocator<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>>>::find<kaldi::LatticeWordAligner::Tuple>(void *a1, int **this)
{
  unint64_t v4 = (char *)(this + 1);
  uint64_t v5 = *(int *)this;
  uint64_t v6 = kaldi::LatticeWordAligner::ComputationState::Hash(this + 1);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v5 + 102763 * v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v8;
    if (v8 >= *(void *)&v7) {
      unint64_t v11 = v8 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v7 - 1) & v8;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  for (uint64_t i = *v12; i; uint64_t i = (uint64_t *)*i)
  {
    unint64_t v14 = i[1];
    if (v14 == v8)
    {
      if (*((_DWORD *)i + 4) == *(_DWORD *)this
        && kaldi::LatticeWordAligner::ComputationState::operator==((uint64_t)(i + 3), (uint64_t)v4))
      {
        return i;
      }
    }
    else
    {
      if (v10 > 1)
      {
        if (v14 >= *(void *)&v7) {
          v14 %= *(void *)&v7;
        }
      }
      else
      {
        v14 &= *(void *)&v7 - 1;
      }
      if (v14 != v11) {
        return 0;
      }
    }
  }
  return i;
}

uint64_t kaldi::LatticeWordAligner::ComputationState::Hash(int **this)
{
  uint64_t v1 = *this;
  int32x2_t v2 = this[1];
  if (*this == v2)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = *v1++;
      uint64_t v3 = v4 + 7853 * v3;
    }
    while (v1 != v2);
  }
  uint64_t v5 = this[3];
  uint64_t v6 = this[4];
  if (v5 == v6)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *v5++;
      uint64_t v7 = v8 + 7853 * v7;
    }
    while (v5 != v6);
    uint64_t v9 = 90647 * v7;
  }
  return v9 + v3;
}

BOOL kaldi::LatticeWordAligner::ComputationState::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)a1;
  size_t v6 = *(void *)(a1 + 8) - (void)v4;
  uint64_t v7 = *(const void **)a2;
  if (v6 == *(void *)(a2 + 8) - (void)v7
    && !memcmp(v4, v7, v6)
    && (uint64_t v9 = *(const void **)(a1 + 24),
        size_t v10 = *(void *)(a1 + 32) - (void)v9,
        unint64_t v11 = *(const void **)(a2 + 24),
        v10 == *(void *)(a2 + 32) - (void)v11)
    && !memcmp(v9, v11, v10)
    && *(float *)(a1 + 48) == *(float *)(a2 + 48))
  {
    return *(float *)(a1 + 52) == *(float *)(a2 + 52);
  }
  else
  {
    return 0;
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,std::__unordered_map_hasher<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleHash,kaldi::LatticeWordAligner::TupleEqual,true>,std::__unordered_map_equal<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleEqual,kaldi::LatticeWordAligner::TupleHash,true>,std::allocator<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>>>::__emplace_unique_key_args<kaldi::LatticeWordAligner::Tuple,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeWordAligner::Tuple const&>,std::tuple<>>(uint64_t a1, int **this, uint64_t a3, _DWORD **a4)
{
  uint64_t v9 = (char *)(this + 1);
  uint64_t v8 = *(int *)this;
  unint64_t v10 = v8 + 102763 * kaldi::LatticeWordAligner::ComputationState::Hash(this + 1);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    unint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v26 = a4;
      for (uint64_t i = *v14; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (*((_DWORD *)i + 4) == *(_DWORD *)this
            && kaldi::LatticeWordAligner::ComputationState::operator==((uint64_t)(i + 3), (uint64_t)v9))
          {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
      a4 = v26;
    }
  }
  std::__hash_table<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,std::__unordered_map_hasher<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleHash,kaldi::LatticeWordAligner::TupleEqual,true>,std::__unordered_map_equal<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleEqual,kaldi::LatticeWordAligner::TupleHash,true>,std::allocator<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<kaldi::LatticeWordAligner::Tuple const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v27);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  BOOL v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v27[0] = *v23;
    void *v23 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v24 = *(void *)(*(void *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v++*(_DWORD *)(result + 24) = v27[0];
    }
  }
  uint64_t i = (uint64_t *)v27[0];
  v27[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_1B1C57930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

kaldi::LatticeWordAligner::ComputationState *std::__hash_table<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,std::__unordered_map_hasher<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleHash,kaldi::LatticeWordAligner::TupleEqual,true>,std::__unordered_map_equal<kaldi::LatticeWordAligner::Tuple,std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,kaldi::LatticeWordAligner::TupleEqual,kaldi::LatticeWordAligner::TupleHash,true>,std::allocator<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<kaldi::LatticeWordAligner::Tuple const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x58uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  uint64_t v9 = (const kaldi::LatticeWordAligner::ComputationState *)(*a3 + 2);
  *((_DWORD *)v8 + 4) = **a3;
  int64x2_t result = kaldi::LatticeWordAligner::ComputationState::ComputationState((kaldi::LatticeWordAligner::ComputationState *)(v8 + 3), v9);
  *((_DWORD *)v8 + 20) = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1C579BC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<kaldi::LatticeWordAligner::Tuple,int>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int32x2_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<kaldi::LatticeWordAligner::Tuple const,int>,0>(v2 + 2);
    }
    operator delete(v2);
  }
}

void std::deque<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::__add_front_capacity(void **a1)
{
  int32x2_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 56 * v4 - 1;
  }
  size_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x38)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    uint64_t v8 = a1[3];
    uint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      uint64_t v46 = a1 + 3;
      std::string __p = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v7, v11);
      uint64_t v43 = (char *)__p;
      uint64_t v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      uint64_t v41 = operator new(0xFC0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&__p, &v41);
      unint64_t v13 = (char *)a1[1];
      unint64_t v14 = v44;
      if (v13 == a1[2])
      {
        uint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              unint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v46, v23);
              uint64_t v26 = v43;
              unint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                unint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                uint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)uint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              std::string v31 = __p;
              std::string __p = v24;
              uint64_t v43 = &v24[8 * (v23 >> 2)];
              uint64_t v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                unint64_t v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              unint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                unint64_t v14 = v43;
              }
              size_t v22 = &v14[-8 * (v19 >> 1)];
              unint64_t v14 = &v20[v21];
              uint64_t v43 = v22;
              uint64_t v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)unint64_t v14 = v32;
          unint64_t v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        uint64_t v33 = (char *)a1[1];
      }
      int v36 = *a1;
      uint64_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::string __p = v36;
      uint64_t v43 = v33;
      uint64_t v38 = (char *)a1[3];
      int v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      uint64_t v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 28;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 56;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        uint64_t v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        std::string __p = operator new(0xFC0uLL);
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &__p);
        uint64_t v34 = a1[2];
        std::string __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        std::string __p = operator new(0xFC0uLL);
      }
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 28;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 56;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 56;
    std::string __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &__p);
  }
}

void sub_1B1C57CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::RemoveSomeInputSymbols<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,int>(uint64_t a1, uint64_t a2)
{
  kaldi::ConstIntegerSet<int>::ConstIntegerSet((uint64_t)v7, a1);
  kaldi::ConstIntegerSet<int>::ConstIntegerSet((uint64_t)v3, (uint64_t)v7);
  fst::Map<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,int>>(a2, (uint64_t)v3);
  if (__p)
  {
    size_t v6 = __p;
    operator delete(__p);
  }
  if (v4) {
    operator delete(v4);
  }
  if (v9)
  {
    uint64_t v10 = v9;
    operator delete(v9);
  }
  if (v8) {
    operator delete(v8);
  }
}

void sub_1B1C57DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

void fst::Map<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,int>>(uint64_t a1, uint64_t a2)
{
  kaldi::ConstIntegerSet<int>::ConstIntegerSet((uint64_t)v3, a2);
  fst::ArcMap<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,int>>(a1, (uint64_t)v3);
  if (__p)
  {
    size_t v6 = __p;
    operator delete(__p);
  }
  if (v4) {
    operator delete(v4);
  }
}

void sub_1B1C57E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::ConstIntegerSet<int>::ConstIntegerSet(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 40), *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  std::__sort<std::__less<int,int> &,int *>();
  uint64_t v3 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::__equal_to &>(*(int **)(a1 + 40), *(int **)(a1 + 48));
  if (*(int **)(a1 + 48) != v3) {
    *(void *)(a1 + 48) = v3;
  }
  kaldi::ConstIntegerSet<int>::InitInternal((int *)a1);
  return a1;
}

{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 40), *(const void **)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 2);
  kaldi::ConstIntegerSet<int>::InitInternal((int *)a1);
  return a1;
}

void sub_1B1C57F18(_Unwind_Exception *exception_object)
{
  if (*v1) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,int>>(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, void))(*(void *)a1 + 280))(a1, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v5 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 296))(a1, v5, v25);
        while (!(*(unsigned int (**)(void))(*(void *)v25[0] + 24))(v25[0]))
        {
          uint64_t v6 = (*(uint64_t (**)(void))(*(void *)v25[0] + 32))(v25[0]);
          fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,int>::operator()(a2, v6, (uint64_t)v30);
          (*(void (**)(void, void *))(*(void *)v25[0] + 88))(v25[0], v30);
          if (v31)
          {
            uint64_t v32 = v31;
            operator delete(v31);
          }
          (*(void (**)(void))(*(void *)v25[0] + 40))(v25[0]);
        }
        if (v25[0]) {
          (*(void (**)(void))(*(void *)v25[0] + 8))();
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v22, a1, v5);
        v25[0] = 0;
        v25[1] = v22;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        std::string __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v23, (uint64_t)v24, (v24 - (unsigned char *)v23) >> 2);
        int v29 = -1;
        fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,int>::operator()(a2, (uint64_t)v25, (uint64_t)v30);
        if (__p)
        {
          uint64_t v27 = __p;
          operator delete(__p);
        }
        if (v23)
        {
          unint64_t v24 = v23;
          operator delete(v23);
        }
        if (!v30[0]) {
          goto LABEL_26;
        }
        int v7 = FLAGS_fst_error_fatal;
        if (FLAGS_fst_error_fatal)
        {
          std::string::basic_string[abi:ne180100]<0>(v19, "FATAL");
          uint64_t v8 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)v19);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v16, "ERROR");
          uint64_t v8 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)v16);
        }
        uint64_t v9 = (void *)fst::cerr(v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ArcMap: non-zero arc labels for superfinal arc", 46);
        if (v7)
        {
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
          if (v20 < 0)
          {
            uint64_t v10 = (void *)v19[0];
LABEL_24:
            operator delete(v10);
          }
        }
        else
        {
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v18);
          if (v17 < 0)
          {
            uint64_t v10 = v16[0];
            goto LABEL_24;
          }
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4, 4);
LABEL_26:
        uint64_t v12 = v30[1];
        unint64_t v14 = 0;
        uint64_t v15 = 0;
        unint64_t v13 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v13, v31, (uint64_t)v32, (v32 - v31) >> 2);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 184))(a1, v5, &v12);
        if (v13)
        {
          unint64_t v14 = v13;
          operator delete(v13);
        }
        if (v31)
        {
          uint64_t v32 = v31;
          operator delete(v31);
        }
        uint64_t v5 = (v5 + 1);
      }
      while ((int)v5 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192))(a1, v11 & 0xFFFFFFFFCD70FFFFLL, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1B1C583F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a23);
  if (a19 < 0) {
    operator delete(__p);
  }
  uint64_t v43 = *(void **)(v41 - 120);
  if (v43)
  {
    *(void *)(v41 - 112) = v43;
    operator delete(v43);
  }
  _Unwind_Resume(a1);
}

BOOL fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,int>::operator()@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = *(void *)a2;
  *(void *)(a3 + 8) = *(void *)(a2 + 8);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a3 + 32) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a3 + 16), *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  *(_DWORD *)(a3 + 40) = *(_DWORD *)(a2 + 40);
  BOOL result = kaldi::ConstIntegerSet<int>::count(a1, *(_DWORD *)a3);
  if (result) {
    *(_DWORD *)a3 = 0;
  }
  return result;
}

void sub_1B1C58584(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + ++*(_DWORD *)(result + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1C58600(_Unwind_Exception *exception_object)
{
  unint64_t v4 = v2;
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 48) = v6;
    operator delete(v6);
  }
  if (*v3) {
    operator delete(*v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ProjectMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 1 || ((*(void (**)(uint64_t, void))(*(void *)a1 + 280))(a1, 0), *a2 != 2)) {
    (*(void (**)(uint64_t, void))(*(void *)a1 + 288))(a1, 0);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    unint64_t v13 = (fst *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v5 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 296))(a1, v5, &v27);
        while (!(*(unsigned int (**)(uint64_t))(*(void *)v27 + 24))(v27))
        {
          uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 32))(v27);
          fst::ProjectMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::operator()(a2, v6, (uint64_t)&v33);
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v27 + 88))(v27, &v33);
          if (v35)
          {
            int v36 = v35;
            operator delete(v35);
          }
          (*(void (**)(uint64_t))(*(void *)v27 + 40))(v27);
        }
        if (v27) {
          (*(void (**)(void))(*(void *)v27 + 8))();
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v24, a1, v5);
        uint64_t v27 = 0;
        uint64_t v28 = v24;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        std::string __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v25, (uint64_t)v26, (v26 - (unsigned char *)v25) >> 2);
        int v32 = -1;
        if (*a2 == 1) {
          int v7 = &v27;
        }
        else {
          int v7 = (uint64_t *)((char *)&v27 + 4);
        }
        LODWORD(v33) = *(_DWORD *)v7;
        HIDWORD(v33) = v33;
        uint64_t v34 = v28;
        int v36 = 0;
        uint64_t v37 = 0;
        uint64_t v35 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v35, __p, (uint64_t)v30, (v30 - (unsigned char *)__p) >> 2);
        int v38 = -1;
        if (__p)
        {
          uint64_t v30 = __p;
          operator delete(__p);
        }
        if (v25)
        {
          uint64_t v26 = v25;
          operator delete(v25);
        }
        if (!v33) {
          goto LABEL_32;
        }
        int v8 = FLAGS_fst_error_fatal;
        if (FLAGS_fst_error_fatal)
        {
          std::string::basic_string[abi:ne180100]<0>(v21, "FATAL");
          uint64_t v9 = fst::LogMessage::LogMessage((fst *)&v23, (uint64_t)v21);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v18, "ERROR");
          uint64_t v9 = fst::LogMessage::LogMessage((fst *)&v20, (uint64_t)v18);
        }
        uint64_t v10 = (void *)fst::cerr(v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ArcMap: non-zero arc labels for superfinal arc", 46);
        if (v8)
        {
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v23);
          if (v22 < 0)
          {
            uint64_t v11 = (void *)v21[0];
LABEL_30:
            operator delete(v11);
          }
        }
        else
        {
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v20);
          if (v19 < 0)
          {
            uint64_t v11 = v18[0];
            goto LABEL_30;
          }
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4, 4);
LABEL_32:
        uint64_t v14 = v34;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v15 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v15, v35, (uint64_t)v36, (v36 - v35) >> 2);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 184))(a1, v5, &v14);
        if (v15)
        {
          uint64_t v16 = v15;
          operator delete(v15);
        }
        if (v35)
        {
          int v36 = v35;
          operator delete(v35);
        }
        uint64_t v5 = (v5 + 1);
      }
      while ((int)v5 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    unint64_t v12 = fst::ProjectProperties((unint64_t)v13, *a2 == 1);
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192))(a1, v12, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1B1C58B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a23);
  if (a19 < 0) {
    operator delete(__p);
  }
  uint64_t v43 = *(void **)(v41 - 120);
  if (v43)
  {
    *(void *)(v41 - 112) = v43;
    operator delete(v43);
  }
  _Unwind_Resume(a1);
}

void *fst::ProjectMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::operator()@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 == 1) {
    unint64_t v4 = (int *)a2;
  }
  else {
    unint64_t v4 = (int *)(a2 + 4);
  }
  int v5 = *v4;
  int v6 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)a3 = v5;
  *(_DWORD *)(a3 + 4) = v5;
  *(void *)(a3 + 8) = *(void *)(a2 + 8);
  *(void *)(a3 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a3 + 16), *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  *(_DWORD *)(a3 + 40) = v6;
  return result;
}

uint64_t std::deque<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::pop_back(void *a1)
{
  int32x2_t v2 = a1 + 5;
  unint64_t v3 = a1[5] + a1[4] - 1;
  std::allocator<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::destroy[abi:ne180100]((uint64_t)(a1 + 5), (void *)(*(void *)(a1[1] + 8 * (v3 / 0x38)) + 72 * (v3 % 0x38)));
  --*v2;
  return std::deque<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t kaldi::LatticeWordAligner::ComputationState::OutputArc(uint64_t a1, uint64_t a2, kaldi::TransitionModel *a3, uint64_t a4, unsigned char *a5)
{
  if ((kaldi::LatticeWordAligner::ComputationState::OutputUnpronouncedWordArc(a1, a2, (uint64_t)a3, a4) & 1) != 0
    || (kaldi::LatticeWordAligner::ComputationState::OutputNormalWordArc(a1, a2, a3, a4, a5) & 1) != 0
    || (kaldi::LatticeWordAligner::ComputationState::OutputSilenceArc(a1, a2, a3, a4, a5) & 1) != 0)
  {
    return 1;
  }
  return kaldi::LatticeWordAligner::ComputationState::OutputOnePhoneWordArc(a1, a2, a3, a4, a5);
}

void kaldi::LatticeWordAligner::ProcessFinal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 8) != *(void *)(a2 + 16) || *(void *)(a2 + 32) != *(void *)(a2 + 40))
  {
    std::string __p = 0;
    char v23 = 0;
    uint64_t v24 = 0;
    kaldi::LatticeWordAligner::ComputationState::OutputArcForce(a2 + 8, a1 + 32, *(kaldi::TransitionModel **)(a1 + 16), (uint64_t)&v20, (unsigned char *)(a1 + 200));
    int StateForTuple = kaldi::LatticeWordAligner::GetStateForTuple((kaldi::LatticeWordAligner *)a1, (int **)a2, 1);
    (*(void (**)(void, uint64_t, uint64_t *))(**(void **)(a1 + 104) + 208))(*(void *)(a1 + 104), a3, &v20);
    int v6 = __p;
    if (!__p) {
      return;
    }
    char v23 = __p;
    goto LABEL_5;
  }
  uint64_t v20 = *(void *)(a2 + 56);
  std::string __p = 0;
  char v23 = 0;
  char v21 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, 0, 0, 0);
  uint64_t v7 = *(void *)(a1 + 104);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v7 + 32))(&v26, v7, a3);
  if ((float)(*(float *)&v26 + *((float *)&v26 + 1)) < (float)(*(float *)&v20 + *((float *)&v20 + 1))) {
    goto LABEL_10;
  }
  if ((float)(*(float *)&v26 + *((float *)&v26 + 1)) > (float)(*(float *)&v20 + *((float *)&v20 + 1))) {
    goto LABEL_13;
  }
  if (*(float *)&v26 < *(float *)&v20)
  {
LABEL_10:
    int v8 = &v26;
    goto LABEL_14;
  }
  if (*(float *)&v26 > *(float *)&v20) {
    goto LABEL_13;
  }
  uint64_t v9 = (int *)v27;
  unint64_t v10 = (unint64_t)(v28 - (unsigned char *)v27) >> 2;
  uint64_t v11 = v21;
  unint64_t v12 = (unint64_t)((unsigned char *)__p - (unsigned char *)v21) >> 2;
  if ((int)v10 > (int)v12) {
    goto LABEL_13;
  }
  int v8 = &v26;
  if ((int)v10 >= 1 && (int)v10 >= (int)v12)
  {
    uint64_t v14 = ((unint64_t)(v28 - (unsigned char *)v27) >> 2) - 1;
    while (1)
    {
      int v16 = *v9++;
      int v15 = v16;
      int v18 = *v11++;
      int v17 = v18;
      if (v15 < v18) {
        break;
      }
      BOOL v19 = v15 > v17 || v14-- == 0;
      int v8 = &v26;
      if (v19) {
        goto LABEL_14;
      }
    }
LABEL_13:
    int v8 = &v20;
  }
LABEL_14:
  int v13 = *((_DWORD *)v8 + 1);
  v29[0] = *(_DWORD *)v8;
  v29[1] = v13;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v30, (const void *)v8[1], v8[2], (v8[2] - v8[1]) >> 2);
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)v7 + 184))(v7, a3, v29);
  if (v30)
  {
    uint64_t v31 = v30;
    operator delete(v30);
  }
  if (v27)
  {
    uint64_t v28 = v27;
    operator delete(v27);
  }
  int v6 = v21;
  if (v21)
  {
    std::string __p = v21;
LABEL_5:
    operator delete(v6);
  }
}

void sub_1B1C59030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  BOOL v19 = *(void **)(v17 - 56);
  if (v19)
  {
    *(void *)(v17 - 48) = v19;
    operator delete(v19);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a10) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

float32x2_t kaldi::LatticeWordAligner::ComputationState::Advance(uint64_t a1, float32x2_t *a2, float32x2_t *a3)
{
  std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)a1, *(void *)(a1 + 8), *(char **)&a2[2], *(char **)&a2[3], (uint64_t)(*(void *)&a2[3] - *(void *)&a2[2]) >> 2);
  __int32 v6 = a2->i32[0];
  if (a2->i32[0])
  {
    unint64_t v7 = *(void *)(a1 + 40);
    int v8 = *(char **)(a1 + 32);
    if ((unint64_t)v8 >= v7)
    {
      unint64_t v10 = *(char **)(a1 + 24);
      uint64_t v11 = (v8 - v10) >> 2;
      if ((unint64_t)(v11 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = v7 - (void)v10;
      unint64_t v13 = (uint64_t)(v7 - (void)v10) >> 1;
      if (v13 <= v11 + 1) {
        unint64_t v13 = v11 + 1;
      }
      if (v12 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14)
      {
        int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 40, v14);
        unint64_t v10 = *(char **)(a1 + 24);
        int v8 = *(char **)(a1 + 32);
        __int32 v6 = a2->i32[0];
      }
      else
      {
        int v15 = 0;
      }
      int v16 = (__int32 *)&v15[4 * v11];
      uint64_t v17 = &v15[4 * v14];
      __int32 *v16 = v6;
      uint64_t v9 = v16 + 1;
      while (v8 != v10)
      {
        __int32 v18 = *((_DWORD *)v8 - 1);
        v8 -= 4;
        *--int v16 = v18;
      }
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = v16;
      *(void *)(a1 + 32) = v9;
      *(void *)(a1 + 40) = v17;
      if (v10) {
        operator delete(v10);
      }
    }
    else
    {
      *(_DWORD *)int v8 = v6;
      uint64_t v9 = v8 + 4;
    }
    *(void *)(a1 + 32) = v9;
  }
  float32x2_t result = vadd_f32(*(float32x2_t *)(a1 + 48), a2[1]);
  *a3 = result;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t std::deque<std::pair<kaldi::LatticeWordAligner::Tuple,int>>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 56 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x38) {
    a2 = 1;
  }
  if (v5 < 0x70) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void *fst::operator<<<fst::LatticeWeightTpl<float>,int>(void *a1, uint64_t a2)
{
  fst::operator<<<float>(a1, (float *)a2);
  char v4 = strlen(FLAGS_fst_weight_separator) == 1;
  FstCheck(v4, "strlen(FLAGS_fst_weight_separator) == 1", "../libquasar/libkaldi/src/fstext/lattice-weight.h");
  char v8 = *FLAGS_fst_weight_separator;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v8, 1);
  if (*(void *)(a2 + 16) != *(void *)(a2 + 8))
  {
    unint64_t v5 = 0;
    do
    {
      std::ostream::operator<<();
      ++v5;
      uint64_t v6 = *(void *)(a2 + 16) - *(void *)(a2 + 8);
      if (v5 < v6 >> 2)
      {
        char v9 = 95;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v9, 1);
        uint64_t v6 = *(void *)(a2 + 16) - *(void *)(a2 + 8);
      }
    }
    while (v5 < v6 >> 2);
  }
  return a1;
}

void *fst::operator<<<float>(void *a1, float *a2)
{
  if (*a2 == INFINITY)
  {
    char v4 = "Infinity";
    uint64_t v5 = 8;
LABEL_5:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v4, v5);
    goto LABEL_6;
  }
  if (*a2 == -INFINITY)
  {
    char v4 = "-Infinity";
    uint64_t v5 = 9;
    goto LABEL_5;
  }
  std::ostream::operator<<();
LABEL_6:
  char v6 = strlen(FLAGS_fst_weight_separator) == 1;
  FstCheck(v6, "strlen(FLAGS_fst_weight_separator) == 1", "../libquasar/libkaldi/src/fstext/lattice-weight.h");
  char v12 = *FLAGS_fst_weight_separator;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v12, 1);
  float v7 = a2[1];
  if (v7 == INFINITY)
  {
    char v8 = "Infinity";
    char v9 = a1;
    uint64_t v10 = 8;
  }
  else
  {
    if (v7 != -INFINITY)
    {
      std::ostream::operator<<();
      return a1;
    }
    char v8 = "-Infinity";
    char v9 = a1;
    uint64_t v10 = 9;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v8, v10);
  return a1;
}

void fst::ArcSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1)
{
  uint64_t v3 = a1;
  char v4 = &v6;
  memset(v5, 0, sizeof(v5));
  v1[0] = a1;
  v1[1] = (uint64_t)&v6;
  memset(v2, 0, sizeof(v2));
  fst::StateMap<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(a1, v1);
  float v7 = (void **)v2;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  float v7 = (void **)v5;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_1B1C594E0(_Unwind_Exception *a1)
{
  uint64_t v4 = v1;
  *(void *)(v3 - 40) = v2;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  *(void *)(v3 - 40) = v4;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  _Unwind_Resume(a1);
}

uint64_t fst::StateMap<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v7 = 0;
      do
      {
        fst::ArcSortMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 240))(a1, v7);
        for (unint64_t i = a2[5]; ; a2[5] = i)
        {
          uint64_t v9 = a2[2];
          if (i >= 0xAAAAAAAAAAAAAAABLL * ((a2[3] - v9) >> 4)) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)a1 + 208))(a1, v7, v9 + 48 * i);
          unint64_t i = a2[5] + 1;
        }
        (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 32))(&v10);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 184))(a1, v7, &v10);
        if (__p)
        {
          char v12 = __p;
          operator delete(__p);
        }
        uint64_t v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192))(a1, v5 & 0x3FFF0FFF0007 | (((v5 >> 16) & 1) << 30) | 0x10000000, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1B1C597C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ArcSortMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetState(uint64_t *a1, uint64_t a2)
{
  a1[5] = 0;
  uint64_t v4 = a1 + 2;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](a1 + 2);
  unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, a2);
  std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::reserve(v4, v5);
  uint64_t v6 = *a1;
  unint64_t v16 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v6 + 136))(v6, a2, v14);
  while (1)
  {
    if (!v14[0])
    {
      if (v16 >= v14[2]) {
        goto LABEL_16;
      }
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(void))(*(void *)v14[0] + 24))(v14[0])) {
      break;
    }
    if (v14[0])
    {
      uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v14[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v7 = v14[1] + 48 * v16;
LABEL_8:
    unint64_t v8 = a1[3];
    if (v8 >= a1[4])
    {
      uint64_t v9 = std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__push_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>(v4, v7);
    }
    else
    {
      std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__construct_one_at_end[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>((uint64_t)v4, v7);
      uint64_t v9 = v8 + 48;
    }
    a1[3] = v9;
    if (v14[0]) {
      (*(void (**)(void))(*(void *)v14[0] + 40))(v14[0]);
    }
    else {
      ++v16;
    }
  }
  if (v14[0])
  {
    (*(void (**)(void))(*(void *)v14[0] + 8))();
    goto LABEL_18;
  }
LABEL_16:
  if (v15) {
    --*v15;
  }
LABEL_18:
  unint64_t v10 = a1[2];
  uint64_t v11 = (uint64_t *)a1[3];
  unint64_t v12 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v11 - v10) >> 4));
  if (v11 == (uint64_t *)v10) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*,false>(v10, v11, (uint64_t)v14, v13, 1);
}

void sub_1B1C599F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::Reverse<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*,false>(unint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
void sub_1B1C59E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  BOOL v25 = *(void **)(v23 - 120);
  if (v25)
  {
    *(void *)(v23 - 112) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(void *a1, void *a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = a1 + 6;
    if (a1 + 6 != a2)
    {
      uint64_t v4 = 0;
      char v5 = a1;
      do
      {
        char v6 = v3;
        uint64_t v37 = v5[6];
        uint64_t v38 = v5[7];
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        int v39 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v39, (const void *)v5[8], v5[9], (uint64_t)(v5[9] - v5[8]) >> 2);
        int v42 = *((_DWORD *)v5 + 22);
        uint64_t v31 = *v5;
        uint64_t v32 = v5[1];
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        std::string __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)v5[2], v5[3], (uint64_t)(v5[3] - v5[2]) >> 2);
        int v36 = *((_DWORD *)v5 + 10);
        int v7 = v37;
        int v8 = v31;
        if (__p)
        {
          uint64_t v34 = __p;
          operator delete(__p);
        }
        if (v39)
        {
          uint64_t v40 = v39;
          operator delete(v39);
        }
        if (v7 < v8)
        {
          uint64_t v25 = *v6;
          uint64_t v26 = v5[7];
          int v28 = 0;
          uint64_t v29 = 0;
          uint64_t v27 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v27, (const void *)v5[8], v5[9], (uint64_t)(v5[9] - v5[8]) >> 2);
          int v30 = *((_DWORD *)v5 + 22);
          for (uint64_t i = v4; ; i -= 48)
          {
            *(void *)((char *)a1 + i + 48) = *(void *)((char *)a1 + i);
            fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)a1 + i + 56, (uint64_t)a1 + i + 8);
            *(_DWORD *)((char *)a1 + i + 88) = *(_DWORD *)((char *)a1 + i + 40);
            if (!i)
            {
              unint64_t v11 = a1;
              goto LABEL_19;
            }
            uint64_t v19 = v25;
            uint64_t v20 = v26;
            int v22 = 0;
            uint64_t v23 = 0;
            uint64_t v21 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, v27, (uint64_t)v28, (v28 - (unsigned char *)v27) >> 2);
            int v24 = v30;
            uint64_t v14 = *(void *)((char *)a1 + i - 48);
            unint64_t v16 = 0;
            uint64_t v17 = 0;
            unint64_t v15 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v15, *(const void **)((char *)a1 + i - 32), *(void *)((char *)a1 + i - 24), (uint64_t)(*(void *)((char *)a1 + i - 24) - *(void *)((char *)a1 + i - 32)) >> 2);
            int v18 = *(_DWORD *)((char *)a1 + i - 8);
            int v10 = v19;
            if (v15)
            {
              unint64_t v16 = v15;
              operator delete(v15);
            }
            if (v21)
            {
              int v22 = v21;
              operator delete(v21);
            }
            if (v10 >= (int)v14) {
              break;
            }
          }
          unint64_t v11 = (void *)((char *)a1 + i);
LABEL_19:
          *unint64_t v11 = v25;
          int v12 = HIDWORD(v26);
          *(_DWORD *)((char *)a1 + i + 8) = v26;
          *((_DWORD *)v11 + 3) = v12;
          if (v11 != &v25) {
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v11 + 16, (char *)v27, (uint64_t)v28, (v28 - (unsigned char *)v27) >> 2);
          }
          *((_DWORD *)v11 + 10) = v30;
          if (v27)
          {
            int v28 = v27;
            operator delete(v27);
          }
        }
        uint64_t v3 = v6 + 6;
        v4 += 48;
        char v5 = v6;
      }
      while (v6 + 6 != a2);
    }
  }
}

void sub_1B1C5A120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(uint64_t a1, void *a2)
{
  if ((void *)a1 != a2)
  {
    uint64_t v2 = (void *)a1;
    uint64_t v3 = (void *)(a1 + 48);
    if ((void *)(a1 + 48) != a2)
    {
      uint64_t v4 = (_DWORD *)(a1 + 88);
      do
      {
        char v5 = v3;
        uint64_t v34 = v2[6];
        uint64_t v35 = v2[7];
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        int v36 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v36, (const void *)v2[8], v2[9], (uint64_t)(v2[9] - v2[8]) >> 2);
        int v39 = *((_DWORD *)v2 + 22);
        uint64_t v28 = *v2;
        uint64_t v29 = v2[1];
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        std::string __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)v2[2], v2[3], (uint64_t)(v2[3] - v2[2]) >> 2);
        int v33 = *((_DWORD *)v2 + 10);
        int v6 = v34;
        int v7 = v28;
        if (__p)
        {
          uint64_t v31 = __p;
          operator delete(__p);
        }
        if (v36)
        {
          uint64_t v37 = v36;
          operator delete(v36);
        }
        if (v6 < v7)
        {
          uint64_t v22 = *v5;
          uint64_t v23 = v2[7];
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          int v24 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, (const void *)v2[8], v2[9], (uint64_t)(v2[9] - v2[8]) >> 2);
          int v27 = *((_DWORD *)v2 + 22);
          int v8 = v4;
          do
          {
            *((void *)v8 - 5) = *((void *)v8 - 11);
            fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v8 - 8), (uint64_t)(v8 - 20));
            *int v8 = *(v8 - 12);
            uint64_t v16 = v22;
            uint64_t v17 = v23;
            uint64_t v19 = 0;
            uint64_t v20 = 0;
            int v18 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v18, v24, (uint64_t)v25, (v25 - (unsigned char *)v24) >> 2);
            int v21 = v27;
            uint64_t v11 = *((void *)v8 - 17);
            uint64_t v13 = 0;
            uint64_t v14 = 0;
            int v12 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v12, *((const void **)v8 - 15), *((void *)v8 - 14), (uint64_t)(*((void *)v8 - 14) - *((void *)v8 - 15)) >> 2);
            int v15 = *(v8 - 24);
            int v9 = v16;
            if (v12)
            {
              uint64_t v13 = v12;
              operator delete(v12);
            }
            if (v18)
            {
              uint64_t v19 = v18;
              operator delete(v18);
            }
            v8 -= 12;
          }
          while (v9 < (int)v11);
          *((void *)v8 - 5) = v22;
          *((void *)v8 - 4) = v23;
          if (v8 - 10 != (_DWORD *)&v22) {
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v8 - 24, (char *)v24, (uint64_t)v25, (v25 - (unsigned char *)v24) >> 2);
          }
          *int v8 = v27;
          if (v24)
          {
            uint64_t v25 = v24;
            operator delete(v24);
          }
        }
        uint64_t v3 = v5 + 6;
        v4 += 12;
        uint64_t v2 = v5;
      }
      while (v5 + 6 != a2);
    }
  }
}

void sub_1B1C5A3EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v67 = *(void *)a2;
  uint64_t v68 = *(void *)(a2 + 8);
  long long v70 = 0;
  uint64_t v71 = 0;
  long long v69 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v69, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  int v72 = *(_DWORD *)(a2 + 40);
  uint64_t v61 = *(void *)a1;
  uint64_t v62 = *(void *)(a1 + 8);
  unint64_t v64 = 0;
  uint64_t v65 = 0;
  unsigned __int8 v63 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v63, *(const void **)(a1 + 16), *(void *)(a1 + 24), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
  int v66 = *(_DWORD *)(a1 + 40);
  int v6 = v67;
  if (v63)
  {
    unint64_t v64 = v63;
    operator delete(v63);
  }
  if (v69)
  {
    long long v70 = v69;
    operator delete(v69);
  }
  if (v6 < (int)v61)
  {
    uint64_t v31 = *(void *)a3;
    uint64_t v32 = *(void *)(a3 + 8);
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    int v33 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v33, *(const void **)(a3 + 16), *(void *)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 2);
    int v36 = *(_DWORD *)(a3 + 40);
    uint64_t v25 = *(void *)a2;
    uint64_t v26 = *(void *)(a2 + 8);
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
    int v30 = *(_DWORD *)(a2 + 40);
    int v7 = v31;
    if (__p)
    {
      uint64_t v28 = __p;
      operator delete(__p);
    }
    if (v33)
    {
      uint64_t v34 = v33;
      operator delete(v33);
    }
    if (v7 < (int)v25)
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, (uint64_t *)a3);
      return 1;
    }
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, (uint64_t *)a2);
    uint64_t v19 = *(void *)a3;
    uint64_t v20 = *(void *)(a3 + 8);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v21 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, *(const void **)(a3 + 16), *(void *)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 2);
    int v24 = *(_DWORD *)(a3 + 40);
    uint64_t v14 = *(void *)a2;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v15 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v15, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
    int v18 = *(_DWORD *)(a2 + 40);
    int v12 = v19;
    if (v15)
    {
      uint64_t v16 = v15;
      operator delete(v15);
    }
    if (v21)
    {
      uint64_t v22 = v21;
      operator delete(v21);
    }
    if (v12 >= (int)v14) {
      return 1;
    }
    int v10 = (uint64_t *)a2;
    uint64_t v11 = (uint64_t *)a3;
LABEL_29:
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(v10, v11);
    return 2;
  }
  uint64_t v55 = *(void *)a3;
  uint64_t v56 = *(void *)(a3 + 8);
  std::__wrap_iter<const char *> v58 = 0;
  uint64_t v59 = 0;
  std::__wrap_iter<const char *> v57 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v57, *(const void **)(a3 + 16), *(void *)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 2);
  int v60 = *(_DWORD *)(a3 + 40);
  uint64_t v49 = *(void *)a2;
  uint64_t v50 = *(void *)(a2 + 8);
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  size_t v51 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v51, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  int v54 = *(_DWORD *)(a2 + 40);
  int v8 = v55;
  if (v51)
  {
    uint64_t v52 = v51;
    operator delete(v51);
  }
  if (v57)
  {
    std::__wrap_iter<const char *> v58 = v57;
    operator delete(v57);
  }
  if (v8 < (int)v49)
  {
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a2, (uint64_t *)a3);
    uint64_t v43 = *(void *)a2;
    uint64_t v44 = *(void *)(a2 + 8);
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v45 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v45, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
    int v48 = *(_DWORD *)(a2 + 40);
    uint64_t v37 = *(void *)a1;
    uint64_t v38 = *(void *)(a1 + 8);
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    int v39 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v39, *(const void **)(a1 + 16), *(void *)(a1 + 24), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
    int v42 = *(_DWORD *)(a1 + 40);
    int v9 = v43;
    if (v39)
    {
      uint64_t v40 = v39;
      operator delete(v39);
    }
    if (v45)
    {
      uint64_t v46 = v45;
      operator delete(v45);
    }
    if (v9 >= (int)v37) {
      return 1;
    }
    int v10 = (uint64_t *)a1;
    uint64_t v11 = (uint64_t *)a2;
    goto LABEL_29;
  }
  return 0;
}

void sub_1B1C5A7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &>(unint64_t a1, uint64_t *a2)
{
  uint64_t v85 = *(void *)a1;
  uint64_t v4 = a1 + 8;
  uint64_t v86 = *(void *)(a1 + 8);
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  int v87 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v87, *(const void **)(a1 + 16), *(void *)(a1 + 24), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
  int v90 = *(_DWORD *)(a1 + 40);
  uint64_t v79 = v85;
  uint64_t v80 = v86;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  char v81 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v81, v87, (uint64_t)v88, (v88 - (unsigned char *)v87) >> 2);
  int v84 = v90;
  uint64_t v73 = *(a2 - 6);
  uint64_t v74 = *(a2 - 5);
  long long v76 = 0;
  uint64_t v77 = 0;
  long long v75 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v75, (const void *)*(a2 - 4), *(a2 - 3), (*(a2 - 3) - *(a2 - 4)) >> 2);
  int v78 = *((_DWORD *)a2 - 2);
  int v5 = v79;
  if (v75)
  {
    long long v76 = v75;
    operator delete(v75);
  }
  if (v81)
  {
    uint64_t v82 = v81;
    operator delete(v81);
  }
  if (v5 >= (int)v73)
  {
    for (unint64_t i = a1 + 48; i < (unint64_t)a2; i += 48)
    {
      uint64_t v55 = v85;
      uint64_t v56 = v86;
      std::__wrap_iter<const char *> v58 = 0;
      uint64_t v59 = 0;
      std::__wrap_iter<const char *> v57 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v57, v87, (uint64_t)v88, (v88 - (unsigned char *)v87) >> 2);
      int v60 = v90;
      uint64_t v49 = *(void *)i;
      uint64_t v50 = *(void *)(i + 8);
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      size_t v51 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v51, *(const void **)(i + 16), *(void *)(i + 24), (uint64_t)(*(void *)(i + 24) - *(void *)(i + 16)) >> 2);
      int v54 = *(_DWORD *)(i + 40);
      int v8 = v55;
      if (v51)
      {
        uint64_t v52 = v51;
        operator delete(v51);
      }
      if (v57)
      {
        std::__wrap_iter<const char *> v58 = v57;
        operator delete(v57);
      }
      if (v8 < (int)v49) {
        break;
      }
    }
  }
  else
  {
    unint64_t i = a1;
    do
    {
      uint64_t v67 = v85;
      uint64_t v68 = v86;
      long long v70 = 0;
      uint64_t v71 = 0;
      long long v69 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v69, v87, (uint64_t)v88, (v88 - (unsigned char *)v87) >> 2);
      int v72 = v90;
      uint64_t v61 = *(void *)(i + 48);
      uint64_t v62 = *(void *)(i + 56);
      unint64_t v64 = 0;
      uint64_t v65 = 0;
      std::string __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(i + 64), *(void *)(i + 72), (uint64_t)(*(void *)(i + 72) - *(void *)(i + 64)) >> 2);
      int v66 = *(_DWORD *)(i + 88);
      int v7 = v67;
      if (__p)
      {
        unint64_t v64 = __p;
        operator delete(__p);
      }
      if (v69)
      {
        long long v70 = v69;
        operator delete(v69);
      }
      i += 48;
    }
    while (v7 >= (int)v61);
  }
  if (i < (unint64_t)a2)
  {
    do
    {
      uint64_t v43 = v85;
      uint64_t v44 = v86;
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      uint64_t v45 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v45, v87, (uint64_t)v88, (v88 - (unsigned char *)v87) >> 2);
      int v48 = v90;
      uint64_t v37 = *(a2 - 6);
      uint64_t v38 = *(a2 - 5);
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      int v39 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v39, (const void *)*(a2 - 4), *(a2 - 3), (*(a2 - 3) - *(a2 - 4)) >> 2);
      int v42 = *((_DWORD *)a2 - 2);
      int v9 = v43;
      if (v39)
      {
        uint64_t v40 = v39;
        operator delete(v39);
      }
      if (v45)
      {
        uint64_t v46 = v45;
        operator delete(v45);
      }
      a2 -= 6;
    }
    while (v9 < (int)v37);
  }
  while (i < (unint64_t)a2)
  {
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)i, a2);
    do
    {
      uint64_t v31 = v85;
      uint64_t v32 = v86;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      int v33 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v33, v87, (uint64_t)v88, (v88 - (unsigned char *)v87) >> 2);
      int v36 = v90;
      uint64_t v25 = *(void *)(i + 48);
      uint64_t v26 = *(void *)(i + 56);
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      int v27 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v27, *(const void **)(i + 64), *(void *)(i + 72), (uint64_t)(*(void *)(i + 72) - *(void *)(i + 64)) >> 2);
      int v30 = *(_DWORD *)(i + 88);
      int v10 = v31;
      int v11 = v25;
      if (v27)
      {
        uint64_t v28 = v27;
        operator delete(v27);
      }
      if (v33)
      {
        uint64_t v34 = v33;
        operator delete(v33);
      }
      i += 48;
    }
    while (v10 >= v11);
    do
    {
      uint64_t v19 = v85;
      uint64_t v20 = v86;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      int v21 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, v87, (uint64_t)v88, (v88 - (unsigned char *)v87) >> 2);
      int v24 = v90;
      uint64_t v14 = *(a2 - 6);
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      int v15 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v15, (const void *)*(a2 - 4), *(a2 - 3), (*(a2 - 3) - *(a2 - 4)) >> 2);
      int v18 = *((_DWORD *)a2 - 2);
      int v12 = v19;
      if (v15)
      {
        uint64_t v16 = v15;
        operator delete(v15);
      }
      if (v21)
      {
        uint64_t v22 = v21;
        operator delete(v21);
      }
      a2 -= 6;
    }
    while (v12 < (int)v14);
  }
  if (i - 48 != a1)
  {
    *(void *)a1 = *(void *)(i - 48);
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v4, i - 40);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(i - 8);
  }
  *(void *)(i - 48) = v85;
  *(void *)(i - 40) = v86;
  if ((uint64_t *)(i - 40) != &v86) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(i - 32), (char *)v87, (uint64_t)v88, (v88 - (unsigned char *)v87) >> 2);
  }
  *(_DWORD *)(i - 8) = v90;
  if (v87)
  {
    uint64_t v88 = v87;
    operator delete(v87);
  }
  return i;
}

void sub_1B1C5AD98(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 - 168);
  if (v3)
  {
    *(void *)(v1 - 160) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(v1 - 120);
  if (v4)
  {
    *(void *)(v1 - 112) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v83 = *a1;
  uint64_t v4 = (uint64_t)(a1 + 1);
  uint64_t v84 = a1[1];
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  uint64_t v85 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v85, (const void *)a1[2], a1[3], (a1[3] - a1[2]) >> 2);
  uint64_t v5 = 0;
  int v88 = *((_DWORD *)a1 + 10);
  do
  {
    uint64_t v77 = a1[v5 + 6];
    uint64_t v78 = a1[v5 + 7];
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    uint64_t v79 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v79, (const void *)a1[v5 + 8], a1[v5 + 9], (a1[v5 + 9] - a1[v5 + 8]) >> 2);
    int v82 = a1[v5 + 11];
    uint64_t v71 = v83;
    uint64_t v72 = v84;
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    uint64_t v73 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v73, v85, (uint64_t)v86, (v86 - (unsigned char *)v85) >> 2);
    int v76 = v88;
    int v6 = v77;
    if (v73)
    {
      uint64_t v74 = v73;
      operator delete(v73);
    }
    if (v79)
    {
      uint64_t v80 = v79;
      operator delete(v79);
    }
    v5 += 6;
  }
  while (v6 < (int)v71);
  unint64_t v23 = (unint64_t)&a1[v5];
  if (v5 == 6)
  {
    if ((unint64_t)(a1 + 6) >= a2)
    {
      unint64_t i = a2;
    }
    else
    {
      for (unint64_t i = a2 - 48; ; i -= 48)
      {
        uint64_t v65 = *(void *)i;
        uint64_t v66 = *(void *)(i + 8);
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        uint64_t v67 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v67, *(const void **)(i + 16), *(void *)(i + 24), (uint64_t)(*(void *)(i + 24) - *(void *)(i + 16)) >> 2);
        int v70 = *(_DWORD *)(i + 40);
        uint64_t v59 = v83;
        uint64_t v60 = v84;
        uint64_t v62 = 0;
        uint64_t v63 = 0;
        uint64_t v61 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v61, v85, (uint64_t)v86, (v86 - (unsigned char *)v85) >> 2);
        int v64 = v88;
        int v10 = v65;
        if (v61)
        {
          uint64_t v62 = v61;
          operator delete(v61);
        }
        if (v67)
        {
          uint64_t v68 = v67;
          operator delete(v67);
        }
        if (v10 < (int)v59 || v23 >= i) {
          break;
        }
      }
    }
  }
  else
  {
    unint64_t i = a2;
    do
    {
      uint64_t v8 = *(void *)(i - 48);
      i -= 48;
      uint64_t v53 = v8;
      uint64_t v54 = *(void *)(i + 8);
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      uint64_t v55 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v55, *(const void **)(i + 16), *(void *)(i + 24), (uint64_t)(*(void *)(i + 24) - *(void *)(i + 16)) >> 2);
      int v58 = *(_DWORD *)(a2 - 8);
      uint64_t v47 = v83;
      uint64_t v48 = v84;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      std::string __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v85, (uint64_t)v86, (v86 - (unsigned char *)v85) >> 2);
      int v52 = v88;
      int v9 = v53;
      if (__p)
      {
        uint64_t v50 = __p;
        operator delete(__p);
      }
      if (v55)
      {
        uint64_t v56 = v55;
        operator delete(v55);
      }
      a2 = i;
    }
    while (v9 >= (int)v47);
  }
  uint64_t v21 = v4;
  uint64_t v22 = a1;
  unint64_t v11 = v23;
  if (v23 < i)
  {
    unint64_t v12 = i;
    do
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)v11, (uint64_t *)v12);
      unint64_t v13 = v11;
      do
      {
        uint64_t v14 = *(void *)(v11 + 48);
        v11 += 48;
        uint64_t v41 = v14;
        uint64_t v42 = *(void *)(v11 + 8);
        uint64_t v44 = 0;
        uint64_t v45 = 0;
        uint64_t v43 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v43, *(const void **)(v11 + 16), *(void *)(v11 + 24), (uint64_t)(*(void *)(v11 + 24) - *(void *)(v11 + 16)) >> 2);
        int v46 = *(_DWORD *)(v13 + 88);
        uint64_t v35 = v83;
        uint64_t v36 = v84;
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v37 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v37, v85, (uint64_t)v86, (v86 - (unsigned char *)v85) >> 2);
        int v40 = v88;
        int v15 = v41;
        int v16 = v35;
        if (v37)
        {
          uint64_t v38 = v37;
          operator delete(v37);
        }
        if (v43)
        {
          uint64_t v44 = v43;
          operator delete(v43);
        }
        unint64_t v13 = v11;
      }
      while (v15 < v16);
      unint64_t v17 = v12;
      do
      {
        uint64_t v18 = *(void *)(v12 - 48);
        v12 -= 48;
        uint64_t v29 = v18;
        uint64_t v30 = *(void *)(v12 + 8);
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        uint64_t v31 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v31, *(const void **)(v12 + 16), *(void *)(v12 + 24), (uint64_t)(*(void *)(v12 + 24) - *(void *)(v12 + 16)) >> 2);
        int v34 = *(_DWORD *)(v17 - 8);
        int v24 = v83;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        uint64_t v25 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v25, v85, (uint64_t)v86, (v86 - (unsigned char *)v85) >> 2);
        int v28 = v88;
        int v19 = v29;
        if (v25)
        {
          uint64_t v26 = v25;
          operator delete(v25);
        }
        if (v31)
        {
          uint64_t v32 = v31;
          operator delete(v31);
        }
        unint64_t v17 = v12;
      }
      while (v19 >= v24);
    }
    while (v11 < v12);
  }
  if ((uint64_t *)(v11 - 48) != v22)
  {
    *uint64_t v22 = *(void *)(v11 - 48);
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v21, v11 - 40);
    *((_DWORD *)v22 + 10) = *(_DWORD *)(v11 - 8);
  }
  *(void *)(v11 - 48) = v83;
  *(void *)(v11 - 40) = v84;
  if ((uint64_t *)(v11 - 40) != &v84) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v11 - 32), (char *)v85, (uint64_t)v86, (v86 - (unsigned char *)v85) >> 2);
  }
  *(_DWORD *)(v11 - 8) = v88;
  if (v85)
  {
    uint64_t v86 = v85;
    operator delete(v85);
  }
  return v11 - 48;
}

void sub_1B1C5B32C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59)
{
  uint64_t v61 = *(void **)(v59 - 120);
  if (v61)
  {
    *(void *)(v59 - 112) = v61;
    operator delete(v61);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v3)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v52 = *(void *)(a2 - 48);
      uint64_t v53 = *(void *)(a2 - 40);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint64_t v54 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v54, *(const void **)(a2 - 32), *(void *)(a2 - 24), (uint64_t)(*(void *)(a2 - 24) - *(void *)(a2 - 32)) >> 2);
      int v57 = *(_DWORD *)(a2 - 8);
      uint64_t v46 = *(void *)a1;
      uint64_t v47 = *(void *)(a1 + 8);
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      uint64_t v48 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v48, *(const void **)(a1 + 16), *(void *)(a1 + 24), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
      int v51 = *(_DWORD *)(a1 + 40);
      int v5 = v52;
      if (v48)
      {
        uint64_t v49 = v48;
        operator delete(v48);
      }
      if (v54)
      {
        uint64_t v55 = v54;
        operator delete(v54);
      }
      if (v5 < (int)v46) {
        std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, (uint64_t *)(a2 - 48));
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1, a1 + 48, a2 - 48);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      uint64_t v6 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1, a1 + 48, a1 + 96);
      uint64_t v7 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    uint64_t v40 = *(void *)v7;
    uint64_t v41 = *(void *)(v7 + 8);
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v42 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v42, *(const void **)(v7 + 16), *(void *)(v7 + 24), (uint64_t)(*(void *)(v7 + 24) - *(void *)(v7 + 16)) >> 2);
    int v45 = *(_DWORD *)(v7 + 40);
    uint64_t v34 = *(void *)v6;
    uint64_t v35 = *(void *)(v6 + 8);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v6 + 16), *(void *)(v6 + 24), (uint64_t)(*(void *)(v6 + 24) - *(void *)(v6 + 16)) >> 2);
    int v39 = *(_DWORD *)(v6 + 40);
    int v9 = v40;
    int v10 = v34;
    if (__p)
    {
      uint64_t v37 = __p;
      operator delete(__p);
    }
    if (v42)
    {
      uint64_t v43 = v42;
      operator delete(v42);
    }
    if (v9 < v10)
    {
      uint64_t v28 = *(void *)v7;
      uint64_t v29 = *(void *)(v7 + 8);
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v30 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v30, *(const void **)(v7 + 16), *(void *)(v7 + 24), (uint64_t)(*(void *)(v7 + 24) - *(void *)(v7 + 16)) >> 2);
      int v33 = *(_DWORD *)(v7 + 40);
      for (uint64_t i = v8; ; i -= 48)
      {
        *(void *)(a1 + i + 144) = *(void *)(a1 + i + 96);
        fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(a1 + i + 152, a1 + i + 104);
        *(_DWORD *)(a1 + i + 184) = *(_DWORD *)(a1 + i + 136);
        if (i == -96)
        {
          uint64_t v13 = a1;
          goto LABEL_26;
        }
        uint64_t v22 = v28;
        uint64_t v23 = v29;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        int v24 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, v30, (uint64_t)v31, (v31 - (unsigned char *)v30) >> 2);
        int v27 = v33;
        uint64_t v17 = *(void *)(a1 + i + 48);
        int v19 = 0;
        uint64_t v20 = 0;
        uint64_t v18 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v18, *(const void **)(a1 + i + 64), *(void *)(a1 + i + 72), (uint64_t)(*(void *)(a1 + i + 72) - *(void *)(a1 + i + 64)) >> 2);
        int v21 = *(_DWORD *)(a1 + i + 88);
        int v12 = v22;
        if (v18)
        {
          int v19 = v18;
          operator delete(v18);
        }
        if (v24)
        {
          uint64_t v25 = v24;
          operator delete(v24);
        }
        if (v12 >= (int)v17) {
          break;
        }
      }
      uint64_t v13 = a1 + i + 96;
LABEL_26:
      *(void *)uint64_t v13 = v28;
      int v14 = HIDWORD(v29);
      *(_DWORD *)(a1 + i + 104) = v29;
      *(_DWORD *)(v13 + 12) = v14;
      if ((uint64_t *)v13 != &v28) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v13 + 16), (char *)v30, (uint64_t)v31, (v31 - (unsigned char *)v30) >> 2);
      }
      *(_DWORD *)(v13 + 40) = v33;
      if (v30)
      {
        uint64_t v31 = v30;
        operator delete(v30);
      }
      if (++v15 == 8) {
        return v7 + 48 == a2;
      }
    }
    uint64_t v6 = v7;
    v8 += 48;
    v7 += 48;
    if (v7 == a2) {
      return 1;
    }
  }
}

void sub_1B1C5B80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v41 = *(void **)(v39 - 120);
  if (v41)
  {
    *(void *)(v39 - 112) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = (uint64_t)(a1 + 1);
  uint64_t v6 = a1[1];
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a1[2], a1[3], (a1[3] - a1[2]) >> 2);
  int v10 = *((_DWORD *)a1 + 10);
  *a1 = *a2;
  fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v4, (uint64_t)(a2 + 1));
  *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
  *a2 = v5;
  a2[1] = v6;
  if (&v5 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a2 + 16, (char *)__p, (uint64_t)v8, (v8 - (unsigned char *)__p) >> 2);
  }
  *((_DWORD *)a2 + 10) = v10;
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
}

void sub_1B1C5B954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1, a2, a3);
  uint64_t v40 = *(void *)a4;
  uint64_t v41 = *(void *)(a4 + 8);
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v42 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v42, *(const void **)(a4 + 16), *(void *)(a4 + 24), (uint64_t)(*(void *)(a4 + 24) - *(void *)(a4 + 16)) >> 2);
  int v45 = *(_DWORD *)(a4 + 40);
  uint64_t v34 = *(void *)a3;
  uint64_t v35 = *(void *)(a3 + 8);
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v36 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v36, *(const void **)(a3 + 16), *(void *)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 2);
  int v39 = *(_DWORD *)(a3 + 40);
  int v8 = v40;
  if (v36)
  {
    uint64_t v37 = v36;
    operator delete(v36);
  }
  if (v42)
  {
    uint64_t v43 = v42;
    operator delete(v42);
  }
  if (v8 < (int)v34)
  {
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a3, (uint64_t *)a4);
    uint64_t v28 = *(void *)a3;
    uint64_t v29 = *(void *)(a3 + 8);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v30 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v30, *(const void **)(a3 + 16), *(void *)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 2);
    int v33 = *(_DWORD *)(a3 + 40);
    uint64_t v22 = *(void *)a2;
    uint64_t v23 = *(void *)(a2 + 8);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
    int v27 = *(_DWORD *)(a2 + 40);
    int v9 = v28;
    if (__p)
    {
      uint64_t v25 = __p;
      operator delete(__p);
    }
    if (v30)
    {
      uint64_t v31 = v30;
      operator delete(v30);
    }
    if (v9 < (int)v22)
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a2, (uint64_t *)a3);
      uint64_t v16 = *(void *)a2;
      uint64_t v17 = *(void *)(a2 + 8);
      int v19 = 0;
      uint64_t v20 = 0;
      uint64_t v18 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v18, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
      int v21 = *(_DWORD *)(a2 + 40);
      uint64_t v11 = *(void *)a1;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      int v12 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v12, *(const void **)(a1 + 16), *(void *)(a1 + 24), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
      int v15 = *(_DWORD *)(a1 + 40);
      int v10 = v16;
      if (v12)
      {
        uint64_t v13 = v12;
        operator delete(v12);
      }
      if (v18)
      {
        int v19 = v18;
        operator delete(v18);
      }
      if (v10 < (int)v11) {
        std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, (uint64_t *)a2);
      }
    }
  }
}

void sub_1B1C5BBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1, a2, a3, a4);
  uint64_t v55 = *(void *)a5;
  uint64_t v56 = *(void *)(a5 + 8);
  int v58 = 0;
  uint64_t v59 = 0;
  int v57 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v57, *(const void **)(a5 + 16), *(void *)(a5 + 24), (uint64_t)(*(void *)(a5 + 24) - *(void *)(a5 + 16)) >> 2);
  int v60 = *(_DWORD *)(a5 + 40);
  uint64_t v49 = *(void *)a4;
  uint64_t v50 = *(void *)(a4 + 8);
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  int v51 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v51, *(const void **)(a4 + 16), *(void *)(a4 + 24), (uint64_t)(*(void *)(a4 + 24) - *(void *)(a4 + 16)) >> 2);
  int v54 = *(_DWORD *)(a4 + 40);
  int v10 = v55;
  if (v51)
  {
    uint64_t v52 = v51;
    operator delete(v51);
  }
  if (v57)
  {
    int v58 = v57;
    operator delete(v57);
  }
  if (v10 < (int)v49)
  {
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a4, (uint64_t *)a5);
    uint64_t v43 = *(void *)a4;
    uint64_t v44 = *(void *)(a4 + 8);
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    int v45 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v45, *(const void **)(a4 + 16), *(void *)(a4 + 24), (uint64_t)(*(void *)(a4 + 24) - *(void *)(a4 + 16)) >> 2);
    int v48 = *(_DWORD *)(a4 + 40);
    uint64_t v37 = *(void *)a3;
    uint64_t v38 = *(void *)(a3 + 8);
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a3 + 16), *(void *)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 2);
    int v42 = *(_DWORD *)(a3 + 40);
    int v11 = v43;
    if (__p)
    {
      uint64_t v40 = __p;
      operator delete(__p);
    }
    if (v45)
    {
      uint64_t v46 = v45;
      operator delete(v45);
    }
    if (v11 < (int)v37)
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a3, (uint64_t *)a4);
      uint64_t v31 = *(void *)a3;
      uint64_t v32 = *(void *)(a3 + 8);
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      int v33 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v33, *(const void **)(a3 + 16), *(void *)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 2);
      int v36 = *(_DWORD *)(a3 + 40);
      uint64_t v25 = *(void *)a2;
      uint64_t v26 = *(void *)(a2 + 8);
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      int v27 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v27, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
      int v30 = *(_DWORD *)(a2 + 40);
      int v12 = v31;
      if (v27)
      {
        uint64_t v28 = v27;
        operator delete(v27);
      }
      if (v33)
      {
        uint64_t v34 = v33;
        operator delete(v33);
      }
      if (v12 < (int)v25)
      {
        std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a2, (uint64_t *)a3);
        uint64_t v19 = *(void *)a2;
        uint64_t v20 = *(void *)(a2 + 8);
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        int v21 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
        int v24 = *(_DWORD *)(a2 + 40);
        uint64_t v14 = *(void *)a1;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        int v15 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v15, *(const void **)(a1 + 16), *(void *)(a1 + 24), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
        int v18 = *(_DWORD *)(a1 + 40);
        int v13 = v19;
        if (v15)
        {
          uint64_t v16 = v15;
          operator delete(v15);
        }
        if (v21)
        {
          uint64_t v22 = v21;
          operator delete(v21);
        }
        if (v13 < (int)v14) {
          std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, (uint64_t *)a2);
        }
      }
    }
  }
}

void sub_1B1C5BF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 48;
    if (a2 - a1 >= 49)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = (uint64_t *)(a1 + 48 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1, a4, v9, v12);
        v12 -= 6;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v19 = v8;
      uint64_t v14 = v6;
      do
      {
        uint64_t v25 = *(void *)v14;
        uint64_t v26 = *(void *)(v14 + 8);
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        int v27 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v27, *(const void **)(v14 + 16), *(void *)(v14 + 24), (uint64_t)(*(void *)(v14 + 24) - *(void *)(v14 + 16)) >> 2);
        int v30 = *(_DWORD *)(v14 + 40);
        uint64_t v20 = *(void *)a1;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        std::string __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 16), *(void *)(a1 + 24), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
        int v24 = *(_DWORD *)(a1 + 40);
        int v15 = v25;
        if (__p)
        {
          uint64_t v22 = __p;
          operator delete(__p);
        }
        if (v27)
        {
          uint64_t v28 = v27;
          operator delete(v27);
        }
        if (v15 < (int)v20)
        {
          std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)v14, (uint64_t *)a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1, a4, v9, (uint64_t *)a1);
        }
        v14 += 48;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
      uint64_t v8 = v19;
    }
    if (v8 >= 49)
    {
      unint64_t v16 = v8 / 0x30uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1, v6, a4, v16);
        v6 -= 48;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_1B1C5C160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v6 = a1;
    uint64_t v21 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 4)))
    {
      uint64_t v7 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 4)) | 1;
      uint64_t v8 = (uint64_t *)(a1 + 48 * v7);
      uint64_t v9 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 4) + 2;
      if (v9 < a3)
      {
        uint64_t v70 = *v8;
        uint64_t v10 = a1 + 48 * v7;
        uint64_t v71 = *(void *)(v10 + 8);
        uint64_t v73 = 0;
        uint64_t v74 = 0;
        uint64_t v72 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v72, *(const void **)(v10 + 16), *(void *)(v10 + 24), (uint64_t)(*(void *)(v10 + 24) - *(void *)(v10 + 16)) >> 2);
        int v75 = *(_DWORD *)(v10 + 40);
        uint64_t v64 = v8[6];
        uint64_t v65 = v8[7];
        uint64_t v67 = 0;
        uint64_t v68 = 0;
        uint64_t v66 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v66, (const void *)v8[8], v8[9], (v8[9] - v8[8]) >> 2);
        int v69 = *((_DWORD *)v8 + 22);
        int v11 = v70;
        if (v66)
        {
          uint64_t v67 = v66;
          operator delete(v66);
        }
        if (v72)
        {
          uint64_t v73 = v72;
          operator delete(v72);
        }
        if (v11 < (int)v64)
        {
          v8 += 6;
          uint64_t v7 = v9;
        }
      }
      uint64_t v58 = *v8;
      uint64_t v59 = v8[1];
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      int v60 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v60, (const void *)v8[2], v8[3], (v8[3] - v8[2]) >> 2);
      int v63 = *((_DWORD *)v8 + 10);
      uint64_t v52 = *v5;
      uint64_t v53 = v5[1];
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      std::string __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)v5[2], v5[3], (v5[3] - v5[2]) >> 2);
      int v57 = *((_DWORD *)v5 + 10);
      int v12 = v58;
      if (__p)
      {
        uint64_t v55 = __p;
        operator delete(__p);
      }
      if (v60)
      {
        uint64_t v61 = v60;
        operator delete(v60);
      }
      if (v12 >= (int)v52)
      {
        uint64_t v46 = *v5;
        uint64_t v47 = v5[1];
        uint64_t v49 = 0;
        uint64_t v50 = 0;
        int v48 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v48, (const void *)v5[2], v5[3], (v5[3] - v5[2]) >> 2);
        int v51 = *((_DWORD *)v5 + 10);
        uint64_t v20 = v6;
        do
        {
          uint64_t v13 = v8;
          *uint64_t v5 = *v8;
          fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v5 + 1), (uint64_t)(v8 + 1));
          *((_DWORD *)v5 + 10) = *((_DWORD *)v8 + 10);
          if (v21 < v7) {
            break;
          }
          uint64_t v14 = (2 * v7) | 1;
          uint64_t v8 = (uint64_t *)(v6 + 48 * v14);
          uint64_t v15 = 2 * v7 + 2;
          if (v15 >= a3)
          {
            uint64_t v7 = (2 * v7) | 1;
          }
          else
          {
            uint64_t v40 = *v8;
            uint64_t v16 = v6 + 48 * v14;
            uint64_t v41 = *(void *)(v16 + 8);
            uint64_t v43 = 0;
            uint64_t v44 = 0;
            int v42 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v42, *(const void **)(v16 + 16), *(void *)(v16 + 24), (uint64_t)(*(void *)(v16 + 24) - *(void *)(v16 + 16)) >> 2);
            int v45 = *(_DWORD *)(v6 + 48 * v14 + 40);
            uint64_t v34 = v8[6];
            uint64_t v35 = v8[7];
            uint64_t v37 = 0;
            uint64_t v38 = 0;
            int v36 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v36, (const void *)v8[8], v8[9], (v8[9] - v8[8]) >> 2);
            int v39 = *((_DWORD *)v8 + 22);
            int v17 = v40;
            int v18 = v34;
            if (v36)
            {
              uint64_t v37 = v36;
              operator delete(v36);
            }
            if (v42)
            {
              uint64_t v43 = v42;
              operator delete(v42);
            }
            uint64_t v7 = (2 * v7) | 1;
            if (v17 < v18)
            {
              v8 += 6;
              uint64_t v7 = v15;
            }
          }
          uint64_t v28 = *v8;
          uint64_t v29 = v8[1];
          uint64_t v31 = 0;
          uint64_t v32 = 0;
          int v30 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v30, (const void *)v8[2], v8[3], (v8[3] - v8[2]) >> 2);
          uint64_t v6 = v20;
          int v33 = *((_DWORD *)v8 + 10);
          int v23 = v46;
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          int v24 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, v48, (uint64_t)v49, (v49 - (unsigned char *)v48) >> 2);
          int v27 = v51;
          int v19 = v28;
          if (v24)
          {
            uint64_t v25 = v24;
            operator delete(v24);
          }
          if (v30)
          {
            uint64_t v31 = v30;
            operator delete(v30);
          }
          uint64_t v5 = v13;
        }
        while (v19 >= v23);
        uint64_t *v13 = v46;
        v13[1] = v47;
        if (v13 != &v46) {
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v13 + 16, (char *)v48, (uint64_t)v49, (v49 - (unsigned char *)v48) >> 2);
        }
        *((_DWORD *)v13 + 10) = v51;
        if (v48)
        {
          uint64_t v49 = v48;
          operator delete(v48);
        }
      }
    }
  }
}

void sub_1B1C5C5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v10 = *(void *)a1;
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 16), *(void *)(a1 + 24), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
    int v15 = *(_DWORD *)(a1 + 40);
    uint64_t v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>((uint64_t *)a1, a3, a4);
    uint64_t v9 = v8;
    if (v8 == (uint64_t *)(a2 - 48))
    {
      *uint64_t v8 = v10;
      v8[1] = v11;
      if (v8 != &v10) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v8 + 16, (char *)__p, (uint64_t)v13, (v13 - (unsigned char *)__p) >> 2);
      }
      *((_DWORD *)v9 + 10) = v15;
    }
    else
    {
      *uint64_t v8 = *(void *)(a2 - 48);
      fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v8 + 1), a2 - 40);
      *((_DWORD *)v9 + 10) = *(_DWORD *)(a2 - 8);
      *(void *)(a2 - 48) = v10;
      *(void *)(a2 - 40) = v11;
      if ((uint64_t *)(a2 - 40) != &v11) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a2 - 32), (char *)__p, (uint64_t)v13, (v13 - (unsigned char *)__p) >> 2);
      }
      *(_DWORD *)(a2 - 8) = v15;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1, (uint64_t)(v9 + 6), a3, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - a1 + 48) >> 4));
    }
    if (__p)
    {
      uint64_t v13 = __p;
      operator delete(__p);
    }
  }
}

void sub_1B1C5C7A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = a1;
    uint64_t v9 = v5 + 1;
    a1 += 6 * v5 + 6;
    uint64_t v10 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3)
    {
      uint64_t v20 = *a1;
      int v12 = &v8[6 * v9];
      uint64_t v21 = v12[1];
      int v23 = 0;
      uint64_t v24 = 0;
      uint64_t v22 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v22, (const void *)v12[2], v12[3], (v12[3] - v12[2]) >> 2);
      int v25 = *((_DWORD *)v12 + 10);
      uint64_t v15 = a1[6];
      int v17 = 0;
      uint64_t v18 = 0;
      std::string __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a1[8], a1[9], (a1[9] - a1[8]) >> 2);
      int v19 = *((_DWORD *)a1 + 22);
      int v13 = v20;
      if (__p)
      {
        int v17 = __p;
        operator delete(__p);
      }
      if (v22)
      {
        int v23 = v22;
        operator delete(v22);
      }
      if (v13 < (int)v15)
      {
        a1 += 6;
        uint64_t v5 = v11;
      }
    }
    *uint64_t v8 = *a1;
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v8 + 1), (uint64_t)(a1 + 1));
    *((_DWORD *)v8 + 10) = *((_DWORD *)a1 + 10);
  }
  while (v5 <= v7);
  return a1;
}

void sub_1B1C5C934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (uint64_t *)(a1 + 48 * (v4 >> 1));
    uint64_t v36 = *v8;
    uint64_t v37 = v8[1];
    int v39 = 0;
    uint64_t v40 = 0;
    uint64_t v38 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v38, (const void *)v8[2], v8[3], (v8[3] - v8[2]) >> 2);
    int v41 = *((_DWORD *)v8 + 10);
    uint64_t v9 = (char *)(a2 - 48);
    uint64_t v30 = *(void *)(a2 - 48);
    uint64_t v31 = *(void *)(a2 - 40);
    int v33 = 0;
    uint64_t v34 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a2 - 32), *(void *)(a2 - 24), (uint64_t)(*(void *)(a2 - 24) - *(void *)(a2 - 32)) >> 2);
    int v35 = *(_DWORD *)(a2 - 8);
    int v10 = v36;
    if (__p)
    {
      int v33 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      int v39 = v38;
      operator delete(v38);
    }
    if (v10 < (int)v30)
    {
      uint64_t v24 = *(void *)(a2 - 48);
      uint64_t v25 = *(void *)(a2 - 40);
      int v27 = 0;
      uint64_t v28 = 0;
      uint64_t v26 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v26, *(const void **)(a2 - 32), *(void *)(a2 - 24), (uint64_t)(*(void *)(a2 - 24) - *(void *)(a2 - 32)) >> 2);
      int v29 = *(_DWORD *)(a2 - 8);
      do
      {
        uint64_t v11 = (char *)v8;
        *(void *)uint64_t v9 = *v8;
        fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v9 + 8), (uint64_t)(v8 + 1));
        *((_DWORD *)v9 + 10) = *((_DWORD *)v8 + 10);
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (uint64_t *)(a1 + 48 * v7);
        uint64_t v18 = *v8;
        uint64_t v19 = v8[1];
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v20 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v20, (const void *)v8[2], v8[3], (v8[3] - v8[2]) >> 2);
        int v23 = *((_DWORD *)v8 + 10);
        int v13 = v24;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        uint64_t v14 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v14, v26, (uint64_t)v27, (v27 - (unsigned char *)v26) >> 2);
        int v17 = v29;
        int v12 = v18;
        if (v14)
        {
          uint64_t v15 = v14;
          operator delete(v14);
        }
        if (v20)
        {
          uint64_t v21 = v20;
          operator delete(v20);
        }
        uint64_t v9 = v11;
      }
      while (v12 < v13);
      *(void *)uint64_t v11 = v24;
      *((void *)v11 + 1) = v25;
      if (v11 != (char *)&v24) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v11 + 16, (char *)v26, (uint64_t)v27, (v27 - (unsigned char *)v26) >> 2);
      }
      *((_DWORD *)v11 + 10) = v29;
      if (v26)
      {
        int v27 = v26;
        operator delete(v26);
      }
    }
  }
}

void sub_1B1C5CBB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SortedMatcher(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)a1 = &unk_1F0A39288;
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 36) = a4;
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_DWORD *)(a1 + 92) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 72), 0, 0, 0);
  *(_DWORD *)(a1 + 96) = -1;
  *(unsigned char *)(a1 + 106) = 0;
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MemoryPool((void *)(a1 + 112), 1);
}

void sub_1B1C5CE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~MemoryPool(v20);
  uint64_t v22 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 80) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36BD0;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36BD0;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~SortedMatcher(void *a1)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~SortedMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Copy()
{
}

void sub_1B1C5CFAC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F1C403BFD1AB0);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Type(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3) {
    return 3;
  }
  if (v2) {
    uint64_t v6 = 0x40000000;
  }
  else {
    uint64_t v6 = 0x10000000;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (v2) {
    uint64_t v8 = 3221225472;
  }
  else {
    uint64_t v8 = 805306368;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0) {
    return *(unsigned int *)(a1 + 32);
  }
  uint64_t v10 = 0x80000000;
  if (!v2) {
    uint64_t v10 = 0x20000000;
  }
  if ((v9 & v10) != 0) {
    return 3;
  }
  else {
    return 4;
  }
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 106)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::Flags()
{
  return 0;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Final_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

void fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36BD0;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B1C5D150(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Size()
{
  return 40;
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37B88;
  a1[1] = 48 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B1C5D268(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37B88;
  int v2 = a1 + 3;
  for (uint64_t i = (void *)a1[4]; i != v2; uint64_t i = (void *)i[1])
  {
    unint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::Size()
{
  return 48;
}

void *fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~SortedMatcher(void *a1)
{
  *a1 = &unk_1F0A39288;
  int v2 = (void *)a1[3];
  uint64_t v3 = (quasar::Bitmap *)(a1 + 14);
  if (v2)
  {
    if (*v2)
    {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    else
    {
      unint64_t v4 = (_DWORD *)v2[3];
      if (v4) {
        --*v4;
      }
    }
    v2[5] = a1[21];
    a1[21] = v2;
  }
  uint64_t v5 = a1[1];
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  a1[14] = &unk_1F0A36BD0;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::~MemoryArena(a1 + 15);
  quasar::Bitmap::~Bitmap(v3);
  uint64_t v6 = (void *)a1[9];
  if (v6)
  {
    a1[10] = v6;
    operator delete(v6);
  }
  return a1;
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SortedMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A39288;
  *(void *)(a1 + 8) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 88))(*(void *)(a2 + 8), a3);
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 72), *(const void **)(a2 + 72), *(void *)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 106) = *(unsigned char *)(a2 + 106);
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MemoryPool((void *)(a1 + 112), 1);
}

void sub_1B1C5D54C(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 80) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetState(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 16) != a2)
  {
    uint64_t v3 = result;
    *(_DWORD *)(result + 16) = a2;
    if (*(_DWORD *)(result + 32) == 3)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      unint64_t v4 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
      uint64_t v5 = (void *)fst::cerr(v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      *(unsigned char *)(v3 + 106) = 1;
    }
    uint64_t v6 = *(void **)(v3 + 24);
    if (v6)
    {
      fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Reinit(v6, *(void *)(v3 + 8), a2);
      uint64_t v7 = *(void **)(v3 + 24);
    }
    else
    {
      uint64_t v7 = *(void **)(v3 + 168);
      if (v7)
      {
        *(void *)(v3 + 168) = v7[5];
      }
      else
      {
        uint64_t v7 = (void *)fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::Allocate((void *)(v3 + 120), 1);
        v7[5] = 0;
      }
      uint64_t v8 = *(void *)(v3 + 8);
      v7[4] = 0;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v8 + 136))(v8, a2, v7);
      *(void *)(v3 + ++*(_DWORD *)(result + 24) = v7;
    }
    if (*v7) {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 80))(*v7, 16, 16);
    }
    BOOL result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 8) + 40))(*(void *)(v3 + 8), a2);
    *(void *)(v3 + 48) = result;
    *(_DWORD *)(v3 + 96) = a2;
  }
  return result;
}

void sub_1B1C5D720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Reinit(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (!v6) {
    goto LABEL_5;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, a3);
  if (result) {
    return result;
  }
  if (*a1)
  {
    (*(void (**)(void))(*(void *)*a1 + 8))(*a1);
  }
  else
  {
LABEL_5:
    uint64_t v8 = (_DWORD *)a1[3];
    if (v8) {
      --*v8;
    }
  }
  a1[4] = 0;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 136);
  return v9(a2, a3, a1);
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Find(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 105) = 1;
  if (*(unsigned char *)(a1 + 106))
  {
    BOOL result = 0;
    *(unsigned char *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 40) = -1;
  }
  else
  {
    *(unsigned char *)(a1 + 104) = a2 == 0;
    if (a2 == -1) {
      int v4 = 0;
    }
    else {
      int v4 = a2;
    }
    *(_DWORD *)(a1 + 40) = v4;
    return (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Search(a1) & 1) != 0
        || *(unsigned char *)(a1 + 104) != 0;
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Search(uint64_t a1)
{
  uint64_t v2 = **(void **)(a1 + 24);
  if (v2)
  {
    if (*(_DWORD *)(a1 + 32)) {
      uint64_t v3 = 2;
    }
    else {
      uint64_t v3 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 80))(v2, v3, 15);
  }
  if (*(_DWORD *)(a1 + 40) < *(_DWORD *)(a1 + 36))
  {
    int v4 = *(void **)(a1 + 24);
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 56))(*v4);
    }
    else {
      v4[4] = 0;
    }
    while (1)
    {
      uint64_t v14 = *(void **)(a1 + 24);
      if (*v14)
      {
        if ((*(uint64_t (**)(void))(*(void *)*v14 + 24))(*v14)) {
          return 0;
        }
      }
      else if (v14[4] >= v14[2])
      {
        return 0;
      }
      uint64_t v15 = *(uint64_t **)(a1 + 24);
      uint64_t v16 = *v15;
      if (*(_DWORD *)(a1 + 32))
      {
        uint64_t v17 = v16 ? (*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16) : v15[1] + 48 * v15[4];
        uint64_t v18 = (_DWORD *)(v17 + 4);
      }
      else
      {
        uint64_t v18 = (_DWORD *)(v16 ? (*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16) : v15[1] + 48 * v15[4]);
      }
      int v19 = *(_DWORD *)(a1 + 40);
      int v20 = *v18 <= v19 ? 0 : 7;
      if (*v18 == v19) {
        int v20 = 1;
      }
      if (v20) {
        break;
      }
      uint64_t v21 = *(void **)(a1 + 24);
      if (*v21) {
        (*(void (**)(void))(*(void *)*v21 + 40))(*v21);
      }
      else {
        ++v21[4];
      }
    }
    uint64_t result = 0;
    if (v20 == 1) {
      return 1;
    }
    return result;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  if (!v5)
  {
    unint64_t v6 = 0;
LABEL_53:
    int v23 = *(uint64_t **)(a1 + 24);
    uint64_t result = *v23;
    if (*v23)
    {
      (*(void (**)(uint64_t, unint64_t))(*(void *)result + 64))(result, v6);
      return 0;
    }
    else
    {
      v23[4] = v6;
    }
    return result;
  }
  unint64_t v6 = 0;
  while (1)
  {
    unint64_t v7 = (v5 + v6) >> 1;
    uint64_t v8 = *(void **)(a1 + 24);
    if (*v8) {
      (*(void (**)(void, unint64_t))(*(void *)*v8 + 64))(*v8, (v5 + v6) >> 1);
    }
    else {
      v8[4] = v7;
    }
    uint64_t v9 = *(uint64_t **)(a1 + 24);
    uint64_t v10 = *v9;
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v11 = v10 ? (*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10) : v9[1] + 48 * v9[4];
      int v12 = (_DWORD *)(v11 + 4);
    }
    else
    {
      int v12 = (_DWORD *)(v10 ? (*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10) : v9[1] + 48 * v9[4]);
    }
    int v13 = *(_DWORD *)(a1 + 40);
    if (*v12 <= v13) {
      break;
    }
    unint64_t v5 = (v5 + v6) >> 1;
LABEL_25:
    if (v6 >= v5) {
      goto LABEL_53;
    }
  }
  if (*v12 < v13)
  {
    unint64_t v6 = v7 + 1;
    goto LABEL_25;
  }
  while (v7 > v6)
  {
    uint64_t v24 = *(void **)(a1 + 24);
    --v7;
    if (*v24) {
      (*(void (**)(void, unint64_t))(*(void *)*v24 + 64))(*v24, v7);
    }
    else {
      v24[4] = v7;
    }
    uint64_t v25 = *(uint64_t **)(a1 + 24);
    uint64_t v26 = *v25;
    if (*(_DWORD *)(a1 + 32))
    {
      if (v26) {
        uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 32))(v26);
      }
      else {
        uint64_t v27 = v25[1] + 48 * v25[4];
      }
      uint64_t v28 = (_DWORD *)(v27 + 4);
    }
    else if (v26)
    {
      uint64_t v28 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v26 + 32))(v26);
    }
    else
    {
      uint64_t v28 = (_DWORD *)(v25[1] + 48 * v25[4]);
    }
    if (*v28 != *(_DWORD *)(a1 + 40))
    {
      int v29 = *(void **)(a1 + 24);
      unint64_t v30 = v7 + 1;
      if (*v29) {
        (*(void (**)(void, unint64_t))(*(void *)*v29 + 64))(*v29, v30);
      }
      else {
        v29[4] = v30;
      }
      return 1;
    }
  }
  return 1;
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Done(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 104)) {
    return 0;
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (*v3)
  {
    if ((*(uint64_t (**)(void))(*(void *)*v3 + 24))(*v3)) {
      return 1;
    }
  }
  else if (v3[4] >= v3[2])
  {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 105)) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = **(void **)(a1 + 24);
  if (v5)
  {
    if (v4) {
      uint64_t v6 = 2;
    }
    else {
      uint64_t v6 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 80))(v5, v6, 15);
    int v4 = *(_DWORD *)(a1 + 32);
  }
  unint64_t v7 = *(uint64_t **)(a1 + 24);
  uint64_t v8 = *v7;
  if (v4)
  {
    if (v8) {
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
    }
    else {
      uint64_t v9 = v7[1] + 48 * v7[4];
    }
    uint64_t v10 = (_DWORD *)(v9 + 4);
  }
  else if (v8)
  {
    uint64_t v10 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
  }
  else
  {
    uint64_t v10 = (_DWORD *)(v7[1] + 48 * v7[4]);
  }
  return *v10 != *(_DWORD *)(a1 + 40);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Value(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 104)) {
    return a1 + 56;
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (!*v3) {
    return v3[1] + 48 * v3[4];
  }
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v3 + 80))(*v3, 15, 15);
  uint64_t v3 = *(void **)(a1 + 24);
  if (!*v3) {
    return v3[1] + 48 * v3[4];
  }
  int v4 = *(uint64_t (**)(void))(*(void *)*v3 + 32);
  return v4();
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Next(uint64_t result)
{
  if (*(unsigned char *)(result + 104))
  {
    *(unsigned char *)(result + 104) = 0;
  }
  else
  {
    uint64_t v1 = *(uint64_t **)(result + 24);
    uint64_t result = *v1;
    if (*v1) {
      return (*(uint64_t (**)(void))(*(void *)result + 40))();
    }
    else {
      ++v1[4];
    }
  }
  return result;
}

uint64_t std::string_view::rfind[abi:ne180100](unsigned __int8 **a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4)
{
  int v4 = *a1;
  uint64_t v5 = a1[1];
  if ((unint64_t)v5 >= a4) {
    uint64_t v6 = (unsigned __int8 *)a4;
  }
  else {
    uint64_t v6 = a1[1];
  }
  unint64_t v7 = v5 - v6;
  uint64_t v8 = &v6[a3];
  if (v7 <= a3) {
    uint64_t v8 = a1[1];
  }
  uint64_t v9 = &v8[(void)v4];
  if (a3 && v8)
  {
    uint64_t v10 = *a1;
    uint64_t v11 = &v8[(void)v4];
    do
    {
      if (*v10 == *a2)
      {
        uint64_t v12 = 1;
        while (a3 != v12)
        {
          if (&v10[v12] == v9) {
            goto LABEL_19;
          }
          int v13 = v10[v12];
          int v14 = a2[v12++];
          if (v13 != v14) {
            goto LABEL_10;
          }
        }
        uint64_t v11 = v10;
      }
LABEL_10:
      ++v10;
    }
    while (v10 != v9);
  }
  else
  {
    uint64_t v11 = &v8[(void)v4];
  }
LABEL_19:
  uint64_t v15 = (unsigned __int8 *)(v11 - v4);
  if (v11 != v9 || a3 == 0) {
    return (uint64_t)v15;
  }
  else {
    return -1;
  }
}

void *quasar::SentencePieceOptions::options@<X0>(quasar::SentencePieceOptions *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = operator new(0x20uLL);
  a2[1] = result + 4;
  a2[2] = result + 4;
  void *result = (char *)this + 16;
  result[1] = (char *)this + 176;
  result[2] = (char *)this + 320;
  result[3] = (char *)this + 480;
  *a2 = result;
  return result;
}

void quasar::SentencePieceBlock::init(quasar::SentencePieceBlock *this)
{
  uint64_t v2 = (void *)((char *)this + 328);
  uint64_t v3 = quasar::OptionValue<std::string>::value((void *)this + 41);
  int v4 = *(char *)(v3 + 23);
  if (v4 < 0)
  {
    if (*(void *)(v3 + 8) != 6) {
      goto LABEL_10;
    }
    uint64_t v3 = *(void *)v3;
  }
  else if (v4 != 6)
  {
    goto LABEL_10;
  }
  if (*(_DWORD *)v3 == 1868787301 && *(_WORD *)(v3 + 4) == 25956)
  {
    int v15 = 0;
    goto LABEL_42;
  }
LABEL_10:
  uint64_t v6 = quasar::OptionValue<std::string>::value(v2);
  int v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(void *)(v6 + 8) != 6) {
      goto LABEL_19;
    }
    uint64_t v6 = *(void *)v6;
  }
  else if (v7 != 6)
  {
    goto LABEL_19;
  }
  if (*(_DWORD *)v6 == 1868784996 && *(_WORD *)(v6 + 4) == 25956)
  {
    int v15 = 1;
    goto LABEL_42;
  }
LABEL_19:
  uint64_t v9 = quasar::OptionValue<std::string>::value(v2);
  int v10 = *(char *)(v9 + 23);
  if (v10 < 0)
  {
    if (*(void *)(v9 + 8) != 10) {
      goto LABEL_28;
    }
    uint64_t v9 = *(void *)v9;
  }
  else if (v10 != 10)
  {
    goto LABEL_28;
  }
  if (*(void *)v9 == 0x612D65646F636564 && *(_WORD *)(v9 + 8) == 26992)
  {
    int v15 = 2;
    goto LABEL_42;
  }
LABEL_28:
  uint64_t v12 = quasar::OptionValue<std::string>::value(v2);
  int v13 = *(char *)(v12 + 23);
  if (v13 < 0)
  {
    if (*(void *)(v12 + 8) != 12) {
      goto LABEL_46;
    }
    uint64_t v12 = *(void *)v12;
  }
  else if (v13 != 12)
  {
    goto LABEL_46;
  }
  if (*(void *)v12 != 0x732D65646F636564 || *(_DWORD *)(v12 + 8) != 1701011824)
  {
LABEL_46:
    memset(v21, 0, sizeof(v21));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    int v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Unknown sentence piece action: ", 31);
    uint64_t v20 = quasar::OptionValue<std::string>::value(v2);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v19, v20);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v21);
  }
  int v15 = 3;
LABEL_42:
  *((_DWORD *)this + 162) = v15;
  uint64_t v16 = (const void **)quasar::OptionValue<std::string>::value((void *)this + 3);
  quasar::SentencePieceBlock::getModel(v16, (uint64_t *)v21);
  long long v17 = v21[0];
  v21[0] = 0uLL;
  uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 80);
  *(_OWORD *)((char *)this + 632) = v17;
  if (v18)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    if (*((void *)&v21[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21[0] + 1));
    }
  }
}

std::__shared_weak_count *quasar::SentencePieceBlock::getModel@<X0>(const void **a1@<X1>, uint64_t *a2@<X8>)
{
  {
    operator new();
  }
  *(void *)&long long v8 = a1;
  int v4 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)quasar::SentencePieceBlock::getModel(std::string const&)::modelFileMap, a1, (uint64_t)&std::piecewise_construct, (long long **)&v8);
  *a2 = 0;
  a2[1] = 0;
  uint64_t v5 = (std::__shared_weak_count *)v4[8];
  if (!v5) {
LABEL_9:
  }
    operator new();
  uint64_t result = std::__shared_weak_count::lock(v5);
  a2[1] = (uint64_t)result;
  if (result)
  {
    uint64_t v7 = v4[7];
    *a2 = v7;
    if (!v7)
    {
LABEL_7:
      if (result) {
        std::__shared_weak_count::__release_shared[abi:ne180100](result);
      }
      goto LABEL_9;
    }
  }
  else if (!*a2)
  {
    goto LABEL_7;
  }
  return result;
}

void sub_1B1C5E5BC(_Unwind_Exception *a1)
{
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)(v2 - 56));
  int v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void sub_1B1C5E5E4()
{
  MEMORY[0x1B3EA8670](v0, 0xB1C40B9A2BF9DLL);
  JUMPOUT(0x1B1C5E600);
}

void virtual thunk to'quasar::SentencePieceBlock::init(quasar::SentencePieceBlock *this)
{
}

void quasar::SentencePieceBlock::process(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a1;
  uint64_t v162 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a3;
  uint64_t v108 = a3[1];
  if (*a3 == v108)
  {
    uint64_t v86 = a1 + *(void *)(*(void *)a1 - 24);
    quasar::ProcessingBlock::send(v86, (uint64_t)a3, 0);
  }
  else
  {
    int v151 = 0;
    uint64_t v150 = 0;
    unint64_t v152 = 0;
    if (*(_DWORD *)(a1 + 648))
    {
      int v126 = 0;
      int v127 = 0;
      unint64_t v128 = 0;
      unint64_t v104 = (void *)(a1 + 488);
      uint64_t v105 = (void *)(a1 + 184);
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)v157, 0);
      if (*(unsigned char *)(v4 + 129))
      {
        __p[0] = 0;
        __p[1] = 0;
        *(void *)&long long v130 = 0;
        uint64_t v5 = *(void *)(v4 + 136);
        uint64_t v6 = *(void *)(v4 + 144);
        if (v5 != v6)
        {
          uint64_t v7 = 0;
          do
          {
            if ((unint64_t)v7 >= (unint64_t)v130)
            {
              uint64_t v9 = (char *)__p[0];
              uint64_t v10 = (v7 - (char *)__p[0]) >> 2;
              unint64_t v11 = v10 + 1;
              if ((unint64_t)(v10 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v12 = v130 - (unint64_t)__p[0];
              if ((uint64_t)(v130 - (unint64_t)__p[0]) >> 1 > v11) {
                unint64_t v11 = v12 >> 1;
              }
              if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v13 = v11;
              }
              if (v13)
              {
                int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v130, v13);
                uint64_t v9 = (char *)__p[0];
                uint64_t v7 = (char *)__p[1];
              }
              else
              {
                int v14 = 0;
              }
              int v15 = &v14[4 * v10];
              *(_DWORD *)int v15 = *(_DWORD *)(v5 + 64);
              long long v8 = v15 + 4;
              while (v7 != v9)
              {
                int v16 = *((_DWORD *)v7 - 1);
                v7 -= 4;
                *((_DWORD *)v15 - 1) = v16;
                v15 -= 4;
              }
              __p[0] = v15;
              __p[1] = v8;
              *(void *)&long long v130 = &v14[4 * v13];
              if (v9) {
                operator delete(v9);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v7 = *(_DWORD *)(v5 + 64);
              long long v8 = v7 + 4;
            }
            __p[1] = v8;
            v5 += 136;
            uint64_t v7 = (char *)v8;
          }
          while (v5 != v6);
        }
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(v3 + 632) + 232))(&v124);
        sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v124);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      else
      {
        __p[0] = 0;
        __p[1] = 0;
        *(void *)&long long v130 = 0;
        uint64_t v18 = *(void *)(v4 + 136);
        uint64_t v17 = *(void *)(v4 + 144);
        if (v18 != v17)
        {
          int v19 = 0;
          do
          {
            if ((unint64_t)v19 >= (unint64_t)v130)
            {
              int v19 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)__p, (long long *)v18);
            }
            else
            {
              if (*(char *)(v18 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)v18, *(void *)(v18 + 8));
              }
              else
              {
                long long v20 = *(_OWORD *)v18;
                v19->__r_.__value_.__r.__words[2] = *(void *)(v18 + 16);
                *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
              }
              ++v19;
            }
            __p[1] = v19;
            v18 += 136;
          }
          while (v18 != v17);
        }
        uint64_t v3 = a1;
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 632) + 224))(&v123);
        sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v123);
        v143[0].__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v143);
      }
      uint64_t v21 = v4;
      if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(v4 + 144) - *(void *)(v4 + 136)) >> 3) != v159)
      {
        long long v141 = 0u;
        long long v142 = 0u;
        long long v139 = 0u;
        long long v140 = 0u;
        long long v137 = 0u;
        long long v138 = 0u;
        long long v135 = 0u;
        long long v136 = 0u;
        long long v134 = 0u;
        long long v132 = 0u;
        memset(v133, 0, sizeof(v133));
        long long v130 = 0u;
        *(_OWORD *)float v131 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Inconsistent sentencepiece decoding length, expected ", 53);
        uint64_t v103 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)" got ", 5);
        std::ostream::operator<<();
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      quasar::TranslationPhraseInternal::TranslationPhraseInternal(v143, (const quasar::TranslationPhraseInternal *)v4);
      if (v160) {
        uint64_t v22 = (uint64_t *)(v160 + 8);
      }
      else {
        uint64_t v22 = 0;
      }
      int v23 = (std::string *)v145;
      if (v159)
      {
        uint64_t v24 = 0;
        uint64_t v25 = 8 * v159;
        do
        {
          uint64_t v26 = *v22;
          std::string::operator=((std::string *)((char *)v23 + v24), (const std::string *)(*(void *)(*v22 + 48) & 0xFFFFFFFFFFFFFFFELL));
          std::string::operator=((std::string *)((char *)v145 + v24 + 72), (const std::string *)(*(void *)(v26 + 56) & 0xFFFFFFFFFFFFFFFELL));
          int v23 = (std::string *)v145;
          uint64_t v27 = (char *)v145 + v24;
          *((_DWORD *)v27 + 16) = *(_DWORD *)(v26 + 64);
          *((void *)v27 + 16) = *(void *)(v26 + 68);
          v27[24] = 1;
          ++v22;
          v24 += 136;
          v25 -= 8;
        }
        while (v25);
      }
      if (v23 != v146) {
        v146[-5].__r_.__value_.__s.__data_[8] = 0;
      }
      unint64_t v28 = v161 & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)((v161 & 0xFFFFFFFFFFFFFFFELL) + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v28, *(void *)(v28 + 8));
      }
      else
      {
        long long v29 = *(_OWORD *)v28;
        __str.__r_.__value_.__r.__words[2] = *(void *)(v28 + 16);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v29;
      }
      unint64_t v30 = v127;
      uint64_t v31 = v21;
      if ((unint64_t)v127 >= v128)
      {
        uint64_t v32 = (char *)std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>((uint64_t *)&v126, (const quasar::TranslationPhraseInternal *)v143);
      }
      else
      {
        quasar::TranslationPhraseInternal::TranslationPhraseInternal(v127, (const quasar::TranslationPhraseInternal *)v143);
        uint64_t v32 = &v30[8].__r_.__value_.__s.__data_[8];
      }
      int v127 = (std::string *)v32;
      quasar::TranslationPhraseInternal::TranslationPhraseInternal(v115, (const quasar::TranslationPhraseInternal *)v143);
      unsigned int v33 = *(_DWORD *)(v3 + 648) - 1;
      int v35 = v119;
      uint64_t v34 = (uint64_t)v120;
      if (v33 <= 1)
      {
        while ((float32x2_t *)v34 != v35)
        {
          v34 -= 136;
          std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100]((uint64_t)&v121, v34);
        }
        float v120 = (std::string *)v35;
        char v118 = 0;
        uint64_t v36 = (float32x2_t *)v145;
        uint64_t v37 = v146;
        int v38 = 1;
        if (v145 != (quasar::TranslationTokenInternal *)v146)
        {
          while (1)
          {
            int v39 = v120;
            if (v119 != (float32x2_t *)v120)
            {
              uint64_t v40 = SHIDWORD(v120[-1].__r_.__value_.__r.__words[2]);
              if (LODWORD(v120[-1].__r_.__value_.__r.__words[2]) == v40
                || ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? (int v41 = &__str)
                  : (int v41 = (std::string *)__str.__r_.__value_.__r.__words[0]),
                    v41->__r_.__value_.__s.__data_[v40 - 1] != 32))
              {
                uint64_t v42 = v36[16].i32[0];
                if (v42 == v36[16].i32[1]
                  || ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                    ? (p_str = &__str)
                    : (p_str = (std::string *)__str.__r_.__value_.__r.__words[0]),
                      p_str->__r_.__value_.__s.__data_[v42] != 32))
                {
                  if (v40 != v42 && quasar::gLogLevel >= 1)
                  {
                    long long v141 = 0u;
                    long long v142 = 0u;
                    long long v139 = 0u;
                    long long v140 = 0u;
                    long long v137 = 0u;
                    long long v138 = 0u;
                    long long v135 = 0u;
                    long long v136 = 0u;
                    long long v134 = 0u;
                    long long v132 = 0u;
                    memset(v133, 0, sizeof(v133));
                    long long v130 = 0u;
                    *(_OWORD *)float v131 = 0u;
                    *(_OWORD *)std::string __p = 0u;
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Inconsistent token sequence: previous std::vector<int>::pointer end = ", 44);
                    uint64_t v46 = (void *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)", current start = ", 18);
                    std::ostream::operator<<();
                    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
                  }
                  int v47 = v36[2].i8[7];
                  if (v47 >= 0) {
                    int v48 = (const std::string::value_type *)v36;
                  }
                  else {
                    int v48 = (const std::string::value_type *)*v36;
                  }
                  if (v47 >= 0) {
                    std::string::size_type v49 = v36[2].u8[7];
                  }
                  else {
                    std::string::size_type v49 = (std::string::size_type)v36[1];
                  }
                  std::string::append((std::string *)((char *)v39 - 136), v48, v49);
                  HIDWORD(v39[-1].__r_.__value_.__r.__words[2]) = v36[16].i32[1];
                  v39[-4].__r_.__value_.__r.__words[2] = (std::string::size_type)vadd_f32(v36[7], (float32x2_t)v39[-4].__r_.__value_.__r.__words[2]);
                  v39[-2].__r_.__value_.__r.__words[1] = (std::string::size_type)vadd_f32(v36[12], (float32x2_t)v39[-2].__r_.__value_.__r.__words[1]);
                  std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)&v39[-5].__r_.__value_.__r.__words[2], (uint64_t)v39[-4].__r_.__value_.__l.__data_, *(char **)&v36[4], *(char **)&v36[5], (uint64_t)(*(void *)&v36[5] - *(void *)&v36[4]) >> 2);
                  ++v38;
                  goto LABEL_83;
                }
              }
              *(float *)&v120[-4].__r_.__value_.__r.__words[2] = *(float *)&v120[-4].__r_.__value_.__r.__words[2]
                                                               / (float)v38;
            }
            if ((unint64_t)v39 >= v121)
            {
              uint64_t v44 = std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal const&>((uint64_t *)&v119, (const quasar::TranslationTokenInternal *)v36);
            }
            else
            {
              quasar::TranslationTokenInternal::TranslationTokenInternal(v39, (const quasar::TranslationTokenInternal *)v36);
              uint64_t v44 = (uint64_t)&v39[5].__r_.__value_.__r.__words[2];
            }
            float v120 = (std::string *)v44;
            *(_DWORD *)(v44 - 72) = -1;
            int v38 = 1;
LABEL_83:
            v36 += 17;
            if (v36 == (float32x2_t *)v37)
            {
              int v35 = (float32x2_t *)v120;
              break;
            }
          }
        }
        uint64_t v50 = (uint64_t)v119;
        if (v119 == v35)
        {
          memset(&v114, 0, sizeof(v114));
          uint64_t v31 = v21;
          goto LABEL_138;
        }
        v35[-10].f32[0] = v35[-10].f32[0] / (float)v38;
        uint64_t v34 = (uint64_t)v35;
        int v35 = (float32x2_t *)v50;
        uint64_t v31 = v21;
      }
      memset(&v114, 0, sizeof(v114));
      if (v35 != (float32x2_t *)v34)
      {
        int v51 = 0;
        float32x2_t v52 = 0;
        float v53 = 0.0;
        float v54 = 0.0;
        do
        {
          v35[3].i8[0] = 0;
          __int32 v55 = v35[16].i32[0];
          __int32 v56 = v35[16].i32[1];
          std::string::size_type v57 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if (v56) {
            BOOL v58 = v56 == v55;
          }
          else {
            BOOL v58 = 1;
          }
          if (!v58)
          {
            uint64_t v59 = v56;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v60 = &__str;
            }
            else {
              int v60 = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            __int32 v61 = v56 - 1;
            uint64_t v62 = (std::string *)((char *)v60 + v59 - 1);
            while (1)
            {
              int v63 = v62->__r_.__value_.__s.__data_[0];
              uint64_t v62 = (std::string *)((char *)v62 - 1);
              if (v63 != 32) {
                break;
              }
              v35[3].i8[0] = 1;
              v35[16].i32[1] = v61;
              __int32 v64 = v61 - 1;
              if (v61)
              {
                BOOL v58 = v55 == v61--;
                if (!v58) {
                  continue;
                }
              }
              __int32 v56 = v64 + 1;
              goto LABEL_103;
            }
            __int32 v56 = v61 + 1;
          }
LABEL_103:
          std::string::size_type v65 = v55;
          if ((v57 & 0x80u) == 0) {
            std::string::size_type size = v57;
          }
          else {
            std::string::size_type size = __str.__r_.__value_.__l.__size_;
          }
          if (v55 != v56 && size != v55)
          {
            uint64_t v68 = 0;
            if ((v57 & 0x80u) == 0) {
              int v69 = &__str;
            }
            else {
              int v69 = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            uint64_t v70 = (char *)v69 + v55;
            uint64_t v71 = v55 - size + 1;
            while (v70[v68] == 32)
            {
              if (v51) {
                v51[3].i8[0] = 1;
              }
              v35[16].i32[0] = v55 + v68 + 1;
              uint64_t v72 = v68 + 1;
              if (v55 + 1 - v56 + v68)
              {
                if (v71 + v68++) {
                  continue;
                }
              }
              std::string::size_type v65 = v55 + v72;
              v55 += v72;
              goto LABEL_121;
            }
            std::string::size_type v65 = v55 + v68;
            v55 += v68;
          }
LABEL_121:
          std::string::basic_string((std::string *)__p, &__str, v65, v56 - v55, (std::allocator<char> *)v153);
          if (v35[2].i8[7] < 0) {
            operator delete(*(void **)v35);
          }
          long long v74 = *(_OWORD *)__p;
          v35[2] = (float32x2_t)v130;
          *(_OWORD *)v35->f32 = v74;
          std::to_string(v153, (int)v35[7].f32[0]);
          int v75 = std::string::insert(v153, 0, " ");
          long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
          *(void *)&long long v130 = *((void *)&v75->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v76;
          v75->__r_.__value_.__l.__size_ = 0;
          v75->__r_.__value_.__r.__words[2] = 0;
          v75->__r_.__value_.__r.__words[0] = 0;
          if ((SBYTE7(v130) & 0x80u) == 0) {
            uint64_t v77 = __p;
          }
          else {
            uint64_t v77 = (void **)__p[0];
          }
          if ((SBYTE7(v130) & 0x80u) == 0) {
            std::string::size_type v78 = BYTE7(v130);
          }
          else {
            std::string::size_type v78 = (std::string::size_type)__p[1];
          }
          std::string::append(&v114, (const std::string::value_type *)v77, v78);
          if (SBYTE7(v130) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v153[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v153[0].__r_.__value_.__l.__data_);
          }
          float v54 = v54 + v35[7].f32[0];
          float v53 = v53 + v35[7].f32[1];
          float32x2_t v52 = vadd_f32(v52, v35[12]);
          int v51 = v35;
          v35 += 17;
        }
        while (v35 != (float32x2_t *)v34);
        if (v119 != (float32x2_t *)v120)
        {
          int v79 = (int)(float)(v54 / (float)(0xF0F0F0F0F0F0F0F1 * (((char *)v120 - (char *)v119) >> 3)));
          *(float *)&v115[0].__r_.__value_.__l.__data_ = v53;
          *((float *)v115[0].__r_.__value_.__r.__words + 1) = (float)v79;
          float32x2_t v122 = v52;
          std::string::value_type v80 = v79 != -1 && *(double *)quasar::OptionValue<double>::value(v104) > (double)v79;
LABEL_139:
          v115[0].__r_.__value_.__s.__data_[8] = v80;
          quasar::PTree::PTree((quasar::PTree *)__p);
          if (!*(unsigned char *)quasar::OptionValue<BOOL>::value(v105))
          {
            uint64_t v82 = quasar::MetaInfo::get((quasar::MetaInfo *)(v31 + 192));
            LODWORD(__p[0]) = *(_DWORD *)v82;
            std::string::operator=((std::string *)&__p[1], (const std::string *)(v82 + 8));
            if (__p != (void **)v82) {
              std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((uint64_t)v131, *(std::string **)(v82 + 32), *(std::string **)(v82 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(v82 + 40) - *(void *)(v82 + 32)) >> 3));
            }
            BYTE8(v132) = *(unsigned char *)(v82 + 56);
          }
          std::string::basic_string[abi:ne180100]<0>(v153, (char *)quasar::SENTENCEPIECE_DECODER_INPUT_META);
          std::string::basic_string[abi:ne180100]<0>(v154, (char *)quasar::SENTENCEPIECE_DECODER_OUTPUT_META);
          std::set<std::string>::set[abi:ne180100]((uint64_t)v110, (const void **)&v153[0].__r_.__value_.__l.__data_, 2);
          std::string::basic_string[abi:ne180100]<0>(v112, "firstleg ");
          quasar::backupMetaInfo((quasar::PTree *)__p, (uint64_t)v110, (const void **)v112);
          if (v113 < 0) {
            operator delete(v112[0]);
          }
          std::__tree<std::string>::destroy((uint64_t)v110, (char *)v110[1]);
          unint64_t v83 = 0;
          while (1)
          {
            if (SHIBYTE(v155[v83]) < 0) {
              operator delete(v153[v83 / 3 + 1].__r_.__value_.__l.__data_);
            }
            v83 -= 3;
            if (v83 == 0x1FFFFFFFFFFFFFFALL)
            {
              std::string::basic_string[abi:ne180100]<0>(v110, (char *)quasar::SENTENCEPIECE_DECODER_INPUT_META);
              quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v112, (quasar::TranslationPhraseInternal *)v143);
              quasar::PTree::PTree(v153, v112);
              quasar::PTree::putChild((uint64_t)__p, (uint64_t)v110, (uint64_t)v153, 1);
              quasar::PTree::~PTree((quasar::PTree *)v153);
              if (v113 < 0) {
                operator delete(v112[0]);
              }
              if (v111 < 0) {
                operator delete(v110[0]);
              }
              std::string::basic_string[abi:ne180100]<0>(v110, (char *)quasar::SENTENCEPIECE_DECODER_OUTPUT_META);
              quasar::PTree::PTree(v153, &__str);
              quasar::PTree::putChild((uint64_t)__p, (uint64_t)v110, (uint64_t)v153, 1);
              quasar::PTree::~PTree((quasar::PTree *)v153);
              if (v111 < 0) {
                operator delete(v110[0]);
              }
              std::string::basic_string[abi:ne180100]<0>(v110, (char *)quasar::SENTENCE_CONFIDENCE_META);
              int v84 = (int)*((float *)v115[0].__r_.__value_.__r.__words + 1);
              LODWORD(v153[0].__r_.__value_.__l.__data_) = quasar::getType((quasar *)(int)*((float *)v115[0].__r_.__value_.__r.__words + 1));
              std::to_string((std::string *)&v153[0].__r_.__value_.__r.__words[1], v84);
              v154[1] = 0;
              v155[0] = 0;
              v155[1] = 0;
              char v156 = 1;
              quasar::PTree::putChild((uint64_t)__p, (uint64_t)v110, (uint64_t)v153, 1);
              quasar::PTree::~PTree((quasar::PTree *)v153);
              if (v111 < 0) {
                operator delete(v110[0]);
              }
              std::string::basic_string[abi:ne180100]<0>(v110, (char *)quasar::LOW_CONFIDENCE_META);
              if (v115[0].__r_.__value_.__s.__data_[8]) {
                uint64_t v85 = "true";
              }
              else {
                uint64_t v85 = "false";
              }
              std::string::basic_string[abi:ne180100]<0>(v112, v85);
              quasar::PTree::PTree(v153, v112);
              quasar::PTree::putChild((uint64_t)__p, (uint64_t)v110, (uint64_t)v153, 1);
              quasar::PTree::~PTree((quasar::PTree *)v153);
              if (v113 < 0) {
                operator delete(v112[0]);
              }
              if (v111 < 0) {
                operator delete(v110[0]);
              }
              std::string::basic_string[abi:ne180100]<0>(v153, (char *)quasar::WORD_CONFIDENCES_META);
              quasar::PTree::getStringOptional((uint64_t)__p, (uint64_t)v153);
            }
          }
        }
      }
LABEL_138:
      float32x2_t v81 = *(float32x2_t *)(v31 + 160);
      v115[0].__r_.__value_.__r.__words[0] = *(void *)v31;
      float32x2_t v122 = v81;
      std::string::value_type v80 = *(unsigned char *)(v31 + 8);
      goto LABEL_139;
    }
    unint64_t v106 = (void *)(a1 + 184);
    uint64_t v87 = &OBJC_IVAR____EARSpeechRecognizer__shouldGenerateVoiceCommandCandidates;
    int v88 = &OBJC_IVAR____EARSpeechRecognizer__shouldGenerateVoiceCommandCandidates;
    do
    {
      quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v153, (quasar::TranslationPhraseInternal *)v4);
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)v115, 0);
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 632) + 184))(&v149);
      sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v149);
      uint64_t v107 = v4;
      quasar::TranslationPhraseInternal::TranslationPhraseInternal(v143, (const quasar::TranslationPhraseInternal *)v4);
      uint64_t v89 = v146;
      int v90 = (std::string *)v145;
      while (v89 != v90)
      {
        uint64_t v89 = (std::string *)((char *)v89 - 136);
        std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100]((uint64_t)v147, (uint64_t)v89);
      }
      char v146 = v90;
      if (v117) {
        BOOL v91 = (uint64_t *)(v117 + 8);
      }
      else {
        BOOL v91 = 0;
      }
      if (v116)
      {
        char v92 = 0;
        uint64_t v93 = 8 * v116;
        do
        {
          uint64_t v94 = *v91;
          v131[1] = 0;
          *(void *)&long long v132 = 0;
          v131[0] = 0;
          __p[1] = 0;
          *(void *)&long long v130 = 0;
          __p[0] = 0;
          WORD4(v130) = 0;
          *((void *)&v132 + 1) = 3212836864;
          LODWORD(v133[0]) = -1;
          memset(&v133[1], 0, 56);
          *(void *)&long long v134 = -1;
          std::string::operator=((std::string *)__p, (const std::string *)(*(void *)(v94 + 48) & 0xFFFFFFFFFFFFFFFELL));
          std::string::operator=((std::string *)&v133[1], (const std::string *)(*(void *)(v94 + 56) & 0xFFFFFFFFFFFFFFFELL));
          LODWORD(v133[0]) = *(_DWORD *)(v94 + 64);
          *(void *)&long long v134 = *(void *)(v94 + 68);
          BYTE8(v130) = 1;
          if (*((float *)v143[0].__r_.__value_.__r.__words + 1) == 1000.0)
          {
            DWORD2(v132) = 1148846080;
          }
          else
          {
            DWORD2(v132) = -1082130432;
            v92 |= *((float *)v143[0].__r_.__value_.__r.__words + 1) != -1.0;
          }
          float v95 = v146;
          if ((unint64_t)v146 >= v147[0])
          {
            uint64_t v96 = (std::string *)std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal const&>((uint64_t *)&v145, (const quasar::TranslationTokenInternal *)__p);
          }
          else
          {
            quasar::TranslationTokenInternal::TranslationTokenInternal(v146, (const quasar::TranslationTokenInternal *)__p);
            uint64_t v96 = (std::string *)((char *)v95 + 136);
          }
          char v146 = v96;
          if (v133[5])
          {
            v133[6] = v133[5];
            operator delete(v133[5]);
          }
          if (SHIBYTE(v133[3]) < 0) {
            operator delete(v133[1]);
          }
          if (v131[0])
          {
            v131[1] = v131[0];
            operator delete(v131[0]);
          }
          if (SBYTE7(v130) < 0) {
            operator delete(__p[0]);
          }
          ++v91;
          v93 -= 8;
        }
        while (v93);
        char v97 = v92 & (quasar::gLogLevel > 3);
        uint64_t v87 = &OBJC_IVAR____EARSpeechRecognizer__shouldGenerateVoiceCommandCandidates;
        int v88 = &OBJC_IVAR____EARSpeechRecognizer__shouldGenerateVoiceCommandCandidates;
        if (v97)
        {
          long long v141 = 0u;
          long long v142 = 0u;
          long long v139 = 0u;
          long long v140 = 0u;
          long long v137 = 0u;
          long long v138 = 0u;
          long long v135 = 0u;
          long long v136 = 0u;
          long long v134 = 0u;
          long long v132 = 0u;
          memset(v133, 0, sizeof(v133));
          long long v130 = 0u;
          *(_OWORD *)float v131 = 0u;
          *(_OWORD *)std::string __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Dropping confidence scores in sentence piece encoding", 53);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
        }
      }
      if (v145 != (quasar::TranslationTokenInternal *)v146) {
        v146[-5].__r_.__value_.__s.__data_[8] = 0;
      }
      quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v110, (quasar::TranslationPhraseInternal *)v143);
      char v144 = 1;
      quasar::PTree::PTree((quasar::PTree *)__p);
      if (!*(unsigned char *)quasar::OptionValue<BOOL>::value(v106))
      {
        uint64_t v98 = quasar::MetaInfo::get((quasar::MetaInfo *)(v107 + 192));
        LODWORD(__p[0]) = *(_DWORD *)v98;
        std::string::operator=((std::string *)&__p[1], (const std::string *)(v98 + 8));
        if (__p != (void **)v98) {
          std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((uint64_t)v131, *(std::string **)(v98 + 32), *(std::string **)(v98 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(v98 + 40) - *(void *)(v98 + 32)) >> 3));
        }
        BYTE8(v132) = *(unsigned char *)(v98 + 56);
      }
      std::string::basic_string[abi:ne180100]<0>(v157, *((char **)v87 + 425));
      std::string::basic_string[abi:ne180100]<0>(v158, *((char **)v88 + 426));
      std::set<std::string>::set[abi:ne180100]((uint64_t)&v126, v157, 2);
      std::string::basic_string[abi:ne180100]<0>(&__str, "firstleg ");
      quasar::backupMetaInfo((quasar::PTree *)__p, (uint64_t)&v126, (const void **)&__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      std::__tree<std::string>::destroy((uint64_t)&v126, (char *)v127);
      for (uint64_t i = 0; i != -6; i -= 3)
      {
        if (SHIBYTE(v158[i + 2]) < 0) {
          operator delete((void *)v157[i + 3]);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v126, *((char **)v87 + 425));
      quasar::PTree::PTree(v157, v153);
      quasar::PTree::putChild((uint64_t)__p, (uint64_t)&v126, (uint64_t)v157, 1);
      quasar::PTree::~PTree((quasar::PTree *)v157);
      if (SHIBYTE(v128) < 0) {
        operator delete(v126);
      }
      std::string::basic_string[abi:ne180100]<0>(&v126, *((char **)v88 + 426));
      quasar::PTree::PTree(v157, v110);
      quasar::PTree::putChild((uint64_t)__p, (uint64_t)&v126, (uint64_t)v157, 1);
      quasar::PTree::~PTree((quasar::PTree *)v157);
      if (SHIBYTE(v128) < 0) {
        operator delete(v126);
      }
      quasar::MetaInfo::replace(&v148, (uint64_t)__p);
      int v100 = v151;
      if ((unint64_t)v151 >= v152)
      {
        int v101 = (quasar::TranslationPhraseInternal *)std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>(&v150, (const quasar::TranslationPhraseInternal *)v143);
      }
      else
      {
        quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)v151, (const quasar::TranslationPhraseInternal *)v143);
        int v101 = (quasar::TranslationPhraseInternal *)((char *)v100 + 200);
      }
      int v151 = v101;
      quasar::PTree::~PTree((quasar::PTree *)__p);
      if (v111 < 0) {
        operator delete(v110[0]);
      }
      quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v143);
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)v115);
      if (SHIBYTE(v153[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v153[0].__r_.__value_.__l.__data_);
      }
      uint64_t v4 = v107 + 200;
    }
    while (v107 + 200 != v108);
    uint64_t v102 = *(void *)(*(void *)a1 - 24);
    std::string::basic_string[abi:ne180100]<0>(__p, "tokens");
    quasar::ProcessingBlock::send(a1 + v102, (const void **)__p, (uint64_t)&v150, 1);
    if (SBYTE7(v130) < 0) {
      operator delete(__p[0]);
    }
    quasar::ProcessingBlock::send(a1 + *(void *)(*(void *)a1 - 24), (uint64_t)&v150, 0);
    __p[0] = &v150;
    std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
}

void sub_1B1C5FAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  STACK[0x3C0] = v70;
  if (a30 && a29 < 0) {
    operator delete(__p);
  }
  quasar::PTree::~PTree((quasar::PTree *)&a70);
  JUMPOUT(0x1B1C5FE40);
}

void sub_1B1C5FAE0()
{
}

void sub_1B1C5FAFC()
{
}

void sub_1B1C5FB08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*(char *)(v70 - 193) < 0) {
    operator delete(*(void **)(v70 - 216));
  }
  quasar::PTree::~PTree((quasar::PTree *)&a70);
  if (a29 < 0) {
    operator delete(a24);
  }
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&STACK[0x2E8]);
  sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&a37);
  if (SLOBYTE(STACK[0x3EF]) < 0) {
    operator delete((void *)STACK[0x3D8]);
  }
  JUMPOUT(0x1B1C5FEC0);
}

void sub_1B1C5FBB8()
{
}

void sub_1B1C5FBC0()
{
}

void sub_1B1C5FBCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (!a30) {
    JUMPOUT(0x1B1C5FD5CLL);
  }
  JUMPOUT(0x1B1C5FD4CLL);
}

void sub_1B1C5FC34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3EF]) < 0) {
    operator delete((void *)STACK[0x3D8]);
  }
  quasar::PTree::~PTree((quasar::PTree *)&a67);
  JUMPOUT(0x1B1C5FE40);
}

void sub_1B1C5FD0C()
{
}

void sub_1B1C5FD14()
{
}

void sub_1B1C5FD24()
{
}

void sub_1B1C5FD40()
{
}

void sub_1B1C5FD88()
{
}

void sub_1B1C5FD94()
{
}

void sub_1B1C5FDC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  STACK[0x378] = v67;
  quasar::TranslationTokenInternal::~TranslationTokenInternal((quasar::TranslationTokenInternal *)&a67);
  JUMPOUT(0x1B1C5FE78);
}

void sub_1B1C5FDD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1C5FEA8);
}

void sub_1B1C5FDE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a67);
  JUMPOUT(0x1B1C5FE50);
}

void sub_1B1C5FDF8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1C5FED0);
}

void sub_1B1C5FE08()
{
  if (SLOBYTE(STACK[0x3EF]) < 0) {
    operator delete((void *)STACK[0x3D8]);
  }
  JUMPOUT(0x1B1C5FE40);
}

void sub_1B1C5FE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&a37);
  if (a69 < 0) {
    operator delete(a64);
  }
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&STACK[0x2E8]);
  sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)(v72 - 216));
  a72 = (uint64_t)&a70;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
  a72 = (uint64_t)&STACK[0x3B8];
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
  _Unwind_Resume(a1);
}

void virtual thunk to'quasar::SentencePieceBlock::process(void *a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t quasar::SentencePieceBlock::minConfigVersion(quasar::SentencePieceBlock *this)
{
  return 135;
}

uint64_t virtual thunk to'quasar::SentencePieceBlock::minConfigVersion(quasar::SentencePieceBlock *this)
{
  return 135;
}

void quasar::ConfiguredProcessingBlock<quasar::SentencePieceOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  uint64_t *v11;

  uint64_t v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
  (**v3)(&v10);
  uint64_t v4 = v10;
  uint64_t v5 = v11;
  if (v10 != v11)
  {
    do
    {
      uint64_t v6 = *v4;
      uint64_t v7 = (std::__shared_weak_count *)a2[1];
      long long v8 = *a2;
      uint64_t v9 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      quasar::OptionValueBase::setContextProvider(v6, &v8);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      ++v4;
    }
    while (v4 != v5);
    uint64_t v4 = v10;
  }
  if (v4)
  {
    unint64_t v11 = v4;
    operator delete(v4);
  }
}

void sub_1B1C5FFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::SentencePieceOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::SentencePieceOptions>::setContextProvider(void *a1, uint64_t *a2)
{
}

uint64_t virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::SentencePieceOptions>::getOptions(void *a1)
{
  return (uint64_t)a1 + *(void *)(*a1 - 104) + 8;
}

void quasar::SentencePieceBlock::~SentencePieceBlock(quasar::SentencePieceBlock *this)
{
  *(void *)this = off_1F0A54208;
  uint64_t v2 = (char **)((char *)this + 656);
  *((void *)this + 82) = off_1F0A542B0;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 80);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)this = &unk_1F0A21B88;
  *((void *)this + 82) = &unk_1F0A21C10;
  quasar::SentencePieceOptions::~SentencePieceOptions((quasar::SentencePieceBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char **v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = off_1F0A54208;
  uint64_t v2 = (char **)((char *)this + 656);
  *((void *)this + 82) = off_1F0A542B0;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 80);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)this = &unk_1F0A21B88;
  *((void *)this + 82) = &unk_1F0A21C10;
  quasar::SentencePieceOptions::~SentencePieceOptions((quasar::SentencePieceBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  JUMPOUT(0x1B3EA8670);
}

const char *quasar::SentencePieceBlock::blockType(quasar::SentencePieceBlock *this)
{
  return "SentencePieceBlock";
}

void virtual thunk to'quasar::SentencePieceBlock::~SentencePieceBlock(quasar::SentencePieceBlock *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = off_1F0A54208;
  *((void *)v1 + 82) = off_1F0A542B0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)uint64_t v1 = &unk_1F0A21B88;
  *((void *)v1 + 82) = &unk_1F0A21C10;
  quasar::SentencePieceOptions::~SentencePieceOptions((quasar::SentencePieceOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 82);
}

{
  char *v1;
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = off_1F0A54208;
  *((void *)v1 + 82) = off_1F0A542B0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)uint64_t v1 = &unk_1F0A21B88;
  *((void *)v1 + 82) = &unk_1F0A21C10;
  quasar::SentencePieceOptions::~SentencePieceOptions((quasar::SentencePieceOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 82);
  JUMPOUT(0x1B3EA8670);
}

const char *virtual thunk to'quasar::SentencePieceBlock::blockType(quasar::SentencePieceBlock *this)
{
  return "SentencePieceBlock";
}

void quasar::SentencePieceOptions::~SentencePieceOptions(quasar::SentencePieceOptions *this)
{
  *(void *)this = &unk_1F0A552C0;
  *((void *)this + 60) = &unk_1F0A51E90;
  std::__tree<std::string>::destroy((uint64_t)this + 600, *((char **)this + 76));
  *((void *)this + 60) = &unk_1F0A52FB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 559) < 0) {
    operator delete(*((void **)this + 67));
  }
  if (*((char *)this + 535) < 0) {
    operator delete(*((void **)this + 64));
  }
  if (*((char *)this + 511) < 0) {
    operator delete(*((void **)this + 61));
  }
  *((void *)this + 40) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 456, *((void **)this + 58));
  if (*((char *)this + 447) < 0) {
    operator delete(*((void **)this + 53));
  }
  *((void *)this + 40) = &unk_1F0A52FB8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 399) < 0) {
    operator delete(*((void **)this + 47));
  }
  if (*((char *)this + 375) < 0) {
    operator delete(*((void **)this + 44));
  }
  if (*((char *)this + 351) < 0) {
    operator delete(*((void **)this + 41));
  }
  *((void *)this + 22) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 296, *((char **)this + 38));
  *((void *)this + 22) = &unk_1F0A52FB8;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 255) < 0) {
    operator delete(*((void **)this + 29));
  }
  if (*((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  *((void *)this + 2) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 152, *((void **)this + 20));
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  *((void *)this + 2) = &unk_1F0A52FB8;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

void quasar::OptionValue<double>::updateOptionalFromPtree(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v5 = (const std::string::value_type *)(a1 + 8);
  uint64_t v6 = quasar::getOptional<double>(a2, a1 + 8);
  char v8 = v7;
  if (*((char *)a3 + 23) >= 0) {
    size_t v9 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v9 = (size_t)a3[1];
  }
  uint64_t v10 = &v17;
  std::string::basic_string[abi:ne180100]((uint64_t)&v17, v9 + 1);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v10 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  if (v9)
  {
    if (*((char *)a3 + 23) >= 0) {
      unint64_t v11 = a3;
    }
    else {
      unint64_t v11 = *a3;
    }
    memmove(v10, v11, v9);
  }
  *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 46;
  int v12 = *(char *)(a1 + 31);
  if (v12 >= 0) {
    unint64_t v13 = v5;
  }
  else {
    unint64_t v13 = *(const std::string::value_type **)(a1 + 8);
  }
  if (v12 >= 0) {
    std::string::size_type v14 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    std::string::size_type v14 = *(void *)(a1 + 16);
  }
  int v15 = std::string::append(&v17, v13, v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v8)
  {
    *(void *)(a1 + 104) = v6;
    std::string::operator=((std::string *)(a1 + 32), &__str);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_1B1C6073C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OptionValue<double>::debugInfo(uint64_t a1)
{
  uint64_t v2 = quasar::OptionValue<BOOL>::fallback(a1);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v31);
  int v3 = *(char *)(a1 + 31);
  if (v3 >= 0) {
    uint64_t v4 = a1 + 8;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
  char v7 = (void *)std::ostream::operator<<();
  char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" (", 2);
  uint64_t v11 = *(void *)(v2 + 32);
  uint64_t v10 = v2 + 32;
  uint64_t v9 = v11;
  int v12 = *(char *)(v10 + 23);
  if (v12 >= 0) {
    uint64_t v13 = v10;
  }
  else {
    uint64_t v13 = v9;
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(v10 + 23);
  }
  else {
    uint64_t v14 = *(void *)(v10 + 8);
  }
  int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)")", 1);
  if (*(void *)(a1 + 136))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" overrides: [", 13);
    long long v16 = *(void **)(a1 + 120);
    std::string v17 = (void *)(a1 + 128);
    if (v16 != (void *)(a1 + 128))
    {
      do
      {
        uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\"", 1);
        int v19 = *((char *)v16 + 55);
        if (v19 >= 0) {
          uint64_t v20 = (uint64_t)(v16 + 4);
        }
        else {
          uint64_t v20 = v16[4];
        }
        if (v19 >= 0) {
          uint64_t v21 = *((unsigned __int8 *)v16 + 55);
        }
        else {
          uint64_t v21 = v16[5];
        }
        uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"\": ", 3);
        std::ostream::operator<<();
        int v23 = (void *)*v17;
        uint64_t v24 = (void *)(a1 + 128);
        if (*v17)
        {
          do
          {
            uint64_t v25 = v23;
            int v23 = (void *)v23[1];
          }
          while (v23);
        }
        else
        {
          do
          {
            uint64_t v25 = (void *)v24[2];
            BOOL v26 = *v25 == (void)v24;
            uint64_t v24 = v25;
          }
          while (v26);
        }
        if (v16 != v25) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", ", 2);
        }
        uint64_t v27 = (void *)v16[1];
        if (v27)
        {
          do
          {
            unint64_t v28 = v27;
            uint64_t v27 = (void *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            unint64_t v28 = (void *)v16[2];
            BOOL v26 = *v28 == (void)v16;
            long long v16 = v28;
          }
          while (!v26);
        }
        long long v16 = v28;
      }
      while (v28 != v17);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"]", 1);
  }
  std::stringbuf::str();
  v31[0] = *MEMORY[0x1E4FBA408];
  uint64_t v29 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v31 + *(void *)(v31[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v32[0] = v29;
  v32[1] = MEMORY[0x1E4FBA470] + 16;
  if (v33 < 0) {
    operator delete((void *)v32[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v34);
}

void sub_1B1C60A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *quasar::OptionValue<double>::addOverride(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[0] = a2;
  v9[1] = a3;
  uint64_t result = (uint64_t *)quasar::getOptional<double>(a4, a1 + 8);
  v8[0] = result;
  v8[1] = v6;
  if ((_BYTE)v6)
  {
    char v7 = result;
    uint64_t result = (uint64_t *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string_view>(a1 + 120, (uint64_t)v9);
    if ((uint64_t *)(a1 + 128) == result) {
      return std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<void>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_hint_unique_impl<std::string_view &,double &>((uint64_t **)(a1 + 120), result, (uint64_t)v9, v8);
    }
    else {
      result[7] = (uint64_t)v7;
    }
  }
  return result;
}

uint64_t quasar::OptionValue<double>::isOverridable()
{
  return 0;
}

uint64_t *std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<void>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_hint_unique_impl<std::string_view &,double &>(uint64_t **a1, uint64_t *a2, uint64_t a3, void *a4)
{
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<void>,true>,std::allocator<std::__value_type<std::string,double>>>::__construct_node<std::string_view &,double &>((uint64_t)a1, a3, a4, (uint64_t)&__p);
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v11, &v10, (const void **)__p + 4);
  char v7 = *v6;
  if (*v6)
  {
    char v8 = (void **)__p;
    std::string __p = 0;
    if (v8) {
      std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&v13, v8);
    }
  }
  else
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v6, (uint64_t *)__p);
    return (uint64_t *)__p;
  }
  return v7;
}

void sub_1B1C60BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<void>,true>,std::allocator<std::__value_type<std::string,double>>>::__construct_node<std::string_view &,double &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  char v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = std::pair<std::string const,double>::pair[abi:ne180100]<std::string_view &,double &,0>(v8 + 4, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1C60C58(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,double>::pair[abi:ne180100]<std::string_view &,double &,0>(void *__dst, uint64_t a2, void *a3)
{
  size_t v4 = *(void *)(a2 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = *(const void **)a2;
  if (v4 >= 0x17)
  {
    uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v8 = v4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = operator new(v8 + 1);
    __dst[1] = v4;
    __dst[2] = v9 | 0x8000000000000000;
    *__dst = v7;
  }
  else
  {
    *((unsigned char *)__dst + 23) = v4;
    uint64_t v7 = __dst;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v7, v6, v4);
LABEL_9:
  *((unsigned char *)v7 + v4) = 0;
  __dst[3] = *a3;
  return __dst;
}

void std::shared_ptr<sentencepiece::SentencePieceProcessor>::shared_ptr[abi:ne180100]<sentencepiece::SentencePieceProcessor,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B1C60D94(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<sentencepiece::SentencePieceProcessor>::shared_ptr[abi:ne180100]<sentencepiece::SentencePieceProcessor,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<sentencepiece::SentencePieceProcessor *,std::shared_ptr<sentencepiece::SentencePieceProcessor>::__shared_ptr_default_delete<sentencepiece::SentencePieceProcessor,sentencepiece::SentencePieceProcessor>,std::allocator<sentencepiece::SentencePieceProcessor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<sentencepiece::SentencePieceProcessor *,std::shared_ptr<sentencepiece::SentencePieceProcessor>::__shared_ptr_default_delete<sentencepiece::SentencePieceProcessor,sentencepiece::SentencePieceProcessor>,std::allocator<sentencepiece::SentencePieceProcessor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<sentencepiece::SentencePieceProcessor *,std::shared_ptr<sentencepiece::SentencePieceProcessor>::__shared_ptr_default_delete<sentencepiece::SentencePieceProcessor,sentencepiece::SentencePieceProcessor>,std::allocator<sentencepiece::SentencePieceProcessor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::set<std::string>::set[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  size_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 24 * a3;
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 3;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_1B1C60EC8(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t quasar::OptionValue<double>::value(void *a1)
{
  uint64_t v2 = quasar::OptionValue<BOOL>::fallback((uint64_t)a1) + 104;
  if ((*(unsigned int (**)(void *))(*a1 + 32))(a1))
  {
    uint64_t v3 = (const void ****)a1[11];
    size_t v4 = (std::__shared_weak_count *)v3[1];
    if (v4)
    {
      uint64_t v5 = *v3;
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v6 = std::__shared_weak_count::lock(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v6)
      {
        if (v5)
        {
          uint64_t v7 = *v5;
          uint64_t v8 = v5[1];
          if (*v5 != v8)
          {
            uint64_t v9 = (uint64_t)(a1 + 15);
            uint64_t v10 = a1 + 16;
            do
            {
              uint64_t v11 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v9, v7);
              if (v10 != (void *)v11) {
                uint64_t v2 = v11 + 56;
              }
              v7 += 3;
            }
            while (v7 != v8);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
  return v2;
}

void sub_1B1C60FC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CuWorkspace::GetMatrix<float>@<X0>(void *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v7 = a3 * a2;
  if (a1[8] < (unint64_t)(4 * v7))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Failed to create a ", 19);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" by ", 4);
    uint64_t v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" matrix with only ", 18);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, " bytes available in the workspace");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  kaldi::CuWorkspace::GetVector<float>(a1, v7, a4, v12);
  return kaldi::CuSubMatrix<float>::CuSubMatrix(a5, (uint64_t)v12, a2);
}

void kaldi::CuWorkspace::GetVector<float>(void *a1@<X0>, int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  unint64_t v6 = 4 * a2;
  if (v6 > a1[8])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Failed to create a vector of ", 29);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" elements with only ", 20);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, " bytes available in the workspace");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  uint64_t v7 = a1[1];
  a4[2] = 0;
  a4[3] = 0;
  *a4 = &unk_1F0A472D0;
  a4[1] = v7;
  *((_DWORD *)a4 + 4) = a2;
  if (a3 == 3 || !a3) {
    kaldi::CuVectorBase<float>::SetZero((uint64_t)a4);
  }
  std::deque<char *>::push_back(a1 + 2, a1 + 1);
  a1[1] += v6;
  a1[8] -= v6;
}

void sub_1B1C611CC(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = v2;
  *(void *)(v1 + 8) = 0;
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v1 + ++*(_DWORD *)(result + 24) = 0;
  _Unwind_Resume(a1);
}

kaldi::CuWorkspace *kaldi::CuWorkspace::CuWorkspace(kaldi::CuWorkspace *this, size_t a2)
{
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  kaldi::CuWorkspace::Allocate(this, a2);
  return this;
}

void sub_1B1C61214(_Unwind_Exception *a1)
{
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)(v1 + 16));
  _Unwind_Resume(a1);
}

void *kaldi::CuWorkspace::Allocate(kaldi::CuWorkspace *this, size_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "size >= 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  kaldi::CuWorkspace::Destroy(this);
  *((void *)this + 8) = a2;
  uint64_t result = malloc_type_malloc(a2, 0xF4BC7407uLL);
  *(void *)this = result;
  *((void *)this + 1) = result;
  return result;
}

void kaldi::CuWorkspace::Destroy(kaldi::CuWorkspace *this)
{
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    uint64_t v3 = v2[7] - 1;
    uint64_t v4 = *(void *)(*(void *)(v2[3] + (((unint64_t)(v3 + v2[6]) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v3 + v2[6]) & 0x1FF));
    uint64_t v5 = v2[1] - v4 + v2[8];
    v2[1] = v4;
    v2[7] = v3;
    v2[8] = v5;
    std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v2 + 2, 1);
  }
  else
  {
    unint64_t v6 = *(void **)this;
    if (*(void *)this) {
      free(v6);
    }
  }
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
}

void kaldi::CuWorkspace::GetChildWorkspace(kaldi::CuWorkspace *this, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a2 == -1) {
    uint64_t v2 = *((void *)this + 8);
  }
  if (v2 < 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "mem_size_bytes >= 0");
  }
  else
  {
    if (v2 <= *((void *)this + 8)) {
      operator new();
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Can't create a child workspace of ", 34);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)". Only have ", 12);
    uint64_t v4 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, " bytes");
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
}

void sub_1B1C6144C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::CuWorkspace::~CuWorkspace(kaldi::CuWorkspace *this)
{
}

void std::deque<char *>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<char *>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<char *>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int32 v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  float v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1C617EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B1C61904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1B1C61BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, int a6, __int16 a7, char a8, char a9, uint64_t a10, uint64_t a11, char *__pa, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__split_buffer<std::wstring> *a19, uint64_t a20)
{
  float __pa = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);

  _Unwind_Resume(a1);
}

void sub_1B1C61DF4(_Unwind_Exception *a1)
{
  uint64_t v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1B1C626B4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1B1C626CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__split_buffer<std::wstring> *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
}

void sub_1B1C626E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1C62704);
}

void sub_1B1C62700()
{
  JUMPOUT(0x1B1C62708);
}

void sub_1B1C62F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  STACK[0x208] = v18 - 224;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x208]);
  if (*(char *)(v18 - 177) < 0) {
    operator delete(*(void **)(v18 - 200));
  }

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void sub_1B1C63430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (*(char *)(v16 - 113) < 0) {
    operator delete(*(void **)(v16 - 136));
  }

  _Unwind_Resume(a1);
}

void std::__function::__func<BOOL (*)(std::string const&),std::allocator<BOOL (*)(std::string const&)>,BOOL ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<BOOL (*)(std::string const&),std::allocator<BOOL (*)(std::string const&)>,BOOL ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F0A5A5F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(std::string const&),std::allocator<BOOL (*)(std::string const&)>,BOOL ()(std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5A5F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(std::string const&),std::allocator<BOOL (*)(std::string const&)>,BOOL ()(std::string const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<BOOL (*)(std::string const&),std::allocator<BOOL (*)(std::string const&)>,BOOL ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<BOOL (*)(std::string const&),std::allocator<BOOL (*)(std::string const&)>,BOOL ()(std::string const&)>::target_type()
{
}

void quasar::EndpointConfigHelper::computeFeats(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, unsigned int **a4@<X3>, int a5@<W4>, double **a6@<X8>, float a7@<S0>, float a8@<S1>, float a9@<S2>, float a10@<S3>, float a11@<S4>, float a12@<S5>)
{
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  uint64_t v12 = *(_DWORD **)a1;
  uint64_t v13 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 != v13)
  {
    uint64_t v18 = a6 + 2;
    double v99 = a12;
    double v100 = (double)a5;
    double v19 = a11;
    double v20 = a10;
    double v21 = a9;
    double v22 = a8;
    double v23 = expf(-a7);
    double v24 = (float)a3;
    double v25 = (float)a2;
    while (2)
    {
      switch(*v12)
      {
        case 0:
          uint64_t v27 = a6[1];
          unint64_t v26 = (unint64_t)a6[2];
          if ((unint64_t)v27 < v26)
          {
            *uint64_t v27 = v25;
            uint64_t v28 = v27 + 1;
            goto LABEL_45;
          }
          uint64_t v59 = *a6;
          uint64_t v74 = v27 - *a6;
          unint64_t v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v76 = v26 - (void)v59;
          if (v76 >> 2 > v75) {
            unint64_t v75 = v76 >> 2;
          }
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v63 = v75;
          }
          if (v63)
          {
            __int32 v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v18, v63);
            uint64_t v59 = *a6;
            uint64_t v27 = a6[1];
          }
          else
          {
            __int32 v64 = 0;
          }
          uint64_t v89 = (double *)&v64[8 * v74];
          *uint64_t v89 = v25;
          BOOL v58 = v89 + 1;
          while (v27 != v59)
          {
            uint64_t v94 = *((void *)v27-- - 1);
            *((void *)v89-- - 1) = v94;
          }
          goto LABEL_154;
        case 1:
          uint64_t v52 = a6[1];
          unint64_t v51 = (unint64_t)a6[2];
          if ((unint64_t)v52 < v51)
          {
            *uint64_t v52 = v24;
            uint64_t v28 = v52 + 1;
            goto LABEL_45;
          }
          uint64_t v59 = *a6;
          uint64_t v77 = v52 - *a6;
          unint64_t v78 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v79 = v51 - (void)v59;
          if (v79 >> 2 > v78) {
            unint64_t v78 = v79 >> 2;
          }
          if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v63 = v78;
          }
          if (v63)
          {
            __int32 v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v18, v63);
            uint64_t v59 = *a6;
            uint64_t v52 = a6[1];
          }
          else
          {
            __int32 v64 = 0;
          }
          uint64_t v89 = (double *)&v64[8 * v77];
          *uint64_t v89 = v24;
          BOOL v58 = v89 + 1;
          while (v52 != v59)
          {
            uint64_t v95 = *((void *)v52-- - 1);
            *((void *)v89-- - 1) = v95;
          }
          goto LABEL_154;
        case 2:
          int v35 = a6[1];
          unint64_t v34 = (unint64_t)a6[2];
          if ((unint64_t)v35 < v34)
          {
            double *v35 = v23;
            uint64_t v28 = v35 + 1;
            goto LABEL_45;
          }
          uint64_t v59 = *a6;
          uint64_t v68 = v35 - *a6;
          unint64_t v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v70 = v34 - (void)v59;
          if (v70 >> 2 > v69) {
            unint64_t v69 = v70 >> 2;
          }
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v63 = v69;
          }
          if (v63)
          {
            __int32 v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v18, v63);
            uint64_t v59 = *a6;
            int v35 = a6[1];
          }
          else
          {
            __int32 v64 = 0;
          }
          uint64_t v89 = (double *)&v64[8 * v68];
          *uint64_t v89 = v23;
          BOOL v58 = v89 + 1;
          while (v35 != v59)
          {
            uint64_t v92 = *((void *)v35-- - 1);
            *((void *)v89-- - 1) = v92;
          }
          goto LABEL_154;
        case 3:
          uint64_t v37 = *a4;
          uint64_t v36 = a4[1];
          if (*a4 != v36)
          {
            int v38 = a6[1];
            do
            {
              double v39 = (float)*v37;
              if ((unint64_t)v38 >= *v18)
              {
                int v41 = *a6;
                uint64_t v42 = v38 - *a6;
                unint64_t v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) >> 61) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v44 = *v18 - (void)v41;
                if (v44 >> 2 > v43) {
                  unint64_t v43 = v44 >> 2;
                }
                if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v45 = v43;
                }
                if (v45)
                {
                  unint64_t v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v18, v45);
                  int v41 = *a6;
                  int v38 = a6[1];
                }
                else
                {
                  unint64_t v46 = 0;
                }
                uint64_t v47 = (double *)&v46[8 * v42];
                double *v47 = v39;
                uint64_t v40 = v47 + 1;
                while (v38 != v41)
                {
                  uint64_t v48 = *((void *)v38-- - 1);
                  *((void *)v47-- - 1) = v48;
                }
                *a6 = v47;
                a6[1] = v40;
                a6[2] = (double *)&v46[8 * v45];
                if (v41) {
                  operator delete(v41);
                }
              }
              else
              {
                *int v38 = v39;
                uint64_t v40 = v38 + 1;
              }
              a6[1] = v40;
              ++v37;
              int v38 = v40;
            }
            while (v37 != v36);
          }
          goto LABEL_157;
        case 4:
          long long v30 = a6[1];
          unint64_t v29 = (unint64_t)a6[2];
          if ((unint64_t)v30 < v29)
          {
            double *v30 = v22;
            uint64_t v28 = v30 + 1;
            goto LABEL_45;
          }
          uint64_t v59 = *a6;
          uint64_t v60 = v30 - *a6;
          unint64_t v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v62 = v29 - (void)v59;
          if (v62 >> 2 > v61) {
            unint64_t v61 = v62 >> 2;
          }
          if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v63 = v61;
          }
          if (v63)
          {
            __int32 v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v18, v63);
            uint64_t v59 = *a6;
            long long v30 = a6[1];
          }
          else
          {
            __int32 v64 = 0;
          }
          uint64_t v89 = (double *)&v64[8 * v60];
          *uint64_t v89 = v22;
          BOOL v58 = v89 + 1;
          while (v30 != v59)
          {
            uint64_t v90 = *((void *)v30-- - 1);
            *((void *)v89-- - 1) = v90;
          }
          goto LABEL_154;
        case 5:
          long long v54 = a6[1];
          unint64_t v53 = (unint64_t)a6[2];
          if ((unint64_t)v54 < v53)
          {
            *long long v54 = v21;
            uint64_t v28 = v54 + 1;
            goto LABEL_45;
          }
          uint64_t v59 = *a6;
          uint64_t v80 = v54 - *a6;
          unint64_t v81 = v80 + 1;
          if ((unint64_t)(v80 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v82 = v53 - (void)v59;
          if (v82 >> 2 > v81) {
            unint64_t v81 = v82 >> 2;
          }
          if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v63 = v81;
          }
          if (v63)
          {
            __int32 v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v18, v63);
            uint64_t v59 = *a6;
            long long v54 = a6[1];
          }
          else
          {
            __int32 v64 = 0;
          }
          uint64_t v89 = (double *)&v64[8 * v80];
          *uint64_t v89 = v21;
          BOOL v58 = v89 + 1;
          while (v54 != v59)
          {
            uint64_t v96 = *((void *)v54-- - 1);
            *((void *)v89-- - 1) = v96;
          }
          goto LABEL_154;
        case 6:
          __int32 v56 = a6[1];
          unint64_t v55 = (unint64_t)a6[2];
          if ((unint64_t)v56 < v55)
          {
            *__int32 v56 = v20;
            uint64_t v28 = v56 + 1;
            goto LABEL_45;
          }
          uint64_t v59 = *a6;
          uint64_t v83 = v56 - *a6;
          unint64_t v84 = v83 + 1;
          if ((unint64_t)(v83 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v85 = v55 - (void)v59;
          if (v85 >> 2 > v84) {
            unint64_t v84 = v85 >> 2;
          }
          if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v63 = v84;
          }
          if (v63)
          {
            __int32 v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v18, v63);
            uint64_t v59 = *a6;
            __int32 v56 = a6[1];
          }
          else
          {
            __int32 v64 = 0;
          }
          uint64_t v89 = (double *)&v64[8 * v83];
          *uint64_t v89 = v20;
          BOOL v58 = v89 + 1;
          while (v56 != v59)
          {
            uint64_t v97 = *((void *)v56-- - 1);
            *((void *)v89-- - 1) = v97;
          }
          goto LABEL_154;
        case 7:
          uint64_t v50 = a6[1];
          unint64_t v49 = (unint64_t)a6[2];
          if ((unint64_t)v50 < v49)
          {
            *uint64_t v50 = v19;
            uint64_t v28 = v50 + 1;
            goto LABEL_45;
          }
          uint64_t v59 = *a6;
          uint64_t v71 = v50 - *a6;
          unint64_t v72 = v71 + 1;
          if ((unint64_t)(v71 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v73 = v49 - (void)v59;
          if (v73 >> 2 > v72) {
            unint64_t v72 = v73 >> 2;
          }
          if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v63 = v72;
          }
          if (v63)
          {
            __int32 v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v18, v63);
            uint64_t v59 = *a6;
            uint64_t v50 = a6[1];
          }
          else
          {
            __int32 v64 = 0;
          }
          uint64_t v89 = (double *)&v64[8 * v71];
          *uint64_t v89 = v19;
          BOOL v58 = v89 + 1;
          while (v50 != v59)
          {
            uint64_t v93 = *((void *)v50-- - 1);
            *((void *)v89-- - 1) = v93;
          }
          goto LABEL_154;
        case 8:
          long long v32 = a6[1];
          unint64_t v57 = (unint64_t)a6[2];
          if ((unint64_t)v32 < v57)
          {
            double v33 = v99;
            goto LABEL_44;
          }
          uint64_t v59 = *a6;
          uint64_t v86 = v32 - *a6;
          unint64_t v87 = v86 + 1;
          if ((unint64_t)(v86 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v88 = v57 - (void)v59;
          if (v88 >> 2 > v87) {
            unint64_t v87 = v88 >> 2;
          }
          if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v63 = v87;
          }
          if (v63)
          {
            __int32 v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v18, v63);
            uint64_t v59 = *a6;
            long long v32 = a6[1];
          }
          else
          {
            __int32 v64 = 0;
          }
          uint64_t v89 = (double *)&v64[8 * v86];
          *uint64_t v89 = v99;
          BOOL v58 = v89 + 1;
          while (v32 != v59)
          {
            uint64_t v98 = *((void *)v32-- - 1);
            *((void *)v89-- - 1) = v98;
          }
          goto LABEL_154;
        case 9:
          long long v32 = a6[1];
          unint64_t v31 = (unint64_t)a6[2];
          if ((unint64_t)v32 >= v31)
          {
            uint64_t v59 = *a6;
            uint64_t v65 = v32 - *a6;
            unint64_t v66 = v65 + 1;
            if ((unint64_t)(v65 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v67 = v31 - (void)v59;
            if (v67 >> 2 > v66) {
              unint64_t v66 = v67 >> 2;
            }
            if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v63 = v66;
            }
            if (v63)
            {
              __int32 v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v18, v63);
              uint64_t v59 = *a6;
              long long v32 = a6[1];
            }
            else
            {
              __int32 v64 = 0;
            }
            uint64_t v89 = (double *)&v64[8 * v65];
            *uint64_t v89 = v100;
            BOOL v58 = v89 + 1;
            while (v32 != v59)
            {
              uint64_t v91 = *((void *)v32-- - 1);
              *((void *)v89-- - 1) = v91;
            }
LABEL_154:
            *a6 = v89;
            a6[1] = v58;
            a6[2] = (double *)&v64[8 * v63];
            if (v59) {
              operator delete(v59);
            }
          }
          else
          {
            double v33 = v100;
LABEL_44:
            *long long v32 = v33;
            uint64_t v28 = v32 + 1;
LABEL_45:
            BOOL v58 = v28;
          }
          a6[1] = v58;
LABEL_157:
          if (++v12 == v13) {
            return;
          }
          continue;
        default:
          if (quasar::gLogLevel >= 5)
          {
            memset(v101, 0, 272);
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v101);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"Feature type unknown. Ignoring feature ..", 41);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v101);
          }
          goto LABEL_157;
      }
    }
  }
}

void sub_1B1C63D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void quasar::EndpointConfigHelper::initModels(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (!v3)
  {
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Endpoint model file cannot be empty");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if (a3)
  {
    fst::FstReadOptions::FstReadOptions(__p, a1, 0, 0, 0);
    LODWORD(v13) = 2;
    kaldi::nnet1::Nnet::ReadMapped(a2, (uint64_t)__p);
  }
  kaldi::nnet1::Nnet::Read(a2, a1);
  if (quasar::gLogLevel >= 4)
  {
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Initialized nnet with Model file =", 34);
    int v7 = *(char *)(a1 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = *(void *)a1;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
}

void quasar::EndpointConfigHelper::initFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a1 + 8);
  }
  if (!v2)
  {
    long long v113 = 0u;
    long long v114 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    long long v98 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v98);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v98, "endpoint-feature-list cannot be empty");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v98);
  }
  uint64_t v115 = 0;
  uint64_t v116 = 0;
  uint64_t v117 = 0;
  kaldi::SplitStringToVector((const std::string *)a1, ",", 0, (uint64_t)&v115);
  uint64_t v4 = v115;
  uint64_t v5 = v116;
  while (v4 != v5)
  {
    size_t v6 = strlen(quasar::EP_NUM_OF_WORDS_STR[0]);
    size_t v7 = v6;
    size_t v8 = *(unsigned __int8 *)(v4 + 23);
    if (*(char *)(v4 + 23) < 0)
    {
      size_t v10 = *(void *)(v4 + 8);
      if (v6 != v10)
      {
        long long v11 = quasar::EP_NUM_TRAILING_SIL_STR[0];
        size_t v12 = strlen(quasar::EP_NUM_TRAILING_SIL_STR[0]);
LABEL_19:
        if (v12 == v10)
        {
          if (v10 == -1) {
            std::string::__throw_out_of_range[abi:ne180100]();
          }
          long long v13 = *(const void **)v4;
          goto LABEL_22;
        }
        long long v14 = quasar::EP_EOS_LIKELIHOOD_STR[0];
        size_t v15 = strlen(quasar::EP_EOS_LIKELIHOOD_STR[0]);
        goto LABEL_32;
      }
      if (v6 == -1) {
LABEL_241:
      }
        std::string::__throw_out_of_range[abi:ne180100]();
      uint64_t v9 = *(const void **)v4;
    }
    else
    {
      if (v6 != v8)
      {
        long long v11 = quasar::EP_NUM_TRAILING_SIL_STR[0];
        size_t v12 = strlen(quasar::EP_NUM_TRAILING_SIL_STR[0]);
        goto LABEL_16;
      }
      uint64_t v9 = (const void *)v4;
      if (v7 == -1) {
        goto LABEL_241;
      }
    }
    if (memcmp(v9, quasar::EP_NUM_OF_WORDS_STR[0], v7))
    {
      long long v11 = quasar::EP_NUM_TRAILING_SIL_STR[0];
      size_t v12 = strlen(quasar::EP_NUM_TRAILING_SIL_STR[0]);
      if ((v8 & 0x80) != 0)
      {
        size_t v10 = *(void *)(v4 + 8);
        goto LABEL_19;
      }
LABEL_16:
      size_t v10 = v8;
      long long v13 = (const void *)v4;
      if (v12 != v8)
      {
        long long v14 = quasar::EP_EOS_LIKELIHOOD_STR[0];
        size_t v15 = strlen(quasar::EP_EOS_LIKELIHOOD_STR[0]);
        goto LABEL_24;
      }
LABEL_22:
      if (!memcmp(v13, v11, v10))
      {
        long long v23 = *(int **)(a2 + 8);
        unint64_t v22 = *(void *)(a2 + 16);
        if ((unint64_t)v23 >= v22)
        {
          unint64_t v29 = *(int **)a2;
          uint64_t v39 = ((uint64_t)v23 - *(void *)a2) >> 2;
          unint64_t v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v41 = v22 - (void)v29;
          if (v41 >> 1 > v40) {
            unint64_t v40 = v41 >> 1;
          }
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v40;
          }
          if (v33)
          {
            unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v33);
            unint64_t v29 = *(int **)a2;
            long long v23 = *(int **)(a2 + 8);
          }
          else
          {
            unint64_t v34 = 0;
          }
          unint64_t v63 = &v34[4 * v39];
          *(_DWORD *)unint64_t v63 = 1;
          __int32 v64 = v63 + 4;
          while (v23 != v29)
          {
            int v73 = *--v23;
            *((_DWORD *)v63 - 1) = v73;
            v63 -= 4;
          }
          goto LABEL_237;
        }
        int v24 = 1;
        goto LABEL_183;
      }
      long long v14 = quasar::EP_EOS_LIKELIHOOD_STR[0];
      size_t v15 = strlen(quasar::EP_EOS_LIKELIHOOD_STR[0]);
      if ((v8 & 0x80) == 0)
      {
LABEL_24:
        size_t v10 = v8;
        long long v16 = (const void *)v4;
        if (v15 != v8)
        {
          long long v17 = quasar::EP_PAUSE_COUNTS_STR[0];
          size_t v18 = strlen(quasar::EP_PAUSE_COUNTS_STR[0]);
          goto LABEL_37;
        }
LABEL_35:
        if (!memcmp(v16, v14, v10))
        {
          long long v23 = *(int **)(a2 + 8);
          unint64_t v28 = *(void *)(a2 + 16);
          if ((unint64_t)v23 >= v28)
          {
            unint64_t v29 = *(int **)a2;
            uint64_t v46 = ((uint64_t)v23 - *(void *)a2) >> 2;
            unint64_t v47 = v46 + 1;
            if ((unint64_t)(v46 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v48 = v28 - (void)v29;
            if (v48 >> 1 > v47) {
              unint64_t v47 = v48 >> 1;
            }
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v47;
            }
            if (v33)
            {
              unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v33);
              unint64_t v29 = *(int **)a2;
              long long v23 = *(int **)(a2 + 8);
            }
            else
            {
              unint64_t v34 = 0;
            }
            unint64_t v63 = &v34[4 * v46];
            *(_DWORD *)unint64_t v63 = 2;
            __int32 v64 = v63 + 4;
            while (v23 != v29)
            {
              int v79 = *--v23;
              *((_DWORD *)v63 - 1) = v79;
              v63 -= 4;
            }
            goto LABEL_237;
          }
          int v24 = 2;
          goto LABEL_183;
        }
        long long v17 = quasar::EP_PAUSE_COUNTS_STR[0];
        size_t v18 = strlen(quasar::EP_PAUSE_COUNTS_STR[0]);
        if ((v8 & 0x80) == 0)
        {
LABEL_37:
          size_t v10 = v8;
          long long v25 = (const void *)v4;
          if (v18 != v8)
          {
            long long v26 = quasar::EP_SILENCE_POSTERIOR_STR[0];
            size_t v27 = strlen(quasar::EP_SILENCE_POSTERIOR_STR[0]);
            goto LABEL_56;
          }
LABEL_54:
          if (!memcmp(v25, v17, v10))
          {
            long long v23 = *(int **)(a2 + 8);
            unint64_t v38 = *(void *)(a2 + 16);
            if ((unint64_t)v23 >= v38)
            {
              unint64_t v29 = *(int **)a2;
              uint64_t v53 = ((uint64_t)v23 - *(void *)a2) >> 2;
              unint64_t v54 = v53 + 1;
              if ((unint64_t)(v53 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v55 = v38 - (void)v29;
              if (v55 >> 1 > v54) {
                unint64_t v54 = v55 >> 1;
              }
              if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v33 = v54;
              }
              if (v33)
              {
                unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v33);
                unint64_t v29 = *(int **)a2;
                long long v23 = *(int **)(a2 + 8);
              }
              else
              {
                unint64_t v34 = 0;
              }
              unint64_t v63 = &v34[4 * v53];
              *(_DWORD *)unint64_t v63 = 3;
              __int32 v64 = v63 + 4;
              while (v23 != v29)
              {
                int v88 = *--v23;
                *((_DWORD *)v63 - 1) = v88;
                v63 -= 4;
              }
              goto LABEL_237;
            }
            int v24 = 3;
            goto LABEL_183;
          }
          long long v26 = quasar::EP_SILENCE_POSTERIOR_STR[0];
          size_t v27 = strlen(quasar::EP_SILENCE_POSTERIOR_STR[0]);
          if ((v8 & 0x80) == 0)
          {
LABEL_56:
            size_t v10 = v8;
            int v35 = (const void *)v4;
            if (v27 != v8)
            {
              uint64_t v36 = quasar::EP_CLIENT_SILENCE_FRAMES_COUNT_MS_STR[0];
              size_t v37 = strlen(quasar::EP_CLIENT_SILENCE_FRAMES_COUNT_MS_STR[0]);
              goto LABEL_75;
            }
LABEL_73:
            if (!memcmp(v35, v26, v10))
            {
              long long v23 = *(int **)(a2 + 8);
              unint64_t v45 = *(void *)(a2 + 16);
              if ((unint64_t)v23 >= v45)
              {
                unint64_t v29 = *(int **)a2;
                uint64_t v60 = ((uint64_t)v23 - *(void *)a2) >> 2;
                unint64_t v61 = v60 + 1;
                if ((unint64_t)(v60 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v62 = v45 - (void)v29;
                if (v62 >> 1 > v61) {
                  unint64_t v61 = v62 >> 1;
                }
                if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v33 = v61;
                }
                if (v33)
                {
                  unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v33);
                  unint64_t v29 = *(int **)a2;
                  long long v23 = *(int **)(a2 + 8);
                }
                else
                {
                  unint64_t v34 = 0;
                }
                unint64_t v63 = &v34[4 * v60];
                *(_DWORD *)unint64_t v63 = 4;
                __int32 v64 = v63 + 4;
                while (v23 != v29)
                {
                  int v92 = *--v23;
                  *((_DWORD *)v63 - 1) = v92;
                  v63 -= 4;
                }
                goto LABEL_237;
              }
              int v24 = 4;
              goto LABEL_183;
            }
            uint64_t v36 = quasar::EP_CLIENT_SILENCE_FRAMES_COUNT_MS_STR[0];
            size_t v37 = strlen(quasar::EP_CLIENT_SILENCE_FRAMES_COUNT_MS_STR[0]);
            if ((v8 & 0x80) == 0)
            {
LABEL_75:
              size_t v10 = v8;
              uint64_t v42 = (const void *)v4;
              if (v37 != v8)
              {
                unint64_t v43 = quasar::EP_CLIENT_SILENCE_PROBABILITY_STR[0];
                size_t v44 = strlen(quasar::EP_CLIENT_SILENCE_PROBABILITY_STR[0]);
                goto LABEL_94;
              }
LABEL_92:
              if (!memcmp(v42, v36, v10))
              {
                long long v23 = *(int **)(a2 + 8);
                unint64_t v52 = *(void *)(a2 + 16);
                if ((unint64_t)v23 >= v52)
                {
                  unint64_t v29 = *(int **)a2;
                  uint64_t v70 = ((uint64_t)v23 - *(void *)a2) >> 2;
                  unint64_t v71 = v70 + 1;
                  if ((unint64_t)(v70 + 1) >> 62) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v72 = v52 - (void)v29;
                  if (v72 >> 1 > v71) {
                    unint64_t v71 = v72 >> 1;
                  }
                  if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v33 = v71;
                  }
                  if (v33)
                  {
                    unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v33);
                    unint64_t v29 = *(int **)a2;
                    long long v23 = *(int **)(a2 + 8);
                  }
                  else
                  {
                    unint64_t v34 = 0;
                  }
                  unint64_t v63 = &v34[4 * v70];
                  *(_DWORD *)unint64_t v63 = 5;
                  __int32 v64 = v63 + 4;
                  while (v23 != v29)
                  {
                    int v93 = *--v23;
                    *((_DWORD *)v63 - 1) = v93;
                    v63 -= 4;
                  }
                  goto LABEL_237;
                }
                int v24 = 5;
                goto LABEL_183;
              }
              unint64_t v43 = quasar::EP_CLIENT_SILENCE_PROBABILITY_STR[0];
              size_t v44 = strlen(quasar::EP_CLIENT_SILENCE_PROBABILITY_STR[0]);
              if ((v8 & 0x80) == 0)
              {
LABEL_94:
                size_t v10 = v8;
                unint64_t v49 = (const void *)v4;
                if (v44 != v8)
                {
                  uint64_t v50 = quasar::EP_SILENCE_POSTERIOR_NF_STR[0];
                  size_t v51 = strlen(quasar::EP_SILENCE_POSTERIOR_NF_STR[0]);
                  goto LABEL_113;
                }
LABEL_111:
                if (!memcmp(v49, v43, v10))
                {
                  long long v23 = *(int **)(a2 + 8);
                  unint64_t v59 = *(void *)(a2 + 16);
                  if ((unint64_t)v23 >= v59)
                  {
                    unint64_t v29 = *(int **)a2;
                    uint64_t v76 = ((uint64_t)v23 - *(void *)a2) >> 2;
                    unint64_t v77 = v76 + 1;
                    if ((unint64_t)(v76 + 1) >> 62) {
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v78 = v59 - (void)v29;
                    if (v78 >> 1 > v77) {
                      unint64_t v77 = v78 >> 1;
                    }
                    if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v33 = v77;
                    }
                    if (v33)
                    {
                      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v33);
                      unint64_t v29 = *(int **)a2;
                      long long v23 = *(int **)(a2 + 8);
                    }
                    else
                    {
                      unint64_t v34 = 0;
                    }
                    unint64_t v63 = &v34[4 * v76];
                    *(_DWORD *)unint64_t v63 = 6;
                    __int32 v64 = v63 + 4;
                    while (v23 != v29)
                    {
                      int v94 = *--v23;
                      *((_DWORD *)v63 - 1) = v94;
                      v63 -= 4;
                    }
                    goto LABEL_237;
                  }
                  int v24 = 6;
                  goto LABEL_183;
                }
                uint64_t v50 = quasar::EP_SILENCE_POSTERIOR_NF_STR[0];
                size_t v51 = strlen(quasar::EP_SILENCE_POSTERIOR_NF_STR[0]);
                if ((v8 & 0x80) == 0)
                {
LABEL_113:
                  size_t v10 = v8;
                  __int32 v56 = (const void *)v4;
                  if (v51 != v8)
                  {
                    unint64_t v57 = quasar::EP_SERVER_FEATURES_LATENCY_STR[0];
                    size_t v58 = strlen(quasar::EP_SERVER_FEATURES_LATENCY_STR[0]);
                    goto LABEL_136;
                  }
LABEL_134:
                  if (!memcmp(v56, v50, v10))
                  {
                    long long v23 = *(int **)(a2 + 8);
                    unint64_t v69 = *(void *)(a2 + 16);
                    if ((unint64_t)v23 >= v69)
                    {
                      unint64_t v29 = *(int **)a2;
                      uint64_t v85 = ((uint64_t)v23 - *(void *)a2) >> 2;
                      unint64_t v86 = v85 + 1;
                      if ((unint64_t)(v85 + 1) >> 62) {
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v87 = v69 - (void)v29;
                      if (v87 >> 1 > v86) {
                        unint64_t v86 = v87 >> 1;
                      }
                      if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v33 = v86;
                      }
                      if (v33)
                      {
                        unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v33);
                        unint64_t v29 = *(int **)a2;
                        long long v23 = *(int **)(a2 + 8);
                      }
                      else
                      {
                        unint64_t v34 = 0;
                      }
                      unint64_t v63 = &v34[4 * v85];
                      *(_DWORD *)unint64_t v63 = 7;
                      __int32 v64 = v63 + 4;
                      while (v23 != v29)
                      {
                        int v95 = *--v23;
                        *((_DWORD *)v63 - 1) = v95;
                        v63 -= 4;
                      }
                      goto LABEL_237;
                    }
                    int v24 = 7;
                    goto LABEL_183;
                  }
                  unint64_t v57 = quasar::EP_SERVER_FEATURES_LATENCY_STR[0];
                  size_t v58 = strlen(quasar::EP_SERVER_FEATURES_LATENCY_STR[0]);
                  if ((v8 & 0x80) == 0)
                  {
LABEL_136:
                    size_t v10 = v8;
                    unint64_t v66 = (const void *)v4;
                    if (v58 != v8)
                    {
                      uint64_t v67 = quasar::EP_EAGER_RESULT_END_TIME_STR[0];
                      size_t v68 = strlen(quasar::EP_EAGER_RESULT_END_TIME_STR[0]);
LABEL_159:
                      uint64_t v74 = (const void *)v4;
                      if (v68 != v8) {
                        goto LABEL_242;
                      }
LABEL_180:
                      if (memcmp(v74, v67, v8))
                      {
LABEL_242:
                        long long v113 = 0u;
                        long long v114 = 0u;
                        long long v111 = 0u;
                        long long v112 = 0u;
                        long long v109 = 0u;
                        long long v110 = 0u;
                        long long v107 = 0u;
                        long long v108 = 0u;
                        long long v105 = 0u;
                        long long v106 = 0u;
                        long long v103 = 0u;
                        long long v104 = 0u;
                        long long v101 = 0u;
                        long long v102 = 0u;
                        long long v99 = 0u;
                        long long v100 = 0u;
                        long long v98 = 0u;
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v98);
                        uint64_t v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v98, (uint64_t)"Feature unknown, ", 17);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"features allowed are (\"num-of-words\",\"num-trailing-sil\", \"num-frames\",\"end-of-sentence\",\"pause-counts\",\"num-input-label-words\",\"stream-conf\",\"silence-posterior\",\"client-silence-frames-count-ms\",\"client-silence-probability\",\"silence-posterior-nf\",\"server-features-latency\", \"eager-result-end-time\")", 297);
                        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v98);
                      }
                      long long v23 = *(int **)(a2 + 8);
                      unint64_t v80 = *(void *)(a2 + 16);
                      if ((unint64_t)v23 >= v80)
                      {
                        unint64_t v29 = *(int **)a2;
                        uint64_t v81 = ((uint64_t)v23 - *(void *)a2) >> 2;
                        unint64_t v82 = v81 + 1;
                        if ((unint64_t)(v81 + 1) >> 62) {
                          std::vector<int>::__throw_length_error[abi:ne180100]();
                        }
                        uint64_t v83 = v80 - (void)v29;
                        if (v83 >> 1 > v82) {
                          unint64_t v82 = v83 >> 1;
                        }
                        if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v33 = v82;
                        }
                        if (v33)
                        {
                          unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v33);
                          unint64_t v29 = *(int **)a2;
                          long long v23 = *(int **)(a2 + 8);
                        }
                        else
                        {
                          unint64_t v34 = 0;
                        }
                        unint64_t v63 = &v34[4 * v81];
                        *(_DWORD *)unint64_t v63 = 9;
                        __int32 v64 = v63 + 4;
                        while (v23 != v29)
                        {
                          int v84 = *--v23;
                          *((_DWORD *)v63 - 1) = v84;
                          v63 -= 4;
                        }
LABEL_237:
                        *(void *)a2 = v63;
                        *(void *)(a2 + 8) = v64;
                        *(void *)(a2 + 16) = &v34[4 * v33];
                        if (v29) {
                          operator delete(v29);
                        }
                        goto LABEL_239;
                      }
                      int v24 = 9;
LABEL_183:
                      int *v23 = v24;
                      long long v21 = v23 + 1;
                      goto LABEL_184;
                    }
LABEL_157:
                    if (!memcmp(v66, v57, v10))
                    {
                      long long v23 = *(int **)(a2 + 8);
                      unint64_t v75 = *(void *)(a2 + 16);
                      if ((unint64_t)v23 >= v75)
                      {
                        unint64_t v29 = *(int **)a2;
                        uint64_t v89 = ((uint64_t)v23 - *(void *)a2) >> 2;
                        unint64_t v90 = v89 + 1;
                        if ((unint64_t)(v89 + 1) >> 62) {
                          std::vector<int>::__throw_length_error[abi:ne180100]();
                        }
                        uint64_t v91 = v75 - (void)v29;
                        if (v91 >> 1 > v90) {
                          unint64_t v90 = v91 >> 1;
                        }
                        if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v33 = v90;
                        }
                        if (v33)
                        {
                          unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v33);
                          unint64_t v29 = *(int **)a2;
                          long long v23 = *(int **)(a2 + 8);
                        }
                        else
                        {
                          unint64_t v34 = 0;
                        }
                        unint64_t v63 = &v34[4 * v89];
                        *(_DWORD *)unint64_t v63 = 8;
                        __int32 v64 = v63 + 4;
                        while (v23 != v29)
                        {
                          int v96 = *--v23;
                          *((_DWORD *)v63 - 1) = v96;
                          v63 -= 4;
                        }
                        goto LABEL_237;
                      }
                      int v24 = 8;
                      goto LABEL_183;
                    }
                    uint64_t v67 = quasar::EP_EAGER_RESULT_END_TIME_STR[0];
                    size_t v68 = strlen(quasar::EP_EAGER_RESULT_END_TIME_STR[0]);
                    if ((v8 & 0x80) == 0) {
                      goto LABEL_159;
                    }
                    size_t v10 = *(void *)(v4 + 8);
                    goto LABEL_177;
                  }
                  size_t v10 = *(void *)(v4 + 8);
LABEL_154:
                  if (v58 == v10)
                  {
                    if (v10 == -1) {
                      std::string::__throw_out_of_range[abi:ne180100]();
                    }
                    unint64_t v66 = *(const void **)v4;
                    goto LABEL_157;
                  }
                  uint64_t v67 = quasar::EP_EAGER_RESULT_END_TIME_STR[0];
                  size_t v68 = strlen(quasar::EP_EAGER_RESULT_END_TIME_STR[0]);
LABEL_177:
                  if (v68 != v10) {
                    goto LABEL_242;
                  }
                  if (v10 == -1) {
                    std::string::__throw_out_of_range[abi:ne180100]();
                  }
                  uint64_t v74 = *(const void **)v4;
                  size_t v8 = v10;
                  goto LABEL_180;
                }
                size_t v10 = *(void *)(v4 + 8);
LABEL_131:
                if (v51 == v10)
                {
                  if (v10 == -1) {
                    std::string::__throw_out_of_range[abi:ne180100]();
                  }
                  __int32 v56 = *(const void **)v4;
                  goto LABEL_134;
                }
                unint64_t v57 = quasar::EP_SERVER_FEATURES_LATENCY_STR[0];
                size_t v58 = strlen(quasar::EP_SERVER_FEATURES_LATENCY_STR[0]);
                goto LABEL_154;
              }
              size_t v10 = *(void *)(v4 + 8);
LABEL_108:
              if (v44 == v10)
              {
                if (v10 == -1) {
                  std::string::__throw_out_of_range[abi:ne180100]();
                }
                unint64_t v49 = *(const void **)v4;
                goto LABEL_111;
              }
              uint64_t v50 = quasar::EP_SILENCE_POSTERIOR_NF_STR[0];
              size_t v51 = strlen(quasar::EP_SILENCE_POSTERIOR_NF_STR[0]);
              goto LABEL_131;
            }
            size_t v10 = *(void *)(v4 + 8);
LABEL_89:
            if (v37 == v10)
            {
              if (v10 == -1) {
                std::string::__throw_out_of_range[abi:ne180100]();
              }
              uint64_t v42 = *(const void **)v4;
              goto LABEL_92;
            }
            unint64_t v43 = quasar::EP_CLIENT_SILENCE_PROBABILITY_STR[0];
            size_t v44 = strlen(quasar::EP_CLIENT_SILENCE_PROBABILITY_STR[0]);
            goto LABEL_108;
          }
          size_t v10 = *(void *)(v4 + 8);
LABEL_70:
          if (v27 == v10)
          {
            if (v10 == -1) {
              std::string::__throw_out_of_range[abi:ne180100]();
            }
            int v35 = *(const void **)v4;
            goto LABEL_73;
          }
          uint64_t v36 = quasar::EP_CLIENT_SILENCE_FRAMES_COUNT_MS_STR[0];
          size_t v37 = strlen(quasar::EP_CLIENT_SILENCE_FRAMES_COUNT_MS_STR[0]);
          goto LABEL_89;
        }
        size_t v10 = *(void *)(v4 + 8);
LABEL_51:
        if (v18 == v10)
        {
          if (v10 == -1) {
            std::string::__throw_out_of_range[abi:ne180100]();
          }
          long long v25 = *(const void **)v4;
          goto LABEL_54;
        }
        long long v26 = quasar::EP_SILENCE_POSTERIOR_STR[0];
        size_t v27 = strlen(quasar::EP_SILENCE_POSTERIOR_STR[0]);
        goto LABEL_70;
      }
      size_t v10 = *(void *)(v4 + 8);
LABEL_32:
      if (v15 == v10)
      {
        if (v10 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        long long v16 = *(const void **)v4;
        goto LABEL_35;
      }
      long long v17 = quasar::EP_PAUSE_COUNTS_STR[0];
      size_t v18 = strlen(quasar::EP_PAUSE_COUNTS_STR[0]);
      goto LABEL_51;
    }
    long long v20 = *(int **)(a2 + 8);
    unint64_t v19 = *(void *)(a2 + 16);
    if ((unint64_t)v20 >= v19)
    {
      unint64_t v29 = *(int **)a2;
      uint64_t v30 = ((uint64_t)v20 - *(void *)a2) >> 2;
      unint64_t v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v32 = v19 - (void)v29;
      if (v32 >> 1 > v31) {
        unint64_t v31 = v32 >> 1;
      }
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v33 = v31;
      }
      if (v33)
      {
        unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v33);
        unint64_t v29 = *(int **)a2;
        long long v20 = *(int **)(a2 + 8);
      }
      else
      {
        unint64_t v34 = 0;
      }
      unint64_t v63 = &v34[4 * v30];
      *(_DWORD *)unint64_t v63 = 0;
      __int32 v64 = v63 + 4;
      while (v20 != v29)
      {
        int v65 = *--v20;
        *((_DWORD *)v63 - 1) = v65;
        v63 -= 4;
      }
      goto LABEL_237;
    }
    *long long v20 = 0;
    long long v21 = v20 + 1;
LABEL_184:
    __int32 v64 = v21;
LABEL_239:
    *(void *)(a2 + 8) = v64;
    v4 += 24;
  }
  *(void *)&long long v98 = &v115;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
}

void sub_1B1C65308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  if (a19 < 0) {
    operator delete(__p);
  }

  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);

  _Block_object_dispose(&a40, 8);
  _Block_object_dispose((const void *)(v46 - 256), 8);

  _Block_object_dispose((const void *)(v46 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void sub_1B1C656F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1B1C65824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  size_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    long long v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  long long v17 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  size_t v18 = *a4;
  long long v19 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)size_t v18 = 0;
  *((void *)i + 5) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  size_t v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t i = *v27;
LABEL_38:
    *size_t v27 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v17;
  void *v17 = i;
  *(void *)(v26 + 8 * v4) = v17;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    size_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_1B1C65B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

int *kaldi::quasar::ConfidenceFeatureExtractor<std::string>::ConfidenceFeatureExtractor(int *a1, int a2, uint64_t a3, int a4, uint64_t a5, float a6)
{
  *(void *)&long long v63 = *MEMORY[0x1E4F143B8];
  *a1 = a2;
  std::unordered_map<std::string,float>::unordered_map((uint64_t)(a1 + 2), a5);
  *((float *)a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = a6;
  std::string::basic_string[abi:ne180100]<0>(__str, "token_post_in_cnet_slot");
  std::string::basic_string[abi:ne180100]<0>(v52, "max_post_in_cnet_slot");
  std::string::basic_string[abi:ne180100]<0>(v53, "secondmax_post_in_cnet_slot");
  std::string::basic_string[abi:ne180100]<0>(v54, "num_arcs_in_cnet_slot");
  std::string::basic_string[abi:ne180100]<0>(&v55, "logpost");
  std::string::basic_string[abi:ne180100]<0>(v56, "avg_loglike");
  std::string::basic_string[abi:ne180100]<0>(v57, "hyp_len");
  std::string::basic_string[abi:ne180100]<0>(v58, "token_pos_in_hyp");
  std::string::basic_string[abi:ne180100]<0>(v59, "token_freq");
  std::string::basic_string[abi:ne180100]<0>(v60, "token_logfreq");
  std::string::basic_string[abi:ne180100]<0>(v61, "num_frames");
  std::string::basic_string[abi:ne180100]<0>(v62, "spk_rate");
  unint64_t v10 = (std::string **)(a1 + 14);
  *((void *)a1 + 7) = 0;
  *((void *)a1 + 8) = 0;
  *((void *)a1 + 9) = 0;
  uint64_t v46 = (std::string *)(a1 + 14);
  LOBYTE(v47) = 0;
  uint64_t v11 = (std::string *)operator new(0x120uLL);
  *((void *)a1 + 9) = v11 + 12;
  *((void *)a1 + 7) = v11;
  *((void *)a1 + 8) = v11;
  *((void *)a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a1 + 18), (long long *)__str, &v63, v11);
  uint64_t v12 = 36;
  do
  {
    if (SHIBYTE(__str[v12 - 1]) < 0) {
      operator delete((void *)v48[v12]);
    }
    v12 -= 3;
  }
  while (v12 * 8);
  *((_WORD *)a1 + 40) = 0;
  if (a4 < 0)
  {
    a4 = *a1;
  }
  else if (!a4 || *a1 < a4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"(num_hyps_out > 0) && (num_hyps_out <= num_hyps_in_)", 52);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__str);
  }
  a1[1] = a4;
  unint64_t v13 = *(std::string **)a3;
  if (*(void *)(a3 + 8) != *(void *)a3)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    uint64_t v16 = *((void *)a1 + 8);
    do
    {
      uint64_t v17 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*((void *)a1 + 7), v16, (unsigned __int8 **)&v13[v14]);
      uint64_t v16 = *((void *)a1 + 8);
      if (v17 == v16)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"std::find(feature_list_.begin(), feature_list_.end(), feature_list[i]) != feature_list_.end() && \"Unknown feature provided in the feature list\"", 143);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__str);
      }
      ++v15;
      unint64_t v13 = *(std::string **)a3;
      size_t v18 = *(long long **)(a3 + 8);
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v18 - *(void *)a3) >> 3);
      ++v14;
    }
    while (v19 > v15);
    if (v10 != (std::string **)a3) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 14), v13, v18, v19);
    }
    goto LABEL_54;
  }
  if (*((void *)a1 + 4)) {
    goto LABEL_54;
  }
  __str[0] = 0;
  __str[1] = 0;
  unint64_t v51 = 0;
  uint64_t v20 = *((void *)a1 + 7);
  uint64_t v21 = *((void *)a1 + 8);
  if (v21 != v20)
  {
    uint64_t v22 = 0;
    unint64_t v23 = 0;
    unint64_t v24 = 0;
    while (1)
    {
      size_t v25 = (uint64_t **)(v20 + v22);
      int v26 = *(unsigned __int8 *)(v20 + v22 + 23);
      if (*(char *)(v20 + v22 + 23) < 0)
      {
        std::string::size_type v28 = (std::string::size_type)v25[1];
        if (v28 == 10 && **v25 == 0x72665F6E656B6F74 && *((_WORD *)*v25 + 4) == 29029) {
          goto LABEL_48;
        }
        if (v28 != 13)
        {
          if ((unint64_t)v23 >= v51) {
            goto LABEL_46;
          }
          goto LABEL_44;
        }
        size_t v27 = *v25;
      }
      else
      {
        if (v26 == 10)
        {
          if (*v25 == (uint64_t *)0x72665F6E656B6F74 && *((_WORD *)v25 + 4) == 29029) {
            goto LABEL_48;
          }
LABEL_41:
          if ((unint64_t)v23 >= v51) {
            goto LABEL_46;
          }
          goto LABEL_42;
        }
        size_t v27 = (uint64_t *)(v20 + v22);
        if (v26 != 13) {
          goto LABEL_41;
        }
      }
      uint64_t v30 = *v27;
      uint64_t v31 = *(uint64_t *)((char *)v27 + 5);
      if (v30 == 0x6F6C5F6E656B6F74 && v31 == 0x71657266676F6C5FLL) {
        goto LABEL_48;
      }
      if ((unint64_t)v23 >= v51)
      {
LABEL_46:
        unint64_t v23 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)__str, (long long *)v25);
        goto LABEL_47;
      }
      if ((v26 & 0x80) != 0)
      {
        std::string::size_type v28 = *(void *)(v20 + v22 + 8);
LABEL_44:
        std::string::__init_copy_ctor_external(v23, (const std::string::value_type *)*v25, v28);
        goto LABEL_45;
      }
LABEL_42:
      long long v34 = *(_OWORD *)v25;
      v23->__r_.__value_.__r.__words[2] = (std::string::size_type)v25[2];
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v34;
LABEL_45:
      ++v23;
LABEL_47:
      __str[1] = v23;
      uint64_t v20 = *((void *)a1 + 7);
      uint64_t v21 = *((void *)a1 + 8);
LABEL_48:
      ++v24;
      v22 += 24;
      if (0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3) <= v24) {
        goto LABEL_51;
      }
    }
  }
  unint64_t v23 = 0;
LABEL_51:
  if (v10 != __str) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 14), __str[0], (long long *)v23, 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)__str[0]) >> 3));
  }
  uint64_t v46 = (std::string *)__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
LABEL_54:
  int v35 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char [11],std::__identity>(*((unsigned __int8 **)a1 + 7), *((unsigned __int8 **)a1 + 8), "token_freq");
  uint64_t v36 = (unsigned __int8 *)*((void *)a1 + 8);
  if (v35 == v36
    && (v37 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char [14],std::__identity>(*((unsigned __int8 **)a1 + 7), v35, "token_logfreq"), uint64_t v36 = (unsigned __int8 *)*((void *)a1 + 8), v37 == v36))
  {
    uint64_t v36 = v37;
  }
  else if (!*((void *)a1 + 4))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"token_unigram_frequencies_.size() > 0", 37);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__str);
  }
  unint64_t v38 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char [11],std::__identity>(*((unsigned __int8 **)a1 + 7), v36, "num_frames");
  if (v38 != *((unsigned __int8 **)a1 + 8)
    || std::__find_impl[abi:ne180100]<std::string *,std::string *,char [9],std::__identity>(*((unsigned __int8 **)a1 + 7), v38, "spk_rate") != *((unsigned __int8 **)a1 + 8))
  {
    *((unsigned char *)a1 + 80) = 1;
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "token_post_in_cnet_slot");
  std::string::basic_string[abi:ne180100]<0>(v52, "max_post_in_cnet_slot");
  std::string::basic_string[abi:ne180100]<0>(v53, "secondmax_post_in_cnet_slot");
  std::string::basic_string[abi:ne180100]<0>(v54, "num_arcs_in_cnet_slot");
  uint64_t v46 = 0;
  unint64_t v47 = 0;
  v48[0] = 0;
  v48[1] = &v46;
  char v49 = 0;
  uint64_t v46 = (std::string *)operator new(0x60uLL);
  unint64_t v47 = v46;
  v48[0] = v46 + 4;
  uint64_t v39 = 0;
  unint64_t v47 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v48, (long long *)__str, &v55, v46);
  do
  {
    if (SHIBYTE(v54[v39 + 2]) < 0) {
      operator delete((void *)v54[v39]);
    }
    v39 -= 3;
  }
  while (v39 != -12);
  unint64_t v40 = v46;
  if (v47 != v46)
  {
    uint64_t v41 = 0;
    unint64_t v42 = 0;
    uint64_t v43 = *((void *)a1 + 8);
    while (1)
    {
      uint64_t v44 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*((void *)a1 + 7), v43, (unsigned __int8 **)&v40[v41]);
      if (v44 != *((void *)a1 + 8)) {
        break;
      }
      uint64_t v43 = v44;
      ++v42;
      unint64_t v40 = v46;
      ++v41;
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v47 - (char *)v46) >> 3) <= v42) {
        goto LABEL_70;
      }
    }
    *((unsigned char *)a1 + 81) = 1;
  }
LABEL_70:
  __str[0] = (std::string *)&v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  return a1;
}

void sub_1B1C6633C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1C66364);
}

void kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  int v50 = a4;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  if (v5 != *(_DWORD *)a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v62);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v62, "nbest_hyps.size() == num_hyps_in_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v62);
  }
  if (v5 != (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v62);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v62, "nbest_loglikes.size() == num_hyps_in_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v62);
  }
  size_t v7 = a5;
  if (a4 <= 0 && *(unsigned char *)(a1 + 80))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v62);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v62, "num_frames > 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v62);
  }
  uint64_t v10 = *a5;
  for (uint64_t i = a5[1]; i != v10; uint64_t i = kaldi::Matrix<float>::~Matrix(i - 40))
    ;
  v7[1] = v10;
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      kaldi::Matrix<float>::Matrix((uint64_t)&v62, -1431655765 * ((*(void *)(*a2 + v11 + 8) - *(void *)(*a2 + v11)) >> 3), -1431655765 * ((*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 3), 0, 0);
      unint64_t v13 = v7[1];
      if (v13 >= v7[2])
      {
        uint64_t v14 = std::vector<kaldi::Matrix<float>>::__push_back_slow_path<kaldi::Matrix<float>>(v7, (uint64_t)&v62);
      }
      else
      {
        kaldi::Matrix<float>::Matrix(v7[1], &v62);
        uint64_t v14 = v13 + 40;
        v7[1] = v13 + 40;
      }
      v7[1] = v14;
      kaldi::Matrix<float>::~Matrix((uint64_t)&v62);
      ++v12;
      v11 += 24;
    }
    while (v12 < *(int *)(a1 + 4));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "hyp_len");
  uint64_t v62 = (void **)&unk_1F0A5AF40;
  long long v63 = (void **)a2;
  int v65 = &v62;
  kaldi::quasar::ConfidenceFeatureExtractor<std::string>::ExtractFeature(a1, (unsigned __int8 **)&__p, (uint64_t)&v62, a2, v7);
  std::__function::__value_func<float ()(int,int)>::~__value_func[abi:ne180100](&v62);
  if (v55 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "token_pos_in_hyp");
  uint64_t v62 = (void **)&unk_1F0A5ACD8;
  int v65 = &v62;
  kaldi::quasar::ConfidenceFeatureExtractor<std::string>::ExtractFeature(a1, (unsigned __int8 **)&__p, (uint64_t)&v62, a2, v7);
  std::__function::__value_func<float ()(int,int)>::~__value_func[abi:ne180100](&v62);
  if (v55 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "token_freq");
  uint64_t v62 = (void **)&unk_1F0A5AD30;
  long long v63 = (void **)a1;
  __int32 v64 = a2;
  int v65 = &v62;
  kaldi::quasar::ConfidenceFeatureExtractor<std::string>::ExtractFeature(a1, (unsigned __int8 **)&__p, (uint64_t)&v62, a2, v7);
  std::__function::__value_func<float ()(int,int)>::~__value_func[abi:ne180100](&v62);
  if (v55 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "token_logfreq");
  uint64_t v62 = (void **)&unk_1F0A5AD88;
  long long v63 = (void **)a1;
  __int32 v64 = a2;
  int v65 = &v62;
  kaldi::quasar::ConfidenceFeatureExtractor<std::string>::ExtractFeature(a1, (unsigned __int8 **)&__p, (uint64_t)&v62, a2, v7);
  std::__function::__value_func<float ()(int,int)>::~__value_func[abi:ne180100](&v62);
  if (v55 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_frames");
  uint64_t v62 = (void **)&unk_1F0A5ADE0;
  long long v63 = (void **)&v50;
  int v65 = &v62;
  kaldi::quasar::ConfidenceFeatureExtractor<std::string>::ExtractFeature(a1, (unsigned __int8 **)&__p, (uint64_t)&v62, a2, v7);
  std::__function::__value_func<float ()(int,int)>::~__value_func[abi:ne180100](&v62);
  if (v55 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "spk_rate");
  uint64_t v62 = (void **)&unk_1F0A5AE38;
  long long v63 = (void **)a2;
  __int32 v64 = (uint64_t *)&v50;
  int v65 = &v62;
  kaldi::quasar::ConfidenceFeatureExtractor<std::string>::ExtractFeature(a1, (unsigned __int8 **)&__p, (uint64_t)&v62, a2, v7);
  std::__function::__value_func<float ()(int,int)>::~__value_func[abi:ne180100](&v62);
  if (v55 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "avg_loglike");
  uint64_t v62 = (void **)&unk_1F0A5AE90;
  long long v63 = (void **)a3;
  __int32 v64 = a2;
  int v65 = &v62;
  kaldi::quasar::ConfidenceFeatureExtractor<std::string>::ExtractFeature(a1, (unsigned __int8 **)&__p, (uint64_t)&v62, a2, v7);
  std::__function::__value_func<float ()(int,int)>::~__value_func[abi:ne180100](&v62);
  if (v55 < 0) {
    operator delete(__p);
  }
  unint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v47, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  kaldi::quasar::ApplySoftMax((float **)&v47);
  std::string::basic_string[abi:ne180100]<0>(&__p, "logpost");
  uint64_t v62 = (void **)&unk_1F0A5AEE8;
  long long v63 = &v47;
  int v65 = &v62;
  kaldi::quasar::ConfidenceFeatureExtractor<std::string>::ExtractFeature(a1, (unsigned __int8 **)&__p, (uint64_t)&v62, a2, v7);
  std::__function::__value_func<float ()(int,int)>::~__value_func[abi:ne180100](&v62);
  if (v55 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(a1 + 81))
  {
    v52[0] = &unk_1F0A5AC28;
    void v52[3] = v52;
    v51[0] = &unk_1F0A5AC80;
    v51[3] = v51;
    kaldi::quasar::ConfusionNetwork<std::string>::ConfusionNetwork(&__p, a2, &v47, v52, v51);
    std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100](v51);
    std::__function::__value_func<std::vector<std::string> ()(std::vector<std::string>)>::~__value_func[abi:ne180100](v52);
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__init_with_size[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string>*,kaldi::quasar::ConfusionNetworkSlot<std::string>*>(&v44, v60, v61, 0x2E8BA2E8BA2E8BA3 * ((v61 - v60) >> 4));
    unint64_t v15 = *(int *)(a1 + 4);
    uint64_t v62 = 0;
    std::vector<unsigned long>::vector(v43, v15, &v62);
    uint64_t v17 = v44;
    uint64_t v16 = v45;
    if (v45 != v44)
    {
      unint64_t v18 = 0;
      LODWORD(v19) = *(_DWORD *)(a1 + 4);
      uint64_t v41 = v7;
      do
      {
        if ((int)v19 >= 1)
        {
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          uint64_t v22 = 16;
          do
          {
            if (kaldi::quasar::ConfusionNetworkSlot<std::string>::HasTokenFromSequence(v44 + 176 * v18, v21))
            {
              if (!kaldi::quasar::ConfusionNetworkSlot<std::string>::HasToken(v44 + 176 * v18, *(void *)(*a2 + v20) + 24 * *((void *)v43[0] + v21)))
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v62);
                int v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"Hypothesis token (", 18);
                uint64_t v36 = *(void *)(*a2 + v20) + 24 * *((void *)v43[0] + v21);
                int v37 = *(char *)(v36 + 23);
                if (v37 >= 0) {
                  uint64_t v38 = *(void *)(*a2 + v20) + 24 * *((void *)v43[0] + v21);
                }
                else {
                  uint64_t v38 = *(void *)v36;
                }
                if (v37 >= 0) {
                  uint64_t v39 = *(unsigned __int8 *)(v36 + 23);
                }
                else {
                  uint64_t v39 = *(void *)(v36 + 8);
                }
                unint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v38, v39);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") does not match any arc in the confusion network slot", 54);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v62);
              }
              unint64_t v23 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char [24],std::__identity>(*(unsigned __int8 **)(a1 + 56), *(unsigned __int8 **)(a1 + 64), "token_post_in_cnet_slot");
              if (v23 == *(unsigned __int8 **)(a1 + 64))
              {
                size_t v25 = *(unsigned __int8 **)(a1 + 56);
              }
              else
              {
                double TokenWeight = kaldi::quasar::ConfusionNetworkSlot<std::string>::GetTokenWeight(v44 + 176 * v18, *(void *)(*a2 + v20) + 24 * *((void *)v43[0] + v21));
                size_t v25 = *(unsigned __int8 **)(a1 + 56);
                *(_DWORD *)(*(void *)(*v7 + v22 - 16)
                          + 4 * (int)(*(_DWORD *)(*v7 + v22) * *((void *)v43[0] + v21))
                          + 4 * (int)(-1431655765 * ((unint64_t)(v23 - v25) >> 3))) = LODWORD(TokenWeight);
                unint64_t v23 = *(unsigned __int8 **)(a1 + 64);
              }
              int v26 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char [22],std::__identity>(v25, v23, "max_post_in_cnet_slot");
              if (v26 == *(unsigned __int8 **)(a1 + 64))
              {
                size_t v27 = 0;
                std::string::size_type v28 = 0;
                unint64_t v29 = *(unsigned __int8 **)(a1 + 56);
              }
              else
              {
                kaldi::quasar::ConfusionNetworkSlot<std::string>::GetTopWeights(v44 + 176 * v18, 2uLL, &v62, 0.0);
                std::string::size_type v28 = v62;
                size_t v27 = v63;
                unint64_t v29 = *(unsigned __int8 **)(a1 + 56);
                *(_DWORD *)(*(void *)(*v41 + v22 - 16)
                          + 4 * (int)(*(_DWORD *)(*v41 + v22) * *((void *)v43[0] + v21))
                          + 4 * (int)(-1431655765 * ((unint64_t)(v26 - v29) >> 3))) = *(_DWORD *)v62;
                int v26 = *(unsigned __int8 **)(a1 + 64);
              }
              uint64_t v30 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char [28],std::__identity>(v29, v26, "secondmax_post_in_cnet_slot");
              uint64_t v31 = v30;
              uint64_t v32 = *(unsigned __int8 **)(a1 + 64);
              if (v30 == v32)
              {
                unint64_t v33 = *(unsigned __int8 **)(a1 + 56);
                uint64_t v32 = v30;
                size_t v7 = v41;
              }
              else
              {
                if ((unint64_t)((char *)v27 - (char *)v28) > 7)
                {
                  size_t v7 = v41;
                }
                else
                {
                  kaldi::quasar::ConfusionNetworkSlot<std::string>::GetTopWeights(v44 + 176 * v18, 2uLL, &v62, 0.0);
                  size_t v7 = v41;
                  if (v28) {
                    operator delete(v28);
                  }
                  std::string::size_type v28 = v62;
                  uint64_t v32 = *(unsigned __int8 **)(a1 + 64);
                }
                unint64_t v33 = *(unsigned __int8 **)(a1 + 56);
                *(_DWORD *)(*(void *)(*v7 + v22 - 16)
                          + 4 * (int)(*(_DWORD *)(*v7 + v22) * *((void *)v43[0] + v21))
                          + 4 * (int)(-1431655765 * ((unint64_t)(v31 - v33) >> 3))) = *((_DWORD *)v28 + 1);
              }
              long long v34 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char [22],std::__identity>(v33, v32, "num_arcs_in_cnet_slot");
              if (v34 != *(unsigned __int8 **)(a1 + 64)) {
                *(float *)(*(void *)(*v7 + v22 - 16)
              }
                         + 4 * (int)(*(_DWORD *)(*v7 + v22) * *((void *)v43[0] + v21))
                         + 4 * (int)(-1431655765 * ((unint64_t)&v34[-*(void *)(a1 + 56)] >> 3))) = (float)*(int *)(v44 + 176 * v18 + 32);
              if (v28) {
                operator delete(v28);
              }
              ++*((void *)v43[0] + v21);
            }
            ++v21;
            uint64_t v19 = *(int *)(a1 + 4);
            v20 += 24;
            v22 += 40;
          }
          while (v21 < v19);
          uint64_t v17 = v44;
          uint64_t v16 = v45;
        }
        ++v18;
      }
      while (0x2E8BA2E8BA2E8BA3 * ((v16 - v17) >> 4) > v18);
    }
    if (v43[0])
    {
      v43[1] = v43[0];
      operator delete(v43[0]);
    }
    uint64_t v62 = (void **)&v44;
    std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__destroy_vector::operator()[abi:ne180100](&v62);
    uint64_t v62 = (void **)&v60;
    std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__destroy_vector::operator()[abi:ne180100](&v62);
    uint64_t v62 = (void **)&v59;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v62);
    if (v57)
    {
      size_t v58 = v57;
      operator delete(v57);
    }
    std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100](v56);
    std::__function::__value_func<std::vector<std::string> ()(std::vector<std::string>)>::~__value_func[abi:ne180100](&v54);
  }
  if (v47)
  {
    uint64_t v48 = v47;
    operator delete(v47);
  }
}

void sub_1B1C66EB0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::ConfidenceFeatureExtractor<std::string>::ExtractFeature(uint64_t a1, unsigned __int8 **a2, uint64_t a3, uint64_t *a4, void *a5)
{
  uint64_t result = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(void *)(a1 + 56), *(void *)(a1 + 64), a2);
  if (result != *(void *)(a1 + 64))
  {
    int v10 = *(_DWORD *)(a1 + 4);
    if (v10 >= 1)
    {
      uint64_t v11 = result;
      uint64_t v12 = 0;
      uint64_t v13 = *a4;
      do
      {
        if (*(void *)(v13 + 24 * v12 + 8) != *(void *)(v13 + 24 * v12))
        {
          unint64_t v14 = 0;
          do
          {
            uint64_t result = std::function<float ()(int,int)>::operator()(a3, v12, v14);
            *(_DWORD *)(*(void *)(*a5 + 40 * v12)
                      + 4 * *(_DWORD *)(*a5 + 40 * v12 + 16) * (int)v14++
                      + 4 * (int)(-1431655765 * ((unint64_t)(v11 - *(void *)(a1 + 56)) >> 3))) = v15;
            uint64_t v13 = *a4;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*a4 + 24 * v12 + 8) - *(void *)(*a4 + 24 * v12)) >> 3) > v14);
          int v10 = *(_DWORD *)(a1 + 4);
        }
        ++v12;
      }
      while (v12 < v10);
    }
  }
  return result;
}

void kaldi::quasar::ApplySoftMax(float **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = (uint64_t)(*a1 + 1);
  BOOL v4 = *a1 == v2 || v3 == (void)v2;
  unint64_t v5 = *a1;
  if (!v4)
  {
    float v6 = *v1;
    unint64_t v5 = *a1;
    size_t v7 = *a1 + 1;
    do
    {
      float v8 = *v7++;
      float v9 = v8;
      if (v6 < v8)
      {
        float v6 = v9;
        unint64_t v5 = (float *)v3;
      }
      uint64_t v3 = (uint64_t)v7;
    }
    while (v7 != v2);
  }
  if (v1 != v2)
  {
    float v10 = *v5;
    float v11 = 0.0;
    uint64_t v12 = *a1;
    do
    {
      float v13 = expf(*v12 - v10);
      float v11 = v11 + v13;
      *v12++ = v13;
    }
    while (v12 != v2);
    do
    {
      *uint64_t v1 = *v1 / v11;
      ++v1;
    }
    while (v1 != v2);
  }
}

uint64_t kaldi::quasar::ConfusionNetwork<std::string>::~ConfusionNetwork(uint64_t a1)
{
  BOOL v4 = (void **)(a1 + 120);
  std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__destroy_vector::operator()[abi:ne180100](&v4);
  BOOL v4 = (void **)(a1 + 96);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
  std::__function::__value_func<std::vector<std::string> ()(std::vector<std::string>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
  return a1;
}

uint64_t std::function<float ()(int,int)>::operator()(uint64_t a1, int a2, int a3)
{
  int v6 = a2;
  int v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

float kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetUnigramTokenFrequency(uint64_t a1, unsigned __int8 *a2)
{
  BOOL v4 = (void *)(a1 + 8);
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 8), a2))
  {
    int v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v4, a2);
    if (!v5) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    int v6 = v5 + 40;
  }
  else
  {
    int v6 = (unsigned __int8 *)(a1 + 48);
  }
  return *(float *)v6;
}

void kaldi::quasar::ReadUnigramFrequencies<std::string>(uint64_t a1, uint64_t a2)
{
  char v27 = 0;
  kaldi::Input::Input(v26, a1, &v27);
  if (v27)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"!binary_in && \"Not expecting a binary file.\"", 44);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v18);
  }
  memset(&v25, 0, sizeof(v25));
  uint64_t v2 = (std::locale::__imp *)*MEMORY[0x1E4FBA408];
  uint64_t v3 = *(std::locale::__imp **)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  while (1)
  {
    int v5 = (void *)kaldi::Input::Stream((kaldi::Input *)v26);
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
    int v6 = std::locale::use_facet(&v18, MEMORY[0x1E4FBA258]);
    unsigned __int8 v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(&v18);
    float v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (uint64_t)&v25, v7);
    if ((*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0) {
      break;
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t *)&v18, &v25, 24);
    memset(&v17, 0, sizeof(v17));
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v16 = 0;
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v18, (uint64_t)&v17, 0x20u);
    if (*(_DWORD *)&v21[*((void *)v18.__locale_ - 3)])
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"ss.good()", 9);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v14);
    }
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v18, (uint64_t)__p, 0x20u);
    if (v16 >= 0) {
      float v9 = __p;
    }
    else {
      float v9 = (void **)__p[0];
    }
    double v10 = atof((const char *)v9);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v14, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
    }
    else {
      std::string v14 = v17;
    }
    std::string::size_type v28 = &v14;
    float v11 = (float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)&v14, (uint64_t)&std::piecewise_construct, (long long **)&v28);
    float v12 = v10;
    v11[10] = v12;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    v18.__locale_ = v2;
    *(std::locale::__imp **)((char *)&v18.__locale_ + *((void *)v2 - 3)) = v3;
    uint64_t v19 = v4;
    uint64_t v20 = MEMORY[0x1E4FBA470] + 16;
    if (v23 < 0) {
      operator delete(v22);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1B3EA8520](&v24);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  kaldi::Input::~Input((kaldi::Input *)v26);
}

uint64_t kaldi::quasar::LogisticRegressionModel::LogisticRegressionModel(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 96) = 0;
  kaldi::quasar::LogisticRegressionModel::Read(a1, a2);
  return a1;
}

void sub_1B1C67690(_Unwind_Exception *a1)
{
  int v5 = *(void **)(v1 + 80);
  if (v5)
  {
    *(void *)(v1 + 88) = v5;
    operator delete(v5);
  }
  kaldi::quasar::LogisticRegressionModel::LogisticRegressionModel(v3, v2, v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LogisticRegressionModel::Read(uint64_t a1, uint64_t a2)
{
  v83[0] = 0;
  kaldi::Input::Input(v82, a2, v83);
  if (v83[0])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)"!binary_in && \"Not expecting binary confidence file.\"", 53);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v74);
  }
  memset(&v81, 0, sizeof(v81));
  long long v63 = (void **)(a1 + 56);
  uint64_t v62 = (void **)(a1 + 80);
  __int32 v64 = (std::locale::__imp *)*MEMORY[0x1E4FBA408];
  uint64_t v4 = *(std::locale::__imp **)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  while (1)
  {
    int v5 = (void *)kaldi::Input::Stream((kaldi::Input *)v82);
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
    int v6 = std::locale::use_facet(&v74, MEMORY[0x1E4FBA258]);
    unsigned __int8 v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(&v74);
    float v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (uint64_t)&v81, v7);
    if ((*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0) {
      break;
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t *)&v74, &v81, 24);
    __s[0] = 0;
    __s[1] = 0;
    std::string::size_type v73 = 0;
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v74, (uint64_t)__s, 0x20u);
    v70[0] = 0;
    v70[1] = 0;
    uint64_t v71 = 0;
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v74, (uint64_t)v70, 0x20u);
    if (SHIBYTE(v73) < 0)
    {
      double v10 = __s[1];
      if (__s[1] != (std::string::value_type *)9)
      {
        std::string v14 = *(std::string **)(a1 + 40);
        if ((unint64_t)v14 >= *(void *)(a1 + 48)) {
          goto LABEL_21;
        }
        goto LABEL_19;
      }
      float v9 = (std::string::value_type **)__s[0];
    }
    else
    {
      if (SHIBYTE(v73) != 9)
      {
        std::string v14 = *(std::string **)(a1 + 40);
        if ((unint64_t)v14 >= *(void *)(a1 + 48)) {
          goto LABEL_21;
        }
        goto LABEL_17;
      }
      float v9 = __s;
    }
    float v11 = *v9;
    int v12 = *((unsigned __int8 *)v9 + 8);
    if (v11 == (std::string::value_type *)0x7065637265746E69 && v12 == 116)
    {
      if (v71 >= 0) {
        std::string::size_type v28 = v70;
      }
      else {
        std::string::size_type v28 = (void **)v70[0];
      }
      float v29 = atof((const char *)v28);
      *(float *)(a1 + ++*(_DWORD *)(result + 24) = v29;
      goto LABEL_46;
    }
    std::string v14 = *(std::string **)(a1 + 40);
    if ((unint64_t)v14 >= *(void *)(a1 + 48))
    {
LABEL_21:
      uint64_t v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 32), (long long *)__s);
      goto LABEL_22;
    }
    if (SHIBYTE(v73) < 0)
    {
      double v10 = __s[1];
LABEL_19:
      std::string::__init_copy_ctor_external(v14, __s[0], (std::string::size_type)v10);
      goto LABEL_20;
    }
LABEL_17:
    long long v15 = *(_OWORD *)__s;
    v14->__r_.__value_.__r.__words[2] = v73;
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
LABEL_20:
    uint64_t v16 = (uint64_t)&v14[1];
    *(void *)(a1 + 40) = v14 + 1;
LABEL_22:
    *(void *)(a1 + 40) = v16;
    if (v71 >= 0) {
      std::string v17 = v70;
    }
    else {
      std::string v17 = (void **)v70[0];
    }
    float v18 = atof((const char *)v17);
    uint64_t v20 = *(float **)(a1 + 8);
    unint64_t v19 = *(void *)(a1 + 16);
    if ((unint64_t)v20 >= v19)
    {
      uint64_t v22 = *(float **)a1;
      uint64_t v23 = ((uint64_t)v20 - *(void *)a1) >> 2;
      unint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v25 = v19 - (void)v22;
      if (v25 >> 1 > v24) {
        unint64_t v24 = v25 >> 1;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26)
      {
        char v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 16, v26);
        uint64_t v22 = *(float **)a1;
        uint64_t v20 = *(float **)(a1 + 8);
      }
      else
      {
        char v27 = 0;
      }
      uint64_t v30 = (float *)&v27[4 * v23];
      float *v30 = v18;
      uint64_t v21 = v30 + 1;
      while (v20 != v22)
      {
        int v31 = *((_DWORD *)v20-- - 1);
        *((_DWORD *)v30-- - 1) = v31;
      }
      *(void *)a1 = v30;
      *(void *)(a1 + 8) = v21;
      *(void *)(a1 + 16) = &v27[4 * v26];
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      *uint64_t v20 = v18;
      uint64_t v21 = v20 + 1;
    }
    *(void *)(a1 + 8) = v21;
LABEL_46:
    if (!*(_DWORD *)&v77[*((void *)v74.__locale_ - 3)])
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v69 = 0;
      v66[0] = 0;
      v66[1] = 0;
      uint64_t v67 = 0;
      std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v74, (uint64_t)__p, 0x20u);
      if (v69 >= 0) {
        uint64_t v32 = __p;
      }
      else {
        uint64_t v32 = (void **)__p[0];
      }
      float v33 = atof((const char *)v32);
      int v35 = *(float **)(a1 + 64);
      unint64_t v34 = *(void *)(a1 + 72);
      if ((unint64_t)v35 >= v34)
      {
        int v37 = (float *)*v63;
        uint64_t v38 = ((char *)v35 - (unsigned char *)*v63) >> 2;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v40 = v34 - (void)v37;
        if (v40 >> 1 > v39) {
          unint64_t v39 = v40 >> 1;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          unint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 72, v41);
          int v37 = *(float **)(a1 + 56);
          int v35 = *(float **)(a1 + 64);
        }
        else
        {
          unint64_t v42 = 0;
        }
        uint64_t v43 = (float *)&v42[4 * v38];
        *uint64_t v43 = v33;
        uint64_t v36 = v43 + 1;
        while (v35 != v37)
        {
          int v44 = *((_DWORD *)v35-- - 1);
          *((_DWORD *)v43-- - 1) = v44;
        }
        *(void *)(a1 + 56) = v43;
        *(void *)(a1 + 64) = v36;
        *(void *)(a1 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = &v42[4 * v41];
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        float *v35 = v33;
        uint64_t v36 = v35 + 1;
      }
      *(void *)(a1 + 64) = v36;
      if (!*(_DWORD *)&v77[*((void *)v74.__locale_ - 3)])
      {
        std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v74, (uint64_t)v66, 0x20u);
        if (SHIBYTE(v67) < 0)
        {
          uint64_t v45 = v66[0];
          uint64_t v46 = v66[0];
        }
        else
        {
          uint64_t v45 = (const char *)v66;
          uint64_t v46 = (const char *)v66;
        }
        if (atof(v46) <= 0.0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v65);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"(atof(feat_std_str.c_str()) > 0) && \"Obtained a zero/negative value for standard deviation\"", 91);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v65);
        }
        float v47 = atof(v45);
        uint64_t v49 = *(float **)(a1 + 88);
        unint64_t v48 = *(void *)(a1 + 96);
        if ((unint64_t)v49 >= v48)
        {
          unint64_t v51 = (float *)*v62;
          uint64_t v52 = ((char *)v49 - (unsigned char *)*v62) >> 2;
          unint64_t v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v54 = v48 - (void)v51;
          if (v54 >> 1 > v53) {
            unint64_t v53 = v54 >> 1;
          }
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v55 = v53;
          }
          if (v55)
          {
            __int32 v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 96, v55);
            unint64_t v51 = *(float **)(a1 + 80);
            uint64_t v49 = *(float **)(a1 + 88);
          }
          else
          {
            __int32 v56 = 0;
          }
          unint64_t v57 = (float *)&v56[4 * v52];
          float *v57 = v47;
          int v50 = v57 + 1;
          while (v49 != v51)
          {
            int v58 = *((_DWORD *)v49-- - 1);
            *((_DWORD *)v57-- - 1) = v58;
          }
          *(void *)(a1 + 80) = v57;
          *(void *)(a1 + 88) = v50;
          *(void *)(a1 + 96) = &v56[4 * v55];
          if (v51) {
            operator delete(v51);
          }
        }
        else
        {
          *uint64_t v49 = v47;
          int v50 = v49 + 1;
        }
        *(void *)(a1 + 88) = v50;
      }
      if (SHIBYTE(v67) < 0) {
        operator delete(v66[0]);
      }
      if (SHIBYTE(v69) < 0) {
        operator delete(__p[0]);
      }
    }
    if (SHIBYTE(v71) < 0) {
      operator delete(v70[0]);
    }
    if (SHIBYTE(v73) < 0) {
      operator delete(__s[0]);
    }
    v74.__locale_ = v64;
    *(std::locale::__imp **)((char *)&v74.__locale_ + *((void *)v64 - 3)) = v4;
    uint64_t v75 = v3;
    uint64_t v76 = MEMORY[0x1E4FBA470] + 16;
    if (v79 < 0) {
      operator delete(v78);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1B3EA8520](&v80);
  }
  unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3);
  if (v59 != (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)"feature_list_.size() == weights_.size()", 39);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v74);
  }
  uint64_t v60 = *(void *)(a1 + 64) - *(void *)(a1 + 56);
  if (v60 && v59 != v60 >> 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)"feature_list_.size() == feature_mean_.size()", 44);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v74);
  }
  uint64_t v61 = *(void *)(a1 + 88) - *(void *)(a1 + 80);
  if (v61 && v59 != v61 >> 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)"feature_list_.size() == feature_std_.size()", 43);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v74);
  }
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v81.__r_.__value_.__l.__data_);
  }
  kaldi::Input::~Input((kaldi::Input *)v82);
}

float kaldi::quasar::LogisticRegressionModel::GetOutput(float *a1, uint64_t a2, unsigned __int8 **a3)
{
  int v5 = *a3;
  int v6 = a3[1];
  if (v6 != *a3)
  {
    unsigned __int8 v7 = (unsigned __int8 *)*((void *)a1 + 4);
    if (v6 - *a3 == *((void *)a1 + 5) - (void)v7)
    {
      while (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v19, v5, v7))
      {
        v5 += 24;
        v7 += 24;
        if (v5 == v6) {
          goto LABEL_5;
        }
      }
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "feature_list == feature_list_");
LABEL_19:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
LABEL_5:
  unint64_t v8 = *(int *)(a2 + 8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *((void *)a1 + 1);
  if (v8 != (v10 - *(void *)a1) >> 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "feats.Dim() == weights_.size()");
    goto LABEL_19;
  }
  float v11 = a1[6];
  if (v10 != v9)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *((void *)a1 + 7);
    uint64_t v14 = *((void *)a1 + 10);
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      if (*((void *)a1 + 8) == v13) {
        float v15 = 0.0;
      }
      else {
        float v15 = *(float *)(v13 + 4 * v12);
      }
      if (*((void *)a1 + 11) == v14) {
        float v16 = 1.0;
      }
      else {
        float v16 = *(float *)(v14 + 4 * v12);
      }
      float v11 = v11 + (float)((float)(*(float *)(v9 + 4 * v12) * (float)(*(float *)(*(void *)a2 + 4 * v12) - v15)) / v16);
      ++v12;
    }
    while (v8 != v12);
  }
  float v17 = expf(v11);
  return v17 / (float)(v17 + 1.0);
}

uint64_t kaldi::quasar::LogisticRegressionModel::GetOutput(float *a1, uint64_t a2, void *a3)
{
  int v6 = kaldi::MatrixBase<float>::NumRows(a2);
  std::vector<float>::resize((uint64_t)a3, v6);
  uint64_t result = kaldi::MatrixBase<float>::NumRows(a2);
  if ((int)result >= 1)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)a2 + 4 * *(_DWORD *)(a2 + 16) * (int)v8;
      int v10 = kaldi::MatrixBase<float>::NumCols(a2);
      int v14 = 0;
      uint64_t v15 = 0;
      uint64_t v12 = v9;
      int v13 = v10;
      memset(v11, 0, sizeof(v11));
      *(float *)(*a3 + 4 * v8) = kaldi::quasar::LogisticRegressionModel::GetOutput(a1, (uint64_t)&v12, v11);
      float v16 = v11;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
      ++v8;
      uint64_t result = kaldi::MatrixBase<float>::NumRows(a2);
    }
    while (v8 < (int)result);
  }
  return result;
}

void sub_1B1C681E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::LogisticRegressionModel::GetOutput(uint64_t a1, uint64_t a2, unsigned __int8 **a3, void *a4)
{
  uint64_t v4 = *a3;
  int v5 = a3[1];
  int v6 = *(unsigned __int8 **)(a1 + 32);
  if (v5 - *a3 != *(void *)(a1 + 40) - (void)v6)
  {
LABEL_6:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "feature_list == feature_list_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  while (v4 != v5)
  {
    if (!std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v11, v4, v6)) {
      goto LABEL_6;
    }
    v4 += 24;
    v6 += 24;
  }
  return kaldi::quasar::LogisticRegressionModel::GetOutput((float *)a1, a2, a4);
}

uint64_t std::unordered_map<std::string,float>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,float> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1B1C68328(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,float> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    int v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node_hash<std::pair<std::string const,float> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1B1C6859C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

float std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node_hash<std::pair<std::string const,float> const&>@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  float result = *(float *)(a3 + 24);
  *((float *)v8 + 10) = result;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1C68650(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string *,std::string *,char [11],std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    size_t v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((void *)v3 + 1))
        {
          if (v6 == -1) {
LABEL_14:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          uint64_t v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6)) {
            return v3;
          }
        }
      }
      else if (v6 == v3[23])
      {
        uint64_t v7 = v3;
        if (v6 == -1) {
          goto LABEL_14;
        }
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string *,std::string *,char [14],std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    size_t v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((void *)v3 + 1))
        {
          if (v6 == -1) {
LABEL_14:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          uint64_t v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6)) {
            return v3;
          }
        }
      }
      else if (v6 == v3[23])
      {
        uint64_t v7 = v3;
        if (v6 == -1) {
          goto LABEL_14;
        }
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string *,std::string *,char [9],std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    size_t v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((void *)v3 + 1))
        {
          if (v6 == -1) {
LABEL_14:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          uint64_t v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6)) {
            return v3;
          }
        }
      }
      else if (v6 == v3[23])
      {
        uint64_t v7 = v3;
        if (v6 == -1) {
          goto LABEL_14;
        }
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

uint64_t std::vector<kaldi::Matrix<float>>::__push_back_slow_path<kaldi::Matrix<float>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  float v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  int v13 = v10;
  int v14 = &v10[40 * v4];
  float v16 = &v10[40 * v9];
  kaldi::Matrix<float>::Matrix(v14, a2);
  unint64_t v15 = v14 + 40;
  std::vector<kaldi::Matrix<float>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<kaldi::Matrix<float>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B1C6897C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::Matrix<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#1},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#1}>,float ()(int,int)>::~__func()
{
}

void *std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#1},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#1}>,float ()(int,int)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F0A5AF40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#1},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#1}>,float ()(int,int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5AF40;
  a2[1] = v2;
  return result;
}

float std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#1},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#1}>,float ()(int,int)>::operator()(uint64_t a1, int *a2)
{
  return (float)(0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(*(void *)(**(void **)(a1 + 8) + 24 * *a2 + 8)
                          - *(void *)(**(void **)(a1 + 8) + 24 * *a2)) >> 3));
}

uint64_t std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#1},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#1}>,float ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#1},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#1}>,float ()(int,int)>::target_type()
{
}

void *std::__function::__value_func<float ()(int,int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#2},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#2}>,float ()(int,int)>::~__func()
{
}

void *std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#2},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#2}>,float ()(int,int)>::__clone()
{
  float result = operator new(0x10uLL);
  void *result = &unk_1F0A5ACD8;
  return result;
}

void std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#2},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#2}>,float ()(int,int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5ACD8;
}

float std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#2},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#2}>,float ()(int,int)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  return (float)*a3;
}

uint64_t std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#2},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#2}>,float ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#2},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#2}>,float ()(int,int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#3},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#3}>,float ()(int,int)>::~__func()
{
}

__n128 std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#3},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#3}>,float ()(int,int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F0A5AD30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#3},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#3}>,float ()(int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5AD30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#3},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#3}>,float ()(int,int)>::operator()(uint64_t a1, int *a2, int *a3)
{
  return kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetUnigramTokenFrequency(*(void *)(a1 + 8), (unsigned __int8 *)(*(void *)(**(void **)(a1 + 16) + 24 * *a2) + 24 * *a3));
}

uint64_t std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#3},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#3}>,float ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#3},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#3}>,float ()(int,int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#4},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#4}>,float ()(int,int)>::~__func()
{
}

__n128 std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#4},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#4}>,float ()(int,int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F0A5AD88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#4},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#4}>,float ()(int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5AD88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#4},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#4}>,float ()(int,int)>::operator()(uint64_t a1, int *a2, int *a3)
{
  float UnigramTokenFrequency = kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetUnigramTokenFrequency(*(void *)(a1 + 8), (unsigned __int8 *)(*(void *)(**(void **)(a1 + 16) + 24 * *a2) + 24 * *a3));
  return logf(UnigramTokenFrequency);
}

uint64_t std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#4},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#4}>,float ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#4},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#4}>,float ()(int,int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#5},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#5}>,float ()(int,int)>::~__func()
{
}

void *std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#5},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#5}>,float ()(int,int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F0A5ADE0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#5},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#5}>,float ()(int,int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5ADE0;
  a2[1] = v2;
  return result;
}

float std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#5},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#5}>,float ()(int,int)>::operator()(uint64_t a1)
{
  return (float)**(int **)(a1 + 8);
}

uint64_t std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#5},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#5}>,float ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#5},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#5}>,float ()(int,int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#6},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#6}>,float ()(int,int)>::~__func()
{
}

__n128 std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#6},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#6}>,float ()(int,int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F0A5AE38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#6},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#6}>,float ()(int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5AE38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#6},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#6}>,float ()(int,int)>::operator()(uint64_t a1, int *a2)
{
  return (float)(0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(*(void *)(**(void **)(a1 + 8) + 24 * *a2 + 8)
                          - *(void *)(**(void **)(a1 + 8) + 24 * *a2)) >> 3))
       / (float)**(int **)(a1 + 16);
}

uint64_t std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#6},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#6}>,float ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#6},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#6}>,float ()(int,int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#7},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#7}>,float ()(int,int)>::~__func()
{
}

__n128 std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#7},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#7}>,float ()(int,int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F0A5AE90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#7},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#7}>,float ()(int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5AE90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#7},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#7}>,float ()(int,int)>::operator()(uint64_t a1, int *a2)
{
  return *(float *)(**(void **)(a1 + 8) + 4 * *a2)
       / (float)(0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(*(void *)(**(void **)(a1 + 16) + 24 * *a2 + 8)
                          - *(void *)(**(void **)(a1 + 16) + 24 * *a2)) >> 3));
}

uint64_t std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#7},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#7}>,float ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#7},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#7}>,float ()(int,int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#8},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#8}>,float ()(int,int)>::~__func()
{
}

void *std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#8},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#8}>,float ()(int,int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F0A5AEE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#8},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#8}>,float ()(int,int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5AEE8;
  a2[1] = v2;
  return result;
}

float std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#8},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#8}>,float ()(int,int)>::operator()(uint64_t a1, int *a2)
{
  return logf(*(float *)(**(void **)(a1 + 8) + 4 * *a2));
}

uint64_t std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#8},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#8}>,float ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#8},std::allocator<kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(std::vector<std::vector<std::string>> const&,std::vector<float> const&,int,std::vector<kaldi::Matrix<float>> *)::{lambda(int,int)#8}>,float ()(int,int)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZN5kaldi6quasar16ConfusionNetworkINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ERKNS_6vectorINSC_ISA_NS8_ISA_EEEENS8_ISE_EEEERKNSC_IfNS8_IfEEEENS_8functionIFSE_SE_EEENSN_IFSA_SA_EEEEd0_UlSE_E_NS8_ISS_EESO_ED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN5kaldi6quasar16ConfusionNetworkINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ERKNS_6vectorINSC_ISA_NS8_ISA_EEEENS8_ISE_EEEERKNSC_IfNS8_IfEEEENS_8functionIFSE_SE_EEENSN_IFSA_SA_EEEEd0_UlSE_E_NS8_ISS_EESO_E7__cloneEv()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1F0A5AC28;
  return result;
}

void _ZNKSt3__110__function6__funcIZN5kaldi6quasar16ConfusionNetworkINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ERKNS_6vectorINSC_ISA_NS8_ISA_EEEENS8_ISE_EEEERKNSC_IfNS8_IfEEEENS_8functionIFSE_SE_EEENSN_IFSA_SA_EEEEd0_UlSE_E_NS8_ISS_EESO_E7__cloneEPNS0_6__baseISO_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5AC28;
}

__n128 _ZNSt3__110__function6__funcIZN5kaldi6quasar16ConfusionNetworkINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ERKNS_6vectorINSC_ISA_NS8_ISA_EEEENS8_ISE_EEEERKNSC_IfNS8_IfEEEENS_8functionIFSE_SE_EEENSN_IFSA_SA_EEEEd0_UlSE_E_NS8_ISS_EESO_EclEOSE_@<Q0>(long long *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)a1 + 2);
  long long v3 = *a1;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)a1 = 0;
  *(_OWORD *)a2 = v3;
  *(void *)(a2 + 16) = v2;
  memset(v5, 0, sizeof(v5));
  size_t v6 = (void **)v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN5kaldi6quasar16ConfusionNetworkINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ERKNS_6vectorINSC_ISA_NS8_ISA_EEEENS8_ISE_EEEERKNSC_IfNS8_IfEEEENS_8functionIFSE_SE_EEENSN_IFSA_SA_EEEEd0_UlSE_E_NS8_ISS_EESO_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN5kaldi6quasar16ConfusionNetworkINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEC1ERKNS2_6vectorINSA_IS8_NS6_IS8_EEEENS6_ISC_EEEERKNSA_IfNS6_IfEEEENS2_8functionIFSC_SC_EEENSL_IFS8_S8_EEEEd0_UlSC_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN5kaldi6quasar16ConfusionNetworkINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ERKNS_6vectorINSC_ISA_NS8_ISA_EEEENS8_ISE_EEEERKNSC_IfNS8_IfEEEENS_8functionIFSE_SE_EEENSN_IFSA_SA_EEEEd0_UlSE_E_NS8_ISS_EESO_E11target_typeEv()
{
  return &_ZTIZN5kaldi6quasar16ConfusionNetworkINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEC1ERKNS2_6vectorINSA_IS8_NS6_IS8_EEEENS6_ISC_EEEERKNSA_IfNS6_IfEEEENS2_8functionIFSC_SC_EEENSL_IFS8_S8_EEEEd0_UlSC_E_;
}

void *std::__function::__value_func<std::vector<std::string> ()(std::vector<std::string>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN5kaldi6quasar16ConfusionNetworkINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ERKNS_6vectorINSC_ISA_NS8_ISA_EEEENS8_ISE_EEEERKNSC_IfNS8_IfEEEENS_8functionIFSE_SE_EEENSN_IFSA_SA_EEEEd_UlSA_E_NS8_ISS_EESQ_ED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN5kaldi6quasar16ConfusionNetworkINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ERKNS_6vectorINSC_ISA_NS8_ISA_EEEENS8_ISE_EEEERKNSC_IfNS8_IfEEEENS_8functionIFSE_SE_EEENSN_IFSA_SA_EEEEd_UlSA_E_NS8_ISS_EESQ_E7__cloneEv()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1F0A5AC80;
  return result;
}

void _ZNKSt3__110__function6__funcIZN5kaldi6quasar16ConfusionNetworkINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ERKNS_6vectorINSC_ISA_NS8_ISA_EEEENS8_ISE_EEEERKNSC_IfNS8_IfEEEENS_8functionIFSE_SE_EEENSN_IFSA_SA_EEEEd_UlSA_E_NS8_ISS_EESQ_E7__cloneEPNS0_6__baseISQ_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5AC80;
}

void _ZNSt3__110__function6__funcIZN5kaldi6quasar16ConfusionNetworkINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ERKNS_6vectorINSC_ISA_NS8_ISA_EEEENS8_ISE_EEEERKNSC_IfNS8_IfEEEENS_8functionIFSE_SE_EEENSN_IFSA_SA_EEEEd_UlSA_E_NS8_ISS_EESQ_EclEOSA_(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 15) = *(void *)(a1 + 15);
  LOBYTE(vstd::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(unsigned char *)(a1 + 23);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(unsigned char *)(a2 + 23) = v2;
}

uint64_t _ZNKSt3__110__function6__funcIZN5kaldi6quasar16ConfusionNetworkINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ERKNS_6vectorINSC_ISA_NS8_ISA_EEEENS8_ISE_EEEERKNSC_IfNS8_IfEEEENS_8functionIFSE_SE_EEENSN_IFSA_SA_EEEEd_UlSA_E_NS8_ISS_EESQ_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN5kaldi6quasar16ConfusionNetworkINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEC1ERKNS2_6vectorINSA_IS8_NS6_IS8_EEEENS6_ISC_EEEERKNSA_IfNS6_IfEEEENS2_8functionIFSC_SC_EEENSL_IFS8_S8_EEEEd_UlS8_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN5kaldi6quasar16ConfusionNetworkINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ERKNS_6vectorINSC_ISA_NS8_ISA_EEEENS8_ISE_EEEERKNSC_IfNS8_IfEEEENS_8functionIFSE_SE_EEENSN_IFSA_SA_EEEEd_UlSA_E_NS8_ISS_EESQ_E11target_typeEv()
{
  return &_ZTIZN5kaldi6quasar16ConfusionNetworkINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEC1ERKNS2_6vectorINSA_IS8_NS6_IS8_EEEENS6_ISC_EEEERKNSA_IfNS6_IfEEEENS2_8functionIFSC_SC_EEENSL_IFS8_S8_EEEEd_UlS8_E_;
}

void *std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 176;
        std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100]((void *)(a2 + 144));
  long long v3 = *(void **)(a2 + 112);
  if (v3)
  {
    *(void *)(a2 + 120) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 111) < 0) {
    operator delete(*(void **)(a2 + 88));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a2 + 48);
  return std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table(a2 + 8);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      long long v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>>,0>(uint64_t a1)
{
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100]((void *)(a1 + 104));
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  long long v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(void *)(a1 + 64) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void **)(a1 + 32);
  std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void *std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__init_with_size[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string>*,kaldi::quasar::ConfusionNetworkSlot<std::string>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    size_t v6 = result;
    std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,kaldi::quasar::ConfusionNetworkSlot<std::string>*,kaldi::quasar::ConfusionNetworkSlot<std::string>*,kaldi::quasar::ConfusionNetworkSlot<std::string>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1C69810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745ELL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[176 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745ELL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(176 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,kaldi::quasar::ConfusionNetworkSlot<std::string>*,kaldi::quasar::ConfusionNetworkSlot<std::string>*,kaldi::quasar::ConfusionNetworkSlot<std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot(v4, v6);
      v6 += 176;
      uint64_t v4 = v11 + 176;
      v11 += 176;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,kaldi::quasar::ConfusionNetworkSlot<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1C69964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 48;
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v5 = a1 + 48;
  std::unordered_map<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>::unordered_map(a1 + 8, a2 + 8);
  std::unordered_map<std::string,std::string>::unordered_map(v5, v4);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v6;
  }
  *(void *)(a1 + 11std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  std::vector<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> *,std::allocator<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> *>>::__init_with_size[abi:ne180100]<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> **,std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> **>((void *)(a1 + 112), *(const void **)(a2 + 112), *(void *)(a2 + 120), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  std::__function::__value_func<std::string ()(std::string)>::__value_func[abi:ne180100](a1 + 144, a2 + 144);
  return a1;
}

void sub_1B1C69A40(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_1B1C69AF4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    int v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__construct_node_hash<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1B1C69D78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__construct_node_hash<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x98uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  __n128 result = std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1C69DF0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  kaldi::quasar::ConfusionNetworkArc<std::string>::ConfusionNetworkArc((uint64_t)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_1B1C69E64(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::ConfusionNetworkArc<std::string>::ConfusionNetworkArc(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__init_with_size[abi:ne180100]<kaldi::quasar::ConfusionNetworkArcElement<std::string>*,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>((std::string *)(a1 + 8), *(long long **)(a2 + 8), *(long long **)(a2 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 56), *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100](a1 + 80, a2 + 80);
  return a1;
}

void sub_1B1C69F44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  long long v6 = *v4;
  if (*v4)
  {
    *(void *)(v2 + 64) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 40) = v7;
    operator delete(v7);
  }
  std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__init_with_size[abi:ne180100]<kaldi::quasar::ConfusionNetworkArcElement<std::string>*,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,kaldi::quasar::ConfusionNetworkArcElement<std::string>*,kaldi::quasar::ConfusionNetworkArcElement<std::string>*,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B1C69FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,kaldi::quasar::ConfusionNetworkArcElement<std::string>*,kaldi::quasar::ConfusionNetworkArcElement<std::string>*,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  long long v4 = this;
  int v13 = this;
  int v14 = this;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  char v12 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        unint64_t v8 = v14;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        unint64_t v8 = v4;
      }
      std::string::size_type v9 = *((void *)v6 + 3);
      *(std::string::size_type *)((char *)v4[1].__r_.__value_.__r.__words + 6) = *(void *)((char *)v6 + 30);
      v4[1].__r_.__value_.__r.__words[0] = v9;
      long long v6 = (long long *)((char *)v6 + 40);
      long long v4 = (std::string *)((char *)v8 + 40);
      int v14 = (std::string *)((char *)v8 + 40);
    }
    while (v6 != a3);
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_1B1C6A0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 17) < 0) {
      operator delete(*(void **)(v1 - 40));
    }
    v1 -= 40;
  }
}

uint64_t std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  long long v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *std::vector<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> *,std::allocator<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> *>>::__init_with_size[abi:ne180100]<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> **,std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> **>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    __n128 result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1C6A2B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<std::string ()(std::string)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  long long v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,kaldi::quasar::ConfusionNetworkSlot<std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,kaldi::quasar::ConfusionNetworkSlot<std::string>*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,kaldi::quasar::ConfusionNetworkSlot<std::string>*>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v2 = (uint64_t *)result[1];
  uint64_t v1 = (uint64_t *)result[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *result;
    do
    {
      v3 -= 176;
      __n128 result = (uint64_t *)std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string *,std::string *,char [24],std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    size_t v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((void *)v3 + 1))
        {
          if (v6 == -1) {
LABEL_14:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          uint64_t v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6)) {
            return v3;
          }
        }
      }
      else if (v6 == v3[23])
      {
        uint64_t v7 = v3;
        if (v6 == -1) {
          goto LABEL_14;
        }
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string *,std::string *,char [22],std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    size_t v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((void *)v3 + 1))
        {
          if (v6 == -1) {
LABEL_14:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          uint64_t v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6)) {
            return v3;
          }
        }
      }
      else if (v6 == v3[23])
      {
        uint64_t v7 = v3;
        if (v6 == -1) {
          goto LABEL_14;
        }
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string *,std::string *,char [28],std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    size_t v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((void *)v3 + 1))
        {
          if (v6 == -1) {
LABEL_14:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          uint64_t v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6)) {
            return v3;
          }
        }
      }
      else if (v6 == v3[23])
      {
        uint64_t v7 = v3;
        if (v6 == -1) {
          goto LABEL_14;
        }
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

void *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  size_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    int v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  float v17 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  BOOL v18 = *a4;
  long long v19 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)BOOL v18 = 0;
  *((_DWORD *)i + 10) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  char v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t i = *v27;
LABEL_38:
    *char v27 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v17;
  void *v17 = i;
  *(void *)(v26 + 8 * v4) = v17;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    char v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_1B1C6A884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void fst::RemoveEpsLocal<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1)
{
  fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::RemoveEpsLocalClass(&v1, a1);
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
  if (v2)
  {
    uint64_t v3 = v2;
    operator delete(v2);
  }
}

uint64_t *fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::RemoveEpsLocalClass(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) != -1)
  {
    *((_DWORD *)a1 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = (*(uint64_t (**)(void))(*(void *)*a1 + 200))();
    fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::InitNumArcs(a1);
    int v4 = (*(uint64_t (**)(void))(*(void *)*a1 + 160))();
    if (v4 >= 1)
    {
      uint64_t v5 = 0;
      do
      {
        for (unint64_t i = 0; i < (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, v5); ++i)
          fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::RemoveEps((uint64_t)a1, v5, i);
        uint64_t v5 = (v5 + 1);
      }
      while (v5 != v4);
    }
    fst::Connect<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
  }
  return a1;
}

void sub_1B1C6AA34(_Unwind_Exception *exception_object)
{
  int v4 = (void *)v1[5];
  if (v4)
  {
    v1[6] = v4;
    operator delete(v4);
  }
  uint64_t v5 = *v2;
  if (*v2)
  {
    v1[3] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::InitNumArcs(void *a1)
{
  int v2 = (*(uint64_t (**)(void))(*(void *)*a1 + 160))(*a1);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 2), v2);
  uint64_t v3 = a1 + 5;
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 5), v2);
  uint64_t result = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  ++*(_DWORD *)(a1[2] + 4 * (int)result);
  if (v2 < 1) {
    return result;
  }
  for (uint64_t i = 0; i != v2; ++i)
  {
    (*(void (**)(void *__return_ptr))(*(void *)*a1 + 32))(v11);
    float v16 = *((float *)v11 + 1);
    int v17 = v11[0];
    int v15 = 2139095040;
    float v14 = INFINITY;
    v6.n128_u32[0] = v11[0];
    if (*(float *)v11 != INFINITY || (v6.n128_f32[0] = v16, v16 != v14)) {
      ++*(_DWORD *)(*v3 + 4 * i);
    }
    uint64_t v7 = *a1;
    unint64_t v13 = 0;
    (*(void (**)(uint64_t, uint64_t, void *, __n128))(*(void *)v7 + 136))(v7, i, v11, v6);
    while (1)
    {
      uint64_t result = v11[0];
      if (!v11[0])
      {
        if (v13 >= v11[2]) {
          goto LABEL_18;
        }
LABEL_12:
        uint64_t v10 = 0;
        uint64_t v9 = v11[1] + 20 * v13;
        goto LABEL_13;
      }
      int v8 = (*(uint64_t (**)(void))(*(void *)v11[0] + 24))(v11[0]);
      uint64_t result = v11[0];
      if (v8) {
        break;
      }
      if (!v11[0]) {
        goto LABEL_12;
      }
      uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v11[0] + 32))();
      uint64_t v10 = v11[0];
LABEL_13:
      ++*(_DWORD *)(a1[2] + 4 * *(int *)(v9 + 16));
      ++*(_DWORD *)(*v3 + 4 * i);
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
      }
      else {
        ++v13;
      }
    }
    if (v11[0])
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v11[0] + 8))();
      continue;
    }
LABEL_18:
    if (v12) {
      --*v12;
    }
  }
  return result;
}

void sub_1B1C6AD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::StateSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>();
  }
  else {
    quasar::InverseTextNormalizer::getNumTokens(v10);
  }
  _Unwind_Resume(a1);
}

void fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::RemoveEps(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::GetArc((uint64_t *)a1, a2, a3, (uint64_t)&v13);
  if (v15 != a2 && v15 != *(_DWORD *)(a1 + 8))
  {
    int v7 = *(_DWORD *)(*(void *)(a1 + 40) + 4 * v15);
    if (*(_DWORD *)(*(void *)(a1 + 16) + 4 * v15) != 1 || v7 < 2)
    {
      if (v7 == 1)
      {
        v9[0] = v13;
        v9[1] = v14;
        int v10 = v15;
        fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::RemoveEpsPattern2((void *)a1, a2, a3, v9);
      }
    }
    else
    {
      v11[0] = v13;
      v11[1] = v14;
      int v12 = v15;
      fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::RemoveEpsPattern1((void *)a1, a2, a3, v11);
    }
  }
}

uint64_t fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::GetArc(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  uint64_t v11 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v6 + 136))(v6, a2, v9);
  if (v9[0])
  {
    (*(void (**)(void, uint64_t))(*(void *)v9[0] + 64))(v9[0], a3);
    if (v9[0])
    {
      uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v9[0] + 32))(v9[0]);
      uint64_t result = v9[0];
      goto LABEL_7;
    }
    a3 = v11;
  }
  else
  {
    uint64_t v11 = a3;
  }
  uint64_t result = 0;
  uint64_t v7 = v9[1] + 20 * a3;
LABEL_7:
  *(void *)a4 = *(void *)v7;
  *(void *)(a4 + 8) = *(void *)(v7 + 8);
  *(_DWORD *)(a4 + 16) = *(_DWORD *)(v7 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v10) {
    --*v10;
  }
  return result;
}

void sub_1B1C6AF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::StateSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

void fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::RemoveEpsPattern1(void *a1, uint64_t a2, uint64_t a3, float32x2_t *a4)
{
  __int32 v8 = a4[2].i32[0];
  int v58 = 0;
  unint64_t v59 = 0;
  unint64_t v60 = 0;
  __n128 v9 = ((__n128 (*)(void))*(void *)(*(void *)*a1 + 296))();
  v10.n128_u32[0] = 2139095040;
  v9.n128_u32[0] = 2139095040;
  __n128 v48 = v9;
  __n128 v49 = v9;
  __n128 v50 = v10;
  __n128 v47 = v9;
  while (!(*(unsigned int (**)(uint64_t))(*(void *)v57 + 24))(v57))
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v57 + 32))(v57);
    unint64_t v13 = *(void *)v11;
    v64[0] = *(void *)v11;
    v14.n128_u64[0] = *(void *)(v11 + 8);
    v64[1] = v14.n128_u64[0];
    __int32 v15 = *(_DWORD *)(v11 + 16);
    int v65 = v15;
    if (v15 != *((_DWORD *)a1 + 2))
    {
      __int32 v16 = a4->i32[0];
      if (a4->i32[0] && v13 || (v17 = HIDWORD(v13), (__int32 v18 = a4->i32[1]) != 0) && HIDWORD(v13))
      {
        float32x2_t v19 = (float32x2_t)vdup_lane_s32((int32x2_t)v14.n128_u64[0], 0);
        v19.i32[0] = v50.n128_u32[0];
        v12.n128_u64[0] = (unint64_t)vadd_f32(v19, (float32x2_t)__PAIR64__(v14.n128_u32[1], v49.n128_u32[0]));
        if (v12.n128_f32[0] >= v12.n128_f32[1])
        {
          if (v12.n128_f32[0] > v12.n128_f32[1]
            || ((__n128 v12 = v50, v50.n128_f32[0] >= v14.n128_f32[0]) ? (v20 = v50.n128_f32[0] <= v14.n128_f32[0]) : (v20 = 1),
                !v20))
          {
            v12.n128_u32[0] = v14.n128_u32[1];
            __n128 v49 = v12;
            __n128 v50 = v14;
          }
        }
      }
      else
      {
        float32x2_t v55 = vadd_f32((float32x2_t)v14.n128_u64[0], a4[1]);
        if (v16) {
          LODWORD(v13) = v16;
        }
        if (v18) {
          __int32 v21 = v18;
        }
        else {
          __int32 v21 = v17;
        }
        unint64_t v54 = __PAIR64__(v21, v13);
        __int32 v56 = v15;
        float32x2_t v22 = (float32x2_t)vdup_lane_s32((int32x2_t)v14.n128_u64[0], 0);
        v22.i32[0] = v48.n128_u32[0];
        v12.n128_u64[0] = (unint64_t)vadd_f32(v22, (float32x2_t)__PAIR64__(v14.n128_u32[1], v47.n128_u32[0]));
        if (v12.n128_f32[0] >= v12.n128_f32[1])
        {
          if (v12.n128_f32[0] > v12.n128_f32[1]
            || ((__n128 v12 = v48, v48.n128_f32[0] >= v14.n128_f32[0]) ? (v23 = v48.n128_f32[0] <= v14.n128_f32[0]) : (v23 = 1),
                !v23))
          {
            v12.n128_u32[0] = v14.n128_u32[1];
            __n128 v47 = v12;
            __n128 v48 = v14;
          }
        }
        --*(_DWORD *)(a1[5] + 4 * v8);
        --*(_DWORD *)(a1[2] + 4 * v65);
        int v65 = *((_DWORD *)a1 + 2);
        (*(void (**)(uint64_t, void *))(*(void *)v57 + 88))(v57, v64);
        unint64_t v24 = v59;
        if ((unint64_t)v59 >= v60)
        {
          uint64_t v25 = std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t *)&v58, (uint64_t)&v54);
        }
        else
        {
          *unint64_t v59 = (float32x2_t)v54;
          v24[1] = v55;
          v24[2].i32[0] = v56;
          uint64_t v25 = (uint64_t)&v24[2] + 4;
        }
        unint64_t v59 = (float32x2_t *)v25;
      }
    }
    (*(void (**)(uint64_t))(*(void *)v57 + 40))(v57);
  }
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
  }
  (*(void (**)(void *__return_ptr))(*(void *)*a1 + 32))(v64);
  uint64_t v26 = v64[0];
  LODWORD(v57) = HIDWORD(v64[0]);
  LODWORD(v54) = v64[0];
  float v63 = INFINITY;
  float v62 = INFINITY;
  if (*(float *)v64 != INFINITY || *(float *)&v57 != v62)
  {
    if (*a4)
    {
      __n128 v36 = v49;
      if ((float)(v50.n128_f32[0] + v49.n128_f32[0]) >= (float)(*(float *)v64 + *((float *)v64 + 1)))
      {
        if ((float)(v50.n128_f32[0] + v49.n128_f32[0]) > (float)(*(float *)v64 + *((float *)v64 + 1))
          || (__n128 v36 = v50, v50.n128_f32[0] > *(float *)v64))
        {
          v36.n128_u32[0] = HIDWORD(v64[0]);
          v50.n128_u32[0] = v64[0];
          __n128 v49 = v36;
        }
      }
    }
    else
    {
      __n128 v27 = v47;
      v27.n128_f32[0] = v48.n128_f32[0] + v47.n128_f32[0];
      if ((float)(v48.n128_f32[0] + v47.n128_f32[0]) >= (float)(*(float *)v64 + *((float *)v64 + 1)))
      {
        if ((float)(v48.n128_f32[0] + v47.n128_f32[0]) > (float)(*(float *)v64 + *((float *)v64 + 1))
          || (__n128 v27 = v48, v48.n128_f32[0] > *(float *)v64))
        {
          v27.n128_u32[0] = HIDWORD(v64[0]);
          __n128 v47 = v27;
          v27.n128_u32[0] = v64[0];
          v48.n128_u32[0] = v64[0];
        }
      }
      float v28 = a4[1].f32[0];
      float v29 = a4[1].f32[1];
      (*(void (**)(unint64_t *__return_ptr, __n128))(*(void *)*a1 + 32))(&v54, v27);
      float v63 = *((float *)&v54 + 1);
      LODWORD(v57) = v54;
      float v62 = INFINITY;
      float v61 = INFINITY;
      v30.n128_u32[0] = v54;
      if (*(float *)&v54 == INFINITY)
      {
        v30.n128_f32[0] = v63;
        if (v63 == v61) {
          ++*(_DWORD *)(a1[5] + 4 * (int)a2);
        }
      }
      uint64_t v31 = *a1;
      (*(void (**)(unint64_t *__return_ptr, void, uint64_t, __n128))(*(void *)*a1 + 32))(&v54, *a1, a2, v30);
      float v32 = *(float *)&v26 + v28;
      float v33 = *((float *)&v54 + 1);
      float v34 = *(float *)&v54;
      float v35 = (float)(*(float *)&v26 + v28) + (float)(*((float *)&v26 + 1) + v29);
      if ((float)(*(float *)&v54 + *((float *)&v54 + 1)) >= v35
        && ((float)(*(float *)&v54 + *((float *)&v54 + 1)) > v35 || *(float *)&v54 >= v32 && *(float *)&v54 > v32))
      {
        float v33 = *((float *)&v26 + 1) + v29;
        float v34 = *(float *)&v26 + v28;
      }
      *(float *)unint64_t v53 = v34;
      *(float *)&v53[1] = v33;
      (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)v31 + 184))(v31, a2, v53);
      --*(_DWORD *)(a1[5] + 4 * v8);
      uint64_t v37 = *a1;
      int32x2_t v52 = vdup_n_s32(0x7F800000u);
      (*(void (**)(uint64_t, void, int32x2_t *))(*(void *)v37 + 184))(v37, v8, &v52);
    }
  }
  LODWORD(v64[0]) = v48.n128_u32[0];
  __n128 v38 = v47;
  LODWORD(v54) = v47.n128_u32[0];
  LODWORD(v57) = 2139095040;
  float v63 = INFINITY;
  if (v48.n128_f32[0] != INFINITY || (v38.n128_u32[0] = v54, *(float *)&v54 != v63))
  {
    LODWORD(v64[0]) = v50.n128_u32[0];
    __n128 v39 = v49;
    LODWORD(v54) = v49.n128_u32[0];
    LODWORD(v57) = 2139095040;
    float v63 = INFINITY;
    if (v50.n128_f32[0] == INFINITY && (v39.n128_u32[0] = v54, *(float *)&v54 == v63))
    {
      --*(_DWORD *)(a1[5] + 4 * (int)a2);
      --*(_DWORD *)(a1[2] + 4 * a4[2].i32[0]);
      a4[2].i32[0] = *((_DWORD *)a1 + 2);
      (*(void (**)(__n128))(*(void *)*a1 + 296))(v39);
      (*(void (**)(void, uint64_t))(*(void *)v64[0] + 64))(v64[0], a3);
      (*(void (**)(void, float32x2_t *))(*(void *)v64[0] + 88))(v64[0], a4);
      if (v64[0]) {
        (*(void (**)(void))(*(void *)v64[0] + 8))(v64[0]);
      }
    }
    else
    {
      if ((float)(v48.n128_f32[0] + v47.n128_f32[0]) >= (float)(v50.n128_f32[0] + v49.n128_f32[0])
        && ((float)(v48.n128_f32[0] + v47.n128_f32[0]) > (float)(v50.n128_f32[0] + v49.n128_f32[0])
         || v48.n128_f32[0] > v50.n128_f32[0]))
      {
        v47.n128_u32[0] = v49.n128_u32[0];
        v48.n128_u32[0] = v50.n128_u32[0];
      }
      float v40 = v50.n128_f32[0] - v48.n128_f32[0];
      if ((float)(v50.n128_f32[0] - v48.n128_f32[0]) == -INFINITY
        || (float v41 = v49.n128_f32[0] - v47.n128_f32[0], (float)(v49.n128_f32[0] - v47.n128_f32[0]) == -INFINITY))
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v64);
          uint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"LatticeWeightTpl::Divide, NaN or invalid number produced. ", 58);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"[dividing by zero?]  Returning zero.", 36);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v64);
        }
        float v41 = INFINITY;
        float v40 = INFINITY;
      }
      else
      {
        BOOL v42 = v40 == INFINITY;
        if (v41 == INFINITY) {
          BOOL v42 = 1;
        }
        if (v42)
        {
          float v41 = INFINITY;
          float v40 = INFINITY;
        }
      }
      unint64_t v51 = __PAIR64__(LODWORD(v41), LODWORD(v40));
      fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::Reweight(a1, a2, a3, (float32x2_t *)&v51);
    }
  }
  int v44 = v59;
  if (v59 != v58)
  {
    uint64_t v45 = 0;
    unint64_t v46 = 0;
    int v44 = v58;
    do
    {
      ++*(_DWORD *)(a1[5] + 4 * (int)a2);
      ++*(_DWORD *)(a1[2] + 4 * v44[2].i32[v45]);
      (*(void (**)(void, uint64_t, __n128))(*(void *)*a1 + 208))(*a1, a2, v38);
      ++v46;
      int v44 = v58;
      v45 += 5;
    }
    while (v46 < 0xCCCCCCCCCCCCCCCDLL * (((char *)v59 - (char *)v58) >> 2));
  }
  if (v44)
  {
    unint64_t v59 = v44;
    operator delete(v44);
  }
}

void sub_1B1C6B844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::RemoveEpsPattern2(void *a1, uint64_t a2, uint64_t a3, float32x2_t *a4)
{
  __int32 v8 = a4[2].i32[0];
  int v9 = *(_DWORD *)(a1[2] + 4 * v8);
  uint64_t v10 = v8;
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(*(void *)*a1 + 32))(&v37);
  v29[0] = *((float *)&v37 + 1);
  LODWORD(v32[0]) = v37;
  LODWORD(v34) = 2139095040;
  float v39 = INFINITY;
  if (*(float *)&v37 != INFINITY || v29[0] != v39)
  {
    if (*a4) {
      return result;
    }
    float v12 = *(float *)&v37 + a4[1].f32[0];
    float v13 = *((float *)&v37 + 1) + a4[1].f32[1];
    (*(void (**)(void *__return_ptr))(*(void *)*a1 + 32))(v32);
    LODWORD(v34) = HIDWORD(v32[0]);
    v29[0] = *(float *)v32;
    float v39 = INFINITY;
    float v38 = INFINITY;
    v14.n128_u32[0] = v32[0];
    if (*(float *)v32 == INFINITY)
    {
      v14.n128_u32[0] = v34;
      if (*(float *)&v34 == v38) {
        ++*(_DWORD *)(a1[5] + 4 * (int)a2);
      }
    }
    uint64_t v15 = *a1;
    (*(void (**)(void *__return_ptr, void, uint64_t, __n128))(*(void *)*a1 + 32))(v32, *a1, a2, v14);
    float v16 = *((float *)v32 + 1);
    float v17 = *(float *)v32;
    if ((float)(*(float *)v32 + *((float *)v32 + 1)) >= (float)(v12 + v13)
      && ((float)(*(float *)v32 + *((float *)v32 + 1)) > (float)(v12 + v13) || *(float *)v32 > v12))
    {
      float v16 = v13;
      float v17 = v12;
    }
    *(float *)__n128 v36 = v17;
    *(float *)&v36[1] = v16;
    (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)v15 + 184))(v15, a2, v36);
    if (v9 == 1)
    {
      --*(_DWORD *)(a1[5] + 4 * v10);
      uint64_t v18 = *a1;
      int32x2_t v35 = vdup_n_s32(0x7F800000u);
      (*(void (**)(uint64_t, uint64_t, int32x2_t *))(*(void *)v18 + 184))(v18, v10, &v35);
    }
    goto LABEL_32;
  }
  (*(void (**)(void, uint64_t, void **))(*(void *)*a1 + 296))(*a1, v10, &v34);
  while (*(_DWORD *)((*(uint64_t (**)(void *))(*v34 + 32))(v34) + 16) == *((_DWORD *)a1 + 2))
    (*(void (**)(void *))(*v34 + 40))(v34);
  uint64_t v19 = (*(uint64_t (**)(void *))(*v34 + 32))(v34);
  unint64_t v20 = *(void *)v19;
  v32[0] = *(void *)v19;
  float32x2_t v21 = *(float32x2_t *)(v19 + 8);
  v32[1] = v21;
  int v22 = *(_DWORD *)(v19 + 16);
  int v33 = v22;
  __int32 v23 = a4->i32[0];
  if (a4->i32[0] && v20 || (unint64_t v24 = HIDWORD(v20), v25 = a4->f32[1], v25 != 0.0) && HIDWORD(v20))
  {
    int v26 = 0;
  }
  else
  {
    uint64_t v27 = v22;
    float32x2_t v30 = vadd_f32(v21, a4[1]);
    if (v23) {
      LODWORD(v20) = v23;
    }
    if (v25 == 0.0) {
      float v28 = *(float *)&v24;
    }
    else {
      float v28 = v25;
    }
    LODWORD(v29[0]) = v20;
    v29[1] = v28;
    int v31 = v22;
    if (v9 == 1)
    {
      --*(_DWORD *)(a1[5] + 4 * v10);
      --*(_DWORD *)(a1[2] + 4 * v22);
      int v33 = *((_DWORD *)a1 + 2);
      (*(void (**)(void *, void *))(*v34 + 88))(v34, v32);
    }
    ++*(_DWORD *)(a1[5] + 4 * (int)a2);
    ++*(_DWORD *)(a1[2] + 4 * v27);
    (*(void (**)(void, uint64_t, float *))(*(void *)*a1 + 208))(*a1, a2, v29);
    int v26 = 1;
  }
  uint64_t result = v34;
  if (v34) {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*v34 + 8))(v34);
  }
  if (v26)
  {
LABEL_32:
    --*(_DWORD *)(a1[5] + 4 * (int)a2);
    --*(_DWORD *)(a1[2] + 4 * v10);
    a4[2].i32[0] = *((_DWORD *)a1 + 2);
    (*(void (**)(void))(*(void *)*a1 + 296))();
    (*(void (**)(void, uint64_t))(*(void *)v32[0] + 64))(v32[0], a3);
    (*(void (**)(void, float32x2_t *))(*(void *)v32[0] + 88))(v32[0], a4);
    uint64_t result = (void *)v32[0];
    if (v32[0]) {
      return (void *)(*(uint64_t (**)(void))(*(void *)v32[0] + 8))(v32[0]);
    }
  }
  return result;
}

void sub_1B1C6BE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::RemoveEpsLocalClass<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::LatticeWeightTpl<float>>>::Reweight(void *a1, uint64_t a2, uint64_t a3, float32x2_t *a4)
{
  (*(void (**)(void, uint64_t, uint64_t *))(*(void *)*a1 + 296))(*a1, a2, &v32);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 64))(v32, a3);
  uint64_t v7 = (float32x2_t *)(*(uint64_t (**)(uint64_t))(*(void *)v32 + 32))(v32);
  v30[0] = *v7;
  unsigned __int32 v31 = v7[2].u32[0];
  v30[1] = vadd_f32(v7[1], *a4);
  (*(void (**)(uint64_t, void *))(*(void *)v32 + 88))(v32, v30);
  (*(void (**)(void, void, uint64_t *))(*(void *)*a1 + 296))(*a1, v31, &v29);
  while (!(*(unsigned int (**)(uint64_t))(*(void *)v29 + 24))(v29))
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 32))(v29);
    uint64_t v25 = *(void *)v8;
    float v9 = *(float *)(v8 + 8);
    float v10 = *(float *)(v8 + 12);
    float v26 = v9;
    float v27 = v10;
    int v28 = *(_DWORD *)(v8 + 16);
    if (v28 != *((_DWORD *)a1 + 2))
    {
      float v11 = v9 - a4->f32[0];
      float v12 = v10 - a4->f32[1];
      if (v11 == -INFINITY || v12 == -INFINITY)
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v35);
          __n128 v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"LatticeWeightTpl::Divide, NaN or invalid number produced. ", 58);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"[dividing by zero?]  Returning zero.", 36);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v35);
        }
        float v11 = INFINITY;
        float v12 = INFINITY;
      }
      else
      {
        BOOL v15 = v11 == INFINITY;
        if (v12 == INFINITY) {
          BOOL v15 = 1;
        }
        if (v15)
        {
          float v11 = INFINITY;
          float v12 = INFINITY;
        }
      }
      float v26 = v11;
      float v27 = v12;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v29 + 88))(v29, &v25);
    }
    (*(void (**)(uint64_t))(*(void *)v29 + 40))(v29);
  }
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 32))(&v25);
  LODWORD(v29) = HIDWORD(v25);
  LODWORD(v35[0]) = v25;
  int v34 = 2139095040;
  float v33 = INFINITY;
  if (*(float *)&v25 != INFINITY || *(float *)&v29 != v33)
  {
    uint64_t v16 = *a1;
    uint64_t v17 = v31;
    float v18 = *(float *)&v25 - a4->f32[0];
    float v19 = *((float *)&v25 + 1) - a4->f32[1];
    if (v18 == -INFINITY || v19 == -INFINITY)
    {
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v35);
        float32x2_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"LatticeWeightTpl::Divide, NaN or invalid number produced. ", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"[dividing by zero?]  Returning zero.", 36);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v35);
      }
    }
    else if (v18 != INFINITY && v19 != INFINITY)
    {
      *(float *)v24.i32 = *(float *)&v25 - a4->f32[0];
      *(float *)&v24.i32[1] = v19;
LABEL_36:
      (*(void (**)(uint64_t, uint64_t, int32x2_t *))(*(void *)v16 + 184))(v16, v17, &v24);
      goto LABEL_37;
    }
    int32x2_t v24 = vdup_n_s32(0x7F800000u);
    goto LABEL_36;
  }
LABEL_37:
  uint64_t result = v32;
  if (v32) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  return result;
}

void sub_1B1C6C2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(a1);
}

void quasar::SpeechRequestResultData::appendDump(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (std::mutex *)(a1 + 192);
  std::mutex::lock((std::mutex *)(a1 + 192));
  uint64_t v17 = a2;
  float v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 304), (const void **)a2, (uint64_t)&std::piecewise_construct, &v17);
  float v10 = (std::string *)(v9 + 7);
  if (*((char *)v9 + 79) < 0)
  {
    if (!v9[8]) {
      goto LABEL_12;
    }
  }
  else if (!*((unsigned char *)v9 + 79))
  {
    goto LABEL_12;
  }
  int v11 = *(char *)(a4 + 23);
  if (v11 >= 0) {
    float v12 = (const std::string::value_type *)a4;
  }
  else {
    float v12 = *(const std::string::value_type **)a4;
  }
  if (v11 >= 0) {
    std::string::size_type v13 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v13 = *(void *)(a4 + 8);
  }
  std::string::append((std::string *)(v9 + 7), v12, v13);
LABEL_12:
  int v14 = *(char *)(a3 + 23);
  if (v14 >= 0) {
    BOOL v15 = (const std::string::value_type *)a3;
  }
  else {
    BOOL v15 = *(const std::string::value_type **)a3;
  }
  if (v14 >= 0) {
    std::string::size_type v16 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v16 = *(void *)(a3 + 8);
  }
  std::string::append(v10, v15, v16);
  std::mutex::unlock(v8);
}

void sub_1B1C6C470(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::SpeechRequestResultData::addDump(uint64_t a1, long long *a2, const std::string *a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 192);
  std::mutex::lock((std::mutex *)(a1 + 192));
  uint64_t v8 = a2;
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 304), (const void **)a2, (uint64_t)&std::piecewise_construct, &v8);
  std::string::operator=((std::string *)(v7 + 7), a3);
  std::mutex::unlock(v6);
}

void sub_1B1C6C4FC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::SpeechRequestResultData::addDump(uint64_t a1, long long *a2, double a3)
{
  std::to_string(&v5, a3);
  quasar::SpeechRequestResultData::addDump(a1, a2, &v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_1B1C6C564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SpeechRequestResultData::addAA(uint64_t a1, long long *a2, const std::string *a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 192);
  std::mutex::lock((std::mutex *)(a1 + 192));
  uint64_t v8 = a2;
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 280), (const void **)a2, (uint64_t)&std::piecewise_construct, &v8);
  std::string::operator=((std::string *)(v7 + 7), a3);
  std::mutex::unlock(v6);
}

void sub_1B1C6C5F8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::SpeechRequestResultData::appendAA(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (std::mutex *)(a1 + 192);
  std::mutex::lock((std::mutex *)(a1 + 192));
  uint64_t v17 = a2;
  float v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 280), (const void **)a2, (uint64_t)&std::piecewise_construct, &v17);
  float v10 = (std::string *)(v9 + 7);
  if (*((char *)v9 + 79) < 0)
  {
    if (!v9[8]) {
      goto LABEL_12;
    }
  }
  else if (!*((unsigned char *)v9 + 79))
  {
    goto LABEL_12;
  }
  int v11 = *(char *)(a4 + 23);
  if (v11 >= 0) {
    float v12 = (const std::string::value_type *)a4;
  }
  else {
    float v12 = *(const std::string::value_type **)a4;
  }
  if (v11 >= 0) {
    std::string::size_type v13 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v13 = *(void *)(a4 + 8);
  }
  std::string::append((std::string *)(v9 + 7), v12, v13);
LABEL_12:
  int v14 = *(char *)(a3 + 23);
  if (v14 >= 0) {
    BOOL v15 = (const std::string::value_type *)a3;
  }
  else {
    BOOL v15 = *(const std::string::value_type **)a3;
  }
  if (v14 >= 0) {
    std::string::size_type v16 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v16 = *(void *)(a3 + 8);
  }
  std::string::append(v10, v15, v16);
  std::mutex::unlock(v8);
}

void sub_1B1C6C6E4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::SpeechRequestResultData::addAA(uint64_t a1, long long *a2, double *a3, char a4)
{
  uint64_t v8 = (std::mutex *)(a1 + 192);
  std::mutex::lock((std::mutex *)(a1 + 192));
  if ((a4 & 1) != 0
    || a1 + 264 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 256, (const void **)a2))
  {
    double v11 = *a3;
    float v12 = a2;
    *((double *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 256), (const void **)a2, (uint64_t)&std::piecewise_construct, &v12)+ 7) = v11;
  }
  else
  {
    double v9 = *a3;
    float v12 = a2;
    float v10 = std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 256), (const void **)a2, (uint64_t)&std::piecewise_construct, &v12);
    *((double *)v10 + 7) = v9 + *((double *)v10 + 7);
  }
  std::mutex::unlock(v8);
}

void sub_1B1C6C7D4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::SpeechRequestResultData::addDumpAA(uint64_t a1, long long *a2, const std::string *a3)
{
  quasar::SpeechRequestResultData::addDump(a1, a2, a3);
  quasar::SpeechRequestResultData::addAA(a1, a2, a3);
}

void quasar::SpeechRequestResultData::appendDumpAA(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  quasar::SpeechRequestResultData::appendDump(a1, a2, a3, a4);
  quasar::SpeechRequestResultData::appendAA(a1, a2, a3, a4);
}

void quasar::SpeechRequestResultData::addDumpAA(uint64_t a1, long long *a2, char a3, double a4)
{
  double v7 = a4;
  quasar::SpeechRequestResultData::addDump(a1, a2, a4);
  quasar::SpeechRequestResultData::addAA(a1, a2, &v7, a3);
}

void quasar::SpeechRequestResultData::storeClientConfusionNetwork(uint64_t a1, uint64_t *a2)
{
  int v4 = (std::mutex *)(a1 + 192);
  std::mutex::lock((std::mutex *)(a1 + 192));
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  double v7 = *(std::__shared_weak_count **)(a1 + 336);
  *(void *)(a1 + 328) = v6;
  *(void *)(a1 + 336) = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::mutex::unlock(v4);
}

void quasar::SpeechRequestResultData::storeServerConfusionNetwork(uint64_t a1, uint64_t *a2)
{
  int v4 = (std::mutex *)(a1 + 192);
  std::mutex::lock((std::mutex *)(a1 + 192));
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  double v7 = *(std::__shared_weak_count **)(a1 + 352);
  *(void *)(a1 + 344) = v6;
  *(void *)(a1 + 35std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::mutex::unlock(v4);
}

void quasar::SpeechRequestResultData::storePhoneticMatchResult(std::mutex *this, const quasar::PhoneticMatchResult *a2)
{
  int v4 = this + 3;
  std::mutex::lock(this + 3);
  uint64_t v5 = *(void *)&this[2].__m_.__opaque[32];
  uint64_t v6 = *(void *)&this[2].__m_.__opaque[40];
  double v7 = (uint64_t *)&this[2].__m_.__opaque[32];
  if (v5 != v6)
  {
    while (*(float *)(v5 + 12) > *((float *)a2 + 3))
    {
      v5 += 72;
      if (v5 == v6)
      {
        uint64_t v5 = v6;
        break;
      }
    }
  }
  std::vector<quasar::PhoneticMatchResult>::insert(v7, v5, (unint64_t)a2);
  std::mutex::unlock(v4);
}

void sub_1B1C6CA4C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_OWORD *std::vector<quasar::PhoneticMatchResult>::insert(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  int v4 = (_OWORD *)a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a2 - *a1) >> 3);
  unint64_t v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = v11;
  if (v6 >= v11)
  {
    unint64_t v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v14 > 0x38E38E38E38E38ELL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = 0x8E38E38E38E38E39 * ((uint64_t)(v10 - v7) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x1C71C71C71C71C7) {
      unint64_t v16 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v16 = v14;
    }
    uint64_t v23 = v9;
    if (v16) {
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>(v9, v16);
    }
    else {
      uint64_t v17 = 0;
    }
    float v19 = v17;
    unint64_t v20 = &v17[72 * v8];
    float32x2_t v21 = v20;
    int v22 = &v17[72 * v16];
    std::__split_buffer<quasar::PhoneticMatchResult>::push_back[abi:ne180100](&v19, a3);
    int v4 = (_OWORD *)std::vector<quasar::PhoneticMatchResult>::__swap_out_circular_buffer(a1, &v19, (uint64_t)v4);
    std::__split_buffer<quasar::PhoneticMatchResult>::~__split_buffer(&v19);
  }
  else if (a2 == v6)
  {
    std::allocator<quasar::PhoneticMatchResult>::construct[abi:ne180100]<quasar::PhoneticMatchResult,quasar::PhoneticMatchResult const&>(v9, a2, a3);
    a1[1] = (uint64_t)v4 + 72;
  }
  else
  {
    std::vector<quasar::PhoneticMatchResult>::__move_range((uint64_t)a1, a2, v6, a2 + 72);
    if ((unint64_t)v4 <= a3) {
      a3 += 72 * (a1[1] > a3);
    }
    *int v4 = *(_OWORD *)a3;
    if (v4 != (_OWORD *)a3) {
      std::vector<quasar::PhoneticMatchAlignmentSpan>::__assign_with_size[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>(v7 + 72 * v8 + 16, *(uint64_t **)(a3 + 16), *(uint64_t **)(a3 + 24), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 3));
    }
    unint64_t v12 = v7 + 72 * v8;
    std::string::operator=((std::string *)(v12 + 40), (const std::string *)(a3 + 40));
    int v13 = *(_DWORD *)(a3 + 67);
    *(_DWORD *)(v12 + 64) = *(_DWORD *)(a3 + 64);
    *(_DWORD *)(v12 + 67) = v13;
  }
  return v4;
}

void sub_1B1C6CC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v11 + 8) = v10;
  _Unwind_Resume(exception_object);
}

void quasar::SpeechRequestResultData::storePhoneticMatchDecoderStats(uint64_t a1, long long *a2, std::string::value_type a3, std::string::value_type a4, std::string::value_type a5, float a6, float a7)
{
  unint64_t v14 = (std::mutex *)(a1 + 192);
  std::mutex::lock((std::mutex *)(a1 + 192));
  quasar::PhoneticMatchDecoderStat::PhoneticMatchDecoderStat(&__p, a2, a3, a4, a5, a6, a7);
  std::vector<quasar::PhoneticMatchDecoderStat>::push_back[abi:ne180100]((uint64_t *)(a1 + 144), (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::mutex::unlock(v14);
}

void sub_1B1C6CD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::PhoneticMatchDecoderStat>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x666666666666666) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x333333333333333) {
      unint64_t v14 = 0x666666666666666;
    }
    else {
      unint64_t v14 = v12;
    }
    v19[4] = result;
    if (v14) {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(result, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    unint64_t v16 = &v15[40 * v11];
    v19[0] = v15;
    v19[1] = v16;
    uint64_t v19[3] = &v15[40 * v14];
    long long v17 = *a2;
    *((void *)v16 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v16 = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
    *(void *)a2 = 0;
    uint64_t v18 = *((void *)a2 + 3);
    *((_DWORD *)v16 + 8) = *((_DWORD *)a2 + 8);
    *((void *)v16 + 3) = v18;
    void v19[2] = v16 + 40;
    std::vector<quasar::PhoneticMatchDecoderStat>::__swap_out_circular_buffer(a1, v19);
    uint64_t v10 = a1[1];
    uint64_t result = std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)v19);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
    *(void *)a2 = 0;
    uint64_t v9 = *((void *)a2 + 3);
    *(_DWORD *)(v7 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *((_DWORD *)a2 + 8);
    *(void *)(v7 + ++*(_DWORD *)(result + 24) = v9;
    uint64_t v10 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v10;
  return result;
}

void sub_1B1C6CE80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::SpeechRequestResultData::getAALogData(uint64_t a1, uint64_t **a2, uint64_t **a3, void *a4, void *a5)
{
  uint64_t v10 = (std::mutex *)(a1 + 192);
  std::mutex::lock((std::mutex *)(a1 + 192));
  unint64_t v11 = *(void **)(a1 + 256);
  if (v11 != (void *)(a1 + 264))
  {
    do
    {
      uint64_t v12 = v11[7];
      float v26 = (long long *)(v11 + 4);
      std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (const void **)v11 + 4, (uint64_t)&std::piecewise_construct, &v26)[7] = v12;
      unint64_t v13 = (void *)v11[1];
      if (v13)
      {
        do
        {
          unint64_t v14 = v13;
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          unint64_t v14 = (void *)v11[2];
          BOOL v15 = *v14 == (void)v11;
          unint64_t v11 = v14;
        }
        while (!v15);
      }
      unint64_t v11 = v14;
    }
    while (v14 != (void *)(a1 + 264));
  }
  unint64_t v16 = *(void **)(a1 + 280);
  if (v16 != (void *)(a1 + 288))
  {
    do
    {
      float v26 = (long long *)(v16 + 4);
      long long v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (const void **)v16 + 4, (uint64_t)&std::piecewise_construct, &v26);
      std::string::operator=((std::string *)(v17 + 7), (const std::string *)(v16 + 7));
      uint64_t v18 = (void *)v16[1];
      if (v18)
      {
        do
        {
          float v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          float v19 = (void *)v16[2];
          BOOL v15 = *v19 == (void)v16;
          unint64_t v16 = v19;
        }
        while (!v15);
      }
      unint64_t v16 = v19;
    }
    while (v19 != (void *)(a1 + 288));
  }
  uint64_t v21 = *(void *)(a1 + 328);
  uint64_t v20 = *(void *)(a1 + 336);
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  int v22 = (std::__shared_weak_count *)a4[1];
  *a4 = v21;
  a4[1] = v20;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  uint64_t v24 = *(void *)(a1 + 344);
  uint64_t v23 = *(void *)(a1 + 352);
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v25 = (std::__shared_weak_count *)a5[1];
  *a5 = v24;
  a5[1] = v23;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  std::mutex::unlock(v10);
}

void sub_1B1C6D03C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::SpeechRequestResultData::getDumpData(std::mutex *this@<X0>, std::vector<std::pair<std::string, std::string>> *a2@<X8>)
{
  int v4 = this + 3;
  std::mutex::lock(this + 3);
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  unint64_t v5 = *(long long **)&this[4].__m_.__opaque[40];
  unint64_t v6 = &this[4].__m_.__opaque[48];
  if (v5 != (long long *)v6)
  {
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(&v10, v5 + 2, (long long *)((char *)v5 + 56));
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](a2, (long long *)&v10);
      if (v12 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v10.__r_.__value_.__l.__data_);
      }
      unint64_t v7 = (char *)*((void *)v5 + 1);
      if (v7)
      {
        do
        {
          long long v8 = v7;
          unint64_t v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (char *)*((void *)v5 + 2);
          BOOL v9 = *(void *)v8 == (void)v5;
          unint64_t v5 = (long long *)v8;
        }
        while (!v9);
      }
      unint64_t v5 = (long long *)v8;
    }
    while (v8 != v6);
  }
  std::mutex::unlock(v4);
}

void sub_1B1C6D128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a9);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void quasar::SpeechRequestResultData::addUttInfo(uint64_t a1, long long *a2)
{
  int v4 = (std::mutex *)(a1 + 192);
  std::mutex::lock((std::mutex *)(a1 + 192));
  std::vector<std::shared_ptr<quasar::UttInfo>>::push_back[abi:ne180100]((uint64_t *)(a1 + 360), a2);
  std::mutex::unlock(v4);
}

void sub_1B1C6D1B0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<quasar::UttInfo>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, v13);
    BOOL v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    uint64_t v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)BOOL v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<quasar::UttInfo>>::__swap_out_circular_buffer(a1, v18);
    BOOL v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v18);
  }
  else
  {
    *unint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    BOOL v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1B1C6D2CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void quasar::SpeechRequestResultData::getUttInfos(std::mutex *this@<X0>, void *a2@<X8>)
{
  int v4 = this + 3;
  std::mutex::lock(this + 3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<std::shared_ptr<quasar::UttInfo>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::UttInfo>*,std::shared_ptr<quasar::UttInfo>*>(a2, *(void **)&this[5].__m_.__opaque[32], *(void **)&this[5].__m_.__opaque[40], (uint64_t)(*(void *)&this[5].__m_.__opaque[40] - *(void *)&this[5].__m_.__opaque[32]) >> 4);
  std::mutex::unlock(v4);
}

void sub_1B1C6D348(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

std::string *quasar::PhoneticMatchDecoderStat::PhoneticMatchDecoderStat(std::string *this, long long *a2, std::string::value_type a3, std::string::value_type a4, std::string::value_type a5, float a6, float a7)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v13 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v13;
  }
  this[1].__r_.__value_.__s.__data_[0] = a3;
  this[1].__r_.__value_.__s.__data_[1] = a4;
  this[1].__r_.__value_.__s.__data_[2] = a5;
  *((float *)this[1].__r_.__value_.__r.__words + 1) = a6;
  *(float *)&this[1].__r_.__value_.__r.__words[1] = a7;
  return this;
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  unint64_t v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1B1C6D45C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::PhoneticMatchResult>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(void *)(v8 + ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v8 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
      *(void *)(v8 + 16) = 0;
      *(_OWORD *)(v8 + 16) = *(_OWORD *)(v9 + 16);
      *(void *)(v8 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(void *)(v9 + 32);
      *(void *)(v9 + 16) = 0;
      *(void *)(v9 + ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v9 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
      long long v10 = *(_OWORD *)(v9 + 40);
      *(void *)(v8 + 56) = *(void *)(v9 + 56);
      *(_OWORD *)(v8 + 40) = v10;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(void *)(v9 + 40) = 0;
      int v11 = *(_DWORD *)(v9 + 64);
      *(_DWORD *)(v8 + 67) = *(_DWORD *)(v9 + 67);
      *(_DWORD *)(v8 + 64) = v11;
      v8 += 72;
      v9 += 72;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *>((uint64_t)&v13, a2, v7, v6);
}

void std::__split_buffer<quasar::PhoneticMatchResult>::push_back[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  if (v4 == a1[3])
  {
    unint64_t v5 = a1[1];
    if (v5 <= *a1)
    {
      if (v4 == *a1) {
        unint64_t v10 = 1;
      }
      else {
        unint64_t v10 = 0x1C71C71C71C71C72 * ((v4 - *a1) >> 3);
      }
      unint64_t v11 = v10 >> 2;
      uint64_t v12 = a1[4];
      uint64_t v27 = a1[4];
      char v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>(v12, v10);
      BOOL v15 = &v13[72 * v11];
      unint64_t v16 = a1[1];
      unint64_t v17 = a1[2] - v16;
      if (v17)
      {
        uint64_t v18 = &v15[v17];
        float v19 = &v13[72 * v11];
        do
        {
          *(_OWORD *)float v19 = *(_OWORD *)v16;
          *((void *)v19 + 3) = 0;
          *((void *)v19 + 4) = 0;
          *((void *)v19 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
          *((_OWORD *)v19 + 1) = *(_OWORD *)(v16 + 16);
          *((void *)v19 + 4) = *(void *)(v16 + 32);
          *(void *)(v16 + 16) = 0;
          *(void *)(v16 + ++*(_DWORD *)(result + 24) = 0;
          *(void *)(v16 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
          long long v20 = *(_OWORD *)(v16 + 40);
          *((void *)v19 + 7) = *(void *)(v16 + 56);
          *(_OWORD *)(v19 + 40) = v20;
          *(void *)(v16 + 48) = 0;
          *(void *)(v16 + 56) = 0;
          *(void *)(v16 + 40) = 0;
          int v21 = *(_DWORD *)(v16 + 64);
          *(_DWORD *)(v19 + 67) = *(_DWORD *)(v16 + 67);
          *((_DWORD *)v19 + 16) = v21;
          v19 += 72;
          v16 += 72;
        }
        while (v19 != v18);
        int64x2_t v22 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        int64x2_t v22 = vdupq_n_s64(v16);
        uint64_t v18 = &v13[72 * v11];
      }
      uint64_t v24 = (void *)*a1;
      *a1 = v13;
      a1[1] = v15;
      int64x2_t v25 = v22;
      uint64_t v23 = a1[3];
      a1[2] = v18;
      a1[3] = &v13[72 * v14];
      uint64_t v26 = v23;
      std::__split_buffer<quasar::PhoneticMatchResult>::~__split_buffer(&v24);
      uint64_t v4 = a1[2];
    }
    else
    {
      int64_t v6 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 3);
      if (v6 >= -1) {
        uint64_t v7 = v6 + 1;
      }
      else {
        uint64_t v7 = v6 + 2;
      }
      uint64_t v8 = -9 * (v7 >> 1);
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *>((uint64_t)&v24, v5, v4, v5 - 72 * (v7 >> 1));
      uint64_t v4 = v9;
      a1[1] += 8 * v8;
      a1[2] = v9;
    }
  }
  std::allocator<quasar::PhoneticMatchResult>::construct[abi:ne180100]<quasar::PhoneticMatchResult,quasar::PhoneticMatchResult const&>(a1[4], v4, a2);
  a1[2] += 72;
}

uint64_t std::vector<quasar::PhoneticMatchResult>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PhoneticMatchResult>,std::reverse_iterator<quasar::PhoneticMatchResult*>,std::reverse_iterator<quasar::PhoneticMatchResult*>,std::reverse_iterator<quasar::PhoneticMatchResult*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PhoneticMatchResult>,quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*>(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void std::allocator<quasar::PhoneticMatchResult>::construct[abi:ne180100]<quasar::PhoneticMatchResult,quasar::PhoneticMatchResult const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a2 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__init_with_size[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>((void *)(a2 + 16), *(uint64_t **)(a3 + 16), *(uint64_t **)(a3 + 24), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 3));
  unint64_t v5 = (std::string *)(a2 + 40);
  if (*(char *)(a3 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 40), *(void *)(a3 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 40);
    *(void *)(a2 + 56) = *(void *)(a3 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  int v7 = *(_DWORD *)(a3 + 64);
  *(_DWORD *)(a2 + 67) = *(_DWORD *)(a3 + 67);
  *(_DWORD *)(a2 + 64) = v7;
}

void sub_1B1C6D828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::vector<quasar::PhoneticMatchAlignmentSpan>::__init_with_size[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<quasar::TranslationToken>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PhoneticMatchAlignmentSpan>,quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1C6D8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PhoneticMatchAlignmentSpan>,quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  float32x2_t v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      std::allocator<quasar::PhoneticMatchAlignmentSpan>::construct[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan,quasar::PhoneticMatchAlignmentSpan&>(a1, v4, v6);
      v6 += 9;
      uint64_t v4 = v12 + 9;
      v12 += 9;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchAlignmentSpan>,quasar::PhoneticMatchAlignmentSpan*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B1C6D960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::allocator<quasar::PhoneticMatchAlignmentSpan>::construct[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan,quasar::PhoneticMatchAlignmentSpan&>(uint64_t a1, void *a2, uint64_t *a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a2, *a3, a3[1], 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5));
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a2 + 3, a3[3], a3[4], 0x6DB6DB6DB6DB6DB7 * ((a3[4] - a3[3]) >> 5));
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  return std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a2 + 6, a3[6], a3[7], 0x6DB6DB6DB6DB6DB7 * ((a3[7] - a3[6]) >> 5));
}

void sub_1B1C6DA1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchAlignmentSpan>,quasar::PhoneticMatchAlignmentSpan*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchAlignmentSpan>,quasar::PhoneticMatchAlignmentSpan*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchAlignmentSpan>,quasar::PhoneticMatchAlignmentSpan*>::operator()[abi:ne180100](uint64_t *a1)
{
  int v2 = (void ***)a1[1];
  uint64_t v1 = (void ***)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 9;
      std::allocator<quasar::PhoneticMatchAlignmentSpan>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = a4 + v7;
      *(_OWORD *)(a4 + v7 - 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(_OWORD *)(a3 + v7 - 72);
      std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)(a4 + v7 - 56));
      *(_OWORD *)(v9 - 56) = *(_OWORD *)(a3 + v7 - 56);
      *(void *)(v9 - 40) = *(void *)(a3 + v7 - 40);
      *(void *)(v8 - 56) = 0;
      *(void *)(v8 - 48) = 0;
      *(void *)(v8 - 40) = 0;
      char v10 = (void **)(a4 + v7 - 32);
      if (*(char *)(a4 + v7 - 9) < 0) {
        operator delete(*v10);
      }
      long long v11 = *(_OWORD *)(v8 - 32);
      *(void *)(v9 - 16) = *(void *)(v8 - 16);
      *(_OWORD *)char v10 = v11;
      *(unsigned char *)(v8 - 9) = 0;
      *(unsigned char *)(v8 - 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
      int v12 = *(_DWORD *)(v8 - 8);
      *(_DWORD *)(v9 - 5) = *(_DWORD *)(v8 - 5);
      *(_DWORD *)(v9 - 8) = v12;
      v7 -= 72;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

void std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate(void ***a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 9;
        std::allocator<quasar::PhoneticMatchAlignmentSpan>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<quasar::PhoneticMatchAlignmentSpan>::__assign_with_size[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void ***)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)a1);
    if (a4 > 0x38E38E38E38E38ELL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x1C71C71C71C71C7) {
      unint64_t v11 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<quasar::TranslationToken>::__vallocate[abi:ne180100]((void *)a1, v11);
    matched = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PhoneticMatchAlignmentSpan>,quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    char v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan *,quasar::PhoneticMatchAlignmentSpan *,quasar::PhoneticMatchAlignmentSpan *>((uint64_t)&v17, a2, v13, (uint64_t)v9);
    matched = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PhoneticMatchAlignmentSpan>,quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = matched;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan *,quasar::PhoneticMatchAlignmentSpan *,quasar::PhoneticMatchAlignmentSpan *>((uint64_t)&v18, a2, a3, (uint64_t)v9);
  BOOL v15 = v14;
  unint64_t v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 9;
      std::allocator<quasar::PhoneticMatchAlignmentSpan>::destroy[abi:ne180100](v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B1C6DDAC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1C6DDB4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan *,quasar::PhoneticMatchAlignmentSpan *,quasar::PhoneticMatchAlignmentSpan *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != (uint64_t *)a4)
      {
        std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a4, *v5, v5[1], 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 5));
        std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a4 + 24, v5[3], v5[4], 0x6DB6DB6DB6DB6DB7 * ((v5[4] - v5[3]) >> 5));
        std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a4 + 48, v5[6], v5[7], 0x6DB6DB6DB6DB6DB7 * ((v5[7] - v5[6]) >> 5));
      }
      v5 += 9;
      a4 += 72;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)a4 = *(_OWORD *)v5;
      std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)(a4 + 16));
      *(_OWORD *)(a4 + 16) = *(_OWORD *)(v5 + 16);
      *(void *)(a4 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(void *)(v5 + 32);
      *(void *)(v5 + 16) = 0;
      *(void *)(v5 + ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v5 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
      uint64_t v7 = (void **)(a4 + 40);
      if (*(char *)(a4 + 63) < 0) {
        operator delete(*v7);
      }
      long long v8 = *(_OWORD *)(v5 + 40);
      *(void *)(a4 + 56) = *(void *)(v5 + 56);
      *(_OWORD *)uint64_t v7 = v8;
      *(unsigned char *)(v5 + 63) = 0;
      *(unsigned char *)(v5 + 40) = 0;
      int v9 = *(_DWORD *)(v5 + 64);
      *(_DWORD *)(a4 + 67) = *(_DWORD *)(v5 + 67);
      *(_DWORD *)(a4 + 64) = v9;
      a4 += 72;
      v5 += 72;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PhoneticMatchResult>,std::reverse_iterator<quasar::PhoneticMatchResult*>,std::reverse_iterator<quasar::PhoneticMatchResult*>,std::reverse_iterator<quasar::PhoneticMatchResult*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(_OWORD *)(a3 - 72);
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 56) = 0;
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 - 56);
      *(void *)(v7 - 40) = *(void *)(a3 - 40);
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 40) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v7 - 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v8;
      *(void *)(a3 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
      int v9 = *(_DWORD *)(a3 - 8);
      *(_DWORD *)(v7 - 5) = *(_DWORD *)(a3 - 5);
      *(_DWORD *)(v7 - 8) = v9;
      uint64_t v7 = *((void *)&v15 + 1) - 72;
      *((void *)&v15 + 1) -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchResult>,std::reverse_iterator<quasar::PhoneticMatchResult*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PhoneticMatchResult>,quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v10 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
      *(void *)(v4 + ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v4 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
      *(void *)(v4 + 16) = 0;
      *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 16);
      *(void *)(v4 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(void *)(a2 + 32);
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + ++*(_DWORD *)(result + 24) = 0;
      *(void *)(a2 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
      long long v5 = *(_OWORD *)(a2 + 40);
      *(void *)(v4 + 56) = *(void *)(a2 + 56);
      *(_OWORD *)(v4 + 40) = v5;
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 56) = 0;
      *(void *)(a2 + 40) = 0;
      int v6 = *(_DWORD *)(a2 + 64);
      *(_DWORD *)(v4 + 67) = *(_DWORD *)(a2 + 67);
      *(_DWORD *)(v4 + 64) = v6;
      v4 += 72;
      a2 += 72;
    }
    while (a2 != a3);
    uint64_t v11 = v4;
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchResult>,quasar::PhoneticMatchResult*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchResult>,std::reverse_iterator<quasar::PhoneticMatchResult*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchResult>,std::reverse_iterator<quasar::PhoneticMatchResult*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchResult>,std::reverse_iterator<quasar::PhoneticMatchResult*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::PhoneticMatchResult>::destroy[abi:ne180100](v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchResult>,quasar::PhoneticMatchResult*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchResult>,quasar::PhoneticMatchResult*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchResult>,quasar::PhoneticMatchResult*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 72;
      std::allocator<quasar::PhoneticMatchResult>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void **std::__split_buffer<quasar::PhoneticMatchResult>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::PhoneticMatchResult>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 72;
    std::allocator<quasar::PhoneticMatchResult>::destroy[abi:ne180100](v4, i - 72);
  }
}

uint64_t std::vector<quasar::PhoneticMatchDecoderStat>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PhoneticMatchDecoderStat>,std::reverse_iterator<quasar::PhoneticMatchDecoderStat*>,std::reverse_iterator<quasar::PhoneticMatchDecoderStat*>,std::reverse_iterator<quasar::PhoneticMatchDecoderStat*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PhoneticMatchDecoderStat>,std::reverse_iterator<quasar::PhoneticMatchDecoderStat*>,std::reverse_iterator<quasar::PhoneticMatchDecoderStat*>,std::reverse_iterator<quasar::PhoneticMatchDecoderStat*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = *(void *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v8;
      *(void *)(a3 - 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
      *(void *)(a3 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(a3 - 40) = 0;
      uint64_t v9 = *(void *)(a3 - 16);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 - 8);
      *(void *)(v7 - 16) = v9;
      uint64_t v7 = *((void *)&v15 + 1) - 40;
      *((void *)&v15 + 1) -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchDecoderStat>,std::reverse_iterator<quasar::PhoneticMatchDecoderStat*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchDecoderStat>,std::reverse_iterator<quasar::PhoneticMatchDecoderStat*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchDecoderStat>,std::reverse_iterator<quasar::PhoneticMatchDecoderStat*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchDecoderStat>,std::reverse_iterator<quasar::PhoneticMatchDecoderStat*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 40;
  }
}

uint64_t std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<quasar::PhoneticMatchDecoderStat>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 5;
      *(void *)(a1 + 16) = v2 - 5;
      if (*((char *)v2 - 17) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::vector<std::shared_ptr<quasar::UttInfo>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::UttInfo>>,std::reverse_iterator<std::shared_ptr<quasar::UttInfo>*>,std::reverse_iterator<std::shared_ptr<quasar::UttInfo>*>,std::reverse_iterator<std::shared_ptr<quasar::UttInfo>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::UttInfo>>,std::reverse_iterator<std::shared_ptr<quasar::UttInfo>*>,std::reverse_iterator<std::shared_ptr<quasar::UttInfo>*>,std::reverse_iterator<std::shared_ptr<quasar::UttInfo>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::UttInfo>>,std::reverse_iterator<std::shared_ptr<quasar::UttInfo>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::UttInfo>>,std::reverse_iterator<std::shared_ptr<quasar::UttInfo>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::vector<std::shared_ptr<quasar::UttInfo>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::UttInfo>*,std::shared_ptr<quasar::UttInfo>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::UttInfo>>,std::shared_ptr<quasar::UttInfo>*,std::shared_ptr<quasar::UttInfo>*,std::shared_ptr<quasar::UttInfo>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1C6E640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::UttInfo>>,std::shared_ptr<quasar::UttInfo>*,std::shared_ptr<quasar::UttInfo>*,std::shared_ptr<quasar::UttInfo>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::UttInfo>>,std::shared_ptr<quasar::UttInfo>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::UttInfo>>,std::shared_ptr<quasar::UttInfo>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void quasar::PhonetisaurusP2WP::PhonetisaurusP2WP(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = a2[1];
  v17[0] = *a2;
  v17[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = a3[1];
  v16[0] = *a3;
  v16[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v15, ".");
  std::string::basic_string[abi:ne180100]<0>(&__p, " ");
  quasar::PhonetisaurusG2P::PhonetisaurusG2P(a1, v17, v16, a4, a5, a6, a7);
}

void sub_1B1C6E844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  uint64_t v26 = *(std::__shared_weak_count **)(v24 - 56);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(exception_object);
}

void quasar::PhonetisaurusP2WP::normalizeToken(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
}

void quasar::PhonetisaurusP2WP::convertPhonemePronsToAllProns()
{
  memset(v0, 0, sizeof(v0));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v0);
}

void quasar::PhonetisaurusP2WP::doG2P(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  quasar::PhonetisaurusG2P::doG2P(a1, a2, a3);
  uint64_t v4 = (_DWORD *)*a3;
  uint64_t v5 = (_DWORD *)a3[1];
  if ((_DWORD *)*a3 != v5)
  {
    do
    {
      *uint64_t v4 = 2;
      std::string::basic_string[abi:ne180100]<0>(v9, "~w10");
      std::string::basic_string[abi:ne180100]<0>(__p, "}");
      uint64_t v6 = (uint64_t)(v4 + 2);
      quasar::replaceAll(v6, (uint64_t)v9, (char *)__p);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
      if (v10 < 0) {
        operator delete(v9[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v9, "~w11");
      std::string::basic_string[abi:ne180100]<0>(__p, "_");
      quasar::replaceAll(v6, (uint64_t)v9, (char *)__p);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
      if (v10 < 0) {
        operator delete(v9[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v9, "~w13");
      std::string::basic_string[abi:ne180100]<0>(__p, " ");
      quasar::replaceAll(v6, (uint64_t)v9, (char *)__p);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
      if (v10 < 0) {
        operator delete(v9[0]);
      }
      uint64_t v4 = (_DWORD *)(v6 + 32);
    }
    while (v4 != v5);
  }
}

void sub_1B1C6EAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void quasar::PhonetisaurusP2WP::batchDoG2P()
{
  memset(v0, 0, sizeof(v0));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v0);
}

void quasar::PhonetisaurusP2WP::~PhonetisaurusP2WP(void **this)
{
  quasar::PhonetisaurusG2P::~PhonetisaurusG2P(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::PhonetisaurusP2WP::getG2PVersion(quasar::PhonetisaurusP2WP *this)
{
  return 4;
}

uint64_t quasar::PhonetisaurusG2P::getG2PModelInputSymbolTable(quasar::PhonetisaurusG2P *this)
{
  return *(void *)(*((void *)this + 46) + 240);
}

void quasar::PhonetisaurusG2P::~PhonetisaurusG2P(void **this)
{
  *this = &unk_1F0A53588;
  if (*((char *)this + 423) < 0) {
    operator delete(this[50]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[47];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[45];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  quasar::QuasarG2PBase::~QuasarG2PBase(this);
}

{
  uint64_t vars8;

  quasar::PhonetisaurusG2P::~PhonetisaurusG2P(this);
  JUMPOUT(0x1B3EA8670);
}

void sub_1B1C6ED44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1C6EDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B1C6F1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c57_ZTSNSt3__110shared_ptrIN6quasar20RecogAudioBufferBaseEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_40c57_ZTSNSt3__110shared_ptrIN6quasar20RecogAudioBufferBaseEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void sub_1B1C6F98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

void *std::shared_ptr<quasar::SyncSpeechRecognizer>::operator=[abi:ne180100]<quasar::SyncSpeechRecognizer,std::default_delete<quasar::SyncSpeechRecognizer>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<quasar::SyncSpeechRecognizer>::shared_ptr[abi:ne180100]<quasar::SyncSpeechRecognizer,std::default_delete<quasar::SyncSpeechRecognizer>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void sub_1B1C6FC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v39 - 65) < 0) {
    operator delete(*(void **)(v39 - 88));
  }

  _Unwind_Resume(a1);
}

void sub_1B1C6FE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v38 - 65) < 0) {
    operator delete(*(void **)(v38 - 88));
  }

  _Unwind_Resume(a1);
}

void sub_1B1C70344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  a25 = (void **)(v28 - 144);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a25);
  *(void *)(v28 - 144) = v28 - 120;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 144));

  _Unwind_Resume(a1);
}

void sub_1B1C70604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = (void **)&a14;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a12);

  _Unwind_Resume(a1);
}

void sub_1B1C707B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, std::__shared_weak_count *a13, char a14)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  a12 = (void **)&a14;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a12);

  _Unwind_Resume(a1);
}

void sub_1B1C7090C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  a12 = (void **)&a14;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<quasar::SyncSpeechRecognizer>::shared_ptr[abi:ne180100]<quasar::SyncSpeechRecognizer,std::default_delete<quasar::SyncSpeechRecognizer>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  void *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<quasar::SyncSpeechRecognizer  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::SyncSpeechRecognizer  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::SyncSpeechRecognizer  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void quasar::TextEmbedder::createTextEmbedder(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 != 1)
  {
    if (!a3) {
      operator new();
    }
    memset(v3, 0, sizeof(v3));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Unrecognized EuclidEncoderType:", 31);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v3);
  }
  operator new();
}

void sub_1B1C70C24(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40228402DALL);
  _Unwind_Resume(a1);
}

void quasar::TextEmbedder::TextEmbedder(uint64_t a1, std::string *a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A523F0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(unsigned char *)(a1 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(_DWORD *)(a1 + 11std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 1065353216;
  *(_DWORD *)(a1 + 128) = -1;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 120) = -1;
  *(_OWORD *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 1065353216;
  *(void *)(a1 + 184) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 200), " ");
  *(void *)(a1 + 2++*(_DWORD *)(result + 24) = 0;
  if (*(char *)(a3 + 23) >= 0) {
    size_t v6 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v6 = *(void *)(a3 + 8);
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v6 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*(char *)(a3 + 23) >= 0) {
      char v8 = (const void *)a3;
    }
    else {
      char v8 = *(const void **)a3;
    }
    memmove(p_p, v8, v6);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v6) = 46;
  quasar::SystemConfig::setPrefix(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  quasar::TextEmbedder::registerParams((quasar::TextEmbedder *)a1, (quasar::SystemConfig *)a2);
  quasar::SystemConfig::readPtree((uint64_t)a2, a3);
}

void sub_1B1C70DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v14 + 223) < 0) {
    operator delete(*v16);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v14 + 160);
  if (*(char *)(v14 + 159) < 0) {
    operator delete(*v17);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v15);
  if (*(char *)(v14 + 71) < 0) {
    operator delete(*(void **)(v14 + 48));
  }
  if (*(char *)(v14 + 47) < 0) {
    operator delete(*(void **)(v14 + 24));
  }
  float v19 = *(std::__shared_weak_count **)(v14 + 16);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(a1);
}

void quasar::TextEmbedder::registerParams(quasar::TextEmbedder *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Euclid model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 24, (uint64_t)__p, 1, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "string-id-mapping-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "String to Id mapping file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 48, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "byte-input");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, the model can take each value of byte from string as input. Otherwise, a string-id-mapping-file is required.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 72, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-input-length");
  std::string::basic_string[abi:ne180100]<0>(__p, "The length limit on the input substr. (Default = -1; enabled if >= 0)");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 120, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "accepted-chars-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Json array file with characters that Euclid model supports");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 136, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "blank-string");
  std::string::basic_string[abi:ne180100]<0>(__p, "For grapheme model only: At the end of preprocessing, empty text is replaced by this string (default is \" \").");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 200, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "pad-block-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "If > 0, pad the string to the closest multiple of padSize.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 224, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "pad-id");
  std::string::basic_string[abi:ne180100]<0>(__p, "The padding token ID used for padding.(Default = 0)");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 228, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1C71200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::TextEmbedder::init(quasar::TextEmbedder *this, quasar::SystemConfig *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  ModelLoaderPtr = (uint64_t *)quasar::SystemConfig::getModelLoaderPtr(a2);
  uint64_t v4 = *ModelLoaderPtr;
  char v5 = (std::__shared_weak_count *)ModelLoaderPtr[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  quasar::ModelLoader::readNeuralNetwork(v4, (uint64_t)this + 24, 1, 0, 0, &v14, &v16);
  long long v6 = v16;
  long long v16 = 0uLL;
  char v7 = (std::__shared_weak_count *)*((void *)this + 2);
  *(_OWORD *)((char *)this + 8) = v6;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    if (*((void *)&v16 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
    }
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (!*((void *)this + 1))
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v16);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Failed to load Euclid model: ", 29);
    int v10 = *((char *)this + 47);
    if (v10 >= 0) {
      uint64_t v11 = (char *)this + 24;
    }
    else {
      uint64_t v11 = (char *)*((void *)this + 3);
    }
    if (v10 >= 0) {
      uint64_t v12 = *((unsigned __int8 *)this + 47);
    }
    else {
      uint64_t v12 = *((void *)this + 4);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v16);
  }
  if (*((char *)this + 71) < 0)
  {
    if (*((void *)this + 7)) {
      goto LABEL_14;
    }
  }
  else if (*((unsigned char *)this + 71))
  {
    goto LABEL_14;
  }
  if (!*((unsigned char *)this + 72))
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Need string-id-mapping-file if model doesn't support byte inpute(byte-input = false)", 84);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v16);
  }
LABEL_14:
  if ((*((unsigned char *)this + 71) & 0x80) != 0) {
    uint64_t v8 = *((void *)this + 7);
  }
  else {
    uint64_t v8 = *((unsigned __int8 *)this + 71);
  }
  if (v8)
  {
    if (*((unsigned char *)this + 72))
    {
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v18 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"string-id-mapping-file and byte-input can not be enabled at the same time", 73);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v16);
    }
  }
  else if (*((unsigned char *)this + 72))
  {
    goto LABEL_26;
  }
  if ((*((unsigned char *)this + 71) & 0x80) != 0)
  {
    if (!*((void *)this + 7)) {
      goto LABEL_26;
    }
LABEL_25:
    quasar::PTree::PTree((quasar::PTree *)&v16);
    quasar::PTree::readJsonFromFile();
  }
  if (*((unsigned char *)this + 71)) {
    goto LABEL_25;
  }
LABEL_26:
  if (*((char *)this + 159) < 0)
  {
    if (!*((void *)this + 18)) {
      goto LABEL_32;
    }
  }
  else if (!*((unsigned char *)this + 159))
  {
    goto LABEL_32;
  }
  if (*((unsigned char *)this + 72))
  {
    quasar::PTree::PTree((quasar::PTree *)v13);
    quasar::PTree::readJsonFromFile();
  }
LABEL_32:
  *((_DWORD *)this + 31) = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)this + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = (*(uint64_t (**)(void))(**((void **)this + 1) + 48))(*((void *)this + 1));
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1B1C71740(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1C717BCLL);
}

void sub_1B1C71754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

void sub_1B1C71768(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1C71770(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void quasar::TextEmbedder::computeTextEmbeddingVector(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (unint64_t)(a2[1] - *a2) >> 2;
  int v7 = a1[56];
  if (v7 >= 1 && (int)v6 >= 1) {
    uint64_t v6 = ((v7 + (int)v6 - 1) / v7 * v7);
  }
  uint64_t v9 = a1[32];
  BOOL v10 = (int)v9 < 1 || (int)v6 <= (int)v9;
  if (v10 && (uint64_t v9 = v6, (int)v6 <= 0))
  {
    kaldi::CuVector<float>::Resize(a3, 0, 0);
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    long long v21 = &unk_1F0A517C0;
    kaldi::CuVector<float>::Resize((uint64_t)&v21, v9, 0);
    uint64_t v11 = *a2;
    uint64_t v12 = a2[1] - *a2;
    unint64_t v13 = (unint64_t)v12 >> 2;
    if ((int)v9 >= (int)((unint64_t)v12 >> 2)) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v9;
    }
    if ((int)v14 >= 1)
    {
      uint64_t v15 = 0;
      uint64_t v16 = v22;
      do
      {
        *(float *)(v16 + 4 * v15) = (float)*(int *)(v11 + 4 * v15);
        ++v15;
      }
      while (v14 != v15);
    }
    if ((int)v9 > (int)v13)
    {
      uint64_t v17 = v22;
      float v18 = (float)(int)a1[57];
      uint64_t v19 = (int)(v12 >> 2);
      int v20 = v9 - v13;
      do
      {
        *(float *)(v17 + 4 * v19++) = v18;
        --v20;
      }
      while (v20);
    }
    quasar::TextEmbedder::computeTextEmbeddingVector((uint64_t)a1, (uint64_t)&v21, a3);
    kaldi::CuVector<float>::~CuVector(&v21);
  }
}

void sub_1B1C7192C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::TextEmbedder::computeTextEmbeddingVector(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuVector<float>::Resize(a3, 0, 0);
  uint64_t v6 = *(unsigned int *)(a2 + 16);
  if (v6)
  {
    long long v14 = 0u;
    long long v13 = 0u;
    int32x2_t v12 = (int32x2_t)&unk_1F0A51768;
    char v15 = 0;
    long long v10 = 0u;
    long long v9 = 0u;
    int32x2_t v8 = (int32x2_t)&unk_1F0A51768;
    char v11 = 0;
    kaldi::CuMatrix<float>::Resize(&v12, 1, v6, 0, 0);
    kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)&v12, a2);
    quasar::TextEmbedder::computeTextEmbeddingMatrix(a1, (uint64_t)&v12, &v8);
    if (SHIDWORD(v9) >= 1)
    {
      v7[1] = v9;
      v7[0] = &unk_1F0A472D0;
      v7[2] = DWORD2(v9);
      void v7[3] = *((void *)&v10 + 1);
      kaldi::CuVector<float>::operator=(a3, (uint64_t)v7);
    }
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v8);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v12);
  }
}

void sub_1B1C71A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

void quasar::TextEmbedder::computeTextEmbeddingVector(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    (*(void (**)(void **__return_ptr))(*(void *)a1 + 24))(__p);
    quasar::TextEmbedder::computeTextEmbeddingVector(a1, (uint64_t *)__p, a3);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    kaldi::CuVector<float>::Resize(a3, 0, 0);
  }
}

void sub_1B1C71B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::TextEmbedder::computeTextEmbeddingMatrix(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  if (*(_DWORD *)(a2 + 20)) {
    BOOL v3 = *(_DWORD *)(a2 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    kaldi::CuMatrix<float>::Resize(a3, 0, 0, 0, 0);
  }
  else {
    (*(void (**)(void))(**(void **)(a1 + 8) + 96))();
  }
}

uint64_t quasar::TextEmbedder::getMaxInputLength(quasar::TextEmbedder *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t quasar::TextEmbedder::getEmbeddingDim(quasar::TextEmbedder *this)
{
  return *((unsigned int *)this + 31);
}

void quasar::GraphemeTextEmbedder::preprocessInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a3 + 23) < 0)
  {
    **(unsigned char **)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 23) = 0;
  }
  operator new();
}

void sub_1B1C71E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void std::basic_string<char32_t>::reserve(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __requested_capacity)
{
  if (__requested_capacity >= 0x3FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  LODWORD(v3) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v3 & 0x80000000) == 0)
  {
    if (__requested_capacity <= 4) {
      return;
    }
    std::basic_string<char32_t>::size_type v4 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::basic_string<char32_t>::size_type v5 = v4 <= __requested_capacity ? __requested_capacity : HIBYTE(this->__r_.__value_.__r.__words[2]);
    unint64_t v6 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 2;
    uint64_t v7 = v5 | 1;
    unint64_t v8 = v7 == 5 ? v6 : v7;
    if (v8 == 4) {
      return;
    }
LABEL_23:
    unint64_t v13 = v8 + 1;
    BOOL v14 = v8 < 5;
    if (v8 >= 5)
    {
      uint64_t v16 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this, v8 + 1);
      unint64_t v13 = v17;
      LODWORD(v3) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v3 & 0x80000000) != 0)
      {
        char v15 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
LABEL_30:
        std::basic_string<char32_t>::size_type size = this->__r_.__value_.__l.__size_;
        BOOL v14 = 1;
        goto LABEL_31;
      }
      char v15 = this;
    }
    else
    {
      char v15 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
      uint64_t v16 = this;
      if ((v3 & 0x80) != 0) {
        goto LABEL_30;
      }
    }
    std::basic_string<char32_t>::size_type size = v3;
LABEL_31:
    BOOL v19 = __CFADD__(size, 1);
    std::basic_string<char32_t>::size_type v20 = size + 1;
    if (!v19) {
      memmove(v16, v15, 4 * v20);
    }
    if (v14) {
      operator delete(v15);
    }
    if (v8 >= 5)
    {
      this->__r_.__value_.__l.__size_ = v4;
      this->__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      this->__r_.__value_.__r.__words[0] = (std::basic_string<char32_t>::size_type)v16;
    }
    else
    {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v4 & 0x7F;
    }
    return;
  }
  unint64_t v9 = this->__r_.__value_.__r.__words[2];
  std::basic_string<char32_t>::size_type v10 = (v9 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < __requested_capacity)
  {
    std::basic_string<char32_t>::size_type v4 = this->__r_.__value_.__l.__size_;
    if (v4 <= __requested_capacity) {
      std::basic_string<char32_t>::size_type v11 = __requested_capacity;
    }
    else {
      std::basic_string<char32_t>::size_type v11 = this->__r_.__value_.__l.__size_;
    }
    uint64_t v12 = (v11 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v11 | 1) != 5) {
      uint64_t v12 = v11 | 1;
    }
    unint64_t v8 = v11 >= 5 ? v12 : 4;
    if (v8 != v10)
    {
      unint64_t v3 = HIBYTE(v9);
      goto LABEL_23;
    }
  }
}

void sub_1B1C7203C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void std::basic_string<char32_t>::push_back(std::basic_string<char32_t> *this, std::basic_string<char32_t>::value_type __c)
{
  unint64_t v3 = this;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&this->__r_.__value_.__s + 23) != 4)
    {
      std::basic_string<char32_t>::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      *((unsigned char *)&this->__r_.__value_.__s + 23) = (*((unsigned char *)&this->__r_.__value_.__s + 23) + 1) & 0x7F;
      goto LABEL_8;
    }
    std::basic_string<char32_t>::size_type v4 = 4;
    goto LABEL_5;
  }
  std::basic_string<char32_t>::size_type size = this->__r_.__value_.__l.__size_;
  std::basic_string<char32_t>::size_type v4 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (size == v4)
  {
LABEL_5:
    std::basic_string<char32_t>::__grow_by(this, v4, 1uLL, v4, v4, 0, 0);
    std::basic_string<char32_t>::size_type size = v4;
  }
  v3->__r_.__value_.__l.__size_ = size + 1;
  unint64_t v3 = (std::basic_string<char32_t> *)v3->__r_.__value_.__r.__words[0];
LABEL_8:
  unint64_t v6 = (std::basic_string<char32_t>::value_type *)((char *)v3 + 4 * size);
  *unint64_t v6 = __c;
  v6[1] = 0;
}

std::basic_string<char32_t> *__cdecl std::basic_string<char32_t>::operator=(std::basic_string<char32_t> *this, const std::basic_string<char32_t> *__str)
{
  if (this != __str)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      std::basic_string<char32_t>::size_type size = __str->__r_.__value_.__l.__size_;
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        std::basic_string<char32_t>::size_type v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      }
      else
      {
        std::string __str = (const std::basic_string<char32_t> *)__str->__r_.__value_.__r.__words[0];
        std::basic_string<char32_t>::size_type v4 = size;
      }
      return std::basic_string<char32_t>::__assign_no_alias<false>(this, (const std::basic_string<char32_t>::value_type *)__str, v4);
    }
    else if ((*((unsigned char *)&__str->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      return std::basic_string<char32_t>::__assign_no_alias<true>(this, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v2 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v2;
    }
  }
  return this;
}

void quasar::GraphemeTextEmbedder::returnVectorOfInts(uint64_t a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  BOOL v4 = *((char *)a2 + 23) < 0;
  uint64_t v5 = *((unsigned __int8 *)a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = a2[1];
  }
  if (v5)
  {
    unint64_t v8 = 0;
    unint64_t v9 = (void *)(a1 + 80);
    do
    {
      if (*(unsigned char *)(a1 + 72))
      {
        if (v4) {
          std::basic_string<char32_t>::size_type v10 = (uint64_t *)*a2;
        }
        else {
          std::basic_string<char32_t>::size_type v10 = a2;
        }
        int v11 = *((unsigned __int8 *)v10 + v8);
        unint64_t v13 = a3[1];
        unint64_t v12 = (unint64_t)a3[2];
        if ((unint64_t)v13 >= v12)
        {
          uint64_t v22 = *a3;
          uint64_t v23 = (v13 - *a3) >> 2;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = v12 - (void)v22;
          if (v25 >> 1 > v24) {
            unint64_t v24 = v25 >> 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26)
          {
            long long v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v26);
            uint64_t v22 = *a3;
            unint64_t v13 = a3[1];
          }
          else
          {
            long long v27 = 0;
          }
          long long v28 = &v27[4 * v23];
          *(_DWORD *)long long v28 = v11;
          BOOL v14 = v28 + 4;
          while (v13 != v22)
          {
            int v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *((_DWORD *)v28 - 1) = v29;
            v28 -= 4;
          }
          *a3 = v28;
          a3[1] = v14;
          a3[2] = &v27[4 * v26];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v13 = v11;
          BOOL v14 = v13 + 4;
        }
        a3[1] = v14;
      }
      else if (*(void *)(a1 + 104))
      {
        if (v4) {
          char v15 = (uint64_t *)*a2;
        }
        else {
          char v15 = a2;
        }
        unsigned __int8 v16 = *((unsigned char *)v15 + v8);
        char v40 = 1;
        LOWORD(__p[0]) = v16;
        if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v9, (unsigned __int8 *)__p))
        {
          float v41 = __p;
          unint64_t v17 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v9, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v41);
          float v18 = v17;
          std::basic_string<char32_t>::size_type v20 = a3[1];
          unint64_t v19 = (unint64_t)a3[2];
          if ((unint64_t)v20 >= v19)
          {
            long long v31 = *a3;
            uint64_t v32 = (v20 - *a3) >> 2;
            unint64_t v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v34 = v19 - (void)v31;
            if (v34 >> 1 > v33) {
              unint64_t v33 = v34 >> 1;
            }
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v35 = v33;
            }
            if (v35)
            {
              __n128 v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v35);
              long long v31 = *a3;
              std::basic_string<char32_t>::size_type v20 = a3[1];
            }
            else
            {
              __n128 v36 = 0;
            }
            uint64_t v37 = &v36[4 * v32];
            *(_DWORD *)uint64_t v37 = *((_DWORD *)v18 + 10);
            long long v21 = v37 + 4;
            while (v20 != v31)
            {
              int v38 = *((_DWORD *)v20 - 1);
              v20 -= 4;
              *((_DWORD *)v37 - 1) = v38;
              v37 -= 4;
            }
            *a3 = v37;
            a3[1] = v21;
            a3[2] = &v36[4 * v35];
            if (v31) {
              operator delete(v31);
            }
          }
          else
          {
            *(_DWORD *)std::basic_string<char32_t>::size_type v20 = *((_DWORD *)v17 + 10);
            long long v21 = v20 + 4;
          }
          a3[1] = v21;
        }
        if (v40 < 0) {
          operator delete(__p[0]);
        }
      }
      ++v8;
      BOOL v4 = *((char *)a2 + 23) < 0;
      unint64_t v30 = *((unsigned __int8 *)a2 + 23);
      if ((v30 & 0x80u) != 0) {
        unint64_t v30 = a2[1];
      }
    }
    while (v30 > v8);
  }
}

void sub_1B1C723F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  unint64_t v17 = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::PhonemeTextEmbedder::init(quasar::PhonemeTextEmbedder *this, quasar::SystemConfig *a2)
{
  quasar::TextEmbedder::init(this, a2);
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 71)) {
      return;
    }
LABEL_5:
    memset(v3, 0, sizeof(v3));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Missing string-id-mapping-file for PhonemeTextEmbedder");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v3);
  }
  if (!*((void *)this + 7)) {
    goto LABEL_5;
  }
}

void quasar::PhonemeTextEmbedder::preprocessInput(uint64_t a1, const std::string *a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) < 0)
  {
    **(unsigned char **)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 23) = 0;
  }
  memset(&v11, 0, sizeof(v11));
  kaldi::SplitStringToVector(a2, " ", 1, (uint64_t)&v11);
  unint64_t v5 = *(unsigned int *)(a1 + 120);
  if ((v5 & 0x80000000) == 0)
  {
    std::vector<std::string>::pointer begin = v11.__begin_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v11.__end_ - (char *)v11.__begin_) >> 3) > v5)
    {
      if (v11.__end_ == v11.__begin_)
      {
        int v9 = 0;
      }
      else
      {
        uint64_t v7 = 0;
        unint64_t v8 = 0;
        int v9 = 0;
        do
        {
          if (v9 >= *(_DWORD *)(a1 + 120)) {
            break;
          }
          if (*(void *)(a1 + 104))
          {
            std::basic_string<char32_t>::size_type v10 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 80), (unsigned __int8 *)&begin[v7]);
            std::vector<std::string>::pointer begin = v11.__begin_;
            if (v10)
            {
              std::string::operator=(&v11.__begin_[v9++], &v11.__begin_[v7]);
              std::vector<std::string>::pointer begin = v11.__begin_;
            }
          }
          ++v8;
          ++v7;
        }
        while (0xAAAAAAAAAAAAAAABLL * (((char *)v11.__end_ - (char *)begin) >> 3) > v8);
      }
      std::vector<std::string>::resize(&v11, v9);
    }
  }
  kaldi::JoinVectorToString((uint64_t *)&v11, " ", 1, (long long *)a3);
  unint64_t v12 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
}

void sub_1B1C72638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void quasar::PhonemeTextEmbedder::returnVectorOfInts(uint64_t a1@<X0>, const std::string *a2@<X1>, char **a3@<X8>)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  kaldi::SplitStringToVector(a2, " ", 1, (uint64_t)&v21);
  uint64_t v5 = v21;
  if (v22 != v21)
  {
    unint64_t v6 = 0;
    do
    {
      if (*(void *)(a1 + 104))
      {
        uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 80), (unsigned __int8 *)(v5 + 24 * v6));
        uint64_t v5 = v21;
        if (v7)
        {
          unint64_t v24 = (unsigned __int8 *)(v21 + 24 * v6);
          unint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 80, v24, (uint64_t)&std::piecewise_construct, (long long **)&v24);
          int v9 = v8;
          std::vector<std::string> v11 = a3[1];
          unint64_t v10 = (unint64_t)a3[2];
          if ((unint64_t)v11 >= v10)
          {
            unint64_t v13 = *a3;
            uint64_t v14 = (v11 - *a3) >> 2;
            unint64_t v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v16 = v10 - (void)v13;
            if (v16 >> 1 > v15) {
              unint64_t v15 = v16 >> 1;
            }
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v17 = v15;
            }
            if (v17)
            {
              float v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v17);
              unint64_t v13 = *a3;
              std::vector<std::string> v11 = a3[1];
            }
            else
            {
              float v18 = 0;
            }
            unint64_t v19 = &v18[4 * v14];
            *(_DWORD *)unint64_t v19 = *((_DWORD *)v9 + 10);
            unint64_t v12 = v19 + 4;
            while (v11 != v13)
            {
              int v20 = *((_DWORD *)v11 - 1);
              v11 -= 4;
              *((_DWORD *)v19 - 1) = v20;
              v19 -= 4;
            }
            *a3 = v19;
            a3[1] = v12;
            a3[2] = &v18[4 * v17];
            if (v13) {
              operator delete(v13);
            }
          }
          else
          {
            *(_DWORD *)std::vector<std::string> v11 = *((_DWORD *)v8 + 10);
            unint64_t v12 = v11 + 4;
          }
          a3[1] = v12;
          uint64_t v5 = v21;
        }
      }
      ++v6;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v22 - v5) >> 3) > v6);
  }
  uint64_t v25 = (void **)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v25);
}

void sub_1B1C72824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  a14 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void quasar::GraphemeTextEmbedder::~GraphemeTextEmbedder(void **this)
{
  quasar::TextEmbedder::~TextEmbedder(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::PhonemeTextEmbedder::~PhonemeTextEmbedder(void **this)
{
  quasar::TextEmbedder::~TextEmbedder(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::TextEmbedder::~TextEmbedder(void **this)
{
  *this = &unk_1F0A523F0;
  if (*((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(this + 20));
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 10));
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  long long v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

std::basic_string<char32_t> *std::basic_string<char32_t>::__assign_no_alias<true>(std::basic_string<char32_t> *__dst, const std::basic_string<char32_t>::value_type *__src, std::basic_string<char32_t>::size_type __n_add)
{
  BOOL v5 = __n_add > 4;
  std::basic_string<char32_t>::size_type v6 = __n_add - 4;
  if (v5)
  {
    std::basic_string<char32_t>::__grow_by_and_replace(__dst, 4uLL, v6, *((unsigned char *)&__dst->__r_.__value_.__s + 23) & 0x7F, 0, *((unsigned char *)&__dst->__r_.__value_.__s + 23) & 0x7F, __n_add, __src);
  }
  else
  {
    *((unsigned char *)&__dst->__r_.__value_.__s + 23) = __n_add;
    if (__n_add) {
      memmove(__dst, __src, 4 * __n_add);
    }
    __dst->__r_.__value_.__s.__data_[__n_add] = 0;
  }
  return __dst;
}

std::basic_string<char32_t> *std::basic_string<char32_t>::__assign_no_alias<false>(std::basic_string<char32_t> *this, const std::basic_string<char32_t>::value_type *__src, std::basic_string<char32_t>::size_type __n_add)
{
  std::basic_string<char32_t>::size_type v5 = this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL;
  if (v5 <= __n_add)
  {
    std::basic_string<char32_t>::__grow_by_and_replace(this, v5 - 1, __n_add - v5 + 1, this->__r_.__value_.__l.__size_, 0, this->__r_.__value_.__l.__size_, __n_add, __src);
  }
  else
  {
    std::basic_string<char32_t>::size_type v6 = (void *)this->__r_.__value_.__r.__words[0];
    this->__r_.__value_.__l.__size_ = __n_add;
    if (__n_add) {
      memmove(v6, __src, 4 * __n_add);
    }
    *((_DWORD *)v6 + __n_add) = 0;
  }
  return this;
}

uint64_t quasar::OptionValueBase::enforceMinVersion(uint64_t this, const quasar::SystemConfig *a2)
{
  long long v2 = (void *)(this + 32);
  if (*(char *)(this + 55) < 0)
  {
    if (!*(void *)(this + 40)) {
      return this;
    }
    unint64_t v3 = (unsigned char *)*v2;
  }
  else
  {
    unint64_t v3 = (unsigned char *)(this + 32);
    if (!*(unsigned char *)(this + 55)) {
      return this;
    }
  }
  if (*v3 != 60) {
    return quasar::SystemConfig::enforceMinVersion((uint64_t)a2, *(_DWORD *)(this + 80), 0, (uint64_t)v2);
  }
  return this;
}

void quasar::OptionValueBase::setContextProvider(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v4 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v3;
  *(void *)(a1 + 96) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void quasar::getOptional<std::vector<std::string>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B1C72CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 - 56) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v9 - 56));
  _Unwind_Resume(a1);
}

void quasar::getOptional<quasar::PTree>(uint64_t a1, uint64_t a2)
{
}

void quasar::OptionsBase::update(void (***a1)(void **__return_ptr), uint64_t a2, uint64_t a3)
{
  (**a1)(&__p);
  std::basic_string<char32_t>::size_type v5 = __p;
  std::basic_string<char32_t>::size_type v6 = v8;
  if (__p != v8)
  {
    do
    {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v5 + 8))(*v5, a2, a3);
      ++v5;
    }
    while (v5 != v6);
    std::basic_string<char32_t>::size_type v5 = __p;
  }
  if (v5)
  {
    unint64_t v8 = v5;
    operator delete(v5);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "overrides");
  quasar::PTree::getChildOptional(a2, (uint64_t)&__p);
}

void sub_1B1C72EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OptionsBase::debugLog(void (***a1)(void **__return_ptr, void), uint64_t a2)
{
  if (quasar::gLogLevel >= 5)
  {
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v18 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
    int v4 = *(char *)(a2 + 23);
    if (v4 >= 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = *(void *)a2;
    }
    if (v4 >= 0) {
      uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v6 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, v5, v6);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v18);
  }
  (**a1)(&v16, a1);
  uint64_t v7 = v16;
  unint64_t v8 = v17;
  if (v16 != v17)
  {
    int v9 = quasar::gLogLevel;
    do
    {
      if (v9 >= 5)
      {
        uint64_t v10 = *v7;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        long long v18 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
        std::vector<std::string> v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"    ", 4);
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v10 + 16))(__p, v10);
        if ((v15 & 0x80u) == 0) {
          unint64_t v12 = __p;
        }
        else {
          unint64_t v12 = (void **)__p[0];
        }
        if ((v15 & 0x80u) == 0) {
          uint64_t v13 = v15;
        }
        else {
          uint64_t v13 = (uint64_t)__p[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
        if ((char)v15 < 0) {
          operator delete(__p[0]);
        }
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v18);
        int v9 = quasar::gLogLevel;
      }
      ++v7;
    }
    while (v7 != v8);
    uint64_t v7 = v16;
  }
  if (v7)
  {
    unint64_t v17 = v7;
    operator delete(v7);
  }
}

void sub_1B1C73100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, char a18)
{
}

void quasar::OptionsBase::enforceMinVersion(quasar::OptionsBase *this, const quasar::SystemConfig *a2)
{
  (**(void (***)(uint64_t *__return_ptr))this)(&ConfigFileVersion);
  int v4 = (void *)ConfigFileVersion;
  uint64_t v5 = v7;
  if ((void *)ConfigFileVersion != v7)
  {
    do
    {
      (**(void (***)(void, const quasar::SystemConfig *))*v4)(*v4, a2);
      ++v4;
    }
    while (v4 != v5);
    int v4 = (void *)ConfigFileVersion;
  }
  if (v4)
  {
    uint64_t v7 = v4;
    operator delete(v4);
  }
  if (*((_DWORD *)a2 + 384))
  {
    uint64_t ConfigFileVersion = quasar::SystemConfig::getConfigFileVersion(a2);
    *((_DWORD *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = kaldi::quasar::Vocab::VocabSize((kaldi::quasar::Vocab *)&ConfigFileVersion);
  }
}

void sub_1B1C7322C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ProcessingConnection::ProcessingConnection(uint64_t a1, uint64_t a2, long long *a3, long long *a4)
{
  *(void *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v6;
  }
  uint64_t v7 = (std::string *)(a1 + 32);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v8 = *a4;
    *(void *)(a1 + 48) = *((void *)a4 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return a1;
}

void sub_1B1C732D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingBlock::~ProcessingBlock(char **this)
{
  *this = (char *)&unk_1F0A53110;
  uint64_t v2 = (void **)(this + 4);
  std::vector<quasar::ProcessingConnection>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::string>::destroy((uint64_t)(this + 1), this[2]);
}

uint64_t *quasar::ProcessingBlock::connectOutput(uint64_t *a1, uint64_t a2)
{
  int v4 = (const void **)(a2 + 8);
  uint64_t v5 = *(void *)a2;
  if (v5 + 16 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(*(void *)a2 + 8, (const void **)(a2 + 8)))
  {
    memset(v11, 0, sizeof(v11));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Multiple connections to receiving block input name: ", 52);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, (uint64_t)v4);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v11);
  }
  unint64_t v6 = a1[5];
  if (v6 >= a1[6])
  {
    uint64_t v7 = std::vector<quasar::ProcessingConnection>::__push_back_slow_path<quasar::ProcessingConnection const&>(a1 + 4, a2);
  }
  else
  {
    std::allocator<quasar::ProcessingConnection>::construct[abi:ne180100]<quasar::ProcessingConnection,quasar::ProcessingConnection const&>((uint64_t)(a1 + 6), (void *)a1[5], a2);
    uint64_t v7 = v6 + 56;
    a1[5] = v6 + 56;
  }
  a1[5] = v7;
  long long v8 = (uint64_t **)(*(void *)a2 + 8);
  return std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v8, v4, (uint64_t)v4);
}

void sub_1B1C73470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::ProcessingBlock::connectOutput(quasar::ProcessingBlock *this, quasar::ProcessingBlock *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "in");
  std::string::basic_string[abi:ne180100]<0>(v4, "out");
  quasar::ProcessingConnection::ProcessingConnection((uint64_t)v8, (uint64_t)a2, (long long *)v6, (long long *)v4);
  quasar::ProcessingBlock::connectOutput((uint64_t *)this, (uint64_t)v8);
  if (v12 < 0) {
    operator delete(__p);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1C7352C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void quasar::ProcessingBlock::disconnectOutput(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v2 == v3) {
    return;
  }
  uint64_t v5 = *a2;
  int v6 = *((char *)a2 + 31);
  if (v6 >= 0) {
    uint64_t v7 = *((unsigned __int8 *)a2 + 31);
  }
  else {
    uint64_t v7 = a2[2];
  }
  if (v6 >= 0) {
    long long v8 = (unsigned __int8 *)(a2 + 1);
  }
  else {
    long long v8 = (unsigned __int8 *)a2[1];
  }
  int v9 = *((char *)a2 + 55);
  if (v9 >= 0) {
    uint64_t v10 = *((unsigned __int8 *)a2 + 55);
  }
  else {
    uint64_t v10 = a2[5];
  }
  uint64_t v13 = (unsigned __int8 *)a2[4];
  std::vector<std::string> v11 = (unsigned __int8 *)(a2 + 4);
  char v12 = v13;
  if (v9 >= 0) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = v12;
  }
  while (1)
  {
    if (*(void *)v2 != v5) {
      goto LABEL_37;
    }
    uint64_t v15 = *(unsigned __int8 *)(v2 + 31);
    uint64_t v16 = (v15 & 0x80u) == 0 ? *(unsigned __int8 *)(v2 + 31) : *(void *)(v2 + 16);
    if (v16 != v7) {
      goto LABEL_37;
    }
    if ((v15 & 0x80) != 0)
    {
      if (memcmp(*(const void **)(v2 + 8), v8, *(void *)(v2 + 16))) {
        goto LABEL_37;
      }
    }
    else if (*(unsigned char *)(v2 + 31))
    {
      uint64_t v17 = 0;
      while (*(unsigned __int8 *)(v2 + v17 + 8) == v8[v17])
      {
        if (v15 == ++v17) {
          goto LABEL_26;
        }
      }
      goto LABEL_37;
    }
LABEL_26:
    uint64_t v18 = *(unsigned __int8 *)(v2 + 55);
    if ((v18 & 0x80u) == 0) {
      uint64_t v19 = *(unsigned __int8 *)(v2 + 55);
    }
    else {
      uint64_t v19 = *(void *)(v2 + 40);
    }
    if (v19 != v10) {
      goto LABEL_37;
    }
    if ((v18 & 0x80) != 0) {
      break;
    }
    if (!*(unsigned char *)(v2 + 55)) {
      goto LABEL_39;
    }
    uint64_t v20 = 0;
    while (*(unsigned __int8 *)(v2 + v20 + 32) == v14[v20])
    {
      if (v18 == ++v20) {
        goto LABEL_39;
      }
    }
LABEL_37:
    v2 += 56;
    if (v2 == v3) {
      return;
    }
  }
  if (memcmp(*(const void **)(v2 + 32), v14, *(void *)(v2 + 40))) {
    goto LABEL_37;
  }
LABEL_39:
  std::__tree<std::string>::__erase_unique<std::string>((uint64_t **)(v5 + 8), (const void **)(v2 + 8));
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::ProcessingConnection *,quasar::ProcessingConnection *,quasar::ProcessingConnection *>((uint64_t)&v24, v2 + 56, *(void *)(a1 + 40), v2);
  uint64_t v22 = v21;
  uint64_t v23 = *(void *)(a1 + 40);
  if (v23 != v21)
  {
    do
    {
      v23 -= 56;
      std::allocator<quasar::ProcessingConnection>::destroy[abi:ne180100](a1 + 48, v23);
    }
    while (v23 != v22);
  }
  *(void *)(a1 + 40) = v22;
}

void quasar::ProcessingBlock::disconnectOutput(quasar::ProcessingBlock *this, quasar::ProcessingBlock *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "in");
  std::string::basic_string[abi:ne180100]<0>(v4, "out");
  quasar::ProcessingConnection::ProcessingConnection((uint64_t)v8, (uint64_t)a2, (long long *)v6, (long long *)v4);
  quasar::ProcessingBlock::disconnectOutput((uint64_t)this, v8);
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete((void *)v8[1]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1C737D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ProcessingBlock::send(uint64_t result, const void **a2, uint64_t a3, char a4)
{
  uint64_t v6 = result;
  char v7 = *(uint64_t **)(result + 32);
  long long v8 = *(uint64_t **)(result + 40);
  if (v7 == v8) {
    goto LABEL_22;
  }
  char v10 = 0;
  do
  {
    uint64_t v11 = *((unsigned __int8 *)v7 + 55);
    if ((v11 & 0x80u) == 0) {
      char v12 = (const void *)*((unsigned __int8 *)v7 + 55);
    }
    else {
      char v12 = (const void *)v7[5];
    }
    uint64_t v13 = (const void *)*((unsigned __int8 *)a2 + 23);
    int v14 = (char)v13;
    if ((char)v13 < 0) {
      uint64_t v13 = a2[1];
    }
    if (v12 == v13)
    {
      if (v14 >= 0) {
        uint64_t v15 = (unsigned __int8 *)a2;
      }
      else {
        uint64_t v15 = (unsigned __int8 *)*a2;
      }
      if ((v11 & 0x80) != 0)
      {
        uint64_t result = memcmp((const void *)v7[4], v15, v7[5]);
        if (result) {
          goto LABEL_20;
        }
LABEL_19:
        uint64_t v17 = (unsigned char *)*v7;
        quasar::ProcessingBlock::ensureInitialized((unsigned char *)*v7);
        uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t))(*(void *)v17 + 80))(v17, v7 + 1, a3);
        char v10 = 1;
        goto LABEL_20;
      }
      if (!*((unsigned char *)v7 + 55)) {
        goto LABEL_19;
      }
      uint64_t v16 = 0;
      while (*((unsigned __int8 *)v7 + v16 + 32) == v15[v16])
      {
        if (v11 == ++v16) {
          goto LABEL_19;
        }
      }
    }
LABEL_20:
    v7 += 7;
  }
  while (v7 != v8);
  if ((v10 & 1) == 0)
  {
LABEL_22:
    if ((a4 & 1) == 0)
    {
      memset(v27, 0, sizeof(v27));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
      uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"output port ", 12);
      uint64_t v19 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
      size_t v20 = strlen(v19);
      uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
      uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
      int v23 = *((char *)a2 + 23);
      if (v23 >= 0) {
        uint64_t v24 = (uint64_t)a2;
      }
      else {
        uint64_t v24 = (uint64_t)*a2;
      }
      if (v23 >= 0) {
        uint64_t v25 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        uint64_t v25 = (uint64_t)a2[1];
      }
      long long v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, " not connected");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v27);
    }
  }
  return result;
}

uint64_t quasar::ProcessingBlock::receive(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  quasar::ProcessingBlock::ensureInitialized(a1);
  uint64_t v6 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)a1 + 80);
  return v6(a1, a2, a3);
}

void quasar::ProcessingBlock::send(uint64_t a1, uint64_t a2, char a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "out");
  quasar::ProcessingBlock::send(a1, (const void **)__p, a2, a3);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1C73B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *quasar::ProcessingBlock::ensureInitialized(unsigned char *this)
{
  if (this[56])
  {
    uint64_t v1 = this;
    uint64_t v2 = (*(uint64_t (**)(unsigned char *))(*(void *)this + 88))(this);
    if (v2)
    {
      uint64_t v3 = v2;
      int v4 = (char *)(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 16))(v1);
      std::string::basic_string[abi:ne180100]<0>(&v7, v4);
      char v5 = std::string::append(&v7, " Config:");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      std::string::size_type v9 = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      (*(void (**)(uint64_t, void **))(*(void *)v3 + 8))(v3, __p);
      if (SHIBYTE(v9) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v7.__r_.__value_.__l.__data_);
      }
    }
    this = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 72))(v1);
    v1[56] = 0;
  }
  return this;
}

void sub_1B1C73C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingBlock::receive(unsigned char *a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "in");
  quasar::ProcessingBlock::ensureInitialized(a1);
  (*(void (**)(unsigned char *, void **, uint64_t))(*(void *)a1 + 80))(a1, __p, a2);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1C73D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void (***quasar::ProcessingBlock::updateConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(void **__return_ptr)
{
  void (***result)(void **__return_ptr);

  uint64_t result = (void (***)(void **__return_ptr))(*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (result) {
    quasar::OptionsBase::update(result, a3, a4);
  }
  return result;
}

uint64_t quasar::ProcessingBlock::checkInputsConnected()
{
  return 0;
}

void quasar::MultiInputProcessingBlock::process(uint64_t a1, unsigned __int8 *a2, uint64_t **a3)
{
  (*(void (**)(unsigned __int8 ***__return_ptr))(*(void *)a1 + 16))(&v15);
  long long v6 = v15;
  std::string v7 = v16;
  char v8 = 1;
  if (v15 != v16)
  {
    do
    {
      std::string::size_type v9 = *v6;
      quasar::ProcessingInput::setValue(*v6, a2, a3);
      v8 &= v9[24] != 0;
      ++v6;
    }
    while (v6 != v7);
    long long v6 = v15;
  }
  if (v6)
  {
    uint64_t v16 = v6;
    operator delete(v6);
  }
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 8))(a1);
    (*(void (**)(uint64_t **__return_ptr, uint64_t))(*(void *)a1 + 16))(&v13, a1);
    char v10 = v13;
    uint64_t v11 = v14;
    if (v13 != v14)
    {
      do
      {
        uint64_t v12 = *v10++;
        std::vector<quasar::TranslationPhraseInternal>::__vdeallocate((void **)(v12 + 32));
        *(void *)(v12 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
        *(void *)(v12 + 40) = 0;
        *(void *)(v12 + 48) = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v15 = 0;
        uint64_t v18 = &v15;
        std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
        *(unsigned char *)(v12 + ++*(_DWORD *)(result + 24) = 0;
      }
      while (v10 != v11);
      char v10 = v13;
    }
    if (v10)
    {
      int v14 = v10;
      operator delete(v10);
    }
  }
}

void sub_1B1C73F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingInput::setValue(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t **a3)
{
  uint64_t v4 = a2[23];
  size_t v5 = *((void *)a2 + 1);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  uint64_t v7 = a1[23];
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a1 + 1);
  }
  if (v6 != v7) {
    return;
  }
  if (v8 >= 0) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = *(unsigned __int8 **)a1;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v11, v5)) {
      return;
    }
    goto LABEL_17;
  }
  if (!v4)
  {
LABEL_17:
    if (a1[24]) {
      BOOL v13 = quasar::gLogLevel < 1;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13)
    {
      memset(v19, 0, sizeof(v19));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
      int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Input '", 7);
      int v15 = (char)a2[23];
      if (v15 >= 0) {
        uint64_t v16 = (uint64_t)a2;
      }
      else {
        uint64_t v16 = *(void *)a2;
      }
      if (v15 >= 0) {
        uint64_t v17 = a2[23];
      }
      else {
        uint64_t v17 = *((void *)a2 + 1);
      }
      uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"' set multiple times!", 21);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v19);
    }
    if (a1 + 32 != (unsigned __int8 *)a3) {
      std::vector<quasar::TranslationPhraseInternal>::__assign_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>((uint64_t)(a1 + 32), *a3, a3[1], 0x8F5C28F5C28F5C29 * (a3[1] - *a3));
    }
    a1[24] = 1;
    return;
  }
  uint64_t v12 = a2;
  while (*v12 == *v11)
  {
    ++v12;
    ++v11;
    if (!--v4) {
      goto LABEL_17;
    }
  }
}

void sub_1B1C740E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void virtual thunk to'quasar::MultiInputProcessingBlock::process(void *a1, unsigned __int8 *a2, uint64_t **a3)
{
}

void quasar::MultiInputProcessingBlock::checkInputsSet(quasar::MultiInputProcessingBlock *this)
{
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  unint64_t v46 = 0;
  (*(void (**)(long long ***__return_ptr))(*(void *)this + 16))(&v41);
  uint64_t v22 = this;
  uint64_t v2 = v41;
  uint64_t v3 = v42;
  int v4 = 1;
  if (v41 != v42)
  {
    int v5 = 1;
    do
    {
      int v6 = v5;
      int v7 = v4;
      int v8 = *v2;
      int v9 = *((unsigned __int8 *)*v2 + 24);
      BOOL v10 = *((unsigned char *)*v2 + 24) == 0;
      BOOL v11 = *((unsigned char *)*v2 + 24) != 0;
      if (!*((unsigned char *)*v2 + 24))
      {
        uint64_t v12 = v45;
        if ((unint64_t)v45 >= v46)
        {
          int v14 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v44, *v2);
        }
        else
        {
          if (*((char *)v8 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v45, *(const std::string::value_type **)v8, *((void *)v8 + 1));
          }
          else
          {
            long long v13 = *v8;
            v45->__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
            *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
          }
          int v14 = v12 + 1;
        }
        uint64_t v45 = v14;
      }
      int v4 = v7 & v11;
      int v5 = v6 & v10;
      std::vector<quasar::TranslationPhraseInternal>::__vdeallocate((void **)v8 + 4);
      *((void *)v8 + 4) = 0;
      *((void *)v8 + 5) = 0;
      *((void *)v8 + 6) = 0;
      *(void *)&long long v25 = 0;
      long long v24 = 0uLL;
      v23[0] = (void **)&v24;
      std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](v23);
      *((unsigned char *)v8 + ++*(_DWORD *)(result + 24) = 0;
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = v41;
    if (v9) {
      LOBYTE(v4) = v7;
    }
    else {
      LOBYTE(v4) = v6;
    }
  }
  if (v2)
  {
    BOOL v42 = v2;
    operator delete(v2);
  }
  if ((v4 & 1) == 0)
  {
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v24);
    int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Missing input(s) for ", 21);
    uint64_t v16 = (const char *)(*(uint64_t (**)(char *))(*(void *)((char *)v22 + *(void *)(*(void *)v22 - 24))
                                                          + 16))((char *)v22 + *(void *)(*(void *)v22 - 24));
    size_t v17 = strlen(v16);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
    v23[0] = (void **)", ";
    v23[1] = (void **)2;
    quasar::join<std::vector<std::string>>(&v44, (uint64_t *)v23);
    if ((v43 & 0x80u) == 0) {
      size_t v20 = (void **)&v41;
    }
    else {
      size_t v20 = (void **)v41;
    }
    if ((v43 & 0x80u) == 0) {
      uint64_t v21 = v43;
    }
    else {
      uint64_t v21 = (uint64_t)v42;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    if ((char)v43 < 0) {
      operator delete(v41);
    }
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v24);
  }
  *(void *)&long long v24 = &v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
}

void sub_1B1C743BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)(v13 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void virtual thunk to'quasar::MultiInputProcessingBlock::checkInputsSet(quasar::MultiInputProcessingBlock *this)
{
  quasar::MultiInputProcessingBlock::checkInputsSet((quasar::MultiInputProcessingBlock *)((char *)this
                                                                                        + *(void *)(*(void *)this - 56)));
}

uint64_t quasar::MultiInputProcessingBlock::checkInputsConnected(uint64_t a1, uint64_t a2)
{
  v55[0] = 0;
  v55[1] = 0;
  unint64_t v54 = v55;
  (*(void (**)(const void ****__return_ptr))(*(void *)a1 + 16))(&v52);
  int v4 = v52;
  int v5 = v53;
  if (v52 == v53)
  {
    uint64_t v6 = 0;
    if (v52)
    {
LABEL_21:
      unint64_t v53 = v4;
      operator delete(v4);
    }
  }
  else
  {
    uint64_t v6 = 0;
    do
    {
      int v7 = *v4;
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v54, *v4, (uint64_t)*v4);
      if (a1 + 16 + *(void *)(*(void *)a1 - 24) == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 8 + *(void *)(*(void *)a1 - 24), v7))
      {
        if (quasar::gLogLevel >= 1)
        {
          long long v50 = 0u;
          long long v51 = 0u;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          long long v35 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v35);
          int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Block '", 7);
          int v9 = *(char *)(a2 + 23);
          if (v9 >= 0) {
            uint64_t v10 = a2;
          }
          else {
            uint64_t v10 = *(void *)a2;
          }
          if (v9 >= 0) {
            uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
          }
          else {
            uint64_t v11 = *(void *)(a2 + 8);
          }
          uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
          uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"' - required input not connected: '", 35);
          int v14 = *((char *)v7 + 23);
          if (v14 >= 0) {
            int v15 = v7;
          }
          else {
            int v15 = (void *)*v7;
          }
          if (v14 >= 0) {
            uint64_t v16 = *((unsigned __int8 *)v7 + 23);
          }
          else {
            uint64_t v16 = (uint64_t)v7[1];
          }
          size_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v15, v16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"'", 1);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v35);
        }
        uint64_t v6 = (v6 + 1);
      }
      ++v4;
    }
    while (v4 != v5);
    int v4 = v52;
    if (v52) {
      goto LABEL_21;
    }
  }
  uint64_t v18 = a1 + *(void *)(*(void *)a1 - 24);
  uint64_t v19 = *(const void ***)(v18 + 8);
  size_t v20 = (const void ***)(v18 + 16);
  if (v19 != (const void **)(v18 + 16))
  {
    do
    {
      if (v55 == (char **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v54, v19 + 4))
      {
        if (quasar::gLogLevel >= 1)
        {
          long long v50 = 0u;
          long long v51 = 0u;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          long long v35 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v35);
          uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Block '", 7);
          int v22 = *(char *)(a2 + 23);
          if (v22 >= 0) {
            uint64_t v23 = a2;
          }
          else {
            uint64_t v23 = *(void *)a2;
          }
          if (v22 >= 0) {
            uint64_t v24 = *(unsigned __int8 *)(a2 + 23);
          }
          else {
            uint64_t v24 = *(void *)(a2 + 8);
          }
          long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
          long long v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"' - nonexistent input connected: '", 34);
          int v27 = *((char *)v19 + 55);
          if (v27 >= 0) {
            uint64_t v28 = (uint64_t)(v19 + 4);
          }
          else {
            uint64_t v28 = (uint64_t)v19[4];
          }
          if (v27 >= 0) {
            uint64_t v29 = *((unsigned __int8 *)v19 + 55);
          }
          else {
            uint64_t v29 = (uint64_t)v19[5];
          }
          long long v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"'", 1);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v35);
        }
        uint64_t v6 = (v6 + 1);
      }
      long long v31 = (const void **)v19[1];
      if (v31)
      {
        do
        {
          long long v32 = (const void ***)v31;
          long long v31 = (const void **)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          long long v32 = (const void ***)v19[2];
          BOOL v33 = *v32 == v19;
          uint64_t v19 = (const void **)v32;
        }
        while (!v33);
      }
      uint64_t v19 = (const void **)v32;
    }
    while (v32 != v20);
  }
  std::__tree<std::string>::destroy((uint64_t)&v54, v55[0]);
  return v6;
}

void sub_1B1C74744(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1 - 112, *(char **)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1B1C74794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t virtual thunk to'quasar::MultiInputProcessingBlock::checkInputsConnected(void *a1, uint64_t a2)
{
  return quasar::MultiInputProcessingBlock::checkInputsConnected((uint64_t)a1 + *(void *)(*a1 - 64), a2);
}

uint64_t std::__optional_destruct_base<quasar::PTree,false>::__optional_destruct_base[abi:ne180100]<quasar::PTree const&>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)(a1 + 32), *(void *)(a2 + 32), *(void *)(a2 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = 1;
  return a1;
}

void sub_1B1C7486C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<quasar::TranslationPhraseInternal>::__assign_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(void **)a1;
  if (0x8F5C28F5C28F5C29 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<quasar::TranslationPhraseInternal>::__vdeallocate((void **)a1);
    if (a4 > 0x147AE147AE147AELL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x1EB851EB851EB852 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0x8F5C28F5C28F5C29 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0xA3D70A3D70A3D7) {
      unint64_t v11 = 0x147AE147AE147AELL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<quasar::TranslationPhraseInternal>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(v8, (uint64_t)a2, (uint64_t)a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8F5C28F5C28F5C29 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,0>(a2, v13, (uint64_t)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(v8, (uint64_t)v13, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,0>(a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
      quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)(v16 - 200));
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B1C74A04(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1C74A0C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<quasar::TranslationPhraseInternal>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    long long v4 = v1;
    if (v3 != v1)
    {
      do
        quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)(v3 - 200));
      while (v3 != v1);
      long long v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,0>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v4 = a1;
  if (a1 != a2)
  {
    do
    {
      quasar::TranslationPhraseInternal::operator=(a3, v4);
      v4 += 25;
      a3 += 200;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t quasar::TranslationPhraseInternal::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  if ((uint64_t *)a1 != a2) {
    std::vector<quasar::TranslationToken>::__assign_with_size[abi:ne180100]<quasar::TranslationToken*,quasar::TranslationToken*>(a1 + 16, (std::string *)a2[2], (long long *)a2[3], 0x8E38E38E38E38E39 * ((a2[3] - a2[2]) >> 3));
  }
  std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a2 + 5));
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(a1 + 64), (const std::string *)(a2 + 8));
  std::__optional_storage_base<std::vector<quasar::AlternativeSelectionSpan>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<quasar::AlternativeSelectionSpan>,false> const&>(a1 + 96, (uint64_t)(a2 + 12));
  *(_WORD *)(a1 + 128) = *((_WORD *)a2 + 64);
  if ((uint64_t *)a1 != a2) {
    std::vector<quasar::TranslationTokenInternal>::__assign_with_size[abi:ne180100]<quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*>(a1 + 136, (quasar::TranslationTokenInternal *)a2[17], (quasar::TranslationTokenInternal *)a2[18], 0xF0F0F0F0F0F0F0F1 * ((a2[18] - a2[17]) >> 3));
  }
  *(void *)(a1 + 160) = a2[20];
  std::string::operator=((std::string *)(a1 + 168), (const std::string *)a2 + 7);
  quasar::MetaInfo::operator=(a1 + 192, (uint64_t)(a2 + 24));
  return a1;
}

{
  uint64_t v4;
  void **v5;
  long long v6;
  void **v7;
  long long v8;

  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  std::vector<quasar::TranslationToken>::__vdeallocate((void **)(a1 + 16));
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2[4];
  a2[2] = 0;
  a2[3] = 0;
  a2[4] = 0;
  int v5 = (void **)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*v5);
  }
  uint64_t v6 = *(_OWORD *)(a2 + 5);
  *(void *)(a1 + 56) = a2[7];
  *(_OWORD *)int v5 = v6;
  *((unsigned char *)a2 + 63) = 0;
  *((unsigned char *)a2 + 40) = 0;
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 64, (__n128 *)a2 + 4);
  std::__optional_storage_base<std::vector<quasar::AlternativeSelectionSpan>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<quasar::AlternativeSelectionSpan>,false>>(a1 + 96, (__n128 *)a2 + 6);
  *(_WORD *)(a1 + 128) = *((_WORD *)a2 + 64);
  std::vector<quasar::TranslationTokenInternal>::__vdeallocate((void **)(a1 + 136));
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
  *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2[19];
  a2[18] = 0;
  a2[19] = 0;
  a2[17] = 0;
  *(void *)(a1 + 160) = a2[20];
  int v7 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*v7);
  }
  uint64_t v8 = *(_OWORD *)(a2 + 21);
  *(void *)(a1 + 184) = a2[23];
  *(_OWORD *)int v7 = v8;
  *((unsigned char *)a2 + 191) = 0;
  *((unsigned char *)a2 + 168) = 0;
  quasar::MetaInfo::operator=((quasar::MetaInfo::Impl **)(a1 + 192), (quasar::MetaInfo::Impl **)a2 + 24);
  return a1;
}

void std::vector<quasar::TranslationToken>::__assign_with_size[abi:ne180100]<quasar::TranslationToken*,quasar::TranslationToken*>(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(std::string **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<quasar::TranslationToken>::__vdeallocate((void **)a1);
    if (a4 > 0x38E38E38E38E38ELL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x1C71C71C71C71C7) {
      unint64_t v11 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<quasar::TranslationToken>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationToken>,quasar::TranslationToken*,quasar::TranslationToken*,quasar::TranslationToken*>(v8, (long long *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationToken *,quasar::TranslationToken *,quasar::TranslationToken *>((int)&v17, __str, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationToken>,quasar::TranslationToken*,quasar::TranslationToken*,quasar::TranslationToken*>(v8, (long long *)v13, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationToken *,quasar::TranslationToken *,quasar::TranslationToken *>((int)&v18, __str, (std::string *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 72;
      std::allocator<quasar::TranslationToken>::destroy[abi:ne180100](v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B1C74D44(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1C74D4C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<quasar::TranslationToken>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 72;
        std::allocator<quasar::TranslationToken>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationToken *,quasar::TranslationToken *,quasar::TranslationToken *>(int a1, std::string *__str, std::string *a3, std::string *this)
{
  int v5 = __str;
  if (__str == a3) {
    return __str;
  }
  uint64_t v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    LOWORD(this[1].__r_.__value_.__l.__data_) = v5[1].__r_.__value_.__l.__data_;
    if (this != v5) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(&this[1].__r_.__value_.__s.__data_[8], (char *)v5[1].__r_.__value_.__l.__size_, v5[1].__r_.__value_.__r.__words[2], (uint64_t)(v5[1].__r_.__value_.__r.__words[2] - v5[1].__r_.__value_.__l.__size_) >> 2);
    }
    std::string::size_type size = v5[2].__r_.__value_.__l.__size_;
    LODWORD(this[2].__r_.__value_.__r.__words[2]) = v5[2].__r_.__value_.__r.__words[2];
    this[2].__r_.__value_.__l.__size_ = size;
    this += 3;
    v5 += 3;
  }
  while (v5 != v6);
  return v6;
}

void std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(std::string *this, const std::string *a2)
{
  if (this[1].__r_.__value_.__s.__data_[0] == a2[1].__r_.__value_.__s.__data_[0])
  {
    if (this[1].__r_.__value_.__s.__data_[0])
    {
      std::string::operator=(this, a2);
    }
  }
  else if (this[1].__r_.__value_.__s.__data_[0])
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(this->__r_.__value_.__l.__data_);
    }
    this[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

void std::__optional_storage_base<std::vector<quasar::AlternativeSelectionSpan>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<quasar::AlternativeSelectionSpan>,false> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2 && *(unsigned char *)(a1 + 24))
    {
      uint64_t v3 = *(void *)(a2 + 8);
      unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *(void *)a2) >> 3);
      uint64_t v5 = *(void *)a2;
      std::vector<quasar::AlternativeSelectionSpan>::__assign_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*>(a1, v5, v3, v4);
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v6 = (void **)a1;
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v6);
    *(unsigned char *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    std::vector<quasar::AlternativeSelectionSpan>::__init_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*>((void *)a1, *(void *)a2, *(void *)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    *(unsigned char *)(a1 + ++*(_DWORD *)(result + 24) = 1;
  }
}

void std::vector<quasar::AlternativeSelectionSpan>::__assign_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(_OWORD **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<quasar::AlternativeSelectionSpan>::__vdeallocate((void **)a1);
    if (a4 > 0x666666666666666) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x999999999999999ALL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::AlternativeSelectionSpan>,quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::AlternativeSelectionSpan *,quasar::AlternativeSelectionSpan *,quasar::AlternativeSelectionSpan *>((uint64_t)&v18, a2, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::AlternativeSelectionSpan>,quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*>(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::AlternativeSelectionSpan *,quasar::AlternativeSelectionSpan *,quasar::AlternativeSelectionSpan *>((uint64_t)&v19, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      uint64_t v17 = v16 - 40;
      size_t v20 = (void **)(v16 - 24);
      std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&v20);
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B1C7514C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1C75154(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<quasar::AlternativeSelectionSpan>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = v3 - 40;
        uint64_t v6 = (void **)(v3 - 24);
        std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&v6);
        uint64_t v3 = v5;
      }
      while (v5 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::AlternativeSelectionSpan *,quasar::AlternativeSelectionSpan *,quasar::AlternativeSelectionSpan *>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *a4 = *(_OWORD *)v5;
      if ((_OWORD *)v5 != a4) {
        std::vector<quasar::AlternativeSelectionSpan::Alternative>::__assign_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan::Alternative*,quasar::AlternativeSelectionSpan::Alternative*>((uint64_t)(a4 + 1), *(uint64_t **)(v5 + 16), *(uint64_t **)(v5 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 24) - *(void *)(v5 + 16)) >> 3));
      }
      v5 += 40;
      a4 = (_OWORD *)((char *)a4 + 40);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::vector<quasar::AlternativeSelectionSpan::Alternative>::__assign_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan::Alternative*,quasar::AlternativeSelectionSpan::Alternative*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<quasar::AlternativeSelectionSpan::Alternative>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::AlternativeSelectionSpan::Alternative>,quasar::AlternativeSelectionSpan::Alternative*,quasar::AlternativeSelectionSpan::Alternative*,quasar::AlternativeSelectionSpan::Alternative*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::AlternativeSelectionSpan::Alternative *,quasar::AlternativeSelectionSpan::Alternative *,quasar::AlternativeSelectionSpan::Alternative *>((uint64_t)&v18, a2, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::AlternativeSelectionSpan::Alternative>,quasar::AlternativeSelectionSpan::Alternative*,quasar::AlternativeSelectionSpan::Alternative*,quasar::AlternativeSelectionSpan::Alternative*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::AlternativeSelectionSpan::Alternative *,quasar::AlternativeSelectionSpan::Alternative *,quasar::AlternativeSelectionSpan::Alternative *>((uint64_t)&v19, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      uint64_t v17 = *(std::__shared_weak_count **)(v16 - 16);
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      v16 -= 24;
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B1C753D0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1C753D8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<quasar::AlternativeSelectionSpan::Alternative>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<quasar::AlternativeSelectionSpan::Alternative>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::AlternativeSelectionSpan::Alternative *,quasar::AlternativeSelectionSpan::Alternative *,quasar::AlternativeSelectionSpan::Alternative *>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v8 = *v5;
    uint64_t v7 = v5[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    int v9 = (std::__shared_weak_count *)a4[1];
    *a4 = v8;
    a4[1] = v7;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    a4[2] = v5[2];
    a4 += 3;
    v5 += 3;
  }
  while (v5 != v6);
  return v6;
}

void std::vector<quasar::TranslationTokenInternal>::__assign_with_size[abi:ne180100]<quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*>(uint64_t a1, quasar::TranslationTokenInternal *a2, quasar::TranslationTokenInternal *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(void **)a1;
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<quasar::TranslationTokenInternal>::__vdeallocate((void **)a1);
    if (a4 > 0x1E1E1E1E1E1E1E1) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0xF0F0F0F0F0F0F0) {
      unint64_t v11 = 0x1E1E1E1E1E1E1E1;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<quasar::TranslationTokenInternal>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*>(v8, a2, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = (quasar::TranslationTokenInternal *)((char *)a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *>((uint64_t)&v17, (uint64_t)a2, (uint64_t)v13, (uint64_t)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*>(v8, v13, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *>((uint64_t)&v18, (uint64_t)a2, (uint64_t)a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 136;
      std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100](v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B1C75614(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1C7561C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<quasar::TranslationTokenInternal>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 136;
        std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = a4 + v7;
    uint64_t v9 = a2 + v7;
    std::string::operator=((std::string *)(a4 + v7), (const std::string *)(a2 + v7));
    *(_WORD *)(a4 + v7 + ++*(_DWORD *)(result + 24) = *(_WORD *)(a2 + v7 + 24);
    if (a4 == a2)
    {
      std::string::operator=((std::string *)(v8 + 72), (const std::string *)(v8 + 72));
    }
    else
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v8 + 32), *(char **)(v9 + 32), *(void *)(v9 + 40), (uint64_t)(*(void *)(v9 + 40) - *(void *)(v9 + 32)) >> 2);
      uint64_t v10 = *(void *)(v9 + 56);
      *(_DWORD *)(v8 + 64) = *(_DWORD *)(v9 + 64);
      *(void *)(v8 + 56) = v10;
      std::string::operator=((std::string *)(v8 + 72), (const std::string *)(v9 + 72));
      *(void *)(v8 + 96) = *(void *)(v9 + 96);
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v8 + 104), *(char **)(v9 + 104), *(void *)(v9 + 112), (uint64_t)(*(void *)(v9 + 112) - *(void *)(v9 + 104)) >> 2);
    }
    *(void *)(v8 + 128) = *(void *)(v9 + 128);
    v7 += 136;
  }
  while (v9 + 136 != v6);
  return v6;
}

void std::vector<quasar::ProcessingConnection>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<quasar::ProcessingConnection>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::ProcessingConnection>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 8);
    operator delete(v3);
  }
}

uint64_t std::vector<quasar::ProcessingConnection>::__push_back_slow_path<quasar::ProcessingConnection const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249) {
    unint64_t v6 = 0x492492492492492;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  unint64_t v11 = &v7[56 * v3];
  uint64_t v13 = &v7[56 * v6];
  std::allocator<quasar::ProcessingConnection>::construct[abi:ne180100]<quasar::ProcessingConnection,quasar::ProcessingConnection const&>((uint64_t)(a1 + 2), v11, a2);
  uint64_t v12 = v11 + 56;
  std::vector<quasar::ProcessingConnection>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<quasar::ProcessingConnection>::~__split_buffer(&v10);
  return v8;
}

void sub_1B1C75988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::ProcessingConnection>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::ProcessingConnection>::construct[abi:ne180100]<quasar::ProcessingConnection,quasar::ProcessingConnection const&>(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = *(void *)a3;
  uint64_t v5 = (std::string *)(a2 + 1);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    a2[3] = *(void *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = (std::string *)(a2 + 4);
  if (*(char *)(a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a3 + 32), *(void *)(a3 + 40));
  }
  else
  {
    long long v8 = *(_OWORD *)(a3 + 32);
    a2[6] = *(void *)(a3 + 48);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_1B1C75A2C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::ProcessingConnection>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::ProcessingConnection>,std::reverse_iterator<quasar::ProcessingConnection*>,std::reverse_iterator<quasar::ProcessingConnection*>,std::reverse_iterator<quasar::ProcessingConnection*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::ProcessingConnection>,std::reverse_iterator<quasar::ProcessingConnection*>,std::reverse_iterator<quasar::ProcessingConnection*>,std::reverse_iterator<quasar::ProcessingConnection*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 56);
      a3 -= 56;
      *(void *)(v7 - 56) = v8;
      long long v9 = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(void *)(a3 + 24);
      *(_OWORD *)(v7 - 48) = v9;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + ++*(_DWORD *)(result + 24) = 0;
      *(void *)(a3 + 8) = 0;
      long long v10 = *(_OWORD *)(a3 + 32);
      *(void *)(v7 - 8) = *(void *)(a3 + 48);
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = v10;
      *(void *)(a3 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 48) = 0;
      uint64_t v7 = *((void *)&v16 + 1) - 56;
      *((void *)&v16 + 1) -= 56;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ProcessingConnection>,std::reverse_iterator<quasar::ProcessingConnection*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ProcessingConnection>,std::reverse_iterator<quasar::ProcessingConnection*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ProcessingConnection>,std::reverse_iterator<quasar::ProcessingConnection*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ProcessingConnection>,std::reverse_iterator<quasar::ProcessingConnection*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::ProcessingConnection>::destroy[abi:ne180100](v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::ProcessingConnection>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::ProcessingConnection>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 56;
    std::allocator<quasar::ProcessingConnection>::destroy[abi:ne180100](v4, i - 56);
  }
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::ProcessingConnection *,quasar::ProcessingConnection *,quasar::ProcessingConnection *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(void *)a4 = *(void *)v5;
      uint64_t v7 = (void **)(a4 + 8);
      if (*(char *)(a4 + 31) < 0) {
        operator delete(*v7);
      }
      long long v8 = *(_OWORD *)(v5 + 8);
      *(void *)(a4 + ++*(_DWORD *)(result + 24) = *(void *)(v5 + 24);
      *(_OWORD *)uint64_t v7 = v8;
      *(unsigned char *)(v5 + 31) = 0;
      *(unsigned char *)(v5 + 8) = 0;
      long long v9 = (void **)(a4 + 32);
      if (*(char *)(a4 + 55) < 0) {
        operator delete(*v9);
      }
      long long v10 = *(_OWORD *)(v5 + 32);
      *(void *)(a4 + 48) = *(void *)(v5 + 48);
      *(_OWORD *)long long v9 = v10;
      *(unsigned char *)(v5 + 55) = 0;
      *(unsigned char *)(v5 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
      a4 += 56;
      v5 += 56;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void quasar::tennessee::CreateDefaultCollation<std::string_view,true>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1B1C75E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<unsigned char ()(char const*&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  MEMORY[0x1B3EA8670](v4, 0x10E1C40EDC78F6FLL);
  _Unwind_Resume(a1);
}

void quasar::tennessee::LoadIterableCollationMapping()
{
}

void sub_1B1C75F80(_Unwind_Exception *a1)
{
  std::unique_ptr<std::map<wchar_t,wchar_t>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *quasar::tennessee::InsertOrDie<std::map<wchar_t,wchar_t>>(uint64_t **a1, _DWORD *a2, int *a3)
{
  int v3 = *a3;
  LODWORD(v6[0]) = *a2;
  DWORD1(v6[0]) = v3;
  uint64_t result = std::__tree<std::__value_type<wchar_t,wchar_t>,std::__map_value_compare<wchar_t,std::__value_type<wchar_t,wchar_t>,std::less<wchar_t>,true>,std::allocator<std::__value_type<wchar_t,wchar_t>>>::__emplace_unique_key_args<wchar_t,std::pair<wchar_t const,wchar_t> const&>(a1, (int *)v6, (uint64_t *)v6);
  if ((v5 & 1) == 0)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"duplicate key ", 14);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v6);
  }
  return result;
}

void quasar::tennessee::LoadIterableCollation<std::string_view>()
{
}

void sub_1B1C76110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = a11;
  a11 = 0;
  if (v12) {
    quasar::tennessee::LoadIterableCollation<std::string_view>();
  }
  std::unique_ptr<std::map<wchar_t,wchar_t>>::reset[abi:ne180100](&a10, 0);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<quasar::tennessee::IterableCollation<std::string_view,wchar_t>,std::unique_ptr<quasar::tennessee::StlContainerMapping<std::map<wchar_t,wchar_t>,(quasar::tennessee::StlContainerMapping_DefaultBehavior)2>>,wchar_t (&)(char const*&)>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1B1C76244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<wchar_t ()(char const*&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  MEMORY[0x1B3EA8670](v4, 0x10E1C40EDC78F6FLL);
  _Unwind_Resume(a1);
}

uint64_t quasar::tennessee::ParseSingleUTF8CharacterAndAdvanceIterator(unsigned __int8 **this, const char **a2)
{
  uint64_t v2 = *this;
  int v3 = (char)**this;
  uint64_t v4 = **this;
  if (v3 < 0)
  {
    if (v4 < 0xE0)
    {
      if (v4 < 0xC2) {
        goto LABEL_17;
      }
      int v9 = v4 & 0x1F;
      unsigned int v8 = 1;
    }
    else
    {
      if (v4 > 0xEF)
      {
        if (v4 > 0xF4) {
          goto LABEL_17;
        }
        int v10 = v4 - 240;
        unint64_t v11 = v2[1];
        if (((byte_1B256840C[v11 >> 4] >> (v4 + 16)) & 1) == 0) {
          goto LABEL_17;
        }
        unsigned int v7 = v2[2] ^ 0x80;
        if (v7 > 0x3F) {
          goto LABEL_17;
        }
        int v6 = v11 & 0x3F | (v10 << 6);
        unsigned int v8 = 3;
      }
      else
      {
        int v6 = v3 & 0xF;
        if (((a00000000000000[v3 & 0xF] >> (v2[1] >> 5)) & 1) == 0) {
          goto LABEL_17;
        }
        unsigned int v7 = v2[1] & 0x3F;
        unsigned int v8 = 2;
      }
      int v9 = v7 | (v6 << 6);
    }
    unsigned int v12 = v2[v8] ^ 0x80;
    if (v12 <= 0x3F)
    {
      uint64_t v4 = v12 | (v9 << 6);
      uint64_t v5 = v8 + 1;
      goto LABEL_16;
    }
LABEL_17:
    memset(v14, 0, sizeof(v14));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "Encounted invalid encoded UTF-8 character.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v14);
  }
  uint64_t v5 = 1;
LABEL_16:
  *this = &v2[v5];
  return v4;
}

uint64_t quasar::tennessee::DefaultParseAndAdvanceIteratorImpl<std::string_view,unsigned char,std::string_view,true>(void *a1)
{
  uint64_t v1 = (unsigned __int8 *)(*a1)++;
  return *v1;
}

void std::__function::__func<unsigned char (*)(char const*&),std::allocator<unsigned char (*)(char const*&)>,unsigned char ()(char const*&)>::~__func()
{
}

void *std::__function::__func<unsigned char (*)(char const*&),std::allocator<unsigned char (*)(char const*&)>,unsigned char ()(char const*&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F0A5A650;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(char const*&),std::allocator<unsigned char (*)(char const*&)>,unsigned char ()(char const*&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5A650;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(char const*&),std::allocator<unsigned char (*)(char const*&)>,unsigned char ()(char const*&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<unsigned char (*)(char const*&),std::allocator<unsigned char (*)(char const*&)>,unsigned char ()(char const*&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<unsigned char (*)(char const*&),std::allocator<unsigned char (*)(char const*&)>,unsigned char ()(char const*&)>::target_type()
{
}

uint64_t quasar::tennessee::IterableCollation<std::string_view,unsigned char>::IterableCollation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F0A59BF0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  std::__function::__value_func<unsigned char ()(char const*&)>::__value_func[abi:ne180100](a1 + 24, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  std::__function::__value_func<unsigned char ()(char const*&)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
  *(void *)(a1 + 56) = &unk_1F0A59BA0;
  *(void *)(a1 + 64) = v5;
  std::__function::__value_func<unsigned char ()(char const*&)>::__value_func[abi:ne180100](a1 + 72, (uint64_t)v9);
  std::__function::__value_func<unsigned char ()(char const*&)>::~__value_func[abi:ne180100](v9);
  uint64_t v6 = *(void *)(a1 + 8);
  std::__function::__value_func<unsigned char ()(char const*&)>::__value_func[abi:ne180100]((uint64_t)v8, a3);
  *(void *)(a1 + 104) = &unk_1F0A59BC8;
  *(void *)(a1 + 11std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v6;
  std::__function::__value_func<unsigned char ()(char const*&)>::__value_func[abi:ne180100](a1 + 120, (uint64_t)v8);
  std::__function::__value_func<unsigned char ()(char const*&)>::~__value_func[abi:ne180100](v8);
  return a1;
}

void sub_1B1C76608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<unsigned char ()(char const*&)>::~__value_func[abi:ne180100](va);
  *uint64_t v6 = v4;
  std::__function::__value_func<unsigned char ()(char const*&)>::~__value_func[abi:ne180100](v5);
  std::__function::__value_func<unsigned char ()(char const*&)>::~__value_func[abi:ne180100](v3);
  unsigned int v8 = *(std::__shared_weak_count **)(v2 + 16);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  _Unwind_Resume(a1);
}

void *quasar::tennessee::IterableCollation<std::string_view,unsigned char>::ComparatorImpl<false>::~ComparatorImpl(void *a1)
{
  *a1 = &unk_1F0A59BA0;
  std::__function::__value_func<unsigned char ()(char const*&)>::~__value_func[abi:ne180100](a1 + 2);
  return a1;
}

void *quasar::tennessee::IterableCollation<std::string_view,unsigned char>::~IterableCollation(void *a1)
{
  *a1 = &unk_1F0A59BF0;
  a1[13] = &unk_1F0A59BC8;
  std::__function::__value_func<unsigned char ()(char const*&)>::~__value_func[abi:ne180100](a1 + 15);
  a1[7] = &unk_1F0A59BA0;
  std::__function::__value_func<unsigned char ()(char const*&)>::~__value_func[abi:ne180100](a1 + 9);
  std::__function::__value_func<unsigned char ()(char const*&)>::~__value_func[abi:ne180100](a1 + 3);
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void quasar::tennessee::IterableCollation<std::string_view,unsigned char>::~IterableCollation(void *a1)
{
  *a1 = &unk_1F0A59BF0;
  a1[13] = &unk_1F0A59BC8;
  std::__function::__value_func<unsigned char ()(char const*&)>::~__value_func[abi:ne180100](a1 + 15);
  a1[7] = &unk_1F0A59BA0;
  std::__function::__value_func<unsigned char ()(char const*&)>::~__value_func[abi:ne180100](a1 + 9);
  std::__function::__value_func<unsigned char ()(char const*&)>::~__value_func[abi:ne180100](a1 + 3);
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::tennessee::IterableCollation<std::string_view,unsigned char>::GetComparator(uint64_t a1)
{
  return a1 + 56;
}

uint64_t quasar::tennessee::IterableCollation<std::string_view,unsigned char>::GetPrefixComparator(uint64_t a1)
{
  return a1 + 104;
}

void quasar::tennessee::IterableCollation<std::string_view,unsigned char>::Copy()
{
}

uint64_t std::__function::__value_func<unsigned char ()(char const*&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  }
  return a1;
}

void quasar::tennessee::IterableCollation<std::string_view,unsigned char>::ComparatorImpl<false>::~ComparatorImpl(void *a1)
{
  *a1 = &unk_1F0A59BA0;
  std::__function::__value_func<unsigned char ()(char const*&)>::~__value_func[abi:ne180100](a1 + 2);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::tennessee::IterableCollation<std::string_view,unsigned char>::ComparatorImpl<false>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  uint64_t v12 = *a3;
  uint64_t v13 = v4;
  do
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (!v5
      || (uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, &v13),
          (uint64_t v7 = *(void *)(a1 + 40)) == 0))
    {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v7 + 48))(v7, &v12);
    uint64_t v9 = *(void *)(a1 + 8);
    if (v9)
    {
      LODWORD(v6) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v6);
      LODWORD(v8) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), v8);
    }
  }
  while (v6 == v8 && v8 != 0);
  if (v6 < v8) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v6 > v8;
  }
}

void *quasar::tennessee::IterableCollation<std::string_view,unsigned char>::ComparatorImpl<true>::~ComparatorImpl(void *a1)
{
  *a1 = &unk_1F0A59BC8;
  std::__function::__value_func<unsigned char ()(char const*&)>::~__value_func[abi:ne180100](a1 + 2);
  return a1;
}

void quasar::tennessee::IterableCollation<std::string_view,unsigned char>::ComparatorImpl<true>::~ComparatorImpl(void *a1)
{
  *a1 = &unk_1F0A59BC8;
  std::__function::__value_func<unsigned char ()(char const*&)>::~__value_func[abi:ne180100](a1 + 2);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::tennessee::IterableCollation<std::string_view,unsigned char>::ComparatorImpl<true>::operator()(uint64_t a1, uint64_t *a2, unsigned char **a3)
{
  uint64_t v3 = *a2;
  uint64_t v13 = *a3;
  uint64_t v14 = v3;
  if (!*v13)
  {
    memset(v12, 0, sizeof(v12));
    quasar::QuasarExceptionMessage::QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v12);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v12);
  }
  while (1)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (!v5
      || (uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, &v14),
          (uint64_t v7 = *(void *)(a1 + 40)) == 0))
    {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, unsigned char **))(*(void *)v7 + 48))(v7, &v13);
    uint64_t v9 = *(void *)(a1 + 8);
    if (v9)
    {
      LODWORD(v6) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v6);
      LODWORD(v8) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), v8);
    }
    if (v6 != v8 || v8 == 0) {
      break;
    }
    if (!*v13)
    {
      LODWORD(v8) = v6;
      break;
    }
  }
  if (v6 < v8) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v6 > v8;
  }
}

void std::make_unique[abi:ne180100]<quasar::tennessee::IterableCollation<std::string_view,unsigned char>,std::shared_ptr<quasar::tennessee::Mapping<unsigned char,unsigned char>> const&,std::function<unsigned char ()(char const*&)> const&>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1B1C76D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<unsigned char ()(char const*&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  MEMORY[0x1B3EA8670](v4, 0x10E1C40EDC78F6FLL);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<unsigned char ()(char const*&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<std::map<wchar_t,wchar_t>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    std::__tree<int>::destroy(v2, *(void **)(v2 + 8));
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<wchar_t,wchar_t>,std::__map_value_compare<wchar_t,std::__value_type<wchar_t,wchar_t>,std::less<wchar_t>,true>,std::allocator<std::__value_type<wchar_t,wchar_t>>>::__emplace_unique_key_args<wchar_t,std::pair<wchar_t const,wchar_t> const&>(uint64_t **a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    int v10 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v10 + 28) = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void *quasar::tennessee::StlContainerMapping<std::map<wchar_t,wchar_t>,(quasar::tennessee::StlContainerMapping_DefaultBehavior)2>::StlContainerMapping(void *result, uint64_t *a2)
{
  void *result = &unk_1F0A59DA8;
  uint64_t v2 = *a2;
  *a2 = 0;
  result[1] = v2;
  if (!*(void *)(v2 + 16))
  {
    memset(v3, 0, sizeof(v3));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v3);
  }
  return result;
}

void sub_1B1C76FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
}

void *quasar::tennessee::StlContainerMapping<std::map<wchar_t,wchar_t>,(quasar::tennessee::StlContainerMapping_DefaultBehavior)2>::~StlContainerMapping(void *a1)
{
  *a1 = &unk_1F0A59DA8;
  std::unique_ptr<std::map<wchar_t,wchar_t>>::reset[abi:ne180100](a1 + 1, 0);
  return a1;
}

void quasar::tennessee::StlContainerMapping<std::map<wchar_t,wchar_t>,(quasar::tennessee::StlContainerMapping_DefaultBehavior)2>::~StlContainerMapping(void *a1)
{
  *a1 = &unk_1F0A59DA8;
  std::unique_ptr<std::map<wchar_t,wchar_t>>::reset[abi:ne180100](a1 + 1, 0);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::tennessee::StlContainerMapping<std::map<wchar_t,wchar_t>,(quasar::tennessee::StlContainerMapping_DefaultBehavior)2>::operator()(uint64_t a1, uint64_t a2)
{
  int v14 = a2;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v3 = v2 + 8;
  uint64_t v4 = v5;
  if (v5)
  {
    uint64_t v6 = v3;
    do
    {
      int v7 = *(_DWORD *)(v4 + 28);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        int v9 = (uint64_t *)v4;
      }
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != v3)
    {
      int v10 = *(_DWORD *)(v6 + 28);
      unint64_t v11 = (unsigned int *)(v6 + 32);
      BOOL v8 = v10 <= (int)a2;
      uint64_t v12 = (unsigned int *)&v14;
      if (v8) {
        uint64_t v12 = v11;
      }
      return *v12;
    }
  }
  return a2;
}

uint64_t *std::shared_ptr<quasar::tennessee::Mapping<wchar_t,wchar_t>>::shared_ptr[abi:ne180100]<quasar::tennessee::StlContainerMapping<std::map<wchar_t,wchar_t>,(quasar::tennessee::StlContainerMapping_DefaultBehavior)2>,std::default_delete<quasar::tennessee::StlContainerMapping<std::map<wchar_t,wchar_t>,(quasar::tennessee::StlContainerMapping_DefaultBehavior)2>>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  void *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<quasar::tennessee::StlContainerMapping<std::map<wchar_t,wchar_t>,(quasar::tennessee::StlContainerMapping_DefaultBehavior)2> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::tennessee::StlContainerMapping<std::map<wchar_t,wchar_t>,(quasar::tennessee::StlContainerMapping_DefaultBehavior)2> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::tennessee::StlContainerMapping<std::map<wchar_t,wchar_t>,(quasar::tennessee::StlContainerMapping_DefaultBehavior)2> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<wchar_t (*)(char const*&),std::allocator<wchar_t (*)(char const*&)>,wchar_t ()(char const*&)>::~__func()
{
}

void *std::__function::__func<wchar_t (*)(char const*&),std::allocator<wchar_t (*)(char const*&)>,wchar_t ()(char const*&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F0A5A6A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<wchar_t (*)(char const*&),std::allocator<wchar_t (*)(char const*&)>,wchar_t ()(char const*&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5A6A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<wchar_t (*)(char const*&),std::allocator<wchar_t (*)(char const*&)>,wchar_t ()(char const*&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<wchar_t (*)(char const*&),std::allocator<wchar_t (*)(char const*&)>,wchar_t ()(char const*&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<wchar_t (*)(char const*&),std::allocator<wchar_t (*)(char const*&)>,wchar_t ()(char const*&)>::target_type()
{
}

uint64_t quasar::tennessee::IterableCollation<std::string_view,wchar_t>::IterableCollation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F0A59C78;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  std::__function::__value_func<wchar_t ()(char const*&)>::__value_func[abi:ne180100](a1 + 24, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  std::__function::__value_func<wchar_t ()(char const*&)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
  *(void *)(a1 + 56) = &unk_1F0A59C28;
  *(void *)(a1 + 64) = v5;
  std::__function::__value_func<wchar_t ()(char const*&)>::__value_func[abi:ne180100](a1 + 72, (uint64_t)v9);
  std::__function::__value_func<wchar_t ()(char const*&)>::~__value_func[abi:ne180100](v9);
  uint64_t v6 = *(void *)(a1 + 8);
  std::__function::__value_func<wchar_t ()(char const*&)>::__value_func[abi:ne180100]((uint64_t)v8, a3);
  *(void *)(a1 + 104) = &unk_1F0A59C50;
  *(void *)(a1 + 11std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v6;
  std::__function::__value_func<wchar_t ()(char const*&)>::__value_func[abi:ne180100](a1 + 120, (uint64_t)v8);
  std::__function::__value_func<wchar_t ()(char const*&)>::~__value_func[abi:ne180100](v8);
  return a1;
}

void sub_1B1C77460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<wchar_t ()(char const*&)>::~__value_func[abi:ne180100](va);
  *uint64_t v6 = v4;
  std::__function::__value_func<wchar_t ()(char const*&)>::~__value_func[abi:ne180100](v5);
  std::__function::__value_func<wchar_t ()(char const*&)>::~__value_func[abi:ne180100](v3);
  BOOL v8 = *(std::__shared_weak_count **)(v2 + 16);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  _Unwind_Resume(a1);
}

void *quasar::tennessee::IterableCollation<std::string_view,wchar_t>::ComparatorImpl<false>::~ComparatorImpl(void *a1)
{
  *a1 = &unk_1F0A59C28;
  std::__function::__value_func<wchar_t ()(char const*&)>::~__value_func[abi:ne180100](a1 + 2);
  return a1;
}

void *quasar::tennessee::IterableCollation<std::string_view,wchar_t>::~IterableCollation(void *a1)
{
  *a1 = &unk_1F0A59C78;
  a1[13] = &unk_1F0A59C50;
  std::__function::__value_func<wchar_t ()(char const*&)>::~__value_func[abi:ne180100](a1 + 15);
  a1[7] = &unk_1F0A59C28;
  std::__function::__value_func<wchar_t ()(char const*&)>::~__value_func[abi:ne180100](a1 + 9);
  std::__function::__value_func<wchar_t ()(char const*&)>::~__value_func[abi:ne180100](a1 + 3);
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void quasar::tennessee::IterableCollation<std::string_view,wchar_t>::~IterableCollation(void *a1)
{
  *a1 = &unk_1F0A59C78;
  a1[13] = &unk_1F0A59C50;
  std::__function::__value_func<wchar_t ()(char const*&)>::~__value_func[abi:ne180100](a1 + 15);
  a1[7] = &unk_1F0A59C28;
  std::__function::__value_func<wchar_t ()(char const*&)>::~__value_func[abi:ne180100](a1 + 9);
  std::__function::__value_func<wchar_t ()(char const*&)>::~__value_func[abi:ne180100](a1 + 3);
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::tennessee::IterableCollation<std::string_view,wchar_t>::GetComparator(uint64_t a1)
{
  return a1 + 56;
}

uint64_t quasar::tennessee::IterableCollation<std::string_view,wchar_t>::GetPrefixComparator(uint64_t a1)
{
  return a1 + 104;
}

void quasar::tennessee::IterableCollation<std::string_view,wchar_t>::Copy()
{
}

uint64_t std::__function::__value_func<wchar_t ()(char const*&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  }
  return a1;
}

void quasar::tennessee::IterableCollation<std::string_view,wchar_t>::ComparatorImpl<false>::~ComparatorImpl(void *a1)
{
  *a1 = &unk_1F0A59C28;
  std::__function::__value_func<wchar_t ()(char const*&)>::~__value_func[abi:ne180100](a1 + 2);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::tennessee::IterableCollation<std::string_view,wchar_t>::ComparatorImpl<false>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  uint64_t v12 = *a3;
  uint64_t v13 = v4;
  do
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (!v5
      || (uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, &v13),
          (uint64_t v7 = *(void *)(a1 + 40)) == 0))
    {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v7 + 48))(v7, &v12);
    uint64_t v9 = *(void *)(a1 + 8);
    if (v9)
    {
      LODWORD(v6) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v6);
      LODWORD(v8) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), v8);
    }
  }
  while (v6 == v8 && v8 != 0);
  if ((int)v6 < (int)v8) {
    return 0xFFFFFFFFLL;
  }
  else {
    return (int)v6 > (int)v8;
  }
}

void *quasar::tennessee::IterableCollation<std::string_view,wchar_t>::ComparatorImpl<true>::~ComparatorImpl(void *a1)
{
  *a1 = &unk_1F0A59C50;
  std::__function::__value_func<wchar_t ()(char const*&)>::~__value_func[abi:ne180100](a1 + 2);
  return a1;
}

void quasar::tennessee::IterableCollation<std::string_view,wchar_t>::ComparatorImpl<true>::~ComparatorImpl(void *a1)
{
  *a1 = &unk_1F0A59C50;
  std::__function::__value_func<wchar_t ()(char const*&)>::~__value_func[abi:ne180100](a1 + 2);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::tennessee::IterableCollation<std::string_view,wchar_t>::ComparatorImpl<true>::operator()(uint64_t a1, uint64_t *a2, unsigned char **a3)
{
  uint64_t v3 = *a2;
  uint64_t v13 = *a3;
  uint64_t v14 = v3;
  if (!*v13)
  {
    memset(v12, 0, sizeof(v12));
    quasar::QuasarExceptionMessage::QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v12);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v12);
  }
  while (1)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (!v5
      || (uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, &v14),
          (uint64_t v7 = *(void *)(a1 + 40)) == 0))
    {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, unsigned char **))(*(void *)v7 + 48))(v7, &v13);
    uint64_t v9 = *(void *)(a1 + 8);
    if (v9)
    {
      LODWORD(v6) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v6);
      LODWORD(v8) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), v8);
    }
    if (v6 != v8 || v8 == 0) {
      break;
    }
    if (!*v13)
    {
      LODWORD(v8) = v6;
      break;
    }
  }
  if ((int)v6 < (int)v8) {
    return 0xFFFFFFFFLL;
  }
  else {
    return (int)v6 > (int)v8;
  }
}

void std::make_unique[abi:ne180100]<quasar::tennessee::IterableCollation<std::string_view,wchar_t>,std::shared_ptr<quasar::tennessee::Mapping<wchar_t,wchar_t>> const&,std::function<wchar_t ()(char const*&)> const&>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1B1C77BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<wchar_t ()(char const*&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  MEMORY[0x1B3EA8670](v4, 0x10E1C40EDC78F6FLL);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<wchar_t ()(char const*&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1B1C77F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1B3EA8670](v18, 0x10B3C4055590446);

  _Unwind_Resume(a1);
}

void sub_1B1C790AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a66 = (uint64_t)&a45;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a66);
  a66 = (uint64_t)&a48;
  std::vector<std::vector<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a66);
  a66 = (uint64_t)&a51;
  std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a66);

  _Unwind_Resume(a1);
}

void **std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v16[2] = v14 + 24;
    std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<std::vector<std::vector<quasar::Token>>>>::~__split_buffer(v16);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B1C797D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::vector<quasar::Token>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<std::vector<unsigned long>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v16[2] = v14 + 24;
    std::vector<std::vector<std::vector<unsigned long>>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer(v16);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B1C79918(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v16[2] = v14 + 24;
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B1C79A58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        unint64_t v6 = v4;
        std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        unint64_t v6 = v4;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<quasar::Token>>>*>,std::reverse_iterator<std::vector<std::vector<std::vector<quasar::Token>>>*>,std::reverse_iterator<std::vector<std::vector<std::vector<quasar::Token>>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<quasar::Token>>>*>,std::reverse_iterator<std::vector<std::vector<std::vector<quasar::Token>>>*>,std::reverse_iterator<std::vector<std::vector<std::vector<quasar::Token>>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  float32x2_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<quasar::Token>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<quasar::Token>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<quasar::Token>>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<quasar::Token>>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<std::vector<quasar::Token>>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::vector<std::vector<quasar::Token>>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::vector<std::vector<unsigned long>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v12);
    long long v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
    *(void *)long long v14 = 0;
    *(_OWORD *)long long v14 = *(_OWORD *)a2;
    *((void *)v14 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v16[2] = v14 + 24;
    std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v16);
    long long v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    long long v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B1C79EE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  float32x2_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<std::vector<std::vector<unsigned long>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<unsigned long>>>,std::reverse_iterator<std::vector<std::vector<unsigned long>>*>,std::reverse_iterator<std::vector<std::vector<unsigned long>>*>,std::reverse_iterator<std::vector<std::vector<unsigned long>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<unsigned long>>>,std::reverse_iterator<std::vector<std::vector<unsigned long>>*>,std::reverse_iterator<std::vector<std::vector<unsigned long>>*>,std::reverse_iterator<std::vector<std::vector<unsigned long>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  float32x2_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<unsigned long>>>,std::reverse_iterator<std::vector<std::vector<unsigned long>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<unsigned long>>>,std::reverse_iterator<std::vector<std::vector<unsigned long>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,int>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1C7A204(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::ArpaFileParser(uint64_t a1, long long *a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A57D80;
  long long v3 = *a2;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = *((_DWORD *)a2 + 4);
  *(_OWORD *)(a1 + 8) = v3;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3;
  double result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(void *)(a1 + 88) = 0;
  return result;
}

void quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::~ArpaFileParser(quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser *this)
{
  *(void *)this = &unk_1F0A57D80;
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
}

uint64_t quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::LineReference(quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"line ", 5);
  uint64_t v2 = (void *)std::ostream::operator<<();
  long long v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" [", 2);
  uint64_t v6 = *((void *)this + 6);
  uint64_t v5 = (char *)this + 48;
  uint64_t v4 = v6;
  int v7 = v5[23];
  if (v7 >= 0) {
    uint64_t v8 = (uint64_t)v5;
  }
  else {
    uint64_t v8 = v4;
  }
  if (v7 >= 0) {
    uint64_t v9 = v5[23];
  }
  else {
    uint64_t v9 = *((void *)v5 + 1);
  }
  unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v12[1] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v14);
}

void sub_1B1C7A454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::ShouldWarn(quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser *this)
{
  unsigned int v1 = *((_DWORD *)this + 11);
  if (v1 == -1) {
    return 0;
  }
  *((_DWORD *)this + 11) = v1 + 1;
  return v1 < *((_DWORD *)this + 6);
}

_OWORD *std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  int v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    int v7 = operator new(0x40uLL);
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    float32x2_t v9[2] = 0;
    *uint64_t v9 = 0;
    *((void *)v7 + 7) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t QuasarC_setSpeechRecognizerDisableOverBuffer(uint64_t result)
{
  sDisableOverBuffer = result;
  return result;
}

uint64_t QuasarC_getSpeechRecognizerDisableOverBuffer()
{
  return sDisableOverBuffer;
}

uint64_t QuasarC_setLogLevel(uint64_t result)
{
  quasar::gLogLevel = result;
  if (result == 5) {
    int v1 = 1;
  }
  else {
    int v1 = 5;
  }
  if (result == 4) {
    int v1 = 0;
  }
  if ((int)result < 4) {
    int v1 = -1;
  }
  kaldi::g_kaldi_verbose_level = v1;
  return result;
}

uint64_t QuasarCSystemConfig_new()
{
  v2[4] = *MEMORY[0x1E4F143B8];
  v2[0] = &unk_1F0A5A700;
  v2[3] = v2;
  uint64_t v0 = CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>((uint64_t)v2);
  std::__function::__value_func<quasar::SystemConfig * ()(void)>::~__value_func[abi:ne180100](v2);
  return v0;
}

void sub_1B1C7A614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<quasar::SystemConfig * ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1);
}

uint64_t QuasarCSystemConfig_delete(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 56))();
  }
  return result;
}

uint64_t QuasarCSystemConfig_readJsonFile(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2;
  v5[0] = &unk_1F0A5A7B0;
  v5[1] = &v4;
  void v5[3] = v5;
  uint64_t v2 = CapiHelpers_execute<QuasarCSystemConfig,quasar::SystemConfig,int>(a1, (uint64_t)v5);
  std::__function::__value_func<int ()(quasar::SystemConfig *)>::~__value_func[abi:ne180100](v5);
  return v2;
}

void sub_1B1C7A848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<int ()(quasar::SystemConfig *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CapiHelpers_execute<QuasarCSystemConfig,quasar::SystemConfig,int>(uint64_t a1, uint64_t a2)
{
  return std::function<int ()(quasar::SystemConfig *)>::operator()(a2, a1);
}

void QuasarCSystemConfigInfoCacheReset(quasar::SystemConfig::SystemConfigInfoCache *a1)
{
  uint64_t v2 = (std::mutex *)quasar::SystemConfig::SystemConfigInfoCache::SingletonInstance(a1);
  quasar::SystemConfig::SystemConfigInfoCache::reset(v2, (uint64_t)a1);
}

void std::__function::__func<QuasarCSystemConfig * CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(std::function<quasar::SystemConfig * ()(void)>)::$_0,std::allocator<QuasarCSystemConfig * CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(std::function<quasar::SystemConfig * ()(void)>)::$_0>,quasar::SystemConfig* ()(void)>::~__func()
{
}

void *std::__function::__func<QuasarCSystemConfig * CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(std::function<quasar::SystemConfig * ()(void)>)::$_0,std::allocator<QuasarCSystemConfig * CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(std::function<quasar::SystemConfig * ()(void)>)::$_0>,quasar::SystemConfig* ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1F0A5A700;
  return result;
}

void std::__function::__func<QuasarCSystemConfig * CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(std::function<quasar::SystemConfig * ()(void)>)::$_0,std::allocator<QuasarCSystemConfig * CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(std::function<quasar::SystemConfig * ()(void)>)::$_0>,quasar::SystemConfig* ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5A700;
}

void std::__function::__func<QuasarCSystemConfig * CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(std::function<quasar::SystemConfig * ()(void)>)::$_0,std::allocator<QuasarCSystemConfig * CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(std::function<quasar::SystemConfig * ()(void)>)::$_0>,quasar::SystemConfig* ()(void)>::operator()()
{
}

void sub_1B1C7AA90(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C4039F8198BLL);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QuasarCSystemConfig * CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(std::function<quasar::SystemConfig * ()(void)>)::$_0,std::allocator<QuasarCSystemConfig * CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(std::function<quasar::SystemConfig * ()(void)>)::$_0>,quasar::SystemConfig* ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QuasarCSystemConfig * CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(std::function<quasar::SystemConfig * ()(void)>)::$_0,std::allocator<QuasarCSystemConfig * CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>(std::function<quasar::SystemConfig * ()(void)>)::$_0>,quasar::SystemConfig* ()(void)>::target_type()
{
}

void *std::__function::__value_func<quasar::SystemConfig * ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::function<int ()(quasar::SystemConfig *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void std::__function::__func<QuasarCSystemConfig_readJsonFile::$_0,std::allocator<QuasarCSystemConfig_readJsonFile::$_0>,int ()(quasar::SystemConfig *)>::~__func()
{
}

void *std::__function::__func<QuasarCSystemConfig_readJsonFile::$_0,std::allocator<QuasarCSystemConfig_readJsonFile::$_0>,int ()(quasar::SystemConfig *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F0A5A7B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QuasarCSystemConfig_readJsonFile::$_0,std::allocator<QuasarCSystemConfig_readJsonFile::$_0>,int ()(quasar::SystemConfig *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5A7B0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<QuasarCSystemConfig_readJsonFile::$_0,std::allocator<QuasarCSystemConfig_readJsonFile::$_0>,int ()(quasar::SystemConfig *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v8, **(char ***)(a1 + 8));
  memset(v7, 0, sizeof(v7));
  memset(v5, 0, sizeof(v5));
  int v6 = 1065353216;
  unsigned int JsonFile = quasar::SystemConfig::readJsonFile(v2, (uint64_t)v8, v7, (uint64_t)v5, 0, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v5);
  *(void *)&v5[0] = v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v5);
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  return JsonFile > 1;
}

void sub_1B1C7AD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a9);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (*(char *)(v9 - 17) < 0) {
    operator delete(*(void **)(v9 - 40));
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QuasarCSystemConfig_readJsonFile::$_0,std::allocator<QuasarCSystemConfig_readJsonFile::$_0>,int ()(quasar::SystemConfig *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<QuasarCSystemConfig_readJsonFile::$_0,std::allocator<QuasarCSystemConfig_readJsonFile::$_0>,int ()(quasar::SystemConfig *)>::target_type()
{
}

void *std::__function::__value_func<int ()(quasar::SystemConfig *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL quasar::result_handler::VoiceEditingRecoveryHandler::isMaybeCompleteCommandPackageExecutionIntentionSame(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  if (!*(unsigned char *)(*a2 + 368)) {
    return 0;
  }
  uint64_t v4 = *a3;
  if (!*(unsigned char *)(*a3 + 368)) {
    return 0;
  }
  uint64_t v5 = *(unsigned __int8 **)(v3 + 336);
  if (*(unsigned __int8 **)(v3 + 344) == v5) {
    return 0;
  }
  int v6 = *(unsigned __int8 **)(v4 + 336);
  if (*(unsigned __int8 **)(v4 + 344) == v6) {
    return 0;
  }
  uint64_t v7 = v5[23];
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v5[23];
  }
  else {
    uint64_t v8 = *((void *)v5 + 1);
  }
  uint64_t v9 = v6[23];
  int v10 = (char)v9;
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *((void *)v6 + 1);
  }
  if (v8 != v9) {
    return 0;
  }
  if (v10 >= 0) {
    unint64_t v11 = v6;
  }
  else {
    unint64_t v11 = *(unsigned __int8 **)v6;
  }
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v5, v11, *((void *)v5 + 1))) {
      return 0;
    }
  }
  else if (v5[23])
  {
    uint64_t v12 = v5;
    while (*v12 == *v11)
    {
      ++v12;
      ++v11;
      if (!--v7) {
        goto LABEL_21;
      }
    }
    return 0;
  }
LABEL_21:
  if ((char)v5[47] < 0)
  {
    char v13 = (char *)*((void *)v5 + 3);
    uint64_t v14 = *((void *)v5 + 4);
  }
  else
  {
    char v13 = (char *)(v5 + 24);
    uint64_t v14 = v5[47];
  }
  quasar::utf8::utf8ToUtf16(v13, v14, (uint64_t)v25);
  if ((char)v6[47] < 0)
  {
    uint64_t v15 = (char *)*((void *)v6 + 3);
    uint64_t v16 = *((void *)v6 + 4);
  }
  else
  {
    uint64_t v15 = (char *)(v6 + 24);
    uint64_t v16 = v6[47];
  }
  quasar::utf8::utf8ToUtf16(v15, v16, (uint64_t)v24);
  BOOL v17 = quasar::UInsensitiveEquals();
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)v24);
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)v25);
  if (!v17) {
    return 0;
  }
  if ((char)v5[71] < 0)
  {
    uint64_t v18 = (char *)*((void *)v5 + 6);
    uint64_t v19 = *((void *)v5 + 7);
  }
  else
  {
    uint64_t v18 = (char *)(v5 + 48);
    uint64_t v19 = v5[71];
  }
  quasar::utf8::utf8ToUtf16(v18, v19, (uint64_t)v25);
  if ((char)v6[71] < 0)
  {
    int v22 = (char *)*((void *)v6 + 6);
    uint64_t v23 = *((void *)v6 + 7);
  }
  else
  {
    int v22 = (char *)(v6 + 48);
    uint64_t v23 = v6[71];
  }
  quasar::utf8::utf8ToUtf16(v22, v23, (uint64_t)v24);
  BOOL v20 = quasar::UInsensitiveEquals();
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)v24);
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)v25);
  return v20;
}

void sub_1B1C7AFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t quasar::result_handler::VoiceEditingRecoveryHandler::VoiceEditingRecoveryHandler(uint64_t a1, uint64_t *a2, void *a3)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1F0A1C860;
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *a3;
  uint64_t v5 = a3[1];
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 48) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 56), "en_US");
  if (quasar::gLogLevel >= 5)
  {
    memset(v8, 0, sizeof(v8));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"VoiceEditingRecoveryHandler: ", 29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Created VoiceEditingRecoveryHandler", 35);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v8);
  }
  return a1;
}

void sub_1B1C7B0FC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v3);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 40);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](v2, 0);
  uint64_t v6 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v1);
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingRecoveryHandler::~VoiceEditingRecoveryHandler(quasar::result_handler::VoiceEditingRecoveryHandler *this)
{
  *(void *)this = &unk_1F0A1C860;
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)this + 3, 0);
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  quasar::result_handler::VoiceEditingRecoveryHandler::~VoiceEditingRecoveryHandler(this);
  JUMPOUT(0x1B3EA8670);
}

quasar::result_handler::Package *quasar::result_handler::VoiceEditingRecoveryHandler::handlePartial(uint64_t a1, uint64_t a2, quasar::result_handler::Package **a3)
{
  *(unsigned char *)(a1 + 48) = 0;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v6 = v4;
  (*(void (**)(uint64_t, uint64_t, quasar::result_handler::Package **))(*(void *)v3 + 24))(v3, a2, &v6);
  double result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    quasar::result_handler::Package::~Package(result);
    return (quasar::result_handler::Package *)MEMORY[0x1B3EA8670]();
  }
  return result;
}

void sub_1B1C7B2EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)va, 0);
  _Unwind_Resume(a1);
}

quasar::result_handler::Package *quasar::result_handler::VoiceEditingRecoveryHandler::handleCommandCandidate(quasar::result_handler::Package *result, uint64_t a2, uint64_t *a3)
{
  if (*a3)
  {
    uint64_t v5 = (uint64_t)result;
    if (quasar::gLogLevel >= 5)
    {
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v45 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v45);
      uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"VoiceEditingRecoveryHandler: ", 29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(now=", 5);
      uint64_t v7 = (void *)std::ostream::operator<<();
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") recv commandCandidate: ", 25);
      quasar::getTopChoice(*a3 + 48, 1, v43);
      if ((v44 & 0x80u) == 0) {
        uint64_t v9 = v43;
      }
      else {
        uint64_t v9 = (void **)v43[0];
      }
      if ((v44 & 0x80u) == 0) {
        uint64_t v10 = v44;
      }
      else {
        uint64_t v10 = (uint64_t)v43[1];
      }
      unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
      uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ::::: ", 7);
      quasar::topChoiceWithTimes((uint64_t **)(*a3 + 48), __p);
      if ((v42 & 0x80u) == 0) {
        char v13 = __p;
      }
      else {
        char v13 = (void **)__p[0];
      }
      if ((v42 & 0x80u) == 0) {
        uint64_t v14 = v42;
      }
      else {
        uint64_t v14 = (uint64_t)__p[1];
      }
      uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" utteranceStartMs=", 18);
      std::ostream::operator<<();
      if ((char)v42 < 0) {
        operator delete(__p[0]);
      }
      if ((char)v44 < 0) {
        operator delete(v43[0]);
      }
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v45);
      if (quasar::gLogLevel >= 5)
      {
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v45 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v45);
        uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"VoiceEditingRecoveryHandler: ", 29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(now=", 5);
        BOOL v17 = (void *)std::ostream::operator<<();
        uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)") handleCommandCandidate: maybeCompleteCommand ", 47);
        if (*(unsigned char *)(*a3 + 368)) {
          quasar::result_handler::operator<<(v18, *a3 + 184);
        }
        else {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"null", 4);
        }
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v45);
      }
    }
    if (!*(unsigned char *)(*a3 + 368) || *(void *)(*a3 + 344) == *(void *)(*a3 + 336)) {
      goto LABEL_60;
    }
    int v19 = (*(uint64_t (**)(void))(**(void **)(v5 + 32) + 40))(*(void *)(v5 + 32));
    if (quasar::gLogLevel >= 5)
    {
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v45 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v45);
      BOOL v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"VoiceEditingRecoveryHandler: ", 29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"(now=", 5);
      uint64_t v21 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)") handleCommandCandidate: undoEvent ", 36);
      int v22 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" precedingUtterance size ", 25);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v45);
    }
    if (*(void *)(v5 + 24)) {
      int v23 = v19;
    }
    else {
      int v23 = 0;
    }
    uint64_t v24 = *a3;
    if (v23 == 1 && *(void *)(v24 + 192) == *(void *)(v24 + 184))
    {
      if (quasar::result_handler::VoiceEditingRecoveryHandler::isMaybeCompleteCommandPackageExecutionIntentionSame(v5, a3, (uint64_t *)(v5 + 24)))
      {
        if (quasar::gLogLevel >= 5)
        {
          long long v60 = 0u;
          long long v61 = 0u;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v45 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v45);
          long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"VoiceEditingRecoveryHandler: ", 29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(now=", 5);
          long long v26 = (void *)std::ostream::operator<<();
          int v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)") handleCommandCandidate: recovery for respeak ", 47);
          v43[0] = (void *)(*a3 + 184);
          quasar::operator<<<std::optional<quasar::result_handler::CommandData>>(v27, (uint64_t *)v43);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v45);
        }
        std::__optional_destruct_base<quasar::result_handler::CommandData,false>::reset[abi:ne180100](*a3 + 184);
        uint64_t v28 = *a3;
        uint64_t v30 = *(void *)(*a3 + 160);
        for (uint64_t i = *(void *)(*a3 + 168);
              i != v30;
              std::allocator<quasar::result_handler::CommandData>::destroy[abi:ne180100](v28 + 176, i))
        {
          i -= 184;
        }
        *(void *)(v28 + 168) = v30;
        goto LABEL_60;
      }
      uint64_t v24 = *a3;
    }
    if (!*(unsigned char *)(v24 + 368)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    long long v31 = *(uint64_t **)(v24 + 336);
    if (*((char *)v31 + 23) < 0)
    {
      uint64_t v36 = v31[1];
      if (v36 != 4)
      {
        if (v36 != 14
          || (*(void *)*v31 == 0x6769626D61736964
            ? (BOOL v37 = *(void *)(*v31 + 6) == 0x6E6F697461756769)
            : (BOOL v37 = 0),
              !v37))
        {
LABEL_59:
          operator new();
        }
LABEL_60:
        *(unsigned char *)(v5 + 48) = 0;
        uint64_t v38 = *(void *)(v5 + 16);
        long long v39 = (quasar::result_handler::Package *)*a3;
        *a3 = 0;
        long long v40 = v39;
        (*(void (**)(uint64_t, uint64_t, quasar::result_handler::Package **))(*(void *)v38 + 32))(v38, a2, &v40);
        double result = v40;
        long long v40 = 0;
        if (result)
        {
          quasar::result_handler::Package::~Package(result);
          return (quasar::result_handler::Package *)MEMORY[0x1B3EA8670]();
        }
        return result;
      }
      long long v31 = (uint64_t *)*v31;
    }
    else
    {
      int v32 = *((unsigned __int8 *)v31 + 23);
      if (v32 != 4)
      {
        if (v32 != 14) {
          goto LABEL_59;
        }
        BOOL v33 = (uint64_t *)*v31;
        uint64_t v34 = *(uint64_t *)((char *)v31 + 6);
        if (v33 != (uint64_t *)0x6769626D61736964 || v34 != 0x6E6F697461756769) {
          goto LABEL_59;
        }
        goto LABEL_60;
      }
    }
    if (*(_DWORD *)v31 != 1868852853) {
      goto LABEL_59;
    }
    goto LABEL_60;
  }
  return result;
}

void sub_1B1C7B908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
}

void *quasar::operator<<<std::optional<quasar::result_handler::CommandData>>(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*(unsigned char *)(v3 + 184)) {
    quasar::result_handler::operator<<(a1, v3);
  }
  else {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"null", 4);
  }
  return a1;
}

quasar::result_handler::Package *quasar::result_handler::VoiceEditingRecoveryHandler::handleFinalCandidate(void *a1, unsigned int a2, quasar::result_handler::Package **a3)
{
  unsigned int v11 = a2;
  (*(void (**)(void *, unsigned int *))(*a1 + 72))(a1, &v11);
  uint64_t v5 = a1[2];
  uint64_t v6 = v11;
  uint64_t v7 = *a3;
  *a3 = 0;
  uint64_t v10 = v7;
  (*(void (**)(uint64_t, uint64_t, quasar::result_handler::Package **))(*(void *)v5 + 40))(v5, v6, &v10);
  double result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    quasar::result_handler::Package::~Package(result);
    return (quasar::result_handler::Package *)MEMORY[0x1B3EA8670](v9);
  }
  return result;
}

void sub_1B1C7BA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, quasar::result_handler::Package *a9)
{
}

quasar::result_handler::Package *quasar::result_handler::VoiceEditingRecoveryHandler::handleFinal(uint64_t a1, uint64_t a2, quasar::result_handler::Package **a3)
{
  uint64_t v6 = *a3;
  if (!*((unsigned char *)*a3 + 80))
  {
    (*(void (**)(void))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32));
    uint64_t v6 = *a3;
  }
  *(unsigned char *)(a1 + 48) = 0;
  uint64_t v7 = *(void *)(a1 + 16);
  *a3 = 0;
  uint64_t v9 = v6;
  (*(void (**)(uint64_t, uint64_t, quasar::result_handler::Package **))(*(void *)v7 + 48))(v7, a2, &v9);
  double result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    quasar::result_handler::Package::~Package(result);
    return (quasar::result_handler::Package *)MEMORY[0x1B3EA8670]();
  }
  return result;
}

void sub_1B1C7BB6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)va, 0);
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingRecoveryHandler::handlePause(quasar::result_handler::VoiceEditingRecoveryHandler *this)
{
  if (quasar::gLogLevel >= 5)
  {
    memset(v4, 0, sizeof(v4));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"VoiceEditingRecoveryHandler: ", 29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"(now=", 5);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") handlePause", 13);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v4);
  }
  if (!*((unsigned char *)this + 48)) {
    (*(void (**)(void))(**((void **)this + 4) + 40))(*((void *)this + 4));
  }
  *((unsigned char *)this + 48) = 0;
}

void sub_1B1C7BC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::result_handler::VoiceEditingRecoveryHandler::handleResume(quasar::result_handler::VoiceEditingRecoveryHandler *this)
{
  if (quasar::gLogLevel >= 5)
  {
    memset(v4, 0, sizeof(v4));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"VoiceEditingRecoveryHandler: ", 29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"(now=", 5);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") handleResume", 14);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v4);
  }
  *((unsigned char *)this + 48) = 1;
}

void sub_1B1C7BD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v2;
LABEL_6:
      operator delete(v2);
    }
  }
  else if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    goto LABEL_6;
  }
  return a1;
}

void std::__optional_storage_base<quasar::result_handler::CommandData,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<quasar::result_handler::CommandData,false> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 184) == *(unsigned __int8 *)(a2 + 184))
  {
    if (*(unsigned char *)(a1 + 184))
    {
      quasar::result_handler::CommandData::operator=(a1, a2);
    }
  }
  else if (*(unsigned char *)(a1 + 184))
  {
    std::__optional_destruct_base<quasar::result_handler::CommandData,false>::reset[abi:ne180100](a1);
  }
  else
  {
    *(unsigned char *)(quasar::result_handler::CommandData::CommandData(a1, a2) + 184) = 1;
  }
}

uint64_t quasar::result_handler::CommandData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
    *(_DWORD *)(a1 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a2 + 120);
    std::string::operator=((std::string *)(a1 + 128), (const std::string *)(a2 + 128));
  }
  else
  {
    std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1 + 24, *(uint64_t **)(a2 + 24), *(uint64_t **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
    std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1 + 48, *(uint64_t **)(a2 + 48), *(uint64_t **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
    std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1 + 72, *(uint64_t **)(a2 + 72), *(uint64_t **)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3));
    std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
    *(_DWORD *)(a1 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a2 + 120);
    std::string::operator=((std::string *)(a1 + 128), (const std::string *)(a2 + 128));
    std::vector<quasar::result_handler::CommandInterpretation>::__assign_with_size[abi:ne180100]<quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*>(a1 + 152, *(std::string **)(a2 + 152), *(quasar::result_handler::CommandInterpretation **)(a2 + 160), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 3));
  }
  int v4 = *(_DWORD *)(a2 + 176);
  *(unsigned char *)(a1 + 18std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(unsigned char *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v4;
  return a1;
}

{
  void **v4;
  long long v5;
  void **v6;
  long long v7;
  int v8;

  std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)(a1 + 24));
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a2 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a2 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)(a1 + 48));
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)(a1 + 72));
  *(_OWORD *)(a1 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a2 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a2 + 88) = 0;
  int v4 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v4);
  }
  uint64_t v5 = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 11std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(void *)(a2 + 112);
  *(_OWORD *)int v4 = v5;
  *(unsigned char *)(a2 + 119) = 0;
  *(unsigned char *)(a2 + 96) = 0;
  *(_DWORD *)(a1 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a2 + 120);
  uint64_t v6 = (void **)(a1 + 128);
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*v6);
  }
  uint64_t v7 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)uint64_t v6 = v7;
  *(unsigned char *)(a2 + 151) = 0;
  *(unsigned char *)(a2 + 128) = 0;
  std::vector<quasar::result_handler::CommandInterpretation>::__vdeallocate((void **)(a1 + 152));
  *(_OWORD *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a2 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a2 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a2 + 168) = 0;
  uint64_t v8 = *(_DWORD *)(a2 + 176);
  *(unsigned char *)(a1 + 18std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(unsigned char *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v8;
  return a1;
}

void std::__optional_destruct_base<quasar::result_handler::CommandData,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 184))
  {
    uint64_t v2 = (void **)(a1 + 152);
    std::vector<quasar::result_handler::CommandInterpretation>::__destroy_vector::operator()[abi:ne180100](&v2);
    if (*(char *)(a1 + 151) < 0) {
      operator delete(*(void **)(a1 + 128));
    }
    if (*(char *)(a1 + 119) < 0) {
      operator delete(*(void **)(a1 + 96));
    }
    uint64_t v2 = (void **)(a1 + 72);
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v2);
    uint64_t v2 = (void **)(a1 + 48);
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v2);
    uint64_t v2 = (void **)(a1 + 24);
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v2);
    uint64_t v2 = (void **)a1;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v2);
    *(unsigned char *)(a1 + 184) = 0;
  }
}

void std::vector<quasar::result_handler::CommandInterpretation>::__assign_with_size[abi:ne180100]<quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*>(uint64_t a1, std::string *__str, quasar::result_handler::CommandInterpretation *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(std::string **)a1;
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<quasar::result_handler::CommandInterpretation>::__vdeallocate((void **)a1);
    if (a4 > 0x186186186186186) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x9E79E79E79E79E7ALL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0xC30C30C30C30C3) {
      unint64_t v11 = 0x186186186186186;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<quasar::result_handler::CommandInterpretation>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::result_handler::CommandInterpretation>,quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*>(v8, (quasar::result_handler::CommandInterpretation *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    char v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::result_handler::CommandInterpretation *,quasar::result_handler::CommandInterpretation *,quasar::result_handler::CommandInterpretation *>((int)&v17, __str, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::result_handler::CommandInterpretation>,quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*>(v8, (quasar::result_handler::CommandInterpretation *)v13, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::result_handler::CommandInterpretation *,quasar::result_handler::CommandInterpretation *,quasar::result_handler::CommandInterpretation *>((int)&v18, __str, (std::string *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 168;
      std::allocator<quasar::result_handler::CommandInterpretation>::destroy[abi:ne180100](v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B1C7C14C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1C7C154(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<quasar::result_handler::CommandInterpretation>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    int v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 168;
        std::allocator<quasar::result_handler::CommandInterpretation>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      int v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<quasar::result_handler::CommandInterpretation>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x186186186186187) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::result_handler::CommandInterpretation>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[168 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::result_handler::CommandInterpretation>,quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*>(uint64_t a1, quasar::result_handler::CommandInterpretation *a2, quasar::result_handler::CommandInterpretation *a3, std::string *this)
{
  uint64_t v4 = this;
  unint64_t v10 = this;
  unint64_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      quasar::result_handler::CommandInterpretation::CommandInterpretation(v4, v6);
      uint64_t v6 = (const quasar::result_handler::CommandInterpretation *)((char *)v6 + 168);
      uint64_t v4 = v11 + 7;
      v11 += 7;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandInterpretation>,quasar::result_handler::CommandInterpretation*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1C7C2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *quasar::result_handler::CommandInterpretation::CommandInterpretation(std::string *this, const quasar::result_handler::CommandInterpretation *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  std::string::size_type v7 = *((void *)a2 + 9);
  __int16 v8 = *((_WORD *)a2 + 40);
  this[3].__r_.__value_.__r.__words[2] = 0;
  LOWORD(this[3].__r_.__value_.__r.__words[1]) = v8;
  this[3].__r_.__value_.__r.__words[0] = v7;
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[4].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 88), *((long long **)a2 + 11), *((long long **)a2 + 12), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 12) - *((void *)a2 + 11)) >> 3));
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 112), *((long long **)a2 + 14), *((long long **)a2 + 15), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 15) - *((void *)a2 + 14)) >> 3));
  this[5].__r_.__value_.__r.__words[2] = 0;
  this[6].__r_.__value_.__r.__words[0] = 0;
  this[6].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 136), *((long long **)a2 + 17), *((long long **)a2 + 18), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 18) - *((void *)a2 + 17)) >> 3));
  this[6].__r_.__value_.__r.__words[2] = *((void *)a2 + 20);
  return this;
}

void sub_1B1C7C428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(char *)(v10 + 47) < 0) {
    operator delete(*v11);
  }
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandInterpretation>,quasar::result_handler::CommandInterpretation*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandInterpretation>,quasar::result_handler::CommandInterpretation*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandInterpretation>,quasar::result_handler::CommandInterpretation*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 168;
      std::allocator<quasar::result_handler::CommandInterpretation>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::result_handler::CommandInterpretation *,quasar::result_handler::CommandInterpretation *,quasar::result_handler::CommandInterpretation *>(int a1, std::string *__str, std::string *a3, std::string *this)
{
  uint64_t v5 = __str;
  if (__str == a3) {
    return __str;
  }
  long long v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    std::string::operator=(this + 2, v5 + 2);
    __int16 v7 = v5[3].__r_.__value_.__r.__words[1];
    this[3].__r_.__value_.__r.__words[0] = v5[3].__r_.__value_.__r.__words[0];
    LOWORD(this[3].__r_.__value_.__r.__words[1]) = v7;
    if (this != v5)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)&this[3].__r_.__value_.__r.__words[2], (std::string *)v5[3].__r_.__value_.__r.__words[2], (long long *)v5[4].__r_.__value_.__l.__data_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[4].__r_.__value_.__r.__words[0] - v5[3].__r_.__value_.__r.__words[2]) >> 3));
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)&this[4].__r_.__value_.__r.__words[2], (std::string *)v5[4].__r_.__value_.__r.__words[2], (long long *)v5[5].__r_.__value_.__l.__data_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[5].__r_.__value_.__r.__words[0] - v5[4].__r_.__value_.__r.__words[2]) >> 3));
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)&this[5].__r_.__value_.__r.__words[2], (std::string *)v5[5].__r_.__value_.__r.__words[2], (long long *)v5[6].__r_.__value_.__l.__data_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[6].__r_.__value_.__r.__words[0] - v5[5].__r_.__value_.__r.__words[2]) >> 3));
    }
    this[6].__r_.__value_.__r.__words[2] = v5[6].__r_.__value_.__r.__words[2];
    this += 7;
    v5 += 7;
  }
  while (v5 != v6);
  return v6;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::result_handler::CommandInterpretation>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x186186186186187) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(168 * a2);
}

uint64_t quasar::result_handler::CommandData::CommandData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((void *)a1, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((void *)(a1 + 24), *(uint64_t **)(a2 + 24), *(uint64_t **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((void *)(a1 + 48), *(uint64_t **)(a2 + 48), *(uint64_t **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
  *(void *)(a1 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((void *)(a1 + 72), *(uint64_t **)(a2 + 72), *(uint64_t **)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3));
  if (*(char *)(a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 96), *(const std::string::value_type **)(a2 + 96), *(void *)(a2 + 104));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 11std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(void *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = v4;
  }
  *(_DWORD *)(a1 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a2 + 120);
  if (*(char *)(a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 128), *(const std::string::value_type **)(a2 + 128), *(void *)(a2 + 136));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = v5;
  }
  *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 168) = 0;
  std::vector<quasar::result_handler::CommandInterpretation>::__init_with_size[abi:ne180100]<quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*>((std::string *)(a1 + 152), *(quasar::result_handler::CommandInterpretation **)(a2 + 152), *(quasar::result_handler::CommandInterpretation **)(a2 + 160), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 3));
  int v6 = *(_DWORD *)(a2 + 176);
  *(unsigned char *)(a1 + 18std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(unsigned char *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v6;
  return a1;
}

void sub_1B1C7C7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(char *)(v10 + 119) < 0) {
    operator delete(*v11);
  }
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)v10;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

std::string *std::vector<quasar::result_handler::CommandInterpretation>::__init_with_size[abi:ne180100]<quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*>(std::string *result, quasar::result_handler::CommandInterpretation *a2, quasar::result_handler::CommandInterpretation *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<quasar::result_handler::CommandInterpretation>::__vallocate[abi:ne180100](result, a4);
    double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::result_handler::CommandInterpretation>,quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B1C7C8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::result_handler::CommandInterpretation>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *quasar::SpeakerCodeTraining::SpeakerCodeTraining(std::string *this, long long *a2, long long *a3, int a4, unsigned int a5, unsigned int a6, int a7, std::string::value_type a8, float a9, char a10, int a11, int a12, long long *a13)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v21 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v21;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v22 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v22;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = a4;
  HIDWORD(this[2].__r_.__value_.__r.__words[0]) = a5;
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = a6;
  HIDWORD(this[2].__r_.__value_.__r.__words[1]) = a7;
  *(float *)&this[2].__r_.__value_.__r.__words[2] = a9;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[4].__r_.__value_.__s.__data_[0] = a8;
  this[4].__r_.__value_.__s.__data_[1] = a10;
  HIDWORD(this[4].__r_.__value_.__r.__words[0]) = a11;
  LODWORD(this[4].__r_.__value_.__r.__words[1]) = a12;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = 0u;
  if (*((char *)a13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 8, *(const std::string::value_type **)a13, *((void *)a13 + 1));
  }
  else
  {
    long long v23 = *a13;
    this[8].__r_.__value_.__r.__words[2] = *((void *)a13 + 2);
    *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = v23;
  }
  this[9].__r_.__value_.__r.__words[0] = 850045863;
  *(_OWORD *)&this[9].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[10].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[10].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)((char *)&this[11].__r_.__value_.__l.__data_ + 1) = 0u;
  if (!a7 || a9 <= 0.0 || !a5 || !a6 || (a11 - 1) >= 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"batchSize > 0 && updateInterval > 0 && learningRate > 0 && initializeOption > 0 && initializeOption < 3 && recognitionInterval > 0 && \"Bad configuration\"", 153);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
  if (a6 % a5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"updateInterval % batchSize == 0 && \"Bad configuration\"", 54);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
  return this;
}

{
  return quasar::SpeakerCodeTraining::SpeakerCodeTraining(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

void sub_1B1C7CAEC(_Unwind_Exception *a1)
{
  std::mutex::~mutex(v4);
  if (*(char *)(v1 + 215) < 0) {
    operator delete(*v3);
  }
  int v6 = *(std::__shared_weak_count **)(v1 + 184);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  __int16 v7 = *(std::__shared_weak_count **)(v1 + 168);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  __int16 v8 = *(std::__shared_weak_count **)(v1 + 152);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(v1 + 136);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(v1 + 120);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void quasar::SpeakerCodeTraining::load(quasar::SpeakerCodeTraining *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 280);
  if ((v1 & 1) == 0 && !*((void *)this + 14))
  {
    if (*((char *)this + 23) < 0) {
      uint64_t v3 = *((void *)this + 1);
    }
    else {
      uint64_t v3 = *((unsigned __int8 *)this + 23);
    }
    if (!v3 && (quasar::gLogLevel & 0x80000000) == 0)
    {
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v10 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Training network path must be specified.", 40);
      quasar::QuasarFatalMessage::~QuasarFatalMessage((quasar::QuasarFatalMessage *)&v10);
    }
    _ZNSt3__115allocate_sharedB8ne180100IN6quasar11ModelLoaderENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v8);
    int v6 = 0;
    __int16 v7 = 0;
    quasar::ModelLoader::readNeuralNetwork(v8, (uint64_t)this, 1, 0, 0, &v6, &v10);
    long long v4 = v10;
    long long v10 = 0uLL;
    long long v5 = (std::__shared_weak_count *)*((void *)this + 15);
    *((_OWORD *)this + 7) = v4;
    if (v5)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      if (*((void *)&v10 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
      }
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (quasar::gLogLevel >= 4)
    {
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v10 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Training model loading done.", 28);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v10);
    }
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
}

void sub_1B1C7CD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, ...)
{
  va_start(va, a5);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  _Unwind_Resume(a1);
}

void quasar::SpeakerCodeTraining::init(uint64_t a1, void *a2, void *a3, void *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(_DWORD *)(a1 + 100);
  if ((v8 - 1) >= 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v37, "initializeOption > 0 && initializeOption < 3 && \"Unrecognized initialize option\"");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v37);
  }
  if (v8 == 2 && !*(_DWORD *)(a1 + 104) && (quasar::gLogLevel & 0x80000000) == 0)
  {
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v45 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"Initial size must be set if initialize option is 2(aka. all-zeros)", 66);
    quasar::QuasarFatalMessage::~QuasarFatalMessage((quasar::QuasarFatalMessage *)&v37);
  }
  long long v17 = operator new(0x48uLL);
  v17[1] = 0;
  uint64_t v17[2] = 0;
  void *v17 = &unk_1F0A5F648;
  *((_OWORD *)v17 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  float v17[3] = &unk_1F0A51768;
  *((unsigned char *)v17 + 64) = 0;
  long long v18 = *(std::__shared_weak_count **)(a1 + 152);
  *(void *)(a1 + 144) = v17 + 3;
  *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v17;
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  long long v19 = operator new(0x48uLL);
  v19[1] = 0;
  void v19[2] = 0;
  void *v19 = &unk_1F0A5F648;
  *((_OWORD *)v19 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *((_OWORD *)v19 + 3) = 0u;
  uint64_t v19[3] = &unk_1F0A51768;
  *((unsigned char *)v19 + 64) = 0;
  long long v20 = *(std::__shared_weak_count **)(a1 + 168);
  *(void *)(a1 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v19 + 3;
  *(void *)(a1 + 168) = v19;
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  unsigned int v21 = *(_DWORD *)(*(void *)(a1 + 144) + 20);
  unsigned int v35 = *(_DWORD *)(*(void *)(a1 + 144) + 16);
  unsigned int v36 = v21;
  std::allocate_shared[abi:ne180100]<kaldi::CuMatrix<float>,std::allocator<kaldi::CuMatrix<float>>,int,int,void>(&v36, &v35, &v37);
  long long v22 = v37;
  long long v37 = 0uLL;
  long long v23 = *(std::__shared_weak_count **)(a1 + 136);
  *(_OWORD *)(a1 + 128) = v22;
  if (v23)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    if (*((void *)&v37 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37 + 1));
    }
  }
  *(void *)(a1 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  long long v24 = (char *)operator new(0x48uLL);
  *((void *)v24 + 1) = 0;
  *((void *)v24 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)long long v24 = &unk_1F0A5F648;
  long long v25 = (void (***)(void, void, void, void))(v24 + 24);
  *((_OWORD *)v24 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *((_OWORD *)v24 + 3) = 0u;
  *((void *)v24 + 3) = &unk_1F0A51768;
  v24[64] = 0;
  long long v26 = *(std::__shared_weak_count **)(a1 + 184);
  *(void *)(a1 + 176) = v24 + 24;
  *(void *)(a1 + 184) = v24;
  if (v26)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    long long v25 = *(void (****)(void, void, void, void))(a1 + 176);
  }
  std::allocate_shared[abi:ne180100]<std::istringstream,std::allocator<std::istringstream>,std::string &,void>((const std::string *)(a1 + 24), &v37);
  (**v25)(v25, v37, 0, 0);
  if (*((void *)&v37 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37 + 1));
  }
  if (*a2 && *a3 && *a4 && *(_DWORD *)(a1 + 48) == a5)
  {
    (***(void (****)(void))(a1 + 144))(*(void *)(a1 + 144));
    (***(void (****)(void))(a1 + 160))();
    (***(void (****)(void))(a1 + 128))();
    *(void *)(a1 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = a6;
    *(void *)(a1 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = a7;
    *(void *)(a1 + 88) = a8;
  }
  else
  {
    int v27 = *(_DWORD *)(a1 + 100);
    if (v27 == 2)
    {
      kaldi::CuMatrix<float>::Resize(*(int32x2_t **)(a1 + 144), 1, *(unsigned int *)(a1 + 104), 0, 0);
    }
    else if (v27 == 1)
    {
      uint64_t v28 = *(void (****)(void, void, void, void))(a1 + 144);
      std::allocate_shared[abi:ne180100]<std::istringstream,std::allocator<std::istringstream>,std::string &,void>((const std::string *)(a1 + 24), &v37);
      (**v28)(v28, v37, 0, 0);
      if (*((void *)&v37 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37 + 1));
      }
    }
    uint64_t v29 = *(void (****)(void, void, void, void))(a1 + 160);
    std::allocate_shared[abi:ne180100]<std::istringstream,std::allocator<std::istringstream>,std::string &,void>((const std::string *)(a1 + 24), &v37);
    (**v29)(v29, v37, 0, 0);
    if (*((void *)&v37 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37 + 1));
    }
    kaldi::CuMatrix<float>::Resize(*(int32x2_t **)(a1 + 128), *(unsigned int *)(*(void *)(a1 + 144) + 20), *(unsigned int *)(*(void *)(a1 + 144) + 16), 0, 0);
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v45 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"Training variables are initialized, training speaker code: ", 59);
    uint64_t v30 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", inference speaker code: ", 26);
    long long v31 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", accumulated gradient: ", 24);
    int v32 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", processed samples: ", 21);
    BOOL v33 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", training offset: ", 19);
    uint64_t v34 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", recognition offset: ", 22);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v37);
  }
}

void sub_1B1C7D3B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void quasar::SpeakerCodeTraining::resetTraining(quasar::SpeakerCodeTraining *this)
{
  if (*((unsigned char *)this + 97))
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v13 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Training is continuous, speaker code: ", 38);
      uint64_t v2 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", processed samples: ", 21);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v13);
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<std::istringstream,std::allocator<std::istringstream>,std::string &,void>((const std::string *)this + 1, &v11);
    int v3 = *((_DWORD *)this + 25);
    if (v3 == 2)
    {
      kaldi::CuMatrix<float>::Resize(*((int32x2_t **)this + 18), 1, *((unsigned int *)this + 26), 0, 0);
    }
    else if (v3 == 1)
    {
      (***((void (****)(void, uint64_t, void, void))this + 18))(*((void *)this + 18), v11, 0, 0);
    }
    unsigned int v4 = *(_DWORD *)(*((void *)this + 18) + 20);
    unsigned int v9 = *(_DWORD *)(*((void *)this + 18) + 16);
    unsigned int v10 = v4;
    std::allocate_shared[abi:ne180100]<kaldi::CuMatrix<float>,std::allocator<kaldi::CuMatrix<float>>,int,int,void>(&v10, &v9, &v13);
    long long v5 = v13;
    long long v13 = 0uLL;
    int v6 = (std::__shared_weak_count *)*((void *)this + 17);
    *((_OWORD *)this + 8) = v5;
    if (v6)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      if (*((void *)&v13 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
      }
    }
    *((void *)this + 9) = 0;
    *((void *)this + 1std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
    *((void *)this + 11) = 0;
    if (quasar::gLogLevel >= 4)
    {
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v13 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Training speaker code is reset, speaker code: ", 46);
      __int16 v7 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", processed samples: ", 21);
      int v8 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", recognition offset: ", 22);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v13);
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
}

void sub_1B1C7D5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, ...)
{
  va_start(va, a5);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  _Unwind_Resume(a1);
}

void quasar::SpeakerCodeTraining::getSpeakerCodeForInference(quasar::SpeakerCodeTraining *this@<X0>, void *a2@<X8>)
{
  unsigned int v4 = (std::mutex *)((char *)this + 216);
  std::mutex::lock((std::mutex *)((char *)this + 216));
  if (*((unsigned char *)this + 96))
  {
    uint64_t v6 = *((void *)this + 20);
    uint64_t v5 = *((void *)this + 21);
  }
  else
  {
    uint64_t v6 = *((void *)this + 22);
    uint64_t v5 = *((void *)this + 23);
  }
  *a2 = v6;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::mutex::unlock(v4);
}

void quasar::SpeakerCodeTraining::getInferenceSpeakerCode(quasar::SpeakerCodeTraining *this@<X0>, void *a2@<X8>)
{
  unsigned int v4 = (std::mutex *)((char *)this + 216);
  std::mutex::lock((std::mutex *)((char *)this + 216));
  uint64_t v5 = *((void *)this + 21);
  *a2 = *((void *)this + 20);
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::mutex::unlock(v4);
}

uint64_t quasar::SpeakerCodeTraining::train(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(result + 280));
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(result + 128);
    if (!v5 || !*(void *)(result + 144))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v34, "gradBuffer && updatedSpeakerCode && \"Speaker code container or gradient container does not exist\"");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v34);
    }
    if (*(void *)(result + 112))
    {
      kaldi::CuMatrix<float>::CuMatrix(v33, *(unsigned int *)(v5 + 20), *(unsigned int *)(v5 + 16), 0, 0, 0);
      std::vector<int>::size_type v8 = *(unsigned int *)(a2 + 20);
      unint64_t v9 = (int)v8;
      if ((int)v8 < 2)
      {
        uint64_t v19 = *(void *)(v4 + 144);
        long long v20 = operator new(0x10uLL);
        v34[1] = v20 + 2;
        *(void *)&long long v35 = v20 + 2;
        *long long v20 = v19;
        v20[1] = a3;
        v34[0] = v20;
        (*(void (**)(void, uint64_t, void **, int32x2_t *))(**(void **)(v4 + 112) + 32))(*(void *)(v4 + 112), a2, v34, v33);
        if (v34[0])
        {
          v34[1] = v34[0];
          operator delete(v34[0]);
        }
      }
      else
      {
        uint64_t v10 = *(int *)(*(void *)(v4 + 128) + 16);
        kaldi::CuMatrix<float>::CuMatrix((int32x2_t *)v34, (int)v8, v10, 0, 0, 0);
        v27[0].i32[0] = 0;
        std::vector<int>::vector(&v32, v8, (const std::vector<int>::value_type *)v27);
        kaldi::CuMatrixBase<float>::CopyRows((uint64_t)v34, *(void *)(v4 + 144), &v32);
        uint64_t v11 = operator new(0x10uLL);
        uint64_t v30 = v11 + 2;
        long long v31 = v11 + 2;
        *uint64_t v11 = v34;
        v11[1] = a3;
        std::string __p = v11;
        kaldi::CuMatrix<float>::CuMatrix(v27, v8, v10, 0, 0, 0);
        (*(void (**)(void, uint64_t, void **, int32x2_t *))(**(void **)(v4 + 112) + 32))(*(void *)(v4 + 112), a2, &__p, v27);
        if (v10)
        {
          uint64_t v12 = 0;
          int32x2_t v13 = v27[1];
          int v14 = v28;
          int32x2_t v15 = v33[1];
          do
          {
            int v16 = 0;
            uint64_t v17 = 0;
            float v18 = *(float *)(*(void *)&v15 + 4 * (int)v12);
            do
            {
              float v18 = *(float *)(*(void *)&v13 + 4 * (int)v12 + 4 * v16) + v18;
              *(float *)(*(void *)&v15 + 4 * (int)v1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v18;
              ++v17;
              v16 += v14;
            }
            while (v8 != v17);
            ++v12;
          }
          while (v12 != v10);
        }
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v27);
        if (__p)
        {
          uint64_t v30 = __p;
          operator delete(__p);
        }
        if (v32.__begin_)
        {
          v32.__end_ = v32.__begin_;
          operator delete(v32.__begin_);
        }
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v34);
      }
      *(int64x2_t *)(v4 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = vaddq_s64(*(int64x2_t *)(v4 + 72), vdupq_n_s64(v9));
      *(void *)(v4 + 88) += v9;
      if (quasar::gLogLevel >= 5)
      {
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        *(_OWORD *)uint64_t v34 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Iteration:[", 11);
        long long v21 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"] done, calculated gradient: ", 29);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v34);
      }
      kaldi::CuMatrixBase<float>::AddMat(*(void *)(v4 + 128), (uint64_t)v33, 111, (float)(int)v9, 1.0);
      if (*(void *)(v4 + 80) >= (unint64_t)*(int *)(v4 + 56))
      {
        kaldi::CuMatrixBase<float>::AddMat(*(void *)(v4 + 144), *(void *)(v4 + 128), 111, -*(float *)(v4 + 64), 1.0);
        if (quasar::gLogLevel >= 4)
        {
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          *(_OWORD *)uint64_t v34 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Speaker code is updated: ", 25);
          long long v22 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", processed samples: ", 21);
          long long v23 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)", accumulated gradient: ", 24);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v34);
        }
        *(void *)(v4 + 80) -= *(int *)(v4 + 56);
        kaldi::CuMatrixBase<float>::SetZero(*(void *)(v4 + 128));
      }
      unint64_t v24 = *(void *)(v4 + 88);
      unint64_t v25 = *(unsigned int *)(v4 + 60);
      if (v24 >= v25)
      {
        if (quasar::gLogLevel >= 4)
        {
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          *(_OWORD *)uint64_t v34 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Reaches recognition interval, going to reset training and inference speaker code, processed samples: ", 101);
          long long v26 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", speaker code: ", 16);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v34);
          unint64_t v25 = *(unsigned int *)(v4 + 60);
          unint64_t v24 = *(void *)(v4 + 88);
        }
        *(void *)(v4 + 88) = v24 - v25;
        std::mutex::lock((std::mutex *)(v4 + 216));
        kaldi::CuMatrixBase<float>::CopyFromMat<float>(*(int **)(v4 + 160), *(void *)(v4 + 144), 111);
        std::mutex::unlock((std::mutex *)(v4 + 216));
        quasar::SpeakerCodeTraining::resetTraining((quasar::SpeakerCodeTraining *)v4);
      }
      return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v33);
    }
  }
  return result;
}

void sub_1B1C7DCB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void quasar::SpeakerCodeTraining::end(quasar::SpeakerCodeTraining *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 280);
  if ((v1 & 1) == 0)
  {
    if (quasar::gLogLevel >= 4)
    {
      memset(v3, 0, sizeof(v3));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Training is still running, going to set end to true and end training", 68);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v3);
    }
    atomic_store(1u, (unsigned __int8 *)this + 280);
  }
}

void sub_1B1C7DD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::SpeakerCodeTraining::start(quasar::SpeakerCodeTraining *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 280);
  if (v1)
  {
    if (quasar::gLogLevel >= 4)
    {
      memset(v3, 0, sizeof(v3));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Training is ended, going to set end to false and resume training.", 65);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v3);
    }
    atomic_store(0, (unsigned __int8 *)this + 280);
  }
}

void sub_1B1C7DE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::SpeakerCodeTraining::getSpeakerCode@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 152);
  *a2 = *(void *)(this + 144);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t quasar::SpeakerCodeTraining::getProcessedSamples(quasar::SpeakerCodeTraining *this)
{
  return *((void *)this + 9);
}

uint64_t quasar::SpeakerCodeTraining::getNnetVersion(quasar::SpeakerCodeTraining *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t quasar::SpeakerCodeTraining::getAccumulatedGradient@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 136);
  *a2 = *(void *)(this + 128);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t quasar::SpeakerCodeTraining::getTrainingOffset(quasar::SpeakerCodeTraining *this)
{
  return *((void *)this + 10);
}

uint64_t quasar::SpeakerCodeTraining::getRecognitionOffset(quasar::SpeakerCodeTraining *this)
{
  return *((void *)this + 11);
}

uint64_t quasar::SpeakerCodeTraining::getIsSpeakerCodeUsed(quasar::SpeakerCodeTraining *this)
{
  return *((unsigned __int8 *)this + 96);
}

BOOL quasar::SpeakerCodeTraining::isTaskSupported(const std::string *a1, unsigned __int8 *a2)
{
  uint64_t v6 = 0;
  __int16 v7 = 0;
  uint64_t v8 = 0;
  kaldi::SplitStringToVector(a1 + 8, ",", 1, (uint64_t)&v6);
  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)v5, v6, v7);
  BOOL v3 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v5, a2) != 0;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v5);
  v5[0] = (void **)&v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v5);
  return v3;
}

void sub_1B1C7DF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  a9 = (void **)&a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

int32x2_t *quasar::SpeakerCodeTraining::batchInput(int32x2_t *result, uint64_t a2)
{
  unint64_t v3 = result[6].u32[1];
  if (v3 != 1)
  {
    uint64_t v4 = result;
    uint64_t v5 = (int)v3;
    uint64_t v7 = *(void *)a2;
    uint64_t v6 = *(int32x2_t **)(a2 + 8);
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(void *)a2) >> 4);
    unint64_t v9 = v8 / (int)v3;
    if (v8 >= (int)v3)
    {
      unint64_t v11 = 0;
      do
      {
        kaldi::CuMatrix<float>::CuMatrix(&v33, v3, *(unsigned int *)(v7 + 48 * (int)v3 * (int)v11 + 16), 0, 0, 0);
        uint64_t v12 = v36;
        uint64_t v13 = *(void *)a2;
        if (v36 >= 1)
        {
          uint64_t v14 = 0;
          uint64_t v15 = v4[6].i32[1] * (uint64_t)(int)v11;
          uint64_t v16 = v34;
          uint64_t v17 = v35;
          uint64_t v18 = 4 * v37;
          do
          {
            uint64_t v19 = v13 + 48 * (v14 + v15);
            if (*(_DWORD *)(v19 + 20) != 1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"refMat.NumRows() == 1", 21);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
            }
            if ((int)v17 >= 1)
            {
              uint64_t v20 = 0;
              uint64_t v21 = *(void *)(v19 + 8);
              do
              {
                *(_DWORD *)(v16 + 4 * v2std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(v21 + 4 * v20);
                ++v20;
              }
              while (v17 != v20);
            }
            ++v14;
            v16 += v18;
          }
          while (v14 != v12);
        }
        kaldi::CuMatrix<float>::operator=((int32x2_t *)(v13 + 48 * v11), &v33);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v33);
        ++v11;
        uint64_t v7 = *(void *)a2;
        uint64_t v6 = *(int32x2_t **)(a2 + 8);
        unint64_t v3 = v4[6].i32[1];
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(void *)a2) >> 4) / v3;
      }
      while (v10 > v11);
    }
    else
    {
      unint64_t v10 = v8 / (int)v3;
    }
    unint64_t v22 = v8 - v9 * v5;
    if (v22)
    {
      kaldi::CuMatrix<float>::CuMatrix(&v33, v22, *(unsigned int *)(v7 + 48 * v10 + 16), 0, 0, 0);
      unint64_t v23 = 0;
      uint64_t v24 = *(void *)a2;
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
      uint64_t v26 = v34;
      uint64_t v27 = v35;
      uint64_t v28 = 4 * v37;
      do
      {
        uint64_t v29 = v24 + 48 * (v23 - v22 + v25);
        if (*(_DWORD *)(v29 + 20) != 1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"refMat.NumRows() == 1", 21);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
        }
        if ((int)v27 >= 1)
        {
          uint64_t v30 = 0;
          uint64_t v31 = *(void *)(v29 + 8);
          do
          {
            *(_DWORD *)(v26 + 4 * v3std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(v31 + 4 * v30);
            ++v30;
          }
          while (v27 != v30);
        }
        ++v23;
        v26 += v28;
      }
      while (v22 > v23);
      kaldi::CuMatrix<float>::operator=((int32x2_t *)(v24 + 48 * (v25 / v4[6].i32[1])), &v33);
      std::vector<kaldi::CuMatrix<float>>::erase(a2, (int32x2_t *)(*(void *)a2+ 48 * (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4) / v4[6].i32[1])+ 48), *(int32x2_t **)(a2 + 8));
      return (int32x2_t *)kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v33);
    }
    else
    {
      return std::vector<kaldi::CuMatrix<float>>::erase(a2, (int32x2_t *)(v7 + 48 * v10), v6);
    }
  }
  return result;
}

int32x2_t *std::vector<kaldi::CuMatrix<float>>::erase(uint64_t a1, int32x2_t *a2, int32x2_t *a3)
{
  if (a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,0>(a3, *(int32x2_t **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void **)(a1 + 8);
    if (v7 != v5)
    {
      unint64_t v8 = v7 - 6;
      unint64_t v9 = v7 - 6;
      unint64_t v10 = v7 - 6;
      do
      {
        uint64_t v11 = *v10;
        v10 -= 6;
        (*(void (**)(void *))(v11 + 16))(v9);
        v8 -= 6;
        BOOL v12 = v9 == v6;
        unint64_t v9 = v10;
      }
      while (!v12);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

void quasar::QuasarFatalMessage::~QuasarFatalMessage(quasar::QuasarFatalMessage *this)
{
  uint64_t v2 = (void (*)(uint64_t))quasar::QuasarFatalMessage::logger;
  std::stringbuf::str();
  v2((uint64_t)&__p);
  if (v6 < 0) {
    operator delete(__p);
  }
  uint64_t v3 = MEMORY[0x1E4FBA418];
  uint64_t v4 = *MEMORY[0x1E4FBA418];
  *(void *)this = *MEMORY[0x1E4FBA418];
  *(void *)((char *)this + *(void *)(v4 - 24)) = *(void *)(v3 + 24);
  *((void *)this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520]((char *)this + 112);
}

void std::__shared_ptr_emplace<kaldi::CuMatrix<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F648;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::CuMatrix<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F648;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::CuMatrix<float>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

int32x2_t *std::allocate_shared[abi:ne180100]<kaldi::CuMatrix<float>,std::allocator<kaldi::CuMatrix<float>>,int,int,void>@<X0>(unsigned int *a1@<X1>, unsigned int *a2@<X2>, void *a3@<X8>)
{
  char v6 = (int32x2_t *)operator new(0x48uLL);
  double result = std::__shared_ptr_emplace<kaldi::CuMatrix<float>>::__shared_ptr_emplace[abi:ne180100]<int,int,std::allocator<kaldi::CuMatrix<float>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B1C7E4FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

int32x2_t *std::__shared_ptr_emplace<kaldi::CuMatrix<float>>::__shared_ptr_emplace[abi:ne180100]<int,int,std::allocator<kaldi::CuMatrix<float>>,0>(int32x2_t *a1, unsigned int *a2, unsigned int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = (int32x2_t)&unk_1F0A5F648;
  kaldi::CuMatrix<float>::CuMatrix(a1 + 3, *a2, *a3, 0, 0, 0);
  return a1;
}

void sub_1B1C7E56C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<std::istringstream,std::allocator<std::istringstream>,std::string &,void>@<X0>(const std::string *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x128uLL);
  double result = std::__shared_ptr_emplace<std::istringstream>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<std::istringstream>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1C7E5C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<std::istringstream>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<std::istringstream>,0>(void *a1, const std::string *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A628D0;
  std::istringstream::basic_istringstream[abi:ne180100](a1 + 3, a2, 8);
  return a1;
}

void sub_1B1C7E628(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, v5, (uint64_t)v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_1B1C7E6A4(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

int32x2_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,0>(int32x2_t *a1, int32x2_t *a2, int32x2_t *a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      kaldi::CuMatrix<float>::operator=(a3, v4);
      v4 += 6;
      a3 += 6;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

BOOL Vocab::isNonEvent(Vocab *this, unsigned int a2)
{
  if (!*((unsigned char *)this + 80) && *((_DWORD *)this + 16) == a2) {
    return 1;
  }
  int v3 = 0;
  return LHash<unsigned int,float>::locate((_DWORD **)this + 6, a2, &v3) != 0;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned long>> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = (unsigned int *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          double result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * *(a2 - 1) + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * *v11 + 16));
          if ((result & 0x80000000) != 0)
          {
            unsigned int v22 = *v11;
            *uint64_t v11 = *(a2 - 1);
            *(a2 - 1) = v22;
          }
          break;
        case 3uLL:
          double result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v11, v11 + 1, a2 - 1, a3);
          break;
        case 4uLL:
          double result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v11, v11 + 1, v11 + 2, a2 - 1, a3);
          break;
        case 5uLL:
          double result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *,unsigned int *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v11, &v11[v15 >> 1], a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v11 + 1, v17 - 1, a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v11 + 2, &v11[v16 + 1], a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v17 - 1, v17, &v11[v16 + 1], a3);
      unsigned int v18 = *v11;
      *uint64_t v11 = *v17;
      unsigned int *v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(&v11[v15 >> 1], v11, a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * *(v11 - 1) + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * *v11 + 16)) & 0x80000000) == 0)
    {
      double result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &>(v11, a2, a3);
      uint64_t v11 = (unsigned int *)result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &>(v11, a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned long>> &,unsigned int *>(v11, v19, a3);
    uint64_t v11 = v19 + 1;
    double result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned long>> &,unsigned int *>(v19 + 1, a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      double result = std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned long>> &,unsigned int *,false>(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>((uint64_t)v11, a2, a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>((uint64_t)v11, a2, a3);
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned long>> &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * *(a2 - 1) + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * *a1 + 16)) & 0x80000000) != 0)
      {
        unsigned int v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unint64_t v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      unint64_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * *v10 + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * *v9 + 16)) & 0x80000000) != 0)
    {
      unsigned int v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v14 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(unsigned int *)((char *)a1 + v14 + 8);
        if (v14 == -8) {
          break;
        }
        int v15 = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * v13 + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * *(unsigned int *)((char *)a1 + v14 + 4) + 16));
        v14 -= 4;
        if ((v15 & 0x80000000) == 0)
        {
          unint64_t v16 = (unsigned int *)((char *)a1 + v14 + 12);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      unsigned int *v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    unint64_t v9 = v10;
    v11 += 4;
    if (++v10 == a2) {
      return 1;
    }
  }
}

void kaldi::SnrTracker::add_frame_energy(uint64_t a1, char **a2)
{
  std::mutex::lock((std::mutex *)a1);
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(a1 + 64, *(void *)(a1 + 72), *a2, a2[1], (a2[1] - *a2) >> 2);
  std::mutex::unlock((std::mutex *)a1);
}

void sub_1B1C7EDD4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void kaldi::SnrTracker::label_noise_or_speech_frames(std::mutex *this, int64_t a2, int64_t a3, int a4)
{
  if (a2 < 0 || (int v5 = a2, a2 > a3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "Invalid frame range. Coding error.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  std::mutex::lock(this);
  std::vector<BOOL>::resize((uint64_t)&this[1].__m_.__opaque[24], a3, 0);
  int64_t v8 = v5;
  if (v5 < a3)
  {
    uint64_t v9 = *(void *)&this[1].__m_.__opaque[24];
    do
    {
      unint64_t v10 = (unint64_t)v8 >> 6;
      uint64_t v11 = 1 << v8;
      if (a4) {
        uint64_t v12 = *(void *)(v9 + 8 * v10) | v11;
      }
      else {
        uint64_t v12 = *(void *)(v9 + 8 * v10) & ~v11;
      }
      *(void *)(v9 + 8 * v1std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v12;
      ++v8;
    }
    while (v8 < a3);
  }
  std::mutex::unlock(this);
}

void sub_1B1C7EED8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void kaldi::SnrTracker::label_noise_or_speech_ms(std::mutex *this, uint64_t a2, uint64_t a3, int a4, int a5)
{
}

double kaldi::SnrTracker::get_snr(std::mutex *this, int a2, int a3)
{
  std::mutex::lock(this);
  if (a3 < 0)
  {
    unint64_t v7 = (*(void *)this[1].__m_.__opaque - this[1].__m_.__sig) >> 2;
    unint64_t v6 = v7;
  }
  else
  {
    unint64_t v6 = a3 / *(_DWORD *)&this[1].__m_.__opaque[16] + a2;
    unint64_t v7 = (*(void *)this[1].__m_.__opaque - this[1].__m_.__sig) >> 2;
  }
  if (v7 >= v6) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = v7;
  }
  if (v8 > *(void *)&this[1].__m_.__opaque[32]) {
    std::vector<BOOL>::resize((uint64_t)&this[1].__m_.__opaque[24], v8, 0);
  }
  if (!v8) {
    goto LABEL_27;
  }
  unint64_t v9 = 0;
  int v10 = 0;
  int v11 = 0;
  double v12 = 0.0;
  double v13 = 0.0;
  do
  {
    double v14 = *(float *)(this[1].__m_.__sig + 4 * v9);
    uint64_t v15 = *(void *)(*(void *)&this[1].__m_.__opaque[24] + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9;
    double v16 = v13 + v14;
    double v17 = v12 + v14;
    if (v15) {
      double v12 = v17;
    }
    else {
      double v13 = v16;
    }
    if (v15) {
      ++v10;
    }
    else {
      ++v11;
    }
    ++v9;
  }
  while (v8 != v9);
  if (!v11)
  {
LABEL_27:
    unint64_t v24 = 0xC059000000000000;
LABEL_28:
    double v23 = *(double *)&v24;
    goto LABEL_29;
  }
  if (!v10)
  {
    unint64_t v24 = 0x4059000000000000;
    goto LABEL_28;
  }
  double v18 = v13 / (double)v11;
  if (v18 < 2.22507386e-308) {
    double v18 = 2.22507386e-308;
  }
  double v19 = log10(v18) * 10.0;
  double v20 = v12 / (double)v10;
  if (v20 < 2.22507386e-308) {
    double v20 = 2.22507386e-308;
  }
  double v21 = log10(v20) * 10.0;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"signal energy (dB) = ", 21);
    unsigned int v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" noise energy (dB) = ", 21);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v26);
  }
  double v23 = v19 - v21;
LABEL_29:
  std::mutex::unlock(this);
  return v23;
}

void sub_1B1C7F0C8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

char *std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  int v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  unint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    double v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 2);
    if (v14 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 2;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      double v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v9, v17);
    }
    else {
      double v18 = 0;
    }
    uint64_t v28 = &v18[4 * v15];
    std::string __p = v18;
    uint64_t v34 = v28;
    int v36 = &v18[4 * v17];
    uint64_t v29 = 4 * a5;
    uint64_t v30 = &v28[4 * a5];
    do
    {
      int v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)uint64_t v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    unsigned int v35 = v30;
    int v5 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    double v21 = &__src[4 * a5];
    double v23 = *(char **)(v9 - 8);
LABEL_17:
    unint64_t v24 = &v5[4 * a5];
    unint64_t v25 = &v23[-4 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        int v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)uint64_t v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  double v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  }
  double v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_1B1C7F2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  int v5 = *(char **)(a2 + 8);
  unint64_t v6 = (char *)*a1;
  unint64_t v7 = v5;
  if (*a1 != __src)
  {
    unint64_t v8 = __src;
    unint64_t v7 = *(char **)(a2 + 8);
    do
    {
      int v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    unint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  double v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + ++*(_DWORD *)(result + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void *std::get_temporary_buffer[abi:ne180100]<int>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x1FFFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    BOOL result = operator new(4 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>>(char *__src, char *a2, char *a3)
{
  BOOL v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 4 == a2)
    {
      int v6 = *(_DWORD *)__src;
      int64_t v7 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      BOOL v4 = &__src[v7];
      *(_DWORD *)BOOL v4 = v6;
    }
    else if (a2 + 4 == a3)
    {
      int v8 = *((_DWORD *)a3 - 1);
      BOOL v4 = __src + 4;
      size_t v9 = a3 - 4 - __src;
      if (a3 - 4 != __src) {
        memmove(__src + 4, __src, v9);
      }
      *(_DWORD *)__src = v8;
    }
    else
    {
      return (char *)std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>>(__src, a2, a3);
    }
  }
  return v4;
}

_DWORD *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>>(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      BOOL v4 = a1 + 1;
      int v5 = a2 + 1;
      do
      {
        int v6 = *(v4 - 1);
        *(v4 - 1) = *(v5 - 1);
        *(v5 - 1) = v6;
        if (v4 == a2) {
          break;
        }
        ++v4;
      }
      while (v5++ != a3);
    }
  }
  else
  {
    uint64_t v8 = a3 - a2;
    uint64_t v9 = a2 - a1;
    do
    {
      uint64_t v10 = v9;
      uint64_t v9 = v8;
      uint64_t v8 = v10 % v8;
    }
    while (v8);
    if (v9)
    {
      uint64_t v11 = &a1[v9];
      do
      {
        int v13 = *--v11;
        int v12 = v13;
        unint64_t v14 = &v11[v3];
        uint64_t v15 = v11;
        do
        {
          uint64_t v16 = v14;
          _DWORD *v15 = *v14;
          unint64_t v17 = &v14[v3];
          BOOL v18 = __OFSUB__(v3, a3 - v14);
          uint64_t v20 = v3 - (a3 - v14);
          char v19 = (v20 < 0) ^ v18;
          unint64_t v14 = &a1[v20];
          if (v19) {
            unint64_t v14 = v17;
          }
          uint64_t v15 = v16;
        }
        while (v14 != v11);
        _DWORD *v16 = v12;
      }
      while (v11 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

void std::__shared_ptr_emplace<quasar::PDecTranslator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FDB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::PDecTranslator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FDB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::PDecTranslator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *kaldi::quasar::AbstractAttribute::ToString@<X0>(kaldi::quasar::AbstractAttribute *this@<X0>, void *a2@<X8>)
{
  if (this >= 8)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Invalid Category given ", 23);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  uint64_t v3 = off_1E5FFE8B0[(int)this];
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

void *kaldi::quasar::AbstractAttribute::ToString@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 >= 4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Invalid level given ", 20);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  uint64_t v2 = off_1E5FFE8F0[a1];
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

{
  char *v2;
  void v4[34];
  uint64_t vars8;

  if (a1 >= 9)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Invalid info given ", 19);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  uint64_t v2 = off_1E5FFE910[a1];
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

{
  char *v2;
  void v4[34];
  uint64_t vars8;

  if (a1 >= 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Invalid source given ", 21);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  uint64_t v2 = off_1E5FFE958[a1];
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

BOOL kaldi::quasar::MajorError::operator==(uint64_t a1, _DWORD *a2)
{
  return !(*(unsigned int (**)(_DWORD *))(*(void *)a2 + 40))(a2) && *(_DWORD *)(a1 + 16) == a2[4];
}

uint64_t kaldi::quasar::StringAttribute::ToString(kaldi::quasar::StringAttribute *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  kaldi::quasar::AbstractAttribute::ToString(*((_DWORD *)this + 2), __p);
  if ((v16 & 0x80u) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v3 = v16;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  BOOL v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"_", 1);
  int v5 = (void *)std::ostream::operator<<();
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"_", 1);
  uint64_t v9 = *((void *)this + 2);
  uint64_t v8 = (char *)this + 16;
  uint64_t v7 = v9;
  int v10 = v8[23];
  if (v10 >= 0) {
    uint64_t v11 = (uint64_t)v8;
  }
  else {
    uint64_t v11 = v7;
  }
  if (v10 >= 0) {
    uint64_t v12 = v8[23];
  }
  else {
    uint64_t v12 = *((void *)v8 + 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v11, v12);
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E4FBA408];
  uint64_t v13 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v18[0] = v13;
  v18[1] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v20);
}

void sub_1B1C7FAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t kaldi::quasar::StringAttribute::Hash(kaldi::quasar::StringAttribute *this)
{
  uint64_t v3 = (char *)*((void *)this + 2);
  unint64_t v1 = (char *)this + 16;
  uint64_t v2 = v3;
  uint64_t v4 = v1[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)v1 + 1);
  }
  if (v5 >= 0) {
    uint64_t v2 = v1;
  }
  for (uint64_t result = 0; v4; --v4)
  {
    uint64_t v7 = *v2++;
    uint64_t result = v7 + 7853 * result;
  }
  return result;
}

uint64_t kaldi::quasar::StringAttribute::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 40))(a2) != 3
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
  {
    return 0;
  }
  uint64_t v4 = *(unsigned __int8 *)(a1 + 39);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 39);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 24);
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 39);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 24);
  }
  if (v5 != v6) {
    return 0;
  }
  uint64_t v8 = (const void **)(a1 + 16);
  uint64_t v11 = *(unsigned __int8 **)(a2 + 16);
  int v10 = (unsigned __int8 *)(a2 + 16);
  uint64_t v9 = v11;
  if (v7 >= 0) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v9;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*v8, v12, *(void *)(a1 + 24)) == 0;
  }
  if (!*(unsigned char *)(a1 + 39)) {
    return 1;
  }
  uint64_t v13 = v4 - 1;
  do
  {
    int v15 = *(unsigned __int8 *)v8;
    uint64_t v8 = (const void **)((char *)v8 + 1);
    int v14 = v15;
    int v17 = *v12++;
    int v16 = v17;
    BOOL v19 = v13-- != 0;
    uint64_t result = v14 == v16;
  }
  while (v14 == v16 && v19);
  return result;
}

uint64_t kaldi::quasar::FloatAttribute::ToString(kaldi::quasar::FloatAttribute *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  kaldi::quasar::AbstractAttribute::ToString(*((_DWORD *)this + 2), __p);
  if ((v11 & 0x80u) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v3 = v11;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v2, v3);
  if ((char)v11 < 0) {
    operator delete(__p[0]);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"_", 1);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"_", 1);
  std::ostream::operator<<();
  uint64_t v5 = *((void *)this + 3);
  if (v5)
  {
    kaldi::quasar::MinEntropyPartitioning::GetRange(v5, *((_DWORD *)this + 4));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"_[", 2);
    uint64_t v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"--", 2);
    int v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)")", 1);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"_", 1);
    std::ostream::operator<<();
  }
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E4FBA408];
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v13[0] = v8;
  v13[1] = MEMORY[0x1E4FBA470] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v15);
}

void sub_1B1C7FEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::FloatAttribute::Hash(kaldi::quasar::FloatAttribute *this)
{
  return *((int *)this + 3);
}

BOOL kaldi::quasar::FloatAttribute::operator==(uint64_t a1, _DWORD *a2)
{
  return (*(unsigned int (**)(_DWORD *))(*(void *)a2 + 40))(a2) == 4
      && *(_DWORD *)(a1 + 12) == a2[3]
      && *(_DWORD *)(a1 + 16) == a2[4];
}

uint64_t kaldi::quasar::BaseAttribute::ToString(kaldi::quasar::BaseAttribute *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v15);
  kaldi::quasar::AbstractAttribute::ToString(*((_DWORD *)this + 5), &__p);
  if ((v14 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v14 & 0x80u) == 0) {
    uint64_t v3 = v14;
  }
  else {
    uint64_t v3 = v13;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)p_p, v3);
  if ((char)v14 < 0) {
    operator delete(__p);
  }
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"_", 1);
  kaldi::quasar::AbstractAttribute::ToString(*((_DWORD *)this + 2), &__p);
  if ((v14 & 0x80u) == 0) {
    uint64_t v5 = &__p;
  }
  else {
    uint64_t v5 = __p;
  }
  if ((v14 & 0x80u) == 0) {
    uint64_t v6 = v14;
  }
  else {
    uint64_t v6 = v13;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  if ((char)v14 < 0) {
    operator delete(__p);
  }
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"_", 1);
  kaldi::quasar::AbstractAttribute::ToString(*((_DWORD *)this + 4), &__p);
  if ((v14 & 0x80u) == 0) {
    uint64_t v8 = &__p;
  }
  else {
    uint64_t v8 = __p;
  }
  if ((v14 & 0x80u) == 0) {
    uint64_t v9 = v14;
  }
  else {
    uint64_t v9 = v13;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  if ((char)v14 < 0) {
    operator delete(__p);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"_", 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v15[0] = *MEMORY[0x1E4FBA408];
  uint64_t v10 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v16[0] = v10;
  v16[1] = MEMORY[0x1E4FBA470] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v18);
}

void sub_1B1C801D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::BaseAttribute::ToString(kaldi::quasar::BaseAttribute *this, const kaldi::quasar::ErrorProfile *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v19);
  kaldi::quasar::AbstractAttribute::ToString(*((_DWORD *)this + 5), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"_", 1);
  kaldi::quasar::AbstractAttribute::ToString(*((_DWORD *)this + 2), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v7 = &__p;
  }
  else {
    int v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v8 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"_", 1);
  kaldi::quasar::AbstractAttribute::ToString(*((_DWORD *)this + 4), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v12 = *((_DWORD *)this + 4);
  if (v12 == 2)
  {
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"_", 1);
    kaldi::quasar::ErrorProfile::ToPhoneString(a2, *((_DWORD *)this + 3), &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int8 v14 = &__p;
    }
    else {
      unsigned __int8 v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    if (v12 != 3)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"_", 1);
      std::ostream::operator<<();
      goto LABEL_42;
    }
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"_", 1);
    kaldi::quasar::ErrorProfile::ToWordString(a2, *((_DWORD *)this + 3), &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int8 v14 = &__p;
    }
    else {
      unsigned __int8 v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_42:
  std::stringbuf::str();
  v19[0] = *MEMORY[0x1E4FBA408];
  uint64_t v16 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v19 + *(void *)(v19[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v20[0] = v16;
  v20[1] = MEMORY[0x1E4FBA470] + 16;
  if (v21 < 0) {
    operator delete((void *)v20[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v22);
}

void sub_1B1C80558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::BaseAttribute::operator==(_DWORD *a1, _DWORD *a2)
{
  return (*(unsigned int (**)(_DWORD *))(*(void *)a2 + 40))(a2) == 1
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5];
}

uint64_t kaldi::quasar::ContextAttribute::ToString(kaldi::quasar::ContextAttribute *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  kaldi::quasar::AbstractAttribute::ToString(*((_DWORD *)this + 2), &__p);
  if ((v11 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v3 = v11;
  }
  else {
    uint64_t v3 = v10;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)p_p, v3);
  if ((char)v11 < 0) {
    operator delete(__p);
  }
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"_", 1);
  (***((void (****)(void **__return_ptr))this + 2))(&__p);
  if ((v11 & 0x80u) == 0) {
    uint64_t v5 = &__p;
  }
  else {
    uint64_t v5 = __p;
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v6 = v11;
  }
  else {
    uint64_t v6 = v10;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  if ((char)v11 < 0) {
    operator delete(__p);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"_", 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E4FBA408];
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v13[0] = v7;
  v13[1] = MEMORY[0x1E4FBA470] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v15);
}

void sub_1B1C80880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::ContextAttribute::ToString(kaldi::quasar::ContextAttribute *this, const kaldi::quasar::ErrorProfile *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v13);
  kaldi::quasar::AbstractAttribute::ToString(*((_DWORD *)this + 2), &__p);
  if ((v12 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v12 & 0x80u) == 0) {
    uint64_t v4 = v12;
  }
  else {
    uint64_t v4 = v11;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)p_p, v4);
  if ((char)v12 < 0) {
    operator delete(__p);
  }
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"_", 1);
  (*(void (**)(void **__return_ptr))(**((void **)this + 2) + 8))(&__p);
  if ((v12 & 0x80u) == 0) {
    uint64_t v6 = &__p;
  }
  else {
    uint64_t v6 = __p;
  }
  if ((v12 & 0x80u) == 0) {
    uint64_t v7 = v12;
  }
  else {
    uint64_t v7 = v11;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  if ((char)v12 < 0) {
    operator delete(__p);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"_", 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v13[0] = *MEMORY[0x1E4FBA408];
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v14[0] = v8;
  v14[1] = MEMORY[0x1E4FBA470] + 16;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v16);
}

void sub_1B1C80B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::ContextAttribute::operator==(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a2 + 40))(a2) == 2
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

uint64_t kaldi::quasar::WordConfusion::ToString(kaldi::quasar::WordConfusion *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  kaldi::quasar::AbstractAttribute::ToString(*((_DWORD *)this + 2), __p);
  if ((v9 & 0x80u) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v3 = v9;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v2, v3);
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  if (*((void *)this + 6) != *((void *)this + 5))
  {
    unint64_t v4 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"_", 1);
      std::ostream::operator<<();
      ++v4;
    }
    while (v4 < (uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 2);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"--", 2);
  if (*((void *)this + 3) != *((void *)this + 2))
  {
    unint64_t v5 = 0;
    do
    {
      if (v5) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"_", 1);
      }
      std::ostream::operator<<();
      ++v5;
    }
    while (v5 < (uint64_t)(*((void *)this + 3) - *((void *)this + 2)) >> 2);
  }
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v11[0] = v6;
  v11[1] = MEMORY[0x1E4FBA470] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v13);
}

void sub_1B1C80E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::WordConfusion::ToString(kaldi::quasar::WordConfusion *this, const kaldi::quasar::ErrorProfile *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  kaldi::quasar::AbstractAttribute::ToString(*((_DWORD *)this + 2), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)this + 6) != *((void *)this + 5))
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"_", 1);
      kaldi::quasar::ErrorProfile::ToWordString(a2, *(_DWORD *)(*((void *)this + 5) + 4 * v6), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v8 = &__p;
      }
      else {
        uint64_t v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v6;
    }
    while (v6 < (uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 2);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"--", 2);
  uint64_t v10 = *((void *)this + 2);
  if (*((void *)this + 3) != v10)
  {
    unint64_t v11 = 0;
    do
    {
      if (v11)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"_", 1);
        uint64_t v10 = *((void *)this + 2);
      }
      kaldi::quasar::ErrorProfile::ToWordString(a2, *(_DWORD *)(v10 + 4 * v11), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v12 = &__p;
      }
      else {
        char v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v13 = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v12, v13);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v11;
      uint64_t v10 = *((void *)this + 2);
    }
    while (v11 < (*((void *)this + 3) - v10) >> 2);
  }
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E4FBA408];
  uint64_t v14 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v18[0] = v14;
  v18[1] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v20);
}

void sub_1B1C81124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::WordConfusion::Hash(kaldi::quasar::WordConfusion *this)
{
  unint64_t v1 = (int *)*((void *)this + 5);
  uint64_t v2 = (int *)*((void *)this + 6);
  if (v1 == v2) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    uint64_t v4 = *v1++;
    uint64_t result = v4 + 7853 * result;
  }
  while (v1 != v2);
  return result;
}

BOOL kaldi::quasar::WordConfusion::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 40))(a2) == 6
    && (uint64_t v4 = *(const void **)(a1 + 16),
        size_t v5 = *(void *)(a1 + 24) - (void)v4,
        unint64_t v6 = *(const void **)(a2 + 16),
        v5 == *(void *)(a2 + 24) - (void)v6)
    && (uint64_t v7 = *(const void **)(a1 + 40),
        size_t v8 = *(void *)(a1 + 48) - (void)v7,
        std::string::size_type v9 = *(const void **)(a2 + 40),
        v8 == *(void *)(a2 + 48) - (void)v9)
    && *(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
    && !memcmp(v4, v6, v5))
  {
    return memcmp(v7, v9, v8) == 0;
  }
  else
  {
    return 0;
  }
}

void kaldi::quasar::AttributeWrapper::~AttributeWrapper(kaldi::quasar::AttributeWrapper *this)
{
  *(void *)this = &unk_1F0A50900;
  if (((*(uint64_t (**)(void))(**((void **)this + 2) + 56))(*((void *)this + 2)) & 1) == 0)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
    }
  }
}

{
  uint64_t vars8;

  kaldi::quasar::AttributeWrapper::~AttributeWrapper(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t *kaldi::quasar::AttributeFactory::CreateStringAttribute(kaldi::quasar::AttributeFactory *a1, int a2, long long *a3)
{
  kaldi::quasar::StringAttribute::StringAttribute((uint64_t)v6, a2, a3);
  Attribute = kaldi::quasar::AttributeFactory::GetAttribute(a1, (kaldi::quasar::AbstractAttribute *)v6);
  v6[0] = &unk_1F0A50880;
  if (v7 < 0) {
    operator delete((void *)v6[2]);
  }
  return Attribute;
}

void sub_1B1C813B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *kaldi::quasar::AttributeFactory::GetAttribute(kaldi::quasar::AttributeFactory *this, kaldi::quasar::AbstractAttribute *a2)
{
  unint64_t v6 = a2;
  uint64_t v3 = std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::find<kaldi::quasar::AbstractAttribute *>((void *)this + 1, &v6);
  if (!v3)
  {
    size_t v5 = (kaldi::quasar::AbstractAttribute *)(*(uint64_t (**)(kaldi::quasar::AbstractAttribute *))(*(void *)v6 + 32))(v6);
    kaldi::quasar::AttributeFactory::AddAttribute(this, v5);
  }
  return v3[3];
}

void kaldi::quasar::StringAttribute::~StringAttribute(void **this)
{
  *this = &unk_1F0A50880;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F0A50880;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t *kaldi::quasar::AttributeFactory::CreateBaseAttribute(kaldi::quasar::AttributeFactory *a1, int a2, int a3, int a4, int a5)
{
  int v7 = a4;
  int v8 = a2;
  unint64_t v6 = &unk_1F0A50250;
  int v9 = a3;
  int v10 = a5;
  return kaldi::quasar::AttributeFactory::GetAttribute(a1, (kaldi::quasar::AbstractAttribute *)&v6);
}

uint64_t *kaldi::quasar::AttributeFactory::CreateContextAttribute(kaldi::quasar::AttributeFactory *a1, int a2, int a3, unsigned int a4, unsigned int a5)
{
  int v10 = 0;
  int v11 = a2;
  int v9 = &unk_1F0A50250;
  unint64_t v12 = __PAIR64__(a5, a4);
  Attribute = kaldi::quasar::AttributeFactory::GetAttribute(a1, (kaldi::quasar::AbstractAttribute *)&v9);
  int v10 = 2;
  int v11 = a3;
  int v9 = &unk_1F0A50960;
  unint64_t v12 = (unint64_t)Attribute;
  return kaldi::quasar::AttributeFactory::GetAttribute(a1, (kaldi::quasar::AbstractAttribute *)&v9);
}

uint64_t *kaldi::quasar::AttributeFactory::CreateWordConfusionAttribute(kaldi::quasar::AttributeFactory *a1, int a2, uint64_t a3, uint64_t a4)
{
  kaldi::quasar::WordConfusion::WordConfusion((uint64_t)v7, a2, a3, a4);
  Attribute = kaldi::quasar::AttributeFactory::GetAttribute(a1, (kaldi::quasar::AbstractAttribute *)v7);
  kaldi::quasar::WordConfusion::~WordConfusion((kaldi::quasar::WordConfusion *)v7);
  return Attribute;
}

void sub_1B1C815F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::quasar::WordConfusion::~WordConfusion((kaldi::quasar::WordConfusion *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::AttributeFactory::~AttributeFactory(kaldi::quasar::AttributeFactory *this)
{
  *(void *)this = &unk_1F0A508E0;
  for (uint64_t i = (void *)*((void *)this + 3); i; uint64_t i = (void *)*i)
  {
    uint64_t v3 = i[3];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 72))(v3);
    }
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 8);
}

{
  uint64_t vars8;

  kaldi::quasar::AttributeFactory::~AttributeFactory(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::quasar::AttributeFactory::AddAttribute(kaldi::quasar::AttributeFactory *this, kaldi::quasar::AbstractAttribute *a2)
{
  uint64_t v2 = a2;
  operator new();
}

uint64_t kaldi::quasar::AbstractAttribute::ToString(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

float kaldi::quasar::AbstractAttribute::GetWeight(kaldi::quasar::AbstractAttribute *this)
{
  return 1.0;
}

uint64_t kaldi::quasar::AbstractAttribute::Owned(kaldi::quasar::AbstractAttribute *this)
{
  return 0;
}

void *kaldi::quasar::MajorError::ToString@<X0>(kaldi::quasar::MajorError *this@<X0>, void *a2@<X8>)
{
  return kaldi::quasar::AbstractAttribute::ToString((kaldi::quasar::AbstractAttribute *)*((unsigned int *)this + 4), a2);
}

uint64_t kaldi::quasar::MajorError::Hash(kaldi::quasar::MajorError *this)
{
  return *((unsigned int *)this + 4);
}

void kaldi::quasar::MajorError::Copy(kaldi::quasar::MajorError *this)
{
}

uint64_t kaldi::quasar::MajorError::GetClass(kaldi::quasar::MajorError *this)
{
  return 0;
}

float kaldi::quasar::MajorError::GetWeight(kaldi::quasar::MajorError *this)
{
  return *((float *)this + 3);
}

void kaldi::quasar::MajorError::~MajorError(kaldi::quasar::MajorError *this)
{
}

uint64_t kaldi::quasar::MajorError::GetCategory(kaldi::quasar::MajorError *this)
{
  return *((unsigned int *)this + 4);
}

void kaldi::quasar::StringAttribute::Copy(kaldi::quasar::StringAttribute *this)
{
}

void sub_1B1C81898(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1093C401FB1DE5ELL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::StringAttribute::GetClass(kaldi::quasar::StringAttribute *this)
{
  return 3;
}

void kaldi::quasar::FloatAttribute::Copy(kaldi::quasar::FloatAttribute *this)
{
}

uint64_t kaldi::quasar::FloatAttribute::GetClass(kaldi::quasar::FloatAttribute *this)
{
  return 4;
}

void kaldi::quasar::FloatAttribute::~FloatAttribute(kaldi::quasar::FloatAttribute *this)
{
}

uint64_t kaldi::quasar::BaseAttribute::Hash(kaldi::quasar::BaseAttribute *this)
{
  return *((int *)this + 3);
}

void kaldi::quasar::BaseAttribute::Copy(kaldi::quasar::BaseAttribute *this)
{
}

uint64_t kaldi::quasar::BaseAttribute::GetClass(kaldi::quasar::BaseAttribute *this)
{
  return 1;
}

void kaldi::quasar::BaseAttribute::~BaseAttribute(kaldi::quasar::BaseAttribute *this)
{
}

uint64_t kaldi::quasar::AttributeWrapper::ToString(kaldi::quasar::AttributeWrapper *this)
{
  return (***((uint64_t (****)(void))this + 2))(*((void *)this + 2));
}

uint64_t kaldi::quasar::AttributeWrapper::ToString(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8))();
}

BOOL kaldi::quasar::AttributeWrapper::operator==(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t kaldi::quasar::AttributeWrapper::GetClass(kaldi::quasar::AttributeWrapper *this)
{
  return 7;
}

uint64_t kaldi::quasar::AttributeWrapper::GetWeight(kaldi::quasar::AttributeWrapper *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 48))();
}

uint64_t kaldi::quasar::AttributeWrapper::Owned(kaldi::quasar::AttributeWrapper *this)
{
  return 1;
}

uint64_t kaldi::quasar::ContextAttribute::Hash(kaldi::quasar::ContextAttribute *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 16))();
}

void kaldi::quasar::ContextAttribute::Copy(kaldi::quasar::ContextAttribute *this)
{
}

uint64_t kaldi::quasar::ContextAttribute::GetClass(kaldi::quasar::ContextAttribute *this)
{
  return 2;
}

void kaldi::quasar::ContextAttribute::~ContextAttribute(kaldi::quasar::ContextAttribute *this)
{
}

void kaldi::quasar::WordConfusion::Copy(kaldi::quasar::WordConfusion *this)
{
}

void sub_1B1C81BDC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1091C40BDD2178ELL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::WordConfusion::GetClass(kaldi::quasar::WordConfusion *this)
{
  return 6;
}

void kaldi::quasar::WordConfusion::~WordConfusion(kaldi::quasar::WordConfusion *this)
{
  kaldi::quasar::WordConfusion::~WordConfusion(this);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *v3;

  *(void *)this = &unk_1F0A50380;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }
}

uint64_t kaldi::quasar::StringAttribute::StringAttribute(uint64_t a1, int a2, long long *a3)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *(void *)a1 = &unk_1F0A50880;
  uint64_t v4 = (std::string *)(a1 + 16);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    v4->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

uint64_t kaldi::quasar::WordConfusion::WordConfusion(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)(a1 + 8) = 8;
  *(void *)a1 = &unk_1F0A50380;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 16), *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  *(void *)(a1 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 40), *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  *(_DWORD *)(a1 + 64) = a2;
  return a1;
}

void sub_1B1C81D44(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + ++*(_DWORD *)(result + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeWrapper *>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeWrapper *>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeWrapper *>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeWrapper *>>>::__emplace_unique_key_args<kaldi::quasar::AbstractAttribute *,std::piecewise_construct_t const&,std::tuple<kaldi::quasar::AbstractAttribute * const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))();
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    std::string::size_type v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if ((*(uint64_t (**)(void, void))(*(void *)v14[2] + 24))(v14[2], *a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  uint64_t v14 = operator new(0x20uLL);
  void *v14 = 0;
  v14[1] = v9;
  void v14[2] = **a4;
  void v14[3] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void *)a1;
  double v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    void *v14 = *v23;
LABEL_38:
    void *v23 = v14;
    goto LABEL_39;
  }
  void *v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    unint64_t v24 = *(void *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    double v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1B1C8202C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void QuasarITNImpl::formatWords(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, std::string *a9@<X8>)
{
  uint64_t v17 = *(void *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(v28, "");
  std::string::basic_string[abi:ne180100]<0>(v26, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  char v21 = 0;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, void **, void **, uint64_t, void **, uint64_t, uint64_t, char, uint64_t))(*(void *)v17 + 16))(&v25, v17, a2, v28, v26, a5, __p, a4, a7, v21, a6);
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (&v25 != a3) {
    std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)a3, (uint64_t)v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v25.__r_.__value_.__l.__size_ - v25.__r_.__value_.__r.__words[0]) >> 5));
  }
  uint64_t v18 = *(void *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(v28, "");
  (*(void (**)(uint64_t, std::string *, uint64_t, void **, void, uint64_t))(*(void *)v18 + 48))(v18, &v25, a5, v28, 0, a8);
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  uint64_t v20 = a9->__r_.__value_.__r.__words[0];
  std::string::size_type size = a9->__r_.__value_.__l.__size_;
  if (a9->__r_.__value_.__r.__words[0] != size)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v28, "\x1F");
      std::string::basic_string[abi:ne180100]<0>(v26, "");
      quasar::replaceAll(v20, (uint64_t)v28, (char *)v26);
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      v20 += 224;
    }
    while (v20 != size);
  }
  if (a8) {
    quasar::QuasarTextProc::updateHammeredItnWithEmojiAlternativeName(*(void *)(a1 + 8), &v25, a9);
  }
  v28[0] = &v25;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);
}

void sub_1B1C82294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,char *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  a22 = a12;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a22 = &a19;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

uint64_t QuasarITNImpl::isEnableAutoPunctuation(uint64_t a1, uint64_t a2, const void **a3, char a4)
{
  return quasar::QuasarTextProc::isEnableAutoPunctuation(*(void *)(a1 + 8), a2, a3, a4);
}

void QuasarITNImpl::emojiPhraseWithoutKeyword(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
}

double QuasarITNImpl::getEndsOfSentencePunctuations@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return quasar::QuasarTextProc::getEndsOfSentencePunctuations(*(void *)(a1 + 8), a2, a3);
}

void SpeechITN::quasarItnExists(uint64_t a1)
{
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v6);
  memset(v5, 0, sizeof(v5));
  memset(v3, 0, sizeof(v3));
  int v4 = 1065353216;
  quasar::SystemConfig::readJsonFile((uint64_t)v6, a1, v5, (uint64_t)v3, 0, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v3);
  *(void *)&v3[0] = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v3);
  quasar::QuasarTextProc::qsrTextProcExists((quasar::QuasarTextProc *)v6, v2);
}

void sub_1B1C82414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)va);
  _Unwind_Resume(a1);
}

void SpeechITN::createQuasarITN(uint64_t a1, const quasar::SystemConfig *a2, uint64_t *a3, int a4)
{
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v10);
  memset(v8, 0, sizeof(v8));
  int v9 = 1065353216;
  quasar::SystemConfig::readJsonFile((uint64_t)v10, a1, a3, (uint64_t)v8, a4, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v8);
  SpeechITN::createQuasarITN((quasar::QuasarTextProc *)v10, a2);
}

void sub_1B1C824E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)va);
  _Unwind_Resume(a1);
}

void SpeechITN::createQuasarITN(quasar::QuasarTextProc *a1, const quasar::SystemConfig *a2)
{
}

void sub_1B1C82574(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t SpeechITN::isEnableAutoPunctuation()
{
  return 0;
}

void SpeechITN::emojiPhraseWithoutKeyword(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

double SpeechITN::getEndsOfSentencePunctuations@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 1065353216;
  return result;
}

void QuasarITNImpl::~QuasarITNImpl(QuasarITNImpl *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F0A339E0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F0A339E0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

void QuasarITNImpl::QuasarITNImpl(void *a1)
{
  *a1 = &unk_1F0A339E0;
  a1[1] = 0;
  operator new();
}

void sub_1B1C8277C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x1B3EA8670](v11, 0x10B3C40B4CC8D0ALL);
  uint64_t v13 = *(void *)(v10 + 8);
  *(void *)(v10 + 8) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::DecoderPassData::DecoderPassData(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, char a8, char a9, void **a10, void *a11, uint64_t a12, void *a13, void *a14, uint64_t a15, char a16, long long **a17, long long **a18, long long **a19, char a20,char a21,uint64_t **a22)
{
  *(void *)a1 = *a4;
  uint64_t v26 = a4[1];
  *(void *)(a1 + 8) = v26;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 16) = *a5;
  uint64_t v27 = a5[1];
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = v27;
  if (v27) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *a6;
  uint64_t v28 = a6[1];
  *(void *)(a1 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v28;
  if (v28) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 48) = *a7;
  uint64_t v29 = a7[1];
  *(void *)(a1 + 56) = v29;
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 64) = *a14;
  uint64_t v30 = a14[1];
  *(void *)(a1 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v30;
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v31 = *a6;
  if (*a6)
  {
    *(void *)(a1 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(void *)(v31 + 32);
    uint64_t v32 = *(void *)(v31 + 40);
    *(void *)(a1 + 88) = v32;
    if (v32) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *(void *)(a1 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
    *(void *)(a1 + 88) = 0;
  }
  kaldi::SilencePhoneSet::SilencePhoneSet((kaldi::SilencePhoneSet *)(a1 + 96));
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 20std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(unsigned char *)(a1 + 208) = 1;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 2++*(_DWORD *)(result + 24) = 0;
  *(_OWORD *)(a1 + 23std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = quasar::Location::UNDEFINED_COORDINATES;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 28std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 31std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 36std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 368) = a1 + 376;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 39std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 4++*(_DWORD *)(result + 24) = 0u;
  *(_DWORD *)(a1 + 44std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 1065353216;
  *(_OWORD *)(a1 + 47std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(void *)(a1 + 52std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *a3;
  uint64_t v33 = a3[1];
  *(void *)(a1 + 528) = v33;
  if (v33) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 536) = *a2;
  uint64_t v34 = a2[1];
  *(void *)(a1 + 544) = v34;
  if (v34) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a1 + 55std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(_DWORD *)(a1 + 556) = 0;
  *(unsigned char *)(a1 + 56std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(unsigned char *)(a1 + 561) = a8;
  *(unsigned char *)(a1 + 56std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = a9;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 576) = 0;
  std::vector<std::weak_ptr<quasar::Decoder>>::__init_with_size[abi:ne180100]<std::weak_ptr<quasar::Decoder>*,std::weak_ptr<quasar::Decoder>*>((void *)(a1 + 568), *a10, a10[1], ((char *)a10[1] - (char *)*a10) >> 4);
  *(void *)(a1 + 59std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *a11;
  uint64_t v35 = a11[1];
  *(void *)(a1 + 60std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v35;
  if (v35) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
  }
  quasar::PhonesetMapping::PhonesetMapping((std::string *)(a1 + 608), (long long *)a12);
  if (*(char *)(a12 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 632), *(const std::string::value_type **)a12, *(void *)(a12 + 8));
  }
  else
  {
    long long v36 = *(_OWORD *)a12;
    *(void *)(a1 + 648) = *(void *)(a12 + 16);
    *(_OWORD *)(a1 + 63std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v36;
  }
  *(unsigned char *)(a1 + 656) = 0;
  *(_DWORD *)(a1 + 66std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(_WORD *)(a1 + 664) = 0;
  *(void *)(a1 + 67std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *a13;
  uint64_t v37 = a13[1];
  *(void *)(a1 + 68std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v37;
  if (v37) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 688) = a15;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 71std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_DWORD *)(a1 + 728) = 1065353216;
  *(unsigned char *)(a1 + 736) = a16;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 76std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 75std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 744), *a17, a17[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a17[1] - (char *)*a17) >> 3));
  *(void *)(a1 + 784) = 0;
  *(_OWORD *)(a1 + 768) = 0u;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 768), *a18, a18[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a18[1] - (char *)*a18) >> 3));
  *(void *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 79std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 792), *a19, a19[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a19[1] - (char *)*a19) >> 3));
  *(unsigned char *)(a1 + 816) = a20;
  *(unsigned char *)(a1 + 817) = a21;
  *(void *)(a1 + 8++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 84std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 83std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((void *)(a1 + 824), *a22, a22[1], 0xAAAAAAAAAAAAAAABLL * (a22[1] - *a22));
  *(_DWORD *)(a1 + 848) = -1;
  *(unsigned char *)(a1 + 85std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  return a1;
}

{
  return quasar::DecoderPassData::DecoderPassData(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22);
}

void sub_1B1C82BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, kaldi::SilencePhoneSet *a13, uint64_t a14)
{
  if (*(char *)(v14 + 631) < 0) {
    operator delete(*v16);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v14 + 600);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  a14 = a11;
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  uint64_t v18 = *(std::__shared_weak_count **)(v14 + 544);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  unint64_t v19 = *(std::__shared_weak_count **)(v14 + 528);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  a14 = v15 + 248;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  uint64_t v20 = *(std::__shared_weak_count **)(v14 + 464);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a12);
  char v21 = *(std::__shared_weak_count **)(v14 + 400);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  std::__tree<int>::destroy(v15 + 120, *(void **)(v14 + 376));
  uint64_t v22 = *(void **)(v14 + 344);
  if (v22)
  {
    *(void *)(v14 + 35std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v22;
    operator delete(v22);
  }
  a14 = v15 + 72;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  double v23 = *(void **)(v14 + 296);
  if (v23)
  {
    *(void *)(v14 + 304) = v23;
    operator delete(v23);
  }
  a14 = v15 + 24;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  a14 = v15;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  char v24 = *(std::__shared_weak_count **)(v14 + 224);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  std::string v25 = *(std::__shared_weak_count **)(v14 + 192);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  uint64_t v26 = *(std::__shared_weak_count **)(v14 + 176);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  kaldi::SilencePhoneSet::~SilencePhoneSet(a13);
  uint64_t v27 = *(std::__shared_weak_count **)(v14 + 88);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  uint64_t v28 = *(std::__shared_weak_count **)(v14 + 72);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  uint64_t v29 = *(std::__shared_weak_count **)(v14 + 56);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  uint64_t v30 = *(std::__shared_weak_count **)(v14 + 40);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  uint64_t v31 = *(std::__shared_weak_count **)(v14 + 24);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  uint64_t v32 = *(std::__shared_weak_count **)(v14 + 8);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  _Unwind_Resume(a1);
}

void sub_1B1C82D74()
{
}

void sub_1B1C82D7C()
{
}

void quasar::DecoderPassData::getLeftContextLabels(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  unint64_t v6 = *(unsigned __int8 **)(a1 + 752);
  if (v6 != *(unsigned __int8 **)(a1 + 744))
  {
    uint64_t v10 = (void *)(a4 + 8);
    while (1)
    {
      v6 -= 24;
      int v11 = quasar::SymbolTableList::strToSymbolId(a2, (uint64_t)v6);
      if (v11 == -1
        || std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a3, v6))
      {
        break;
      }
      uint64_t v12 = *v10;
      if (*v10)
      {
        uint64_t v13 = v10;
        do
        {
          int v14 = *(_DWORD *)(v12 + 28);
          BOOL v15 = v14 < v11;
          if (v14 >= v11) {
            float v16 = (uint64_t *)v12;
          }
          else {
            float v16 = (uint64_t *)(v12 + 8);
          }
          if (!v15) {
            uint64_t v13 = (void *)v12;
          }
          uint64_t v12 = *v16;
        }
        while (*v16);
        if (v13 != v10 && *((_DWORD *)v13 + 7) <= v11) {
          break;
        }
      }
      uint64_t v18 = a5[1];
      unint64_t v17 = (unint64_t)a5[2];
      if ((unint64_t)v18 >= v17)
      {
        uint64_t v20 = *a5;
        uint64_t v21 = (v18 - *a5) >> 2;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = v17 - (void)v20;
        if (v23 >> 1 > v22) {
          unint64_t v22 = v23 >> 1;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          std::string v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a5 + 2), v24);
          uint64_t v20 = *a5;
          uint64_t v18 = a5[1];
        }
        else
        {
          std::string v25 = 0;
        }
        uint64_t v26 = &v25[4 * v21];
        *(_DWORD *)uint64_t v26 = v11;
        unint64_t v19 = v26 + 4;
        while (v18 != v20)
        {
          int v27 = *((_DWORD *)v18 - 1);
          v18 -= 4;
          *((_DWORD *)v26 - 1) = v27;
          v26 -= 4;
        }
        *a5 = v26;
        a5[1] = v19;
        a5[2] = &v25[4 * v24];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v18 = v11;
        unint64_t v19 = v18 + 4;
      }
      a5[1] = v19;
      if (v6 == *(unsigned __int8 **)(a1 + 744)) {
        goto LABEL_35;
      }
    }
    if (quasar::gLogLevel >= 4)
    {
      memset(v35, 0, 272);
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Clipping left context because of unknown or rejected word", 57);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v35);
    }
  }
LABEL_35:
  uint64_t v28 = *a5;
  uint64_t v29 = a5[1];
  uint64_t v30 = v29 - 4;
  if (*a5 != v29 && v30 > v28)
  {
    unint64_t v32 = (unint64_t)(v28 + 4);
    do
    {
      int v33 = *(_DWORD *)(v32 - 4);
      *(_DWORD *)(v32 - 4) = *(_DWORD *)v30;
      *(_DWORD *)uint64_t v30 = v33;
      v30 -= 4;
      BOOL v34 = v32 >= (unint64_t)v30;
      v32 += 4;
    }
    while (!v34);
  }
}

void sub_1B1C83014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  int v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::Decoder::Decoder(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_1F0A58FC8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v3;
  }
  quasar::SystemConfig::Version::Version((quasar::SystemConfig::Version *)(a1 + 32));
  *(void *)(a1 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0xC800000190;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = 256;
  *(void *)(a1 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 11std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = a1 + 120;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = a1 + 144;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = a1 + 168;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 27std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 20std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 23std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = a1 + 264;
  *(void *)(a1 + 28std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = a1 + 288;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 31std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 32std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = a1 + 312;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 35std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 40std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 4++*(_DWORD *)(result + 24) = 0u;
  *(_WORD *)(a1 + 44std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(_DWORD *)(a1 + 444) = 100;
  return a1;
}

void sub_1B1C8316C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

BOOL quasar::Decoder::isInitialized(quasar::Decoder *this)
{
  return *((_DWORD *)this + 100) == 1;
}

void quasar::Decoder::init(uint64_t a1, quasar::SystemConfig *this)
{
  if (!*(_DWORD *)(a1 + 400))
  {
    *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = quasar::SystemConfig::getConfigFileVersion(this);
    uint64_t SpeechModelInfo = quasar::SystemConfig::getSpeechModelInfo(this);
    quasar::SpeechModelInfo::operator=(a1 + 64, SpeechModelInfo);
    quasar::SystemConfig::getLmeAssetPath(this, (std::string *)__p);
    std::string::operator=((std::string *)(a1 + 336), (const std::string *)__p);
    if (SBYTE7(v15) < 0) {
      operator delete(__p[0]);
    }
    quasar::QuasarG2PFactory::isPronGuesserWordpiece(this, v5);
  }
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)std::string __p = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameters for ", 15);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v8 = a1 + 8;
  uint64_t v7 = v9;
  int v10 = *(char *)(v8 + 23);
  if (v10 >= 0) {
    uint64_t v11 = v8;
  }
  else {
    uint64_t v11 = v7;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(v8 + 23);
  }
  else {
    uint64_t v12 = *(void *)(v8 + 8);
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v11, v12);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, " have already been registered.");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
}

void sub_1B1C83460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL quasar::Decoder::exceedsMaxArcs(uint64_t a1, uint64_t a2)
{
  if (*(int *)(a1 + 52) < 1) {
    return 0;
  }
  if (!*(void *)a2) {
    return 0;
  }
  uint64_t v3 = *(void *)(*(void *)a2 + 152);
  if (!v3) {
    return 0;
  }
  int v4 = fst::NumArcs<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(v3);
  if (quasar::gLogLevel >= 4)
  {
    memset(v12, 0, sizeof(v12));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Decoder: ", 9);
    if (*(char *)(a1 + 31) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
    }
    else {
      std::string __p = *(std::string *)(a1 + 8);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" inputArcs=", 11);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" maxArcs=", 9);
    std::ostream::operator<<();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v12);
  }
  return v4 > *(_DWORD *)(a1 + 52);
}

void sub_1B1C835E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

uint64_t fst::NumArcs<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) < 1) {
    return 0;
  }
  uint64_t v2 = 0;
  LODWORD(v3) = 0;
  do
  {
    uint64_t v3 = v3 + (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v2);
    uint64_t v2 = (v2 + 1);
  }
  while ((int)v2 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
  return v3;
}

uint64_t quasar::Decoder::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, int a6, uint64_t a7)
{
  if (*(_DWORD *)(a1 + 400) != 1)
  {
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    *(_OWORD *)int v65 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v65);
    long long v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Must call init() for ", 21);
    uint64_t v59 = *(void *)(a1 + 8);
    uint64_t v58 = a1 + 8;
    uint64_t v57 = v59;
    int v60 = *(char *)(v58 + 23);
    if (v60 >= 0) {
      uint64_t v61 = v58;
    }
    else {
      uint64_t v61 = v57;
    }
    if (v60 >= 0) {
      uint64_t v62 = *(unsigned __int8 *)(v58 + 23);
    }
    else {
      uint64_t v62 = *(void *)(v58 + 8);
    }
    float v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, v61, v62);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v63, " before calling run().");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v65);
  }
  quasar::SpeechRequestData::getRecogRequestTimer(*a4, v65);
  int v14 = (double *)v65[0];
  double Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v15);
  double v17 = *v14;
  if (v65[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v65[1]);
  }
  quasar::SpeechRequestData::getRecogRequestTimer(*a4, v65);
  long long v18 = (double *)v65[0];
  double v20 = kaldi::Timer::GetSeconds((kaldi::Timer *)0x10, v19);
  double v21 = v18[2];
  if (v65[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v65[1]);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 176))(a1, a3))
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      *(_OWORD *)int v65 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v65);
      long long v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Skipping Decoder: ", 18);
      if (*(char *)(a1 + 31) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
      }
      else {
        std::string __p = *(std::string *)(a1 + 8);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v65);
    }
    uint64_t v28 = 2 * *(unsigned __int8 *)(a1 + 56);
  }
  else if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1) {
         && *(unsigned char *)(*(void *)(*a4 + 24) + 53))
  }
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      *(_OWORD *)int v65 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v65);
      long long v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Audio analytics are unneeded. Skipping Decoder: ", 48);
      if (*(char *)(a1 + 31) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
      }
      else {
        std::string __p = *(std::string *)(a1 + 8);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v33 = &__p;
      }
      else {
        int v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v34 = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v33, v34);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v65);
    }
    uint64_t v28 = 0;
  }
  else if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) || *(void *)(a2 + 536))
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      *(_OWORD *)int v65 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v65);
      long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Running Decoder: ", 17);
      if (*(char *)(a1 + 31) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
      }
      else {
        std::string __p = *(std::string *)(a1 + 8);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v31 = &__p;
      }
      else {
        uint64_t v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v32 = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v31, v32);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v65);
    }
    uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, a4, a5, a7);
  }
  else
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      *(_OWORD *)int v65 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v65);
      long long v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Error: Utterance features were improperly cached. Failing Decoder: ", 67);
      if (*(char *)(a1 + 31) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
      }
      else {
        std::string __p = *(std::string *)(a1 + 8);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v29 = &__p;
      }
      else {
        long long v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v29, v30);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v65);
    }
    uint64_t v28 = 2;
  }
  quasar::SpeechRequestData::getRecogRequestTimer(*a4, v65);
  uint64_t v35 = (double *)v65[0];
  double v37 = Seconds - v17;
  double v38 = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v36) - *v35;
  if (v65[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v65[1]);
  }
  double v39 = v38 - v37;
  if (v28 == 2)
  {
    if (quasar::gLogLevel < 4) {
      goto LABEL_95;
    }
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    *(_OWORD *)int v65 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v65);
    long long v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Decoder ", 8);
    if (*(char *)(a1 + 31) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
    }
    else {
      std::string __p = *(std::string *)(a1 + 8);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v42 = &__p;
    }
    else {
      long long v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v43 = __p.__r_.__value_.__l.__size_;
    }
    long long v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v42, v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" failed. decoderDuration: ", 26);
    std::ostream::operator<<();
  }
  else
  {
    if (quasar::gLogLevel < 4) {
      goto LABEL_95;
    }
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    *(_OWORD *)int v65 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v65);
    long long v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Decoder ", 8);
    if (*(char *)(a1 + 31) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
    }
    else {
      std::string __p = *(std::string *)(a1 + 8);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v45 = &__p;
    }
    else {
      long long v45 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v46 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v46 = __p.__r_.__value_.__l.__size_;
    }
    long long v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v45, v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" succeeded. decoderDuration: ", 29);
    std::ostream::operator<<();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v65);
LABEL_95:
  uint64_t v48 = *(void *)(*(void *)a3 + 424);
  if (*(char *)(a1 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else {
    std::string __p = *(std::string *)(a1 + 8);
  }
  long long v49 = std::string::append(&__p, "Time");
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  *(void *)&long long v66 = *((void *)&v49->__r_.__value_.__l + 2);
  *(_OWORD *)int v65 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  quasar::SpeechRequestResultData::addDump(v48, (long long *)v65, v39);
  if (SBYTE7(v66) < 0) {
    operator delete(v65[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!a6) {
      return v28;
    }
  }
  else if (!a6)
  {
    return v28;
  }
  quasar::SpeechRequestData::getRecogRequestTimer(*a4, v65);
  long long v51 = (double *)v65[0];
  double v53 = kaldi::Timer::GetSeconds((kaldi::Timer *)0x10, v52) - v51[2] - (v20 - v21);
  uint64_t v54 = *(void *)(*(void *)a3 + 424);
  *(_DWORD *)(v54 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = (int)((double)*(int *)(v54 + 80) + v53 * 1000.0);
  if (v65[1])
  {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v65[1]);
    uint64_t v54 = *(void *)(*(void *)a3 + 424);
  }
  std::string::basic_string[abi:ne180100]<0>(v65, "FirstPassCpuMs");
  *(double *)&__p.__r_.__value_.__l.__data_ = (double)*(int *)(*(void *)(*(void *)a3 + 424) + 80);
  quasar::SpeechRequestResultData::addAA(v54, (long long *)v65, (double *)&__p, 1);
  if (SBYTE7(v66) < 0) {
    operator delete(v65[0]);
  }
  return v28;
}

uint64_t quasar::Decoder::setUpParams(quasar::Decoder *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v7, "stabilizer-averaging-period-ms");
  std::string::basic_string[abi:ne180100]<0>(__p, "Duration in milliseconds over which to stabilize partial results");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 40, (uint64_t)__p, 0, 28, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "stabilizer-minimum-word-seen-ms");
  std::string::basic_string[abi:ne180100]<0>(__p, "Minimum duration in milliseconds that word must be recognized before it is considered stable");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 44, (uint64_t)__p, 0, 28, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "dfst-cache-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "The maximum number of items cached by each deterministic FST. Has no effect if the decoder doesn't use deterministic FST.");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 48, (uint64_t)__p, 0, 183, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "max-arcs");
  std::string::basic_string[abi:ne180100]<0>(__p, "If > 0, decoder does nothing and returns Decoder::Success if the number of input lattice arcs exceeds this value. Decoders can customize behavior related to max-arcs. For example, rescoring decoder scales the lattice before checking max-arcs and keeps checks max-arcs while it runs.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 52, (uint64_t)__p, 0, 221, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "max-arcs-fail-decoder");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, return Decoder::Failed instead of Decoder::Success when exceeding max-arcs. This stops execution of subsequent decoders in the decoder chain but does not stop or fail the request. Decoders can customize behavior related to max-arcs-fail-decoder");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)this + 56, (uint64_t)__p, 0, 221, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "double-partial-silence-interval-ms");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, write a second partial result with a delay of trailing silence duration milliseconds");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 444, (uint64_t)__p, 0, 221, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  return (*(uint64_t (**)(quasar::Decoder *, quasar::SystemConfig *))(*(void *)this + 168))(this, a2);
}

void sub_1B1C84308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::Decoder::runAsyncTasks()
{
  return 0;
}

uint64_t quasar::Decoder::isLikelyWithPhoeticName(const std::string *a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "~w00");
  quasar::splitAndTrimNoEmpty(a1, (char *)&__p, &v27);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v2 = v27;
  for (uint64_t i = v28; v2 != (const std::string *)i; ++v2)
  {
    int64_t v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
    {
      long long v5 = (const std::string *)v2->__r_.__value_.__r.__words[0];
      int64_t size = v2->__r_.__value_.__l.__size_;
    }
    else
    {
      long long v5 = v2;
      int64_t size = HIBYTE(v2->__r_.__value_.__r.__words[2]);
    }
    if (size >= 1)
    {
      uint64_t v7 = (char *)v5 + size;
      char v8 = (std::string *)v5;
      do
      {
        uint64_t v9 = (char *)memchr(v8, 92, size);
        if (!v9) {
          break;
        }
        if (*v9 == 92)
        {
          if (v9 != v7 && v9 - (char *)v5 != -1)
          {
            if ((v4 & 0x80) != 0)
            {
              int v10 = (const std::string *)v2->__r_.__value_.__r.__words[0];
              int64_t v4 = v2->__r_.__value_.__l.__size_;
            }
            else
            {
              int v10 = v2;
            }
            uint64_t v11 = (char *)v10 + v4;
            if (v4 >= 1)
            {
              uint64_t v12 = (std::string *)v10;
              do
              {
                uint64_t v13 = (char *)memchr(v12, 92, v4);
                if (!v13) {
                  break;
                }
                if (*v13 == 92) {
                  goto LABEL_24;
                }
                uint64_t v12 = (std::string *)(v13 + 1);
                int64_t v4 = v11 - (char *)v12;
              }
              while (v11 - (char *)v12 > 0);
            }
            uint64_t v13 = v11;
LABEL_24:
            if (v13 == v11) {
              std::string::size_type v14 = 0;
            }
            else {
              std::string::size_type v14 = v13 - (char *)v10 + 1;
            }
            std::string::basic_string(&__p, v2, v14, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v29);
            int v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            long long v16 = (void *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int64_t v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              int64_t v17 = __p.__r_.__value_.__l.__size_;
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            clockid_t v19 = (char *)p_p + v17;
            if (v17 >= 1)
            {
              double v20 = p_p;
              do
              {
                double v21 = memchr(v20, 92, v17);
                if (!v21) {
                  break;
                }
                if (*v21 == 92) {
                  goto LABEL_39;
                }
                double v20 = (std::string *)(v21 + 1);
                int64_t v17 = v19 - (unsigned char *)v20;
              }
              while (v19 - (unsigned char *)v20 > 0);
            }
            double v21 = v19;
LABEL_39:
            BOOL v22 = v21 == v19 || v21 - (unsigned char *)p_p == -1;
            BOOL v23 = v22;
            if (v15 < 0) {
              operator delete(v16);
            }
            if (!v23)
            {
              uint64_t v24 = 1;
              goto LABEL_50;
            }
          }
          break;
        }
        char v8 = (std::string *)(v9 + 1);
        int64_t size = v7 - (char *)v8;
      }
      while (v7 - (char *)v8 >= 1);
    }
  }
  uint64_t v24 = 0;
LABEL_50:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v24;
}

void sub_1B1C84570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::Decoder::splitLmePartialResult(std::vector<std::wstring> *a1, uint64_t **a2)
{
  memset(&v104, 0, sizeof(v104));
  uint64_t begin = (uint64_t)a1->__begin_;
  std::vector<int>::pointer end = a1->__end_;
  if (a1->__begin_ != end)
  {
    do
    {
      int v3 = *(char *)(begin + 23);
      long long v5 = *(const std::string::value_type **)begin;
      std::string::size_type v4 = *(void *)(begin + 8);
      if (v3 >= 0) {
        int64_t v6 = *(unsigned __int8 *)(begin + 23);
      }
      else {
        int64_t v6 = *(void *)(begin + 8);
      }
      if (v3 >= 0) {
        uint64_t v7 = (const std::string::value_type *)begin;
      }
      else {
        uint64_t v7 = *(const std::string::value_type **)begin;
      }
      if (v6 >= 9)
      {
        char v8 = (void *)v7;
        uint64_t v9 = (char *)&v7[v6];
        int64_t v10 = v6;
        uint64_t v11 = (void *)v7;
        do
        {
          uint64_t v12 = (char *)memchr(v11, 92, v10 - 8);
          if (!v12) {
            break;
          }
          if (*(void *)v12 == 0x746361746E6F635CLL && v12[8] == 45)
          {
            if (v12 != v9 && v12 - v7 != -1)
            {
              int64_t v14 = v6;
              int v15 = (void *)v7;
              do
              {
                if (v14 == 3) {
                  break;
                }
                long long v16 = (char *)memchr(v15, 126, v14 - 3);
                if (!v16) {
                  break;
                }
                if (*(_DWORD *)v16 == 808482686)
                {
                  if (v16 == v9 || v16 - v7 == -1) {
                    break;
                  }
LABEL_33:
                  if (v3 < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)&__str, v5, v4);
                  }
                  else
                  {
                    long long v18 = *(_OWORD *)begin;
                    __str.__end_ = *(std::__split_buffer<std::wstring>::pointer *)(begin + 16);
                    *(_OWORD *)&__str.__first_ = v18;
                  }
                  uint64_t isLikelyWithPhoeticName = quasar::Decoder::isLikelyWithPhoeticName((const std::string *)&__str);
                  char v20 = isLikelyWithPhoeticName;
                  if (SHIBYTE(__str.__end_) < 0)
                  {
                    operator delete(__str.__first_);
                    if (v20) {
                      goto LABEL_38;
                    }
                  }
                  else if (isLikelyWithPhoeticName)
                  {
                    goto LABEL_38;
                  }
                  memset(&v103, 0, sizeof(v103));
                  unint64_t v100 = 0;
                  long long v101 = 0;
                  unint64_t v102 = 0;
                  v98[0] = 0;
                  v98[1] = 0;
                  std::__split_buffer<std::wstring>::pointer v99 = 0;
                  uint64_t v24 = (uint64_t *)a2;
                  int v25 = *((char *)a2 + 23);
                  if (v25 < 0)
                  {
                    if (a2[1] != (uint64_t *)17) {
                      goto LABEL_60;
                    }
                    uint64_t v24 = *a2;
                  }
                  else if (v25 != 17)
                  {
                    goto LABEL_60;
                  }
                  uint64_t v26 = *v24;
                  uint64_t v27 = v24[1];
                  int v28 = *((unsigned __int8 *)v24 + 16);
                  if (v26 == 0x724F686372616553 && v27 == 0x6E6967617373654DLL && v28 == 103)
                  {
                    memset(&__str, 0, 24);
                    uint64_t v35 = quasar::QsrText::SingletonInstance((quasar::QsrText *)isLikelyWithPhoeticName);
                    quasar::QsrText::decodeQsrText(v35, begin, (uint64_t)&__str);
                    std::string::basic_string[abi:ne180100]<0>(v95, " ");
                    quasar::splitAndTrimNoEmpty((const std::string *)&__str, (char *)v95, &__p);
                    std::vector<std::string>::__vdeallocate(&v103);
                    std::vector<std::wstring> v103 = __p;
                    memset(&__p, 0, sizeof(__p));
                    p_p = &__p;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
                    if (SHIBYTE(v96) < 0) {
                      operator delete(v95[0]);
                    }
                    if (SHIBYTE(__str.__end_) < 0) {
                      operator delete(__str.__first_);
                    }
                  }
                  else
                  {
LABEL_60:
                    std::string::basic_string[abi:ne180100]<0>(&__p, "~w00");
                    quasar::splitAndTrimNoEmpty((const std::string *)begin, (char *)&__p, &__str);
                    std::vector<std::string>::__vdeallocate(&v103);
                    *(_OWORD *)&v103.__begin_ = *(_OWORD *)&__str.__first_;
                    v103.__end_cap_.__value_ = __str.__end_;
                    memset(&__str, 0, 24);
                    v95[0] = &__str;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v95);
                    if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
                      operator delete(__p.__begin_);
                    }
                    int v33 = (std::string *)v103.__begin_;
                    std::vector<std::wstring>::pointer v32 = v103.__end_;
                    while (v33 != (std::string *)v32)
                    {
                      memset(&__str, 0, 24);
                      uint64_t v34 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v31);
                      quasar::QsrText::decodeQsrText(v34, (uint64_t)v33, (uint64_t)&__str);
                      uint64_t v31 = std::string::operator=(v33, (const std::string *)&__str);
                      if (SHIBYTE(__str.__end_) < 0) {
                        operator delete(__str.__first_);
                      }
                      ++v33;
                    }
                  }
                  int v36 = -1 - 1431655765 * ((unint64_t)((char *)v103.__end_ - (char *)v103.__begin_) >> 3);
                  if (v36 < 0)
                  {
                    long long v72 = v101;
                  }
                  else
                  {
                    do
                    {
                      double v37 = &v103.__begin_[v36];
                      std::wstring::size_type v38 = HIBYTE(v37->__r_.__value_.__r.__words[2]);
                      if (SHIBYTE(v37->__r_.__value_.__r.__words[2]) < 0)
                      {
                        double v39 = (std::wstring *)v37->__r_.__value_.__r.__words[0];
                        std::wstring::size_type size = v37->__r_.__value_.__l.__size_;
                      }
                      else
                      {
                        double v39 = &v103.__begin_[v36];
                        std::wstring::size_type size = HIBYTE(v37->__r_.__value_.__r.__words[2]);
                      }
                      int v41 = v36;
                      if (size)
                      {
                        long long v42 = (unsigned __int8 *)v39 + size;
                        std::string::size_type v43 = v39;
                        long long v44 = (char *)v39 + size;
                        do
                        {
                          long long v45 = (unsigned __int8 *)v43;
                          std::string::size_type v46 = (unsigned __int8 *)v43;
                          while (1)
                          {
                            int v47 = *v46++;
                            if (v47 == 92) {
                              break;
                            }
                            long long v45 = v46;
                            if (v46 == v42)
                            {
                              long long v45 = (unsigned __int8 *)v44;
                              goto LABEL_82;
                            }
                          }
                          std::string::size_type v43 = (std::wstring *)(v45 + 1);
                          long long v44 = (char *)v45;
                        }
                        while (v46 != v42);
LABEL_82:
                        if (v45 != v42 && v45 - (unsigned __int8 *)v39 != -1)
                        {
                          if ((v38 & 0x80) != 0)
                          {
                            uint64_t v48 = (std::wstring *)v37->__r_.__value_.__r.__words[0];
                            std::wstring::size_type v38 = v37->__r_.__value_.__l.__size_;
                          }
                          else
                          {
                            uint64_t v48 = v37;
                          }
                          long long v49 = (unsigned __int8 *)v48 + v38;
                          if (v38)
                          {
                            long long v50 = (unsigned __int8 *)v48;
                            long long v51 = (unsigned __int8 *)v48 + v38;
                            do
                            {
                              clockid_t v52 = v50;
                              double v53 = v50;
                              while (1)
                              {
                                int v54 = *v53++;
                                if (v54 == 92) {
                                  break;
                                }
                                clockid_t v52 = v53;
                                if (v53 == v49)
                                {
                                  clockid_t v52 = v51;
                                  goto LABEL_96;
                                }
                              }
                              long long v50 = v52 + 1;
                              long long v51 = v52;
                            }
                            while (v53 != v49);
                          }
                          else
                          {
                            clockid_t v52 = (unsigned __int8 *)v48;
                          }
LABEL_96:
                          std::string::size_type v55 = v52 - (unsigned __int8 *)v48;
                          if (v52 == v49) {
                            std::string::size_type v56 = -1;
                          }
                          else {
                            std::string::size_type v56 = v55;
                          }
                          std::string::basic_string((std::string *)&__str, (const std::string *)v37, v56, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
                          if (SHIBYTE(v99) < 0) {
                            operator delete(v98[0]);
                          }
                          *(_OWORD *)long long v98 = *(_OWORD *)&__str.__first_;
                          std::__split_buffer<std::wstring>::pointer v99 = __str.__end_;
                          uint64_t v57 = &v103.__begin_[v41];
                          if (SHIBYTE(v57->__r_.__value_.__r.__words[2]) < 0)
                          {
                            uint64_t v59 = (std::wstring *)v57->__r_.__value_.__r.__words[0];
                            std::wstring::size_type v58 = v57->__r_.__value_.__l.__size_;
                          }
                          else
                          {
                            std::wstring::size_type v58 = HIBYTE(v57->__r_.__value_.__r.__words[2]);
                            uint64_t v59 = &v103.__begin_[v41];
                          }
                          int v60 = (unsigned __int8 *)v59 + v58;
                          if (v58)
                          {
                            uint64_t v61 = v59;
                            uint64_t v62 = (std::wstring *)((char *)v59 + v58);
                            do
                            {
                              float v63 = v61;
                              __int32 v64 = (unsigned __int8 *)v61;
                              while (1)
                              {
                                int v65 = *v64++;
                                if (v65 == 92) {
                                  break;
                                }
                                float v63 = (std::wstring *)v64;
                                if (v64 == v60)
                                {
                                  float v63 = v62;
                                  goto LABEL_113;
                                }
                              }
                              uint64_t v61 = (std::wstring *)((char *)&v63->__r_.__value_.__l.__data_ + 1);
                              uint64_t v62 = v63;
                            }
                            while (v64 != v60);
                          }
                          else
                          {
                            float v63 = v59;
                          }
LABEL_113:
                          std::string::size_type v66 = (char *)v63 - (char *)v59;
                          if (v63 == (std::wstring *)v60) {
                            std::string::size_type v67 = -1;
                          }
                          else {
                            std::string::size_type v67 = v66;
                          }
                          std::string::basic_string((std::string *)&__str, (const std::string *)v57, 0, v67, (std::allocator<char> *)&__p);
                          long long v68 = &v103.__begin_[v41];
                          if (SHIBYTE(v68->__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v68->__r_.__value_.__l.__data_);
                          }
                          long long v69 = *(_OWORD *)&__str.__first_;
                          v68->__r_.__value_.__r.__words[2] = (std::wstring::size_type)__str.__end_;
                          *(_OWORD *)&v68->__r_.__value_.__l.__data_ = v69;
                        }
                      }
                      long long v70 = v101;
                      if ((unint64_t)v101 >= v102)
                      {
                        long long v72 = (quasar::QsrText *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v100, (long long *)v98);
                      }
                      else
                      {
                        if (SHIBYTE(v99) < 0)
                        {
                          std::string::__init_copy_ctor_external((std::string *)v101, (const std::string::value_type *)v98[0], (std::string::size_type)v98[1]);
                        }
                        else
                        {
                          long long v71 = *(_OWORD *)v98;
                          *((void *)v101 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v99;
                          *(_OWORD *)long long v70 = v71;
                        }
                        long long v72 = (quasar::QsrText *)((char *)v70 + 24);
                      }
                      long long v101 = v72;
                      int v36 = v41 - 1;
                    }
                    while (v41 > 0);
                  }
                  if ((quasar::QsrText *)v100 != v72)
                  {
                    long long v73 = (char *)v72 - 24;
                    if ((unint64_t)v72 - 24 > v100)
                    {
                      unint64_t v74 = v100 + 24;
                      do
                      {
                        *(_OWORD *)&__str.__first_ = *(_OWORD *)(v74 - 24);
                        long long v75 = *(_OWORD *)&__str.__first_;
                        __str.__end_ = *(std::__split_buffer<std::wstring>::pointer *)(v74 - 8);
                        std::__split_buffer<std::wstring>::pointer v76 = __str.__end_;
                        uint64_t v77 = *((void *)v73 + 2);
                        *(_OWORD *)(v74 - ++*(_DWORD *)(result + 24) = *(_OWORD *)v73;
                        *(void *)(v74 - 8) = v77;
                        *((void *)v73 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v76;
                        *(_OWORD *)long long v73 = v75;
                        v73 -= 24;
                        BOOL v78 = v74 >= (unint64_t)v73;
                        v74 += 24;
                      }
                      while (!v78);
                    }
                  }
                  std::vector<std::wstring>::pointer v79 = v103.__begin_;
                  if (v103.__end_ != v103.__begin_)
                  {
                    uint64_t v80 = 0;
                    uint64_t v81 = 0;
                    do
                    {
                      memset(&__p, 0, sizeof(__p));
                      uint64_t v82 = quasar::QsrText::SingletonInstance(v72);
                      quasar::QsrText::encodeTokenQsrText(v82, (uint64_t)&v79[v80], (uint64_t)&__p);
                      long long v72 = (quasar::QsrText *)std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p.__begin_, (const void **)(v100 + v80 * 24), (uint64_t)v95);
                      std::vector<std::string>::pointer v83 = v104.__end_;
                      if (v104.__end_ >= v104.__end_cap_.__value_)
                      {
                        unint64_t v85 = 0xAAAAAAAAAAAAAAABLL * (((char *)v104.__end_ - (char *)v104.__begin_) >> 3);
                        unint64_t v86 = v85 + 1;
                        if (v85 + 1 > 0xAAAAAAAAAAAAAAALL) {
                          std::vector<int>::__throw_length_error[abi:ne180100]();
                        }
                        if (0x5555555555555556 * (((char *)v104.__end_cap_.__value_ - (char *)v104.__begin_) >> 3) > v86) {
                          unint64_t v86 = 0x5555555555555556 * (((char *)v104.__end_cap_.__value_ - (char *)v104.__begin_) >> 3);
                        }
                        if (0xAAAAAAAAAAAAAAABLL * (((char *)v104.__end_cap_.__value_ - (char *)v104.__begin_) >> 3) >= 0x555555555555555) {
                          unint64_t v87 = 0xAAAAAAAAAAAAAAALL;
                        }
                        else {
                          unint64_t v87 = v86;
                        }
                        __str.__end_cap_.__value_ = (std::allocator<std::wstring> *)&v104.__end_cap_;
                        if (v87) {
                          int v88 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v104.__end_cap_, v87);
                        }
                        else {
                          int v88 = 0;
                        }
                        uint64_t v89 = v88 + v85;
                        __str.__first_ = v88;
                        __str.__begin_ = v89;
                        __str.__end_cap_.__value_ = &v88[v87];
                        long long v90 = *(_OWORD *)v95;
                        v89->__r_.__value_.__r.__words[2] = v96;
                        *(_OWORD *)&v89->__r_.__value_.__l.__data_ = v90;
                        v95[1] = 0;
                        std::string::size_type v96 = 0;
                        v95[0] = 0;
                        __str.__end_ = v89 + 1;
                        std::vector<std::string>::__swap_out_circular_buffer(&v104, (std::__split_buffer<std::string> *)&__str);
                        uint64_t v91 = v104.__end_;
                        std::__split_buffer<std::string>::~__split_buffer(&__str);
                        v104.__end_ = v91;
                        if (SHIBYTE(v96) < 0) {
                          operator delete(v95[0]);
                        }
                      }
                      else
                      {
                        long long v84 = *(_OWORD *)v95;
                        v104.__end_->__r_.__value_.__r.__words[2] = v96;
                        *(_OWORD *)&v83->__r_.__value_.__l.__data_ = v84;
                        v104.__end_ = v83 + 1;
                      }
                      if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
                        operator delete(__p.__begin_);
                      }
                      ++v81;
                      std::vector<std::wstring>::pointer v79 = v103.__begin_;
                      ++v80;
                    }
                    while (v81 != 0xAAAAAAAAAAAAAAABLL * (((char *)v103.__end_ - (char *)v103.__begin_) >> 3));
                  }
                  if (SHIBYTE(v99) < 0) {
                    operator delete(v98[0]);
                  }
                  __str.__first_ = (std::__split_buffer<std::wstring>::pointer)&v100;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                  __str.__first_ = (std::__split_buffer<std::wstring>::pointer)&v103;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                  goto LABEL_45;
                }
                int v15 = v16 + 1;
                int64_t v14 = v9 - (unsigned char *)v15;
              }
              while (v9 - (unsigned char *)v15 >= 4);
              while (1)
              {
                int64_t v17 = (char *)memchr(v8, 95, v6);
                if (!v17) {
                  break;
                }
                if (*v17 == 95)
                {
                  if (v17 == v9 || v17 - v7 == -1) {
                    goto LABEL_38;
                  }
                  goto LABEL_33;
                }
                char v8 = v17 + 1;
                int64_t v6 = v9 - (v17 + 1);
                if (v6 < 1) {
                  goto LABEL_38;
                }
              }
            }
            break;
          }
          uint64_t v11 = v12 + 1;
          int64_t v10 = v9 - (unsigned char *)v11;
        }
        while (v9 - (unsigned char *)v11 >= 9);
      }
LABEL_38:
      std::vector<std::string>::pointer v21 = v104.__end_;
      if (v104.__end_ >= v104.__end_cap_.__value_)
      {
        BOOL v23 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v104, (long long *)begin);
      }
      else
      {
        if (*(char *)(begin + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v104.__end_, *(const std::string::value_type **)begin, *(void *)(begin + 8));
        }
        else
        {
          long long v22 = *(_OWORD *)begin;
          v104.__end_->__r_.__value_.__r.__words[2] = *(void *)(begin + 16);
          *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
        }
        BOOL v23 = v21 + 1;
      }
      v104.__end_ = v23;
LABEL_45:
      begin += 24;
    }
    while ((std::wstring *)begin != end);
  }
  if (&v104 != (std::vector<std::string> *)a1) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a1, v104.__begin_, (long long *)v104.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v104.__end_ - (char *)v104.__begin_) >> 3));
  }
  __str.__first_ = (std::__split_buffer<std::wstring>::pointer)&v104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
}

void sub_1B1C84E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char ***a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char **a33,uint64_t a34,uint64_t a35,char *a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v41 - 121) < 0) {
    operator delete(*(void **)(v41 - 144));
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  a27 = &a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  a33 = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  a36 = &a40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  _Unwind_Resume(a1);
}

uint64_t quasar::Decoder::reportResults(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  std::string::size_type v55 = 0;
  std::string::size_type v56 = 0;
  uint64_t v57 = 0;
  char v54 = 0;
  if (quasar::Decoder::getLinearOutputSymbolSequenceWithDuration<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>(a1, (uint64_t *)&v55, 0, (void *)a4, &v54, 0, 0, 0, (char **)(*a2 + 1008)))
  {
    uint64_t v7 = *a2;
    *(unsigned char *)(v7 + 144) = *(unsigned char *)(*a2 + 144) | v54;
    quasar::SymbolTableList::lookup(*(uint64_t **)(v7 + 472), &v55, (uint64_t *)(v7 + 48), (char **)(v7 + 72), 1);
    uint64_t v8 = *a2;
    if (!*(_DWORD *)(*a2 + 624))
    {
      uint64_t v9 = *(void *)(v8 + 56);
      unint64_t v10 = v9 - *(void *)(v8 + 48);
      if (v10)
      {
        uint64_t v11 = &v55[12 * (int)(-1431655765 * (v10 >> 3) - 1)];
        int v12 = v11[1];
        int v13 = v11[2];
        float v14 = *((float *)v11 + 3);
        long long v37 = 0uLL;
        uint64_t v38 = 0;
        if (*(char *)(v9 - 1) < 0)
        {
          std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(v9 - 24), *(void *)(v9 - 16));
        }
        else
        {
          long long v15 = *(_OWORD *)(v9 - 24);
          v36.__r_.__value_.__r.__words[2] = *(void *)(v9 - 8);
          *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v15;
        }
        std::string::basic_string[abi:ne180100]<0>(&v34, "");
        memset(v33, 0, sizeof(v33));
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        quasar::Token::Token((std::string *)v39, (long long *)&v36, 0, v12, v13, 1, 0, &v37, v14, &v34, (long long **)v33, 0, (long long *)__p, 0, 0);
        if (v32 < 0) {
          operator delete(__p[0]);
        }
        __p[0] = v33;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (SHIBYTE(v35) < 0) {
          operator delete((void *)v34);
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        BOOL isPrintable = quasar::Token::isPrintable((quasar::Token *)v39);
        int v18 = DWORD1(v41);
        if (!isPrintable) {
          int v18 = 0;
        }
        *(_DWORD *)(*a2 + 6++*(_DWORD *)(result + 24) = v18;
        if (SBYTE7(v49) < 0) {
          operator delete((void *)v48);
        }
        if (SBYTE7(v47) < 0) {
          operator delete((void *)v46);
        }
        *(void *)&long long v34 = &v45[8];
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
        if ((v45[7] & 0x80000000) != 0) {
          operator delete((void *)v44);
        }
        *(void *)&long long v34 = &v43[8];
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
        if ((v43[7] & 0x80000000) != 0) {
          operator delete((void *)v42);
        }
        if (SBYTE7(v40) < 0) {
          operator delete(v39[0]);
        }
        if (SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        uint64_t v8 = *a2;
      }
    }
    if (*(unsigned char *)(v8 + 1096))
    {
      char v20 = v55;
      clockid_t v19 = v56;
      if (v56 != v55)
      {
        int v21 = 0;
        int v22 = *(_DWORD *)(v8 + 1100);
        int v23 = *(_DWORD *)(v8 + 1104);
        do
        {
          *(_OWORD *)double v39 = *(_OWORD *)v20;
          *(void *)&long long v41 = 0;
          long long v40 = 0uLL;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v40, *((const void **)v20 + 2), *((void *)v20 + 3), (uint64_t)(*((void *)v20 + 3) - *((void *)v20 + 2)) >> 2);
          *((void *)&v41 + 1) = *((void *)v20 + 5);
          int v24 = HIDWORD(v39[0]);
          if ((void)v40)
          {
            *((void *)&v40 + 1) = v40;
            operator delete((void *)v40);
          }
          v21 += v24;
          v20 += 12;
        }
        while (v20 != v19);
        uint64_t v8 = *a2;
        int v25 = (char *)v55 + 2 * (*(void *)(*a2 + 56) - *(void *)(*a2 + 48));
        *((_DWORD *)v25 - 11) += v23 - v22 - v21;
      }
    }
    if (*(unsigned char *)(v8 + 1088)) {
      quasar::Decoder::splitLmePartialResult((std::vector<std::wstring> *)(v8 + 48), (uint64_t **)(*(void *)(*(void *)a3 + 24) + 80));
    }
    if (*(unsigned char *)(a4 + 561))
    {
      uint64_t v26 = *a2;
      if (!*(unsigned char *)(*a2 + 1089))
      {
        uint64_t v27 = *(void *)(v26 + 560);
        uint64_t v28 = *(unsigned int *)(*(void *)a3 + 12);
        v39[0] = 0;
        v39[1] = 0;
        *(void *)&long long v40 = 0;
        long long v37 = 0uLL;
        uint64_t v38 = 0;
        long long v34 = 0uLL;
        uint64_t v35 = 0;
        LOWORD(v3std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void **, long long *, long long *, int, uint64_t))(*(void *)v27 + 24))(v27, v26 + 48, v28, 1, 0, 0, v39, &v37, &v34, v30, v26 + 1136);
        v33[0] = (void **)&v34;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v33);
        *(void *)&long long v34 = &v37;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
        *(void *)&long long v37 = v39;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
      }
    }
    uint64_t v16 = 0;
  }
  else
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      memset(v45, 0, sizeof(v45));
      long long v44 = 0u;
      long long v42 = 0u;
      memset(v43, 0, sizeof(v43));
      long long v40 = 0u;
      long long v41 = 0u;
      *(_OWORD *)double v39 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Linear Output Failed", 20);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v39);
    }
    uint64_t v16 = 2;
  }
  v39[0] = &v55;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
  return v16;
}

void sub_1B1C853D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  a41 = v41 - 136;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  _Unwind_Resume(a1);
}

uint64_t quasar::Decoder::getLinearOutputSymbolSequenceWithDuration<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>(uint64_t a1, uint64_t *a2, int32x2_t *a3, void *a4, unsigned char *a5, void **a6, kaldi::LatticeScoreCache *a7, int a8, char **a9)
{
  *a5 = 0;
  if (a9) {
    a9[1] = *a9;
  }
  v167 = 0;
  v168 = 0;
  unint64_t v169 = 0;
  v164 = 0;
  uint64_t v165 = 0;
  v163 = 0;
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (v15 != -1)
  {
    uint64_t v16 = a4[27];
    if (v16) {
      int v130 = *(_DWORD *)(v16 + 24);
    }
    else {
      int v130 = 0;
    }
    float v120 = a5;
    unint64_t v121 = (float *)a3;
    int v127 = (*(uint64_t (**)(void))(**(void **)(*a4 + 16) + 32))(*(void *)(*a4 + 16));
    int v128 = 0;
    int v18 = 0;
    int v19 = 0;
    long long v160 = 0u;
    long long v161 = 0u;
    long long v159 = 0u;
    std::vector<std::wstring> __p = 0;
    v157 = 0;
    int v158 = 0;
    if (a6) {
      char v20 = 1;
    }
    else {
      char v20 = a8;
    }
    if (a7) {
      int v21 = a8;
    }
    else {
      int v21 = 0;
    }
    int v123 = v21;
    char v124 = v20;
    float v22 = 1.0;
    float v23 = 0.0;
    float v24 = 0.0;
    float v129 = 0.0;
    float v25 = 0.0;
    while (1)
    {
      (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v155, a1, v15);
      float v26 = *((float *)&v155 + 1);
      unint64_t v28 = v155;
      LODWORD(v152[0]) = HIDWORD(v28);
      LODWORD(v27) = v28;
      v131[0] = v155;
      int v171 = 2139095040;
      float v170 = INFINITY;
      v29.n128_u32[0] = v155;
      if (*(float *)&v155 != INFINITY) {
        break;
      }
      v29.n128_u32[0] = v152[0];
      if (*(float *)v152 != v170) {
        break;
      }
      if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a1 + 40))(a1, v15, *(float *)v152) != 1) {
        goto LABEL_130;
      }
      uint64_t v154 = 0;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v15, v152);
      if (v152[0]) {
        int v30 = (float *)(*(uint64_t (**)(void))(*(void *)v152[0] + 32))(v152[0]);
      }
      else {
        int v30 = (float *)(v152[1] + 20 * v154);
      }
      float v31 = v30[2];
      float v32 = v30[3];
      int v33 = *((_DWORD *)v30 + 1);
      if (v33) {
        BOOL v34 = v33 == v130;
      }
      else {
        BOOL v34 = 1;
      }
      if (v34)
      {
        float v35 = v30[3];
        int v36 = *((_DWORD *)v30 + 2);
      }
      else
      {
        if (v19)
        {
          float v37 = 0.001;
          if (v22 != 0.0) {
            float v37 = v22;
          }
          if (!*((unsigned char *)a4 + 552)) {
            float v37 = 0.0;
          }
          *((float *)&v162 + 3) = v37;
          int v38 = v19;
          LODWORD(v16std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v128;
          DWORD1(v16std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = (v19 - v18) * v127;
          if (v19 > v18)
          {
            while (*((void *)&v161 + 1))
            {
              int v39 = *(_DWORD *)(*(void *)(*((void *)&v159 + 1)
                                          + (((unint64_t)(v161 + *((void *)&v161 + 1) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                              + 4 * ((v161 + *((void *)&v161 + 1) - 1) & 0x3FF));
              --*((void *)&v161 + 1);
              std::deque<int>::__maybe_remove_back_spare[abi:ne180100](&v159, 1);
              if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(a4 + 12), v39)) {
                break;
              }
              if (--v38 <= v18)
              {
                int v38 = v18;
                break;
              }
            }
          }
          DWORD2(v16std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v38 * v127;
          *(_OWORD *)float v131 = v159;
          long long v132 = v160;
          long long v159 = 0u;
          long long v160 = 0u;
          long long v133 = v161;
          long long v161 = 0u;
          unint64_t v166 = __PAIR64__(LODWORD(v25), LODWORD(v129));
          long long v40 = v168;
          if ((unint64_t)v168 >= v169)
          {
            uint64_t v41 = (uint64_t *)std::vector<fst::symbol_outT<int>>::__push_back_slow_path<fst::symbol_outT<int> const&>((uint64_t *)&v167, (uint64_t)&v162);
          }
          else
          {
            *(_OWORD *)v168 = v162;
            v40[3] = 0;
            v40[4] = 0;
            v40[2] = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v40 + 2, v163, (uint64_t)v164, (v164 - (unsigned char *)v163) >> 2);
            v40[5] = v166;
            uint64_t v41 = v40 + 6;
          }
          v168 = v41;
          std::deque<int>::~deque[abi:ne180100](v131);
          int v128 = *((_DWORD *)v30 + 1);
          float v129 = 0.0;
          float v25 = 0.0;
          int v36 = *((_DWORD *)v30 + 2);
          float v35 = v30[3];
        }
        else
        {
          int v36 = *((_DWORD *)v30 + 2);
          float v35 = v30[3];
          int v128 = *((_DWORD *)v30 + 1);
        }
        float v22 = round(exp(-v35) * 1000.0);
        int v18 = v19;
      }
      uint64_t v148 = *(void *)v30;
      int v149 = v36;
      float v150 = v35;
      int v151 = *((_DWORD *)v30 + 4);
      v19 += quasar::arcConsumesAFrame<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(&v148, (uint64_t)a4);
      if (a4[4])
      {
        long long v42 = (kaldi::TransitionModel *)a4[10];
        if (v42)
        {
          if (*(_DWORD *)v30)
          {
            v131[0] = 0;
            v131[0] = kaldi::TransitionModel::TransitionIdToPhone(v42, *(_DWORD *)v30);
            std::deque<int>::push_back(&v159, v131);
            BOOL isSilencePhone = kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(a4 + 12), v131[0]);
            if (kaldi::TransitionModel::IsFinal((kaldi::TransitionModel *)a4[10], *(_DWORD *)v30) && !isSilencePhone)
            {
              long long v44 = v157;
              if (v157 >= v158)
              {
                long long v46 = (char *)__p;
                uint64_t v47 = (v157 - (unsigned char *)__p) >> 2;
                unint64_t v48 = v47 + 1;
                if ((unint64_t)(v47 + 1) >> 62) {
                  goto LABEL_202;
                }
                uint64_t v49 = v158 - (unsigned char *)__p;
                if ((v158 - (unsigned char *)__p) >> 1 > v48) {
                  unint64_t v48 = v49 >> 1;
                }
                if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v50 = v48;
                }
                if (v50)
                {
                  long long v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v158, v50);
                  long long v46 = (char *)__p;
                  long long v44 = v157;
                }
                else
                {
                  long long v51 = 0;
                }
                long long v52 = &v51[4 * v47];
                *(_DWORD *)long long v52 = v131[0];
                long long v45 = v52 + 4;
                while (v44 != v46)
                {
                  int v53 = *((_DWORD *)v44 - 1);
                  v44 -= 4;
                  *((_DWORD *)v52 - 1) = v53;
                  v52 -= 4;
                }
                std::vector<std::wstring> __p = v52;
                v157 = v45;
                int v158 = &v51[4 * v50];
                if (v46) {
                  operator delete(v46);
                }
              }
              else
              {
                *(_DWORD *)v157 = v131[0];
                long long v45 = v44 + 4;
              }
              v157 = v45;
            }
            if (a9)
            {
              std::string::size_type v55 = a9[1];
              unint64_t v54 = (unint64_t)a9[2];
              if ((unint64_t)v55 >= v54)
              {
                uint64_t v57 = *a9;
                uint64_t v58 = (v55 - *a9) >> 2;
                unint64_t v59 = v58 + 1;
                if ((unint64_t)(v58 + 1) >> 62) {
LABEL_202:
                }
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                uint64_t v60 = v54 - (void)v57;
                if (v60 >> 1 > v59) {
                  unint64_t v59 = v60 >> 1;
                }
                if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v61 = v59;
                }
                if (v61)
                {
                  uint64_t v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a9 + 2), v61);
                  uint64_t v57 = *a9;
                  std::string::size_type v55 = a9[1];
                }
                else
                {
                  uint64_t v62 = 0;
                }
                float v63 = &v62[4 * v58];
                *(_DWORD *)float v63 = v131[0];
                std::string::size_type v56 = v63 + 4;
                while (v55 != v57)
                {
                  int v64 = *((_DWORD *)v55 - 1);
                  v55 -= 4;
                  *((_DWORD *)v63 - 1) = v64;
                  v63 -= 4;
                }
                *a9 = v63;
                a9[1] = v56;
                a9[2] = &v62[4 * v61];
                if (v57) {
                  operator delete(v57);
                }
              }
              else
              {
                *(_DWORD *)std::string::size_type v55 = v131[0];
                std::string::size_type v56 = v55 + 4;
              }
              a9[1] = v56;
            }
            if (v124)
            {
              int v65 = *(_DWORD *)(*(void *)(a4[10] + 96) + 4 * *(int *)v30);
              if (a6)
              {
                float32x2_t v122 = a2;
                std::string::size_type v67 = (char *)a6[1];
                std::string::size_type v66 = (char *)a6[2];
                if (v67 >= v66)
                {
                  uint64_t v69 = (v67 - (unsigned char *)*a6) >> 3;
                  unint64_t v70 = v69 + 1;
                  if ((unint64_t)(v69 + 1) >> 61) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v71 = v66 - (unsigned char *)*a6;
                  if (v71 >> 2 > v70) {
                    unint64_t v70 = v71 >> 2;
                  }
                  if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v72 = v70;
                  }
                  long long v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a6 + 2), v72);
                  long long v75 = &v73[8 * v69];
                  *(_DWORD *)long long v75 = v65;
                  v75[4] = isSilencePhone;
                  uint64_t v77 = (char *)*a6;
                  std::__split_buffer<std::wstring>::pointer v76 = (char *)a6[1];
                  BOOL v78 = v75;
                  if (v76 != *a6)
                  {
                    do
                    {
                      uint64_t v79 = *((void *)v76 - 1);
                      v76 -= 8;
                      *((void *)v78 - 1) = v79;
                      v78 -= 8;
                    }
                    while (v76 != v77);
                    std::__split_buffer<std::wstring>::pointer v76 = (char *)*a6;
                  }
                  long long v68 = v75 + 8;
                  *a6 = v78;
                  a6[1] = v75 + 8;
                  a6[2] = &v73[8 * v74];
                  if (v76) {
                    operator delete(v76);
                  }
                }
                else
                {
                  *(_DWORD *)std::string::size_type v67 = v65;
                  v67[4] = isSilencePhone;
                  long long v68 = v67 + 8;
                }
                a6[1] = v68;
                a2 = v122;
              }
            }
            else
            {
              int v65 = -1;
            }
            if (v123)
            {
              float Score = kaldi::LatticeScoreCache::GetScore(a7, v19 - 1, v65);
              if (isSilencePhone) {
                float v81 = -0.0;
              }
              else {
                float v81 = Score;
              }
              float v129 = v129 + v81;
              if (!isSilencePhone) {
                float Score = -0.0;
              }
              float v25 = v25 + Score;
            }
          }
        }
      }
      uint64_t v15 = *((unsigned int *)v30 + 4);
      if (v152[0])
      {
        (*(void (**)(void))(*(void *)v152[0] + 8))(v152[0]);
      }
      else if (v153)
      {
        --*v153;
      }
      float v23 = v23 + v31;
      float v24 = v24 + v32;
    }
    if (v19)
    {
      float v82 = 0.001;
      if (v22 != 0.0) {
        float v82 = v22;
      }
      if (!*((unsigned char *)a4 + 552)) {
        float v82 = 0.0;
      }
      *((float *)&v162 + 3) = v82;
      LODWORD(v16std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v128;
      DWORD1(v16std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = (v19 - v18) * v127;
      if (v19 > v18)
      {
        while (*((void *)&v161 + 1))
        {
          int v83 = *(_DWORD *)(*(void *)(*((void *)&v159 + 1)
                                      + (((unint64_t)(v161 + *((void *)&v161 + 1) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                          + 4 * ((v161 + *((void *)&v161 + 1) - 1) & 0x3FF));
          --*((void *)&v161 + 1);
          std::deque<int>::__maybe_remove_back_spare[abi:ne180100](&v159, 1);
          if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(a4 + 12), v83)) {
            break;
          }
          if (--v19 <= v18)
          {
            int v19 = v18;
            break;
          }
        }
      }
      DWORD2(v16std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v19 * v127;
      *(_OWORD *)float v131 = v159;
      long long v132 = v160;
      long long v159 = 0u;
      long long v160 = 0u;
      long long v133 = v161;
      long long v161 = 0u;
      unint64_t v166 = __PAIR64__(LODWORD(v25), LODWORD(v129));
      long long v84 = v168;
      if ((unint64_t)v168 >= v169)
      {
        unint64_t v85 = (uint64_t *)std::vector<fst::symbol_outT<int>>::__push_back_slow_path<fst::symbol_outT<int> const&>((uint64_t *)&v167, (uint64_t)&v162);
      }
      else
      {
        *(_OWORD *)v168 = v162;
        v84[3] = 0;
        v84[4] = 0;
        v84[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v84 + 2, v163, (uint64_t)v164, (v164 - (unsigned char *)v163) >> 2);
        v84[5] = v166;
        unint64_t v85 = v84 + 6;
      }
      v168 = v85;
      std::deque<int>::~deque[abi:ne180100](v131);
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)a1 + 40))(a1, v15, v29))
    {
LABEL_130:
      uint64_t v17 = 0;
    }
    else
    {
      if (a2 && &v167 != (uint64_t **)a2) {
        std::vector<fst::symbol_outT<int>>::__assign_with_size[abi:ne180100]<fst::symbol_outT<int>*,fst::symbol_outT<int>*>(a2, v167, v168, 0xAAAAAAAAAAAAAAABLL * (((char *)v168 - (char *)v167) >> 4));
      }
      if (v121)
      {
        *unint64_t v121 = v23 + v27;
        v121[1] = v24 + v26;
      }
      if (a4[27])
      {
        uint64_t v86 = *a2;
        unint64_t v87 = (unsigned int *)__p;
        if (__p == v157)
        {
LABEL_172:
          uint64_t v108 = a2[1];
          if (v86 != v108)
          {
            uint64_t v109 = a4[27];
            uint64_t v17 = 1;
            while (1)
            {
              int v110 = *(_DWORD *)v86;
              if (*(_DWORD *)v86)
              {
                if (v110 != *(_DWORD *)(v109 + 24)) {
                  break;
                }
              }
LABEL_176:
              v86 += 48;
              if (v86 == v108) {
                goto LABEL_191;
              }
            }
            for (uint64_t i = *(uint64_t **)(v109 + 40); i; uint64_t i = (uint64_t *)*i)
            {
              int v112 = *((_DWORD *)i + 7);
              if (v110 >= v112)
              {
                if (v112 >= v110) {
                  goto LABEL_176;
                }
                ++i;
              }
            }
            if (quasar::gLogLevel >= 4)
            {
              long long v146 = 0u;
              long long v147 = 0u;
              long long v144 = 0u;
              long long v145 = 0u;
              long long v142 = 0u;
              long long v143 = 0u;
              long long v140 = 0u;
              long long v141 = 0u;
              long long v138 = 0u;
              long long v139 = 0u;
              long long v136 = 0u;
              long long v137 = 0u;
              long long v134 = 0u;
              long long v135 = 0u;
              long long v132 = 0u;
              long long v133 = 0u;
              *(_OWORD *)float v131 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v131);
              long long v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)"Phone sequencing failed; Ran out of phones, probably because ",
                       61);
              long long v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)"the last word got clipped in the audio. ", 40);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)"Lattice word alignment and confidence computation will also fail.", 65);
              quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v131);
              uint64_t v108 = a2[1];
            }
            uint64_t v17 = 1;
            *float v120 = 1;
            for (uint64_t j = *a2; j != v108; j += 48)
              *(void *)(j + ++*(_DWORD *)(result + 24) = *(void *)(j + 16);
            goto LABEL_191;
          }
        }
        else
        {
          while (1)
          {
            uint64_t v88 = a2[1];
            if (v86 != v88)
            {
              uint64_t v89 = a4[27];
              long long v90 = (uint64_t *)(v89 + 40);
              while (1)
              {
                int v91 = *(_DWORD *)v86;
                if (*(_DWORD *)v86 && v91 != *(_DWORD *)(v89 + 24))
                {
                  uint64_t v92 = *v90;
                  if (!*v90) {
                    break;
                  }
                  uint64_t v93 = v89 + 40;
                  do
                  {
                    int v94 = *(_DWORD *)(v92 + 28);
                    BOOL v95 = v94 < v91;
                    if (v94 >= v91) {
                      std::string::size_type v96 = (uint64_t *)v92;
                    }
                    else {
                      std::string::size_type v96 = (uint64_t *)(v92 + 8);
                    }
                    if (!v95) {
                      uint64_t v93 = v92;
                    }
                    uint64_t v92 = *v96;
                  }
                  while (*v96);
                  if ((uint64_t *)v93 == v90 || v91 < *(_DWORD *)(v93 + 28)) {
                    break;
                  }
                }
                v86 += 48;
                if (v86 == v88) {
                  goto LABEL_197;
                }
              }
            }
            if (v86 == v88) {
              break;
            }
            unint64_t v97 = *(void *)(v86 + 32);
            long long v98 = *(unsigned int **)(v86 + 24);
            if ((unint64_t)v98 >= v97)
            {
              unint64_t v100 = *(unsigned int **)(v86 + 16);
              uint64_t v101 = v98 - v100;
              if ((unint64_t)(v101 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v102 = v97 - (void)v100;
              unint64_t v103 = (uint64_t)(v97 - (void)v100) >> 1;
              if (v103 <= v101 + 1) {
                unint64_t v103 = v101 + 1;
              }
              if (v102 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v104 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v104 = v103;
              }
              if (v104)
              {
                long long v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v86 + 32, v104);
                unint64_t v100 = *(unsigned int **)(v86 + 16);
                long long v98 = *(unsigned int **)(v86 + 24);
              }
              else
              {
                long long v105 = 0;
              }
              long long v106 = (unsigned int *)&v105[4 * v101];
              *long long v106 = *v87;
              std::__split_buffer<std::wstring>::pointer v99 = v106 + 1;
              while (v98 != v100)
              {
                unsigned int v107 = *--v98;
                *--long long v106 = v107;
              }
              *(void *)(v86 + 16) = v106;
              *(void *)(v86 + ++*(_DWORD *)(result + 24) = v99;
              *(void *)(v86 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = &v105[4 * v104];
              if (v100) {
                operator delete(v100);
              }
            }
            else
            {
              *long long v98 = *v87;
              std::__split_buffer<std::wstring>::pointer v99 = v98 + 1;
            }
            *(void *)(v86 + ++*(_DWORD *)(result + 24) = v99;
            v86 += 48
                 * ((kaldi::WordBoundaryInfo::TypeOfPhone((kaldi::WordBoundaryInfo *)a4[27], *v87++) & 0xFFFFFFFE) == 2);
            if (v87 == (unsigned int *)v157) {
              goto LABEL_172;
            }
          }
LABEL_197:
          if (quasar::gLogLevel >= 4)
          {
            long long v146 = 0u;
            long long v147 = 0u;
            long long v144 = 0u;
            long long v145 = 0u;
            long long v142 = 0u;
            long long v143 = 0u;
            long long v140 = 0u;
            long long v141 = 0u;
            long long v138 = 0u;
            long long v139 = 0u;
            long long v136 = 0u;
            long long v137 = 0u;
            long long v134 = 0u;
            long long v135 = 0u;
            long long v132 = 0u;
            long long v133 = 0u;
            *(_OWORD *)float v131 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v131);
            uint64_t v117 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)"Phone sequencing failed; ran out of words for unknown reasons. ",
                     63);
            char v118 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)"Lattice word alignment and confidence computation will also fail. ", 66);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)"PLEASE FILE A RADAR", 19);
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v131);
            uint64_t v88 = a2[1];
          }
          for (uint64_t k = *a2; k != v88; k += 48)
            *(void *)(k + ++*(_DWORD *)(result + 24) = *(void *)(k + 16);
        }
      }
      else if (quasar::gLogLevel >= 4)
      {
        long long v146 = 0u;
        long long v147 = 0u;
        long long v144 = 0u;
        long long v145 = 0u;
        long long v142 = 0u;
        long long v143 = 0u;
        long long v140 = 0u;
        long long v141 = 0u;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v134 = 0u;
        long long v135 = 0u;
        long long v132 = 0u;
        long long v133 = 0u;
        *(_OWORD *)float v131 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v131);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)"No word boundary info found. Cannot give proper phone sequence.", 63);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v131);
      }
      uint64_t v17 = 1;
    }
LABEL_191:
    if (__p)
    {
      v157 = (char *)__p;
      operator delete(__p);
    }
    std::deque<int>::~deque[abi:ne180100](&v159);
    goto LABEL_194;
  }
  if (a2) {
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](a2);
  }
  if (a3) {
    *a3 = vdup_n_s32(0x7F800000u);
  }
  uint64_t v17 = 1;
LABEL_194:
  if (v163)
  {
    v164 = v163;
    operator delete(v163);
  }
  *(void *)float v131 = &v167;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v131);
  return v17;
}

void sub_1B1C86220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p)
  {
    a67 = (uint64_t)__p;
    operator delete(__p);
  }
  std::deque<int>::~deque[abi:ne180100](&a69);
  uint64_t v71 = *(void **)(v69 - 216);
  if (v71)
  {
    *(void *)(v69 - 208) = v71;
    operator delete(v71);
  }
  a23 = v69 - 184;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

void quasar::Decoder::populateResultInfo()
{
}

void sub_1B1C86A50(_Unwind_Exception *a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst((void *)(v1 - 128));
  _Unwind_Resume(a1);
}

void fst::NbestAsFsts<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>()
{
}

void sub_1B1C86C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst((uint64_t *)va);
  _Unwind_Resume(a1);
}

void quasar::Decoder::phoneIds2Str(void *a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  if (a1[1] != *a1)
  {
    (*(void (**)(std::string *__return_ptr))(**(void **)a3 + 88))(&v13);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(std::string *)a2 = v13;
    kaldi::quasar::Lexicon::BasifyPhone((std::string *)a2);
    for (uint64_t i = *a1 + 4; i != a1[1]; i += 4)
    {
      (*(void (**)(std::string *__return_ptr))(**(void **)a3 + 88))(&v13);
      kaldi::quasar::Lexicon::BasifyPhone(&v13);
      std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
      char v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v13.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        std::operator+<char>();
        if ((v12 & 0x80u) == 0) {
          uint64_t v9 = __p;
        }
        else {
          uint64_t v9 = (void **)__p[0];
        }
        if ((v12 & 0x80u) == 0) {
          std::string::size_type v10 = v12;
        }
        else {
          std::string::size_type v10 = (std::string::size_type)__p[1];
        }
        std::string::append((std::string *)a2, (const std::string::value_type *)v9, v10);
        if ((char)v12 < 0) {
          operator delete(__p[0]);
        }
        char v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
      }
      if (v8 < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1B1C86DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::TokenInfo::~TokenInfo(quasar::TokenInfo *this)
{
  uint64_t v2 = (void *)*((void *)this + 33);
  if (v2)
  {
    *((void *)this + 34) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 30);
  if (v3)
  {
    *((void *)this + 31) = v3;
    operator delete(v3);
  }
  quasar::Token::~Token((void **)this);
}

void *std::vector<quasar::ChoiceInfo>::emplace_back<quasar::ChoiceInfo>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  std::string::size_type v4 = a1 + 2;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((uint64_t)v7 - *a1) >> 5;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v10) {
      unint64_t v10 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    v17[4] = v4;
    std::string v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)v4, v12);
    float v14 = &v13[32 * v9];
    v17[0] = v13;
    v17[1] = v14;
    float v17[3] = &v13[32 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
    *(void *)float v14 = 0;
    *(_OWORD *)float v14 = *(_OWORD *)a2;
    *((void *)v14 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *((void *)v14 + 3) = *(void *)(a2 + 24);
    void v17[2] = v14 + 32;
    std::vector<quasar::ChoiceInfo>::__swap_out_circular_buffer(a1, v17);
    char v8 = (void *)a1[1];
    std::__split_buffer<quasar::ChoiceInfo>::~__split_buffer(v17);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v7[3] = *(void *)(a2 + 24);
    char v8 = v7 + 4;
    a1[1] = (uint64_t)(v7 + 4);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 4;
}

void sub_1B1C86F8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::ChoiceInfo>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void quasar::CopyConfidencesFromHwcnToResultChoices(uint64_t **a1, uint64_t a2)
{
  *(void *)&long long v67 = *MEMORY[0x1E4F143B8];
  kaldi::WordHypLattice::RetrieveConfidenceByTokens(*(kaldi::WordHypLattice **)(*(void *)a2 + 208), (uint64_t)&v59);
  std::string::size_type v4 = v58;
  v58[0] = 0;
  v58[1] = 0;
  uint64_t v57 = (uint64_t *)v58;
  uint64_t v5 = *(void *)(*(void *)a2 + 208);
  unint64_t v6 = *(uint64_t **)(v5 + 40);
  for (uint64_t i = *(uint64_t **)(v5 + 48); v6 != i; ++v6)
  {
    uint64_t v8 = *v6;
    std::optional<std::string>::value_or[abi:ne180100]<std::string&>(*v6 + 464, *v6 + 264, &__p);
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    uint64_t v9 = (std::vector<std::wstring> *)((char *)std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v57, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v56)+ 56);
    if (v9 != (std::vector<std::wstring> *)(v8 + 168)) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v9, *(std::string **)(v8 + 168), *(long long **)(v8 + 176), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v8 + 176) - *(void *)(v8 + 168)) >> 3));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  unint64_t v10 = *a1;
  unint64_t v48 = a1[1];
  if (*a1 != v48)
  {
    do
    {
      uint64_t v12 = *v10;
      uint64_t v11 = v10[1];
      uint64_t v49 = v10;
      uint64_t v50 = v11;
      while (v12 != v11)
      {
        quasar::getNormWord(v12, &__p);
        if (&v60 == (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v59, (const void **)&__p.__r_.__value_.__l.__data_))
        {
          v56.__r_.__value_.__r.__words[0] = v12;
          std::string v13 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v59, (const void **)v12, (uint64_t)&std::piecewise_construct, (long long **)&v56);
        }
        else
        {
          quasar::getNormWord(v12, &v56);
          long long v51 = &v56;
          std::string v13 = std::__tree<std::__value_type<std::string,std::vector<kaldi::TimestampsAndConfidence>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<kaldi::TimestampsAndConfidence>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<kaldi::TimestampsAndConfidence>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v59, (const void **)&v56.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v51);
          if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v56.__r_.__value_.__l.__data_);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v14 = v13[7];
        uint64_t v15 = v13[8];
        if (v14 != v15)
        {
          uint64_t v16 = 0;
          do
          {
            uint64_t v17 = v16;
            uint64_t v16 = v14;
            if (v17)
            {
              if ((float v18 = (float)*(unsigned int *)(v12 + 28),
                    float v19 = (float)*(unsigned int *)(v12 + 36),
                    float v20 = (float)(vabds_f32(*(float *)v14, v18) + vabds_f32(*(float *)v14 + *(float *)(v14 + 4), v19))
                        * 0.5,
                    float v21 = (float)(vabds_f32(*(float *)v17, v18) + vabds_f32(*(float *)v17 + *(float *)(v17 + 4), v19))
                        * 0.5,
                    v20 != v21)
                && (COERCE_INT(fabs(v20 - v21)) > 2139095039 || fabsf(v20 - v21) > (float)((float)(v20 + v21) * 0.1))
                || (uint64_t v16 = v14, *(double *)(v14 + 8) <= *(double *)(v17 + 8)))
              {
                uint64_t v16 = v17;
                if (v20 < v21) {
                  uint64_t v16 = v14;
                }
              }
            }
            v14 += 16;
          }
          while (v14 != v15);
          if (v16)
          {
            float v22 = *(double *)(v16 + 8) * 1000.0;
            *(float *)(v12 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v22;
          }
        }
        quasar::getNormWord(v12, &__p);
        uint64_t v23 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v57, (const void **)&__p.__r_.__value_.__l.__data_);
        if (v4 == (void **)v23)
        {
          long long v51 = (std::string *)v12;
          float v24 = (long long **)std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v57, (const void **)v12, (uint64_t)&std::piecewise_construct, (long long **)&v51);
        }
        else
        {
          quasar::getNormWord(v12, v54);
          long long v51 = (std::string *)v54;
          float v24 = (long long **)std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v57, (const void **)v54, (uint64_t)&std::piecewise_construct, (_OWORD **)&v51);
        }
        memset(&v56, 0, sizeof(v56));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v56, v24[7], v24[8], 0xAAAAAAAAAAAAAAABLL * (((char *)v24[8] - (char *)v24[7]) >> 3));
        if (v4 != (void **)v23 && v55 < 0) {
          operator delete(v54[0]);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "_B");
        std::string::basic_string[abi:ne180100]<0>(v64, "_E");
        std::string::basic_string[abi:ne180100]<0>(v65, "_I");
        std::string::basic_string[abi:ne180100]<0>(v66, "_S");
        long long v51 = 0;
        long long v52 = 0;
        int v53 = 0;
        unint64_t v61 = (long long **)&v51;
        char v62 = 0;
        long long v51 = (std::string *)operator new(0x60uLL);
        long long v52 = (long long *)v51;
        int v53 = (long long *)&v51[4];
        uint64_t v25 = 0;
        long long v52 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v53, (long long *)&__p, &v67, v51);
        do
        {
          if (SHIBYTE(v66[v25 + 2]) < 0) {
            operator delete((void *)v66[v25]);
          }
          v25 -= 3;
        }
        while (v25 != -12);
        std::string::size_type size = (long long *)v56.__r_.__value_.__l.__size_;
        float v26 = (std::string *)v56.__r_.__value_.__r.__words[0];
        if (v56.__r_.__value_.__l.__size_ == v56.__r_.__value_.__r.__words[0])
        {
          unint64_t v47 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(v56.__r_.__value_.__l.__size_ - v56.__r_.__value_.__r.__words[0]) >> 3);
          float v26 = (std::string *)v56.__r_.__value_.__l.__size_;
        }
        else
        {
          unint64_t v28 = v4;
          unint64_t v29 = 0;
          do
          {
            float v31 = (long long *)v51;
            int v30 = v52;
            if (v51 == (std::string *)v52)
            {
              std::string::size_type v32 = -1;
            }
            else
            {
              while (!quasar::endsWith((uint64_t *)(v56.__r_.__value_.__r.__words[0] + 24 * v29), (uint64_t *)v31))
              {
                float v31 = (long long *)((char *)v31 + 24);
                if (v31 == v30)
                {
                  std::string::size_type v32 = -1;
                  float v26 = (std::string *)v56.__r_.__value_.__r.__words[0];
                  goto LABEL_76;
                }
              }
              float v26 = (std::string *)v56.__r_.__value_.__r.__words[0];
              std::string::size_type v33 = v56.__r_.__value_.__r.__words[0] + 24 * v29;
              if (*(char *)(v33 + 23) < 0)
              {
                std::string::size_type v33 = *(void *)v33;
                std::string::size_type v34 = *(void *)(v56.__r_.__value_.__r.__words[0] + 24 * v29 + 8);
              }
              else
              {
                std::string::size_type v34 = *(unsigned __int8 *)(v33 + 23);
              }
              uint64_t v35 = *((unsigned __int8 *)v31 + 23);
              if ((v35 & 0x80u) == 0) {
                int v36 = v31;
              }
              else {
                int v36 = *(long long **)v31;
              }
              if ((v35 & 0x80u) != 0) {
                uint64_t v35 = *((void *)v31 + 1);
              }
              if (v34) {
                BOOL v37 = v35 == 0;
              }
              else {
                BOOL v37 = 1;
              }
              if (v37)
              {
                if (v35) {
                  std::string::size_type v32 = -1;
                }
                else {
                  std::string::size_type v32 = v34;
                }
              }
              else
              {
                int v38 = (unsigned __int8 *)(v33 + v34);
                int v39 = (unsigned __int8 *)v33;
                long long v40 = v38;
                do
                {
                  if (*v39 == *(unsigned __int8 *)v36)
                  {
                    uint64_t v41 = 1;
                    while (v35 != v41)
                    {
                      if (&v39[v41] == v38) {
                        goto LABEL_73;
                      }
                      int v42 = v39[v41];
                      int v43 = *((unsigned __int8 *)v36 + v41++);
                      if (v42 != v43) {
                        goto LABEL_65;
                      }
                    }
                    long long v40 = v39;
                  }
LABEL_65:
                  ++v39;
                }
                while (v39 != v38);
LABEL_73:
                std::string::size_type v44 = (std::string::size_type)&v40[-v33];
                if (v40 == v38) {
                  std::string::size_type v32 = -1;
                }
                else {
                  std::string::size_type v32 = v44;
                }
              }
            }
LABEL_76:
            std::string::basic_string(&__p, &v26[v29], 0, v32, (std::allocator<char> *)&v61);
            std::string::size_type v45 = v56.__r_.__value_.__r.__words[0] + 24 * v29;
            if (*(char *)(v45 + 23) < 0) {
              operator delete(*(void **)v45);
            }
            long long v46 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(void *)(v45 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)std::string::size_type v45 = v46;
            ++v29;
            std::string::size_type size = (long long *)v56.__r_.__value_.__l.__size_;
            float v26 = (std::string *)v56.__r_.__value_.__r.__words[0];
            unint64_t v47 = 0xAAAAAAAAAAAAAAABLL
                * ((uint64_t)(v56.__r_.__value_.__l.__size_ - v56.__r_.__value_.__r.__words[0]) >> 3);
          }
          while (v47 > v29);
          std::string::size_type v4 = v28;
        }
        if ((std::string *)(v12 + 72) != &v56) {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(v12 + 72), v26, size, v47);
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        v12 += 224;
        uint64_t v11 = v50;
      }
      unint64_t v10 = v49 + 3;
    }
    while (v49 + 3 != v48);
  }
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)&v57, v58[0]);
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy((uint64_t)&v59, v60);
}

void sub_1B1C87614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
}

void std::optional<std::string>::value_or[abi:ne180100]<std::string&>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      std::string::size_type v3 = *(void *)(a1 + 16);
LABEL_6:
      a3->__r_.__value_.__r.__words[2] = v3;
      return;
    }
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      std::string::size_type v3 = *(void *)(a2 + 16);
      goto LABEL_6;
    }
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
}

void quasar::Decoder::calculateNBest(uint64_t a1, uint64_t *a2, int a3)
{
  if (*(unsigned char *)(*a2 + 440))
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v27 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"Skipping calculateNBest since we already did it (e.g. eager, CTC-prefix-beam-search)", 84);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v23);
    }
  }
  else
  {
    *(unsigned char *)(*a2 + 44std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 1;
    quasar::Decoder::calculateNBestHwcn(a1, a2, a3);
    if (*(unsigned char *)(a1 + 553)) {
      BOOL v6 = *(void *)(*a2 + 352) != 0;
    }
    else {
      BOOL v6 = 0;
    }
    if (quasar::gLogLevel >= 5)
    {
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v27 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"hasHwcnPrimaryResultChoices=", 28);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v23);
    }
    if (!v6)
    {
      uint64_t v7 = *(void *)(a1 + 216);
      if (v7)
      {
        int v8 = *(_DWORD *)(v7 + 24);
        uint64_t v9 = v7 + 32;
      }
      else
      {
        uint64_t v9 = 0;
        int v8 = -1;
      }
      unint64_t v10 = operator new(0x30uLL);
      v10[3] = 0;
      v10[1] = 0;
      void v10[2] = 0;
      void *v10 = &unk_1F0A62A20;
      v10[4] = 0;
      v10[5] = 0;
      uint64_t v11 = operator new(0x30uLL);
      v11[1] = 0;
      float32x2_t v11[2] = 0;
      *uint64_t v11 = &unk_1F0A62C18;
      void v11[3] = 0;
      v11[4] = 0;
      v11[5] = 0;
      uint64_t v12 = (quasar::DecoderChainOutput *)*a2;
      uint64_t v13 = *(void *)(*a2 + 152);
      v19[0] = a3;
      v19[1] = v13;
      int v20 = v8;
      uint64_t v21 = v9;
      int v14 = *(unsigned __int8 *)(a1 + 552);
      char v22 = v14 ^ 1;
      if (v14)
      {
        uint64_t v15 = (quasar *)*((void *)v12 + 21);
        if (v15)
        {
          long long v23 = 0uLL;
          *(void *)&long long v24 = 0;
          v18[0] = v15;
          quasar::CalculateJoinedNBest<1ul>::operator()((uint64_t)&v17, (uint64_t)v19);
        }
      }
      if (*((void *)v12 + 42))
      {
        quasar::DecoderChainOutput::getWordHypLattice(v12, (const quasar::DecoderPassData *)a1, v18);
        if (v18[0]) {
          quasar::ExtractFirstAndSecondPassAcousticCostLatticeFromWordHypLattice(v18[0], v16);
        }
      }
      else
      {
        v18[0] = 0;
        v18[1] = 0;
      }
      long long v23 = 0uLL;
      *(void *)&long long v24 = 0;
      quasar::CalculateJoinedNBest<0ul>::operator()((uint64_t)v40, (uint64_t)v19);
    }
  }
}

void sub_1B1C87C38(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void quasar::Decoder::calculateNBestHwcn(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v5 = *a2;
  BOOL v6 = *(std::__shared_weak_count **)(*a2 + 360);
  *(void *)(v5 + 35std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(v5 + 36std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = *a2;
  int v8 = *(std::__shared_weak_count **)(*a2 + 400);
  *(void *)(v7 + 39std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(v7 + 40std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = *a2;
  unint64_t v10 = *(std::__shared_weak_count **)(*a2 + 416);
  *(void *)(v9 + 408) = 0;
  *(void *)(v9 + 416) = 0;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v11 = *(void **)(*a2 + 208);
  if (v11)
  {
    int v12 = *(unsigned __int8 *)(a1 + 553);
    long long v85 = 0uLL;
    *(void *)&long long v86 = 0;
    kaldi::WordHypLattice::GetNBestPath(v11, (uint64_t *)&v85, a3, *(_DWORD *)(a1 + 556));
    float v82 = 0;
    int v83 = 0;
    uint64_t v84 = 0;
    uint64_t v61 = a1;
    if (*(unsigned char *)(a1 + 560))
    {
      uint64_t v79 = 0;
      uint64_t v80 = 0;
      uint64_t v81 = 0;
      std::__split_buffer<std::wstring>::pointer v76 = 0;
      uint64_t v77 = 0;
      uint64_t v78 = 0;
      kaldi::WordHypLattice::GetBestPath(*(void **)(*a2 + 208), (char **)&v79, (uint64_t *)&v76);
      std::string __p = 0;
      uint64_t v74 = 0;
      long long v75 = 0;
      uint64_t v13 = (int *)v79;
      int v14 = v80;
      if (v79 != v80)
      {
        uint64_t v15 = 0;
        do
        {
          uint64_t v16 = *(void *)(*a2 + 208);
          unint64_t v17 = *v13;
          uint64_t v18 = *(void *)(v16 + 40);
          if (v17 >= (*(void *)(v16 + 48) - v18) >> 3) {
            std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
          }
          if (v15 >= v75)
          {
            uint64_t v19 = (v15 - (unsigned char *)__p) >> 3;
            if ((unint64_t)(v19 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v20 = (v75 - (unsigned char *)__p) >> 2;
            if (v20 <= v19 + 1) {
              unint64_t v20 = v19 + 1;
            }
            if ((unint64_t)(v75 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v20;
            }
            if (v21) {
              char v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v75, v21);
            }
            else {
              char v22 = 0;
            }
            long long v23 = &v22[8 * v19];
            *(void *)long long v23 = *(void *)(v18 + 8 * v17);
            uint64_t v15 = v23 + 8;
            long long v25 = (char *)__p;
            long long v24 = v74;
            if (v74 != __p)
            {
              do
              {
                uint64_t v26 = *((void *)v24 - 1);
                v24 -= 8;
                *((void *)v23 - 1) = v26;
                v23 -= 8;
              }
              while (v24 != v25);
              long long v24 = (char *)__p;
            }
            std::string __p = v23;
            uint64_t v74 = v15;
            long long v75 = &v22[8 * v21];
            if (v24) {
              operator delete(v24);
            }
          }
          else
          {
            *(void *)uint64_t v15 = *(void *)(v18 + 8 * v17);
            v15 += 8;
          }
          uint64_t v74 = v15;
          ++v13;
        }
        while (v13 != v14);
      }
      std::vector<std::vector<kaldi::WordHypLattice::Arc *>>::emplace_back<std::vector<kaldi::WordHypLattice::Arc *>>((uint64_t *)&v82, (uint64_t)&__p);
      if (__p)
      {
        uint64_t v74 = (char *)__p;
        operator delete(__p);
      }
      std::string __p = &v76;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (v79)
      {
        uint64_t v80 = (int *)v79;
        operator delete(v79);
      }
    }
    uint64_t v27 = *((void *)&v85 + 1);
    for (uint64_t i = v85; i != v27; i += 24)
      std::vector<std::vector<kaldi::WordHypLattice::Arc *>>::emplace_back<std::vector<kaldi::WordHypLattice::Arc *>>((uint64_t *)&v82, i);
    long long v29 = (std::__shared_weak_count *)operator new(0x30uLL);
    v29->__shared_owners_ = 0;
    v29->__shared_weak_owners_ = 0;
    v29->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62A20;
    v29[1].__vftable = 0;
    float v63 = (uint64_t *)&v29[1];
    v29[1].__shared_owners_ = 0;
    v29[1].__shared_weak_owners_ = 0;
    long long v30 = (std::__shared_weak_count *)operator new(0x30uLL);
    v30->__shared_owners_ = 0;
    v30->__shared_weak_owners_ = 0;
    v30->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62C18;
    v30[1].__vftable = 0;
    unint64_t v59 = v30 + 1;
    v30[1].__shared_owners_ = 0;
    v30[1].__shared_weak_owners_ = 0;
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    std::__split_buffer<std::wstring>::pointer v76 = &v77;
    uint64_t v31 = *(void *)(*a2 + 472);
    std::string::size_type v66 = v30;
    std::string::basic_string[abi:ne180100]<0>(&__p, "<?>");
    uint64_t v32 = quasar::SymbolTableList::strToSymbolId(v31, (uint64_t)&__p);
    if (SHIBYTE(v75) < 0) {
      operator delete(__p);
    }
    p_shared_owners = &v29->__shared_owners_;
    long long v33 = v82;
    int v65 = v83;
    if (v82 != v83)
    {
      if (v12) {
        double v34 = 1000.0;
      }
      else {
        double v34 = 1.0;
      }
      int v64 = v29;
      p_unint64_t shared_weak_owners = (uint64_t)&v30[1].__shared_weak_owners_;
      do
      {
        std::string __p = 0;
        uint64_t v74 = 0;
        long long v75 = 0;
        long long v36 = (char *)*v33;
        long long v35 = (char *)v33[1];
        long long v67 = v33;
        if (*v33 != v35)
        {
          do
          {
            uint64_t v37 = *(void *)v36;
            uint64_t v38 = *(void *)(*(void *)v36 + 256);
            if (v38 != v32 && v38 != 0)
            {
              if (*(char *)(v37 + 287) < 0)
              {
                if (*(void *)(v37 + 272))
                {
LABEL_54:
                  double v72 = v34 * *(double *)(v37 + 32);
                  char v71 = 1;
                  char v70 = 0;
                  quasar::PhonesetMapping::getIpaPhoneSequence(v61 + 608, v37 + 216);
                }
              }
              else if (*(unsigned char *)(v37 + 287))
              {
                goto LABEL_54;
              }
            }
            v36 += 8;
          }
          while (v36 != v35);
        }
        long long v29 = v64;
        long long v30 = v66;
        quasar::tokens2Str((uint64_t *)&__p, &v69);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v76, (const void **)&v69.__r_.__value_.__l.__data_, (uint64_t)&v69);
        char v41 = v40;
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v69.__r_.__value_.__l.__data_);
          if (v41)
          {
LABEL_61:
            std::vector<std::vector<quasar::Token>>::emplace_back<std::vector<quasar::Token>>(v63, (uint64_t)&__p);
            int v42 = (double *)v66[1].__vftable;
            shared_owners = (double *)v66[1].__shared_owners_;
            uint64_t v44 = shared_owners - v42;
            unint64_t shared_weak_owners = v66[1].__shared_weak_owners_;
            if ((unint64_t)shared_owners >= shared_weak_owners)
            {
              unint64_t v47 = v44 + 1;
              if ((unint64_t)(v44 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v48 = shared_weak_owners - (void)v42;
              if (v48 >> 2 > v47) {
                unint64_t v47 = v48 >> 2;
              }
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v49 = v47;
              }
              if (v49)
              {
                uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(p_shared_weak_owners, v49);
                int v42 = (double *)v66[1].__vftable;
                shared_owners = (double *)v66[1].__shared_owners_;
              }
              else
              {
                uint64_t v50 = 0;
              }
              long long v51 = (double *)&v50[8 * v44];
              double *v51 = (double)(unint64_t)v44;
              long long v46 = v51 + 1;
              while (shared_owners != v42)
              {
                uint64_t v52 = *((void *)shared_owners-- - 1);
                *((void *)v51-- - 1) = v52;
              }
              v66[1].__vftable = (std::__shared_weak_count_vtbl *)v51;
              v66[1].__shared_owners_ = (uint64_t)v46;
              v66[1].__shared_weak_owners_ = (uint64_t)&v50[8 * v49];
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              double *shared_owners = (double)(unint64_t)v44;
              long long v46 = shared_owners + 1;
            }
            v66[1].__shared_owners_ = (uint64_t)v46;
          }
        }
        else if (v40)
        {
          goto LABEL_61;
        }
        v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
        long long v33 = v67 + 3;
      }
      while (v67 + 3 != v65);
    }
    if (v29[1].__vftable != (std::__shared_weak_count_vtbl *)v29[1].__shared_owners_)
    {
      int v53 = *(unsigned __int8 *)(v61 + 553);
      unint64_t v54 = (void *)*a2;
      atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
      if (v53)
      {
        char v55 = (std::__shared_weak_count *)v54[45];
        v54[44] = v63;
        v54[45] = v29;
        if (v55) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v55);
        }
        uint64_t v56 = *a2;
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v57 = *(std::__shared_weak_count **)(v56 + 400);
        *(void *)(v56 + 39std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v59;
        *(void *)(v56 + 40std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v30;
        if (v57) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v57);
        }
        quasar::calculateEosLikelihood(v61, (uint64_t)a2, (uint64_t *)*v63, (unsigned int **)&v79);
        quasar::calculateNumTokensExcludingTriggerPhrase(v61, a2, (uint64_t *)*v63);
      }
      else
      {
        uint64_t v58 = (std::__shared_weak_count *)v54[52];
        v54[51] = v63;
        v54[52] = v29;
        if (v58) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v58);
        }
      }
    }
    std::__tree<std::string>::destroy((uint64_t)&v76, v77);
    if (v79)
    {
      uint64_t v80 = (int *)v79;
      operator delete(v79);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    uint64_t v79 = &v82;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
    float v82 = (void **)&v85;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v82);
  }
  else if (quasar::gLogLevel >= 4)
  {
    long long v100 = 0u;
    long long v101 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v94 = 0u;
    long long v95 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v85 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v85);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v85, (uint64_t)"No HWCN computed, so skipping nbestV2", 37);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v85);
  }
}

void sub_1B1C885C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

uint64_t quasar::ProcessHypotheses<1ul,0l,-1l>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  int v9 = (*(uint64_t (**)(void))(**(void **)(*(void *)a1 + 16) + 32))(*(void *)(*(void *)a1 + 16));
  char v74 = *(unsigned char *)(a1 + 552);
  int v75 = v9;
  std::__split_buffer<std::wstring>::pointer v76 = a2;
  *(void *)(*a2 + 99std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(void *)(*a2 + 984);
  uint64_t v10 = *a3;
  double v72 = a3;
  if (a3[1] != *a3)
  {
    unint64_t v11 = 0;
    while (1)
    {
      int v12 = (int **)(v10 + 24 * v11);
      uint64_t v108 = 0;
      uint64_t v109 = 0;
      uint64_t v110 = 0;
      long long v105 = 0;
      long long v106 = 0;
      uint64_t v107 = 0;
      std::vector<long long>::reserve((void **)&v105, 0x2E8BA2E8BA2E8BA3 * (((char *)v12[1] - (char *)*v12) >> 3));
      v99[0] = a1;
      v99[1] = v76;
      BOOL v100 = v11 == 0;
      int v101 = v75;
      char v102 = v74;
      unint64_t v103 = &v108;
      unint64_t v104 = (void **)&v105;
      memset(&v98, 0, sizeof(v98));
      std::vector<int>::reserve(&v98, 0x2E8BA2E8BA2E8BA3 * (((char *)v12[1] - (char *)*v12) >> 3));
      long long v95 = 0;
      long long v96 = 0;
      unint64_t v97 = 0;
      std::vector<quasar::Token>::reserve((uint64_t *)&v95, 0x2E8BA2E8BA2E8BA3 * (((char *)v12[1] - (char *)*v12) >> 3));
      uint64_t v13 = *v12;
      int v14 = v12[1];
      if (v13 == v14)
      {
        unint64_t v15 = 0;
        double v16 = 0.0;
      }
      else
      {
        unint64_t v15 = 0;
        double v16 = 0.0;
        do
        {
          quasar::ProcessHypotheses<1ul,0l,-1l>(quasar::DecoderPassData const&,std::shared_ptr<quasar::DecoderChainOutput> const&,std::vector<quasar::CalculateJoinedNBest<1ul>::HypothesisVector,std::allocator<quasar::CalculateJoinedNBest<1ul>::HypothesisVector>> const&,std::vector<std::vector<quasar::Token>> *,std::vector<double> *,kaldi::LatticeScoreCache *)::{lambda(quasar::NBestToken<1ul> const&)#1}::operator()(v99, v13, (uint64_t)v77);
          float v17 = *((float *)&v89 + 3);
          float v18 = *(float *)&v90;
          if (quasar::Token::isPrintable((quasar::Token *)v77))
          {
            std::vector<unsigned int>::pointer end = v98.__end_;
            if (v98.__end_ >= v98.__end_cap_.__value_)
            {
              std::vector<unsigned int>::pointer begin = v98.__begin_;
              int64_t v22 = v98.__end_ - v98.__begin_;
              unint64_t v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              int64_t v24 = (char *)v98.__end_cap_.__value_ - (char *)v98.__begin_;
              if (((char *)v98.__end_cap_.__value_ - (char *)v98.__begin_) >> 1 > v23) {
                unint64_t v23 = v24 >> 1;
              }
              if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v25 = v23;
              }
              if (v25)
              {
                uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v98.__end_cap_, v25);
                std::vector<unsigned int>::pointer begin = v98.__begin_;
                std::vector<unsigned int>::pointer end = v98.__end_;
              }
              else
              {
                uint64_t v26 = 0;
              }
              uint64_t v27 = (unsigned int *)&v26[4 * v22];
              *uint64_t v27 = *v13;
              unint64_t v20 = v27 + 1;
              while (end != begin)
              {
                unsigned int v28 = *--end;
                *--uint64_t v27 = v28;
              }
              v98.__begin_ = v27;
              v98.__end_ = v20;
              v98.__end_cap_.__value_ = (unsigned int *)&v26[4 * v25];
              if (begin) {
                operator delete(begin);
              }
            }
            else
            {
              *v98.__end_ = *v13;
              unint64_t v20 = end + 1;
            }
            v98.__end_ = v20;
            long long v29 = v96;
            if ((unint64_t)v96 >= v97)
            {
              long long v30 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v95, (const quasar::Token *)v77);
            }
            else
            {
              quasar::Token::Token(v96, (const quasar::Token *)v77);
              long long v30 = (std::string *)((char *)v29 + 224);
            }
            long long v96 = v30;
            uint64_t v31 = *(void *)(a1 + 216);
            if (!v31) {
              goto LABEL_36;
            }
            uint64_t v34 = *(void *)(v31 + 40);
            uint64_t v32 = v31 + 40;
            uint64_t v33 = v34;
            if (!v34) {
              goto LABEL_36;
            }
            int v35 = *v13;
            uint64_t v36 = v32;
            do
            {
              int v37 = *(_DWORD *)(v33 + 28);
              BOOL v38 = v37 < v35;
              if (v37 >= v35) {
                long long v39 = (uint64_t *)v33;
              }
              else {
                long long v39 = (uint64_t *)(v33 + 8);
              }
              if (!v38) {
                uint64_t v36 = v33;
              }
              uint64_t v33 = *v39;
            }
            while (*v39);
            if (v36 == v32 || v35 < *(_DWORD *)(v36 + 28)) {
LABEL_36:
            }
              ++v15;
          }
          if (SBYTE7(v89) < 0) {
            operator delete(__p[0]);
          }
          if (SBYTE7(v87) < 0) {
            operator delete(v86[0]);
          }
          v94[0] = (void **)&v84 + 1;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v94);
          if (SBYTE7(v84) < 0) {
            operator delete(v83[0]);
          }
          v94[0] = (void **)&v81 + 1;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v94);
          if (SBYTE7(v81) < 0) {
            operator delete(v80[0]);
          }
          if (SBYTE7(v78) < 0) {
            operator delete(v77[0]);
          }
          double v16 = v16 + (float)(v17 + v18);
          v13 += 22;
        }
        while (v13 != v14);
      }
      if (v95 != v96) {
        v96[-8].__r_.__value_.__s.__data_[12] = 0;
      }
      if (!v11)
      {
        quasar::calculateEosLikelihood(a1, (uint64_t)v76, (uint64_t *)&v95, &v98.__begin_);
        quasar::calculateNumTokensExcludingTriggerPhrase(a1, v76, (uint64_t *)&v95);
      }
      uint64_t v40 = (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 120))(*(void *)(a1 + 168));
      uint64_t v41 = *(void *)(a1 + 216);
      if (!v40 || !v41) {
        break;
      }
      v94[0] = &v108;
      v94[1] = (void **)&v105;
      v94[2] = (void **)a1;
      if (v15 > (v106 - v105) >> 3)
      {
        if (quasar::gLogLevel >= 4)
        {
          long long v92 = 0u;
          long long v93 = 0u;
          long long v90 = 0u;
          long long v91 = 0u;
          *(_OWORD *)std::string __p = 0u;
          long long v89 = 0u;
          *(_OWORD *)long long v86 = 0u;
          long long v87 = 0u;
          long long v84 = 0u;
          long long v85 = 0u;
          long long v82 = 0u;
          *(_OWORD *)int v83 = 0u;
          *(_OWORD *)uint64_t v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          *(_OWORD *)uint64_t v77 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
          int v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Phone sequencing failed; Ran out of phones, probably because ",
                  61);
          int v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"the last word got clipped in the audio. ", 40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Lattice word alignment and confidence computation will also fail.", 65);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v77);
        }
        *(unsigned char *)(*v76 + 144) = 1;
        goto LABEL_64;
      }
      if (v15 >= (v106 - v105) >> 3)
      {
        uint64_t v57 = v95;
        if (v96 != v95)
        {
          unint64_t v58 = 0;
          do
          {
            uint64_t v59 = *(void *)(a1 + 216);
            uint64_t v62 = *(void *)(v59 + 40);
            uint64_t v60 = v59 + 40;
            uint64_t v61 = v62;
            if (!v62) {
              goto LABEL_103;
            }
            signed int v63 = v98.__begin_[v58];
            uint64_t v64 = v60;
            do
            {
              signed int v65 = *(_DWORD *)(v61 + 28);
              BOOL v66 = v65 < v63;
              if (v65 >= v63) {
                long long v67 = (uint64_t *)v61;
              }
              else {
                long long v67 = (uint64_t *)(v61 + 8);
              }
              if (!v66) {
                uint64_t v64 = v61;
              }
              uint64_t v61 = *v67;
            }
            while (*v67);
            if (v64 == v60 || v63 < *(_DWORD *)(v64 + 28))
            {
LABEL_103:
              quasar::ProcessHypotheses<1ul,0l,-1l>(quasar::DecoderPassData const&,std::shared_ptr<quasar::DecoderChainOutput> const&,std::vector<quasar::CalculateJoinedNBest<1ul>::HypothesisVector,std::allocator<quasar::CalculateJoinedNBest<1ul>::HypothesisVector>> const&,std::vector<std::vector<quasar::Token>> *,std::vector<double> *,kaldi::LatticeScoreCache *)::{lambda(unsigned long)#1}::operator()((uint64_t)v94, 0);
              long long v68 = (char *)v57 + 224 * v58;
              uint64_t v69 = (uint64_t)(v68 + 48);
              if (v68[71] < 0) {
                operator delete(*(void **)v69);
              }
              long long v70 = *(_OWORD *)v77;
              *(void *)(v69 + 16) = v78;
              *(_OWORD *)uint64_t v69 = v70;
              quasar::PhonesetMapping::getIpaPhoneSequence(a1 + 608, v69);
            }
            ++v58;
          }
          while (v58 < 0x6DB6DB6DB6DB6DB7 * (((char *)v96 - (char *)v95) >> 5));
        }
        goto LABEL_64;
      }
      if (quasar::gLogLevel >= 4)
      {
        long long v92 = 0u;
        long long v93 = 0u;
        long long v90 = 0u;
        long long v91 = 0u;
        *(_OWORD *)std::string __p = 0u;
        long long v89 = 0u;
        *(_OWORD *)long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v82 = 0u;
        *(_OWORD *)int v83 = 0u;
        *(_OWORD *)uint64_t v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        *(_OWORD *)uint64_t v77 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
        int v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Phone sequencing failed; ran out of words for unknown reasons. ",
                63);
        unint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Lattice word alignment and confidence computation will also fail. ", 66);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"PLEASE FILE A RADAR", 19);
LABEL_63:
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v77);
      }
LABEL_64:
      std::vector<std::vector<quasar::Token>>::emplace_back<std::vector<quasar::Token>>(a4, (uint64_t)&v95);
      std::string::size_type v45 = *(double **)(a5 + 8);
      unint64_t v44 = *(void *)(a5 + 16);
      if ((unint64_t)v45 >= v44)
      {
        unint64_t v47 = *(double **)a5;
        uint64_t v48 = ((uint64_t)v45 - *(void *)a5) >> 3;
        unint64_t v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v50 = v44 - (void)v47;
        if (v50 >> 2 > v49) {
          unint64_t v49 = v50 >> 2;
        }
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v49;
        }
        if (v51)
        {
          uint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a5 + 16, v51);
          unint64_t v47 = *(double **)a5;
          std::string::size_type v45 = *(double **)(a5 + 8);
        }
        else
        {
          uint64_t v52 = 0;
        }
        char v55 = (double *)&v52[8 * v48];
        *char v55 = v16;
        long long v46 = v55 + 1;
        while (v45 != v47)
        {
          uint64_t v56 = *((void *)v45-- - 1);
          *((void *)v55-- - 1) = v56;
        }
        *(void *)a5 = v55;
        *(void *)(a5 + 8) = v46;
        *(void *)(a5 + 16) = &v52[8 * v51];
        if (v47) {
          operator delete(v47);
        }
      }
      else
      {
        *std::string::size_type v45 = v16;
        long long v46 = v45 + 1;
      }
      *(void *)(a5 + 8) = v46;
      v77[0] = &v95;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v77);
      if (v98.__begin_)
      {
        v98.__end_ = v98.__begin_;
        operator delete(v98.__begin_);
      }
      if (v105)
      {
        long long v106 = v105;
        operator delete(v105);
      }
      if (v108)
      {
        uint64_t v109 = v108;
        operator delete(v108);
      }
      ++v11;
      uint64_t v10 = *v72;
      if (v11 >= 0xAAAAAAAAAAAAAAABLL * ((v72[1] - *v72) >> 3)) {
        return 1;
      }
    }
    if (v41 || quasar::gLogLevel < 4) {
      goto LABEL_64;
    }
    long long v92 = 0u;
    long long v93 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v89 = 0u;
    *(_OWORD *)long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    *(_OWORD *)int v83 = 0u;
    *(_OWORD *)uint64_t v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    *(_OWORD *)uint64_t v77 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"No word boundary info found. Cannot give proper phone sequence.", 63);
    goto LABEL_63;
  }
  return 1;
}

void sub_1B1C88F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  a15 = (void **)&a52;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a15);
  unint64_t v54 = *(void **)(v52 - 240);
  if (v54)
  {
    *(void *)(v52 - 23std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v54;
    operator delete(v54);
  }
  char v55 = *(void **)(v52 - 168);
  if (v55)
  {
    *(void *)(v52 - 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v55;
    operator delete(v55);
  }
  uint64_t v56 = *(void **)(v52 - 144);
  if (v56)
  {
    *(void *)(v52 - 136) = v56;
    operator delete(v56);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ProcessHypotheses<1ul,-1l,0l>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  int v73 = (*(uint64_t (**)(void))(**(void **)(*(void *)a1 + 16) + 32))(*(void *)(*(void *)a1 + 16));
  char v74 = a2;
  *(void *)(*a2 + 99std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(void *)(*a2 + 984);
  uint64_t v9 = *a3;
  char v71 = a3;
  if (a3[1] != *a3)
  {
    unint64_t v10 = 0;
    while (1)
    {
      unint64_t v11 = (int **)(v9 + 24 * v10);
      long long v106 = 0;
      uint64_t v107 = 0;
      uint64_t v108 = 0;
      unint64_t v103 = 0;
      unint64_t v104 = 0;
      uint64_t v105 = 0;
      std::vector<long long>::reserve((void **)&v103, 0x2E8BA2E8BA2E8BA3 * (((char *)v11[1] - (char *)*v11) >> 3));
      v97[0] = a1;
      v97[1] = v74;
      BOOL v98 = v10 == 0;
      int v99 = v73;
      char v100 = 0;
      int v101 = &v106;
      char v102 = (void **)&v103;
      memset(&v96, 0, sizeof(v96));
      std::vector<int>::reserve(&v96, 0x2E8BA2E8BA2E8BA3 * (((char *)v11[1] - (char *)*v11) >> 3));
      long long v93 = 0;
      long long v94 = 0;
      unint64_t v95 = 0;
      std::vector<quasar::Token>::reserve((uint64_t *)&v93, 0x2E8BA2E8BA2E8BA3 * (((char *)v11[1] - (char *)*v11) >> 3));
      int v12 = *v11;
      uint64_t v13 = v11[1];
      if (v12 == v13)
      {
        unint64_t v14 = 0;
        double v15 = 0.0;
      }
      else
      {
        unint64_t v14 = 0;
        double v15 = 0.0;
        do
        {
          quasar::ProcessHypotheses<1ul,-1l,0l>(quasar::DecoderPassData const&,std::shared_ptr<quasar::DecoderChainOutput> const&,std::vector<quasar::CalculateJoinedNBest<1ul>::HypothesisVector,std::allocator<quasar::CalculateJoinedNBest<1ul>::HypothesisVector>> const&,std::vector<std::vector<quasar::Token>> *,std::vector<double> *,kaldi::LatticeScoreCache *)::{lambda(quasar::NBestToken<1ul> const&)#1}::operator()((unsigned __int8 *)v97, v12, (uint64_t)v75);
          float v16 = *((float *)&v87 + 3);
          float v17 = *(float *)&v88;
          if (quasar::Token::isPrintable((quasar::Token *)v75))
          {
            std::vector<unsigned int>::pointer end = v96.__end_;
            if (v96.__end_ >= v96.__end_cap_.__value_)
            {
              std::vector<unsigned int>::pointer begin = v96.__begin_;
              int64_t v21 = v96.__end_ - v96.__begin_;
              unint64_t v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              int64_t v23 = (char *)v96.__end_cap_.__value_ - (char *)v96.__begin_;
              if (((char *)v96.__end_cap_.__value_ - (char *)v96.__begin_) >> 1 > v22) {
                unint64_t v22 = v23 >> 1;
              }
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v24 = v22;
              }
              if (v24)
              {
                unint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v96.__end_cap_, v24);
                std::vector<unsigned int>::pointer begin = v96.__begin_;
                std::vector<unsigned int>::pointer end = v96.__end_;
              }
              else
              {
                unint64_t v25 = 0;
              }
              uint64_t v26 = (unsigned int *)&v25[4 * v21];
              *uint64_t v26 = *v12;
              uint64_t v19 = v26 + 1;
              while (end != begin)
              {
                unsigned int v27 = *--end;
                *--uint64_t v26 = v27;
              }
              v96.__begin_ = v26;
              v96.__end_ = v19;
              v96.__end_cap_.__value_ = (unsigned int *)&v25[4 * v24];
              if (begin) {
                operator delete(begin);
              }
            }
            else
            {
              *v96.__end_ = *v12;
              uint64_t v19 = end + 1;
            }
            v96.__end_ = v19;
            unsigned int v28 = v94;
            if ((unint64_t)v94 >= v95)
            {
              long long v29 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v93, (const quasar::Token *)v75);
            }
            else
            {
              quasar::Token::Token(v94, (const quasar::Token *)v75);
              long long v29 = (std::string *)((char *)v28 + 224);
            }
            long long v94 = v29;
            uint64_t v30 = *(void *)(a1 + 216);
            if (!v30) {
              goto LABEL_36;
            }
            uint64_t v33 = *(void *)(v30 + 40);
            uint64_t v31 = v30 + 40;
            uint64_t v32 = v33;
            if (!v33) {
              goto LABEL_36;
            }
            int v34 = *v12;
            uint64_t v35 = v31;
            do
            {
              int v36 = *(_DWORD *)(v32 + 28);
              BOOL v37 = v36 < v34;
              if (v36 >= v34) {
                BOOL v38 = (uint64_t *)v32;
              }
              else {
                BOOL v38 = (uint64_t *)(v32 + 8);
              }
              if (!v37) {
                uint64_t v35 = v32;
              }
              uint64_t v32 = *v38;
            }
            while (*v38);
            if (v35 == v31 || v34 < *(_DWORD *)(v35 + 28)) {
LABEL_36:
            }
              ++v14;
          }
          if (SBYTE7(v87) < 0) {
            operator delete(__p[0]);
          }
          if (SBYTE7(v85) < 0) {
            operator delete(v84[0]);
          }
          v92[0] = (void **)&v82 + 1;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v92);
          if (SBYTE7(v82) < 0) {
            operator delete(v81[0]);
          }
          v92[0] = (void **)&v79 + 1;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v92);
          if (SBYTE7(v79) < 0) {
            operator delete(v78[0]);
          }
          if (SBYTE7(v76) < 0) {
            operator delete(v75[0]);
          }
          double v15 = v15 + (float)(v16 + v17);
          v12 += 22;
        }
        while (v12 != v13);
      }
      if (v93 != v94) {
        v94[-8].__r_.__value_.__s.__data_[12] = 0;
      }
      if (!v10)
      {
        quasar::calculateEosLikelihood(a1, (uint64_t)v74, (uint64_t *)&v93, &v96.__begin_);
        quasar::calculateNumTokensExcludingTriggerPhrase(a1, v74, (uint64_t *)&v93);
      }
      uint64_t v39 = (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 120))(*(void *)(a1 + 168));
      uint64_t v40 = *(void *)(a1 + 216);
      if (!v39 || !v40) {
        break;
      }
      v92[0] = &v106;
      v92[1] = (void **)&v103;
      v92[2] = (void **)a1;
      if (v14 > (v104 - v103) >> 3)
      {
        if (quasar::gLogLevel >= 4)
        {
          long long v90 = 0u;
          long long v91 = 0u;
          long long v88 = 0u;
          long long v89 = 0u;
          *(_OWORD *)std::string __p = 0u;
          long long v87 = 0u;
          *(_OWORD *)long long v84 = 0u;
          long long v85 = 0u;
          long long v82 = 0u;
          long long v83 = 0u;
          long long v80 = 0u;
          *(_OWORD *)long long v81 = 0u;
          *(_OWORD *)long long v78 = 0u;
          long long v79 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          *(_OWORD *)int v75 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v75);
          uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"Phone sequencing failed; Ran out of phones, probably because ",
                  61);
          int v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"the last word got clipped in the audio. ", 40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Lattice word alignment and confidence computation will also fail.", 65);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v75);
        }
        *(unsigned char *)(*v74 + 144) = 1;
        goto LABEL_64;
      }
      if (v14 >= (v104 - v103) >> 3)
      {
        uint64_t v56 = v93;
        if (v94 != v93)
        {
          unint64_t v57 = 0;
          do
          {
            uint64_t v58 = *(void *)(a1 + 216);
            uint64_t v61 = *(void *)(v58 + 40);
            uint64_t v59 = v58 + 40;
            uint64_t v60 = v61;
            if (!v61) {
              goto LABEL_103;
            }
            signed int v62 = v96.__begin_[v57];
            uint64_t v63 = v59;
            do
            {
              signed int v64 = *(_DWORD *)(v60 + 28);
              BOOL v65 = v64 < v62;
              if (v64 >= v62) {
                BOOL v66 = (uint64_t *)v60;
              }
              else {
                BOOL v66 = (uint64_t *)(v60 + 8);
              }
              if (!v65) {
                uint64_t v63 = v60;
              }
              uint64_t v60 = *v66;
            }
            while (*v66);
            if (v63 == v59 || v62 < *(_DWORD *)(v63 + 28))
            {
LABEL_103:
              quasar::ProcessHypotheses<1ul,-1l,0l>(quasar::DecoderPassData const&,std::shared_ptr<quasar::DecoderChainOutput> const&,std::vector<quasar::CalculateJoinedNBest<1ul>::HypothesisVector,std::allocator<quasar::CalculateJoinedNBest<1ul>::HypothesisVector>> const&,std::vector<std::vector<quasar::Token>> *,std::vector<double> *,kaldi::LatticeScoreCache *)::{lambda(unsigned long)#1}::operator()((uint64_t)v92, 0);
              long long v67 = (char *)v56 + 224 * v57;
              uint64_t v68 = (uint64_t)(v67 + 48);
              if (v67[71] < 0) {
                operator delete(*(void **)v68);
              }
              long long v69 = *(_OWORD *)v75;
              *(void *)(v68 + 16) = v76;
              *(_OWORD *)uint64_t v68 = v69;
              quasar::PhonesetMapping::getIpaPhoneSequence(a1 + 608, v68);
            }
            ++v57;
          }
          while (v57 < 0x6DB6DB6DB6DB6DB7 * (((char *)v94 - (char *)v93) >> 5));
        }
        goto LABEL_64;
      }
      if (quasar::gLogLevel >= 4)
      {
        long long v90 = 0u;
        long long v91 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        *(_OWORD *)std::string __p = 0u;
        long long v87 = 0u;
        *(_OWORD *)long long v84 = 0u;
        long long v85 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        *(_OWORD *)long long v81 = 0u;
        *(_OWORD *)long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        *(_OWORD *)int v75 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v75);
        uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"Phone sequencing failed; ran out of words for unknown reasons. ",
                63);
        int v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Lattice word alignment and confidence computation will also fail. ", 66);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"PLEASE FILE A RADAR", 19);
LABEL_63:
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v75);
      }
LABEL_64:
      std::vector<std::vector<quasar::Token>>::emplace_back<std::vector<quasar::Token>>(a4, (uint64_t)&v93);
      unint64_t v44 = *(double **)(a5 + 8);
      unint64_t v43 = *(void *)(a5 + 16);
      if ((unint64_t)v44 >= v43)
      {
        long long v46 = *(double **)a5;
        uint64_t v47 = ((uint64_t)v44 - *(void *)a5) >> 3;
        unint64_t v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v49 = v43 - (void)v46;
        if (v49 >> 2 > v48) {
          unint64_t v48 = v49 >> 2;
        }
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v48;
        }
        if (v50)
        {
          unint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a5 + 16, v50);
          long long v46 = *(double **)a5;
          unint64_t v44 = *(double **)(a5 + 8);
        }
        else
        {
          unint64_t v51 = 0;
        }
        unint64_t v54 = (double *)&v51[8 * v47];
        *unint64_t v54 = v15;
        std::string::size_type v45 = v54 + 1;
        while (v44 != v46)
        {
          uint64_t v55 = *((void *)v44-- - 1);
          *((void *)v54-- - 1) = v55;
        }
        *(void *)a5 = v54;
        *(void *)(a5 + 8) = v45;
        *(void *)(a5 + 16) = &v51[8 * v50];
        if (v46) {
          operator delete(v46);
        }
      }
      else
      {
        *unint64_t v44 = v15;
        std::string::size_type v45 = v44 + 1;
      }
      *(void *)(a5 + 8) = v45;
      v75[0] = &v93;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v75);
      if (v96.__begin_)
      {
        v96.__end_ = v96.__begin_;
        operator delete(v96.__begin_);
      }
      if (v103)
      {
        unint64_t v104 = v103;
        operator delete(v103);
      }
      if (v106)
      {
        uint64_t v107 = v106;
        operator delete(v106);
      }
      ++v10;
      uint64_t v9 = *v71;
      if (v10 >= 0xAAAAAAAAAAAAAAABLL * ((v71[1] - *v71) >> 3)) {
        return 1;
      }
    }
    if (v40 || quasar::gLogLevel < 4) {
      goto LABEL_64;
    }
    long long v90 = 0u;
    long long v91 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v87 = 0u;
    *(_OWORD *)long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    *(_OWORD *)long long v81 = 0u;
    *(_OWORD *)long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    *(_OWORD *)int v75 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v75);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"No word boundary info found. Cannot give proper phone sequence.", 63);
    goto LABEL_63;
  }
  return 1;
}

void sub_1B1C897CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  a15 = (void **)&a52;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a15);
  unint64_t v54 = *(void **)(v52 - 240);
  if (v54)
  {
    *(void *)(v52 - 23std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v54;
    operator delete(v54);
  }
  uint64_t v55 = *(void **)(v52 - 168);
  if (v55)
  {
    *(void *)(v52 - 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v55;
    operator delete(v55);
  }
  uint64_t v56 = *(void **)(v52 - 144);
  if (v56)
  {
    *(void *)(v52 - 136) = v56;
    operator delete(v56);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ProcessHypotheses<0ul,-1l,-1l>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  int v73 = (*(uint64_t (**)(void))(**(void **)(*(void *)a1 + 16) + 32))(*(void *)(*(void *)a1 + 16));
  char v74 = a2;
  *(void *)(*a2 + 99std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(void *)(*a2 + 984);
  uint64_t v9 = *a3;
  char v71 = a3;
  if (a3[1] != *a3)
  {
    unint64_t v10 = 0;
    while (1)
    {
      unint64_t v11 = (int **)(v9 + 24 * v10);
      long long v106 = 0;
      uint64_t v107 = 0;
      uint64_t v108 = 0;
      unint64_t v103 = 0;
      unint64_t v104 = 0;
      uint64_t v105 = 0;
      std::vector<long long>::reserve((void **)&v103, 0x2E8BA2E8BA2E8BA3 * (((char *)v11[1] - (char *)*v11) >> 3));
      v97[0] = a1;
      v97[1] = v74;
      BOOL v98 = v10 == 0;
      int v99 = v73;
      char v100 = 0;
      int v101 = &v106;
      char v102 = (void **)&v103;
      memset(&v96, 0, sizeof(v96));
      std::vector<int>::reserve(&v96, 0x2E8BA2E8BA2E8BA3 * (((char *)v11[1] - (char *)*v11) >> 3));
      long long v93 = 0;
      long long v94 = 0;
      unint64_t v95 = 0;
      std::vector<quasar::Token>::reserve((uint64_t *)&v93, 0x2E8BA2E8BA2E8BA3 * (((char *)v11[1] - (char *)*v11) >> 3));
      int v12 = *v11;
      uint64_t v13 = v11[1];
      if (v12 == v13)
      {
        unint64_t v14 = 0;
        double v15 = 0.0;
      }
      else
      {
        unint64_t v14 = 0;
        double v15 = 0.0;
        do
        {
          quasar::ProcessHypotheses<0ul,-1l,-1l>(quasar::DecoderPassData const&,std::shared_ptr<quasar::DecoderChainOutput> const&,std::vector<quasar::CalculateJoinedNBest<0ul>::HypothesisVector,std::allocator<quasar::CalculateJoinedNBest<0ul>::HypothesisVector>> const&,std::vector<std::vector<quasar::Token>> *,std::vector<double> *,kaldi::LatticeScoreCache *)::{lambda(quasar::NBestToken<0ul> const&)#1}::operator()((const float *)v97, v12, (uint64_t)v75);
          float v16 = *((float *)&v87 + 3);
          float v17 = *(float *)&v88;
          if (quasar::Token::isPrintable((quasar::Token *)v75))
          {
            std::vector<unsigned int>::pointer end = v96.__end_;
            if (v96.__end_ >= v96.__end_cap_.__value_)
            {
              std::vector<unsigned int>::pointer begin = v96.__begin_;
              int64_t v21 = v96.__end_ - v96.__begin_;
              unint64_t v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              int64_t v23 = (char *)v96.__end_cap_.__value_ - (char *)v96.__begin_;
              if (((char *)v96.__end_cap_.__value_ - (char *)v96.__begin_) >> 1 > v22) {
                unint64_t v22 = v23 >> 1;
              }
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v24 = v22;
              }
              if (v24)
              {
                unint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v96.__end_cap_, v24);
                std::vector<unsigned int>::pointer begin = v96.__begin_;
                std::vector<unsigned int>::pointer end = v96.__end_;
              }
              else
              {
                unint64_t v25 = 0;
              }
              uint64_t v26 = (unsigned int *)&v25[4 * v21];
              *uint64_t v26 = *v12;
              uint64_t v19 = v26 + 1;
              while (end != begin)
              {
                unsigned int v27 = *--end;
                *--uint64_t v26 = v27;
              }
              v96.__begin_ = v26;
              v96.__end_ = v19;
              v96.__end_cap_.__value_ = (unsigned int *)&v25[4 * v24];
              if (begin) {
                operator delete(begin);
              }
            }
            else
            {
              *v96.__end_ = *v12;
              uint64_t v19 = end + 1;
            }
            v96.__end_ = v19;
            unsigned int v28 = v94;
            if ((unint64_t)v94 >= v95)
            {
              long long v29 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v93, (const quasar::Token *)v75);
            }
            else
            {
              quasar::Token::Token(v94, (const quasar::Token *)v75);
              long long v29 = (std::string *)((char *)v28 + 224);
            }
            long long v94 = v29;
            uint64_t v30 = *(void *)(a1 + 216);
            if (!v30) {
              goto LABEL_36;
            }
            uint64_t v33 = *(void *)(v30 + 40);
            uint64_t v31 = v30 + 40;
            uint64_t v32 = v33;
            if (!v33) {
              goto LABEL_36;
            }
            int v34 = *v12;
            uint64_t v35 = v31;
            do
            {
              int v36 = *(_DWORD *)(v32 + 28);
              BOOL v37 = v36 < v34;
              if (v36 >= v34) {
                BOOL v38 = (uint64_t *)v32;
              }
              else {
                BOOL v38 = (uint64_t *)(v32 + 8);
              }
              if (!v37) {
                uint64_t v35 = v32;
              }
              uint64_t v32 = *v38;
            }
            while (*v38);
            if (v35 == v31 || v34 < *(_DWORD *)(v35 + 28)) {
LABEL_36:
            }
              ++v14;
          }
          if (SBYTE7(v87) < 0) {
            operator delete(__p[0]);
          }
          if (SBYTE7(v85) < 0) {
            operator delete(v84[0]);
          }
          v92[0] = (void **)&v82 + 1;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v92);
          if (SBYTE7(v82) < 0) {
            operator delete(v81[0]);
          }
          v92[0] = (void **)&v79 + 1;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v92);
          if (SBYTE7(v79) < 0) {
            operator delete(v78[0]);
          }
          if (SBYTE7(v76) < 0) {
            operator delete(v75[0]);
          }
          double v15 = v15 + (float)(v16 + v17);
          v12 += 22;
        }
        while (v12 != v13);
      }
      if (v93 != v94) {
        v94[-8].__r_.__value_.__s.__data_[12] = 0;
      }
      if (!v10)
      {
        quasar::calculateEosLikelihood(a1, (uint64_t)v74, (uint64_t *)&v93, &v96.__begin_);
        quasar::calculateNumTokensExcludingTriggerPhrase(a1, v74, (uint64_t *)&v93);
      }
      uint64_t v39 = (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 120))(*(void *)(a1 + 168));
      uint64_t v40 = *(void *)(a1 + 216);
      if (!v39 || !v40) {
        break;
      }
      v92[0] = &v106;
      v92[1] = (void **)&v103;
      v92[2] = (void **)a1;
      if (v14 > (v104 - v103) >> 3)
      {
        if (quasar::gLogLevel >= 4)
        {
          long long v90 = 0u;
          long long v91 = 0u;
          long long v88 = 0u;
          long long v89 = 0u;
          *(_OWORD *)std::string __p = 0u;
          long long v87 = 0u;
          *(_OWORD *)long long v84 = 0u;
          long long v85 = 0u;
          long long v82 = 0u;
          long long v83 = 0u;
          long long v80 = 0u;
          *(_OWORD *)long long v81 = 0u;
          *(_OWORD *)long long v78 = 0u;
          long long v79 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          *(_OWORD *)int v75 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v75);
          uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"Phone sequencing failed; Ran out of phones, probably because ",
                  61);
          int v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"the last word got clipped in the audio. ", 40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Lattice word alignment and confidence computation will also fail.", 65);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v75);
        }
        *(unsigned char *)(*v74 + 144) = 1;
        goto LABEL_64;
      }
      if (v14 >= (v104 - v103) >> 3)
      {
        uint64_t v56 = v93;
        if (v94 != v93)
        {
          unint64_t v57 = 0;
          do
          {
            uint64_t v58 = *(void *)(a1 + 216);
            uint64_t v61 = *(void *)(v58 + 40);
            uint64_t v59 = v58 + 40;
            uint64_t v60 = v61;
            if (!v61) {
              goto LABEL_103;
            }
            signed int v62 = v96.__begin_[v57];
            uint64_t v63 = v59;
            do
            {
              signed int v64 = *(_DWORD *)(v60 + 28);
              BOOL v65 = v64 < v62;
              if (v64 >= v62) {
                BOOL v66 = (uint64_t *)v60;
              }
              else {
                BOOL v66 = (uint64_t *)(v60 + 8);
              }
              if (!v65) {
                uint64_t v63 = v60;
              }
              uint64_t v60 = *v66;
            }
            while (*v66);
            if (v63 == v59 || v62 < *(_DWORD *)(v63 + 28))
            {
LABEL_103:
              quasar::ProcessHypotheses<0ul,-1l,-1l>(quasar::DecoderPassData const&,std::shared_ptr<quasar::DecoderChainOutput> const&,std::vector<quasar::CalculateJoinedNBest<0ul>::HypothesisVector,std::allocator<quasar::CalculateJoinedNBest<0ul>::HypothesisVector>> const&,std::vector<std::vector<quasar::Token>> *,std::vector<double> *,kaldi::LatticeScoreCache *)::{lambda(unsigned long)#1}::operator()((uint64_t)v92, 0);
              long long v67 = (char *)v56 + 224 * v57;
              uint64_t v68 = (uint64_t)(v67 + 48);
              if (v67[71] < 0) {
                operator delete(*(void **)v68);
              }
              long long v69 = *(_OWORD *)v75;
              *(void *)(v68 + 16) = v76;
              *(_OWORD *)uint64_t v68 = v69;
              quasar::PhonesetMapping::getIpaPhoneSequence(a1 + 608, v68);
            }
            ++v57;
          }
          while (v57 < 0x6DB6DB6DB6DB6DB7 * (((char *)v94 - (char *)v93) >> 5));
        }
        goto LABEL_64;
      }
      if (quasar::gLogLevel >= 4)
      {
        long long v90 = 0u;
        long long v91 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        *(_OWORD *)std::string __p = 0u;
        long long v87 = 0u;
        *(_OWORD *)long long v84 = 0u;
        long long v85 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        *(_OWORD *)long long v81 = 0u;
        *(_OWORD *)long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        *(_OWORD *)int v75 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v75);
        uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"Phone sequencing failed; ran out of words for unknown reasons. ",
                63);
        int v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Lattice word alignment and confidence computation will also fail. ", 66);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"PLEASE FILE A RADAR", 19);
LABEL_63:
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v75);
      }
LABEL_64:
      std::vector<std::vector<quasar::Token>>::emplace_back<std::vector<quasar::Token>>(a4, (uint64_t)&v93);
      unint64_t v44 = *(double **)(a5 + 8);
      unint64_t v43 = *(void *)(a5 + 16);
      if ((unint64_t)v44 >= v43)
      {
        long long v46 = *(double **)a5;
        uint64_t v47 = ((uint64_t)v44 - *(void *)a5) >> 3;
        unint64_t v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v49 = v43 - (void)v46;
        if (v49 >> 2 > v48) {
          unint64_t v48 = v49 >> 2;
        }
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v48;
        }
        if (v50)
        {
          unint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a5 + 16, v50);
          long long v46 = *(double **)a5;
          unint64_t v44 = *(double **)(a5 + 8);
        }
        else
        {
          unint64_t v51 = 0;
        }
        unint64_t v54 = (double *)&v51[8 * v47];
        *unint64_t v54 = v15;
        std::string::size_type v45 = v54 + 1;
        while (v44 != v46)
        {
          uint64_t v55 = *((void *)v44-- - 1);
          *((void *)v54-- - 1) = v55;
        }
        *(void *)a5 = v54;
        *(void *)(a5 + 8) = v45;
        *(void *)(a5 + 16) = &v51[8 * v50];
        if (v46) {
          operator delete(v46);
        }
      }
      else
      {
        *unint64_t v44 = v15;
        std::string::size_type v45 = v44 + 1;
      }
      *(void *)(a5 + 8) = v45;
      v75[0] = &v93;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v75);
      if (v96.__begin_)
      {
        v96.__end_ = v96.__begin_;
        operator delete(v96.__begin_);
      }
      if (v103)
      {
        unint64_t v104 = v103;
        operator delete(v103);
      }
      if (v106)
      {
        uint64_t v107 = v106;
        operator delete(v106);
      }
      ++v10;
      uint64_t v9 = *v71;
      if (v10 >= 0xAAAAAAAAAAAAAAABLL * ((v71[1] - *v71) >> 3)) {
        return 1;
      }
    }
    if (v40 || quasar::gLogLevel < 4) {
      goto LABEL_64;
    }
    long long v90 = 0u;
    long long v91 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v87 = 0u;
    *(_OWORD *)long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    *(_OWORD *)long long v81 = 0u;
    *(_OWORD *)long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    *(_OWORD *)int v75 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v75);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"No word boundary info found. Cannot give proper phone sequence.", 63);
    goto LABEL_63;
  }
  return 1;
}

void sub_1B1C8A078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  a15 = (void **)&a52;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a15);
  unint64_t v54 = *(void **)(v52 - 240);
  if (v54)
  {
    *(void *)(v52 - 23std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v54;
    operator delete(v54);
  }
  uint64_t v55 = *(void **)(v52 - 168);
  if (v55)
  {
    *(void *)(v52 - 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v55;
    operator delete(v55);
  }
  uint64_t v56 = *(void **)(v52 - 144);
  if (v56)
  {
    *(void *)(v52 - 136) = v56;
    operator delete(v56);
  }
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<kaldi::WordHypLattice::Arc *>>::emplace_back<std::vector<kaldi::WordHypLattice::Arc *>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v17[4] = v4;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v12);
    unint64_t v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    float v17[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
    *(void *)unint64_t v14 = 0;
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    void v17[2] = v14 + 24;
    std::vector<std::vector<kaldi::WordHypLattice::Arc *>>::__swap_out_circular_buffer(a1, v17);
    int v8 = (void *)a1[1];
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    int v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_1B1C8A25C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *quasar::calculateLmeInfo(std::string *result, int a2, unsigned int a3, uint64_t a4)
{
  if ((a3 & 0x80000000) == 0)
  {
    uint64_t v4 = (std::string::__raw *)result;
    std::string::size_type v5 = result->__r_.__value_.__r.__words[0];
    std::string::size_type size = result->__r_.__value_.__l.__size_;
    if (result->__r_.__value_.__r.__words[0] != size)
    {
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(size - v5) >> 3) <= a3)
      {
        memset(v16, 0, sizeof(v16));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"symbolTableId=", 14);
        uint64_t v15 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", but lmeInfos.size()=", 22);
        std::ostream::operator<<();
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v16);
      }
      uint64_t v10 = 40 * a3;
      double result = std::string::operator=((std::string *)(a4 + 144), (const std::string *)(v5 + v10 + 16));
      std::string::size_type v11 = v4->__words[0];
      *(_DWORD *)(a4 + 168) = *(_DWORD *)(v4->__words[0] + v10);
      if (a2)
      {
        std::string::size_type v12 = v11 + 40 * a3;
        int v14 = *(_DWORD *)(v12 + 8);
        uint64_t v13 = (_DWORD *)(v12 + 8);
        if (v14) {
          _DWORD *v13 = 2;
        }
      }
    }
  }
  return result;
}

void quasar::calculateEosLikelihood(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int **a4)
{
  std::string::size_type v5 = *(uint64_t (****)(void))(*(void *)a2 + 640);
  if (!v5 || *a3 == a3[1] || *(double *)(*(void *)a2 + 1080) != 9.0) {
    return;
  }
  if (*(unsigned char *)(a1 + 817))
  {
    unint64_t v9 = *(uint64_t **)(a1 + 824);
    uint64_t v10 = *(uint64_t **)(a1 + 832);
    if (v9 != v10)
    {
      char v11 = 0;
      char v12 = 0;
      do
      {
        LODWORD(v19) = -1;
        if (quasar::isTokenSpanPrefixOf(v9, a3, 1, (int *)&v19)) {
          char v11 = 1;
        }
        LODWORD(v19) = -1;
        unsigned __int8 isTokenSpanPrefixOf = quasar::isTokenSpanPrefixOf(a3, v9, 1, (int *)&v19);
        if ((isTokenSpanPrefixOf & ((int)v19 >= 0)) != 0) {
          char v12 = 1;
        }
        v9 += 3;
      }
      while (v9 != v10);
      if (*(unsigned char *)(a1 + 817) && (v11 & 1) != 0 && (v12 & 1) == 0) {
        return;
      }
    }
    std::string::size_type v5 = *(uint64_t (****)(void))(*(void *)a2 + 640);
  }
  uint64_t v14 = (**v5)(v5);
  float v16 = *a4;
  uint64_t v15 = a4[1];
  while (v16 != v15)
  {
    if (((*(uint64_t (**)(void, uint64_t, void, char *))(**(void **)(*(void *)a2 + 640) + 32))(*(void *)(*(void *)a2 + 640), v14, *v16, v36) & 1) == 0)
    {
      if (quasar::gLogLevel >= 2)
      {
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v19 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"The refeeding of word sequence should not fail.", 47);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v19);
      }
      return;
    }
    uint64_t v14 = v37;
    ++v16;
  }
  if (v14 != -1)
  {
    double v17 = (*(float (**)(void))(**(void **)(*(void *)a2 + 640) + 56))(*(void *)(*(void *)a2 + 640));
    if (((*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF
      && (*(void *)&v17 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    {
      double v17 = 9.0;
    }
    *(double *)(*(void *)a2 + 108std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v17;
    if (quasar::gLogLevel >= 4)
    {
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v19 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"End of sentence likelihood is: ", 31);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v19);
    }
  }
}

void sub_1B1C8A670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::calculateNumTokensExcludingTriggerPhrase(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v3 = a3[1];
  if (*a3 != v3)
  {
    uint64_t v6 = *a2;
    if (!*(_DWORD *)(*a2 + 1092))
    {
      if (!*(unsigned char *)(a1 + 817) || (uint64_t v7 = *(uint64_t **)(a1 + 824), v8 = *(uint64_t **)(a1 + 832), v7 == v8))
      {
LABEL_10:
        *(_DWORD *)(v6 + 109std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = -1227133513 * ((unint64_t)(v3 - v4) >> 5);
        if (quasar::gLogLevel < 4) {
          return;
        }
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        long long v13 = 0u;
        long long v14 = 0u;
        long long v11 = 0u;
        long long v12 = 0u;
        long long v10 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Setting number of tokens excluding trigger phrase (request is not voice trigger or raise to speak): ", 100);
        std::ostream::operator<<();
      }
      else
      {
        while (1)
        {
          int v27 = -1;
          if (quasar::isTokenSpanPrefixOf(v7, a3, 1, &v27))
          {
            *(_DWORD *)(*a2 + 109std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
            if (quasar::gLogLevel < 4) {
              return;
            }
            long long v25 = 0u;
            long long v26 = 0u;
            long long v23 = 0u;
            long long v24 = 0u;
            long long v21 = 0u;
            long long v22 = 0u;
            long long v19 = 0u;
            long long v20 = 0u;
            long long v17 = 0u;
            long long v18 = 0u;
            long long v15 = 0u;
            long long v16 = 0u;
            long long v13 = 0u;
            long long v14 = 0u;
            long long v11 = 0u;
            long long v12 = 0u;
            long long v10 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Setting number of tokens excluding trigger phrase (resultChoice is a prefix of a trigger phrase): ", 98);
            std::ostream::operator<<();
            goto LABEL_12;
          }
          int v27 = -1;
          if (quasar::isTokenSpanPrefixOf(a3, v7, 1, &v27))
          {
            if ((v27 & 0x80000000) == 0) {
              break;
            }
          }
          v7 += 3;
          if (v7 == v8)
          {
            uint64_t v4 = *a3;
            uint64_t v3 = a3[1];
            uint64_t v6 = *a2;
            goto LABEL_10;
          }
        }
        *(_DWORD *)(*a2 + 109std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = -1227133513 * ((unint64_t)(a3[1] - *a3) >> 5) - v27;
        if (quasar::gLogLevel < 4) {
          return;
        }
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        long long v13 = 0u;
        long long v14 = 0u;
        long long v11 = 0u;
        long long v12 = 0u;
        long long v10 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Setting number of tokens excluding trigger phrase: ", 51);
        std::ostream::operator<<();
      }
LABEL_12:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v10);
    }
  }
}

void sub_1B1C8A8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::Decoder::decoderNeedsStabilizer(quasar::Decoder *this)
{
  return *((unsigned __int8 *)this + 57);
}

uint64_t quasar::Decoder::getStabilizerAveragingPeriodMs(quasar::Decoder *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t quasar::Decoder::getStabilizerMinimumWordSeenMs(quasar::Decoder *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t quasar::Decoder::runChain(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  std::string::size_type v5 = *a1;
  if (*a1 == a1[1]) {
    return 0;
  }
  int v9 = 0;
  int v10 = -1;
  do
  {
    long long v11 = (const void *)*v5;
    long long v12 = (std::__shared_weak_count *)v5[1];
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v11
    {
      int v10 = v9;
      if (!v12) {
        goto LABEL_11;
      }
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      int v10 = v9;
    }
    else if (!v12)
    {
      goto LABEL_11;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_11:
    v5 += 2;
    ++v9;
  }
  while (v5 != a1[1]);
  long long v13 = *a1;
  if (v5 == *a1) {
    return 0;
  }
  int v14 = 0;
  long long v15 = *a1;
  while (1)
  {
    uint64_t v16 = *v15;
    v15 += 2;
    unsigned int v17 = quasar::Decoder::run(v16, a3, a4, a5, a2, v13 == *a1, v15 == v5);
    uint64_t v18 = *(void *)(a2 + 24);
    if (!v18) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t result = (*(unsigned int (**)(uint64_t))(*(void *)v18 + 48))(v18) ? 1 : v17;
    if (result) {
      break;
    }
    ++v14;
    std::string::size_type v5 = a1[1];
    long long v13 = v15;
    if (v15 == v5) {
      return 0;
    }
  }
  if (v10 != -1 && v14 <= v10) {
    *(unsigned char *)(a3 + 85std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 1;
  }
  return result;
}

void quasar::Decoder::calculateStabilityMetrics(void *a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  *a5 = 0;
  *a4 = 0;
  if (a1[1] != *a1)
  {
    memset(&v6[3], 0, 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, " ");
    quasar::split(a2, (uint64_t *)&__p, 1, (unint64_t)v6);
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"empty partial results!", 22);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
  }
}

void sub_1B1C8B3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  a38 = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  a38 = &a32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  a38 = &a35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  _Unwind_Resume(a1);
}

uint64_t quasar::Decoder::requiresCacheAppendedToFrontend(quasar::Decoder *this)
{
  return 0;
}

uint64_t quasar::Decoder::computesAudioAnalytics(quasar::Decoder *this)
{
  return 0;
}

uint64_t quasar::Decoder::requiresCacheFeatInputItf(quasar::Decoder *this)
{
  return 0;
}

uint64_t quasar::Decoder::affectsRecognitionResults(quasar::Decoder *this)
{
  return 1;
}

uint64_t quasar::Decoder::supportsEager(quasar::Decoder *this)
{
  return 0;
}

uint64_t quasar::Decoder::requiresSilencePosteriorForEager(quasar::Decoder *this)
{
  return 0;
}

uint64_t quasar::Decoder::decoderNeedsCachedRawAudio(quasar::Decoder *this)
{
  return 0;
}

uint64_t quasar::Decoder::combinesSystems(quasar::Decoder *this)
{
  return 0;
}

void *quasar::Decoder::getSpgName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void quasar::Decoder::~Decoder(quasar::Decoder *this)
{
  *(void *)this = &unk_1F0A58FC8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::string::size_type v5 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*((char *)this + 359) < 0) {
    operator delete(*((void **)this + 42));
  }
  quasar::SpeechModelInfo::~SpeechModelInfo((quasar::Decoder *)((char *)this + 64));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

double quasar::Decoder::getDecoderTypeName@<D0>(std::string *this@<X0>, uint64_t a2@<X8>)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)a2, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)a2 = *this;
  }
  std::string::size_type v4 = std::string::rfind(this, 46, 0xFFFFFFFFFFFFFFFFLL);
  if (v4 != -1)
  {
    std::string::basic_string(&v7, this, v4 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v8);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(std::string *)a2 = v7;
    std::string::size_type v6 = std::string::find((const std::string *)a2, 58, 0);
    if (v6 != -1)
    {
      std::string::basic_string(&v7, (const std::string *)a2, 0, v6, (std::allocator<char> *)&v8);
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      double result = *(double *)&v7.__r_.__value_.__l.__data_;
      *(std::string *)a2 = v7;
    }
  }
  return result;
}

void sub_1B1C8B728(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::Decoder::createDecoder(std::string *this@<X0>, void *a2@<X8>)
{
  if (quasar::gLogLevel >= 5)
  {
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v53 = 0u;
    memset(__p, 0, sizeof(__p));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::string::size_type v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Building Decoder ", 17);
    int v5 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v5 >= 0) {
      std::string::size_type v6 = this;
    }
    else {
      std::string::size_type v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    if (v5 >= 0) {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, size);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  quasar::Decoder::getDecoderTypeName(this, (uint64_t)__p);
  *a2 = 0;
  a2[1] = 0;
  if ((HIBYTE(__p[2]) & 0x80) == 0)
  {
    char v8 = __p;
    switch(HIBYTE(__p[2]))
    {
      case 0x11:
        break;
      case 0x12:
        goto LABEL_11;
      case 0x14:
        if (__p[0] != (void *)0x2D6563697474616CLL
          || __p[1] != (void *)0x61662D6D6C676962
          || LODWORD(__p[2]) != 1919251571)
        {
          goto LABEL_93;
        }
        goto LABEL_74;
      case 0x15:
LABEL_83:
        if (__p[0] == (void *)0x2D6563697474616CLL
          && __p[1] == (void *)0x65722D656C616373
          && *(void **)((char *)&__p[1] + 5) == (void *)0x65726F637365722DLL)
        {
          goto LABEL_104;
        }
        if (HIBYTE(__p[2]) == 17) {
          goto LABEL_106;
        }
        if (HIBYTE(__p[2]) == 18) {
          goto LABEL_11;
        }
        if (HIBYTE(__p[2]) != 20) {
          goto LABEL_114;
        }
LABEL_93:
        if (__p[0] == (void *)0x2D6563697474616CLL
          && __p[1] == (void *)0x696C612D64726F77
          && LODWORD(__p[2]) == 1919250023)
        {
          goto LABEL_121;
        }
        if (HIBYTE(__p[2]) == 17) {
          goto LABEL_106;
        }
        if (HIBYTE(__p[2]) != 18) {
          goto LABEL_114;
        }
LABEL_11:
        if (__p[0] == (void *)0x2D6563697474616CLL && __p[1] == (void *)0x6F637365722D6D6CLL && LOWORD(__p[2]) == 25970) {
          goto LABEL_105;
        }
        if (HIBYTE(__p[2]) != 17) {
          goto LABEL_114;
        }
LABEL_106:
        char v8 = __p;
        break;
      case 0x18:
        if (__p[0] != (void *)0x2D6563697474616CLL
          || __p[1] != (void *)0x6D6C2D6D6C676962
          || __p[2] != (void *)0x7265747361662D65)
        {
          char v8 = __p;
          switch(HIBYTE(__p[2]))
          {
            case 0x11:
              goto LABEL_107;
            case 0x12:
              goto LABEL_11;
            case 0x14:
              goto LABEL_93;
            case 0x15:
              goto LABEL_83;
            default:
              goto LABEL_114;
          }
        }
        goto LABEL_103;
      default:
        goto LABEL_114;
    }
LABEL_107:
    long long v30 = *v8;
    long long v31 = v8[1];
    int v32 = *((unsigned __int8 *)v8 + 16);
    if (v30 == (void *)0x2D6563697474616CLL && v31 == (void *)0x656E67696C616572 && v32 == 114)
    {
      std::allocate_shared[abi:ne180100]<quasar::OnlineLatticeRealignmentDecoder,std::allocator<quasar::OnlineLatticeRealignmentDecoder>,std::string const&,void>((long long *)this, &v50);
      goto LABEL_184;
    }
    goto LABEL_114;
  }
  long long v11 = __p[1];
  if (__p[1] == (void *)20)
  {
    BOOL v12 = *(void *)__p[0] == 0x2D6563697474616CLL && *((void *)__p[0] + 1) == 0x61662D6D6C676962;
    if (v12 && *((_DWORD *)__p[0] + 4) == 1919251571) {
LABEL_74:
    }
      std::allocate_shared[abi:ne180100]<quasar::OnlineLatticeBiglmFasterDecoder,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder>,std::string const&,void>((uint64_t)&v49, (long long *)this);
  }
  if (__p[1] == (void *)24)
  {
    if (*(void *)__p[0] == 0x2D6563697474616CLL
      && *((void *)__p[0] + 1) == 0x6D6C2D6D6C676962
      && *((void *)__p[0] + 2) == 0x7265747361662D65)
    {
LABEL_103:
      std::allocate_shared[abi:ne180100]<quasar::OnlineLatticeBiglmLmeFasterDecoder,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder>,std::string const&,void>((uint64_t)&v49, (long long *)this);
    }
    long long v11 = __p[1];
  }
  if (v11 == (void *)21)
  {
    if (*(void *)__p[0] == 0x2D6563697474616CLL
      && *((void *)__p[0] + 1) == 0x65722D656C616373
      && *(void *)((char *)__p[0] + 13) == 0x65726F637365722DLL)
    {
LABEL_104:
      std::allocate_shared[abi:ne180100]<quasar::OnlineLatticeRescalingDecoder,std::allocator<quasar::OnlineLatticeRescalingDecoder>,std::string const&,void>((long long *)this, &v50);
      goto LABEL_184;
    }
    long long v11 = __p[1];
  }
  if (v11 == (void *)20)
  {
    if (*(void *)__p[0] == 0x2D6563697474616CLL
      && *((void *)__p[0] + 1) == 0x696C612D64726F77
      && *((_DWORD *)__p[0] + 4) == 1919250023)
    {
LABEL_121:
      std::allocate_shared[abi:ne180100]<quasar::OnlineLatticeWordAlignmentDecoder,std::allocator<quasar::OnlineLatticeWordAlignmentDecoder>,std::string const&,void>(&v50);
      goto LABEL_184;
    }
    long long v11 = __p[1];
  }
  if (v11 == (void *)18)
  {
    if (*(void *)__p[0] == 0x2D6563697474616CLL
      && *((void *)__p[0] + 1) == 0x6F637365722D6D6CLL
      && *((_WORD *)__p[0] + 8) == 25970)
    {
LABEL_105:
      std::allocate_shared[abi:ne180100]<quasar::OnlineLmRescoringDecoder,std::allocator<quasar::OnlineLmRescoringDecoder>,std::string const&,void>((long long *)this, &v50);
      goto LABEL_184;
    }
    long long v11 = __p[1];
  }
  if (v11 == (void *)17)
  {
    char v8 = (void **)__p[0];
    goto LABEL_107;
  }
LABEL_114:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "error-blamer"))
  {
    std::allocate_shared[abi:ne180100]<quasar::ErrorBlamingDecoder,std::allocator<quasar::ErrorBlamingDecoder>,std::string const&,void>((long long *)this, &v50);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "lattice-confidence"))
  {
    std::allocate_shared[abi:ne180100]<quasar::OnlineLatticeConfidenceDecoder,std::allocator<quasar::OnlineLatticeConfidenceDecoder>,std::string const&,void>((long long *)this, &v50);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "lattice-faster"))
  {
    std::allocate_shared[abi:ne180100]<quasar::LatticeFasterDecoder,std::allocator<quasar::LatticeFasterDecoder>,std::string const&,void>((long long *)this, &v50);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "keyword-spotting-decoder"))
  {
    std::allocate_shared[abi:ne180100]<quasar::OnlineKeywordSpottingDecoder,std::allocator<quasar::OnlineKeywordSpottingDecoder>,std::string const&,void>(&v50);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "seeva-decoder"))
  {
    std::allocate_shared[abi:ne180100]<quasar::OnlineSeevaDecoder,std::allocator<quasar::OnlineSeevaDecoder>,std::string const&,void>(&v50);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "seeva-step-decoder"))
  {
    std::allocate_shared[abi:ne180100]<quasar::OnlineSeevaStepDecoder,std::allocator<quasar::OnlineSeevaStepDecoder>,std::string const&,void>(&v50);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "seeva-step-biglm-decoder"))
  {
    std::allocate_shared[abi:ne180100]<quasar::OnlineSeevaStepBigLmDecoder,std::allocator<quasar::OnlineSeevaStepBigLmDecoder>,std::string const&,void>(&v50);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "seeva-greedy-decoder"))
  {
    std::allocate_shared[abi:ne180100]<quasar::SeevaGreedyDecoder,std::allocator<quasar::SeevaGreedyDecoder>,std::string const&,void>((long long *)this, &v50);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "seeva-batch-decoder"))
  {
    std::allocate_shared[abi:ne180100]<quasar::SeevaBatchDecoder,std::allocator<quasar::SeevaBatchDecoder>,std::string const&,void>(&v50);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "las-beam-search-decoder"))
  {
    std::allocate_shared[abi:ne180100]<quasar::OnlineLASBeamSearchDecoder,std::allocator<quasar::OnlineLASBeamSearchDecoder>,std::string const&,void>(&v50);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "las-speculative-beam-search-decoder"))
  {
    std::allocate_shared[abi:ne180100]<quasar::OnlineLASSpeculativeBeamSearchDecoder,std::allocator<quasar::OnlineLASSpeculativeBeamSearchDecoder>,std::string const&,void>(&v50);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "las-lm-rescoring-beam-search-decoder"))
  {
    std::allocate_shared[abi:ne180100]<quasar::OnlineLASLmRescoringBeamSearchDecoder,std::allocator<quasar::OnlineLASLmRescoringBeamSearchDecoder>,std::string const&,void>(&v50);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "las-lm-rescoring-speculative-beam-search-decoder"))
  {
    std::allocate_shared[abi:ne180100]<quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder,std::allocator<quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder>,std::string const&,void>(&v50);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "transducer-beam-search-decoder"))
  {
    std::allocate_shared[abi:ne180100]<quasar::OnlineTransducerBeamSearchDecoder,std::allocator<quasar::OnlineTransducerBeamSearchDecoder>,std::string const&,void>(&v50);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "transducer-graph-search-decoder"))
  {
    std::allocate_shared[abi:ne180100]<quasar::OnlineTransducerGraphSearchDecoder,std::allocator<quasar::OnlineTransducerGraphSearchDecoder>,std::string const&,void>(&v50);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "system-combination-decoder"))
  {
    std::allocate_shared[abi:ne180100]<quasar::SystemCombinationDecoder,std::allocator<quasar::SystemCombinationDecoder>,std::string const&,void>(&v50);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "confusion-network-combiner"))
  {
    std::allocate_shared[abi:ne180100]<quasar::ConfusionNetworkCombinerDecoder,std::allocator<quasar::ConfusionNetworkCombinerDecoder>,std::string const&,void>((long long *)this, &v50);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "phonetic-match"))
  {
    std::allocate_shared[abi:ne180100]<quasar::PhoneticMatchDecoder,std::allocator<quasar::PhoneticMatchDecoder>,std::string const&,void>((long long *)this, &v50);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "fingerprint-detector"))
  {
    std::allocate_shared[abi:ne180100]<quasar::FingerprintDetector,std::allocator<quasar::FingerprintDetector>,std::string const&,void>(&v50);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "audio-analytics-decoder"))
  {
    std::allocate_shared[abi:ne180100]<quasar::OnlineAudioAnalyticsDecoder,std::allocator<quasar::OnlineAudioAnalyticsDecoder>,std::string const&,void>((long long *)this, &v50);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "watermark-detector"))
  {
    std::allocate_shared[abi:ne180100]<quasar::WatermarkDetector,std::allocator<quasar::WatermarkDetector>,std::string const&,void>(&v50);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "audio-analytics-only"))
  {
    std::allocate_shared[abi:ne180100]<quasar::AudioAnalyticsDecoder,std::allocator<quasar::AudioAnalyticsDecoder>,std::string const&,void>((long long *)this, &v50);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "lattice-rnn-mitigator"))
  {
    std::allocate_shared[abi:ne180100]<quasar::LatticeRnnMitigator,std::allocator<quasar::LatticeRnnMitigator>,std::string const&,void>(&v50);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "lattice-confidence2"))
  {
    std::allocate_shared[abi:ne180100]<quasar::HwcnConfidence,std::allocator<quasar::HwcnConfidence>,std::string const&,void>(&v50);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "e2e-asr-confidence"))
  {
    std::allocate_shared[abi:ne180100]<quasar::E2EAsrConfidence,std::allocator<quasar::E2EAsrConfidence>,std::string const&,void>((long long *)this, &v50);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "watermark-detector2"))
  {
    std::allocate_shared[abi:ne180100]<quasar::WatermarkDetector2,std::allocator<quasar::WatermarkDetector2>,std::string const&,void>(&v50);
  }
  else
  {
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "lattice-biglm-lme-ftm-faster"))
    {
      std::allocate_shared[abi:ne180100]<quasar::LatticeLmeFtmDecoder,std::allocator<quasar::LatticeLmeFtmDecoder>,std::string const&,void>((uint64_t)&v49, (long long *)this);
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "AED-rescorer"))
    {
      std::allocate_shared[abi:ne180100]<quasar::OnlineAEDRescoringDecoder,std::allocator<quasar::OnlineAEDRescoringDecoder>,std::string const&,void>(&v50);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "force-aligner"))
    {
      std::allocate_shared[abi:ne180100]<quasar::ForceAlignDecoder,std::allocator<quasar::ForceAlignDecoder>,std::string const&,void>((long long *)this, &v50);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "realign-am-fusion-decoder"))
    {
      std::allocate_shared[abi:ne180100]<quasar::RealignAmFusionDecoder,std::allocator<quasar::RealignAmFusionDecoder>,std::string const&,void>((long long *)this, &v50);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "ctc-prefix-beam-search-decoder"))
    {
      std::allocate_shared[abi:ne180100]<quasar::OnlinePrefixBeamSearchDecoder,std::allocator<quasar::OnlinePrefixBeamSearchDecoder>,std::string const&,void>(&v50);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "AED-beam-search-decoder"))
    {
      std::allocate_shared[abi:ne180100]<quasar::AEDBeamSearchDecoder,std::allocator<quasar::AEDBeamSearchDecoder>,std::string const&,void>(&v50);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "rescoring-deliberation"))
    {
      std::allocate_shared[abi:ne180100]<quasar::RescoringDeliberationDecoder,std::allocator<quasar::RescoringDeliberationDecoder>,std::string const&,void>((long long *)this, &v50);
    }
    else
    {
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "embedding-retranslation-decoder"))
      {
        exception = __cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        BOOL v38 = std::string::append(&v47, "\" in \"");
        long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        v48.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        int v40 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
        if (v40 >= 0) {
          uint64_t v41 = this;
        }
        else {
          uint64_t v41 = (std::string *)this->__r_.__value_.__r.__words[0];
        }
        if (v40 >= 0) {
          std::string::size_type v42 = HIBYTE(this->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v42 = this->__r_.__value_.__l.__size_;
        }
        unint64_t v43 = std::string::append(&v48, (const std::string::value_type *)v41, v42);
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v49.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        std::string::size_type v45 = std::string::append(&v49, "\"");
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        std::string::size_type v51 = v45->__r_.__value_.__r.__words[2];
        long long v50 = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        quasar::PTree::Error::Error(exception, &v50);
      }
      std::allocate_shared[abi:ne180100]<quasar::OnlineEmbeddingRetranslationDecoder,std::allocator<quasar::OnlineEmbeddingRetranslationDecoder>,std::string const&,void>((long long *)this, &v50);
    }
  }
LABEL_184:
  long long v35 = v50;
  long long v50 = 0uLL;
  int v36 = (std::__shared_weak_count *)a2[1];
  *(_OWORD *)a2 = v35;
  if (v36)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    if (*((void *)&v50 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v50 + 1));
    }
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1C8C230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v44 & 1) == 0)
    {
LABEL_12:
      long long v46 = *(std::__shared_weak_count **)(v42 + 8);
      if (v46) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v46);
      }
      if (a42 < 0) {
        operator delete(a37);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v44)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v43);
  goto LABEL_12;
}

BOOL quasar::Decoder::exceedsDoublePartialThreshold(quasar::Decoder *this, int a2)
{
  return *((_DWORD *)this + 111) <= a2;
}

BOOL quasar::Decoder::isEnabledDoublePartial(quasar::Decoder *this)
{
  return *((_DWORD *)this + 111) > 0;
}

void std::vector<quasar::TokenInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (quasar::Token *)**a1;
  if (v2)
  {
    std::string::size_type v4 = (quasar::Token *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        std::string::size_type v4 = (quasar::Token *)((char *)v4 - 288);
        std::allocator<quasar::TokenInfo>::destroy[abi:ne180100](v1 + 16, v4);
      }
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::TokenInfo>::destroy[abi:ne180100](int a1, quasar::Token *this)
{
  uint64_t v3 = (void *)*((void *)this + 33);
  if (v3)
  {
    *((void *)this + 34) = v3;
    operator delete(v3);
  }
  std::string::size_type v4 = (void *)*((void *)this + 30);
  if (v4)
  {
    *((void *)this + 31) = v4;
    operator delete(v4);
  }
  quasar::Token::~Token((void **)this);
}

void *std::vector<std::weak_ptr<quasar::Decoder>>::__init_with_size[abi:ne180100]<std::weak_ptr<quasar::Decoder>*,std::weak_ptr<quasar::Decoder>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    std::string::size_type v6 = result;
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::weak_ptr<quasar::Decoder>>,std::weak_ptr<quasar::Decoder>*,std::weak_ptr<quasar::Decoder>*,std::weak_ptr<quasar::Decoder>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1C8C54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::weak_ptr<quasar::Decoder>>,std::weak_ptr<quasar::Decoder>*,std::weak_ptr<quasar::Decoder>*,std::weak_ptr<quasar::Decoder>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  std::string::size_type v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *std::string::size_type v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<quasar::Decoder>>,std::weak_ptr<quasar::Decoder>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<quasar::Decoder>>,std::weak_ptr<quasar::Decoder>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<quasar::Decoder>>,std::weak_ptr<quasar::Decoder>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<quasar::Decoder>>,std::weak_ptr<quasar::Decoder>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    v1 -= 16;
  }
}

BOOL quasar::arcConsumesAFrame<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(_DWORD *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    return 0;
  }
  if (*a1) {
    return 1;
  }
  int v3 = a1[1];
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 216);
  if (!v4) {
    return 1;
  }
  uint64_t v7 = *(void *)(v4 + 40);
  uint64_t v5 = v4 + 40;
  uint64_t v6 = v7;
  if (!v7) {
    return 1;
  }
  uint64_t v8 = v5;
  do
  {
    int v9 = *(_DWORD *)(v6 + 28);
    BOOL v10 = v9 < v3;
    if (v9 >= v3) {
      long long v11 = (uint64_t *)v6;
    }
    else {
      long long v11 = (uint64_t *)(v6 + 8);
    }
    if (!v10) {
      uint64_t v8 = v6;
    }
    uint64_t v6 = *v11;
  }
  while (*v11);
  return v8 == v5 || v3 < *(_DWORD *)(v8 + 28);
}

uint64_t std::vector<fst::symbol_outT<int>>::__push_back_slow_path<fst::symbol_outT<int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    BOOL v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  }
  else {
    BOOL v10 = 0;
  }
  long long v11 = (char *)&v10[6 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  long long v16 = (char *)&v10[6 * v9];
  *(_OWORD *)long long v11 = *(_OWORD *)a2;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v11 + 2, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  v10[6 * v4 + 5] = *(void *)(a2 + 40);
  v15 += 48;
  std::vector<fst::symbol_outT<int>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B1C8C800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::symbol_outT<int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::symbol_outT<int>>,std::reverse_iterator<fst::symbol_outT<int>*>,std::reverse_iterator<fst::symbol_outT<int>*>,std::reverse_iterator<fst::symbol_outT<int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::symbol_outT<int>>,std::reverse_iterator<fst::symbol_outT<int>*>,std::reverse_iterator<fst::symbol_outT<int>*>,std::reverse_iterator<fst::symbol_outT<int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v13 = a6;
  *((void *)&v13 + 1) = a7;
  long long v12 = v13;
  v10[0] = a1;
  v10[1] = &v12;
  void v10[2] = &v13;
  if (a3 == a5)
  {
    uint64_t v8 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 - 48);
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
      *(_OWORD *)(v7 - 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(_OWORD *)(a3 - 32);
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      *(void *)(a3 - 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
      *(void *)(a3 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      uint64_t v7 = *((void *)&v13 + 1) - 48;
      *((void *)&v13 + 1) -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    uint64_t v8 = v13;
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::symbol_outT<int>>,std::reverse_iterator<fst::symbol_outT<int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v8;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::symbol_outT<int>>,std::reverse_iterator<fst::symbol_outT<int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<fst::symbol_outT<int>>::__assign_with_size[abi:ne180100]<fst::symbol_outT<int>*,fst::symbol_outT<int>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) < a4)
  {
    std::vector<fst::symbol_outT<int>>::__vdeallocate(a1);
    if (a4 > 0x555555555555555) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::symbol_outT<int>>,fst::symbol_outT<int>*,fst::symbol_outT<int>*,fst::symbol_outT<int>*>(v8, (uint64_t)a2, (uint64_t)a3, a1[1]);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - v9) >> 4) < a4)
  {
    long long v13 = &a2[2 * ((a1[1] - v9) >> 4)];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<fst::symbol_outT<int> *,fst::symbol_outT<int> *,fst::symbol_outT<int> *>((uint64_t)&v18, a2, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::symbol_outT<int>>,fst::symbol_outT<int>*,fst::symbol_outT<int>*,fst::symbol_outT<int>*>(v8, (uint64_t)v13, (uint64_t)a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<fst::symbol_outT<int> *,fst::symbol_outT<int> *,fst::symbol_outT<int> *>((uint64_t)&v19, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = a1[1];
  if (v16 != v14)
  {
    do
    {
      long long v17 = *(void **)(v16 - 32);
      if (v17)
      {
        *(void *)(v16 - ++*(_DWORD *)(result + 24) = v17;
        operator delete(v17);
      }
      v16 -= 48;
    }
    while (v16 != v15);
  }
  a1[1] = v15;
}

void sub_1B1C8CAF8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1C8CB00(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<fst::symbol_outT<int>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::symbol_outT<int>>,fst::symbol_outT<int>*,fst::symbol_outT<int>*,fst::symbol_outT<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  _OWORD v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)v6;
      *(void *)(v4 + ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v4 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
      *(void *)(v4 + 16) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(v4 + 16), *(const void **)(v6 + 16), *(void *)(v6 + 24), (uint64_t)(*(void *)(v6 + 24) - *(void *)(v6 + 16)) >> 2);
      *(void *)(v4 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(void *)(v6 + 40);
      uint64_t v4 = v11 + 48;
      v11 += 48;
      v6 += 48;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::symbol_outT<int>>,fst::symbol_outT<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1C8CBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::symbol_outT<int>>,fst::symbol_outT<int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<fst::symbol_outT<int> *,fst::symbol_outT<int> *,fst::symbol_outT<int> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = a3;
  uint64_t v6 = a2 + 3;
  do
  {
    uint64_t v7 = v6 - 3;
    *(_OWORD *)a4 = *(_OWORD *)(v6 - 3);
    if ((uint64_t *)a4 != v6 - 3) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a4 + 16), (char *)*(v6 - 1), *v6, (*v6 - *(v6 - 1)) >> 2);
    }
    *(void *)(a4 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v6[2];
    a4 += 48;
    v6 += 6;
  }
  while (v7 + 6 != v5);
  return v5;
}

void std::vector<std::vector<fst::symbol_outT<int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::vector<fst::symbol_outT<int>>>::__push_back_slow_path<std::vector<fst::symbol_outT<int>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<fst::symbol_outT<int>>::__init_with_size[abi:ne180100]<fst::symbol_outT<int>*,fst::symbol_outT<int>*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4));
  v15 += 24;
  std::vector<std::vector<fst::symbol_outT<int>>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<fst::symbol_outT<int>>>::~__split_buffer(v14);
  return v12;
}

void sub_1B1C8CE50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<fst::symbol_outT<int>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::vector<fst::symbol_outT<int>>::__init_with_size[abi:ne180100]<fst::symbol_outT<int>*,fst::symbol_outT<int>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::symbol_outT<int>>,fst::symbol_outT<int>*,fst::symbol_outT<int>*,fst::symbol_outT<int>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1C8CECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<fst::symbol_outT<int>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<fst::symbol_outT<int>>>,std::reverse_iterator<std::vector<fst::symbol_outT<int>>*>,std::reverse_iterator<std::vector<fst::symbol_outT<int>>*>,std::reverse_iterator<std::vector<fst::symbol_outT<int>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<fst::symbol_outT<int>>>,std::reverse_iterator<std::vector<fst::symbol_outT<int>>*>,std::reverse_iterator<std::vector<fst::symbol_outT<int>>*>,std::reverse_iterator<std::vector<fst::symbol_outT<int>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  float32x2_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<fst::symbol_outT<int>>>,std::reverse_iterator<std::vector<fst::symbol_outT<int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<fst::symbol_outT<int>>>,std::reverse_iterator<std::vector<fst::symbol_outT<int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<fst::symbol_outT<int>>>,std::reverse_iterator<std::vector<fst::symbol_outT<int>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<fst::symbol_outT<int>>>,std::reverse_iterator<std::vector<fst::symbol_outT<int>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<fst::symbol_outT<int>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<fst::symbol_outT<int>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::vector<quasar::TokenInfo>::__emplace_back_slow_path<quasar::TokenInfo>(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xE38E38E38E38E3) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 5);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 5) >= 0x71C71C71C71C71) {
    unint64_t v6 = 0xE38E38E38E38E3;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TokenInfo>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = &v7[288 * v3];
  long long v13 = &v7[288 * v6];
  std::allocator<quasar::TokenInfo>::construct[abi:ne180100]<quasar::TokenInfo,quasar::TokenInfo>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  char v12 = v11 + 288;
  std::vector<quasar::TokenInfo>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<quasar::TokenInfo>::~__split_buffer(&v10);
  return v8;
}

void sub_1B1C8D224(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TokenInfo>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<quasar::TokenInfo>::construct[abi:ne180100]<quasar::TokenInfo,quasar::TokenInfo>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)a3 = 0;
  long long v4 = *(long long *)((char *)a3 + 24);
  *(void *)(a2 + 38) = *(void *)((char *)a3 + 38);
  *(_OWORD *)(a2 + ++*(_DWORD *)(result + 24) = v4;
  long long v5 = a3[3];
  *(void *)(a2 + 64) = *((void *)a3 + 8);
  *(_OWORD *)(a2 + 48) = v5;
  *((void *)a3 + 7) = 0;
  *((void *)a3 + 8) = 0;
  *((void *)a3 + 6) = 0;
  *(void *)(a2 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a2 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(long long *)((char *)a3 + 72);
  *(void *)(a2 + 88) = *((void *)a3 + 11);
  *((void *)a3 + 9) = 0;
  *((void *)a3 + 1std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *((void *)a3 + 11) = 0;
  long long v6 = a3[6];
  *(void *)(a2 + 11std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *((void *)a3 + 14);
  *(_OWORD *)(a2 + 96) = v6;
  *((void *)a3 + 13) = 0;
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a2 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(long long *)((char *)a3 + 120);
  *(void *)(a2 + 136) = *((void *)a3 + 17);
  *((void *)a3 + 15) = 0;
  *((void *)a3 + 16) = 0;
  *((void *)a3 + 17) = 0;
  long long v7 = a3[9];
  *(void *)(a2 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *((void *)a3 + 20);
  *(_OWORD *)(a2 + 144) = v7;
  *((void *)a3 + 19) = 0;
  *((void *)a3 + 2std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *((void *)a3 + 18) = 0;
  int v8 = *((_DWORD *)a3 + 42);
  *(_WORD *)(a2 + 17std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *((_WORD *)a3 + 86);
  *(_DWORD *)(a2 + 168) = v8;
  long long v9 = a3[11];
  *(void *)(a2 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *((void *)a3 + 24);
  *(_OWORD *)(a2 + 176) = v9;
  *((void *)a3 + 23) = 0;
  *((void *)a3 + ++*(_DWORD *)(result + 24) = 0;
  *((void *)a3 + 2std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  long long v10 = *(long long *)((char *)a3 + 200);
  *(_DWORD *)(a2 + 216) = *((_DWORD *)a3 + 54);
  *(_OWORD *)(a2 + 20std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v10;
  uint64_t v11 = *((void *)a3 + 28);
  *(_DWORD *)(a2 + 23std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *((_DWORD *)a3 + 58);
  *(void *)(a2 + 2++*(_DWORD *)(result + 24) = v11;
  *(void *)(a2 + 248) = 0;
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 24std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  __n128 result = (__n128)a3[15];
  *(__n128 *)(a2 + 24std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = result;
  *(void *)(a2 + 256) = *((void *)a3 + 32);
  *((void *)a3 + 3std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *((void *)a3 + 31) = 0;
  *((void *)a3 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a2 + 264) = 0;
  *(void *)(a2 + 27std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a2 + 28std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  uint64_t v13 = *((void *)a3 + 34);
  *(void *)(a2 + 264) = *((void *)a3 + 33);
  *(void *)(a2 + 27std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v13;
  *(void *)(a2 + 28std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *((void *)a3 + 35);
  *((void *)a3 + 33) = 0;
  *((void *)a3 + 34) = 0;
  *((void *)a3 + 35) = 0;
  return result;
}

uint64_t std::vector<quasar::TokenInfo>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TokenInfo>,std::reverse_iterator<quasar::TokenInfo*>,std::reverse_iterator<quasar::TokenInfo*>,std::reverse_iterator<quasar::TokenInfo*>>((uint64_t)(a1 + 2), a1[1], (long long *)a1[1], *a1, (long long *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TokenInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xE38E38E38E38E4) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(288 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TokenInfo>,std::reverse_iterator<quasar::TokenInfo*>,std::reverse_iterator<quasar::TokenInfo*>,std::reverse_iterator<quasar::TokenInfo*>>(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    long long v9 = a3;
    do
    {
      v9 -= 18;
      std::allocator<quasar::TokenInfo>::construct[abi:ne180100]<quasar::TokenInfo,quasar::TokenInfo>(a1, v7 - 288, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 288;
      *((void *)&v16 + 1) -= 288;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TokenInfo>,std::reverse_iterator<quasar::TokenInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TokenInfo>,std::reverse_iterator<quasar::TokenInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TokenInfo>,std::reverse_iterator<quasar::TokenInfo*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TokenInfo>,std::reverse_iterator<quasar::TokenInfo*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(quasar::Token **)(a1[2] + 8);
  uint64_t v2 = *(quasar::Token **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::TokenInfo>::destroy[abi:ne180100](v3, v1);
      uint64_t v1 = (quasar::Token *)((char *)v1 + 288);
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::TokenInfo>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::TokenInfo>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 288;
    std::allocator<quasar::TokenInfo>::destroy[abi:ne180100](v4, (quasar::Token *)(i - 288));
  }
}

uint64_t std::vector<quasar::ChoiceInfo>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::ChoiceInfo>,std::reverse_iterator<quasar::ChoiceInfo*>,std::reverse_iterator<quasar::ChoiceInfo*>,std::reverse_iterator<quasar::ChoiceInfo*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::ChoiceInfo>,std::reverse_iterator<quasar::ChoiceInfo*>,std::reverse_iterator<quasar::ChoiceInfo*>,std::reverse_iterator<quasar::ChoiceInfo*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  float32x2_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *((_OWORD *)a3 - 2);
      a3 -= 4;
      *(_OWORD *)(v7 - 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v8;
      *(void *)(v7 - 16) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *(void *)(v7 - 8) = a3[3];
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ChoiceInfo>,std::reverse_iterator<quasar::ChoiceInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ChoiceInfo>,std::reverse_iterator<quasar::ChoiceInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ChoiceInfo>,std::reverse_iterator<quasar::ChoiceInfo*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ChoiceInfo>,std::reverse_iterator<quasar::ChoiceInfo*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<quasar::TokenInfo>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 4;
  }
}

void **std::__split_buffer<quasar::ChoiceInfo>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::ChoiceInfo>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 32);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<quasar::TokenInfo>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    float32x2_t v9[2] = 0;
    *uint64_t v9 = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 9) = 0;
    *((void *)v7 + 7) = 0;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

_OWORD *std::__tree<std::__value_type<std::string,std::vector<kaldi::TimestampsAndConfidence>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<kaldi::TimestampsAndConfidence>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<kaldi::TimestampsAndConfidence>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    float32x2_t v9[2] = 0;
    *uint64_t v9 = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 9) = 0;
    *((void *)v7 + 7) = 0;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    long long v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  long long v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    void v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B1C8DAE4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<quasar::NBestToken<1ul>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<quasar::NBestToken<1ul>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<quasar::NBestToken<1ul>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 11;
        std::allocator<quasar::NBestToken<1ul>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::NBestToken<1ul>>::destroy[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[8];
  if (v3)
  {
    a2[9] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a2[2];
  if (v4)
  {
    a2[3] = v4;
    operator delete(v4);
  }
}

uint64_t std::vector<quasar::Token>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 5) < a2)
  {
    if (a2 >= 0x124924924924925) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 224 * v6;
    std::vector<quasar::Token>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B1C8DD0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::ProcessHypotheses<1ul,0l,-1l>(quasar::DecoderPassData const&,std::shared_ptr<quasar::DecoderChainOutput> const&,std::vector<quasar::CalculateJoinedNBest<1ul>::HypothesisVector,std::allocator<quasar::CalculateJoinedNBest<1ul>::HypothesisVector>> const&,std::vector<std::vector<quasar::Token>> *,std::vector<double> *,kaldi::LatticeScoreCache *)::{lambda(quasar::NBestToken<1ul> const&)#1}::operator()(unsigned char *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  quasar::Token::Token((quasar::Token *)v92);
  unsigned int v91 = -1;
  *(_DWORD *)long long v94 = *a2;
  quasar::SymbolTableList::lookup(*(uint64_t **)(**((void **)a1 + 1) + 472), *(int *)v94, (unsigned __int8 *)v92, &v91);
  quasar::calculateLmeInfo((std::string *)(**((void **)a1 + 1) + 584), a1[16], v91, (uint64_t)v92);
  uint64_t v6 = (const float *)(a1 + 20);
  int32x2_t v7 = (int32x2_t)vld1_dup_f32(v6);
  *(int32x2_t *)&v94[4] = vmul_s32(v7, vmovn_s64(*(int64x2_t *)(a2 + 10)));
  uint64_t v8 = *(void *)a1;
  if (*(void *)(*(void *)a1 + 32) && *(void *)(v8 + 80) && !*(unsigned char *)(v8 + 852))
  {
    uint64_t v9 = *((void *)a2 + 2);
    uint64_t v10 = *((void *)a2 + 3) - v9;
    uint64_t v11 = v10 >> 2;
    if (v10)
    {
      unint64_t v12 = 0;
      do
      {
        int v13 = *(_DWORD *)(v9 + 4 * v12);
        unsigned int v14 = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)(*(void *)a1 + 80), v13);
        long long v15 = (void **)*((void *)a1 + 4);
        unint64_t v16 = *((void *)a2 + 5) + v12;
        long long v17 = (char *)v15[1];
        char v18 = (char *)v15[2];
        if (v17 >= v18)
        {
          uint64_t v20 = (v17 - (unsigned char *)*v15) >> 4;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v22 = v18 - (unsigned char *)*v15;
          if (v22 >> 3 > v21) {
            unint64_t v21 = v22 >> 3;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v21;
          }
          long long v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v15 + 2), v23);
          long long v26 = &v24[16 * v20];
          *(void *)long long v26 = v16;
          *((_DWORD *)v26 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v13;
          *((_DWORD *)v26 + 3) = v14;
          long long v28 = (char *)*v15;
          int v27 = (char *)v15[1];
          long long v29 = v26;
          if (v27 != *v15)
          {
            do
            {
              *((_OWORD *)v29 - 1) = *((_OWORD *)v27 - 1);
              v29 -= 16;
              v27 -= 16;
            }
            while (v27 != v28);
            int v27 = (char *)*v15;
          }
          char v19 = v26 + 16;
          char *v15 = v29;
          v15[1] = v26 + 16;
          void v15[2] = &v24[16 * v25];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *(void *)long long v17 = v16;
          char v19 = v17 + 16;
          *((_DWORD *)v17 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v13;
          *((_DWORD *)v17 + 3) = v14;
        }
        v15[1] = v19;
        uint64_t v30 = *(void *)a1;
        if (*(void *)(*(void *)a1 + 216))
        {
          uint64_t v31 = *(void *)(*((void *)a1 + 4) + 8);
          if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(v30 + 96), *(_DWORD *)(v31 - 4))
            && kaldi::TransitionModel::IsFinal(*(kaldi::TransitionModel **)(v30 + 80), *(_DWORD *)(v31 - 8))
            && (kaldi::WordBoundaryInfo::TypeOfPhone(*(kaldi::WordBoundaryInfo **)(*(void *)a1 + 216), v14) & 0xFFFFFFFE) == 2)
          {
            uint64_t v32 = *((void *)a1 + 5);
            uint64_t v33 = (uint64_t)(*(void *)(*((void *)a1 + 4) + 8) - **((void **)a1 + 4)) >> 4;
            long long v34 = *(uint64_t **)(v32 + 8);
            unint64_t v35 = *(void *)(v32 + 16);
            if ((unint64_t)v34 >= v35)
            {
              unsigned int v37 = *(uint64_t **)v32;
              uint64_t v38 = ((uint64_t)v34 - *(void *)v32) >> 3;
              unint64_t v39 = v38 + 1;
              if ((unint64_t)(v38 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v40 = v35 - (void)v37;
              if (v40 >> 2 > v39) {
                unint64_t v39 = v40 >> 2;
              }
              if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v41 = v39;
              }
              if (v41)
              {
                uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v32 + 16, v41);
                unsigned int v37 = *(uint64_t **)v32;
                long long v34 = *(uint64_t **)(v32 + 8);
              }
              else
              {
                uint64_t v42 = 0;
              }
              unint64_t v43 = (uint64_t *)&v42[8 * v38];
              *unint64_t v43 = v33;
              int v36 = v43 + 1;
              while (v34 != v37)
              {
                uint64_t v44 = *--v34;
                *--unint64_t v43 = v44;
              }
              *(void *)uint64_t v32 = v43;
              *(void *)(v32 + 8) = v36;
              *(void *)(v32 + 16) = &v42[8 * v41];
              if (v37) {
                operator delete(v37);
              }
            }
            else
            {
              uint64_t *v34 = v33;
              int v36 = v34 + 1;
            }
            *(void *)(v32 + 8) = v36;
          }
        }
        BOOL isSilencePhone = kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(*(void *)a1 + 96), *(_DWORD *)(*(void *)(*((void *)a1 + 4) + 8) - 4));
        BOOL v46 = isSilencePhone;
        if (!isSilencePhone) {
          uint64_t v11 = v12;
        }
        if (a1[16])
        {
          uint64_t v47 = *((void *)a1 + 1);
          int v48 = *(_DWORD *)(*(void *)(*(void *)(*(void *)a1 + 80) + 96) + 4 * v13);
          std::string v49 = *(void **)v47;
          unint64_t v50 = *(void *)(*(void *)v47 + 992);
          unint64_t v51 = *(void *)(*(void *)v47 + 1000);
          if (v50 >= v51)
          {
            uint64_t v53 = v49[123];
            uint64_t v54 = (uint64_t)(v50 - v53) >> 3;
            unint64_t v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v56 = v51 - v53;
            if (v56 >> 2 > v55) {
              unint64_t v55 = v56 >> 2;
            }
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v57 = v55;
            }
            long long v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v49 + 125), v57);
            long long v60 = &v58[8 * v54];
            *(_DWORD *)long long v60 = v48;
            v60[4] = v46;
            long long v61 = (char *)v49[124];
            long long v62 = (char *)v49[123];
            long long v63 = v60;
            if (v61 != v62)
            {
              do
              {
                uint64_t v64 = *((void *)v61 - 1);
                v61 -= 8;
                *((void *)v63 - 1) = v64;
                v63 -= 8;
              }
              while (v61 != v62);
              long long v61 = (char *)v49[123];
            }
            v49[123] = v63;
            uint64_t v52 = v60 + 8;
            v49[124] = v60 + 8;
            v49[125] = &v58[8 * v59];
            if (v61) {
              operator delete(v61);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v50 = v48;
            *(unsigned char *)(v50 + 4) = isSilencePhone;
            uint64_t v52 = (char *)(v50 + 8);
          }
          v49[124] = v52;
        }
        ++v12;
        uint64_t v9 = *((void *)a2 + 2);
      }
      while (v12 < (*((void *)a2 + 3) - v9) >> 2);
      uint64_t v8 = *(void *)a1;
    }
    uint64_t v65 = *(void *)(v8 + 216);
    if (!v65) {
      goto LABEL_70;
    }
    uint64_t v68 = *(void *)(v65 + 40);
    uint64_t v66 = v65 + 40;
    uint64_t v67 = v68;
    if (!v68) {
      goto LABEL_70;
    }
    int v69 = *a2;
    uint64_t v70 = v66;
    do
    {
      int v71 = *(_DWORD *)(v67 + 28);
      BOOL v72 = v71 < v69;
      if (v71 >= v69) {
        int v73 = (uint64_t *)v67;
      }
      else {
        int v73 = (uint64_t *)(v67 + 8);
      }
      if (!v72) {
        uint64_t v70 = v67;
      }
      uint64_t v67 = *v73;
    }
    while (*v73);
    if (v70 != v66 && v69 >= *(_DWORD *)(v70 + 28))
    {
      if (v11 && quasar::gLogLevel >= 2)
      {
        memset(v90, 0, sizeof(v90));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v90);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"Non-silence phone detected at transition ", 41);
        long long v86 = (void *)std::ostream::operator<<();
        long long v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)" ", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"(out of ", 8);
        long long v88 = (void *)std::ostream::operator<<();
        long long v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)") for unpronouncable token; ",
                28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"whereas all silence phones were expected.", 41);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v90);
      }
      int v74 = *((_DWORD *)a1 + 5) * a2[10];
    }
    else
    {
LABEL_70:
      int v74 = *((_DWORD *)a1 + 5) + *((_DWORD *)a1 + 5) * (a2[10] + v11);
    }
    *(_DWORD *)&v94[12] = v74;
  }
  if (a1[24])
  {
    int v75 = a2 + 14;
    long long v76 = a2 + 15;
    float v77 = round(expf(-*((float *)a2 + 3)) * 1000.0);
  }
  else
  {
    int v75 = a2 + 2;
    long long v76 = a2 + 3;
    float v77 = 0.0;
  }
  int v78 = *v76;
  DWORD1(v109) = *v75;
  DWORD2(v109) = v78;
  *(float *)&v94[16] = v77;
  *(_OWORD *)a3 = *(_OWORD *)v92;
  *(void *)(a3 + 16) = v93;
  v92[0] = 0;
  v92[1] = 0;
  uint64_t v93 = 0;
  *(_OWORD *)(a3 + ++*(_DWORD *)(result + 24) = *(_OWORD *)v94;
  *(void *)(a3 + 38) = *(void *)&v94[14];
  long long v79 = *(_OWORD *)v95;
  uint64_t v80 = v98;
  *(void *)(a3 + 64) = v96;
  *(_OWORD *)(a3 + 48) = v79;
  v95[0] = 0;
  v95[1] = 0;
  *(_OWORD *)(a3 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v97;
  *(void *)(a3 + 88) = v80;
  uint64_t v96 = 0;
  long long v97 = 0uLL;
  uint64_t v98 = 0;
  long long v81 = *(_OWORD *)__p;
  uint64_t v82 = v102;
  *(void *)(a3 + 11std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v100;
  *(_OWORD *)(a3 + 96) = v81;
  __p[0] = 0;
  __p[1] = 0;
  *(_OWORD *)(a3 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v101;
  *(void *)(a3 + 136) = v82;
  uint64_t v100 = 0;
  long long v101 = 0uLL;
  uint64_t v102 = 0;
  long long v83 = v103;
  *(void *)(a3 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v104;
  *(_OWORD *)(a3 + 144) = v83;
  long long v103 = 0uLL;
  LODWORD(v8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v105;
  *(_WORD *)(a3 + 17std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v106;
  *(_DWORD *)(a3 + 168) = v80;
  long long v84 = v107;
  *(void *)(a3 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v108;
  *(_OWORD *)(a3 + 176) = v84;
  uint64_t v104 = 0;
  long long v107 = 0uLL;
  uint64_t v108 = 0;
  long long v85 = v109;
  *(_DWORD *)(a3 + 216) = v110;
  *(_OWORD *)(a3 + 20std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v85;
  *(void *)&v90[0] = &v101;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v90);
  if (SHIBYTE(v100) < 0) {
    operator delete(__p[0]);
  }
  *(void *)&v90[0] = &v97;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v90);
  if (SHIBYTE(v96) < 0) {
    operator delete(v95[0]);
  }
  if (SHIBYTE(v93) < 0) {
    operator delete(v92[0]);
  }
}

void sub_1B1C8E3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
}

uint64_t quasar::ProcessHypotheses<1ul,0l,-1l>(quasar::DecoderPassData const&,std::shared_ptr<quasar::DecoderChainOutput> const&,std::vector<quasar::CalculateJoinedNBest<1ul>::HypothesisVector,std::allocator<quasar::CalculateJoinedNBest<1ul>::HypothesisVector>> const&,std::vector<std::vector<quasar::Token>> *,std::vector<double> *,kaldi::LatticeScoreCache *)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  _OWORD v21[17] = *MEMORY[0x1E4F143B8];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (a2)
  {
    uint64_t v5 = *v4;
    uint64_t v6 = *(void *)(v5 + 8 * a2 - 8);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = *v4;
  }
  uint64_t v7 = *(void *)(v5 + 8 * a2);
  if (v6 != v7)
  {
    uint64_t v8 = (int *)(**(void **)a1 + 16 * v6 + 12);
    uint64_t v9 = 16 * v7 - 16 * v6;
    do
    {
      uint64_t v10 = *(void *)(a1 + 16);
      if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(v10 + 96), *v8)
        && kaldi::TransitionModel::IsFinal(*(kaldi::TransitionModel **)(v10 + 80), *(v8 - 1)))
      {
        (*(void (**)(std::string *__return_ptr))(**(void **)(*(void *)(a1 + 16) + 168) + 88))(&__p);
        kaldi::quasar::Lexicon::BasifyPhone(&__p);
        uint64_t v11 = (char *)v18 + *(void *)(v18[0] - 24);
        if ((v11[32] & 5) == 0)
        {
          (*(void (**)(void *__return_ptr))(**((void **)v11 + 5) + 32))(v21);
          if (v21[16] >= 1) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
          }
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v8 += 4;
      v9 -= 16;
    }
    while (v9);
  }
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E4FBA408];
  uint64_t v14 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v18[0] = v14;
  v18[1] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v20);
}

void sub_1B1C8E740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void quasar::ProcessHypotheses<1ul,-1l,0l>(quasar::DecoderPassData const&,std::shared_ptr<quasar::DecoderChainOutput> const&,std::vector<quasar::CalculateJoinedNBest<1ul>::HypothesisVector,std::allocator<quasar::CalculateJoinedNBest<1ul>::HypothesisVector>> const&,std::vector<std::vector<quasar::Token>> *,std::vector<double> *,kaldi::LatticeScoreCache *)::{lambda(quasar::NBestToken<1ul> const&)#1}::operator()(unsigned __int8 *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  quasar::Token::Token((quasar::Token *)v90);
  unsigned int v89 = -1;
  *(_DWORD *)long long v92 = *a2;
  quasar::SymbolTableList::lookup(*(uint64_t **)(**((void **)a1 + 1) + 472), *(int *)v92, (unsigned __int8 *)v90, &v89);
  quasar::calculateLmeInfo((std::string *)(**((void **)a1 + 1) + 584), a1[16], v89, (uint64_t)v90);
  uint64_t v6 = (const float *)(a1 + 20);
  int32x2_t v7 = (int32x2_t)vld1_dup_f32(v6);
  *(int32x2_t *)&v92[4] = vmul_s32(v7, vmovn_s64(*(int64x2_t *)(a2 + 10)));
  uint64_t v8 = *(void *)a1;
  if (*(void *)(*(void *)a1 + 32) && *(void *)(v8 + 80) && !*(unsigned char *)(v8 + 852))
  {
    uint64_t v9 = *((void *)a2 + 2);
    uint64_t v10 = *((void *)a2 + 3) - v9;
    uint64_t v11 = v10 >> 2;
    if (v10)
    {
      unint64_t v12 = 0;
      do
      {
        int v13 = *(_DWORD *)(v9 + 4 * v12);
        unsigned int v14 = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)(*(void *)a1 + 80), v13);
        long long v15 = (void **)*((void *)a1 + 4);
        unint64_t v16 = *((void *)a2 + 5) + v12;
        long long v17 = (char *)v15[1];
        char v18 = (char *)v15[2];
        if (v17 >= v18)
        {
          uint64_t v20 = (v17 - (unsigned char *)*v15) >> 4;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v22 = v18 - (unsigned char *)*v15;
          if (v22 >> 3 > v21) {
            unint64_t v21 = v22 >> 3;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v21;
          }
          long long v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v15 + 2), v23);
          long long v26 = &v24[16 * v20];
          *(void *)long long v26 = v16;
          *((_DWORD *)v26 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v13;
          *((_DWORD *)v26 + 3) = v14;
          long long v28 = (char *)*v15;
          int v27 = (char *)v15[1];
          long long v29 = v26;
          if (v27 != *v15)
          {
            do
            {
              *((_OWORD *)v29 - 1) = *((_OWORD *)v27 - 1);
              v29 -= 16;
              v27 -= 16;
            }
            while (v27 != v28);
            int v27 = (char *)*v15;
          }
          char v19 = v26 + 16;
          char *v15 = v29;
          v15[1] = v26 + 16;
          void v15[2] = &v24[16 * v25];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *(void *)long long v17 = v16;
          char v19 = v17 + 16;
          *((_DWORD *)v17 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v13;
          *((_DWORD *)v17 + 3) = v14;
        }
        v15[1] = v19;
        uint64_t v30 = *(void *)a1;
        if (*(void *)(*(void *)a1 + 216))
        {
          uint64_t v31 = *(void *)(*((void *)a1 + 4) + 8);
          if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(v30 + 96), *(_DWORD *)(v31 - 4))
            && kaldi::TransitionModel::IsFinal(*(kaldi::TransitionModel **)(v30 + 80), *(_DWORD *)(v31 - 8))
            && (kaldi::WordBoundaryInfo::TypeOfPhone(*(kaldi::WordBoundaryInfo **)(*(void *)a1 + 216), v14) & 0xFFFFFFFE) == 2)
          {
            uint64_t v32 = *((void *)a1 + 5);
            uint64_t v33 = (uint64_t)(*(void *)(*((void *)a1 + 4) + 8) - **((void **)a1 + 4)) >> 4;
            long long v34 = *(uint64_t **)(v32 + 8);
            unint64_t v35 = *(void *)(v32 + 16);
            if ((unint64_t)v34 >= v35)
            {
              unsigned int v37 = *(uint64_t **)v32;
              uint64_t v38 = ((uint64_t)v34 - *(void *)v32) >> 3;
              unint64_t v39 = v38 + 1;
              if ((unint64_t)(v38 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v40 = v35 - (void)v37;
              if (v40 >> 2 > v39) {
                unint64_t v39 = v40 >> 2;
              }
              if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v41 = v39;
              }
              if (v41)
              {
                uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v32 + 16, v41);
                unsigned int v37 = *(uint64_t **)v32;
                long long v34 = *(uint64_t **)(v32 + 8);
              }
              else
              {
                uint64_t v42 = 0;
              }
              unint64_t v43 = (uint64_t *)&v42[8 * v38];
              *unint64_t v43 = v33;
              int v36 = v43 + 1;
              while (v34 != v37)
              {
                uint64_t v44 = *--v34;
                *--unint64_t v43 = v44;
              }
              *(void *)uint64_t v32 = v43;
              *(void *)(v32 + 8) = v36;
              *(void *)(v32 + 16) = &v42[8 * v41];
              if (v37) {
                operator delete(v37);
              }
            }
            else
            {
              uint64_t *v34 = v33;
              int v36 = v34 + 1;
            }
            *(void *)(v32 + 8) = v36;
          }
        }
        BOOL isSilencePhone = kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(*(void *)a1 + 96), *(_DWORD *)(*(void *)(*((void *)a1 + 4) + 8) - 4));
        BOOL v46 = isSilencePhone;
        if (!isSilencePhone) {
          uint64_t v11 = v12;
        }
        if (a1[16])
        {
          uint64_t v47 = *((void *)a1 + 1);
          int v48 = *(_DWORD *)(*(void *)(*(void *)(*(void *)a1 + 80) + 96) + 4 * v13);
          std::string v49 = *(void **)v47;
          unint64_t v50 = *(void *)(*(void *)v47 + 992);
          unint64_t v51 = *(void *)(*(void *)v47 + 1000);
          if (v50 >= v51)
          {
            uint64_t v53 = v49[123];
            uint64_t v54 = (uint64_t)(v50 - v53) >> 3;
            unint64_t v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v56 = v51 - v53;
            if (v56 >> 2 > v55) {
              unint64_t v55 = v56 >> 2;
            }
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v57 = v55;
            }
            long long v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v49 + 125), v57);
            long long v60 = &v58[8 * v54];
            *(_DWORD *)long long v60 = v48;
            v60[4] = v46;
            long long v61 = (char *)v49[124];
            long long v62 = (char *)v49[123];
            long long v63 = v60;
            if (v61 != v62)
            {
              do
              {
                uint64_t v64 = *((void *)v61 - 1);
                v61 -= 8;
                *((void *)v63 - 1) = v64;
                v63 -= 8;
              }
              while (v61 != v62);
              long long v61 = (char *)v49[123];
            }
            v49[123] = v63;
            uint64_t v52 = v60 + 8;
            v49[124] = v60 + 8;
            v49[125] = &v58[8 * v59];
            if (v61) {
              operator delete(v61);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v50 = v48;
            *(unsigned char *)(v50 + 4) = isSilencePhone;
            uint64_t v52 = (char *)(v50 + 8);
          }
          v49[124] = v52;
        }
        ++v12;
        uint64_t v9 = *((void *)a2 + 2);
      }
      while (v12 < (*((void *)a2 + 3) - v9) >> 2);
      uint64_t v8 = *(void *)a1;
    }
    uint64_t v65 = *(void *)(v8 + 216);
    if (!v65) {
      goto LABEL_70;
    }
    uint64_t v68 = *(void *)(v65 + 40);
    uint64_t v66 = v65 + 40;
    uint64_t v67 = v68;
    if (!v68) {
      goto LABEL_70;
    }
    int v69 = *a2;
    uint64_t v70 = v66;
    do
    {
      int v71 = *(_DWORD *)(v67 + 28);
      BOOL v72 = v71 < v69;
      if (v71 >= v69) {
        int v73 = (uint64_t *)v67;
      }
      else {
        int v73 = (uint64_t *)(v67 + 8);
      }
      if (!v72) {
        uint64_t v70 = v67;
      }
      uint64_t v67 = *v73;
    }
    while (*v73);
    if (v70 != v66 && v69 >= *(_DWORD *)(v70 + 28))
    {
      if (v11 && quasar::gLogLevel >= 2)
      {
        memset(v88, 0, sizeof(v88));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v88);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"Non-silence phone detected at transition ", 41);
        long long v84 = (void *)std::ostream::operator<<();
        long long v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)" ", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"(out of ", 8);
        long long v86 = (void *)std::ostream::operator<<();
        long long v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)") for unpronouncable token; ",
                28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"whereas all silence phones were expected.", 41);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v88);
      }
      int v74 = *((_DWORD *)a1 + 5) * a2[10];
    }
    else
    {
LABEL_70:
      int v74 = *((_DWORD *)a1 + 5) + *((_DWORD *)a1 + 5) * (a2[10] + v11);
    }
    *(_DWORD *)&v92[12] = v74;
  }
  int v75 = a1[24];
  long long v76 = a2 + 6;
  if (!a1[24]) {
    long long v76 = a2 + 2;
  }
  *(void *)&v107[4] = *v76;
  *(float32x2_t *)&v107[12] = vadd_f32(*(float32x2_t *)(a2 + 14), *(float32x2_t *)&v107[12]);
  if (v75) {
    float v77 = round(expf(-*((float *)a2 + 3)) * 1000.0);
  }
  else {
    float v77 = 0.0;
  }
  *(float *)&v92[16] = v77;
  *(_OWORD *)a3 = *(_OWORD *)v90;
  *(void *)(a3 + 16) = v91;
  v90[0] = 0;
  v90[1] = 0;
  uint64_t v91 = 0;
  *(_OWORD *)(a3 + ++*(_DWORD *)(result + 24) = *(_OWORD *)v92;
  *(void *)(a3 + 38) = *(void *)&v92[14];
  uint64_t v78 = v96;
  *(void *)(a3 + 64) = v94;
  *(_OWORD *)(a3 + 48) = *(_OWORD *)v93;
  v93[0] = 0;
  v93[1] = 0;
  *(_OWORD *)(a3 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v95;
  *(void *)(a3 + 88) = v78;
  uint64_t v94 = 0;
  long long v95 = 0uLL;
  uint64_t v96 = 0;
  long long v79 = *(_OWORD *)__p;
  uint64_t v80 = v100;
  *(void *)(a3 + 11std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v98;
  *(_OWORD *)(a3 + 96) = v79;
  __p[0] = 0;
  __p[1] = 0;
  *(_OWORD *)(a3 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v99;
  *(void *)(a3 + 136) = v80;
  uint64_t v98 = 0;
  long long v99 = 0uLL;
  uint64_t v100 = 0;
  long long v81 = v101;
  *(void *)(a3 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v102;
  *(_OWORD *)(a3 + 144) = v81;
  long long v101 = 0uLL;
  LODWORD(v78) = v103;
  *(_WORD *)(a3 + 17std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v104;
  *(_DWORD *)(a3 + 168) = v78;
  long long v82 = v105;
  *(void *)(a3 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v106;
  *(_OWORD *)(a3 + 176) = v82;
  uint64_t v102 = 0;
  long long v105 = 0uLL;
  uint64_t v106 = 0;
  long long v83 = *(_OWORD *)v107;
  *(_DWORD *)(a3 + 216) = *(_DWORD *)&v107[16];
  *(_OWORD *)(a3 + 20std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v83;
  *(void *)&v88[0] = &v99;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v88);
  if (SHIBYTE(v98) < 0) {
    operator delete(__p[0]);
  }
  *(void *)&v88[0] = &v95;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v88);
  if (SHIBYTE(v94) < 0) {
    operator delete(v93[0]);
  }
  if (SHIBYTE(v91) < 0) {
    operator delete(v90[0]);
  }
}

void sub_1B1C8EE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
}

uint64_t quasar::ProcessHypotheses<1ul,-1l,0l>(quasar::DecoderPassData const&,std::shared_ptr<quasar::DecoderChainOutput> const&,std::vector<quasar::CalculateJoinedNBest<1ul>::HypothesisVector,std::allocator<quasar::CalculateJoinedNBest<1ul>::HypothesisVector>> const&,std::vector<std::vector<quasar::Token>> *,std::vector<double> *,kaldi::LatticeScoreCache *)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  _OWORD v21[17] = *MEMORY[0x1E4F143B8];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (a2)
  {
    uint64_t v5 = *v4;
    uint64_t v6 = *(void *)(v5 + 8 * a2 - 8);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = *v4;
  }
  uint64_t v7 = *(void *)(v5 + 8 * a2);
  if (v6 != v7)
  {
    uint64_t v8 = (int *)(**(void **)a1 + 16 * v6 + 12);
    uint64_t v9 = 16 * v7 - 16 * v6;
    do
    {
      uint64_t v10 = *(void *)(a1 + 16);
      if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(v10 + 96), *v8)
        && kaldi::TransitionModel::IsFinal(*(kaldi::TransitionModel **)(v10 + 80), *(v8 - 1)))
      {
        (*(void (**)(std::string *__return_ptr))(**(void **)(*(void *)(a1 + 16) + 168) + 88))(&__p);
        kaldi::quasar::Lexicon::BasifyPhone(&__p);
        uint64_t v11 = (char *)v18 + *(void *)(v18[0] - 24);
        if ((v11[32] & 5) == 0)
        {
          (*(void (**)(void *__return_ptr))(**((void **)v11 + 5) + 32))(v21);
          if (v21[16] >= 1) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
          }
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v8 += 4;
      v9 -= 16;
    }
    while (v9);
  }
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E4FBA408];
  uint64_t v14 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v18[0] = v14;
  v18[1] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v20);
}

void sub_1B1C8F1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void std::vector<std::vector<quasar::NBestToken<0ul>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<quasar::NBestToken<0ul>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<quasar::NBestToken<0ul>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<quasar::NBestToken<0ul>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<quasar::NBestToken<0ul>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 88)
  {
    uint64_t v4 = *(void **)(i - 72);
    if (v4)
    {
      *(void *)(i - 64) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void quasar::ProcessHypotheses<0ul,-1l,-1l>(quasar::DecoderPassData const&,std::shared_ptr<quasar::DecoderChainOutput> const&,std::vector<quasar::CalculateJoinedNBest<0ul>::HypothesisVector,std::allocator<quasar::CalculateJoinedNBest<0ul>::HypothesisVector>> const&,std::vector<std::vector<quasar::Token>> *,std::vector<double> *,kaldi::LatticeScoreCache *)::{lambda(quasar::NBestToken<0ul> const&)#1}::operator()(const float *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  quasar::Token::Token((quasar::Token *)v87);
  unsigned int v86 = -1;
  *(_DWORD *)unsigned int v89 = *a2;
  quasar::SymbolTableList::lookup(*(uint64_t **)(**((void **)a1 + 1) + 472), *(int *)v89, (unsigned __int8 *)v87, &v86);
  quasar::calculateLmeInfo((std::string *)(**((void **)a1 + 1) + 584), *((unsigned __int8 *)a1 + 16), v86, (uint64_t)v87);
  uint64_t v6 = a1 + 5;
  int32x2_t v7 = (int32x2_t)vld1_dup_f32(v6);
  *(int32x2_t *)&v89[4] = vmul_s32(v7, vmovn_s64(*(int64x2_t *)(a2 + 10)));
  uint64_t v8 = *(void *)a1;
  if (*(void *)(*(void *)a1 + 32) && *(void *)(v8 + 80) && !*(unsigned char *)(v8 + 852))
  {
    uint64_t v9 = *((void *)a2 + 2);
    uint64_t v10 = *((void *)a2 + 3) - v9;
    uint64_t v11 = v10 >> 2;
    if (v10)
    {
      unint64_t v12 = 0;
      do
      {
        int v13 = *(_DWORD *)(v9 + 4 * v12);
        unsigned int v14 = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)(*(void *)a1 + 80), v13);
        long long v15 = (void **)*((void *)a1 + 4);
        unint64_t v16 = *((void *)a2 + 5) + v12;
        long long v17 = (char *)v15[1];
        char v18 = (char *)v15[2];
        if (v17 >= v18)
        {
          uint64_t v20 = (v17 - (unsigned char *)*v15) >> 4;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v22 = v18 - (unsigned char *)*v15;
          if (v22 >> 3 > v21) {
            unint64_t v21 = v22 >> 3;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v21;
          }
          long long v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v15 + 2), v23);
          long long v26 = &v24[16 * v20];
          *(void *)long long v26 = v16;
          *((_DWORD *)v26 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v13;
          *((_DWORD *)v26 + 3) = v14;
          long long v28 = (char *)*v15;
          int v27 = (char *)v15[1];
          long long v29 = v26;
          if (v27 != *v15)
          {
            do
            {
              *((_OWORD *)v29 - 1) = *((_OWORD *)v27 - 1);
              v29 -= 16;
              v27 -= 16;
            }
            while (v27 != v28);
            int v27 = (char *)*v15;
          }
          char v19 = v26 + 16;
          char *v15 = v29;
          v15[1] = v26 + 16;
          void v15[2] = &v24[16 * v25];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *(void *)long long v17 = v16;
          char v19 = v17 + 16;
          *((_DWORD *)v17 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v13;
          *((_DWORD *)v17 + 3) = v14;
        }
        v15[1] = v19;
        uint64_t v30 = *(void *)a1;
        if (*(void *)(*(void *)a1 + 216))
        {
          uint64_t v31 = *(void *)(*((void *)a1 + 4) + 8);
          if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(v30 + 96), *(_DWORD *)(v31 - 4))
            && kaldi::TransitionModel::IsFinal(*(kaldi::TransitionModel **)(v30 + 80), *(_DWORD *)(v31 - 8))
            && (kaldi::WordBoundaryInfo::TypeOfPhone(*(kaldi::WordBoundaryInfo **)(*(void *)a1 + 216), v14) & 0xFFFFFFFE) == 2)
          {
            uint64_t v32 = *((void *)a1 + 5);
            uint64_t v33 = (uint64_t)(*(void *)(*((void *)a1 + 4) + 8) - **((void **)a1 + 4)) >> 4;
            long long v34 = *(uint64_t **)(v32 + 8);
            unint64_t v35 = *(void *)(v32 + 16);
            if ((unint64_t)v34 >= v35)
            {
              unsigned int v37 = *(uint64_t **)v32;
              uint64_t v38 = ((uint64_t)v34 - *(void *)v32) >> 3;
              unint64_t v39 = v38 + 1;
              if ((unint64_t)(v38 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v40 = v35 - (void)v37;
              if (v40 >> 2 > v39) {
                unint64_t v39 = v40 >> 2;
              }
              if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v41 = v39;
              }
              if (v41)
              {
                uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v32 + 16, v41);
                unsigned int v37 = *(uint64_t **)v32;
                long long v34 = *(uint64_t **)(v32 + 8);
              }
              else
              {
                uint64_t v42 = 0;
              }
              unint64_t v43 = (uint64_t *)&v42[8 * v38];
              *unint64_t v43 = v33;
              int v36 = v43 + 1;
              while (v34 != v37)
              {
                uint64_t v44 = *--v34;
                *--unint64_t v43 = v44;
              }
              *(void *)uint64_t v32 = v43;
              *(void *)(v32 + 8) = v36;
              *(void *)(v32 + 16) = &v42[8 * v41];
              if (v37) {
                operator delete(v37);
              }
            }
            else
            {
              uint64_t *v34 = v33;
              int v36 = v34 + 1;
            }
            *(void *)(v32 + 8) = v36;
          }
        }
        BOOL isSilencePhone = kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(*(void *)a1 + 96), *(_DWORD *)(*(void *)(*((void *)a1 + 4) + 8) - 4));
        BOOL v46 = isSilencePhone;
        if (!isSilencePhone) {
          uint64_t v11 = v12;
        }
        if (*((unsigned char *)a1 + 16))
        {
          uint64_t v47 = *((void *)a1 + 1);
          int v48 = *(_DWORD *)(*(void *)(*(void *)(*(void *)a1 + 80) + 96) + 4 * v13);
          std::string v49 = *(void **)v47;
          unint64_t v50 = *(void *)(*(void *)v47 + 992);
          unint64_t v51 = *(void *)(*(void *)v47 + 1000);
          if (v50 >= v51)
          {
            uint64_t v53 = v49[123];
            uint64_t v54 = (uint64_t)(v50 - v53) >> 3;
            unint64_t v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v56 = v51 - v53;
            if (v56 >> 2 > v55) {
              unint64_t v55 = v56 >> 2;
            }
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v57 = v55;
            }
            long long v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v49 + 125), v57);
            long long v60 = &v58[8 * v54];
            *(_DWORD *)long long v60 = v48;
            v60[4] = v46;
            long long v61 = (char *)v49[124];
            long long v62 = (char *)v49[123];
            long long v63 = v60;
            if (v61 != v62)
            {
              do
              {
                uint64_t v64 = *((void *)v61 - 1);
                v61 -= 8;
                *((void *)v63 - 1) = v64;
                v63 -= 8;
              }
              while (v61 != v62);
              long long v61 = (char *)v49[123];
            }
            v49[123] = v63;
            uint64_t v52 = v60 + 8;
            v49[124] = v60 + 8;
            v49[125] = &v58[8 * v59];
            if (v61) {
              operator delete(v61);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v50 = v48;
            *(unsigned char *)(v50 + 4) = isSilencePhone;
            uint64_t v52 = (char *)(v50 + 8);
          }
          v49[124] = v52;
        }
        ++v12;
        uint64_t v9 = *((void *)a2 + 2);
      }
      while (v12 < (*((void *)a2 + 3) - v9) >> 2);
      uint64_t v8 = *(void *)a1;
    }
    uint64_t v65 = *(void *)(v8 + 216);
    if (!v65) {
      goto LABEL_70;
    }
    uint64_t v68 = *(void *)(v65 + 40);
    uint64_t v66 = v65 + 40;
    uint64_t v67 = v68;
    if (!v68) {
      goto LABEL_70;
    }
    int v69 = *a2;
    uint64_t v70 = v66;
    do
    {
      int v71 = *(_DWORD *)(v67 + 28);
      BOOL v72 = v71 < v69;
      if (v71 >= v69) {
        int v73 = (uint64_t *)v67;
      }
      else {
        int v73 = (uint64_t *)(v67 + 8);
      }
      if (!v72) {
        uint64_t v70 = v67;
      }
      uint64_t v67 = *v73;
    }
    while (*v73);
    if (v70 != v66 && v69 >= *(_DWORD *)(v70 + 28))
    {
      if (v11 && quasar::gLogLevel >= 2)
      {
        memset(v85, 0, sizeof(v85));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v85);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"Non-silence phone detected at transition ", 41);
        long long v81 = (void *)std::ostream::operator<<();
        long long v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)" ", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"(out of ", 8);
        long long v83 = (void *)std::ostream::operator<<();
        long long v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)") for unpronouncable token; ",
                28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"whereas all silence phones were expected.", 41);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v85);
      }
      int v74 = *((_DWORD *)a1 + 5) * a2[10];
    }
    else
    {
LABEL_70:
      int v74 = *((_DWORD *)a1 + 5) + *((_DWORD *)a1 + 5) * (a2[10] + v11);
    }
    *(_DWORD *)&v89[12] = v74;
  }
  *(void *)((char *)&v104 + 4) = *((void *)a2 + 1);
  *(_DWORD *)&v89[16] = 0;
  *(_OWORD *)a3 = *(_OWORD *)v87;
  *(void *)(a3 + 16) = v88;
  v87[0] = 0;
  v87[1] = 0;
  uint64_t v88 = 0;
  *(_OWORD *)(a3 + ++*(_DWORD *)(result + 24) = *(_OWORD *)v89;
  *(void *)(a3 + 38) = *(void *)&v89[14];
  *(_OWORD *)(a3 + 48) = *(_OWORD *)v90;
  uint64_t v75 = v93;
  *(void *)(a3 + 64) = v91;
  v90[0] = 0;
  v90[1] = 0;
  *(_OWORD *)(a3 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v92;
  *(void *)(a3 + 88) = v75;
  uint64_t v91 = 0;
  long long v92 = 0uLL;
  uint64_t v93 = 0;
  long long v76 = *(_OWORD *)__p;
  uint64_t v77 = v97;
  *(void *)(a3 + 11std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v95;
  *(_OWORD *)(a3 + 96) = v76;
  __p[0] = 0;
  __p[1] = 0;
  *(_OWORD *)(a3 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v96;
  *(void *)(a3 + 136) = v77;
  uint64_t v95 = 0;
  long long v96 = 0uLL;
  uint64_t v97 = 0;
  long long v78 = v98;
  *(void *)(a3 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v99;
  *(_OWORD *)(a3 + 144) = v78;
  long long v98 = 0uLL;
  LODWORD(v75) = v100;
  *(_WORD *)(a3 + 17std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v101;
  *(_DWORD *)(a3 + 168) = v75;
  long long v79 = v102;
  *(void *)(a3 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v103;
  *(_OWORD *)(a3 + 176) = v79;
  uint64_t v99 = 0;
  long long v102 = 0uLL;
  uint64_t v103 = 0;
  long long v80 = v104;
  *(_DWORD *)(a3 + 216) = v105;
  *(_OWORD *)(a3 + 20std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v80;
  *(void *)&v85[0] = &v96;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v85);
  if (SHIBYTE(v95) < 0) {
    operator delete(__p[0]);
  }
  *(void *)&v85[0] = &v92;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v85);
  if (SHIBYTE(v91) < 0) {
    operator delete(v90[0]);
  }
  if (SHIBYTE(v88) < 0) {
    operator delete(v87[0]);
  }
}

void sub_1B1C8F970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
}

uint64_t quasar::ProcessHypotheses<0ul,-1l,-1l>(quasar::DecoderPassData const&,std::shared_ptr<quasar::DecoderChainOutput> const&,std::vector<quasar::CalculateJoinedNBest<0ul>::HypothesisVector,std::allocator<quasar::CalculateJoinedNBest<0ul>::HypothesisVector>> const&,std::vector<std::vector<quasar::Token>> *,std::vector<double> *,kaldi::LatticeScoreCache *)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  _OWORD v21[17] = *MEMORY[0x1E4F143B8];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (a2)
  {
    uint64_t v5 = *v4;
    uint64_t v6 = *(void *)(v5 + 8 * a2 - 8);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = *v4;
  }
  uint64_t v7 = *(void *)(v5 + 8 * a2);
  if (v6 != v7)
  {
    uint64_t v8 = (int *)(**(void **)a1 + 16 * v6 + 12);
    uint64_t v9 = 16 * v7 - 16 * v6;
    do
    {
      uint64_t v10 = *(void *)(a1 + 16);
      if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(v10 + 96), *v8)
        && kaldi::TransitionModel::IsFinal(*(kaldi::TransitionModel **)(v10 + 80), *(v8 - 1)))
      {
        (*(void (**)(std::string *__return_ptr))(**(void **)(*(void *)(a1 + 16) + 168) + 88))(&__p);
        kaldi::quasar::Lexicon::BasifyPhone(&__p);
        uint64_t v11 = (char *)v18 + *(void *)(v18[0] - 24);
        if ((v11[32] & 5) == 0)
        {
          (*(void (**)(void *__return_ptr))(**((void **)v11 + 5) + 32))(v21);
          if (v21[16] >= 1) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
          }
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v8 += 4;
      v9 -= 16;
    }
    while (v9);
  }
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E4FBA408];
  uint64_t v14 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v18[0] = v14;
  v18[1] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v20);
}

void sub_1B1C8FCD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t std::vector<std::vector<kaldi::WordHypLattice::Arc *>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::WordHypLattice::Arc *>>,std::reverse_iterator<std::vector<kaldi::WordHypLattice::Arc *>*>,std::reverse_iterator<std::vector<kaldi::WordHypLattice::Arc *>*>,std::reverse_iterator<std::vector<kaldi::WordHypLattice::Arc *>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::WordHypLattice::Arc *>>,std::reverse_iterator<std::vector<kaldi::WordHypLattice::Arc *>*>,std::reverse_iterator<std::vector<kaldi::WordHypLattice::Arc *>*>,std::reverse_iterator<std::vector<kaldi::WordHypLattice::Arc *>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  float32x2_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::WordHypLattice::Arc *>>,std::reverse_iterator<std::vector<kaldi::WordHypLattice::Arc *>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::WordHypLattice::Arc *>>,std::reverse_iterator<std::vector<kaldi::WordHypLattice::Arc *>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

std::string *std::allocate_shared[abi:ne180100]<quasar::Token,std::allocator<quasar::Token>,std::string &,float &,float &,float &,double,BOOL,BOOL,std::string &,std::string,void>@<X0>(uint64_t a1@<X1>, float *a2@<X2>, float *a3@<X3>, float *a4@<X4>, double *a5@<X5>, unsigned __int8 *a6@<X6>, unsigned __int8 *a7@<X7>, void *a8@<X8>, long long *a9, long long *a10)
{
  long long v17 = (std::string *)operator new(0xF8uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::Token>::__shared_ptr_emplace[abi:ne180100]<std::string &,float &,float &,float &,double,BOOL,BOOL,std::string &,std::string,std::allocator<quasar::Token>,0>(v17, a1, a2, a3, a4, a5, a6, a7, a9, a10);
  *a8 = v17 + 1;
  a8[1] = v17;
  return result;
}

void sub_1B1C8FF08(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::Token>::__shared_ptr_emplace[abi:ne180100]<std::string &,float &,float &,float &,double,BOOL,BOOL,std::string &,std::string,std::allocator<quasar::Token>,0>(std::string *a1, uint64_t a2, float *a3, float *a4, float *a5, double *a6, unsigned __int8 *a7, unsigned __int8 *a8, long long *a9, long long *a10)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A622B0;
  std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string &,float &,float &,float &,double,BOOL,BOOL,std::string &,std::string>((uint64_t)&v12, a1 + 1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return a1;
}

void sub_1B1C8FF9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::Token>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A622B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::Token>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A622B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::Token>::__on_zero_shared(uint64_t a1)
{
}

void std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string &,float &,float &,float &,double,BOOL,BOOL,std::string &,std::string>(uint64_t a1, std::string *a2, uint64_t a3, float *a4, float *a5, float *a6, double *a7, unsigned __int8 *a8, unsigned __int8 *a9, long long *a10, long long *a11)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v27 = *(std::string *)a3;
  }
  float v17 = *a4;
  float v18 = *a5;
  float v19 = *a6;
  double v20 = *a7;
  int v21 = *a8;
  int v22 = *a9;
  memset(v26, 0, sizeof(v26));
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  float v23 = v20;
  quasar::Token::Token(a2, (long long *)&v27, v17, v18, v19, v21 != 0, v22 != 0, a10, v23, a11, v26, 0, (long long *)__p, 0, 0);
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v26;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
}

void sub_1B1C90168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::string __p = &a21;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<quasar::OnlineLatticeBiglmFasterDecoder,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder>,std::string const&,void>(uint64_t a1, long long *a2)
{
  uint64_t v3 = operator new(0xB58uLL);
  std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmFasterDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder>,0>(v3, a2);
}

void sub_1B1C901F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmFasterDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61E18;
  quasar::OnlineLatticeBiglmFasterDecoder::OnlineLatticeBiglmFasterDecoder((uint64_t)(a1 + 3), a2);
}

void sub_1B1C90250(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmFasterDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61E18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmFasterDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61E18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmFasterDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void quasar::OnlineLatticeBiglmFasterDecoder::OnlineLatticeBiglmFasterDecoder(uint64_t a1, long long *a2)
{
  uint64_t v3 = (void *)quasar::Decoder::Decoder(a1, a2);
  void *v3 = &unk_1F0A58238;
  kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig::OnlineLatticeBiglmFasterDecoderConfig((kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig *)(v3 + 57));
  *(void *)(a1 + 83std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 63std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 68std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 71std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 76std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 79std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 88std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 91std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_DWORD *)(a1 + 928) = 1065353216;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 95std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(void *)(a1 + 984) = 0;
  *(_DWORD *)(a1 + 99std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 1065353216;
  *(void *)(a1 + 100std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 1064) = 0;
  *(void *)(a1 + 1056) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 103std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(void *)(a1 + 1048) = a1 + 1056;
  *(void *)(a1 + 1136) = 0;
  *(_OWORD *)(a1 + 112std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 107std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  _ZNSt3__115allocate_sharedB8ne180100IN3fst11SymbolTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
}

void sub_1B1C90768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, kaldi::SilencePhoneSet *a10, kaldi::quasar::DynamicClassTagDict *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v25 = v18;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v25);
  if (*(char *)(v17 + 2103) < 0) {
    operator delete(*(void **)(v17 + 2080));
  }
  std::deque<int>::~deque[abi:ne180100](v21);
  quasar::UttDetectConfig::~UttDetectConfig(v20);
  quasar::EndPointDecoderConfig::~EndPointDecoderConfig(v19);
  std::unique_ptr<std::map<wchar_t,wchar_t>>::reset[abi:ne180100]((uint64_t *)(v17 + 1456), 0);
  if (*(char *)(v17 + 1455) < 0) {
    operator delete(*(void **)(v17 + 1432));
  }
  std::string v27 = *(std::__shared_weak_count **)(v17 + 1424);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (*(char *)(v17 + 1415) < 0) {
    operator delete(*(void **)(v17 + 1392));
  }
  if (*(char *)(v17 + 1391) < 0) {
    operator delete(*v24);
  }
  long long v28 = *(std::__shared_weak_count **)(v17 + 1352);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (*(char *)(v17 + 1343) < 0) {
    operator delete(*(void **)(v17 + 1320));
  }
  if (*(char *)(v17 + 1319) < 0) {
    operator delete(*(void **)(v17 + 1296));
  }
  kaldi::SilencePhoneSet::~SilencePhoneSet(a10);
  if (*(char *)(v17 + 1207) < 0) {
    operator delete(*(void **)(v17 + 1184));
  }
  if (*(char *)(v17 + 1183) < 0) {
    operator delete(*v23);
  }
  long long v29 = *(std::__shared_weak_count **)(v17 + 1152);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (*(char *)(v17 + 1143) < 0) {
    operator delete(*(void **)(v17 + 1120));
  }
  uint64_t v30 = (void **)(v17 + 1072);
  uint64_t v31 = *(void **)(v17 + 1096);
  if (v31)
  {
    *(void *)(v17 + 1104) = v31;
    operator delete(v31);
  }
  uint64_t v32 = *v30;
  if (*v30)
  {
    *(void *)(v17 + 108std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v32;
    operator delete(v32);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v17 + 1048, *(void **)(v17 + 1056));
  uint64_t v33 = *(std::__shared_weak_count **)(v17 + 1040);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  long long v34 = *(std::__shared_weak_count **)(v17 + 1024);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  kaldi::quasar::DynamicClassTagDict::~DynamicClassTagDict(a11);
  if (*(char *)(v17 + 895) < 0) {
    operator delete(*(void **)(v17 + 872));
  }
  if (*(char *)(v17 + 871) < 0) {
    operator delete(*(void **)(v17 + 848));
  }
  if (*(char *)(v17 + 839) < 0) {
    operator delete(*(void **)(v17 + 816));
  }
  if (*(char *)(v17 + 807) < 0) {
    operator delete(*(void **)(v17 + 784));
  }
  if (*(char *)(v17 + 783) < 0) {
    operator delete(*(void **)(v17 + 760));
  }
  if (*(char *)(v17 + 759) < 0) {
    operator delete(*(void **)(v17 + 736));
  }
  if (*(char *)(v17 + 735) < 0) {
    operator delete(*(void **)(v17 + 712));
  }
  if (*(char *)(v17 + 711) < 0) {
    operator delete(*(void **)(v17 + 688));
  }
  if (*(char *)(v17 + 687) < 0) {
    operator delete(*(void **)(v17 + 664));
  }
  if (*(char *)(v17 + 663) < 0) {
    operator delete(*(void **)(v17 + 640));
  }
  if (*(char *)(v17 + 639) < 0) {
    operator delete(*v22);
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)v17);
  _Unwind_Resume(a1);
}

void quasar::UttDetectConfig::~UttDetectConfig(quasar::UttDetectConfig *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (void **)((char *)this + 264);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 247) < 0) {
    operator delete(*((void **)this + 28));
  }
  if (*((char *)this + 223) < 0) {
    operator delete(*((void **)this + 25));
  }
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }
}

void quasar::EndPointDecoderConfig::~EndPointDecoderConfig(quasar::EndPointDecoderConfig *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (void **)((char *)this + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

void kaldi::quasar::DynamicClassTagDict::~DynamicClassTagDict(kaldi::quasar::DynamicClassTagDict *this)
{
  uint64_t v2 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v2) {
    MEMORY[0x1B3EA8630](v2, 0x1000C8052888210);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 64);
  uint64_t v3 = (void *)*((void *)this + 5);
  if (v3)
  {
    *((void *)this + 6) = v3;
    operator delete(v3);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this);
}

void std::allocate_shared[abi:ne180100]<quasar::OnlineLatticeBiglmLmeFasterDecoder,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder>,std::string const&,void>(uint64_t a1, long long *a2)
{
  uint64_t v3 = operator new(0xD20uLL);
  std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmLmeFasterDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder>,0>(v3, a2);
}

void sub_1B1C90B90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmLmeFasterDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62010;
  quasar::OnlineLatticeBiglmLmeFasterDecoder::OnlineLatticeBiglmLmeFasterDecoder((uint64_t)(a1 + 3), a2);
}

void sub_1B1C90BEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmLmeFasterDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62010;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmLmeFasterDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62010;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmLmeFasterDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void quasar::OnlineLatticeBiglmLmeFasterDecoder::OnlineLatticeBiglmLmeFasterDecoder(uint64_t a1, long long *a2)
{
}

void sub_1B1C90DB0(_Unwind_Exception *a1)
{
  if (v1[2919] < 0) {
    operator delete(*v2);
  }
  quasar::OnlineLatticeBiglmFasterDecoder::~OnlineLatticeBiglmFasterDecoder((quasar::OnlineLatticeBiglmFasterDecoder *)v1);
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeBiglmFasterDecoder::~OnlineLatticeBiglmFasterDecoder(quasar::OnlineLatticeBiglmFasterDecoder *this)
{
  *(void *)this = &unk_1F0A58238;
  std::mutex::~mutex((std::mutex *)((char *)this + 2808));
  uint64_t v2 = (void *)*((void *)this + 349);
  *((void *)this + 349) = 0;
  if (v2) {
    std::default_delete<quasar::NFHatTransformer>::operator()[abi:ne180100]((uint64_t)this + 2792, v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 348);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 346);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (void *)*((void *)this + 340);
  if (v5)
  {
    *((void *)this + 341) = v5;
    operator delete(v5);
  }
  long long v28 = (void **)((char *)this + 2696);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v28);
  uint64_t v6 = (void *)*((void *)this + 332);
  if (v6)
  {
    *((void *)this + 333) = v6;
    operator delete(v6);
  }
  long long v28 = (void **)((char *)this + 2632);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v28);
  uint64_t v7 = (void *)*((void *)this + 323);
  if (v7)
  {
    *((void *)this + 3++*(_DWORD *)(result + 24) = v7;
    operator delete(v7);
  }
  long long v8 = (void *)*((void *)this + 318);
  if (v8)
  {
    *((void *)this + 319) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 315);
  if (v9)
  {
    *((void *)this + 316) = v9;
    operator delete(v9);
  }
  long long v28 = (void **)((char *)this + 2472);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v28);
  uint64_t v10 = *((void *)this + 307);
  *((void *)this + 307) = 0;
  if (v10) {
    std::default_delete<quasar::StreamingConfidenceRunner>::operator()[abi:ne180100]((uint64_t)this + 2456, v10);
  }
  uint64_t v11 = *((void *)this + 306);
  *((void *)this + 306) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
  }
  uint64_t v12 = *((void *)this + 305);
  *((void *)this + 305) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
  }
  quasar::OnlineLatticeBiglmFasterDecoder::DecoderCreationDependencies::~DecoderCreationDependencies((quasar::OnlineLatticeBiglmFasterDecoder *)((char *)this + 2312));
  long long v28 = (void **)((char *)this + 2272);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v28);
  long long v13 = (void *)*((void *)this + 281);
  if (v13)
  {
    *((void *)this + 28std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v13;
    operator delete(v13);
  }
  long long v28 = (void **)((char *)this + 2224);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v28);
  if (*((char *)this + 2215) < 0) {
    operator delete(*((void **)this + 274));
  }
  long long v14 = (std::__shared_weak_count *)*((void *)this + 273);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 2104);
  if (*((char *)this + 2103) < 0) {
    operator delete(*((void **)this + 260));
  }
  std::deque<int>::~deque[abi:ne180100]((void *)this + 251);
  long long v15 = (std::__shared_weak_count *)*((void *)this + 239);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  long long v28 = (void **)((char *)this + 1880);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v28);
  if (*((char *)this + 1863) < 0) {
    operator delete(*((void **)this + 230));
  }
  if (*((char *)this + 1839) < 0) {
    operator delete(*((void **)this + 227));
  }
  if (*((char *)this + 1815) < 0) {
    operator delete(*((void **)this + 224));
  }
  unint64_t v16 = (std::__shared_weak_count *)*((void *)this + 201);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  long long v28 = (void **)((char *)this + 1576);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v28);
  if (*((char *)this + 1559) < 0) {
    operator delete(*((void **)this + 192));
  }
  if (*((char *)this + 1535) < 0) {
    operator delete(*((void **)this + 189));
  }
  if (*((char *)this + 1511) < 0) {
    operator delete(*((void **)this + 186));
  }
  std::unique_ptr<std::map<wchar_t,wchar_t>>::reset[abi:ne180100]((uint64_t *)this + 182, 0);
  if (*((char *)this + 1455) < 0) {
    operator delete(*((void **)this + 179));
  }
  uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 178);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*((char *)this + 1415) < 0) {
    operator delete(*((void **)this + 174));
  }
  if (*((char *)this + 1391) < 0) {
    operator delete(*((void **)this + 171));
  }
  uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 169);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (*((char *)this + 1343) < 0) {
    operator delete(*((void **)this + 165));
  }
  if (*((char *)this + 1319) < 0) {
    operator delete(*((void **)this + 162));
  }
  float v19 = (void *)*((void *)this + 157);
  if (v19)
  {
    *((void *)this + 158) = v19;
    operator delete(v19);
  }
  double v20 = (void *)*((void *)this + 154);
  if (v20) {
    operator delete(v20);
  }
  if (*((char *)this + 1207) < 0) {
    operator delete(*((void **)this + 148));
  }
  if (*((char *)this + 1183) < 0) {
    operator delete(*((void **)this + 145));
  }
  int v21 = (std::__shared_weak_count *)*((void *)this + 144);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (*((char *)this + 1143) < 0) {
    operator delete(*((void **)this + 140));
  }
  int v22 = (void *)*((void *)this + 137);
  if (v22)
  {
    *((void *)this + 138) = v22;
    operator delete(v22);
  }
  float v23 = (void *)*((void *)this + 134);
  if (v23)
  {
    *((void *)this + 135) = v23;
    operator delete(v23);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 1048, *((void **)this + 132));
  long long v24 = (std::__shared_weak_count *)*((void *)this + 130);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  uint64_t v25 = (std::__shared_weak_count *)*((void *)this + 128);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  uint64_t v26 = *((void *)this + 125);
  *((void *)this + 125) = 0;
  if (v26) {
    MEMORY[0x1B3EA8630](v26, 0x1000C8052888210);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 960);
  std::string v27 = (void *)*((void *)this + 117);
  if (v27)
  {
    *((void *)this + 118) = v27;
    operator delete(v27);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 896);
  if (*((char *)this + 895) < 0) {
    operator delete(*((void **)this + 109));
  }
  if (*((char *)this + 871) < 0) {
    operator delete(*((void **)this + 106));
  }
  if (*((char *)this + 839) < 0) {
    operator delete(*((void **)this + 102));
  }
  if (*((char *)this + 807) < 0) {
    operator delete(*((void **)this + 98));
  }
  if (*((char *)this + 783) < 0) {
    operator delete(*((void **)this + 95));
  }
  if (*((char *)this + 759) < 0) {
    operator delete(*((void **)this + 92));
  }
  if (*((char *)this + 735) < 0) {
    operator delete(*((void **)this + 89));
  }
  if (*((char *)this + 711) < 0) {
    operator delete(*((void **)this + 86));
  }
  if (*((char *)this + 687) < 0) {
    operator delete(*((void **)this + 83));
  }
  if (*((char *)this + 663) < 0) {
    operator delete(*((void **)this + 80));
  }
  if (*((char *)this + 639) < 0) {
    operator delete(*((void **)this + 77));
  }
  quasar::Decoder::~Decoder(this);
}

{
  uint64_t vars8;

  quasar::OnlineLatticeBiglmFasterDecoder::~OnlineLatticeBiglmFasterDecoder(this);
  JUMPOUT(0x1B3EA8670);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN6quasar34OnlineLatticeBiglmLmeFasterDecoder23LmeCreationDependenciesENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x80uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN6quasar34OnlineLatticeBiglmLmeFasterDecoder23LmeCreationDependenciesENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C91298(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN6quasar34OnlineLatticeBiglmLmeFasterDecoder23LmeCreationDependenciesENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61FD8;
  quasar::OnlineLatticeBiglmLmeFasterDecoder::LmeCreationDependencies::LmeCreationDependencies((quasar::OnlineLatticeBiglmLmeFasterDecoder::LmeCreationDependencies *)(a1 + 3));
  return a1;
}

void sub_1B1C912F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmLmeFasterDecoder::LmeCreationDependencies>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61FD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmLmeFasterDecoder::LmeCreationDependencies>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61FD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmLmeFasterDecoder::LmeCreationDependencies>::__on_zero_shared(uint64_t a1)
{
  std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::LmeCreationDependencies>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

quasar::OnlineLatticeBiglmLmeFasterDecoder::LmeCreationDependencies *quasar::OnlineLatticeBiglmLmeFasterDecoder::LmeCreationDependencies::LmeCreationDependencies(quasar::OnlineLatticeBiglmLmeFasterDecoder::LmeCreationDependencies *this)
{
  *((void *)this + 1std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  uint64_t v2 = operator new(0x30uLL);
  v2[1] = 0;
  _OWORD v2[2] = 0;
  void *v2 = &unk_1F0A60090;
  v2[4] = 0;
  void v2[5] = 0;
  v2[3] = 0;
  *((void *)this + 11) = v2 + 3;
  *((void *)this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v2;
  return this;
}

void sub_1B1C91420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 64);
  std::vector<quasar::LmeInfo>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v12 = *(std::__shared_weak_count **)(v10 + 56);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  long long v13 = *(void **)(v10 + 24);
  if (v13)
  {
    *(void *)(v10 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v13;
    operator delete(v13);
  }
  a10 = (void **)v10;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::LmeCreationDependencies>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 96);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v6 = (void **)(a2 + 64);
  std::vector<quasar::LmeInfo>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 56);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *(void **)(a2 + 24);
  if (v5)
  {
    *(void *)(a2 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void **)a2;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void std::default_delete<quasar::NFHatTransformer>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (void *)a2[4];
    if (v3)
    {
      a2[5] = v3;
      operator delete(v3);
    }
    uint64_t v4 = (void *)a2[1];
    if (v4)
    {
      a2[2] = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1B3EA8670);
  }
}

void std::default_delete<quasar::StreamingConfidenceRunner>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 47) < 0) {
      operator delete(*(void **)(a2 + 24));
    }
    uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    JUMPOUT(0x1B3EA8670);
  }
}

void quasar::OnlineLatticeBiglmFasterDecoder::DecoderCreationDependencies::~DecoderCreationDependencies(quasar::OnlineLatticeBiglmFasterDecoder::DecoderCreationDependencies *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  long long v8 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineLatticeRescalingDecoder,std::allocator<quasar::OnlineLatticeRescalingDecoder>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x1F0uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::OnlineLatticeRescalingDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLatticeRescalingDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1C91670(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineLatticeRescalingDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLatticeRescalingDecoder>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61BB0;
  quasar::OnlineLatticeRescalingDecoder::OnlineLatticeRescalingDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B1C916CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeRescalingDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61BB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeRescalingDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61BB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLatticeRescalingDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineLatticeWordAlignmentDecoder,std::allocator<quasar::OnlineLatticeWordAlignmentDecoder>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x240uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::OnlineLatticeWordAlignmentDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLatticeWordAlignmentDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C917C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineLatticeWordAlignmentDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLatticeWordAlignmentDecoder>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61F68;
  quasar::OnlineLatticeWordAlignmentDecoder::OnlineLatticeWordAlignmentDecoder(a1 + 3);
  return a1;
}

void sub_1B1C91820(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeWordAlignmentDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61F68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeWordAlignmentDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61F68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLatticeWordAlignmentDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

uint64_t std::allocate_shared[abi:ne180100]<quasar::OnlineLmRescoringDecoder,std::allocator<quasar::OnlineLmRescoringDecoder>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x2A0uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::OnlineLmRescoringDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLmRescoringDecoder>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1B1C91918(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLmRescoringDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLmRescoringDecoder>,0>(uint64_t a1, long long *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F0A61520;
  quasar::Decoder::Decoder(a1 + 24, a2);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = &unk_1F0A56C38;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 52std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 55std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 59std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 6++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 64std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(void *)(a1 + 656) = 0;
  return a1;
}

void sub_1B1C919B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLmRescoringDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61520;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLmRescoringDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61520;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLmRescoringDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineLatticeRealignmentDecoder,std::allocator<quasar::OnlineLatticeRealignmentDecoder>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x300uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::OnlineLatticeRealignmentDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLatticeRealignmentDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1C91AA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineLatticeRealignmentDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLatticeRealignmentDecoder>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61E50;
  quasar::OnlineLatticeRealignmentDecoder::OnlineLatticeRealignmentDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B1C91B04(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeRealignmentDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61E50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeRealignmentDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61E50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLatticeRealignmentDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

uint64_t quasar::OnlineLatticeRealignmentDecoder::OnlineLatticeRealignmentDecoder(uint64_t a1, long long *a2)
{
  *(void *)quasar::Decoder::Decoder(a1, astd::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = &unk_1F0A58338;
  uint64_t v3 = (char *)operator new(0xA8uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)uint64_t v3 = &unk_1F0A60678;
  *((void *)v3 + 19) = 0;
  *((void *)v3 + 2std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *((void *)v3 + 18) = 0;
  *(_OWORD *)(v3 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v3 + ++*(_DWORD *)(result + 24) = 0u;
  *((_DWORD *)v3 + 34) = 0;
  *(void *)(a1 + 448) = v3 + 24;
  *(void *)(a1 + 456) = v3;
  *(void *)(a1 + 464) = 0;
  *(unsigned char *)(a1 + 47std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 1;
  *(void *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 51std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 48std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 59std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 6++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 64std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 67std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 71std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  return a1;
}

void sub_1B1C91C88(_Unwind_Exception *a1)
{
  quasar::Decoder::~Decoder(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::ErrorBlamingDecoder,std::allocator<quasar::ErrorBlamingDecoder>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x4C8uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::ErrorBlamingDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::ErrorBlamingDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1C91CE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::ErrorBlamingDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::ErrorBlamingDecoder>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A608E0;
  quasar::ErrorBlamingDecoder::ErrorBlamingDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B1C91D40(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ErrorBlamingDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A608E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ErrorBlamingDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A608E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::ErrorBlamingDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

uint64_t quasar::ErrorBlamingDecoder::ErrorBlamingDecoder(uint64_t a1, long long *a2)
{
  uint64_t v3 = (void *)quasar::Decoder::Decoder(a1, a2);
  void *v3 = &unk_1F0A545C8;
  std::string::basic_string[abi:ne180100]<0>(v3 + 56, "error-blaming-report");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 472), "failure-reason");
  *(void *)(a1 + 88std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 83std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 80std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 75std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 72std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 67std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 6++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 64std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 59std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 56std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 51std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  uint64_t v4 = (char *)operator new(0xA8uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)uint64_t v4 = &unk_1F0A60678;
  *((void *)v4 + 18) = 0;
  *(_OWORD *)(v4 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(v4 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *((_DWORD *)v4 + 34) = 0;
  *(_OWORD *)(v4 + ++*(_DWORD *)(result + 24) = 0u;
  *(void *)(a1 + 888) = v4 + 24;
  *(void *)(a1 + 896) = v4;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 103std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 100std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 95std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 92std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_DWORD *)(a1 + 108std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 1065353216;
  *(void *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(void *)(a1 + 114std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0x3F8000003F800000;
  *(_WORD *)(a1 + 1148) = 256;
  *(void *)(a1 + 115std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(unsigned char *)(a1 + 116std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 1;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  return a1;
}

void sub_1B1C91F54(_Unwind_Exception *a1)
{
  if (v1[495] < 0) {
    operator delete(*v3);
  }
  if (v1[471] < 0) {
    operator delete(*v2);
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineLatticeConfidenceDecoder,std::allocator<quasar::OnlineLatticeConfidenceDecoder>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x2F0uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::OnlineLatticeConfidenceDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLatticeConfidenceDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1C91FE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineLatticeConfidenceDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLatticeConfidenceDecoder>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61CC8;
  quasar::OnlineLatticeConfidenceDecoder::OnlineLatticeConfidenceDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B1C9203C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeConfidenceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61CC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeConfidenceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61CC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLatticeConfidenceDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

uint64_t quasar::OnlineLatticeConfidenceDecoder::OnlineLatticeConfidenceDecoder(uint64_t a1, long long *a2)
{
  *(void *)quasar::Decoder::Decoder(a1, astd::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = &unk_1F0A57F88;
  uint64_t v3 = (char *)operator new(0xA8uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)uint64_t v3 = &unk_1F0A60678;
  *((void *)v3 + 19) = 0;
  *((void *)v3 + 2std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *((void *)v3 + 18) = 0;
  *(_OWORD *)(v3 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v3 + ++*(_DWORD *)(result + 24) = 0u;
  *((_DWORD *)v3 + 34) = 0;
  *(void *)(a1 + 448) = v3 + 24;
  *(void *)(a1 + 456) = v3;
  *(void *)(a1 + 464) = 0;
  *(unsigned char *)(a1 + 47std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 1;
  *(void *)(a1 + 48std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 496) = xmmword_1B2568EF0;
  *(void *)(a1 + 51std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0x3F800000BF800000;
  *(_DWORD *)(a1 + 52std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = -1;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 528), "NULL");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 552), "NULL");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 576), "NULL");
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 63std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 60std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_WORD *)(a1 + 648) = 1;
  *(_DWORD *)(a1 + 65std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 16843009;
  *(_DWORD *)(a1 + 653) = 16843009;
  *(unsigned char *)(a1 + 657) = 0;
  *(_DWORD *)(a1 + 66std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 1092616192;
  *(void *)(a1 + 71std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0x4100000000000000;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 68std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(void *)(a1 + 72std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0xA0000000ALL;
  return a1;
}

void sub_1B1C9224C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 575) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 551) < 0) {
    operator delete(*v2);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 488);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 456);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::LatticeFasterDecoder,std::allocator<quasar::LatticeFasterDecoder>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x2A0uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::LatticeFasterDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::LatticeFasterDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1C922F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::LatticeFasterDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::LatticeFasterDecoder>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60AD8;
  quasar::LatticeFasterDecoder::LatticeFasterDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B1C92354(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LatticeFasterDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60AD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LatticeFasterDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60AD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::LatticeFasterDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

uint64_t quasar::LatticeFasterDecoder::LatticeFasterDecoder(uint64_t a1, long long *a2)
{
  uint64_t v3 = (void *)quasar::Decoder::Decoder(a1, a2);
  void *v3 = &unk_1F0A54F90;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(void *)(a1 + 48std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  quasar::OnlinePhoneDecoderConfig::OnlinePhoneDecoderConfig((quasar::OnlinePhoneDecoderConfig *)(v3 + 61));
  *(void *)(a1 + 60std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 59std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 584) = a1 + 592;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 6++*(_DWORD *)(result + 24) = 0u;
  *(void *)(a1 + 64std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  return a1;
}

void sub_1B1C92484(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 480);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*(char *)(v1 + 471) < 0) {
    operator delete(*v2);
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)v1);
  _Unwind_Resume(a1);
}

double quasar::OnlinePhoneDecoderConfig::OnlinePhoneDecoderConfig(quasar::OnlinePhoneDecoderConfig *this)
{
  *(_DWORD *)this = 1098907648;
  *(void *)((char *)this + 4) = 0xC87FFFFFFFLL;
  *(void *)((char *)this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0x4120000000000000;
  *((_DWORD *)this + 5) = 25;
  *((unsigned char *)this + ++*(_DWORD *)(result + 24) = 1;
  *(_OWORD *)((char *)this + 28) = xmmword_1B255FD30;
  *(void *)((char *)this + 44) = 0x2FAF0803A800000;
  *((_WORD *)this + 26) = 257;
  *((unsigned char *)this + 54) = 0;
  *(_OWORD *)((char *)this + 56) = xmmword_1B2568F00;
  *((_DWORD *)this + 18) = 3;
  *(void *)((char *)this + 76) = 0x3D4CCCCD3C23D70ALL;
  *(void *)&double result = 50000000;
  *(void *)((char *)this + 84) = 50000000;
  return result;
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineKeywordSpottingDecoder,std::allocator<quasar::OnlineKeywordSpottingDecoder>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x2E8uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlineKeywordSpottingDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineKeywordSpottingDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C92580(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineKeywordSpottingDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineKeywordSpottingDecoder>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61AD0;
  quasar::OnlineKeywordSpottingDecoder::OnlineKeywordSpottingDecoder(a1 + 3);
  return a1;
}

void sub_1B1C925DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineKeywordSpottingDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61AD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineKeywordSpottingDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61AD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineKeywordSpottingDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineSeevaDecoder,std::allocator<quasar::OnlineSeevaDecoder>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x338uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlineSeevaDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineSeevaDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C926D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineSeevaDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineSeevaDecoder>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60608;
  quasar::OnlineSeevaDecoder::OnlineSeevaDecoder(a1 + 3);
  return a1;
}

void sub_1B1C92730(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineSeevaDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60608;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineSeevaDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60608;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineSeevaDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineSeevaStepDecoder,std::allocator<quasar::OnlineSeevaStepDecoder>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x428uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlineSeevaStepDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineSeevaStepDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C92828(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineSeevaStepDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineSeevaStepDecoder>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61018;
  quasar::OnlineSeevaStepDecoder::OnlineSeevaStepDecoder(a1 + 3);
  return a1;
}

void sub_1B1C92884(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineSeevaStepDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineSeevaStepDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61018;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineSeevaStepDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineSeevaStepBigLmDecoder,std::allocator<quasar::OnlineSeevaStepBigLmDecoder>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x768uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlineSeevaStepBigLmDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineSeevaStepBigLmDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C9297C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineSeevaStepBigLmDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineSeevaStepBigLmDecoder>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A619F0;
  quasar::OnlineSeevaStepBigLmDecoder::OnlineSeevaStepBigLmDecoder(a1 + 3);
  return a1;
}

void sub_1B1C929D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineSeevaStepBigLmDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A619F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineSeevaStepBigLmDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A619F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineSeevaStepBigLmDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void *std::allocate_shared[abi:ne180100]<quasar::SeevaGreedyDecoder,std::allocator<quasar::SeevaGreedyDecoder>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x240uLL);
  double result = std::__shared_ptr_emplace<quasar::SeevaGreedyDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SeevaGreedyDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1C92AD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::SeevaGreedyDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SeevaGreedyDecoder>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60720;
  quasar::SeevaGreedyDecoder::SeevaGreedyDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B1C92B2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SeevaGreedyDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60720;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SeevaGreedyDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60720;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::SeevaGreedyDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void *std::allocate_shared[abi:ne180100]<quasar::SeevaBatchDecoder,std::allocator<quasar::SeevaBatchDecoder>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x408uLL);
  double result = std::__shared_ptr_emplace<quasar::SeevaBatchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SeevaBatchDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C92C24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::SeevaBatchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SeevaBatchDecoder>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A604B8;
  quasar::SeevaBatchDecoder::SeevaBatchDecoder(a1 + 3);
  return a1;
}

void sub_1B1C92C80(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SeevaBatchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A604B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SeevaBatchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A604B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::SeevaBatchDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineLASBeamSearchDecoder,std::allocator<quasar::OnlineLASBeamSearchDecoder>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x2A8uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlineLASBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLASBeamSearchDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C92D78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineLASBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLASBeamSearchDecoder>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61948;
  quasar::OnlineLASBeamSearchDecoder::OnlineLASBeamSearchDecoder(a1 + 3);
  return a1;
}

void sub_1B1C92DD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLASBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61948;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLASBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61948;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLASBeamSearchDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineLASSpeculativeBeamSearchDecoder,std::allocator<quasar::OnlineLASSpeculativeBeamSearchDecoder>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x2C8uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlineLASSpeculativeBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLASSpeculativeBeamSearchDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C92ECC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineLASSpeculativeBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLASSpeculativeBeamSearchDecoder>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62160;
  quasar::OnlineLASSpeculativeBeamSearchDecoder::OnlineLASSpeculativeBeamSearchDecoder(a1 + 3);
  return a1;
}

void sub_1B1C92F28(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLASSpeculativeBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLASSpeculativeBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62160;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLASSpeculativeBeamSearchDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineLASLmRescoringBeamSearchDecoder,std::allocator<quasar::OnlineLASLmRescoringBeamSearchDecoder>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x3F0uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlineLASLmRescoringBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLASLmRescoringBeamSearchDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C93020(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineLASLmRescoringBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLASLmRescoringBeamSearchDecoder>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62128;
  quasar::OnlineLASLmRescoringBeamSearchDecoder::OnlineLASLmRescoringBeamSearchDecoder(a1 + 3);
  return a1;
}

void sub_1B1C9307C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLASLmRescoringBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62128;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLASLmRescoringBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62128;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLASLmRescoringBeamSearchDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder,std::allocator<quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x418uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C93174(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62240;
  quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder::OnlineLASLmRescoringSpeculativeBeamSearchDecoder(a1 + 3);
  return a1;
}

void sub_1B1C931D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62240;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineTransducerBeamSearchDecoder,std::allocator<quasar::OnlineTransducerBeamSearchDecoder>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x318uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlineTransducerBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineTransducerBeamSearchDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C932C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineTransducerBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineTransducerBeamSearchDecoder>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61FA0;
  quasar::OnlineTransducerBeamSearchDecoder::OnlineTransducerBeamSearchDecoder(a1 + 3);
  return a1;
}

void sub_1B1C93324(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineTransducerBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61FA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineTransducerBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61FA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineTransducerBeamSearchDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineTransducerGraphSearchDecoder,std::allocator<quasar::OnlineTransducerGraphSearchDecoder>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x8F0uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlineTransducerGraphSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineTransducerGraphSearchDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C9341C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineTransducerGraphSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineTransducerGraphSearchDecoder>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62080;
  quasar::OnlineTransducerGraphSearchDecoder::OnlineTransducerGraphSearchDecoder(a1 + 3);
  return a1;
}

void sub_1B1C93478(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineTransducerGraphSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineTransducerGraphSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62080;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineTransducerGraphSearchDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void std::allocate_shared[abi:ne180100]<quasar::SystemCombinationDecoder,std::allocator<quasar::SystemCombinationDecoder>,std::string const&,void>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x2E8uLL);
  std::__shared_ptr_emplace<quasar::SystemCombinationDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SystemCombinationDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  std::shared_ptr<quasar::SystemCombinationDecoder>::__enable_weak_this[abi:ne180100]<quasar::SystemCombinationDecoder,quasar::SystemCombinationDecoder,void>((uint64_t)a1, v2 + 59, (uint64_t)(v2 + 3));
}

void sub_1B1C93588(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::SystemCombinationDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SystemCombinationDecoder>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61590;
  quasar::SystemCombinationDecoder::SystemCombinationDecoder(a1 + 3);
  return a1;
}

void sub_1B1C935E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SystemCombinationDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61590;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SystemCombinationDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61590;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::SystemCombinationDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void std::shared_ptr<quasar::SystemCombinationDecoder>::__enable_weak_this[abi:ne180100]<quasar::SystemCombinationDecoder,quasar::SystemCombinationDecoder,void>(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
}

void *std::allocate_shared[abi:ne180100]<quasar::ConfusionNetworkCombinerDecoder,std::allocator<quasar::ConfusionNetworkCombinerDecoder>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x890uLL);
  double result = std::__shared_ptr_emplace<quasar::ConfusionNetworkCombinerDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::ConfusionNetworkCombinerDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1C93764(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::ConfusionNetworkCombinerDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::ConfusionNetworkCombinerDecoder>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61DA8;
  quasar::ConfusionNetworkCombinerDecoder::ConfusionNetworkCombinerDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B1C937C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ConfusionNetworkCombinerDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61DA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ConfusionNetworkCombinerDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61DA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::ConfusionNetworkCombinerDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

uint64_t quasar::ConfusionNetworkCombinerDecoder::ConfusionNetworkCombinerDecoder(uint64_t a1, long long *a2)
{
  uint64_t v3 = (void *)quasar::Decoder::Decoder(a1, a2);
  void *v3 = &unk_1F0A580F8;
  quasar::ResultCombiner::ResultCombiner((quasar::ResultCombiner *)(v3 + 56));
  *(void *)(a1 + 448) = &unk_1F0A56BB0;
  *(_OWORD *)(a1 + 20++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 204std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 2056) = 0u;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(_OWORD *)(a1 + 212std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  return a1;
}

void sub_1B1C938F4(_Unwind_Exception *a1)
{
  quasar::Decoder::~Decoder(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::PhoneticMatchDecoder,std::allocator<quasar::PhoneticMatchDecoder>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x440uLL);
  double result = std::__shared_ptr_emplace<quasar::PhoneticMatchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::PhoneticMatchDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1C93950(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::PhoneticMatchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::PhoneticMatchDecoder>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60B48;
  quasar::PhoneticMatchDecoder::PhoneticMatchDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B1C939AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::PhoneticMatchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60B48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::PhoneticMatchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60B48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::PhoneticMatchDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

uint64_t quasar::PhoneticMatchDecoder::PhoneticMatchDecoder(uint64_t a1, long long *a2)
{
  uint64_t v3 = quasar::Decoder::Decoder(a1, a2);
  *(void *)uint64_t v3 = &unk_1F0A55160;
  *(void *)(v3 + 67std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(v3 + 688) = 0;
  *(void *)(v3 + 68std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(v3 + 704) = 0;
  *(void *)(v3 + 72std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(v3 + 71std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 48std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v3 + 496) = 0u;
  *(_OWORD *)(v3 + 51std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(v3 + 528) = 0u;
  *(_OWORD *)(v3 + 544) = 0u;
  *(_OWORD *)(v3 + 56std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v3 + 576) = 0u;
  *(_OWORD *)(v3 + 59std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(v3 + 608) = 0u;
  *(_OWORD *)(v3 + 6++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(v3 + 75std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(v3 + 768) = 0u;
  *(_OWORD *)(v3 + 736) = 0u;
  *(_OWORD *)(v3 + 808) = 0u;
  *(_OWORD *)(v3 + 8++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(v3 + 79std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  uint64_t v4 = (char *)operator new(0xA8uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)uint64_t v4 = &unk_1F0A60678;
  *((void *)v4 + 19) = 0;
  *((void *)v4 + 2std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *((void *)v4 + 18) = 0;
  *(_OWORD *)(v4 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *((_DWORD *)v4 + 34) = 0;
  *(_OWORD *)(v4 + ++*(_DWORD *)(result + 24) = 0u;
  *(void *)(a1 + 84std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v4 + 24;
  *(void *)(a1 + 848) = v4;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 87std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(void *)(a1 + 888) = 0x7D041700000;
  *(void *)(a1 + 896) = 0x400000003F000000;
  *(void *)(a1 + 904) = 0x60000000000000;
  *(unsigned char *)(a1 + 91std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(_OWORD *)(a1 + 92std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 95std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 100std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_DWORD *)(a1 + 1016) = 1065353216;
  *(_OWORD *)(a1 + 10++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 104std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_DWORD *)(a1 + 1056) = 1065353216;
  return a1;
}

void sub_1B1C93B98(_Unwind_Exception *a1)
{
  quasar::Decoder::~Decoder(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::FingerprintDetector,std::allocator<quasar::FingerprintDetector>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x578uLL);
  double result = std::__shared_ptr_emplace<quasar::FingerprintDetector>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::FingerprintDetector>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C93BF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::FingerprintDetector>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::FingerprintDetector>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60918;
  quasar::FingerprintDetector::FingerprintDetector(a1 + 3);
  return a1;
}

void sub_1B1C93C50(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::FingerprintDetector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::FingerprintDetector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60918;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::FingerprintDetector>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineAudioAnalyticsDecoder,std::allocator<quasar::OnlineAudioAnalyticsDecoder>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x1E0uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlineAudioAnalyticsDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineAudioAnalyticsDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1C93D48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineAudioAnalyticsDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineAudioAnalyticsDecoder>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A619B8;
  quasar::OnlineAudioAnalyticsDecoder::OnlineAudioAnalyticsDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B1C93DA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineAudioAnalyticsDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A619B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineAudioAnalyticsDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A619B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineAudioAnalyticsDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void *std::allocate_shared[abi:ne180100]<quasar::WatermarkDetector,std::allocator<quasar::WatermarkDetector>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x240uLL);
  double result = std::__shared_ptr_emplace<quasar::WatermarkDetector>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::WatermarkDetector>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C93E9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::WatermarkDetector>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::WatermarkDetector>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60560;
  quasar::WatermarkDetector::WatermarkDetector(a1 + 3);
  return a1;
}

void sub_1B1C93EF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::WatermarkDetector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60560;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WatermarkDetector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60560;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WatermarkDetector>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void *std::allocate_shared[abi:ne180100]<quasar::AudioAnalyticsDecoder,std::allocator<quasar::AudioAnalyticsDecoder>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x1E0uLL);
  double result = std::__shared_ptr_emplace<quasar::AudioAnalyticsDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::AudioAnalyticsDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1C93FF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::AudioAnalyticsDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::AudioAnalyticsDecoder>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60CD0;
  quasar::AudioAnalyticsDecoder::AudioAnalyticsDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B1C9404C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::AudioAnalyticsDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60CD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::AudioAnalyticsDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60CD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::AudioAnalyticsDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void *std::allocate_shared[abi:ne180100]<quasar::LatticeRnnMitigator,std::allocator<quasar::LatticeRnnMitigator>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x340uLL);
  double result = std::__shared_ptr_emplace<quasar::LatticeRnnMitigator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::LatticeRnnMitigator>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C94144(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::LatticeRnnMitigator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::LatticeRnnMitigator>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60950;
  quasar::LatticeRnnMitigator::LatticeRnnMitigator(a1 + 3);
  return a1;
}

void sub_1B1C941A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LatticeRnnMitigator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60950;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LatticeRnnMitigator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60950;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::LatticeRnnMitigator>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void *std::allocate_shared[abi:ne180100]<quasar::HwcnConfidence,std::allocator<quasar::HwcnConfidence>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x3F0uLL);
  double result = std::__shared_ptr_emplace<quasar::HwcnConfidence>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::HwcnConfidence>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C94298(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::HwcnConfidence>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::HwcnConfidence>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5FC68;
  quasar::HwcnConfidence::HwcnConfidence(a1 + 3);
  return a1;
}

void sub_1B1C942F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::HwcnConfidence>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FC68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::HwcnConfidence>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FC68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::HwcnConfidence>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void *std::allocate_shared[abi:ne180100]<quasar::E2EAsrConfidence,std::allocator<quasar::E2EAsrConfidence>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x250uLL);
  double result = std::__shared_ptr_emplace<quasar::E2EAsrConfidence>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::E2EAsrConfidence>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1C943EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::E2EAsrConfidence>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::E2EAsrConfidence>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60138;
  quasar::E2EAsrConfidence::E2EAsrConfidence((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B1C94448(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::E2EAsrConfidence>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60138;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::E2EAsrConfidence>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60138;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::E2EAsrConfidence>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

uint64_t quasar::E2EAsrConfidence::E2EAsrConfidence(uint64_t a1, long long *a2)
{
  uint64_t v3 = (void *)quasar::Decoder::Decoder(a1, a2);
  void *v3 = &unk_1F0A532A8;
  std::string::basic_string[abi:ne180100]<0>(v3 + 56, "");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 472), "");
  *(void *)(a1 + 496) = -1;
  *(_WORD *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 51std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_DWORD *)(a1 + 56std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 1065353216;
  return a1;
}

void sub_1B1C94588(_Unwind_Exception *a1)
{
  if (v1[471] < 0) {
    operator delete(*v2);
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::WatermarkDetector2,std::allocator<quasar::WatermarkDetector2>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x2A8uLL);
  double result = std::__shared_ptr_emplace<quasar::WatermarkDetector2>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::WatermarkDetector2>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C945FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::WatermarkDetector2>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::WatermarkDetector2>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60790;
  quasar::WatermarkDetector2::WatermarkDetector2(a1 + 3);
  return a1;
}

void sub_1B1C94658(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::WatermarkDetector2>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60790;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WatermarkDetector2>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60790;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WatermarkDetector2>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void std::allocate_shared[abi:ne180100]<quasar::LatticeLmeFtmDecoder,std::allocator<quasar::LatticeLmeFtmDecoder>,std::string const&,void>(uint64_t a1, long long *a2)
{
  uint64_t v3 = operator new(0xD88uLL);
  std::__shared_ptr_emplace<quasar::LatticeLmeFtmDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::LatticeLmeFtmDecoder>,0>(v3, a2);
}

void sub_1B1C94750(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LatticeLmeFtmDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::LatticeLmeFtmDecoder>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60B10;
  quasar::LatticeLmeFtmDecoder::LatticeLmeFtmDecoder((uint64_t)(a1 + 3), a2);
}

void sub_1B1C947AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LatticeLmeFtmDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60B10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LatticeLmeFtmDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60B10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::LatticeLmeFtmDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineAEDRescoringDecoder,std::allocator<quasar::OnlineAEDRescoringDecoder>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x250uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlineAEDRescoringDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineAEDRescoringDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C948A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineAEDRescoringDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineAEDRescoringDecoder>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61750;
  quasar::OnlineAEDRescoringDecoder::OnlineAEDRescoringDecoder(a1 + 3);
  return a1;
}

void sub_1B1C94900(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineAEDRescoringDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61750;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineAEDRescoringDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61750;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineAEDRescoringDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void *std::allocate_shared[abi:ne180100]<quasar::ForceAlignDecoder,std::allocator<quasar::ForceAlignDecoder>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x388uLL);
  double result = std::__shared_ptr_emplace<quasar::ForceAlignDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::ForceAlignDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1C949F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::ForceAlignDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::ForceAlignDecoder>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60330;
  quasar::ForceAlignDecoderBase::ForceAlignDecoderBase((uint64_t)(a1 + 3), a2);
  a1[3] = &unk_1F0A53A18;
  a1[110] = 0;
  a1[112] = 0;
  a1[111] = 0;
  return a1;
}

void sub_1B1C94A7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ForceAlignDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60330;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ForceAlignDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60330;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::ForceAlignDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

uint64_t quasar::ForceAlignDecoderBase::ForceAlignDecoderBase(uint64_t a1, long long *a2)
{
  uint64_t v3 = quasar::Decoder::Decoder(a1, a2);
  *(void *)uint64_t v3 = &unk_1F0A559C8;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 48std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v3 + 496) = 0u;
  *(void *)(v3 + 51std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(_OWORD *)(v3 + 528) = 0u;
  *(_OWORD *)(v3 + 544) = 0u;
  *(void *)(v3 + 56std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  uint64_t v4 = (char *)operator new(0xA8uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)uint64_t v4 = &unk_1F0A60678;
  *((void *)v4 + 18) = 0;
  *(_OWORD *)(v4 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(v4 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *((_DWORD *)v4 + 34) = 0;
  *(_OWORD *)(v4 + ++*(_DWORD *)(result + 24) = 0u;
  *(void *)(a1 + 568) = v4 + 24;
  *(void *)(a1 + 576) = v4;
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 60std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a1 + 6++*(_DWORD *)(result + 24) = _D0;
  *(_WORD *)(a1 + 63std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 256;
  *(_DWORD *)(a1 + 636) = 1107296256;
  *(void *)(a1 + 64std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 9999;
  *(_DWORD *)(a1 + 648) = 0;
  *(unsigned char *)(a1 + 65std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 1;
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 67std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_DWORD *)(a1 + 72std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  kaldi::SilencePhoneSet::SilencePhoneSet((kaldi::SilencePhoneSet *)(a1 + 752));
  *(_OWORD *)(a1 + 8++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 84std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  return a1;
}

void sub_1B1C94C5C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 751) < 0) {
    operator delete(*v3);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 712);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*(char *)(v1 + 703) < 0) {
    operator delete(*(void **)(v1 + 680));
  }
  if (*(char *)(v1 + 679) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 623) < 0) {
    operator delete(*(void **)(v1 + 600));
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 592);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(v1 + 576);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  long long v8 = *(std::__shared_weak_count **)(v1 + 560);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (*(char *)(v1 + 551) < 0) {
    operator delete(*(void **)(v1 + 528));
  }
  if (*(char *)(v1 + 519) < 0) {
    operator delete(*(void **)(v1 + 496));
  }
  if (*(char *)(v1 + 495) < 0) {
    operator delete(*(void **)(v1 + 472));
  }
  if (*(char *)(v1 + 471) < 0) {
    operator delete(*(void **)(v1 + 448));
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::RealignAmFusionDecoder,std::allocator<quasar::RealignAmFusionDecoder>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x448uLL);
  double result = std::__shared_ptr_emplace<quasar::RealignAmFusionDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::RealignAmFusionDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1C94D78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::RealignAmFusionDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::RealignAmFusionDecoder>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61088;
  quasar::RealignAmFusionDecoder::RealignAmFusionDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B1C94DD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RealignAmFusionDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61088;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::RealignAmFusionDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61088;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::RealignAmFusionDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

uint64_t quasar::RealignAmFusionDecoder::RealignAmFusionDecoder(uint64_t a1, long long *a2)
{
  uint64_t v3 = (void *)quasar::ForceAlignDecoderBase::ForceAlignDecoderBase(a1, a2);
  void *v3 = &unk_1F0A56300;
  std::string::basic_string[abi:ne180100]<0>(v3 + 107, "");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 880), "");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 904), "");
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a1 + 928) = _D0;
  *(unsigned char *)(a1 + 936) = 0;
  *(void *)(a1 + 94std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0x1000000000;
  *(void *)(a1 + 948) = 0x3F0000003F000000;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 960), "");
  *(void *)(a1 + 984) = 0x2EDBE6FF3F800000;
  *(_OWORD *)(a1 + 99std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 10++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 104std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(void *)(a1 + 1056) = 0;
  *(unsigned char *)(a1 + 1064) = 1;
  return a1;
}

void sub_1B1C94F70(_Unwind_Exception *a1)
{
  if (v1[927] < 0) {
    operator delete(*v4);
  }
  if (v1[903] < 0) {
    operator delete(*v3);
  }
  if (v1[879] < 0) {
    operator delete(*v2);
  }
  quasar::ForceAlignDecoderBase::~ForceAlignDecoderBase((quasar::ForceAlignDecoderBase *)v1);
  _Unwind_Resume(a1);
}

void quasar::ForceAlignDecoderBase::~ForceAlignDecoderBase(quasar::ForceAlignDecoderBase *this)
{
  *(void *)this = &unk_1F0A559C8;
  uint64_t v2 = (void *)*((void *)this + 106);
  *((void *)this + 106) = 0;
  if (v2) {
    std::default_delete<quasar::Lexicon>::operator()[abi:ne180100]((uint64_t)this + 848, v2);
  }
  uint64_t v3 = (void *)*((void *)this + 103);
  if (v3)
  {
    *((void *)this + 104) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 100);
  if (v4)
  {
    *((void *)this + 101) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 97);
  if (v5) {
    operator delete(v5);
  }
  if (*((char *)this + 751) < 0) {
    operator delete(*((void **)this + 91));
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 89);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*((char *)this + 703) < 0) {
    operator delete(*((void **)this + 85));
  }
  if (*((char *)this + 679) < 0) {
    operator delete(*((void **)this + 82));
  }
  if (*((char *)this + 623) < 0) {
    operator delete(*((void **)this + 75));
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 74);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  long long v8 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 70);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (*((char *)this + 551) < 0) {
    operator delete(*((void **)this + 66));
  }
  if (*((char *)this + 519) < 0) {
    operator delete(*((void **)this + 62));
  }
  if (*((char *)this + 495) < 0) {
    operator delete(*((void **)this + 59));
  }
  if (*((char *)this + 471) < 0) {
    operator delete(*((void **)this + 56));
  }
  quasar::Decoder::~Decoder(this);
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlinePrefixBeamSearchDecoder,std::allocator<quasar::OnlinePrefixBeamSearchDecoder>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x420uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlinePrefixBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlinePrefixBeamSearchDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C95154(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlinePrefixBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlinePrefixBeamSearchDecoder>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61BE8;
  quasar::OnlinePrefixBeamSearchDecoder::OnlinePrefixBeamSearchDecoder(a1 + 3);
  return a1;
}

void sub_1B1C951B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlinePrefixBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61BE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlinePrefixBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61BE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlinePrefixBeamSearchDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void *std::allocate_shared[abi:ne180100]<quasar::AEDBeamSearchDecoder,std::allocator<quasar::AEDBeamSearchDecoder>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x400uLL);
  double result = std::__shared_ptr_emplace<quasar::AEDBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::AEDBeamSearchDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C952A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::AEDBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::AEDBeamSearchDecoder>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60A68;
  quasar::AEDBeamSearchDecoder::AEDBeamSearchDecoder(a1 + 3);
  return a1;
}

void sub_1B1C95304(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::AEDBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60A68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::AEDBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60A68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::AEDBeamSearchDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

void *std::allocate_shared[abi:ne180100]<quasar::RescoringDeliberationDecoder,std::allocator<quasar::RescoringDeliberationDecoder>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x260uLL);
  double result = std::__shared_ptr_emplace<quasar::RescoringDeliberationDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::RescoringDeliberationDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1C953FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::RescoringDeliberationDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::RescoringDeliberationDecoder>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61B08;
  quasar::RescoringDeliberationDecoder::RescoringDeliberationDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B1C95458(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RescoringDeliberationDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61B08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::RescoringDeliberationDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61B08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::RescoringDeliberationDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

double quasar::RescoringDeliberationDecoder::RescoringDeliberationDecoder(uint64_t a1, long long *a2)
{
  uint64_t v2 = quasar::Decoder::Decoder(a1, a2);
  *(void *)uint64_t v2 = &unk_1F0A578A0;
  *(void *)(v2 + 448) = 0;
  *(void *)(v2 + 456) = 0;
  *(unsigned char *)(v2 + 464) = 0;
  *(void *)(v2 + 47std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 1024;
  *(_OWORD *)(v2 + 48std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = xmmword_1B2568F10;
  *(_DWORD *)(v2 + 496) = 0;
  double result = 0.0;
  *(_OWORD *)(v2 + 504) = 0u;
  *(_OWORD *)(v2 + 52std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(void *)(v2 + 536) = 1;
  *(_WORD *)(v2 + 544) = 256;
  *(void *)(v2 + 56std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(v2 + 55std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(unsigned char *)(v2 + 568) = 0;
  *(_DWORD *)(v2 + 57std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = -1;
  *(unsigned char *)(v2 + 576) = 0;
  return result;
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineEmbeddingRetranslationDecoder,std::allocator<quasar::OnlineEmbeddingRetranslationDecoder>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x220uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlineEmbeddingRetranslationDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineEmbeddingRetranslationDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1C955D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineEmbeddingRetranslationDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineEmbeddingRetranslationDecoder>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A620B8;
  quasar::OnlineEmbeddingRetranslationDecoder::OnlineEmbeddingRetranslationDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B1C95634(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineEmbeddingRetranslationDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A620B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineEmbeddingRetranslationDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A620B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineEmbeddingRetranslationDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))();
}

kaldi::quasar::ErrorBlamer *kaldi::quasar::ErrorBlamer::ErrorBlamer(kaldi::quasar::ErrorBlamer *this, int a2, float a3, float a4, float a5, float a6, float a7, const kaldi::TransitionModel *a8)
{
  *(void *)this = &unk_1F0A4FFF0;
  *((void *)this + 1) = &unk_1F0A508E0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *((_DWORD *)this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  uint64_t v9 = (void **)((char *)this + 56);
  *(_OWORD *)((char *)this + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  uint64_t v10 = (std::vector<std::string> *)((char *)this + 80);
  *((_DWORD *)this + 26) = 0;
  *((_DWORD *)this + 27) = a2;
  *((float *)this + 28) = a3;
  *((float *)this + 29) = a4;
  *((float *)this + 3std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = a5;
  *((float *)this + 31) = a6;
  *((float *)this + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = a7;
  *((void *)this + 17) = a8;
  kaldi::quasar::ErrorProfile::ErrorProfile((kaldi::quasar::ErrorBlamer *)((char *)this + 144), (kaldi::quasar::ErrorBlamer *)((char *)this + 8), a8);
  unint64_t v11 = *((void *)this + 9);
  uint64_t v12 = (char *)*((void *)this + 8);
  if ((unint64_t)v12 >= v11)
  {
    long long v14 = (char *)*v9;
    uint64_t v15 = (v12 - (unsigned char *)*v9) >> 2;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v11 - (void)v14;
    if (v17 >> 1 > v16) {
      unint64_t v16 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      float v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 72, v18);
      long long v14 = (char *)*((void *)this + 7);
      uint64_t v12 = (char *)*((void *)this + 8);
    }
    else
    {
      float v19 = 0;
    }
    double v20 = &v19[4 * v15];
    int v21 = &v19[4 * v18];
    *(_DWORD *)double v20 = 4;
    long long v13 = v20 + 4;
    while (v12 != v14)
    {
      int v22 = *((_DWORD *)v12 - 1);
      v12 -= 4;
      *((_DWORD *)v20 - 1) = v22;
      v20 -= 4;
    }
    *((void *)this + 7) = v20;
    *((void *)this + 8) = v13;
    *((void *)this + 9) = v21;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v12 = 4;
    long long v13 = v12 + 4;
  }
  *((void *)this + 8) = v13;
  std::string::basic_string[abi:ne180100]<0>(__p, "CONFIDENCE");
  unint64_t v23 = *((void *)this + 12);
  unint64_t v24 = *((void *)this + 11);
  if (v24 >= v23)
  {
    unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (unint64_t)v10->__begin_) >> 3);
    unint64_t v27 = v26 + 1;
    if (v26 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (unint64_t)v10->__begin_) >> 3);
    if (2 * v28 > v27) {
      unint64_t v27 = 2 * v28;
    }
    if (v28 >= 0x555555555555555) {
      unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v29 = v27;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 96);
    if (v29) {
      uint64_t v30 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)this + 96, v29);
    }
    else {
      uint64_t v30 = 0;
    }
    uint64_t v31 = v30 + v26;
    __v.__first_ = v30;
    __v.__begin_ = v31;
    __v.__end_cap_.__value_ = &v30[v29];
    long long v32 = *(_OWORD *)__p;
    v31->__r_.__value_.__r.__words[2] = v85;
    *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
    __p[1] = 0;
    std::string::size_type v85 = 0;
    __p[0] = 0;
    __v.__end_ = v31 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(v10, &__v);
    uint64_t v33 = *((void *)this + 11);
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
    int v34 = SHIBYTE(v85);
    *((void *)this + 11) = v33;
    if (v34 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v25 = *(_OWORD *)__p;
    *(void *)(v24 + 16) = v85;
    *(_OWORD *)unint64_t v24 = v25;
    *((void *)this + 11) = v24 + 24;
  }
  int v36 = (char *)*((void *)this + 8);
  unint64_t v35 = *((void *)this + 9);
  if ((unint64_t)v36 >= v35)
  {
    uint64_t v38 = (char *)*v9;
    uint64_t v39 = (v36 - (unsigned char *)*v9) >> 2;
    unint64_t v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v41 = v35 - (void)v38;
    if (v41 >> 1 > v40) {
      unint64_t v40 = v41 >> 1;
    }
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v40;
    }
    if (v42)
    {
      unint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 72, v42);
      uint64_t v38 = (char *)*((void *)this + 7);
      int v36 = (char *)*((void *)this + 8);
    }
    else
    {
      unint64_t v43 = 0;
    }
    uint64_t v44 = &v43[4 * v39];
    std::string::size_type v45 = &v43[4 * v42];
    *(_DWORD *)uint64_t v44 = 4;
    unsigned int v37 = v44 + 4;
    while (v36 != v38)
    {
      int v46 = *((_DWORD *)v36 - 1);
      v36 -= 4;
      *((_DWORD *)v44 - 1) = v46;
      v44 -= 4;
    }
    *((void *)this + 7) = v44;
    *((void *)this + 8) = v37;
    *((void *)this + 9) = v45;
    if (v38) {
      operator delete(v38);
    }
  }
  else
  {
    *(_DWORD *)int v36 = 4;
    unsigned int v37 = v36 + 4;
  }
  *((void *)this + 8) = v37;
  std::string::basic_string[abi:ne180100]<0>(__p, "LENGTH");
  unint64_t v48 = *((void *)this + 11);
  unint64_t v47 = *((void *)this + 12);
  if (v48 >= v47)
  {
    unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (unint64_t)v10->__begin_) >> 3);
    unint64_t v51 = v50 + 1;
    if (v50 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - (unint64_t)v10->__begin_) >> 3);
    if (2 * v52 > v51) {
      unint64_t v51 = 2 * v52;
    }
    if (v52 >= 0x555555555555555) {
      unint64_t v53 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v53 = v51;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 96);
    if (v53) {
      uint64_t v54 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)this + 96, v53);
    }
    else {
      uint64_t v54 = 0;
    }
    unint64_t v55 = v54 + v50;
    __v.__first_ = v54;
    __v.__begin_ = v55;
    __v.__end_cap_.__value_ = &v54[v53];
    long long v56 = *(_OWORD *)__p;
    v55->__r_.__value_.__r.__words[2] = v85;
    *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v56;
    __p[1] = 0;
    std::string::size_type v85 = 0;
    __p[0] = 0;
    __v.__end_ = v55 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(v10, &__v);
    uint64_t v57 = *((void *)this + 11);
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
    int v58 = SHIBYTE(v85);
    *((void *)this + 11) = v57;
    if (v58 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v49 = *(_OWORD *)__p;
    *(void *)(v48 + 16) = v85;
    *(_OWORD *)unint64_t v48 = v49;
    *((void *)this + 11) = v48 + 24;
  }
  long long v60 = (char *)*((void *)this + 8);
  unint64_t v59 = *((void *)this + 9);
  if ((unint64_t)v60 >= v59)
  {
    long long v62 = (char *)*v9;
    uint64_t v63 = (v60 - (unsigned char *)*v9) >> 2;
    unint64_t v64 = v63 + 1;
    if ((unint64_t)(v63 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v65 = v59 - (void)v62;
    if (v65 >> 1 > v64) {
      unint64_t v64 = v65 >> 1;
    }
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v66 = v64;
    }
    if (v66)
    {
      uint64_t v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 72, v66);
      long long v62 = (char *)*((void *)this + 7);
      long long v60 = (char *)*((void *)this + 8);
    }
    else
    {
      uint64_t v67 = 0;
    }
    uint64_t v68 = &v67[4 * v63];
    int v69 = &v67[4 * v66];
    *(_DWORD *)uint64_t v68 = 4;
    long long v61 = v68 + 4;
    while (v60 != v62)
    {
      int v70 = *((_DWORD *)v60 - 1);
      v60 -= 4;
      *((_DWORD *)v68 - 1) = v70;
      v68 -= 4;
    }
    *((void *)this + 7) = v68;
    *((void *)this + 8) = v61;
    *((void *)this + 9) = v69;
    if (v62) {
      operator delete(v62);
    }
  }
  else
  {
    *(_DWORD *)long long v60 = 4;
    long long v61 = v60 + 4;
  }
  *((void *)this + 8) = v61;
  std::string::basic_string[abi:ne180100]<0>(__p, "FRAME_LENGTH");
  unint64_t v72 = *((void *)this + 11);
  unint64_t v71 = *((void *)this + 12);
  if (v72 >= v71)
  {
    unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - (unint64_t)v10->__begin_) >> 3);
    unint64_t v75 = v74 + 1;
    if (v74 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - (unint64_t)v10->__begin_) >> 3);
    if (2 * v76 > v75) {
      unint64_t v75 = 2 * v76;
    }
    if (v76 >= 0x555555555555555) {
      unint64_t v77 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v77 = v75;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 96);
    if (v77) {
      long long v78 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)this + 96, v77);
    }
    else {
      long long v78 = 0;
    }
    long long v79 = v78 + v74;
    __v.__first_ = v78;
    __v.__begin_ = v79;
    __v.__end_cap_.__value_ = &v78[v77];
    long long v80 = *(_OWORD *)__p;
    v79->__r_.__value_.__r.__words[2] = v85;
    *(_OWORD *)&v79->__r_.__value_.__l.__data_ = v80;
    __p[1] = 0;
    std::string::size_type v85 = 0;
    __p[0] = 0;
    __v.__end_ = v79 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(v10, &__v);
    uint64_t v81 = *((void *)this + 11);
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
    int v82 = SHIBYTE(v85);
    *((void *)this + 11) = v81;
    if (v82 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v73 = *(_OWORD *)__p;
    *(void *)(v72 + 16) = v85;
    *(_OWORD *)unint64_t v72 = v73;
    *((void *)this + 11) = v72 + 24;
  }
  return this;
}

void sub_1B1C95CFC(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::wstring> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a15);
  if (a14 < 0) {
    operator delete(__pa);
  }
  kaldi::quasar::ErrorProfile::~ErrorProfile(v18);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  double v20 = *v17;
  if (*v17)
  {
    *(void *)(v15 + 64) = v20;
    operator delete(v20);
  }
  kaldi::quasar::AttributeFactory::~AttributeFactory(v16);
  _Unwind_Resume(__p);
}

void sub_1B1C95D80()
{
}

void kaldi::quasar::ErrorBlamer::~ErrorBlamer(kaldi::quasar::ErrorBlamer *this)
{
  *(void *)this = &unk_1F0A4FFF0;
  kaldi::quasar::ErrorProfile::~ErrorProfile((kaldi::quasar::ErrorBlamer *)((char *)this + 144));
  uint64_t v3 = (void **)((char *)this + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  kaldi::quasar::AttributeFactory::~AttributeFactory((kaldi::quasar::ErrorBlamer *)((char *)this + 8));
}

{
  uint64_t vars8;

  kaldi::quasar::ErrorBlamer::~ErrorBlamer(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::quasar::ErrorBlamer::Blame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Blaming ", 8);
    int v9 = *(char *)(a2 + 23);
    if (v9 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *(void *)a2;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v11 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v15);
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  kaldi::quasar::ErrorBlamer::GetErrorRegions(a1, a3, a4);
}

void sub_1B1C95F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<kaldi::quasar::ErrorRegion>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ErrorBlamer::GetErrorRegions(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void kaldi::quasar::ErrorBlamer::ComputeErrorRegions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v6 = *(void *)(a2 + 8);
  ++*(_DWORD *)(v6 + 56);
  uint64_t v4 = *(void *)(a3 + 8);
  uint64_t v5 = &unk_1F0A46010;
  ++*(_DWORD *)(v4 + 56);
  uint64_t v3 = &unk_1F0A46010;
  kaldi::quasar::ErrorBlamer::GetTimeAlignedErrorRegions(a1, (uint64_t)&v5, (uint64_t)&v3);
}

void sub_1B1C96308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  a9 = (void **)&a16;
  std::vector<kaldi::quasar::ErrorRegion>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ErrorBlamer::AddAttributes(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2 != a2[1])
  {
    uint64_t v4 = a1;
    int v5 = -1431655765 * ((uint64_t)(a1[11] - a1[10]) >> 3);
    unint64_t v6 = 0;
    int v7 = 0;
    int v8 = 0;
    int v34 = v5 - 1;
    int v35 = v5 - 2;
    uint64_t v38 = (kaldi::quasar::AttributeFactory *)(a1 + 1);
    uint64_t v9 = 232;
    do
    {
      uint64_t v11 = *(void *)(v2 + v9 - 176);
      uint64_t v10 = *(void *)(v2 + v9 - 168);
      uint64_t v12 = *(void *)(v2 + v9 - 152);
      uint64_t v39 = *(void *)(v2 + v9 - 144);
      unint64_t v48 = &unk_1F0A4FF88;
      uint64_t v49 = 0x3F80000000000000;
      int v50 = 0;
      if (!kaldi::quasar::ErrorRegion::HasAttribute((kaldi::quasar::ErrorRegion *)(v2 + v9 - 232), (kaldi::quasar::AbstractAttribute *)&v48))
      {
        RefTotalfloat Score = kaldi::quasar::ErrorRegion::GetRefTotalScore((kaldi::quasar::ErrorRegion *)(v2 + v9 - 232));
        if (RefTotalScore < kaldi::quasar::ErrorRegion::GetHypoTotalScore((kaldi::quasar::ErrorRegion *)(v2 + v9 - 232)))
        {
          unint64_t v43 = &unk_1F0A4FF88;
          uint64_t v44 = 0x3F80000000000000;
          int v45 = 1;
          kaldi::quasar::ErrorRegion::AddAttribute((uint64_t **)(v2 + v9 - 232), (kaldi::quasar::AbstractAttribute *)&v43);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v43);
        }
        if (kaldi::quasar::ErrorRegion::IsHomophoneRegion((kaldi::quasar::ErrorRegion *)(v2 + v9 - 232), (const kaldi::TransitionModel *)v4[17]))
        {
          unint64_t v43 = &unk_1F0A4FF88;
          uint64_t v44 = 0x3F80000000000000;
          int v45 = 2;
          kaldi::quasar::ErrorRegion::AddAttribute((uint64_t **)(v2 + v9 - 232), (kaldi::quasar::AbstractAttribute *)&v43);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v43);
        }
        float ScoreSum = kaldi::quasar::ErrorRegion::GetScoreSum(v2 + v9 - 232, 0, (*(void *)(v2 + v9 - 120) - *(void *)(v2 + v9 - 128)) >> 2, (void *)(v2 + v9 - 128));
        float v15 = kaldi::quasar::ErrorRegion::GetScoreSum(v2 + v9 - 232, 0, (*(void *)(v2 + v9 - 96) - *(void *)(v2 + v9 - 104)) >> 2, (void *)(v2 + v9 - 104));
        float v16 = kaldi::quasar::ErrorRegion::GetScoreSum(v2 + v9 - 232, 0, (*(void *)(v2 + v9 - 72) - *(void *)(v2 + v9 - 80)) >> 2, (void *)(v2 + v9 - 80));
        float v17 = kaldi::quasar::ErrorRegion::GetScoreSum(v2 + v9 - 232, 0, (*(void *)(v2 + v9 - 48) - *(void *)(v2 + v9 - 56)) >> 2, (void *)(v2 + v9 - 56));
        float v18 = kaldi::quasar::ErrorRegion::GetScoreSum(v2 + v9 - 232, 0, (*(void *)(v2 + v9 - 24) - *(void *)(v2 + v9 - 32)) >> 2, (void *)(v2 + v9 - 32));
        float v19 = kaldi::quasar::ErrorRegion::GetScoreSum(v2 + v9 - 232, 0, (*(void *)(v2 + v9) - *(void *)(v2 + v9 - 8)) >> 2, (void *)(v2 + v9 - 8));
        float v20 = (float)(ScoreSum - v15) + 0.0;
        if (ScoreSum <= v15) {
          float v20 = 0.0;
        }
        float v21 = -0.0;
        if (v16 > v17) {
          float v21 = v16 - v17;
        }
        float v22 = v20 + v21;
        float v37 = v22 + (float)(v18 - v19);
        if (v18 <= v19) {
          float v23 = v22;
        }
        else {
          float v23 = v22 + (float)(v18 - v19);
        }
        uint64_t v4 = a1;
        if (ScoreSum > v15)
        {
          LODWORD(v44) = 0;
          unint64_t v43 = &unk_1F0A4FF88;
          *((float *)&v44 + 1) = (float)(ScoreSum - v15) / v23;
          int v45 = 5;
          kaldi::quasar::ErrorRegion::AddAttribute((uint64_t **)(v2 + v9 - 232), (kaldi::quasar::AbstractAttribute *)&v43);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v43);
        }
        if (v16 > v17)
        {
          LODWORD(v44) = 0;
          unint64_t v43 = &unk_1F0A4FF88;
          *((float *)&v44 + 1) = (float)(v16 - v17) / v23;
          int v45 = 4;
          kaldi::quasar::ErrorRegion::AddAttribute((uint64_t **)(v2 + v9 - 232), (kaldi::quasar::AbstractAttribute *)&v43);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v43);
        }
        if (v18 > v19)
        {
          LODWORD(v44) = 0;
          unint64_t v43 = &unk_1F0A4FF88;
          *((float *)&v44 + 1) = (float)(v18 - v19) / v37;
          int v45 = 3;
          kaldi::quasar::ErrorRegion::AddAttribute((uint64_t **)(v2 + v9 - 232), (kaldi::quasar::AbstractAttribute *)&v43);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v43);
        }
      }
      kaldi::quasar::ErrorRegion::Analyze((kaldi::quasar::ErrorRegion *)(v2 + v9 - 232), v38, (const kaldi::TransitionModel *)v4[17], *((_DWORD *)v4 + 26));
      v7 += (unint64_t)(v10 - v11) >> 2;
      v8 += (unint64_t)(v39 - v12) >> 2;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v48);
      ++v6;
      uint64_t v2 = *a2;
      uint64_t v24 = a2[1];
      v9 += 328;
    }
    while (0x8F9C18F9C18F9C19 * ((v24 - *a2) >> 3) > v6);
    LODWORD(v49) = 1;
    HIDWORD(v49) = v34;
    unint64_t v48 = &unk_1F0A505C0;
    int v50 = 0;
    float v51 = (float)v8;
    uint64_t v52 = 0;
    float v25 = (float)*(int *)(v24 - 276);
    LODWORD(v44) = 1;
    HIDWORD(v44) = v35;
    unint64_t v43 = &unk_1F0A505C0;
    int v45 = 0;
    float v46 = v25;
    uint64_t v47 = 0;
    if (v24 == v2)
    {
      uint64_t v28 = v2;
    }
    else
    {
      uint64_t v26 = 0;
      unint64_t v27 = 0;
      do
      {
        kaldi::quasar::ErrorRegion::AddAttribute((uint64_t **)(v2 + v26), (kaldi::quasar::AbstractAttribute *)&v48);
        kaldi::quasar::ErrorRegion::AddAttribute((uint64_t **)(*a2 + v26), (kaldi::quasar::AbstractAttribute *)&v43);
        ++v27;
        uint64_t v2 = *a2;
        uint64_t v28 = a2[1];
        v26 += 328;
      }
      while (0x8F9C18F9C18F9C19 * ((v28 - *a2) >> 3) > v27);
    }
    if (v7 > 2 * v8)
    {
      unint64_t v40 = &unk_1F0A4FF88;
      uint64_t v41 = 0x3F80000000000000;
      int v42 = 7;
      if (v28 != v2)
      {
        uint64_t v29 = 0;
        unint64_t v30 = 0;
        do
        {
          kaldi::quasar::ErrorRegion::AddAttribute((uint64_t **)(v2 + v29), (kaldi::quasar::AbstractAttribute *)&v40);
          ++v30;
          uint64_t v2 = *a2;
          v29 += 328;
        }
        while (0x8F9C18F9C18F9C19 * ((a2[1] - *a2) >> 3) > v30);
      }
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v40);
      uint64_t v4 = a1;
    }
    if (v8 > 2 * v7)
    {
      unint64_t v40 = &unk_1F0A4FF88;
      uint64_t v41 = 0x3F80000000000000;
      int v42 = 6;
      uint64_t v31 = *a2;
      if (a2[1] != *a2)
      {
        uint64_t v32 = 0;
        unint64_t v33 = 0;
        do
        {
          kaldi::quasar::ErrorRegion::AddAttribute((uint64_t **)(v31 + v32), (kaldi::quasar::AbstractAttribute *)&v40);
          ++v33;
          uint64_t v31 = *a2;
          v32 += 328;
        }
        while (0x8F9C18F9C18F9C19 * ((a2[1] - *a2) >> 3) > v33);
      }
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v40);
    }
    kaldi::quasar::ErrorBlamer::AddWordContextAttributes(v4, a2);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v43);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v48);
  }
}

void sub_1B1C969C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ErrorBlamer::AddInformationOnReferenceRecovery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 88))(a3, 0);
  kaldi::quasar::ErrorBlamer::ReplaceEpsilonWithNoLabel(a1, v5);
  kaldi::quasar::ErrorBlamer::ReplaceEpsilonWithNoLabel(a1, v6);
  kaldi::quasar::ErrorBlamer::GetBestPath();
}

void sub_1B1C96F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::quasar::ErrorBlamer::AddAcousticOnlyDecoding(uint64_t a1, void *a2, uint64_t *a3)
{
  if ((*(unsigned int (**)(void *))(*a2 + 24))(a2) != -1)
  {
    std::string __p = 0;
    unint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v44 = 0;
    int v45 = 0;
    float v46 = 0;
    LODWORD(v6) = (*(uint64_t (**)(void *))(*a2 + 24))(a2);
    do
    {
      int v7 = *(int **)(*(void *)(*(void *)(a2[1] + 64) + 8 * (int)v6) + 24);
      int v8 = *v7;
      if (*v7 && v8 != *(_DWORD *)(a1 + 104))
      {
        uint64_t v9 = v48;
        if (v48 >= v49)
        {
          uint64_t v11 = (char *)__p;
          uint64_t v12 = (v48 - (unsigned char *)__p) >> 2;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v14 = v49 - (unsigned char *)__p;
          if ((v49 - (unsigned char *)__p) >> 1 > v13) {
            unint64_t v13 = v14 >> 1;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15)
          {
            uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v49, v15);
            uint64_t v11 = (char *)__p;
            uint64_t v9 = v48;
            int v8 = *v7;
          }
          else
          {
            uint64_t v16 = 0;
          }
          uint64_t v17 = &v16[4 * v12];
          *(_DWORD *)uint64_t v17 = v8;
          uint64_t v10 = v17 + 4;
          while (v9 != v11)
          {
            int v18 = *((_DWORD *)v9 - 1);
            v9 -= 4;
            *((_DWORD *)v17 - 1) = v18;
            v17 -= 4;
          }
          std::string __p = v17;
          unint64_t v48 = v10;
          uint64_t v49 = &v16[4 * v15];
          if (v11) {
            operator delete(v11);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v48 = v8;
          uint64_t v10 = v9 + 4;
        }
        unint64_t v48 = v10;
        int v19 = v7[3];
        float v20 = v45;
        if (v45 >= v46)
        {
          float v22 = (char *)v44;
          uint64_t v23 = (v45 - (unsigned char *)v44) >> 2;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = v46 - (unsigned char *)v44;
          if ((v46 - (unsigned char *)v44) >> 1 > v24) {
            unint64_t v24 = v25 >> 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26)
          {
            unint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v46, v26);
            float v22 = (char *)v44;
            float v20 = v45;
          }
          else
          {
            unint64_t v27 = 0;
          }
          uint64_t v28 = &v27[4 * v23];
          *(_DWORD *)uint64_t v28 = v19;
          float v21 = v28 + 4;
          while (v20 != v22)
          {
            int v29 = *((_DWORD *)v20 - 1);
            v20 -= 4;
            *((_DWORD *)v28 - 1) = v29;
            v28 -= 4;
          }
          uint64_t v44 = v28;
          int v45 = v21;
          float v46 = &v27[4 * v26];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *(_DWORD *)int v45 = v19;
          float v21 = v20 + 4;
        }
        int v45 = v21;
      }
      uint64_t v6 = v7[4];
      (*(void (**)(void **__return_ptr, void *, uint64_t))(*a2 + 32))(&v41, a2, v6);
      float v52 = *((float *)&v41 + 1);
      LODWORD(v38) = v41;
      int v51 = 0;
      float v50 = 0.0;
    }
    while (*(float *)&v41 != 0.0 || v52 != v50);
    uint64_t v30 = *a3;
    if (a3[1] != *a3)
    {
      uint64_t v31 = 0;
      unint64_t v32 = 0;
      do
      {
        uint64_t v33 = v30 + v31;
        uint64_t v34 = *(int *)(v30 + v31 + 44);
        uint64_t v35 = *(int *)(v30 + v31 + 52);
        int v42 = 0;
        uint64_t v43 = 0;
        uint64_t v41 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(&v41, (char *)__p + 4 * v34, (uint64_t)__p + 4 * v35, v35 - v34);
        uint64_t v36 = *(int *)(v33 + 44);
        uint64_t v37 = *(int *)(v33 + 52);
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        uint64_t v38 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(&v38, (char *)v44 + 4 * v36, (uint64_t)v44 + 4 * v37, v37 - v36);
        kaldi::quasar::ErrorRegion::AddAcousticOnlyDecoding(v33, (uint64_t)&v41, (uint64_t)&v38);
        if (v38)
        {
          uint64_t v39 = v38;
          operator delete(v38);
        }
        if (v41)
        {
          int v42 = v41;
          operator delete(v41);
        }
        ++v32;
        uint64_t v30 = *a3;
        v31 += 328;
      }
      while (0x8F9C18F9C18F9C19 * ((a3[1] - *a3) >> 3) > v32);
    }
    if (v44)
    {
      int v45 = (char *)v44;
      operator delete(v44);
    }
    if (__p)
    {
      unint64_t v48 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_1B1C9734C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ErrorBlamer::AddConfidenceScores(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v8 = *a3;
    uint64_t v7 = a3[1];
    if (v7 == *a3)
    {
      int v10 = 0;
    }
    else
    {
      unint64_t v9 = 0;
      int v10 = 0;
      int v11 = -1431655765 * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3) - 3;
      do
      {
        uint64_t v12 = (uint64_t *)(v8 + 328 * v9);
        uint64_t v14 = v12 + 10;
        uint64_t v13 = v12[10];
        if (v12[11] != v13)
        {
          unint64_t v15 = 0;
          do
          {
            int v16 = *(_DWORD *)(v13 + 4 * v15);
            if (v16 && v16 != *(_DWORD *)(a1 + 104))
            {
              if (v10 >= (unint64_t)((a2[1] - *a2) >> 2))
              {
                if (kaldi::g_kaldi_verbose_level >= -1)
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Unexpected number of confidenceScores", 37);
                  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
                }
              }
              else
              {
                int v17 = *(_DWORD *)(*a2 + 4 * v10);
                int v23 = 1;
                int v24 = v11;
                float v22 = &unk_1F0A505C0;
                int v25 = 0;
                int v26 = v17;
                uint64_t v27 = 0;
                kaldi::quasar::ErrorRegion::AddAttribute((kaldi::quasar::ErrorRegion *)v12, (kaldi::quasar::AbstractAttribute *)&v22, v15);
                ++v10;
                quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v22);
              }
            }
            ++v15;
            uint64_t v13 = *v14;
          }
          while (v15 < (v12[11] - *v14) >> 2);
          uint64_t v8 = *a3;
          uint64_t v7 = a3[1];
        }
        ++v9;
      }
      while (0x8F9C18F9C18F9C19 * ((v7 - v8) >> 3) > v9);
      uint64_t v4 = *a2;
      uint64_t v3 = a2[1];
    }
    if (v10 != (v3 - v4) >> 2 && kaldi::g_kaldi_verbose_level > -2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Unexpected number of confidenceScores got ", 42);
      int v19 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" words in lattice and got ", 26);
      float v20 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" confidence scores", 18);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
    }
  }
}

void sub_1B1C97608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ErrorBlamer::AddSchematicAttributes(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 == v4) {
    return;
  }
  uint64_t v6 = a1[10];
  uint64_t v7 = a1[11];
  if (v6 == v7)
  {
    if (kaldi::g_kaldi_verbose_level < -1) {
      return;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Schematics have to be registered first before usage, call RegisterSchematics first", 82);
LABEL_44:
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    return;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3) != 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3) - 3)
  {
    if (kaldi::g_kaldi_verbose_level < -1) {
      return;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Size of registered schematics is ", 33);
    uint64_t v31 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" does not match with supplied schematics for utterance, which are ", 66);
    std::ostream::operator<<();
    goto LABEL_44;
  }
  unint64_t v10 = 0;
  std::string __p = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  do
  {
    if (*(_DWORD *)(a1[7] + 4 * v10) != 3)
    {
      int v32 = 0;
      kaldi::ConvertStringToReal(v3 + 24 * v10, (float *)&v32);
      operator new();
    }
    StringAttribute = kaldi::quasar::AttributeFactory::CreateStringAttribute((kaldi::quasar::AttributeFactory *)(a1 + 1), v10, (long long *)(v3 + 24 * v10));
    uint64_t v12 = v34;
    if (v34 < v35)
    {
      *(void *)uint64_t v34 = StringAttribute;
      int v17 = v12 + 8;
    }
    else
    {
      uint64_t v13 = (v34 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v13 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v14 = (v35 - (unsigned char *)__p) >> 2;
      if (v14 <= v13 + 1) {
        unint64_t v14 = v13 + 1;
      }
      if ((unint64_t)(v35 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15) {
        int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v35, v15);
      }
      else {
        int v16 = 0;
      }
      int v18 = (uint64_t **)&v16[8 * v13];
      *int v18 = StringAttribute;
      int v17 = (char *)(v18 + 1);
      float v20 = (char *)__p;
      int v19 = v34;
      if (v34 != __p)
      {
        do
        {
          float v21 = (uint64_t *)*((void *)v19 - 1);
          v19 -= 8;
          *--int v18 = v21;
        }
        while (v19 != v20);
        int v19 = (char *)__p;
      }
      std::string __p = v18;
      uint64_t v34 = v17;
      uint64_t v35 = &v16[8 * v15];
      if (v19) {
        operator delete(v19);
      }
    }
    uint64_t v34 = v17;
    ++v10;
    uint64_t v3 = *a2;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v10);
  float v22 = (kaldi::quasar::AbstractAttribute **)__p;
  uint64_t v24 = *a3;
  uint64_t v23 = a3[1];
  if (v23 != *a3)
  {
    unint64_t v25 = 0;
    do
    {
      if (v17 == (char *)v22)
      {
        int v17 = (char *)v22;
      }
      else
      {
        unint64_t v26 = 0;
        uint64_t v27 = (uint64_t **)(v24 + 328 * v25);
        do
        {
          kaldi::quasar::ErrorRegion::AddAttribute(v27, v22[v26++]);
          float v22 = (kaldi::quasar::AbstractAttribute **)__p;
          int v17 = v34;
        }
        while (v26 < (v34 - (unsigned char *)__p) >> 3);
        uint64_t v24 = *a3;
        uint64_t v23 = a3[1];
      }
      ++v25;
    }
    while (0x8F9C18F9C18F9C19 * ((v23 - v24) >> 3) > v25);
  }
  if (v17 != (char *)v22)
  {
    unint64_t v28 = 0;
    do
    {
      char v29 = (*(uint64_t (**)(kaldi::quasar::AbstractAttribute *))(*(void *)v22[v28] + 56))(v22[v28]);
      float v22 = (kaldi::quasar::AbstractAttribute **)__p;
      if ((v29 & 1) == 0)
      {
        uint64_t v30 = *((void *)__p + v28);
        if (v30)
        {
          (*(void (**)(void))(*(void *)v30 + 72))(*((void *)__p + v28));
          float v22 = (kaldi::quasar::AbstractAttribute **)__p;
        }
      }
      ++v28;
    }
    while (v28 < (v34 - (char *)v22) >> 3);
  }
  if (v22)
  {
    uint64_t v34 = (char *)v22;
    operator delete(v22);
  }
}

void sub_1B1C97A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

float kaldi::quasar::ErrorRegion::GetRefTotalScore(kaldi::quasar::ErrorRegion *this)
{
  float ScoreSum = kaldi::quasar::ErrorRegion::GetScoreSum((uint64_t)this, 0, (*((void *)this + 14) - *((void *)this + 13)) >> 2, (void *)this + 13);
  float v3 = ScoreSum
     + kaldi::quasar::ErrorRegion::GetScoreSum((uint64_t)this, 0, (*((void *)this + 20) - *((void *)this + 19)) >> 2, (void *)this + 19);
  return v3
       + kaldi::quasar::ErrorRegion::GetScoreSum((uint64_t)this, 0, (*((void *)this + 26) - *((void *)this + 25)) >> 2, (void *)this + 25);
}

float kaldi::quasar::ErrorRegion::GetHypoTotalScore(kaldi::quasar::ErrorRegion *this)
{
  float ScoreSum = kaldi::quasar::ErrorRegion::GetScoreSum((uint64_t)this, 0, (*((void *)this + 17) - *((void *)this + 16)) >> 2, (void *)this + 16);
  float v3 = ScoreSum
     + kaldi::quasar::ErrorRegion::GetScoreSum((uint64_t)this, 0, (*((void *)this + 23) - *((void *)this + 22)) >> 2, (void *)this + 22);
  return v3
       + kaldi::quasar::ErrorRegion::GetScoreSum((uint64_t)this, 0, (*((void *)this + 29) - *((void *)this + 28)) >> 2, (void *)this + 28);
}

void kaldi::quasar::ErrorBlamer::AddWordContextAttributes(_DWORD *a1, uint64_t *a2)
{
  std::string __p = 0;
  long long v61 = 0;
  long long v62 = 0;
  LODWORD(v3) = a1[27];
  if ((int)v3 < 1)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    int v5 = 0;
    do
    {
      if (v4 >= v62)
      {
        uint64_t v6 = __p;
        uint64_t v7 = (v4 - __p) >> 2;
        unint64_t v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v9 = v62 - __p;
        if ((v62 - __p) >> 1 > v8) {
          unint64_t v8 = v9 >> 1;
        }
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v8;
        }
        if (v10)
        {
          int v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v62, v10);
          uint64_t v6 = __p;
          uint64_t v4 = v61;
        }
        else
        {
          int v11 = 0;
        }
        uint64_t v12 = &v11[4 * v7];
        *(_DWORD *)uint64_t v12 = a1[26];
        uint64_t v13 = v12 + 4;
        while (v4 != v6)
        {
          int v14 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *((_DWORD *)v12 - 1) = v14;
          v12 -= 4;
        }
        std::string __p = v12;
        long long v62 = &v11[4 * v10];
        if (v6) {
          operator delete(v6);
        }
        uint64_t v4 = v13;
      }
      else
      {
        *(_DWORD *)uint64_t v4 = a1[26];
        v4 += 4;
      }
      long long v61 = v4;
      ++v5;
      LODWORD(v3) = a1[27];
    }
    while (v5 < (int)v3);
  }
  uint64_t v16 = *a2;
  uint64_t v15 = a2[1];
  if (v15 == *a2)
  {
    uint64_t v16 = a2[1];
    if ((v3 & 0x80000000) != 0) {
      goto LABEL_71;
    }
    goto LABEL_52;
  }
  unint64_t v17 = 0;
  do
  {
    uint64_t v18 = v16 + 328 * v17;
    uint64_t v21 = *(void *)(v18 + 80);
    float v20 = (uint64_t *)(v18 + 80);
    uint64_t v19 = v21;
    uint64_t v22 = v20[1];
    if (v22 != v21)
    {
      unint64_t v23 = 0;
      do
      {
        int v24 = *(_DWORD *)(v19 + 4 * v23);
        if (v24 && v24 != a1[26])
        {
          if (v4 >= v62)
          {
            unint64_t v26 = __p;
            uint64_t v27 = (v4 - __p) >> 2;
            unint64_t v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v29 = v62 - __p;
            if ((v62 - __p) >> 1 > v28) {
              unint64_t v28 = v29 >> 1;
            }
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v30 = v28;
            }
            if (v30)
            {
              uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v62, v30);
              unint64_t v26 = __p;
              uint64_t v4 = v61;
              int v24 = *(_DWORD *)(v19 + 4 * v23);
            }
            else
            {
              uint64_t v31 = 0;
            }
            int v32 = &v31[4 * v27];
            *(_DWORD *)int v32 = v24;
            unint64_t v25 = v32 + 4;
            while (v4 != v26)
            {
              int v33 = *((_DWORD *)v4 - 1);
              v4 -= 4;
              *((_DWORD *)v32 - 1) = v33;
              v32 -= 4;
            }
            std::string __p = v32;
            long long v62 = &v31[4 * v30];
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v4 = v24;
            unint64_t v25 = v4 + 4;
          }
          long long v61 = v25;
          uint64_t v22 = v20[1];
          uint64_t v19 = *v20;
          uint64_t v4 = v25;
        }
        ++v23;
      }
      while (v23 < (v22 - v19) >> 2);
      uint64_t v16 = *a2;
      uint64_t v15 = a2[1];
    }
    ++v17;
  }
  while (0x8F9C18F9C18F9C19 * ((v15 - v16) >> 3) > v17);
  LODWORD(v3) = a1[27];
  if ((v3 & 0x80000000) == 0)
  {
LABEL_52:
    int v34 = 0;
    do
    {
      if (v4 >= v62)
      {
        uint64_t v36 = __p;
        uint64_t v37 = (v4 - __p) >> 2;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v39 = v62 - __p;
        if ((v62 - __p) >> 1 > v38) {
          unint64_t v38 = v39 >> 1;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40)
        {
          uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v62, v40);
          uint64_t v36 = __p;
          uint64_t v4 = v61;
        }
        else
        {
          uint64_t v41 = 0;
        }
        int v42 = &v41[4 * v37];
        *(_DWORD *)int v42 = a1[26];
        uint64_t v35 = v42 + 4;
        while (v4 != v36)
        {
          int v43 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *((_DWORD *)v42 - 1) = v43;
          v42 -= 4;
        }
        std::string __p = v42;
        long long v62 = &v41[4 * v40];
        if (v36) {
          operator delete(v36);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v4 = a1[26];
        uint64_t v35 = v4 + 4;
      }
      long long v61 = v35;
      LODWORD(v3) = a1[27];
      uint64_t v4 = v35;
      BOOL v44 = v34++ < (int)v3;
    }
    while (v44);
    uint64_t v16 = *a2;
    uint64_t v15 = a2[1];
  }
LABEL_71:
  if (v15 != v16)
  {
    unint64_t v45 = 0;
    int v46 = v3;
    do
    {
      uint64_t v47 = (kaldi::quasar::ErrorRegion *)(v16 + 328 * v45);
      unint64_t v48 = (int *)*((void *)v47 + 10);
      int v49 = 0;
      uint64_t v50 = *((void *)v47 + 11) - (void)v48;
      if (v50)
      {
        unint64_t v51 = v50 >> 2;
        if (v51 <= 1) {
          unint64_t v51 = 1;
        }
        do
        {
          int v53 = *v48++;
          int v52 = v53;
          if (v53 && v52 != a1[26]) {
            ++v49;
          }
          --v51;
        }
        while (v51);
      }
      if ((int)v3 >= 1)
      {
        uint64_t v54 = 4 * v46;
        uint64_t v55 = -1;
        uint64_t v56 = 1;
        do
        {
          ContextAttribute = kaldi::quasar::AttributeFactory::CreateContextAttribute((kaldi::quasar::AttributeFactory *)(a1 + 2), *(_DWORD *)&__p[4 * v55 + v54], v55, 3u, 1u);
          kaldi::quasar::ErrorRegion::AddAttribute(v47, (kaldi::quasar::AbstractAttribute *)ContextAttribute, 0);
          int v58 = kaldi::quasar::AttributeFactory::CreateContextAttribute((kaldi::quasar::AttributeFactory *)(a1 + 2), *(_DWORD *)&__p[4 * v56 + v54], v56, 3u, 1u);
          kaldi::quasar::ErrorRegion::AddAttribute(v47, (kaldi::quasar::AbstractAttribute *)v58, 0);
          uint64_t v3 = (int)a1[27];
          --v55;
          BOOL v44 = v56++ < v3;
        }
        while (v44);
        uint64_t v16 = *a2;
        uint64_t v15 = a2[1];
      }
      v46 += v49;
      ++v45;
    }
    while (0x8F9C18F9C18F9C19 * ((v15 - v16) >> 3) > v45);
  }
  if (__p) {
    operator delete(__p);
  }
}

void sub_1B1C980BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ErrorBlamer::GetTimeAlignedErrorRegions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v7 = *(float *)(a1 + 116);
  float v6 = *(float *)(a1 + 120);
  std::vector<std::vector<double>>::vector(v13, 2uLL);
  uint64_t v12 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)v13[0], 2uLL, &v12);
  uint64_t v12 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)(v13[0] + 3), 2uLL, &v12);
  unint64_t v8 = v13[0];
  **v13[0] = v6;
  v8[3][1] = v7;
  fst::ScaleLattice<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,double>(v13, a2);
  uint64_t v12 = v13;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  float v10 = *(float *)(a1 + 116);
  float v9 = *(float *)(a1 + 120);
  std::vector<std::vector<double>>::vector(v13, 2uLL);
  uint64_t v12 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)v13[0], 2uLL, &v12);
  uint64_t v12 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)(v13[0] + 3), 2uLL, &v12);
  int v11 = v13[0];
  **v13[0] = v9;
  v11[3][1] = v10;
  fst::ScaleLattice<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,double>(v13, a3);
  uint64_t v12 = v13;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  kaldi::quasar::ErrorBlamer::GetBestPath();
}

void sub_1B1C98980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  *(void *)(v54 + 8) = v55;
  kaldi::quasar::ErrorRegion::~ErrorRegion((kaldi::quasar::ErrorRegion *)&a54);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst((void *)(v56 - 152));
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst((void *)(v56 - 136));
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::ErrorBlamer::ComputeImpactOfErrorOnSucceedingErrorRegions(uint64_t a1, void *a2)
{
  int v2 = *(_DWORD *)(a1 + 108);
  uint64_t v3 = a2[10];
  unint64_t v4 = (unint64_t)(a2[11] - v3) >> 2;
  if (((v4 - 1) & 0x80000000) == 0)
  {
    uint64_t v5 = a2[7];
    unint64_t v6 = (unint64_t)(a2[8] - v5) >> 2;
    if (((v6 - 1) & 0x80000000) == 0)
    {
      int v7 = v6 - 2;
      int v8 = v4 - 2;
      do
      {
        if (*(_DWORD *)(v3 + 4 * (v8 + 1)) != *(_DWORD *)(v5 + 4 * (v7 + 1))) {
          break;
        }
        --v2;
        int v9 = v8-- | v7--;
      }
      while ((v9 & 0x80000000) == 0);
    }
  }
  return v2 & ~(v2 >> 31);
}

void fst::ScaleLattice<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,double>(double ***a1, uint64_t a2)
{
  std::vector<std::vector<double>>::vector(&v27, 2uLL);
  unint64_t v23 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize(v27, 2uLL, &v23);
  unint64_t v23 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize(v27 + 24, 2uLL, &v23);
  uint64_t v4 = v27;
  *(void *)(*(void *)(v27 + 24) + 8) = 0x3FF0000000000000;
  **(void **)uint64_t v4 = 0x3FF0000000000000;
  unint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  if ((unsigned char *)((char *)v5 - (char *)*a1) == (char *)v28 - v4)
  {
    while (v6 != v5)
    {
      int v8 = *v6;
      int v7 = v6[1];
      int v9 = *(double **)v4;
      if ((char *)v7 - (char *)*v6 != *(void *)(v4 + 8) - *(void *)v4) {
        goto LABEL_8;
      }
      while (v8 != v7)
      {
        if (*v8 != *v9) {
          goto LABEL_8;
        }
        ++v8;
        ++v9;
      }
      v6 += 3;
      v4 += 24;
    }
    unint64_t v23 = (void **)&v27;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v23);
  }
  else
  {
LABEL_8:
    unint64_t v23 = (void **)&v27;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v23);
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 160))(a2);
    if (v10 >= 1)
    {
      int v11 = v10;
      uint64_t v12 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 296))(a2, v12, &v33);
        while (!(*(unsigned int (**)(uint64_t))(*(void *)v33 + 24))(v33))
        {
          uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 32))(v33);
          uint64_t v27 = *(void *)v13;
          unint64_t v28 = *(void **)(v13 + 8);
          unint64_t v30 = 0;
          uint64_t v31 = 0;
          uint64_t v29 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v29, *(const void **)(v13 + 16), *(void *)(v13 + 24), (uint64_t)(*(void *)(v13 + 24) - *(void *)(v13 + 16)) >> 2);
          int v32 = *(_DWORD *)(v13 + 40);
          float v14 = INFINITY;
          float v15 = INFINITY;
          if (*(float *)&v28 != INFINITY)
          {
            float v14 = (**a1)[1] * *((float *)&v28 + 1) + ***a1 * *(float *)&v28;
            float v15 = (*a1)[3][1] * *((float *)&v28 + 1) + *(*a1)[3] * *(float *)&v28;
          }
          unint64_t v23 = (void **)__PAIR64__(LODWORD(v15), LODWORD(v14));
          unint64_t v25 = 0;
          uint64_t v26 = 0;
          std::string __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v29, (uint64_t)v30, (v30 - (unsigned char *)v29) >> 2);
          unint64_t v28 = v23;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v29, (char *)__p, (uint64_t)v25, (v25 - (unsigned char *)__p) >> 2);
          if (__p)
          {
            unint64_t v25 = __p;
            operator delete(__p);
          }
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v33 + 88))(v33, &v27);
          if (v29)
          {
            unint64_t v30 = v29;
            operator delete(v29);
          }
          (*(void (**)(uint64_t))(*(void *)v33 + 40))(v33);
        }
        if (v33) {
          (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32))(&v27, a2, v12);
        LODWORD(v33) = HIDWORD(v27);
        LODWORD(v23) = v27;
        int v35 = 2139095040;
        float v34 = INFINITY;
        if (*(float *)&v27 != INFINITY || *(float *)&v33 != v34 || (uint64_t v16 = v28, v29 != v28))
        {
          float v17 = INFINITY;
          float v18 = INFINITY;
          if (*(float *)&v27 != INFINITY)
          {
            float v17 = (**a1)[1] * *((float *)&v27 + 1) + ***a1 * *(float *)&v27;
            float v18 = (*a1)[3][1] * *((float *)&v27 + 1) + *(*a1)[3] * *(float *)&v27;
          }
          *(float *)uint64_t v19 = v17;
          *(float *)&v19[1] = v18;
          uint64_t v21 = 0;
          uint64_t v22 = 0;
          float v20 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v20, v28, (uint64_t)v29, ((unsigned char *)v29 - (unsigned char *)v28) >> 2);
          (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)a2 + 184))(a2, v12, v19);
          if (v20)
          {
            uint64_t v21 = v20;
            operator delete(v20);
          }
          uint64_t v16 = v28;
        }
        if (v16)
        {
          uint64_t v29 = v16;
          operator delete(v16);
        }
        uint64_t v12 = (v12 + 1);
      }
      while (v12 != v11);
    }
  }
}

void sub_1B1C98F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char *a13, void *a14, uint64_t a15, uint64_t a16, char a17, void *a18, void *a19, uint64_t a20)
{
  a13 = &a17;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ErrorBlamer::GetBestPath()
{
}

void sub_1B1C9907C(_Unwind_Exception *a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::ErrorBlamer::RemoveLanguageModelCost(uint64_t a1, uint64_t a2)
{
  std::vector<std::vector<double>>::vector(v10, 2uLL);
  v9[0] = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)v10[0], 2uLL, v9);
  v9[0] = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)(v10[0] + 3), 2uLL, v9);
  uint64_t v4 = v10[0];
  **(void **)v10[0] = 0;
  v4[3][1] = 1.0;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
  fst::ScaleLattice<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,double>(v10, v5);
  kaldi::AddTransitionProbs(*(kaldi **)(a1 + 136), v5, *(float *)(a1 + 124), *(float *)(a1 + 128));
  float v6 = *(float *)(a1 + 120);
  std::vector<std::vector<double>>::vector(v9, 2uLL);
  int v11 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)v9[0], 2uLL, &v11);
  int v11 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)(v9[0] + 3), 2uLL, &v11);
  int v7 = v9[0];
  **(double **)v9[0] = v6;
  *((void *)v7[3] + 1) = 0;
  fst::ScaleLattice<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,double>((double ***)v9, v5);
  int v11 = v9;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  v9[0] = (void **)v10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v9);
  return v5;
}

void sub_1B1C991E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v14 - 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v13;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 40));
  a10 = (void **)&a13;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ErrorBlamer::ReplaceEpsilonWithNoLabel(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(a2 + 8) + 72) - *(void *)(*(void *)(a2 + 8) + 64);
  if ((int)(v2 >> 3) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (v2 >> 3);
    do
    {
      float v18 = &unk_1F0A3E980;
      unint64_t v21 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a2);
      uint64_t v7 = *(void *)(a2 + 8);
      uint64_t v8 = *(void *)(*(void *)(v7 + 64) + 8 * v5);
      uint64_t v19 = v8;
      uint64_t v20 = v7 + 8;
      for (unint64_t i = v21; ; unint64_t i = ++v21)
      {
        uint64_t v11 = v8 + 48;
        uint64_t v10 = *(void *)(v8 + 48);
        if (i >= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v11 + 8) - v10) >> 4)) {
          break;
        }
        uint64_t v12 = v10 + 48 * i;
        v13[0] = *(void *)v12;
        v13[1] = *(void *)(v12 + 8);
        float v15 = 0;
        uint64_t v16 = 0;
        std::string __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v12 + 16), *(void *)(v12 + 24), (uint64_t)(*(void *)(v12 + 24) - *(void *)(v12 + 16)) >> 2);
        int v17 = *(_DWORD *)(v12 + 40);
        if (!HIDWORD(v13[0]) || HIDWORD(v13[0]) == *(_DWORD *)(a1 + 104)) {
          HIDWORD(v13[0]) = -1;
        }
        fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::SetValue((uint64_t)&v18, (float *)v13);
        if (__p)
        {
          float v15 = __p;
          operator delete(__p);
        }
        uint64_t v8 = v19;
      }
      ++v5;
    }
    while (v5 != v6);
  }
}

void sub_1B1C993A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ErrorBlamer::ComputeRankOfReference()
{
}

void sub_1B1C99A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  a13 = &a17;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  a13 = &a20;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::ErrorBlamer::ComputeBestPathTotalScore()
{
}

void sub_1B1C99C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ErrorBlamer::GetReferenceScoreInHypothesis()
{
}

void sub_1B1C99D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst((uint64_t *)va);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst((uint64_t *)va1);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ErrorBlamer::RemoveWeightsFromLattice(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(a2 + 8) + 72) - *(void *)(*(void *)(a2 + 8) + 64);
  if ((int)(v2 >> 3) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (v2 >> 3);
    do
    {
      uint64_t v14 = &unk_1F0A3E8A0;
      unint64_t v17 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a2);
      uint64_t v6 = *(void *)(a2 + 8);
      uint64_t v7 = *(void *)(*(void *)(v6 + 64) + 8 * v4);
      uint64_t v15 = v7;
      uint64_t v16 = v6 + 8;
      for (unint64_t i = v17; ; unint64_t i = ++v17)
      {
        uint64_t v10 = v7 + 24;
        uint64_t v9 = *(void *)(v7 + 24);
        if (i >= 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v10 + 8) - v9) >> 2)) {
          break;
        }
        uint64_t v11 = v9 + 20 * i;
        v12[0] = *(void *)v11;
        int v13 = *(_DWORD *)(v11 + 16);
        v12[1] = 0;
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::SetValue((uint64_t)&v14, (uint64_t)v12);
        uint64_t v7 = v15;
      }
      ++v4;
    }
    while (v4 != v5);
  }
}

void fst::ArcSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1)
{
  v1[0] = a1;
  v1[1] = (uint64_t)&v4;
  *(_OWORD *)std::string __p = 0u;
  long long v3 = 0u;
  fst::StateMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, v1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B1C99F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::Compose<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  switch(*(_DWORD *)(a4 + 4))
  {
    case 0:
      fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase(result, a2);
    case 1:
      fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>();
    case 2:
      fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>();
    case 3:
      fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>();
    case 4:
      fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>();
    default:
      if (*(unsigned char *)a4) {
        fst::Connect<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a3);
      }
      return result;
  }
}

void sub_1B1C9A214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<std::vector<double>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    char v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1B1C9A2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<kaldi::quasar::ErrorRegion>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (void (***)(void))**a1;
  if (v2)
  {
    char v4 = (void (***)(void))v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 41;
      uint64_t v7 = v4 - 41;
      do
      {
        (**v7)(v7);
        v6 -= 41;
        BOOL v8 = v7 == v2;
        v7 -= 41;
      }
      while (!v8);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1C9A410(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<kaldi::quasar::ErrorRegion>::__push_back_slow_path<kaldi::quasar::ErrorRegion const&>(uint64_t *a1, const kaldi::quasar::ErrorRegion *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8F9C18F9C18F9C19 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xC7CE0C7CE0C7CELL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8F9C18F9C18F9C19 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x63E7063E7063E7) {
    unint64_t v9 = 0xC7CE0C7CE0C7CELL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::ErrorRegion>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  int v13 = v10;
  uint64_t v14 = (kaldi::quasar::ErrorRegion *)&v10[328 * v4];
  uint64_t v16 = &v10[328 * v9];
  kaldi::quasar::ErrorRegion::ErrorRegion(v14, a2);
  uint64_t v15 = (char *)v14 + 328;
  std::vector<kaldi::quasar::ErrorRegion>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<kaldi::quasar::ErrorRegion>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B1C9A538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::ErrorRegion>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::quasar::ErrorRegion>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::ErrorRegion>,std::reverse_iterator<kaldi::quasar::ErrorRegion*>,std::reverse_iterator<kaldi::quasar::ErrorRegion*>,std::reverse_iterator<kaldi::quasar::ErrorRegion*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::ErrorRegion>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xC7CE0C7CE0C7CFLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(328 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::ErrorRegion>,std::reverse_iterator<kaldi::quasar::ErrorRegion*>,std::reverse_iterator<kaldi::quasar::ErrorRegion*>,std::reverse_iterator<kaldi::quasar::ErrorRegion*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0;
        a3 + i != a5;
        kaldi::quasar::ErrorRegion::ErrorRegion((kaldi::quasar::ErrorRegion *)(i + a7), (const kaldi::quasar::ErrorRegion *)(i + a3)))
  {
    i -= 328;
  }
  return a6;
}

uint64_t std::__split_buffer<kaldi::quasar::ErrorRegion>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 328;
    (**(void (***)(void))(i - 328))();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<std::vector<std::pair<int,float>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1B1C9A79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t fst::StateMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v7 = 0;
      do
      {
        fst::ArcSortMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 240))(a1, v7);
        for (unint64_t i = a2[5]; ; a2[5] = i)
        {
          uint64_t v9 = a2[2];
          if (i >= 0xCCCCCCCCCCCCCCCDLL * ((a2[3] - v9) >> 2)) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)a1 + 208))(a1, v7, v9 + 20 * i);
          unint64_t i = a2[5] + 1;
        }
        (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 32))(&v10);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 184))(a1, v7, &v10);
        uint64_t v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192))(a1, v5 & 0x3FFF0FFF0007 | (((v5 >> 16) & 1) << 30) | 0x10000000, 0x3FFFFFFF0007);
  }
  return result;
}

void fst::ArcSortMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetState(uint64_t *a1, uint64_t a2)
{
  a1[5] = 0;
  unint64_t v4 = a1 + 2;
  a1[3] = a1[2];
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)*a1 + 40))(*a1);
  std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::reserve(v4, v5);
  uint64_t v6 = *a1;
  unint64_t v16 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v6 + 136))(v6, a2, v14);
  while (1)
  {
    if (!v14[0])
    {
      if (v16 >= v14[2]) {
        goto LABEL_16;
      }
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(void))(*(void *)v14[0] + 24))(v14[0])) {
      break;
    }
    if (v14[0])
    {
      uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v14[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v7 = v14[1] + 20 * v16;
LABEL_8:
    unint64_t v8 = a1[3];
    if (v8 >= a1[4])
    {
      uint64_t v9 = std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const&>(v4, v7);
    }
    else
    {
      *(void *)unint64_t v8 = *(void *)v7;
      *(void *)(v8 + 8) = *(void *)(v7 + 8);
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(v7 + 16);
      uint64_t v9 = v8 + 20;
    }
    a1[3] = v9;
    if (v14[0]) {
      (*(void (**)(void))(*(void *)v14[0] + 40))(v14[0]);
    }
    else {
      ++v16;
    }
  }
  if (v14[0])
  {
    (*(void (**)(void))(*(void *)v14[0] + 8))();
    goto LABEL_18;
  }
LABEL_16:
  if (v15) {
    --*v15;
  }
LABEL_18:
  uint64_t v10 = (uint64_t *)a1[2];
  uint64_t v11 = (uint64_t *)a1[3];
  unint64_t v12 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v11 - (char *)v10) >> 2));
  if (v11 == v10) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,false>(v10, v11, (uint64_t)v14, v13, 1);
}

void sub_1B1C9AC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::StateSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 20;
    if (result + 20 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        uint64_t v5 = v2;
        uint64_t v6 = *(void *)(v4 + 20);
        uint64_t v7 = *(void *)v4;
        if ((int)v6 < (int)*(void *)v4)
        {
          uint64_t v8 = *(void *)(v4 + 28);
          int v9 = *(_DWORD *)(v4 + 36);
          uint64_t v10 = v3;
          while (1)
          {
            uint64_t v11 = result + v10;
            *(void *)(v11 + 2std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v7;
            *(void *)(v11 + 28) = *(void *)(result + v10 + 8);
            *(_DWORD *)(v11 + 36) = *(_DWORD *)(result + v10 + 16);
            if (!v10) {
              break;
            }
            uint64_t v7 = *(void *)(v11 - 20);
            v10 -= 20;
            if ((int)v6 >= (int)v7)
            {
              uint64_t v12 = result + v10 + 20;
              goto LABEL_10;
            }
          }
          uint64_t v12 = result;
LABEL_10:
          *(void *)uint64_t v12 = v6;
          *(void *)(v12 + 8) = v8;
          *(_DWORD *)(v12 + 16) = v9;
        }
        uint64_t v2 = v5 + 20;
        v3 += 20;
        uint64_t v4 = v5;
      }
      while (v5 + 20 != a2);
    }
  }
  return result;
}

uint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = (uint64_t *)((char *)result + 20);
    if ((uint64_t *)((char *)result + 20) != a2)
    {
      uint64_t v3 = (_DWORD *)result + 9;
      do
      {
        uint64_t v4 = v2;
        uint64_t v5 = *(uint64_t *)((char *)result + 20);
        uint64_t v6 = *result;
        if ((int)v5 < (int)*result)
        {
          uint64_t v7 = *(uint64_t *)((char *)result + 28);
          int v8 = *((_DWORD *)result + 9);
          int v9 = v3;
          do
          {
            uint64_t v10 = v9;
            *((void *)v9 - std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v6;
            *((void *)v9 - 1) = *(void *)(v9 - 7);
            int v11 = *(v9 - 5);
            v9 -= 5;
            _DWORD *v10 = v11;
            uint64_t v6 = *((void *)v10 - 7);
          }
          while ((int)v5 < (int)v6);
          *((void *)v9 - std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v5;
          *((void *)v9 - 1) = v7;
          *int v9 = v8;
        }
        uint64_t v2 = (uint64_t *)((char *)v4 + 20);
        v3 += 5;
        uint64_t result = v4;
      }
      while ((uint64_t *)((char *)v4 + 20) != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  uint64_t v5 = *a3;
  if ((int)*a2 < (int)*a1)
  {
    int v7 = *((_DWORD *)a1 + 2);
    int v6 = *((_DWORD *)a1 + 3);
    int v8 = *((_DWORD *)a1 + 4);
    if ((int)v5 < (int)v3)
    {
      *a1 = v5;
      a1[1] = a3[1];
      *((_DWORD *)a1 + 4) = *((_DWORD *)a3 + 4);
      *a3 = v4;
      *((_DWORD *)a3 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v7;
      *((_DWORD *)a3 + 3) = v6;
      *((_DWORD *)a3 + 4) = v8;
      return 1;
    }
    *a1 = v3;
    a1[1] = a2[1];
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    *a2 = v4;
    *((_DWORD *)a2 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v7;
    *((_DWORD *)a2 + 3) = v6;
    *((_DWORD *)a2 + 4) = v8;
    if ((int)*a3 >= (int)v4) {
      return 1;
    }
    *a2 = *a3;
    a2[1] = a3[1];
    *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
    *a3 = v4;
    *((_DWORD *)a3 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v7;
    *((_DWORD *)a3 + 3) = v6;
    *((_DWORD *)a3 + 4) = v8;
    return 2;
  }
  if ((int)v5 < (int)v3)
  {
    int v9 = *((_DWORD *)a2 + 4);
    *a2 = v5;
    uint64_t v10 = a3[1];
    *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
    uint64_t v11 = a2[1];
    a2[1] = v10;
    *a3 = v3;
    a3[1] = v11;
    *((_DWORD *)a3 + 4) = v9;
    uint64_t v12 = *a1;
    if ((int)*a2 >= (int)*a1) {
      return 1;
    }
    int v13 = *((_DWORD *)a1 + 4);
    *a1 = *a2;
    uint64_t v14 = a2[1];
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    uint64_t v15 = a1[1];
    a1[1] = v14;
    *a2 = v12;
    a2[1] = v15;
    *((_DWORD *)a2 + 4) = v13;
    return 2;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if ((int)*a1 >= *((_DWORD *)a2 - 5))
  {
    uint64_t v5 = (uint64_t *)((char *)a1 + 20);
    do
    {
      uint64_t v3 = v5;
      if (v5 >= a2) {
        break;
      }
      uint64_t v5 = (uint64_t *)((char *)v5 + 20);
    }
    while ((int)v2 >= *(_DWORD *)v3);
  }
  else
  {
    uint64_t v3 = a1;
    do
    {
      int v4 = *((_DWORD *)v3 + 5);
      uint64_t v3 = (uint64_t *)((char *)v3 + 20);
    }
    while ((int)v2 >= v4);
  }
  if (v3 < a2)
  {
    do
    {
      int v6 = *((_DWORD *)a2 - 5);
      a2 = (uint64_t *)((char *)a2 - 20);
    }
    while ((int)v2 < v6);
  }
  uint64_t v7 = a1[1];
  int v8 = *((_DWORD *)a1 + 4);
  if (v3 < a2)
  {
    uint64_t v9 = *v3;
    uint64_t v10 = *a2;
    do
    {
      int v11 = *((_DWORD *)v3 + 4);
      uint64_t *v3 = v10;
      uint64_t v12 = a2[1];
      *((_DWORD *)v3 + 4) = *((_DWORD *)a2 + 4);
      uint64_t v13 = v3[1];
      v3[1] = v12;
      *a2 = v9;
      a2[1] = v13;
      *((_DWORD *)a2 + 4) = v11;
      do
      {
        uint64_t v14 = *(uint64_t *)((char *)v3 + 20);
        uint64_t v3 = (uint64_t *)((char *)v3 + 20);
        uint64_t v9 = v14;
      }
      while ((int)v2 >= (int)v14);
      do
      {
        uint64_t v15 = *(uint64_t *)((char *)a2 - 20);
        a2 = (uint64_t *)((char *)a2 - 20);
        uint64_t v10 = v15;
      }
      while ((int)v2 < (int)v15);
    }
    while (v3 < a2);
  }
  if ((uint64_t *)((char *)v3 - 20) != a1)
  {
    *a1 = *(uint64_t *)((char *)v3 - 20);
    a1[1] = *(uint64_t *)((char *)v3 - 12);
    *((_DWORD *)a1 + 4) = *((_DWORD *)v3 - 1);
  }
  *(uint64_t *)((char *)v3 - 2std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v2;
  *(uint64_t *)((char *)v3 - 1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v7;
  *((_DWORD *)v3 - 1) = v8;
  return v3;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &>(uint64_t *a1, void *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  int v5 = *((_DWORD *)a1 + 4);
  do
  {
    uint64_t v6 = *(uint64_t *)((char *)a1 + v2 + 20);
    v2 += 20;
  }
  while ((int)v6 < (int)v3);
  unint64_t v7 = (unint64_t)a1 + v2;
  if (v2 == 20)
  {
    do
    {
      if (v7 >= (unint64_t)a2) {
        break;
      }
      int v9 = *((_DWORD *)a2 - 5);
      a2 = (void *)((char *)a2 - 20);
    }
    while (v9 >= (int)v3);
  }
  else
  {
    do
    {
      int v8 = *((_DWORD *)a2 - 5);
      a2 = (void *)((char *)a2 - 20);
    }
    while (v8 >= (int)v3);
  }
  if (v7 >= (unint64_t)a2)
  {
    unint64_t v11 = (unint64_t)a1 + v2;
  }
  else
  {
    uint64_t v10 = *a2;
    unint64_t v11 = (unint64_t)a1 + v2;
    uint64_t v12 = a2;
    do
    {
      int v13 = *(_DWORD *)(v11 + 16);
      *(void *)unint64_t v11 = v10;
      uint64_t v14 = v12[1];
      *(_DWORD *)(v11 + 16) = *((_DWORD *)v12 + 4);
      uint64_t v15 = *(void *)(v11 + 8);
      *(void *)(v11 + 8) = v14;
      *uint64_t v12 = v6;
      v12[1] = v15;
      *((_DWORD *)v12 + 4) = v13;
      do
      {
        uint64_t v16 = *(void *)(v11 + 20);
        v11 += 20;
        uint64_t v6 = v16;
      }
      while ((int)v16 < (int)v3);
      do
      {
        uint64_t v17 = *(void *)((char *)v12 - 20);
        uint64_t v12 = (void *)((char *)v12 - 20);
        uint64_t v10 = v17;
      }
      while ((int)v17 >= (int)v3);
    }
    while (v11 < (unint64_t)v12);
  }
  if ((uint64_t *)(v11 - 20) != a1)
  {
    *a1 = *(void *)(v11 - 20);
    a1[1] = *(void *)(v11 - 12);
    *((_DWORD *)a1 + 4) = *(_DWORD *)(v11 - 4);
  }
  *(void *)(v11 - 2std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v3;
  *(void *)(v11 - 1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v4;
  *(_DWORD *)(v11 - 4) = v5;
  return v11 - 20;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = *(void *)(a2 - 20);
      uint64_t v7 = *(void *)a1;
      if ((int)v6 < (int)*(void *)a1)
      {
        int v8 = *(_DWORD *)(a1 + 16);
        *(void *)a1 = v6;
        uint64_t v9 = *(void *)(a2 - 12);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 4);
        uint64_t v10 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v9;
        *(void *)(a2 - 2std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v7;
        *(void *)(a2 - 1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v10;
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)a1, (uint64_t *)(a1 + 20), (uint64_t *)(a2 - 20));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a1 + 20, a1 + 40, a2 - 20);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a1 + 20, a1 + 40, a1 + 60, a2 - 20);
      return 1;
    default:
      unint64_t v11 = (uint64_t *)(a1 + 40);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)a1, (uint64_t *)(a1 + 20), (uint64_t *)(a1 + 40));
      uint64_t v12 = a1 + 60;
      if (a1 + 60 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    uint64_t v15 = *(void *)v12;
    uint64_t v16 = *v11;
    if ((int)*(void *)v12 < (int)*v11)
    {
      uint64_t v17 = *(void *)(v12 + 8);
      int v18 = *(_DWORD *)(v12 + 16);
      uint64_t v19 = v13;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        *(void *)(v20 + 6std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v16;
        *(void *)(v20 + 68) = *(void *)(a1 + v19 + 48);
        *(_DWORD *)(v20 + 76) = *(_DWORD *)(a1 + v19 + 56);
        if (v19 == -40) {
          break;
        }
        uint64_t v16 = *(void *)(v20 + 20);
        v19 -= 20;
        if ((int)v15 >= (int)v16)
        {
          uint64_t v21 = a1 + v19 + 60;
          goto LABEL_12;
        }
      }
      uint64_t v21 = a1;
LABEL_12:
      *(void *)uint64_t v21 = v15;
      *(void *)(v21 + 8) = v17;
      *(_DWORD *)(v21 + 16) = v18;
      if (++v14 == 8) {
        return v12 + 20 == a2;
      }
    }
    unint64_t v11 = (uint64_t *)v12;
    v13 += 20;
    v12 += 20;
    if (v12 == a2) {
      return 1;
    }
  }
}

double std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  uint64_t v9 = *(void *)a3;
  if ((int)*(void *)a4 < (int)*(void *)a3)
  {
    int v10 = *(_DWORD *)(a3 + 16);
    *(void *)a3 = *(void *)a4;
    double result = *(double *)(a4 + 8);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
    uint64_t v11 = *(void *)(a3 + 8);
    *(double *)(a3 + 8) = result;
    *(void *)a4 = v9;
    *(void *)(a4 + 8) = v11;
    *(_DWORD *)(a4 + 16) = v10;
    uint64_t v12 = *(void *)a2;
    if ((int)*(void *)a3 < (int)*(void *)a2)
    {
      int v13 = *(_DWORD *)(a2 + 16);
      *(void *)a2 = *(void *)a3;
      double result = *(double *)(a3 + 8);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
      uint64_t v14 = *(void *)(a2 + 8);
      *(double *)(a2 + 8) = result;
      *(void *)a3 = v12;
      *(void *)(a3 + 8) = v14;
      *(_DWORD *)(a3 + 16) = v13;
      uint64_t v15 = *(void *)a1;
      if ((int)*(void *)a2 < (int)*(void *)a1)
      {
        int v16 = *(_DWORD *)(a1 + 16);
        *(void *)a1 = *(void *)a2;
        double result = *(double *)(a2 + 8);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        uint64_t v17 = *(void *)(a1 + 8);
        *(double *)(a1 + 8) = result;
        *(void *)a2 = v15;
        *(void *)(a2 + 8) = v17;
        *(_DWORD *)(a2 + 16) = v16;
      }
    }
  }
  return result;
}

double std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a2, a3, a4);
  uint64_t v11 = *(void *)a4;
  if ((int)*(void *)a5 < (int)*(void *)a4)
  {
    int v12 = *(_DWORD *)(a4 + 16);
    *(void *)a4 = *(void *)a5;
    double result = *(double *)(a5 + 8);
    *(_DWORD *)(a4 + 16) = *(_DWORD *)(a5 + 16);
    uint64_t v13 = *(void *)(a4 + 8);
    *(double *)(a4 + 8) = result;
    *(void *)a5 = v11;
    *(void *)(a5 + 8) = v13;
    *(_DWORD *)(a5 + 16) = v12;
    uint64_t v14 = *(void *)a3;
    if ((int)*(void *)a4 < (int)*(void *)a3)
    {
      int v15 = *(_DWORD *)(a3 + 16);
      *(void *)a3 = *(void *)a4;
      double result = *(double *)(a4 + 8);
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
      uint64_t v16 = *(void *)(a3 + 8);
      *(double *)(a3 + 8) = result;
      *(void *)a4 = v14;
      *(void *)(a4 + 8) = v16;
      *(_DWORD *)(a4 + 16) = v15;
      uint64_t v17 = *(void *)a2;
      if ((int)*(void *)a3 < (int)*(void *)a2)
      {
        int v18 = *(_DWORD *)(a2 + 16);
        *(void *)a2 = *(void *)a3;
        double result = *(double *)(a3 + 8);
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
        uint64_t v19 = *(void *)(a2 + 8);
        *(double *)(a2 + 8) = result;
        *(void *)a3 = v17;
        *(void *)(a3 + 8) = v19;
        *(_DWORD *)(a3 + 16) = v18;
        uint64_t v20 = *(void *)a1;
        if ((int)*(void *)a2 < (int)*(void *)a1)
        {
          int v21 = *(_DWORD *)(a1 + 16);
          *(void *)a1 = *(void *)a2;
          double result = *(double *)(a2 + 8);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
          uint64_t v22 = *(void *)(a1 + 8);
          *(double *)(a1 + 8) = result;
          *(void *)a2 = v20;
          *(void *)(a2 + 8) = v22;
          *(_DWORD *)(a2 + 16) = v21;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 20;
    if ((uint64_t)a2 - a1 >= 21)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = (uint64_t *)(a1 + 20 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a4, v9, v12);
        int v12 = (uint64_t *)((char *)v12 - 20);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        uint64_t v15 = *v14;
        if ((int)*v14 < (int)*(void *)a1)
        {
          int v16 = *((_DWORD *)v14 + 4);
          uint64_t *v14 = *(void *)a1;
          uint64_t v17 = *(void *)(a1 + 8);
          *((_DWORD *)v14 + 4) = *(_DWORD *)(a1 + 16);
          uint64_t v18 = v14[1];
          v14[1] = v17;
          *(void *)a1 = v15;
          *(void *)(a1 + 8) = v18;
          *(_DWORD *)(a1 + 16) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a4, v9, (uint64_t *)a1);
        }
        uint64_t v14 = (uint64_t *)((char *)v14 + 20);
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 21)
    {
      int64_t v19 = v8 / 0x14uLL;
      uint64_t v20 = (uint64_t)a2 - 20;
      do
      {
        uint64_t v21 = *(void *)a1;
        int v23 = *(_DWORD *)(a1 + 8);
        int v22 = *(_DWORD *)(a1 + 12);
        int v24 = *(_DWORD *)(a1 + 16);
        uint64_t v25 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a4, v19);
        if (v20 == v25)
        {
          *(void *)uint64_t v25 = v21;
          *(_DWORD *)(v25 + 8) = v23;
          *(_DWORD *)(v25 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v22;
          *(_DWORD *)(v25 + 16) = v24;
        }
        else
        {
          *(void *)uint64_t v25 = *(void *)v20;
          *(void *)(v25 + 8) = *(void *)(v20 + 8);
          *(_DWORD *)(v25 + 16) = *(_DWORD *)(v20 + 16);
          *(void *)uint64_t v20 = v21;
          *(_DWORD *)(v20 + 8) = v23;
          *(_DWORD *)(v20 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v22;
          *(_DWORD *)(v20 + 16) = v24;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, v25 + 20, a4, 0xCCCCCCCCCCCCCCCDLL * ((v25 + 20 - a1) >> 2));
        }
        v20 -= 20;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - result) >> 2)))
    {
      int64_t v5 = (0x999999999999999ALL * (((uint64_t)a4 - result) >> 2)) | 1;
      uint64_t v6 = (uint64_t *)(result + 20 * v5);
      uint64_t v7 = *v6;
      if ((uint64_t)(0x999999999999999ALL * (((uint64_t)a4 - result) >> 2) + 2) < a3)
      {
        uint64_t v8 = *(uint64_t *)((char *)v6 + 20);
        BOOL v10 = __OFSUB__(v7, v8);
        BOOL v9 = (int)v7 - (int)v8 < 0;
        if ((int)v7 < (int)v8) {
          uint64_t v7 = *(uint64_t *)((char *)v6 + 20);
        }
        if (v9 != v10)
        {
          uint64_t v6 = (uint64_t *)((char *)v6 + 20);
          int64_t v5 = 0x999999999999999ALL * (((uint64_t)a4 - result) >> 2) + 2;
        }
      }
      uint64_t v11 = *a4;
      if ((int)v7 >= (int)*a4)
      {
        uint64_t v12 = a4[1];
        int v13 = *((_DWORD *)a4 + 4);
        do
        {
          uint64_t v14 = a4;
          a4 = v6;
          uint64_t *v14 = v7;
          v14[1] = v6[1];
          *((_DWORD *)v14 + 4) = *((_DWORD *)v6 + 4);
          if (v4 < v5) {
            break;
          }
          uint64_t v15 = (2 * v5) | 1;
          uint64_t v6 = (uint64_t *)(result + 20 * v15);
          uint64_t v16 = 2 * v5 + 2;
          uint64_t v7 = *v6;
          if (v16 < a3)
          {
            uint64_t v17 = *(uint64_t *)((char *)v6 + 20);
            BOOL v19 = __OFSUB__(v7, v17);
            BOOL v18 = (int)v7 - (int)v17 < 0;
            if ((int)v7 < (int)v17) {
              uint64_t v7 = *(uint64_t *)((char *)v6 + 20);
            }
            if (v18 != v19)
            {
              uint64_t v6 = (uint64_t *)((char *)v6 + 20);
              uint64_t v15 = v16;
            }
          }
          int64_t v5 = v15;
        }
        while ((int)v7 >= (int)v11);
        *a4 = v11;
        a4[1] = v12;
        *((_DWORD *)a4 + 4) = v13;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = a1 + 20 * v3;
    uint64_t v9 = *(void *)(v6 + 20);
    uint64_t v7 = v6 + 20;
    uint64_t v8 = v9;
    uint64_t v10 = (2 * v3) | 1;
    uint64_t v11 = 2 * v3 + 2;
    if (v11 < a3)
    {
      uint64_t v12 = *(void *)(v7 + 20);
      BOOL v14 = __OFSUB__(v8, v12);
      BOOL v13 = (int)v8 - (int)v12 < 0;
      if ((int)v8 < (int)v12) {
        uint64_t v8 = *(void *)(v7 + 20);
      }
      if (v13 != v14)
      {
        v7 += 20;
        uint64_t v10 = v11;
      }
    }
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = *(void *)(v7 + 8);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(v7 + 16);
    a1 = v7;
    uint64_t v3 = v10;
  }
  while (v10 <= v5);
  return v7;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (uint64_t *)(result + 20 * v4);
    uint64_t v6 = *v5;
    uint64_t v7 = (uint64_t *)(a2 - 20);
    uint64_t v8 = *(void *)(a2 - 20);
    if ((int)*v5 < (int)v8)
    {
      uint64_t v9 = *(void *)(a2 - 12);
      int v10 = *(_DWORD *)(a2 - 4);
      do
      {
        uint64_t v11 = v7;
        uint64_t v7 = v5;
        *uint64_t v11 = v6;
        v11[1] = v5[1];
        *((_DWORD *)v11 + 4) = *((_DWORD *)v5 + 4);
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = (uint64_t *)(result + 20 * v4);
        uint64_t v6 = *v5;
      }
      while ((int)*v5 < (int)v8);
      *uint64_t v7 = v8;
      v7[1] = v9;
      *((_DWORD *)v7 + 4) = v10;
    }
  }
  return result;
}

void fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>()
{
}

void sub_1B1C9BCEC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1F0A3A900;
  uint64_t v8 = *(long long **)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  long long v9 = *v8;
  *(_OWORD *)(a1 + 144) = *v8;
  *(void *)(a1 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = (*(uint64_t (**)(void))(**(void **)v9 + 32))();
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(***(void ***)(a1 + 152) + 32))(**(void **)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), v12);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1B1C9BF70(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1C9C190(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(void *a1, int a2)
{
  unint64_t v4 = (unsigned int *)(*(void *)(a1[22] + 80) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    uint64_t v8 = a1[20];
    uint64_t v7 = a1[21];
    long long v9 = (void *)a1[19];
    uint64_t v10 = (uint64_t)a1;
    int v11 = a2;
    uint64_t v12 = v6;
    uint64_t v13 = v5;
    int v14 = 1;
  }
  else
  {
    uint64_t v7 = a1[20];
    uint64_t v8 = a1[21];
    long long v9 = (void *)a1[18];
    uint64_t v10 = (uint64_t)a1;
    int v11 = a2;
    uint64_t v12 = v5;
    uint64_t v13 = v6;
    int v14 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(v10, v11, v7, v12, v8, v13, v9, v14);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_1B1C9C328(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40A1003FB7);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void *fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal@<X0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  uint64_t result = (*(void *(**)(unint64_t *__return_ptr))(***(void ***)(a1 + 144) + 96))(&v10);
  float v5 = *((float *)&v10 + 1);
  unint64_t v7 = v10;
  LODWORD(v14) = HIDWORD(v7);
  LODWORD(v6) = v7;
  LODWORD(v9) = v10;
  float v13 = INFINITY;
  float v12 = INFINITY;
  if (*(float *)&v10 != INFINITY || v14 != v12)
  {
    uint64_t result = (*(void *(**)(unint64_t *__return_ptr))(***(void ***)(a1 + 152) + 96))(&v9);
    float v5 = *((float *)&v9 + 1);
    unint64_t v8 = v9;
    LODWORD(v13) = HIDWORD(v8);
    LODWORD(v6) = v8;
    float v14 = *(float *)&v9;
    float v12 = INFINITY;
    float v11 = INFINITY;
    if (*(float *)&v9 != INFINITY || v13 != v11)
    {
      float v6 = *(float *)&v9 + *(float *)&v10;
      float v5 = *((float *)&v9 + 1) + *((float *)&v10 + 1);
    }
  }
  *a2 = v6;
  a2[1] = v5;
  return result;
}

void *fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::NullComposeFilter(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *a1 = a4;
  if (!a5) {
    operator new();
  }
  a1[1] = a5;
  a1[2] = (*(uint64_t (**)(void))(**(void **)a4 + 32))();
  a1[3] = (*(uint64_t (**)(void))(**(void **)a1[1] + 32))(*(void *)a1[1]);
  return a1;
}

void sub_1B1C9C640(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3A900;
  uint64_t v2 = a1[17];
  if (v2)
  {
    uint64_t v3 = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1B3EA8670](v3, 0x60C40FFD3A10ELL);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    float v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(void *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1B3EA8670](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1C9C82C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::NullComposeFilter()
{
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(***(void ***)(a1 + 144) + 104))(**(void **)(a1 + 144));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 104))(**(void **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    float v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    float v12 = (void *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1) {
    return 0;
  }
  return v8 == -1 || v7 <= v8;
}

void sub_1B1C9CA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, int a8)
{
  (*(void (**)(void, uint64_t))(*(void *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  uint64_t v18[3] = 0;
  v18[4] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v14 = (unsigned int *)(v15[1] + 20 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0]) {
      goto LABEL_7;
    }
    char v14 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16) {
    --*v16;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1C9CCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    fst::StateSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a9);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, int a2, void *a3, unsigned int *a4, int a5)
{
  unint64_t v10 = a4 + 1;
  if (!a5) {
    unint64_t v10 = a4;
  }
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v10);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
    if ((result & 1) == 0)
    {
      do
      {
        uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
        unint64_t v13 = *(void *)v12;
        v23[0] = *(void *)v12;
        v23[1] = *(void *)(v12 + 8);
        int v24 = *(_DWORD *)(v12 + 16);
        unint64_t v14 = *(void *)a4;
        v21[0] = *(void *)a4;
        v21[1] = *((void *)a4 + 1);
        unsigned int v22 = a4[4];
        if (a5)
        {
          if (v14 > 0xFFFFFFFEFFFFFFFFLL) {
            goto LABEL_19;
          }
          BOOL v15 = v13 == 0xFFFFFFFFLL;
          char v16 = v13 == 0xFFFFFFFFLL ? -1 : 0;
          char v20 = v16;
          if (v15) {
            goto LABEL_19;
          }
          unint64_t v17 = (float32x2_t *)v21;
          BOOL v18 = (float32x2_t *)v23;
        }
        else
        {
          if (v13 > 0xFFFFFFFEFFFFFFFFLL) {
            goto LABEL_19;
          }
          char v19 = v14 == 0xFFFFFFFFLL ? -1 : 0;
          char v20 = v19;
          if (v14 == 0xFFFFFFFFLL) {
            goto LABEL_19;
          }
          unint64_t v17 = (float32x2_t *)v23;
          BOOL v18 = (float32x2_t *)v21;
        }
        fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v17, v18, &v20);
LABEL_19:
        (*(void (**)(void))(*(void *)*a3 + 88))();
        uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
      }
      while (!result);
    }
  }
  return result;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_1F0A3C760;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy();
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1C9CFEC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40A1003FB7);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != 4|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 92)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = a2;
    int v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 80) + 12 * a2);
    uint64_t v4 = v3[1];
    (*(void (**)(void, void))(***(void ***)(result + 32) + 56))(**(void **)(result + 32), *v3);
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(v2 + 40) + 56))(**(void **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 68) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(float32x2_t *a1, uint64_t a2)
{
  a1[6].i8[0] = a2 == 0;
  if (a1[3].i32[1])
  {
    if (a2)
    {
      uint64_t v2 = (uint64_t *)&a1[5];
      int v3 = a1 + 4;
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    uint64_t v2 = (uint64_t *)&a1[4];
    int v3 = a1 + 5;
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, *v2, (void *)*v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !(*(unsigned int (**)(void))(***(void ***)(a1 + 32) + 72))(**(void **)(a1 + 32)))
  {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(***(void ***)(a1 + 40) + 72);
  return v2();
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 72;
  }
}

float32x2_t *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(float32x2_t *result)
{
  if (result[6].i8[0])
  {
    result[6].i8[0] = 0;
  }
  else
  {
    if (result[3].i32[1])
    {
      uint64_t v2 = (void *)result[4];
      uint64_t v1 = (uint64_t)result[5];
    }
    else
    {
      uint64_t v1 = (uint64_t)result[4];
      uint64_t v2 = (void *)result[5];
    }
    return (float32x2_t *)fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = &unk_1F0A3C760;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x20C4093837F09);
  }
  int v3 = (void *)a1[5];
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x1B3EA8670](v3, 0x20C4093837F09);
  }
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3C760;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy();
}

void sub_1B1C9D6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(float32x2_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a3 + 64))();
  if (result)
  {
    __int32 v8 = a1[3].i32[1];
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a3 + 80))();
    unint64_t v10 = (unsigned int *)(v9 + 4);
    if (v8) {
      unint64_t v10 = (unsigned int *)v9;
    }
    (*(void (**)(void, void))(*(void *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(float32x2_t *a1, uint64_t a2, void *a3)
{
  while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))()
       || ((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 72))())
    {
      (*(void (**)(void))(**(void **)a2 + 88))();
      if (((*(uint64_t (**)(void))(**(void **)a2 + 72))() & 1) == 0)
      {
        do
        {
          __int32 v6 = a1[3].i32[1];
          uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
          __int32 v8 = (unsigned int *)(v7 + 4);
          if (v6) {
            __int32 v8 = (unsigned int *)v7;
          }
          if ((*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v8)) {
            break;
          }
          (*(void (**)(void))(**(void **)a2 + 88))();
        }
        while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))());
      }
    }
    while (((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
    {
      uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
      (*(void (**)(void))(*(void *)*a3 + 88))();
      uint64_t v11 = a1[3].u32[0];
      __int32 v12 = a1[3].i32[1];
      BOOL v13 = v12 == 0;
      if (v12) {
        unint64_t v14 = (float32x2_t *)v10;
      }
      else {
        unint64_t v14 = (float32x2_t *)v9;
      }
      v19[0] = *v14;
      v19[1] = v14[1];
      __int32 v20 = v14[2].i32[0];
      if (v13) {
        BOOL v15 = (float32x2_t *)v10;
      }
      else {
        BOOL v15 = (float32x2_t *)v9;
      }
      v17[0] = *v15;
      v17[1] = v15[1];
      __int32 v18 = v15[2].i32[0];
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, v11, v19, v17))return 1; {
    }
      }
  }
  return 0;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(float32x2_t *a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  if (a3->i32[1] == -1 || a4->i32[0] == -1) {
    return 0;
  }
  float32x2_t v4 = a1[2];
  __int32 v5 = a4[2].i32[0];
  LODWORD(v9) = a3[2].i32[0];
  HIDWORD(v9) = v5;
  char v10 = 0;
  __int32 v6 = a4->i32[1];
  a1[9].i32[0] = a3->i32[0];
  a1[9].i32[1] = v6;
  a1[10] = vadd_f32(a3[1], a4[1]);
  uint64_t v7 = 1;
  a1[11].i32[0] = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(void **)(*(void *)&v4 + 176), &v9, 1);
  return v7;
}

void fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>()
{
}

void sub_1B1C9DBBC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1F0A3AAE0;
  __int32 v8 = *(long long **)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  long long v9 = *v8;
  *(_OWORD *)(a1 + 144) = *v8;
  *(void *)(a1 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = (*(uint64_t (**)(void))(**(void **)v9 + 32))();
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(***(void ***)(a1 + 152) + 32))(**(void **)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), v12);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1B1C9DE40(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1C9E060(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(void *a1, int a2)
{
  float32x2_t v4 = (unsigned int *)(*(void *)(a1[22] + 80) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = (void *)a1[17];
  char v16 = *((unsigned char *)v4 + 8);
  fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    uint64_t v9 = a1[20];
    uint64_t v8 = a1[21];
    uint64_t v10 = (void *)a1[19];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v6;
    uint64_t v14 = v5;
    int v15 = 1;
  }
  else
  {
    uint64_t v8 = a1[20];
    uint64_t v9 = a1[21];
    uint64_t v10 = (void *)a1[18];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v5;
    uint64_t v14 = v6;
    int v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_1B1C9E214(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40A1003FB7);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void *fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal@<X0>(uint64_t a1@<X0>, int a2@<W1>, float32x2_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 176) + 80);
  uint64_t v7 = v6 + 12 * a2;
  int v8 = *(_DWORD *)v7;
  uint64_t result = (*(void *(**)(float32x2_t *__return_ptr))(***(void ***)(a1 + 144) + 96))(&v15);
  float v19 = v15.f32[1];
  v14.i32[0] = v15.i32[0];
  float v18 = INFINITY;
  float v17 = INFINITY;
  if (v15.f32[0] == INFINITY && v19 == v17)
  {
    *a3 = v15;
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(v7 + 4);
    uint64_t result = (*(void *(**)(float32x2_t *__return_ptr))(***(void ***)(a1 + 152) + 96))(&v14);
    float32x2_t v12 = v14;
    LODWORD(v18) = HIDWORD(*(void *)&v12);
    v11.i32[0] = (__int32)v12;
    float v19 = v14.f32[0];
    float v17 = INFINITY;
    float v16 = INFINITY;
    if (v14.f32[0] == INFINITY && v18 == v16)
    {
      v11.i32[1] = v14.i32[1];
    }
    else
    {
      uint64_t v13 = *(void **)(a1 + 136);
      LOBYTE(v19) = *(unsigned char *)(v6 + 12 * a2 + 8);
      uint64_t result = fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(v13, v8, v10, &v19);
      float32x2_t v11 = vadd_f32(v15, v14);
    }
    *a3 = v11;
  }
  return result;
}

uint64_t fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AltSequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = (*(uint64_t (**)(void))(**(void **)a5 + 32))();
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(unsigned char *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = -1;
  return a1;
}

void sub_1B1C9E54C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3AAE0;
  uint64_t v2 = a1[17];
  if (v2)
  {
    uint64_t v3 = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1B3EA8670](v3, 0x1060C40AD892F49);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    char v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(void *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1B3EA8670](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1C9E730(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AltSequenceComposeFilter()
{
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(***(void ***)(a1 + 144) + 104))(**(void **)(a1 + 144));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 104))(**(void **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    float32x2_t v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    float32x2_t v12 = (void *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1) {
    return 0;
  }
  return v8 == -1 || v7 <= v8;
}

void sub_1B1C9E964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, int a8)
{
  (*(void (**)(void, uint64_t))(*(void *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  uint64_t v18[3] = 0;
  v18[4] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v14 = (unsigned int *)(v15[1] + 20 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0]) {
      goto LABEL_7;
    }
    char v14 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16) {
    --*v16;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1C9EB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    fst::StateSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a9);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, int a2, void *a3, unsigned int *a4, int a5)
{
  uint64_t v10 = a4 + 1;
  if (!a5) {
    uint64_t v10 = a4;
  }
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v10);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
    if ((result & 1) == 0)
    {
      do
      {
        uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
        unint64_t v13 = *(void *)v12;
        v31[0] = *(void *)v12;
        v31[1] = *(void *)(v12 + 8);
        int v32 = *(_DWORD *)(v12 + 16);
        uint64_t v14 = *(void *)a4;
        v29[0] = *(void *)a4;
        v29[1] = *((void *)a4 + 1);
        unsigned int v30 = a4[4];
        if (a5)
        {
          char v15 = *(unsigned __int8 **)(a1 + 136);
          if (v13 == -1)
          {
            if (!v15[33])
            {
              char v16 = v15[34] ^ 1;
              goto LABEL_16;
            }
          }
          else
          {
            if (HIDWORD(v14) == -1)
            {
              int v22 = v15[32];
              BOOL v23 = v22 == 1;
              if (v22 == 1) {
                char v24 = -1;
              }
              else {
                char v24 = 0;
              }
              char v28 = v24;
              if (v23) {
                goto LABEL_24;
              }
              goto LABEL_17;
            }
            if (HIDWORD(v14))
            {
              char v16 = 0;
LABEL_16:
              char v28 = v16;
LABEL_17:
              float v19 = (float32x2_t *)v29;
              __int32 v20 = (float32x2_t *)v31;
              goto LABEL_23;
            }
          }
        }
        else
        {
          unint64_t v17 = *(unsigned __int8 **)(a1 + 136);
          if (v14 == -1)
          {
            if (!v17[33])
            {
              char v18 = v17[34] ^ 1;
              goto LABEL_21;
            }
          }
          else
          {
            unint64_t v21 = HIDWORD(v13);
            if (v21 == -1)
            {
              int v25 = v17[32];
              BOOL v26 = v25 == 1;
              if (v25 == 1) {
                char v27 = -1;
              }
              else {
                char v27 = 0;
              }
              char v28 = v27;
              if (v26) {
                goto LABEL_24;
              }
              goto LABEL_22;
            }
            if (v21)
            {
              char v18 = 0;
LABEL_21:
              char v28 = v18;
LABEL_22:
              float v19 = (float32x2_t *)v31;
              __int32 v20 = (float32x2_t *)v29;
LABEL_23:
              fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v19, v20, &v28);
            }
          }
        }
LABEL_24:
        (*(void (**)(void))(*(void *)*a3 + 88))();
        uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
      }
      while (!result);
    }
  }
  return result;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_1F0A3C9E0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy();
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1C9EF20(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40A1003FB7);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != 4|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 92)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = a2;
    int v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 80) + 12 * a2);
    uint64_t v4 = v3[1];
    (*(void (**)(void, void))(***(void ***)(result + 32) + 56))(**(void **)(result + 32), *v3);
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(v2 + 40) + 56))(**(void **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 68) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(float32x2_t *a1, uint64_t a2)
{
  a1[6].i8[0] = a2 == 0;
  if (a1[3].i32[1])
  {
    if (a2)
    {
      uint64_t v2 = (uint64_t *)&a1[5];
      int v3 = a1 + 4;
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    uint64_t v2 = (uint64_t *)&a1[4];
    int v3 = a1 + 5;
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, *v2, (void *)*v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !(*(unsigned int (**)(void))(***(void ***)(a1 + 32) + 72))(**(void **)(a1 + 32)))
  {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(***(void ***)(a1 + 40) + 72);
  return v2();
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 72;
  }
}

float32x2_t *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(float32x2_t *result)
{
  if (result[6].i8[0])
  {
    result[6].i8[0] = 0;
  }
  else
  {
    if (result[3].i32[1])
    {
      uint64_t v2 = (void *)result[4];
      uint64_t v1 = (uint64_t)result[5];
    }
    else
    {
      uint64_t v1 = (uint64_t)result[4];
      uint64_t v2 = (void *)result[5];
    }
    return (float32x2_t *)fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = &unk_1F0A3C9E0;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x20C4093837F09);
  }
  int v3 = (void *)a1[5];
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x1B3EA8670](v3, 0x20C4093837F09);
  }
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3C9E0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy();
}

void sub_1B1C9F5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(float32x2_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a3 + 64))();
  if (result)
  {
    __int32 v8 = a1[3].i32[1];
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a3 + 80))();
    uint64_t v10 = (unsigned int *)(v9 + 4);
    if (v8) {
      uint64_t v10 = (unsigned int *)v9;
    }
    (*(void (**)(void, void))(*(void *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(float32x2_t *a1, uint64_t a2, void *a3)
{
  while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))()
       || ((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 72))())
    {
      (*(void (**)(void))(**(void **)a2 + 88))();
      if (((*(uint64_t (**)(void))(**(void **)a2 + 72))() & 1) == 0)
      {
        do
        {
          __int32 v6 = a1[3].i32[1];
          uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
          __int32 v8 = (unsigned int *)(v7 + 4);
          if (v6) {
            __int32 v8 = (unsigned int *)v7;
          }
          if ((*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v8)) {
            break;
          }
          (*(void (**)(void))(**(void **)a2 + 88))();
        }
        while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))());
      }
    }
    while (((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
    {
      uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
      (*(void (**)(void))(*(void *)*a3 + 88))();
      uint64_t v11 = a1[3].u32[0];
      __int32 v12 = a1[3].i32[1];
      BOOL v13 = v12 == 0;
      if (v12) {
        uint64_t v14 = (float32x2_t *)v10;
      }
      else {
        uint64_t v14 = (float32x2_t *)v9;
      }
      v19[0] = *v14;
      v19[1] = v14[1];
      __int32 v20 = v14[2].i32[0];
      if (v13) {
        char v15 = (float32x2_t *)v10;
      }
      else {
        char v15 = (float32x2_t *)v9;
      }
      v17[0] = *v15;
      v17[1] = v15[1];
      __int32 v18 = v15[2].i32[0];
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, v11, v19, v17))return 1; {
    }
      }
  }
  return 0;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(float32x2_t *a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  float32x2_t v4 = a1[2];
  char v5 = *(unsigned char **)(*(void *)&v4 + 136);
  if (a4->i32[0] == -1)
  {
    if (!v5[33])
    {
      char v7 = v5[34] ^ 1;
LABEL_9:
      __int32 v9 = a4[2].i32[0];
      LODWORD(v1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3[2].i32[0];
      HIDWORD(v1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v9;
      char v13 = v7;
      __int32 v10 = a4->i32[1];
      a1[9].i32[0] = a3->i32[0];
      a1[9].i32[1] = v10;
      a1[10] = vadd_f32(a3[1], a4[1]);
      uint64_t v8 = 1;
      a1[11].i32[0] = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(void **)(*(void *)&v4 + 176), &v12, 1);
      return v8;
    }
    return 0;
  }
  __int32 v6 = a3->i32[1];
  if (!v6) {
    return 0;
  }
  char v7 = 0;
  if (v6 != -1) {
    goto LABEL_9;
  }
  char v7 = 0;
  uint64_t v8 = 0;
  if (v5[32] != 1) {
    goto LABEL_9;
  }
  return v8;
}

void fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>()
{
}

void sub_1B1C9FB24(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1F0A3A960;
  uint64_t v8 = *(long long **)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  long long v9 = *v8;
  *(_OWORD *)(a1 + 144) = *v8;
  *(void *)(a1 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = (*(uint64_t (**)(void))(**(void **)v9 + 32))();
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(***(void ***)(a1 + 152) + 32))(**(void **)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), v12);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1B1C9FDA8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1C9FFC8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(void *a1, int a2)
{
  float32x2_t v4 = (unsigned int *)(*(void *)(a1[22] + 80) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  char v7 = (void *)a1[17];
  char v16 = *((unsigned char *)v4 + 8);
  fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    uint64_t v9 = a1[20];
    uint64_t v8 = a1[21];
    uint64_t v10 = (void *)a1[19];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v6;
    uint64_t v14 = v5;
    int v15 = 1;
  }
  else
  {
    uint64_t v8 = a1[20];
    uint64_t v9 = a1[21];
    uint64_t v10 = (void *)a1[18];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v5;
    uint64_t v14 = v6;
    int v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_1B1CA017C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40A1003FB7);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void *fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal@<X0>(uint64_t a1@<X0>, int a2@<W1>, float32x2_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 176) + 80);
  char v7 = (unsigned int *)(v6 + 12 * a2);
  uint64_t v8 = *v7;
  uint64_t result = (*(void *(**)(float32x2_t *__return_ptr))(***(void ***)(a1 + 144) + 96))(&v15);
  float v19 = v15.f32[1];
  v14.i32[0] = v15.i32[0];
  float v18 = INFINITY;
  float v17 = INFINITY;
  if (v15.f32[0] == INFINITY && v19 == v17)
  {
    *a3 = v15;
  }
  else
  {
    uint64_t v10 = v7[1];
    uint64_t result = (*(void *(**)(float32x2_t *__return_ptr))(***(void ***)(a1 + 152) + 96))(&v14);
    float32x2_t v12 = v14;
    LODWORD(v18) = HIDWORD(*(void *)&v12);
    v11.i32[0] = (__int32)v12;
    float v19 = v14.f32[0];
    float v17 = INFINITY;
    float v16 = INFINITY;
    if (v14.f32[0] == INFINITY && v18 == v16)
    {
      v11.i32[1] = v14.i32[1];
    }
    else
    {
      uint64_t v13 = *(void **)(a1 + 136);
      LOBYTE(v19) = *(unsigned char *)(v6 + 12 * a2 + 8);
      uint64_t result = fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(v13, v8, v10, &v19);
      float32x2_t v11 = vadd_f32(v15, v14);
    }
    *a3 = v11;
  }
  return result;
}

uint64_t fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MatchComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = (*(uint64_t (**)(void))(**(void **)a4 + 32))();
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 32))(**(void **)(a1 + 8));
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = -1;
  *(unsigned char *)(a1 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = -1;
  return a1;
}

void sub_1B1CA04E4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3A960;
  uint64_t v2 = a1[17];
  if (v2)
  {
    uint64_t v3 = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1B3EA8670](v3, 0x1060C4035244DBALL);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    char v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(void *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1B3EA8670](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1CA06D0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MatchComposeFilter()
{
}

void *fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(void *result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v6 = result;
  if (*((_DWORD *)result + 8) != a2 || *((_DWORD *)result + 9) != a3 || *a4 != *((unsigned char *)result + 40))
  {
    *((_DWORD *)result + 8) = a2;
    *((_DWORD *)result + 9) = a3;
    *((unsigned char *)result + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *a4;
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(*(void *)result[2] + 40))(result[2], a2);
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(*(void *)v6[2] + 56))(v6[2], a2);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v6[2] + 32))(&v14);
    BOOL v9 = 0;
    float v17 = *((float *)&v14 + 1);
    int v18 = v14;
    int v16 = 2139095040;
    float v15 = INFINITY;
    v10.n128_u32[0] = v14;
    if (*(float *)&v14 == INFINITY)
    {
      v10.n128_f32[0] = v17;
      BOOL v9 = v17 == v15;
    }
    if (v7 != v8) {
      BOOL v9 = 0;
    }
    *((unsigned char *)v6 + 41) = v9;
    *((unsigned char *)v6 + 43) = v8 == 0;
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t, __n128))(*(void *)v6[3] + 40))(v6[3], a3, v10);
    uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(*(void *)v6[3] + 48))(v6[3], a3);
    uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(*(void *)v6[3] + 32))(&v14);
    BOOL v13 = 0;
    float v17 = *((float *)&v14 + 1);
    int v18 = v14;
    int v16 = 2139095040;
    float v15 = INFINITY;
    if (*(float *)&v14 == INFINITY) {
      BOOL v13 = v17 == v15;
    }
    if (v11 != v12) {
      BOOL v13 = 0;
    }
    *((unsigned char *)v6 + 4std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v13;
    *((unsigned char *)v6 + 44) = v12 == 0;
  }
  return result;
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(***(void ***)(a1 + 144) + 104))(**(void **)(a1 + 144));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 104))(**(void **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    uint64_t v12 = (void *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1) {
    return 0;
  }
  return v8 == -1 || v7 <= v8;
}

void sub_1B1CA0B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, int a8)
{
  (*(void (**)(void, uint64_t))(*(void *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  uint64_t v18[3] = 0;
  v18[4] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v14 = (unsigned int *)(v15[1] + 20 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0]) {
      goto LABEL_7;
    }
    char v14 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16) {
    --*v16;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1CA0DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    fst::StateSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a9);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, int a2, void *a3, unsigned int *a4, int a5)
{
  __n128 v10 = a4 + 1;
  if (!a5) {
    __n128 v10 = a4;
  }
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v10);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
    if ((result & 1) == 0)
    {
      do
      {
        uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
        v18[0] = *(void *)v12;
        v18[1] = *(void *)(v12 + 8);
        int v19 = *(_DWORD *)(v12 + 16);
        v16[0] = *(void *)a4;
        v16[1] = *((void *)a4 + 1);
        unsigned int v17 = a4[4];
        if (a5)
        {
          char v15 = fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FilterArc(*(unsigned __int8 **)(a1 + 136), (uint64_t)v16, v18);
          if (v15 != -1)
          {
            BOOL v13 = (float32x2_t *)v16;
            char v14 = (float32x2_t *)v18;
LABEL_10:
            fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v13, v14, &v15);
          }
        }
        else
        {
          char v15 = fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FilterArc(*(unsigned __int8 **)(a1 + 136), (uint64_t)v18, v16);
          if (v15 != -1)
          {
            BOOL v13 = (float32x2_t *)v18;
            char v14 = (float32x2_t *)v16;
            goto LABEL_10;
          }
        }
        (*(void (**)(void))(*(void *)*a3 + 88))();
        uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
      }
      while (!result);
    }
  }
  return result;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_1F0A3C7E0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy();
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1CA10EC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40A1003FB7);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != 4|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 92)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = a2;
    int v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 80) + 12 * a2);
    uint64_t v4 = v3[1];
    (*(void (**)(void, void))(***(void ***)(result + 32) + 56))(**(void **)(result + 32), *v3);
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(v2 + 40) + 56))(**(void **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 68) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(float32x2_t *a1, uint64_t a2)
{
  a1[6].i8[0] = a2 == 0;
  if (a1[3].i32[1])
  {
    if (a2)
    {
      uint64_t v2 = (uint64_t *)&a1[5];
      int v3 = a1 + 4;
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    uint64_t v2 = (uint64_t *)&a1[4];
    int v3 = a1 + 5;
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, *v2, (void *)*v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !(*(unsigned int (**)(void))(***(void ***)(a1 + 32) + 72))(**(void **)(a1 + 32)))
  {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(***(void ***)(a1 + 40) + 72);
  return v2();
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 72;
  }
}

float32x2_t *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(float32x2_t *result)
{
  if (result[6].i8[0])
  {
    result[6].i8[0] = 0;
  }
  else
  {
    if (result[3].i32[1])
    {
      uint64_t v2 = (void *)result[4];
      uint64_t v1 = (uint64_t)result[5];
    }
    else
    {
      uint64_t v1 = (uint64_t)result[4];
      uint64_t v2 = (void *)result[5];
    }
    return (float32x2_t *)fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = &unk_1F0A3C7E0;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x20C4093837F09);
  }
  int v3 = (void *)a1[5];
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x1B3EA8670](v3, 0x20C4093837F09);
  }
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3C7E0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy();
}

void sub_1B1CA17BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(float32x2_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a3 + 64))();
  if (result)
  {
    __int32 v8 = a1[3].i32[1];
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a3 + 80))();
    __n128 v10 = (unsigned int *)(v9 + 4);
    if (v8) {
      __n128 v10 = (unsigned int *)v9;
    }
    (*(void (**)(void, void))(*(void *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(float32x2_t *a1, uint64_t a2, void *a3)
{
  while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))()
       || ((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 72))())
    {
      (*(void (**)(void))(**(void **)a2 + 88))();
      if (((*(uint64_t (**)(void))(**(void **)a2 + 72))() & 1) == 0)
      {
        do
        {
          __int32 v6 = a1[3].i32[1];
          uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
          __int32 v8 = (unsigned int *)(v7 + 4);
          if (v6) {
            __int32 v8 = (unsigned int *)v7;
          }
          if ((*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v8)) {
            break;
          }
          (*(void (**)(void))(**(void **)a2 + 88))();
        }
        while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))());
      }
    }
    while (((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
    {
      uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
      (*(void (**)(void))(*(void *)*a3 + 88))();
      uint64_t v11 = a1[3].u32[0];
      __int32 v12 = a1[3].i32[1];
      BOOL v13 = v12 == 0;
      if (v12) {
        char v14 = (float32x2_t *)v10;
      }
      else {
        char v14 = (float32x2_t *)v9;
      }
      v19[0] = *v14;
      v19[1] = v14[1];
      __int32 v20 = v14[2].i32[0];
      if (v13) {
        char v15 = (float32x2_t *)v10;
      }
      else {
        char v15 = (float32x2_t *)v9;
      }
      v17[0] = *v15;
      v17[1] = v15[1];
      __int32 v18 = v15[2].i32[0];
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, v11, v19, v17))
      {
        return 1;
      }
    }
  }
  return 0;
}

BOOL fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(float32x2_t *a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  char v7 = fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FilterArc(*(unsigned __int8 **)(*(void *)&a1[2] + 136), (uint64_t)a3, a4);
  char v8 = v7;
  if (v7 != -1)
  {
    __int32 v9 = a4[2].i32[0];
    LODWORD(v1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3[2].i32[0];
    HIDWORD(v1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v9;
    char v13 = v7;
    __int32 v10 = a4->i32[1];
    a1[9].i32[0] = a3->i32[0];
    a1[9].i32[1] = v10;
    a1[10] = vadd_f32(a3[1], a4[1]);
    a1[11].i32[0] = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(void **)(*(void *)&a1[2] + 176), &v12, 1);
  }
  return ~v8 != 0;
}

uint64_t *quasar::CommandTagging::CommandTagging(uint64_t *a1, long long *a2, const void ***a3, long long **a4)
{
  char v7 = (std::string *)std::map<std::string,std::vector<quasar::Token>>::map[abi:ne180100](a1, a3);
  v7[1].__r_.__value_.__r.__words[0] = 0;
  v7[1].__r_.__value_.__l.__size_ = 0;
  v7[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v7 + 1, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a4[1] - (char *)*a4) >> 3));
  char v8 = (std::string *)(a1 + 6);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    a1[8] = *((void *)a2 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return a1;
}

void sub_1B1CA1D10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::destroy(v2, *(void **)(v2 + 8));
  _Unwind_Resume(a1);
}

uint64_t quasar::CommandTagging::getTokensFromTag(uint64_t a1, const void **a2)
{
  return std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1, a2)+ 56;
}

void quasar::CommandTagging::getCommandId(quasar::CommandTagging *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((void *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 8);
  }
}

uint64_t quasar::CommandTagging::getTagSequence(quasar::CommandTagging *this)
{
  return (uint64_t)this + 24;
}

void quasar::CommandTagger::CommandTagger(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A52428;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)quasar::COMMAND_TAGGER_TYPE_NAME);
  quasar::QuasarTextProcImpl::modelExist(a2);
}

void sub_1B1CA2358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  if (*(char *)(v18 + 119) < 0) {
    operator delete(*v22);
  }
  if (*(char *)(v18 + 95) < 0) {
    operator delete(*v21);
  }
  if (*(char *)(v18 + 71) < 0) {
    operator delete(*v20);
  }
  if (*(char *)(v18 + 47) < 0) {
    operator delete(*v19);
  }
  char v24 = *(std::__shared_weak_count **)(v18 + 16);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

void quasar::CommandTagger::assignValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void quasar::CommandTagger::run(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
}

void quasar::CommandTagger::runImpl(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, int a5)
{
  int v25 = 0;
  BOOL v26 = 0;
  uint64_t v27 = 0;
  quasar::QuasarTextProcImpl::run(a1[1], a2, (uint64_t *)&v25, 1, 1u, 1u);
  long long v9 = v25;
  unsigned int v17 = v26;
  if (v25 == v26) {
    goto LABEL_32;
  }
  do
  {
    uint64_t v22 = 0;
    BOOL v23 = 0;
    unint64_t v24 = 0;
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    while (v10 != v11)
    {
      quasar::CommandTagger::createCommandTagging((quasar::CommandTagger *)a1, v10, (uint64_t *)v20);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v19, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
      }
      else {
        std::string v19 = v21;
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      {
        if (!v19.__r_.__value_.__l.__size_)
        {
          operator delete(v19.__r_.__value_.__l.__data_);
          goto LABEL_27;
        }
      }
      else if (!*((unsigned char *)&v19.__r_.__value_.__s + 23))
      {
        goto LABEL_27;
      }
      if (a5)
      {
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v18, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
        }
        else {
          std::string v18 = v21;
        }
        BOOL v12 = std::__tree<std::string>::__count_unique<std::string>(a4, (const void **)&v18.__r_.__value_.__l.__data_) != 0;
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v18.__r_.__value_.__l.__data_);
        }
        if ((*((unsigned char *)&v19.__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_15:
          if (!v12) {
            goto LABEL_27;
          }
          goto LABEL_23;
        }
      }
      else
      {
        BOOL v12 = 1;
        if ((*((unsigned char *)&v19.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_15;
        }
      }
      operator delete(v19.__r_.__value_.__l.__data_);
      if (!v12) {
        goto LABEL_27;
      }
LABEL_23:
      char v13 = v23;
      if ((unint64_t)v23 >= v24)
      {
        char v14 = (std::string *)std::vector<quasar::CommandTagging>::__push_back_slow_path<quasar::CommandTagging const&>(&v22, (uint64_t)v20);
      }
      else
      {
        std::allocator<quasar::CommandTagging>::construct[abi:ne180100]<quasar::CommandTagging,quasar::CommandTagging const&>((uint64_t)&v24, v23, (uint64_t)v20);
        char v14 = v13 + 3;
      }
      BOOL v23 = v14;
LABEL_27:
      quasar::CommandTagging::~CommandTagging(v20);
      v10 += 24;
    }
    unint64_t v15 = a3[1];
    if (v15 >= a3[2])
    {
      uint64_t v16 = std::vector<std::vector<quasar::CommandTagging>>::__push_back_slow_path<std::vector<quasar::CommandTagging> const&>(a3, &v22);
    }
    else
    {
      std::vector<std::vector<quasar::CommandTagging>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::CommandTagging> const&>((uint64_t)a3, &v22);
      uint64_t v16 = v15 + 24;
    }
    a3[1] = v16;
    v20[0] = &v22;
    std::vector<quasar::CommandTagging>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
    v9 += 3;
  }
  while (v9 != v17);
LABEL_32:
  v20[0] = &v25;
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
}

void sub_1B1CA275C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22)
{
  a22 = v22 - 112;
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

void quasar::CommandTagger::~CommandTagger(void **this)
{
  *this = &unk_1F0A52428;
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  uint64_t vars8;

  quasar::CommandTagger::~CommandTagger(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::CommandTagger::getParameterTag(quasar::CommandTagger *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  uint64_t v4 = *((void *)this + 9);
  int v3 = (char *)this + 72;
  uint64_t v2 = v4;
  int v5 = v3[23];
  if (v5 >= 0) {
    uint64_t v6 = (uint64_t)v3;
  }
  else {
    uint64_t v6 = v2;
  }
  if (v5 >= 0) {
    uint64_t v7 = v3[23];
  }
  else {
    uint64_t v7 = *((void *)v3 + 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v6, v7);
  std::ostream::operator<<();
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E4FBA408];
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v11[0] = v8;
  v11[1] = MEMORY[0x1E4FBA470] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v13);
}

void sub_1B1CA2A2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::CommandTagger::getCommandPhraseTag(quasar::CommandTagger *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  uint64_t v4 = *((void *)this + 12);
  int v3 = (char *)this + 96;
  uint64_t v2 = v4;
  int v5 = v3[23];
  if (v5 >= 0) {
    uint64_t v6 = (uint64_t)v3;
  }
  else {
    uint64_t v6 = v2;
  }
  if (v5 >= 0) {
    uint64_t v7 = v3[23];
  }
  else {
    uint64_t v7 = *((void *)v3 + 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v6, v7);
  std::ostream::operator<<();
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E4FBA408];
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v11[0] = v8;
  v11[1] = MEMORY[0x1E4FBA470] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v13);
}

void sub_1B1CA2BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL quasar::CommandTagger::isParameterTag(uint64_t a1, const std::string *a2)
{
  return quasar::CommandTagger::matchesTagConvention(a1, a2, a1 + 72);
}

BOOL quasar::CommandTagger::matchesTagConvention(uint64_t a1, const std::string *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  size_t size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  int v6 = (char)size;
  if ((size & 0x80u) != 0) {
    size_t size = a2->__r_.__value_.__l.__size_;
  }
  std::string::size_type v7 = *(unsigned __int8 *)(a3 + 23);
  if (*(char *)(a3 + 23) < 0)
  {
    size_t v9 = *(void *)(a3 + 8);
    if (size <= v9) {
      return 0;
    }
    uint64_t v8 = *(const void **)a3;
  }
  else
  {
    uint64_t v8 = (const void *)a3;
    size_t v9 = *(unsigned __int8 *)(a3 + 23);
    if (size <= v7) {
      return 0;
    }
  }
  if (v6 < 0) {
    a2 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (memcmp(v8, a2, v9)) {
    return 0;
  }
  if ((v7 & 0x80u) == 0) {
    std::string::size_type v12 = v7;
  }
  else {
    std::string::size_type v12 = *(void *)(a3 + 8);
  }
  std::string::basic_string(&v16, v4, v12, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v17);
  std::string::size_type v13 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v14 = &v16;
  }
  else {
    char v14 = (std::string *)v16.__r_.__value_.__r.__words[0];
  }
  BOOL v10 = 1;
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v13 = v16.__r_.__value_.__l.__size_;
  }
  for (; v13; --v13)
  {
    if (v10)
    {
      if (v14->__r_.__value_.__s.__data_[0] < 0) {
        int v15 = 0;
      }
      else {
        int v15 = (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v14->__r_.__value_.__s.__data_[0] + 60) >> 10) & 1;
      }
      BOOL v10 = v15 != 0;
    }
    else
    {
      BOOL v10 = 0;
    }
    char v14 = (std::string *)((char *)v14 + 1);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  return v10;
}

BOOL quasar::CommandTagger::isCommandPhraseTag(uint64_t a1, const std::string *a2)
{
  return quasar::CommandTagger::matchesTagConvention(a1, a2, a1 + 96);
}

void quasar::CommandTagger::createCommandTagging(quasar::CommandTagger *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  quasar::Token::Token((std::string *)&v84, *(const quasar::Token **)a2);
  BOOL isTag = quasar::CommandTagger::isTag(a1, &v84);
  if (v94 < 0) {
    operator delete(__p);
  }
  if (v92 < 0) {
    operator delete(v91);
  }
  long long v79 = &v90;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  if (v89 < 0) {
    operator delete(v88);
  }
  long long v79 = &v87;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  if (v86 < 0) {
    operator delete(v85);
  }
  if (*((char *)&v84.tokenName.__r_.__value_.var0.var1 + 23) < 0)
  {
    operator delete(v84.tokenName.__r_.__value_.var0.var1.__data_);
    if (isTag) {
      goto LABEL_11;
    }
LABEL_25:
    std::string::basic_string[abi:ne180100]<0>(v82, "");
    uint64_t v81 = 0;
    long long v80 = 0;
    long long v79 = (uint64_t *)&v80;
    unint64_t v77 = 0;
    unint64_t v76 = 0;
    unint64_t v78 = 0;
    quasar::CommandTagging::CommandTagging(a3, (long long *)v82, (const void ***)&v79, &v76);
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
    std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::destroy((uint64_t)&v79, v80);
    if (v83 < 0) {
      operator delete(v82[0]);
    }
    return;
  }
  if (!isTag) {
    goto LABEL_25;
  }
LABEL_11:
  uint64_t v81 = 0;
  long long v80 = 0;
  long long v79 = (uint64_t *)&v80;
  unint64_t v77 = 0;
  unint64_t v76 = 0;
  unint64_t v78 = 0;
  quasar::Token::Token((std::string *)&v64, (const quasar::Token *)(*(void *)a2 + 224));
  quasar::CommandTagger::getTagText(a1, (const std::string *)&v64, &__s);
  if (v74 < 0) {
    operator delete(v73);
  }
  if (v72 < 0) {
    operator delete(v71);
  }
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  if (v69 < 0) {
    operator delete(v68);
  }
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  if (v66 < 0) {
    operator delete(v65);
  }
  if (*((char *)&v64.tokenName.__r_.__value_.var0.var1 + 23) < 0) {
    operator delete(v64.tokenName.__r_.__value_.var0.var1.__data_);
  }
  memset(&v63, 0, sizeof(v63));
  p_s = &__s;
  std::string::size_type v7 = std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v79, (const void **)&__s.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_s);
  std::vector<quasar::Token>::__vdeallocate((void **)v7 + 7);
  *(std::string *)(v7 + 7) = v63;
  memset(&v63, 0, sizeof(v63));
  v96[0] = (void **)&v63;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v96);
  uint64_t v8 = v77;
  if ((unint64_t)v77 >= v78)
  {
    BOOL v10 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v76, (long long *)&__s);
  }
  else
  {
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v77, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v9 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
      v77->__r_.__value_.__r.__words[2] = __s.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
    }
    BOOL v10 = v8 + 1;
  }
  char v28 = a3;
  unint64_t v77 = v10;
  uint64_t v11 = *(const quasar::Token **)a2;
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5)) >= 3)
  {
    unint64_t v12 = 2;
    uint64_t v13 = 448;
    do
    {
      quasar::Token::Token((std::string *)&v52, (const quasar::Token *)((char *)v11 + v13));
      BOOL v14 = quasar::CommandTagger::isTag(a1, &v52);
      if (v62 < 0) {
        operator delete(v61);
      }
      if (v60 < 0) {
        operator delete(v59);
      }
      v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
      if (v57 < 0) {
        operator delete(v56);
      }
      v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
      if (v54 < 0) {
        operator delete(v53);
      }
      if (*((char *)&v52.tokenName.__r_.__value_.var0.var1 + 23) < 0)
      {
        operator delete(v52.tokenName.__r_.__value_.var0.var1.__data_);
        if (v14)
        {
LABEL_42:
          quasar::Token::Token((std::string *)&v41, (const quasar::Token *)(*(void *)a2 + v13));
          quasar::CommandTagger::getTagText(a1, (const std::string *)&v41, &v63);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s.__r_.__value_.__l.__data_);
          }
          std::string __s = v63;
          *((unsigned char *)&v63.__r_.__value_.__s + 23) = 0;
          v63.__r_.__value_.__s.__data_[0] = 0;
          if (v51 < 0) {
            operator delete(v50);
          }
          if (v49 < 0) {
            operator delete(v48);
          }
          v96[0] = (void **)&v47;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v96);
          if (v46 < 0) {
            operator delete(v45);
          }
          v96[0] = (void **)&v44;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v96);
          if (v43 < 0) {
            operator delete(v42);
          }
          if (*((char *)&v41.tokenName.__r_.__value_.var0.var1 + 23) < 0) {
            operator delete(v41.tokenName.__r_.__value_.var0.var1.__data_);
          }
          memset(&v63, 0, sizeof(v63));
          p_s = &__s;
          int v15 = std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v79, (const void **)&__s.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_s);
          std::vector<quasar::Token>::__vdeallocate((void **)v15 + 7);
          *(std::string *)(v15 + 7) = v63;
          memset(&v63, 0, sizeof(v63));
          v96[0] = (void **)&v63;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v96);
          std::string v16 = v77;
          if ((unint64_t)v77 >= v78)
          {
            BOOL v23 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v76, (long long *)&__s);
          }
          else
          {
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v77, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            }
            else
            {
              long long v17 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
              v77->__r_.__value_.__r.__words[2] = __s.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
            }
            BOOL v23 = v16 + 1;
          }
          unint64_t v77 = v23;
          goto LABEL_66;
        }
      }
      else if (v14)
      {
        goto LABEL_42;
      }
      v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s;
      std::string v18 = std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v79, (const void **)&__s.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v63);
      std::string v19 = v18;
      __int32 v20 = (const quasar::Token *)(*(void *)a2 + v13);
      unint64_t v21 = v18[8];
      if (v21 >= v18[9])
      {
        uint64_t v22 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(v18 + 7, v20);
      }
      else
      {
        quasar::Token::Token((std::string *)v18[8], v20);
        uint64_t v22 = v21 + 224;
        v19[8] = v21 + 224;
      }
      v19[8] = v22;
LABEL_66:
      ++v12;
      uint64_t v11 = *(const quasar::Token **)a2;
      v13 += 224;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5) > v12);
  }
  unint64_t v24 = v79;
  if (v79 != (uint64_t *)&v80)
  {
    do
    {
      *(unsigned char *)(v24[7] + 45) = 0;
      *(unsigned char *)(v24[8] - 18std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
      int v25 = (uint64_t *)v24[1];
      if (v25)
      {
        do
        {
          BOOL v26 = v25;
          int v25 = (uint64_t *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          BOOL v26 = (uint64_t *)v24[2];
          BOOL v27 = *v26 == (void)v24;
          unint64_t v24 = v26;
        }
        while (!v27);
      }
      unint64_t v24 = v26;
    }
    while (v26 != (uint64_t *)&v80);
  }
  quasar::Token::Token((std::string *)&v29, v11);
  quasar::CommandTagger::getTagText(a1, (const std::string *)&v29, &v40);
  quasar::CommandTagging::CommandTagging(v28, (long long *)&v40, (const void ***)&v79, &v76);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (v39 < 0) {
    operator delete(v38);
  }
  if (v37 < 0) {
    operator delete(v36);
  }
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  if (v34 < 0) {
    operator delete(v33);
  }
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  if (v31 < 0) {
    operator delete(v30);
  }
  if (*((char *)&v29.tokenName.__r_.__value_.var0.var1 + 23) < 0) {
    operator delete(v29.tokenName.__r_.__value_.var0.var1.__data_);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
  std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::destroy((uint64_t)&v79, v80);
}

void sub_1B1CA3420(_Unwind_Exception *a1)
{
  STACK[0x3F8] = v1;
  if (SLOBYTE(STACK[0x3E7]) < 0) {
    operator delete((void *)STACK[0x3D0]);
  }
  STACK[0x3D0] = (unint64_t)&STACK[0x3F0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3D0]);
  std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::destroy((uint64_t)&STACK[0x408], (void *)STACK[0x410]);
  _Unwind_Resume(a1);
}

BOOL quasar::CommandTagger::isTag(quasar::CommandTagger *this, Token *a2)
{
  unint64_t v3 = *((unsigned __int8 *)&a2->tokenName.__r_.__value_.var0.var1 + 23);
  if (*((char *)&a2->tokenName.__r_.__value_.var0.var1 + 23) < 0)
  {
    data = (Token *)a2->tokenName.__r_.__value_.var0.var1.__data_;
    unint64_t size = a2->tokenName.__r_.__value_.var0.var1.__size_;
  }
  else
  {
    data = a2;
    unint64_t size = *((unsigned __int8 *)&a2->tokenName.__r_.__value_.var0.var1 + 23);
  }
  uint64_t v6 = *((unsigned __int8 *)this + 47);
  if ((v6 & 0x80u) == 0) {
    std::string::size_type v7 = (char *)this + 24;
  }
  else {
    std::string::size_type v7 = (char *)*((void *)this + 3);
  }
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)this + 4);
  }
  if (size) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    return 0;
  }
  BOOL v10 = (unsigned __int8 *)&data->tokenName.__r_.__value_.var0.var0.__data_[size];
  uint64_t v11 = data;
  while (2)
  {
    uint64_t v12 = v6;
    uint64_t v13 = (unsigned __int8 *)v7;
    do
    {
      if (v11->tokenName.__r_.__value_.var0.var0.__data_[0] == *v13)
      {
        uint64_t v9 = 0;
        if (v11 != (Token *)v10 && v11 == data)
        {
          if ((v3 & 0x80) != 0)
          {
            BOOL v14 = (Token *)a2->tokenName.__r_.__value_.var0.var1.__data_;
            unint64_t v15 = a2->tokenName.__r_.__value_.var0.var1.__size_;
          }
          else
          {
            BOOL v14 = a2;
            unint64_t v15 = *((unsigned __int8 *)&a2->tokenName.__r_.__value_.var0.var1 + 23);
          }
          int v16 = *((char *)this + 71);
          if (v16 >= 0) {
            long long v17 = (char *)this + 48;
          }
          else {
            long long v17 = (char *)*((void *)this + 6);
          }
          if (v16 >= 0) {
            size_t v18 = *((unsigned __int8 *)this + 71);
          }
          else {
            size_t v18 = *((void *)this + 7);
          }
          if (v18)
          {
            std::string v19 = (char *)&v14[-1].tokenName.var0 + 7;
            while (v15)
            {
              if (memchr(v17, v19[v15--], v18))
              {
                if ((v3 & 0x80) != 0) {
                  goto LABEL_39;
                }
                return v15 == v3 - v18;
              }
            }
          }
          unint64_t v15 = -1;
          if ((v3 & 0x80) != 0) {
LABEL_39:
          }
            unint64_t v3 = a2->tokenName.__r_.__value_.var0.var1.__size_;
          return v15 == v3 - v18;
        }
        return v9;
      }
      ++v13;
      --v12;
    }
    while (v12);
    uint64_t v9 = 0;
    uint64_t v11 = (Token *)((char *)v11 + 1);
    if (v11 != (Token *)v10) {
      continue;
    }
    return v9;
  }
}

std::string *quasar::CommandTagger::getTagText@<X0>(quasar::CommandTagger *this@<X0>, const std::string *a2@<X1>, std::string *a3@<X8>)
{
  if (*((char *)this + 47) < 0) {
    std::string::size_type v5 = *((void *)this + 4);
  }
  else {
    std::string::size_type v5 = *((unsigned __int8 *)this + 47);
  }
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
    unint64_t size = a2->__r_.__value_.__l.__size_;
  }
  else {
    unint64_t size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  if (*((char *)this + 71) < 0) {
    uint64_t v7 = *((void *)this + 7);
  }
  else {
    uint64_t v7 = *((unsigned __int8 *)this + 71);
  }
  return std::string::basic_string(a3, a2, v5, size + ~v7, (std::allocator<char> *)&v9);
}

void *std::allocate_shared[abi:ne180100]<quasar::QuasarTextProcImpl,std::allocator<quasar::QuasarTextProcImpl>,char const*&,quasar::SystemConfig &,std::string const&,void>@<X0>(char **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  BOOL v8 = operator new(0x48uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::QuasarTextProcImpl>::__shared_ptr_emplace[abi:ne180100]<char const*&,quasar::SystemConfig &,std::string const&,std::allocator<quasar::QuasarTextProcImpl>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B1CA3734(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::QuasarTextProcImpl>::__shared_ptr_emplace[abi:ne180100]<char const*&,quasar::SystemConfig &,std::string const&,std::allocator<quasar::QuasarTextProcImpl>,0>(void *a1, char **a2, uint64_t a3, uint64_t a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A606B0;
  std::allocator<quasar::QuasarTextProcImpl>::construct[abi:ne180100]<quasar::QuasarTextProcImpl,char const*&,quasar::SystemConfig &,std::string const&>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1B1CA37AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::QuasarTextProcImpl>::construct[abi:ne180100]<quasar::QuasarTextProcImpl,char const*&,quasar::SystemConfig &,std::string const&>(uint64_t a1, uint64_t a2, char **a3, uint64_t a4, uint64_t a5)
{
  std::string::basic_string[abi:ne180100]<0>(__p, *a3);
  quasar::QuasarTextProcImpl::QuasarTextProcImpl(a2, __p, a4, a5);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1CA3828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::string>::__count_unique<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = a1 + 16;
    uint64_t v5 = 1;
    do
    {
      if (!std::less<std::string>::operator()[abi:ne180100](v4, a2, v2 + 4))
      {
        if (!std::less<std::string>::operator()[abi:ne180100](v4, v2 + 4, a2)) {
          return v5;
        }
        ++v2;
      }
      uint64_t v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t std::vector<quasar::CommandTagging>::__push_back_slow_path<quasar::CommandTagging const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v6 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v6 = v4;
  }
  BOOL v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  BOOL v10 = v7;
  uint64_t v11 = (std::string *)&v7[72 * v3];
  uint64_t v13 = &v7[72 * v6];
  std::allocator<quasar::CommandTagging>::construct[abi:ne180100]<quasar::CommandTagging,quasar::CommandTagging const&>((uint64_t)(a1 + 2), v11, a2);
  uint64_t v12 = v11 + 3;
  std::vector<quasar::CommandTagging>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<quasar::CommandTagging>::~__split_buffer((uint64_t)&v10);
  return v8;
}

void sub_1B1CA39D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::CommandTagging>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::CommandTagging>::construct[abi:ne180100]<quasar::CommandTagging,quasar::CommandTagging const&>(uint64_t a1, std::string *a2, uint64_t a3)
{
  std::map<std::string,std::vector<quasar::Token>>::map[abi:ne180100]((uint64_t *)a2, (const void ***)a3);
  a2[1].__r_.__value_.__r.__words[0] = 0;
  a2[1].__r_.__value_.__l.__size_ = 0;
  a2[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2 + 1, *(long long **)(a3 + 24), *(long long **)(a3 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 3));
  uint64_t v5 = a2 + 2;
  if (*(char *)(a3 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 48), *(void *)(a3 + 56));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 48);
    a2[2].__r_.__value_.__r.__words[2] = *(void *)(a3 + 64);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1B1CA3A84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::destroy(v2, *(void **)(v2 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::CommandTagging>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::CommandTagging>,std::reverse_iterator<quasar::CommandTagging*>,std::reverse_iterator<quasar::CommandTagging*>,std::reverse_iterator<quasar::CommandTagging*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::CommandTagging>,std::reverse_iterator<quasar::CommandTagging*>,std::reverse_iterator<quasar::CommandTagging*>,std::reverse_iterator<quasar::CommandTagging*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = 0;
  uint64_t v12 = a7 - 72;
  while (a3 + v11 != a5)
  {
    uint64_t v13 = (std::string *)(v12 + v11);
    v11 -= 72;
    std::allocator<quasar::CommandTagging>::construct[abi:ne180100]<quasar::CommandTagging,quasar::CommandTagging const&>(a1, v13, v11 + a3);
  }
  return a6;
}

uint64_t std::__split_buffer<quasar::CommandTagging>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    quasar::CommandTagging::~CommandTagging((void **)(i - 72));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<std::vector<quasar::CommandTagging>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::CommandTagging> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  void *v3 = 0;
  v3[1] = 0;
  _OWORD v3[2] = 0;
  uint64_t result = std::vector<quasar::CommandTagging>::__init_with_size[abi:ne180100]<quasar::CommandTagging*,quasar::CommandTagging*>(v3, *a2, a2[1], 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3));
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1B1CA3C7C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<quasar::CommandTagging>>::__push_back_slow_path<std::vector<quasar::CommandTagging> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    BOOL v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    BOOL v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  unint64_t v15 = v11;
  int v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<quasar::CommandTagging>::__init_with_size[abi:ne180100]<quasar::CommandTagging*,quasar::CommandTagging*>(v11, *a2, a2[1], 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3));
  v15 += 24;
  std::vector<std::vector<quasar::CommandTagging>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<quasar::CommandTagging>>::~__split_buffer(v14);
  return v12;
}

void sub_1B1CA3D9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::CommandTagging>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<quasar::CommandTagging>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::CommandTagging>>,std::reverse_iterator<std::vector<quasar::CommandTagging>*>,std::reverse_iterator<std::vector<quasar::CommandTagging>*>,std::reverse_iterator<std::vector<quasar::CommandTagging>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::CommandTagging>>,std::reverse_iterator<std::vector<quasar::CommandTagging>*>,std::reverse_iterator<std::vector<quasar::CommandTagging>*>,std::reverse_iterator<std::vector<quasar::CommandTagging>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  float32x2_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::CommandTagging>>,std::reverse_iterator<std::vector<quasar::CommandTagging>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::CommandTagging>>,std::reverse_iterator<std::vector<quasar::CommandTagging>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::CommandTagging>>,std::reverse_iterator<std::vector<quasar::CommandTagging>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::CommandTagging>>,std::reverse_iterator<std::vector<quasar::CommandTagging>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<quasar::CommandTagging>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<quasar::CommandTagging>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<quasar::CommandTagging>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<quasar::CommandTagging>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    long long v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<quasar::Token>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<quasar::Token>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  long long v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    void v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B1CA4104(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<quasar::Token>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<quasar::Token>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

kaldi::Mfcc *kaldi::Mfcc::Mfcc(kaldi::Mfcc *this, const kaldi::MfccOptions *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  long long v4 = *(_OWORD *)a2;
  *(void *)((char *)this + 29) = *(void *)((char *)a2 + 13);
  *((_OWORD *)this + 1) = v4;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    *((void *)this + 7) = *((void *)a2 + 5);
    *(_OWORD *)((char *)this + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v5;
  }
  *((void *)this + 8) = *((void *)a2 + 6);
  long long v6 = *(_OWORD *)((char *)a2 + 56);
  long long v7 = *(_OWORD *)((char *)a2 + 72);
  long long v8 = *(_OWORD *)((char *)a2 + 85);
  *((void *)this + 15) = 0;
  *(_OWORD *)((char *)this + 101) = v8;
  *(_OWORD *)((char *)this + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v6;
  *(_OWORD *)((char *)this + 88) = v7;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  kaldi::Matrix<float>::Matrix((uint64_t)this + 144);
  *((void *)this + 25) = 0;
  *((void *)this + ++*(_DWORD *)(result + 24) = (char *)this + 200;
  *((void *)this + 26) = 0;
  kaldi::FeatureWindowFunction::FeatureWindowFunction((kaldi::Mfcc *)((char *)this + 216), a2);
  *((void *)this + 3std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  uint64_t v9 = *((unsigned int *)a2 + 14);
  kaldi::Matrix<float>::Matrix((uint64_t)v15, v9, v9, 0, 0);
  kaldi::ComputeDctMatrix<float>((uint64_t)v15);
  kaldi::SubMatrix<float>::SubMatrix((uint64_t)v14, (uint64_t)v15, 0, *((_DWORD *)a2 + 20), 0, v9);
  kaldi::Matrix<float>::Resize((int32x2_t *)this + 18, *((unsigned int *)a2 + 20), v9, 0, 0);
  kaldi::MatrixBase<float>::CopyFromMat<float>((int *)this + 36, v14, 111);
  if (*((float *)a2 + 24) != 0.0)
  {
    kaldi::Vector<float>::Resize((void **)this + 15, *((unsigned int *)a2 + 20), 0);
    v10.n128_u32[0] = *((_DWORD *)a2 + 24);
    kaldi::ComputeLifterCoeffs((uint64_t *)this + 15, v10);
  }
  float v11 = *((float *)a2 + 22);
  if (v11 > 0.0) {
    *((float *)this + 46) = logf(v11);
  }
  int v12 = kaldi::FrameExtractionOptions::PaddedWindowSize(a2);
  if ((v12 & (v12 - 1)) == 0) {
    operator new();
  }
  kaldi::Mfcc::GetMelBanks(this, 1.0);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v14);
  kaldi::Matrix<float>::~Matrix((uint64_t)v15);
  return this;
}

void sub_1B1CA431C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  int v16 = *(std::__shared_weak_count **)(v14 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::FrameExtractionOptions::PaddedWindowSize(kaldi::FrameExtractionOptions *this)
{
  float v1 = *((float *)this + 13);
  if (*((unsigned char *)this + 48))
  {
    if (v1 <= 0.0) {
      float v1 = *(float *)this;
    }
    return kaldi::RoundUpToNearestPowerOfTwo((kaldi *)(int)(v1 * 0.001 * *((float *)this + 2)));
  }
  else
  {
    if (v1 <= 0.0) {
      float v1 = *(float *)this;
    }
    return (int)(v1 * 0.001 * *((float *)this + 2));
  }
}

uint64_t kaldi::Mfcc::GetMelBanks(kaldi::Mfcc *this, float a2)
{
  uint64_t v2 = (char **)*((void *)this + 25);
  if (!v2) {
    goto LABEL_8;
  }
  uint64_t v3 = (float *)((char *)this + 200);
  do
  {
    long long v4 = v2 + 1;
    if (*((float *)v2 + 8) >= a2)
    {
      long long v4 = v2;
      uint64_t v3 = (float *)v2;
    }
    uint64_t v2 = (char **)*v4;
  }
  while (*v4);
  if (v3 == (float *)((char *)this + 200) || v3[8] > a2) {
LABEL_8:
  }
    operator new();
  return *((void *)v3 + 5);
}

void sub_1B1CA4518(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A0C409C5A7551);
  _Unwind_Resume(a1);
}

void kaldi::Mfcc::~Mfcc(kaldi::Mfcc *this)
{
  uint64_t v2 = (char *)this + 192;
  uint64_t v3 = (char *)*((void *)this + 24);
  long long v4 = (char *)this + 200;
  if (v3 != (char *)this + 200)
  {
    do
    {
      uint64_t v5 = *((void *)v3 + 5);
      if (v5)
      {
        int v12 = (void **)(v5 + 24);
        std::vector<std::pair<int,kaldi::Vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v12);
        kaldi::Vector<float>::Destroy(v5);
        MEMORY[0x1B3EA8670](v5, 0x10A0C409C5A7551);
      }
      long long v6 = (char *)*((void *)v3 + 1);
      if (v6)
      {
        do
        {
          long long v7 = v6;
          long long v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (char *)*((void *)v3 + 2);
          BOOL v8 = *(void *)v7 == (void)v3;
          uint64_t v3 = v7;
        }
        while (!v8);
      }
      uint64_t v3 = v7;
    }
    while (v7 != v4);
  }
  uint64_t v9 = *((void *)this + 30);
  if (v9)
  {
    uint64_t v10 = kaldi::SplitRadixComplexFft<float>::~SplitRadixComplexFft(v9);
    MEMORY[0x1B3EA8670](v10, 0x1090C40943DB512);
  }
  kaldi::Vector<float>::Destroy((uint64_t)this + 216);
  std::__tree<int>::destroy((uint64_t)v2, *((void **)this + 25));
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 144);
  kaldi::Vector<float>::Destroy((uint64_t)this + 120);
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  float v11 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void kaldi::Mfcc::Compute(kaldi::Mfcc *a1, uint64_t a2, int32x2_t *a3, void **a4, float a5)
{
  uint64_t MelBanks = kaldi::Mfcc::GetMelBanks(a1, a5);
  kaldi::Mfcc::ComputeInternal((uint64_t)a1, a2, MelBanks, a3, a4);
}

void kaldi::Mfcc::ComputeInternal(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4, void **a5)
{
  unsigned int v30 = (float *)(a1 + 16);
  uint64_t v9 = kaldi::NumFrames(*(_DWORD *)(a2 + 8), a1 + 16);
  if (v9)
  {
    int v10 = v9;
    kaldi::Matrix<float>::Resize(a4, v9, *(unsigned int *)(a1 + 96), 0, 0);
    if (a5) {
      kaldi::ExtractWaveformRemainder(a2, v30, a5);
    }
    char v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    memset(v45, 0, sizeof(v45));
    int v42 = 0;
    char v43 = 0;
    uint64_t v44 = 0;
    if (v10 >= 1)
    {
      int v11 = 0;
      int v12 = *(unsigned __int8 *)(a1 + 100);
      do
      {
        float v41 = 1.0;
        if (v12 && *(unsigned char *)(a1 + 108)) {
          long long v13 = &v41;
        }
        else {
          long long v13 = 0;
        }
        kaldi::ExtractWindow((uint64_t *)a2, v11, (uint64_t)v30, (float **)(a1 + 216), (void **)&v46, v13);
        if (*(unsigned char *)(a1 + 100) && !*(unsigned char *)(a1 + 108))
        {
          float v14 = kaldi::VecVec<float>((uint64_t)&v46, (const float **)&v46);
          if (v14 < 1.1755e-38) {
            float v14 = 1.1755e-38;
          }
          float v41 = v14;
        }
        float v15 = logf(v41);
        if ((LODWORD(v15) & 0x7FFFFFFFu) >= 0x7F800000)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__dst);
          kaldi::VectorBase<float>::Write((uint64_t)&v46, &__dst, 0);
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Non-finite energy found for frame ", 34);
          int v25 = (void *)std::ostream::operator<<();
          BOOL v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)". Waveform is: ", 15);
          std::stringbuf::str();
          if ((v32 & 0x80u) == 0) {
            BOOL v27 = __p;
          }
          else {
            BOOL v27 = (void **)__p[0];
          }
          if ((v32 & 0x80u) == 0) {
            uint64_t v28 = v32;
          }
          else {
            uint64_t v28 = (uint64_t)__p[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
          if ((char)v32 < 0) {
            operator delete(__p[0]);
          }
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v33);
        }
        uint64_t v16 = *(void *)(a1 + 240);
        if (v16) {
          kaldi::SplitRadixRealFft<float>::Compute(v16, v46, 1, &v42);
        }
        else {
          kaldi::RealFft<float>((uint64_t)&v46, 1);
        }
        kaldi::ComputePowerSpectrum((uint64_t)&v46);
        int v35 = 0;
        uint64_t v36 = 0;
        uint64_t v33 = v46;
        int v34 = (int)v47 / 2 + 1;
        kaldi::MelBanks::Compute(a3, &v33, (uint64_t)v45);
        kaldi::VectorBase<float>::ApplyFloor((uint64_t)v45, 1.1755e-38);
        kaldi::VectorBase<float>::ApplyLog((uint64_t)v45);
        int32x2_t v17 = *a4;
        __int32 v18 = a4[2].i32[0];
        int v19 = kaldi::MatrixBase<float>::NumCols((uint64_t)a4);
        int v39 = 0;
        uint64_t v40 = 0;
        __dst = (void *)(*(void *)&v17 + 4 * v18 * v11);
        int v38 = v19;
        kaldi::VectorBase<float>::AddMatVec((uint64_t)&__dst, (const float **)(a1 + 144), CblasNoTrans, (uint64_t)v45, 1.0, 0.0);
        if (*(float *)(a1 + 112) != 0.0) {
          kaldi::VectorBase<float>::MulElements((uint64_t)&__dst, (float **)(a1 + 120));
        }
        int v12 = *(unsigned __int8 *)(a1 + 100);
        if (*(unsigned char *)(a1 + 100))
        {
          if (*(float *)(a1 + 104) > 0.0 && v15 < *(float *)(a1 + 184)) {
            float v15 = *(float *)(a1 + 184);
          }
          *(float *)__dst = v15;
        }
        if (*(unsigned char *)(a1 + 116))
        {
          __int32 v20 = (float *)__dst;
          float v21 = *(float *)__dst;
          int v22 = *(_DWORD *)(a1 + 96);
          int v23 = v22 - 1;
          if (v22 >= 2) {
            memmove(__dst, (char *)__dst + 4, 4 * (v22 - 1));
          }
          float v24 = v21 * 1.41421356;
          if (v12) {
            float v24 = v21;
          }
          v20[v23] = v24;
        }
        ++v11;
      }
      while (v10 != v11);
      if (v42)
      {
        char v43 = v42;
        operator delete(v42);
      }
    }
    kaldi::Vector<float>::Destroy((uint64_t)v45);
    kaldi::Vector<float>::Destroy((uint64_t)&v46);
  }
  else
  {
    kaldi::Matrix<float>::Resize(a4, 0, 0, 0, 0);
    kaldi::Vector<float>::Resize(a5, *(unsigned int *)(a2 + 8), 1);
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)a5, (const void **)a2);
  }
}

void sub_1B1CA4AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  std::ostringstream::~ostringstream((uint64_t)&a51);
  int v53 = *(void **)(v51 - 176);
  if (v53)
  {
    *(void *)(v51 - 168) = v53;
    operator delete(v53);
  }
  kaldi::Vector<float>::Destroy(v51 - 152);
  kaldi::Vector<float>::Destroy(v51 - 128);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>(uint64_t **a1, float *a2, uint64_t a3, _DWORD **a4)
{
  long long v7 = a1 + 1;
  long long v6 = a1[1];
  if (v6)
  {
    float v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        float v10 = *((float *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        long long v6 = (uint64_t *)*v6;
        long long v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      long long v6 = (uint64_t *)v6[1];
      if (!v6)
      {
        long long v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    int v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void *LHash<unsigned int,float>::alloc(void *a1, unsigned int a2)
{
  char v3 = -1;
  do
    uint64_t v4 = (1 << ++v3);
  while (v4 < a2);
  uint64_t result = BM_malloc(8 * (v4 - 1) + 12);
  *a1 = result;
  *(_DWORD *)uint64_t result = *(_DWORD *)result & 0xFFFFFFE0 | v3 & 0x1F;
  *(_DWORD *)*a1 &= 0x1Fu;
  long long v6 = (_DWORD *)(*a1 + 8);
  do
  {
    *long long v6 = -1;
    v6 += 2;
    --v4;
  }
  while (v4);
  return result;
}

void LHash<unsigned int,float>::clear(void *a1, unsigned int a2)
{
  uint64_t v4 = (void *)*a1;
  if (v4)
  {
    BM_free(v4, 8 * ~(-1 << *(_DWORD *)v4) + 12);
    *a1 = 0;
  }
  if (a2)
  {
    if (a2 >= 8) {
      a2 = (float)((float)(a2 + 1) / 0.8);
    }
    LHash<unsigned int,float>::alloc(a1, a2);
  }
}

void *LHash<unsigned int,float>::~LHash(void *a1)
{
  return a1;
}

uint64_t LHash<unsigned int,float>::find(_DWORD **a1, unsigned int a2, unsigned char *a3)
{
  int v7 = 0;
  int v5 = LHash<unsigned int,float>::locate(a1, a2, &v7);
  *a3 = v5;
  if (v5) {
    return (uint64_t)&(*a1)[2 * v7 + 1];
  }
  else {
    return 0;
  }
}

uint64_t LHash<unsigned int,float>::locate(_DWORD **a1, unsigned int a2, _DWORD *a3)
{
  char v3 = *a1;
  if (!*a1) {
    return 0;
  }
  uint64_t v4 = v3 + 1;
  unint64_t v5 = *v3;
  char v6 = v5 & 0x1F;
  if ((*v3 & 0x1Fu) > 2)
  {
    uint64_t v9 = -1 << v6;
    unint64_t v7 = ((1103515245 * (unint64_t)a2 + 12345) >> (30 - v6)) & ~(-1 << v6);
    int v10 = v4[2 * v7 + 1];
    if (v10 == -1)
    {
LABEL_10:
      uint64_t result = 0;
    }
    else
    {
      int v11 = ~v9;
      while (v10 != a2)
      {
        unint64_t v7 = (v7 + 1) & v11;
        int v10 = v4[2 * v7 + 1];
        if (v10 == -1) {
          goto LABEL_10;
        }
      }
      uint64_t result = 1;
    }
  }
  else if (v5 >= 0x20)
  {
    uint64_t v12 = 0;
    unint64_t v7 = v5 >> 5;
    long long v13 = v3 + 2;
    while (1)
    {
      int v14 = *v13;
      v13 += 2;
      if (v14 == a2) {
        break;
      }
      if (v7 == ++v12) {
        goto LABEL_14;
      }
    }
    uint64_t result = 1;
    LODWORD(v7) = v12;
  }
  else
  {
    LODWORD(v7) = 0;
LABEL_14:
    uint64_t result = 0;
  }
  *a3 = v7;
  return result;
}

uint64_t LHash<unsigned int,float>::insert(void *a1, unsigned int a2, unsigned char *a3)
{
  if (!*a1) {
    LHash<unsigned int,float>::alloc(a1, 1u);
  }
  unsigned int v15 = 0;
  int v6 = LHash<unsigned int,float>::locate((_DWORD **)a1, a2, &v15);
  *a3 = v6;
  unint64_t v7 = (void *)*a1;
  if (!v6)
  {
    unint64_t v8 = *(unsigned int *)v7;
    uint64_t v9 = 1 << (v8 & 0x1F);
    unint64_t v10 = v8 >> 5;
    if (v8 >= 0xE0) {
      unsigned int v11 = (float)((float)(v10 + 2) / 0.8);
    }
    else {
      unsigned int v11 = v10 + 1;
    }
    if (v11 > v9)
    {
      LHash<unsigned int,float>::alloc(a1, v11);
      *(_DWORD *)*a1 = v8 & 0xFFFFFFE0 | *(_DWORD *)*a1 & 0x1F;
      if ((*(_DWORD *)*a1 & 0x1Fu) >= 3)
      {
        uint64_t v12 = (unsigned int *)(v7 + 1);
        uint64_t v13 = 1 << (v8 & 0x1F);
        do
        {
          if (*v12 != -1)
          {
            LHash<unsigned int,float>::locate((_DWORD **)a1, *v12, &v15);
            *(void *)(*a1 + 8 * v15 + 4) = *(void *)(v12 - 1);
          }
          v12 += 2;
          --v13;
        }
        while (v13);
      }
      else
      {
        memcpy((void *)(*a1 + 4), (char *)v7 + 4, 8 * v10);
      }
      BM_free(v7, 8 * (v9 - 1) + 12);
      LHash<unsigned int,float>::locate((_DWORD **)a1, a2, &v15);
      unint64_t v7 = (void *)*a1;
    }
    LODWORD(v7[v15 + 1]) = a2;
    HIDWORD(v7[v15]) = 0;
    *(_DWORD *)*a1 += 32;
    unint64_t v7 = (void *)*a1;
  }
  return (uint64_t)&v7[v15] + 4;
}

uint64_t LHash<unsigned int,float>::remove(unsigned int **a1, unsigned int a2, _DWORD *a3)
{
  unsigned int v16 = 0;
  uint64_t result = LHash<unsigned int,float>::locate(a1, a2, &v16);
  if (result)
  {
    int v6 = *a1;
    (*a1)[2 * v16 + 2] = -1;
    if (a3)
    {
      *a3 = v6[2 * v16 + 1];
      int v6 = *a1;
    }
    unsigned int v7 = *v6;
    unsigned int v8 = *v6 & 0x1F;
    if (v8 >= 3)
    {
      int v15 = 0;
      unsigned int v10 = v16 + 1;
      for (int i = -1 << v8; ; int i = -1 << *v6)
      {
        unsigned int v16 = v10 & ~i;
        unsigned int v12 = v6[2 * v16 + 2];
        if (v12 == -1) {
          break;
        }
        int v13 = LHash<unsigned int,float>::locate(a1, v12, &v15);
        int v6 = *a1;
        if (!v13)
        {
          uint64_t v14 = v16;
          *(void *)&v6[2 * v15 + 1] = *(void *)&v6[2 * v16 + 1];
          int v6 = *a1;
          (*a1)[2 * v14 + 2] = -1;
        }
        int v15 = 0;
        unsigned int v10 = v16 + 1;
      }
    }
    else
    {
      unsigned int v9 = v7 >> 5;
      memmove(&v6[2 * v16 + 1], &v6[2 * v16 + 3], 8 * (~v16 + (v7 >> 5)));
      int v6 = *a1;
      (*a1)[2 * v9] = -1;
    }
    *v6 -= 32;
    return 1;
  }
  return result;
}

void *LHash<unsigned int,float>::setsize(void *result, unsigned int a2)
{
  if (a2 && !*result)
  {
    if (a2 >= 8) {
      a2 = (float)((float)(a2 + 1) / 0.8);
    }
    return LHash<unsigned int,float>::alloc(result, a2);
  }
  return result;
}

_DWORD **LHash<unsigned int,float>::memStats(_DWORD **result, uint64_t *a2)
{
  uint64_t v2 = *a2 + 8;
  *a2 = v2;
  char v3 = *result;
  if (*result)
  {
    int v4 = 1 << *v3;
    unint64_t v5 = 8 * (v4 - 1) + 12;
    *a2 = v5 + v2;
    a2[1] += 8 * (v4 - (*v3 >> 5));
    uint64_t v6 = 256;
    if (v5 < 0x100) {
      uint64_t v6 = 8 * (v4 - 1) + 12;
    }
    ++*((_DWORD *)a2 + v6 + 4);
  }
  return result;
}

uint64_t LHashIter<unsigned int,float>::LHashIter(uint64_t result, _DWORD **a2, uint64_t a3)
{
  char v3 = *a2;
  *(void *)uint64_t result = *a2;
  *(_DWORD *)(result + 8) = 0;
  if (v3)
  {
    *(_DWORD *)(result + 1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *v3 >> 5;
    *(void *)(result + 16) = a3;
    *(void *)(result + ++*(_DWORD *)(result + 24) = 0;
    LHashIter<unsigned int,float>::sortKeys();
  }
  *(_DWORD *)(result + 1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(result + 16) = a3;
  *(void *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void LHashIter<unsigned int,float>::sortKeys()
{
}

void sub_1B1CA53A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    MEMORY[0x1B3EA8630](a12, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LHashIter<unsigned int,float>::init(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    uint64_t result = MEMORY[0x1B3EA8630](result, 0x1000C8052888210);
  }
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  if (*(void *)a1)
  {
    *(_DWORD *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = **(_DWORD **)a1 >> 5;
    LHashIter<unsigned int,float>::sortKeys();
  }
  *(_DWORD *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  return result;
}

uint64_t LHashIter<unsigned int,float>::next(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(_DWORD **)a1;
  if (!*(void *)a1) {
    return 0;
  }
  unsigned int v10 = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 == *(_DWORD *)(a1 + 12)) {
    return 0;
  }
  unsigned int v9 = v2;
  uint64_t v7 = *(void *)(a1 + 24);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  LHash<unsigned int,float>::locate(&v9, *(_DWORD *)(v7 + 4 * v4), &v10);
  uint64_t v8 = *(void *)a1 + 8 * v10;
  uint64_t result = v8 + 4;
  *a2 = *(_DWORD *)(v8 + 8);
  return result;
}

void sub_1B1CA54D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *LHash<unsigned int,Trie<unsigned int,BOnode>>::alloc(void *a1, unsigned int a2)
{
  char v3 = -1;
  do
    uint64_t v4 = (1 << ++v3);
  while (v4 < a2);
  uint64_t result = BM_malloc(32 * (v4 - 1) + 40);
  uint64_t v6 = 0;
  *a1 = result;
  *(_DWORD *)uint64_t result = *(_DWORD *)result & 0xFFFFFFE0 | v3 & 0x1F;
  *(_DWORD *)*a1 &= 0x1Fu;
  do
  {
    uint64_t v7 = *a1 + v6;
    *(_DWORD *)(v7 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = -1;
    *(void *)(v7 + 16) = 0;
    *(void *)(v7 + ++*(_DWORD *)(result + 24) = 0;
    *(void *)(v7 + 8) = 0;
    v6 += 32;
    --v4;
  }
  while (v4);
  return result;
}

void LHash<unsigned int,Trie<unsigned int,BOnode>>::clear(void *a1, unsigned int a2)
{
  uint64_t v4 = (void *)*a1;
  if (v4)
  {
    BM_free(v4, 32 * ~(-1 << *(_DWORD *)v4) + 40);
    *a1 = 0;
  }
  if (a2)
  {
    if (a2 >= 8) {
      a2 = (float)((float)(a2 + 1) / 0.8);
    }
    LHash<unsigned int,Trie<unsigned int,BOnode>>::alloc(a1, a2);
  }
}

void *LHash<unsigned int,Trie<unsigned int,BOnode>>::~LHash(void *a1)
{
  return a1;
}

uint64_t LHash<unsigned int,Trie<unsigned int,BOnode>>::locate(_DWORD **a1, unsigned int a2, _DWORD *a3)
{
  char v3 = *a1;
  if (!*a1) {
    return 0;
  }
  uint64_t v4 = v3 + 2;
  unint64_t v5 = *v3;
  char v6 = v5 & 0x1F;
  if ((*v3 & 0x1Fu) > 2)
  {
    uint64_t v9 = -1 << v6;
    unint64_t v7 = ((1103515245 * (unint64_t)a2 + 12345) >> (30 - v6)) & ~(-1 << v6);
    int v10 = v4[8 * v7 + 6];
    if (v10 == -1)
    {
LABEL_10:
      uint64_t result = 0;
    }
    else
    {
      int v11 = ~v9;
      while (v10 != a2)
      {
        unint64_t v7 = (v7 + 1) & v11;
        int v10 = v4[8 * v7 + 6];
        if (v10 == -1) {
          goto LABEL_10;
        }
      }
      uint64_t result = 1;
    }
  }
  else if (v5 >= 0x20)
  {
    uint64_t v12 = 0;
    unint64_t v7 = v5 >> 5;
    int v13 = v3 + 8;
    while (1)
    {
      int v14 = *v13;
      v13 += 8;
      if (v14 == a2) {
        break;
      }
      if (v7 == ++v12) {
        goto LABEL_14;
      }
    }
    uint64_t result = 1;
    LODWORD(v7) = v12;
  }
  else
  {
    LODWORD(v7) = 0;
LABEL_14:
    uint64_t result = 0;
  }
  *a3 = v7;
  return result;
}

uint64_t LHash<unsigned int,Trie<unsigned int,BOnode>>::insert(void *a1, unsigned int a2, unsigned char *a3)
{
  if (!*a1) {
    LHash<unsigned int,Trie<unsigned int,BOnode>>::alloc(a1, 1u);
  }
  unsigned int v20 = 0;
  int v6 = LHash<unsigned int,Trie<unsigned int,BOnode>>::locate((_DWORD **)a1, a2, &v20);
  *a3 = v6;
  unint64_t v7 = (void *)*a1;
  if (!v6)
  {
    int v8 = *(_DWORD *)v7;
    uint64_t v9 = 1 << (*(_DWORD *)v7 & 0x1F);
    int v10 = *(_DWORD *)v7 >> 5;
    if (*(_DWORD *)v7 >= 0xE0u) {
      unsigned int v11 = (float)((float)(v10 + 2) / 0.8);
    }
    else {
      unsigned int v11 = v10 + 1;
    }
    if (v11 > v9)
    {
      LHash<unsigned int,Trie<unsigned int,BOnode>>::alloc(a1, v11);
      *(_DWORD *)*a1 = v8 & 0xFFFFFFE0 | *(_DWORD *)*a1 & 0x1F;
      if ((*(_DWORD *)*a1 & 0x1Fu) >= 3)
      {
        uint64_t v12 = (unsigned int *)(v7 + 4);
        uint64_t v13 = v9;
        do
        {
          if (*v12 != -1)
          {
            LHash<unsigned int,Trie<unsigned int,BOnode>>::locate((_DWORD **)a1, *v12, &v20);
            uint64_t v14 = *a1 + 32 * v20;
            long long v15 = *(_OWORD *)(v12 - 6);
            *(_OWORD *)(v14 + ++*(_DWORD *)(result + 24) = *(_OWORD *)(v12 - 2);
            *(_OWORD *)(v14 + 8) = v15;
          }
          v12 += 8;
          --v13;
        }
        while (v13);
      }
      else
      {
        memcpy((void *)(*a1 + 8), v7 + 1, v8 & 0xFFFFFFE0);
      }
      BM_free(v7, 32 * (v9 - 1) + 40);
      LHash<unsigned int,Trie<unsigned int,BOnode>>::locate((_DWORD **)a1, a2, &v20);
      unint64_t v7 = (void *)*a1;
    }
    LODWORD(v7[4 * v20 + 4]) = a2;
    uint64_t v16 = v20;
    int32x2_t v17 = &v7[4 * v20 + 1];
    v17[1] = 0;
    float32x2_t v17[2] = 0;
    void *v17 = 0;
    __int32 v18 = (void *)(*a1 + 32 * v16);
    void v18[2] = 0;
    uint64_t v18[3] = 0;
    v18[1] = 0;
    *(_DWORD *)*a1 += 32;
    unint64_t v7 = (void *)*a1;
  }
  return (uint64_t)&v7[4 * v20 + 1];
}

uint64_t LHash<unsigned int,Trie<unsigned int,BOnode>>::remove(unsigned int **a1, unsigned int a2, uint64_t a3)
{
  unsigned int v23 = 0;
  uint64_t result = LHash<unsigned int,Trie<unsigned int,BOnode>>::locate(a1, a2, &v23);
  if (result)
  {
    int v6 = *a1;
    (*a1)[8 * v23 + 8] = -1;
    if (a3)
    {
      unint64_t v7 = &v6[8 * v23];
      uint64_t v8 = *((void *)v7 + 3);
      *(_OWORD *)a3 = *(_OWORD *)(v7 + 2);
      *(void *)(a3 + 16) = v8;
      int v6 = *a1;
    }
    unsigned int v9 = *v6;
    unsigned int v10 = *v6 & 0x1F;
    if (v10 >= 3)
    {
      int v22 = 0;
      unsigned int v12 = v23 + 1;
      for (int i = -1 << v10; ; int i = -1 << *v6)
      {
        uint64_t v14 = v12 & ~i;
        unsigned int v23 = v14;
        unsigned int v15 = v6[8 * v14 + 8];
        if (v15 == -1) {
          break;
        }
        int v16 = LHash<unsigned int,Trie<unsigned int,BOnode>>::locate(a1, v15, &v22);
        int v6 = *a1;
        if (!v16)
        {
          uint64_t v17 = v23;
          __int32 v18 = v6 + 2;
          int v19 = &v18[8 * v22];
          unsigned int v20 = &v18[8 * v23];
          long long v21 = v20[1];
          _OWORD *v19 = *v20;
          v19[1] = v21;
          int v6 = *a1;
          (*a1)[8 * v17 + 8] = -1;
        }
        int v22 = 0;
        unsigned int v12 = v23 + 1;
      }
    }
    else
    {
      unsigned int v11 = v9 >> 5;
      memmove(&v6[8 * v23 + 2], &v6[8 * v23 + 10], 32 * (~v23 + (v9 >> 5)));
      int v6 = *a1;
      (*a1)[8 * v11] = -1;
    }
    *v6 -= 32;
    return 1;
  }
  return result;
}

_DWORD **LHash<unsigned int,Trie<unsigned int,BOnode>>::memStats(_DWORD **result, uint64_t *a2)
{
  uint64_t v2 = *a2 + 8;
  *a2 = v2;
  char v3 = *result;
  if (*result)
  {
    int v4 = 1 << *v3;
    unint64_t v5 = 32 * (v4 - 1) + 40;
    *a2 = v5 + v2;
    a2[1] += 32 * (v4 - (*v3 >> 5));
    uint64_t v6 = 256;
    if (v5 < 0x100) {
      uint64_t v6 = 32 * (v4 - 1) + 40;
    }
    ++*((_DWORD *)a2 + v6 + 4);
  }
  return result;
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,BOnode>>::LHashIter(uint64_t result, _DWORD **a2, uint64_t a3)
{
  char v3 = *a2;
  *(void *)uint64_t result = *a2;
  *(_DWORD *)(result + 8) = 0;
  if (v3)
  {
    *(_DWORD *)(result + 1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *v3 >> 5;
    *(void *)(result + 16) = a3;
    *(void *)(result + ++*(_DWORD *)(result + 24) = 0;
    LHashIter<unsigned int,Trie<unsigned int,BOnode>>::sortKeys();
  }
  *(_DWORD *)(result + 1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(result + 16) = a3;
  *(void *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void LHashIter<unsigned int,Trie<unsigned int,BOnode>>::sortKeys()
{
}

void sub_1B1CA5C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    MEMORY[0x1B3EA8630](a12, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,BOnode>>::init(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    uint64_t result = MEMORY[0x1B3EA8630](result, 0x1000C8052888210);
  }
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  if (*(void *)a1)
  {
    *(_DWORD *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = **(_DWORD **)a1 >> 5;
    LHashIter<unsigned int,Trie<unsigned int,BOnode>>::sortKeys();
  }
  *(_DWORD *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  return result;
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,BOnode>>::next(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(_DWORD **)a1;
  if (!*(void *)a1) {
    return 0;
  }
  unsigned int v10 = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 == *(_DWORD *)(a1 + 12)) {
    return 0;
  }
  unsigned int v9 = v2;
  uint64_t v7 = *(void *)(a1 + 24);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  LHash<unsigned int,Trie<unsigned int,BOnode>>::locate(&v9, *(_DWORD *)(v7 + 4 * v4), &v10);
  uint64_t v8 = *(void *)a1 + 32 * v10;
  uint64_t result = v8 + 8;
  *a2 = *(_DWORD *)(v8 + 32);
  return result;
}

void sub_1B1CA5D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *Trie<unsigned int,BOnode>::Trie(void *a1, unsigned int a2)
{
  *a1 = 0;
  if (a2)
  {
    if (a2 >= 8) {
      a2 = (float)((float)(a2 + 1) / 0.8);
    }
    LHash<unsigned int,Trie<unsigned int,BOnode>>::alloc(a1, a2);
  }
  a1[1] = 0;
  a1[2] = 0;
  return a1;
}

uint64_t Trie<unsigned int,BOnode>::~Trie(uint64_t a1)
{
  LHashIter<unsigned int,Trie<unsigned int,BOnode>>::LHashIter((uint64_t)v4, (_DWORD **)a1, 0);
  int v3 = 0;
  while (LHashIter<unsigned int,Trie<unsigned int,BOnode>>::next((uint64_t)v4, &v3))
    Trie<unsigned int,BOnode>::~Trie();
  if (v5) {
    MEMORY[0x1B3EA8630](v5, 0x1000C8052888210);
  }
  LHash<unsigned int,float>::clear((void *)(a1 + 16), 0);
  LHash<unsigned int,Trie<unsigned int,BOnode>>::clear((void *)a1, 0);
  return a1;
}

uint64_t Trie<unsigned int,BOnode>::findTrie(_DWORD **a1, unsigned int *a2, unsigned char *a3)
{
  uint64_t v4 = a1;
  if (!a2 || (unsigned int v6 = *a2, v6 == -1))
  {
    *a3 = 1;
  }
  else
  {
    unsigned int v8 = 0;
    if (LHash<unsigned int,Trie<unsigned int,BOnode>>::locate(a1, v6, &v8))
    {
      return Trie<unsigned int,BOnode>::findTrie(*v4 + 32 * v8 + 8, a2 + 1, a3);
    }
    else
    {
      uint64_t v4 = 0;
      *a3 = 0;
    }
  }
  return (uint64_t)v4;
}

void *Trie<unsigned int,BOnode>::findPrefixTrie(_DWORD **a1, unsigned int *a2, _DWORD *a3)
{
  PrefixTrie = a1;
  if (a2
    && (unsigned int v6 = *a2, v6 != -1)
    && (unsigned int v10 = 0, LHash<unsigned int,Trie<unsigned int,BOnode>>::locate(a1, v6, &v10)))
  {
    uint64_t v7 = *PrefixTrie + 32 * v10 + 8;
    int v9 = 0;
    PrefixTrie = (void *)Trie<unsigned int,BOnode>::findPrefixTrie(v7, a2 + 1, &v9);
    *a3 = v9 + 1;
  }
  else
  {
    *a3 = 0;
  }
  return PrefixTrie;
}

void *Trie<unsigned int,BOnode>::insertTrie(void *result, unsigned int *a2, unsigned char *a3)
{
  if (!a2 || (unsigned int v5 = *a2, v5 == -1))
  {
LABEL_6:
    *a3 = 1;
  }
  else
  {
    unsigned int v6 = a2 + 1;
    while (1)
    {
      uint64_t result = (void *)LHash<unsigned int,Trie<unsigned int,BOnode>>::insert(result, v5, a3);
      if (!*a3) {
        break;
      }
      unsigned int v7 = *v6++;
      unsigned int v5 = v7;
      if (v7 == -1) {
        goto LABEL_6;
      }
    }
    char v8 = 0;
    return (void *)Trie<unsigned int,BOnode>::insertTrie(result, v6, &v8);
  }
  return result;
}

uint64_t Trie<unsigned int,BOnode>::removeTrie(unsigned int **a1, unsigned int *a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  unsigned int v4 = *a2;
  if (v4 == -1) {
    return 0;
  }
  unsigned int v8 = a2[1];
  unsigned int v7 = a2 + 1;
  if (v8 != -1)
  {
    LODWORD(v11[0]) = 0;
    if (LHash<unsigned int,Trie<unsigned int,BOnode>>::locate(a1, v4, v11)) {
      return Trie<unsigned int,BOnode>::removeTrie(&(*a1)[8 * LODWORD(v11[0]) + 2], v7, a3);
    }
    return 0;
  }
  if (!a3)
  {
    memset(v11, 0, sizeof(v11));
    if (LHash<unsigned int,Trie<unsigned int,BOnode>>::remove(a1, v4, (uint64_t)v11))
    {
      Trie<unsigned int,BOnode>::~Trie((uint64_t)v11);
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v9 = 0;
    }
    Trie<unsigned int,BOnode>::~Trie((uint64_t)v11);
    return v9;
  }
  return LHash<unsigned int,Trie<unsigned int,BOnode>>::remove(a1, v4, a3);
}

void sub_1B1CA6110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Trie<unsigned int,BOnode>::~Trie((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Trie<unsigned int,BOnode>::numEntries(_DWORD **a1, unsigned int *a2)
{
  if (!a2 || (unsigned int v4 = *a2, v4 == -1))
  {
    if (*a1) {
      return **a1 >> 5;
    }
    else {
      return 0;
    }
  }
  else
  {
    int v6 = 0;
    uint64_t result = LHash<unsigned int,Trie<unsigned int,BOnode>>::locate(a1, v4, &v6);
    if (result) {
      return Trie<unsigned int,BOnode>::numEntries(&(*a1)[8 * v6 + 2], a2 + 1);
    }
  }
  return result;
}

uint64_t Trie<unsigned int,BOnode>::memStats(_DWORD **a1, uint64_t *a2)
{
  *a2 += 16;
  LHash<unsigned int,Trie<unsigned int,BOnode>>::memStats(a1, a2);
  LHashIter<unsigned int,Trie<unsigned int,BOnode>>::LHashIter((uint64_t)v7, a1, 0);
  int v6 = 0;
  while (1)
  {
    uint64_t v4 = LHashIter<unsigned int,Trie<unsigned int,BOnode>>::next((uint64_t)v7, &v6);
    if (!v4) {
      break;
    }
    *a2 -= 24;
    Trie<unsigned int,BOnode>::memStats(v4, a2);
  }
  uint64_t result = v8;
  if (v8) {
    return MEMORY[0x1B3EA8630](v8, 0x1000C8052888210);
  }
  return result;
}

void sub_1B1CA623C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    MEMORY[0x1B3EA8630](a14, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TrieIter2<unsigned int,BOnode>::TrieIter2(uint64_t a1, _DWORD **a2, _DWORD *a3, int a4, uint64_t a5)
{
  int v6 = a3;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a4;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = a5;
  LHashIter<unsigned int,Trie<unsigned int,BOnode>>::LHashIter(a1 + 32, a2, a5);
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  if (!a4) {
    goto LABEL_4;
  }
  if (a4 == 1)
  {
    ++v6;
LABEL_4:
    *int v6 = -1;
  }
  return a1;
}

uint64_t TrieIter2<unsigned int,BOnode>::next(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    if (v2 == 1)
    {
      uint64_t v3 = a1 + 32;
      uint64_t v4 = *(_DWORD **)(a1 + 8);
      return LHashIter<unsigned int,Trie<unsigned int,BOnode>>::next(v3, v4);
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 64);
      if (v6)
      {
        uint64_t result = TrieIter2<unsigned int,BOnode>::next(v6);
        if (result) {
          return result;
        }
        uint64_t v7 = *(void *)(a1 + 64);
        if (v7)
        {
          uint64_t v8 = TrieIter2<unsigned int,unsigned int>::~TrieIter2(v7);
          MEMORY[0x1B3EA8670](v8, 0x10F0C40A7879D68);
        }
        *(void *)(a1 + 64) = 0;
      }
      uint64_t result = LHashIter<unsigned int,Trie<unsigned int,BOnode>>::next(a1 + 32, *(_DWORD **)(a1 + 8));
      if (result) {
        operator new();
      }
    }
  }
  else if (*(unsigned char *)(a1 + 72))
  {
    return 0;
  }
  else
  {
    *(unsigned char *)(a1 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 1;
    return *(void *)a1;
  }
  return result;
}

void sub_1B1CA63E8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F0C40A7879D68);
  _Unwind_Resume(a1);
}

uint64_t Ngram::memStats(Ngram *this, MemStats *a2)
{
  *(void *)a2 += 168;
  uint64_t v4 = (_DWORD **)((char *)this + 152);
  Trie<unsigned int,BOnode>::memStats((_DWORD **)this + 19, (uint64_t *)a2);
  int v5 = *((_DWORD *)this + 44);
  *(_DWORD *)&v11[8] = 0;
  int v12 = 0;
  int v10 = 0;
  *(void *)unsigned int v11 = (v5 + 1);
  if (v5 != -1) {
    Array<unsigned int>::alloc();
  }
  unsigned int v6 = 1;
  do
  {
    TrieIter2<unsigned int,BOnode>::TrieIter2((uint64_t)v9, v4, (_DWORD *)(*(void *)&v11[4] - 4 * v10), v6 - 1, 0);
    while (1)
    {
      uint64_t v7 = TrieIter2<unsigned int,BOnode>::next((uint64_t)v9);
      if (!v7) {
        break;
      }
      *(void *)a2 -= 8;
      LHash<unsigned int,float>::memStats((_DWORD **)(v7 + 16), (uint64_t *)a2);
    }
    TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v9);
    ++v6;
  }
  while (v6 <= *((_DWORD *)this + 44));
  uint64_t result = *(void *)&v11[4];
  if (*(void *)&v11[4]) {
    return MEMORY[0x1B3EA8630](*(void *)&v11[4], 0x1000C8052888210);
  }
  return result;
}

void sub_1B1CA6504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = *(void *)(v10 - 48);
  if (v12) {
    MEMORY[0x1B3EA8630](v12, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

void Ngram::Ngram(Ngram *this, Vocab *a2, int a3)
{
  LM::LM(this, a2);
  *unsigned int v6 = &unk_1F0A346B0;
  unsigned int v7 = (*(uint64_t (**)(Vocab *))(*(void *)a2 + 72))(a2);
  Trie<unsigned int,BOnode>::Trie((void *)this + 19, v7);
  *((_DWORD *)this + 44) = a3;
  *((_WORD *)this + 9std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *((void *)this + 23) = 0;
  if (!a3) {
    *((_DWORD *)this + 44) = 1;
  }
}

void sub_1B1CA65DC(_Unwind_Exception *a1)
{
  LM::~LM(v1);
  _Unwind_Resume(a1);
}

uint64_t Ngram::getorder(Ngram *this)
{
  return *((unsigned int *)this + 44);
}

uint64_t Ngram::findBOW(Ngram *this, unsigned int *a2)
{
  char v4 = 0;
  uint64_t Trie = Trie<unsigned int,BOnode>::findTrie((_DWORD **)this + 19, a2, &v4);
  if (Trie) {
    return Trie + 8;
  }
  else {
    return 0;
  }
}

uint64_t Ngram::findProb(Ngram *this, unsigned int a2, unsigned int *a3)
{
  char v6 = 0;
  uint64_t result = Trie<unsigned int,BOnode>::findTrie((_DWORD **)this + 19, a3, &v6);
  if (result)
  {
    int v5 = (void *)(result + 16);
    unsigned int v7 = 0;
    if (LHash<unsigned int,float>::locate((_DWORD **)(result + 16), a2, &v7)) {
      return *v5 + 8 * v7 + 4;
    }
    else {
      return 0;
    }
  }
  return result;
}

void *Ngram::insertBOW(Ngram *this, unsigned int *a2)
{
  char v4 = 0;
  inserted = Trie<unsigned int,BOnode>::insertTrie((void *)this + 19, a2, &v4);
  if (!v4) {
    inserted[2] = 0;
  }
  return inserted + 1;
}

uint64_t Ngram::insertProb(Ngram *this, unsigned int a2, unsigned int *a3)
{
  char v7 = 0;
  inserted = Trie<unsigned int,BOnode>::insertTrie((void *)this + 19, a3, &v7);
  int v5 = inserted;
  if (!v7)
  {
    inserted[2] = 0;
    LHash<unsigned int,float>::alloc(inserted + 2, 1u);
  }
  char v8 = 0;
  return LHash<unsigned int,float>::insert(v5 + 2, a2, &v8);
}

uint64_t Ngram::removeProb(Ngram *this, unsigned int a2, unsigned int *a3)
{
  char v5 = 0;
  uint64_t result = Trie<unsigned int,BOnode>::findTrie((_DWORD **)this + 19, a3, &v5);
  if (result) {
    return LHash<unsigned int,float>::remove((unsigned int **)(result + 16), a2, 0);
  }
  return result;
}

uint64_t Ngram::numProbs(Ngram *this, unsigned int *a2)
{
  char v4 = 0;
  uint64_t result = Trie<unsigned int,BOnode>::findTrie((_DWORD **)this + 19, a2, &v4);
  if (result)
  {
    uint64_t v3 = *(_DWORD **)(result + 16);
    if (v3) {
      return *v3 >> 5;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t Ngram::getTrie(Ngram *this)
{
  return (uint64_t)this + 152;
}

uint64_t Ngram::clear(Ngram *this)
{
  if (*((_DWORD *)this + 44)) {
    Array<unsigned int>::alloc();
  }
  return 0;
}

void sub_1B1CA6940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = *(void *)(v10 - 48);
  if (v12) {
    MEMORY[0x1B3EA8630](v12, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

char *Ngram::contextID(Ngram *this, unsigned int a2, const unsigned int *a3, unsigned int *a4)
{
  char v4 = (char *)this + 152;
  *a4 = 0;
  if (*((_DWORD *)this + 44) == 1) {
    return (char *)this + 152;
  }
  unint64_t v10 = 0;
  char v5 = (char *)this + 152;
  do
  {
    unsigned int v11 = a3[v10];
    if (v11 == -1) {
      break;
    }
    unsigned int v14 = 0;
    if (!LHash<unsigned int,Trie<unsigned int,BOnode>>::locate((_DWORD **)v4, v11, &v14)) {
      break;
    }
    uint64_t v12 = *(void *)v4 + 32 * v14;
    char v4 = (char *)(v12 + 8);
    if (a2 != -1)
    {
      int v15 = 0;
      if (!LHash<unsigned int,float>::locate((_DWORD **)(v12 + 24), a2, &v15)) {
        continue;
      }
    }
    *a4 = v10 + 1;
    char v5 = v4;
    ++v10;
  }
  while (v10 < (*((_DWORD *)this + 44) - 1));
  return v5;
}

float Ngram::contextBOW(Ngram *this, const unsigned int *a2, unsigned int a3)
{
  float v3 = 0.0;
  if (*((_DWORD *)this + 44) != 1)
  {
    unint64_t v6 = 0;
    char v7 = (char *)this + 152;
    unint64_t v8 = a3;
    do
    {
      unsigned int v9 = a2[v6];
      if (v9 == -1) {
        break;
      }
      unsigned int v11 = 0;
      if (!LHash<unsigned int,Trie<unsigned int,BOnode>>::locate((_DWORD **)v7, v9, &v11)) {
        break;
      }
      char v7 = (char *)(*(void *)v7 + 32 * v11 + 8);
      if (v6 >= v8) {
        float v3 = v3 + *((float *)v7 + 2);
      }
      ++v6;
    }
    while (v6 < (*((_DWORD *)this + 44) - 1));
  }
  return v3;
}

float Ngram::wordProbBO(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v9 = 0;
  int v10 = 0;
  float v11 = -INFINITY;
  uint64_t v12 = (_DWORD **)(a1 + 152);
  uint64_t v13 = a4;
  float v14 = 0.0;
  while (1)
  {
    int v20 = 0;
    if (LHash<unsigned int,float>::locate(v12 + 2, a2, &v20))
    {
      float v11 = *(float *)&v12[2][2 * v20 + 1];
      int v10 = v9 + 1;
      float v14 = 0.0;
    }
    if (v13 == v9) {
      break;
    }
    unsigned int v15 = *(_DWORD *)(a3 + 4 * v9);
    if (v15 == -1) {
      break;
    }
    int v21 = 0;
    if (!LHash<unsigned int,Trie<unsigned int,BOnode>>::locate(v12, v15, &v21)) {
      break;
    }
    uint64_t v16 = (uint64_t)&(*v12)[8 * v21];
    uint64_t v12 = (_DWORD **)(v16 + 8);
    float v14 = v14 + *(float *)(v16 + 16);
    ++v9;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 264))(a1)
    && !*(unsigned char *)(a1 + 8)
    && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
  {
    uint64_t v17 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    if (v10)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"[", 1);
      uint64_t v17 = (void *)std::ostream::operator<<();
      __int32 v18 = "gram]";
    }
    else
    {
      __int32 v18 = "[OOV]";
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, 5);
  }
  if (*(void *)a5) {
    *(_DWORD *)(*(void *)a5 + 48) = v10;
  }
  return v11 + v14;
}

_DWORD *Ngram::wordProb(_DWORD *a1, const unsigned int *a2, Vocab *this, uint64_t a4)
{
  unsigned int v8 = Vocab::length((uint64_t)this, a2);
  if (!*(unsigned char *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 344))(a1)
    || (uint64_t result = (_DWORD *)(*(uint64_t (**)(void))(**((void **)a1 + 3) + 88))(*((void *)a1 + 3)),
        *result != a2)
    && (a1[44] < 2u
     || (int v10 = *(_DWORD *)this,
         uint64_t result = (_DWORD *)(*(uint64_t (**)(void))(**((void **)a1 + 3) + 88))(*((void *)a1 + 3)),
         v10 != *result)
     && (a1[44] < 3u
      || !v8
      || (int v11 = *((_DWORD *)this + 1),
          uint64_t result = (_DWORD *)(*(uint64_t (**)(void))(**((void **)a1 + 3) + 88))(*((void *)a1 + 3)),
          v11 != *result))))
  {
    unsigned int v12 = a1[44] - 1;
    if (v8 >= v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = v8;
    }
    float v14 = *(uint64_t (**)(_DWORD *, const unsigned int *, Vocab *, uint64_t, uint64_t))(*(void *)a1 + 472);
    return (_DWORD *)v14(a1, a2, this, v13, a4);
  }
  return result;
}

uint64_t Ngram::read(Ngram *this, File *a2, unsigned int a3)
{
  v145[101] = *MEMORY[0x1E4F143B8];
  unsigned int v108 = -1;
  bzero(v145, 0x328uLL);
  bzero(v144, 0x328uLL);
  Ngram::clear(this);
  unsigned int v107 = -1;
  LOBYTE(__s[0]) = 0;
  char v5 = (void *)((char *)this + 152);
  inserted = Trie<unsigned int,BOnode>::insertTrie((void *)this + 19, &v107, __s);
  if (!LOBYTE(__s[0])) {
    inserted[2] = 0;
  }
  *((_DWORD *)inserted + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = -8388608;
  uint64_t v103 = File::ftell(a2);
  unsigned int v8 = File::getline(a2);
  if (v8)
  {
    int v9 = 0;
    uint64_t v10 = 0;
    unsigned int v11 = 0;
    do
    {
      int v12 = *v8;
      unsigned int v13 = v108;
      if (v108)
      {
        if (v108 == -1)
        {
          if (!strcmp(v8, (const char *)Ngram_BinaryFormatString))
          {
            File::File((File *)__s, *(const char **)a2, "rb", 1);
            if (v103 != -1) {
              File::fseek((File *)__s, v103, 0);
            }
            if (!*((unsigned char *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
            {
              std::string v63 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
              Token v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"reading ", 8);
              size_t v65 = strlen(*(const char **)a2);
              char v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, *(void *)a2, v65);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" in binary format\n", 18);
            }
            uint64_t Binary = Ngram::readBinary(this, (File *)__s, a3);
            if (Binary)
            {
              off_t v67 = File::ftell((File *)__s);
              if (v67 != -1) {
                File::fseek(a2, v67, 0);
              }
            }
            File::~File((File *)__s);
            return Binary;
          }
          if (!strcmp(v8, (const char *)Ngram_BinaryV1FormatString))
          {
            if (!*((unsigned char *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
            {
              uint64_t v68 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
              char v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"reading ", 8);
              size_t v70 = strlen(*(const char **)a2);
              unint64_t v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, *(void *)a2, v70);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" in old binary format\n", 22);
            }
            return Ngram::readBinaryV1(this, a2, a3);
          }
          if (v12 == 92 && !strncmp(v8, "\\data\\"", 6uLL)) {
            unsigned int v108 = 0;
          }
          goto LABEL_100;
        }
        if (v12 != 92 || v10 == 0)
        {
          if (v12 != 92) {
            goto LABEL_58;
          }
        }
        else
        {
          if (!*((unsigned char *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
          {
            int v20 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"discarded ", 10);
            int v21 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" OOV ", 5);
            int v22 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"-grams\n", 7);
          }
          uint64_t v10 = 0;
        }
        if (sscanf(v8, "\\%d-grams", &v108) != 1)
        {
          if (!strncmp(v8, "\\end\\"", 5uLL))
          {
            unint64_t v79 = 0;
            while (v79 <= *((unsigned int *)this + 44))
            {
              if (v145[v79] != v144[v79])
              {
                long long v80 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"warning: ", 9);
                uint64_t v81 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)" ", 1);
                int v82 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"-grams read, expected ", 22);
                char v83 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"\n", 1);
              }
              ++v79;
              uint64_t Binary = 1;
              if (v11 + 1 == v79) {
                return Binary;
              }
            }
            return 1;
          }
          unsigned int v13 = v108;
LABEL_58:
          if (v13 <= *((_DWORD *)this + 44))
          {
            long long v142 = 0u;
            long long v143 = 0u;
            long long v140 = 0u;
            long long v141 = 0u;
            long long v138 = 0u;
            long long v139 = 0u;
            long long v136 = 0u;
            long long v137 = 0u;
            long long v134 = 0u;
            long long v135 = 0u;
            long long v132 = 0u;
            long long v133 = 0u;
            long long v130 = 0u;
            long long v131 = 0u;
            long long v128 = 0u;
            long long v129 = 0u;
            long long v126 = 0u;
            long long v127 = 0u;
            long long v124 = 0u;
            long long v125 = 0u;
            long long v122 = 0u;
            long long v123 = 0u;
            long long v120 = 0u;
            long long v121 = 0u;
            long long v118 = 0u;
            long long v119 = 0u;
            long long v116 = 0u;
            long long v117 = 0u;
            long long v114 = 0u;
            long long v115 = 0u;
            *(_OWORD *)std::string __s = 0u;
            long long v113 = 0u;
            unsigned int v23 = Vocab::parseWords((Vocab *)v8, (char *)__s, (const char **)(v13 + 3), v7);
            unsigned int v24 = v23;
            if (v23 < v108 + 1 || v23 > v108 + 2)
            {
              uint64_t v88 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"ngram line has ", 15);
              char v89 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)" fields (", 9);
              uint64_t v90 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)" expected)\n", 11);
              return 0;
            }
            if (*((void *)this + 23))
            {
              LODWORD(v109) = 0;
              if (sscanf(__s[0], "%u", &v109) != 1
                || (int v25 = (PQCodebook *)*((void *)this + 23), *(_DWORD *)v25 <= LODWORD(v109)))
              {
                Token v84 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
                std::string::size_type v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"invalid codebook index \"", 24);
                size_t v86 = strlen(__s[0]);
                uint64_t v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)__s[0], v86);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"\"\n", 2);
                return 0;
              }
              double Prob = PQCodebook::getProb(v25, LODWORD(v109));
            }
            else
            {
              double v109 = 0.0;
              if (!parseLogP(__s[0], &v109))
              {
                uint64_t v91 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
                char v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"bad prob \"", 10);
                size_t v93 = strlen(__s[0]);
                char v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)__s[0], v93);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"\"\n", 2);
                return 0;
              }
              double Prob = v109;
            }
            float v27 = Prob;
            if (v27 > 0.0)
            {
              uint64_t v28 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
              Token v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"warning: questionable prob \"", 28);
              size_t v30 = strlen(__s[0]);
              char v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)__s[0], v30);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"\"\n", 2);
            }
            else if (v27 == -99.0)
            {
              float v27 = -INFINITY;
            }
            float v32 = 0.0;
            if (v24 == v108 + 2)
            {
              if (v108 == v11)
              {
                float v32 = 0.0;
                if (*__s[v11 + 1] != 48)
                {
                  uint64_t v33 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
                  int v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"ignoring non-zero bow \"", 23);
                  size_t v35 = strlen(__s[(int)v108 + 1]);
                  uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)__s[(int)v108 + 1], v35);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\" for maximal ngram\n", 20);
                  float v32 = 0.0;
                }
              }
              else
              {
                float v32 = 0.0;
                if (v108 != *((_DWORD *)this + 44))
                {
                  if (*((void *)this + 23))
                  {
                    LODWORD(v109) = 0;
                    if (sscanf(__s[v108 + 1], "%u", &v109) != 1
                      || (char v37 = (PQCodebook *)*((void *)this + 23), *(_DWORD *)v37 <= LODWORD(v109)))
                    {
                      uint64_t v95 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
                      long long v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"invalid codebook index \"", 24);
                      size_t v97 = strlen(__s[(int)v108 + 1]);
                      long long v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)__s[(int)v108 + 1], v97);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"\"\n", 2);
                      return 0;
                    }
                    double v38 = PQCodebook::getProb(v37, LODWORD(v109));
                  }
                  else
                  {
                    int v39 = __s[v108 + 1];
                    double v109 = 0.0;
                    if (!parseLogP(v39, &v109))
                    {
                      uint64_t v99 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
                      int v100 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"bad bow \"", 9);
                      size_t v101 = strlen(__s[(int)v108 + 1]);
                      long long v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)__s[(int)v108 + 1], v101);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"\"\n", 2);
                      return 0;
                    }
                    double v38 = v109;
                  }
                  float v32 = v38;
                  if (v32 == INFINITY)
                  {
                    uint64_t v40 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
                    float v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"warning: questionable bow \"", 27);
                    size_t v42 = strlen(__s[(int)v108 + 1]);
                    char v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)__s[(int)v108 + 1], v42);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"\"\n", 2);
                  }
                  else if (v32 == -99.0)
                  {
                    float v32 = -INFINITY;
                  }
                }
              }
            }
            uint64_t v44 = (int)v108;
            ++v144[v108];
            __s[v44 + 1] = 0;
            uint64_t v45 = **((void **)this + 3);
            if (!a3)
            {
              (*(void (**)(void))(v45 + 256))();
LABEL_90:
              Vocab::reverse((uint64_t)&v110, v46);
              if (v24 == v108 + 2 && v108 < *((_DWORD *)this + 44))
              {
                LOBYTE(v109) = 0;
                uint64_t v47 = (float *)Trie<unsigned int,BOnode>::insertTrie(v5, &v110, &v109);
                if (!LOBYTE(v109)) {
                  *((void *)v47 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
                }
                v47[2] = v32;
              }
              LOBYTE(v109) = 0;
              uint64_t Trie = Trie<unsigned int,BOnode>::findTrie((_DWORD **)v5, v111, &v109);
              if (!Trie)
              {
                char v49 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
                uint64_t v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"warning: no bow for prefix of ngram \"", 37);
                uint64_t v51 = operator<<(v50, (const char **)&__s[1]);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"\"\n", 2);
                goto LABEL_100;
              }
              if (v9)
              {
LABEL_97:
                int v9 = 1;
              }
              else
              {
                unsigned int v52 = v110;
                int v9 = 0;
                if (v52 == *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 88))(*((void *)this + 3))
                  && v27 != -INFINITY)
                {
                  if (!*(unsigned char *)(*(uint64_t (**)(void))(**((void **)this + 3) + 152))(*((void *)this + 3)))
                  {
                    int v53 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
                    char v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"warning: non-zero probability for ", 34);
                    uint64_t v55 = *((void *)this + 3);
                    uint64_t v56 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v55 + 88))(v55);
                    char v57 = (const char *)(*(uint64_t (**)(uint64_t, void))(*(void *)v55 + 32))(v55, *v56);
                    size_t v58 = strlen(v57);
                    unint64_t v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v57, v58);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" in closed-vocabulary LM\n", 25);
                    goto LABEL_97;
                  }
                  int v9 = 0;
                }
              }
              LOBYTE(v109) = 0;
              *(float *)LHash<unsigned int,float>::insert((void *)(Trie + 16), v110, &v109) = v27;
              goto LABEL_100;
            }
            if ((*(unsigned int (**)(void))(v45 + 288))()) {
              goto LABEL_90;
            }
            ++v10;
          }
          goto LABEL_100;
        }
        if ((int)v108 < 1 || v108 > v11) {
          goto LABEL_128;
        }
        if (!*((unsigned char *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
        {
          float v14 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
          if (v108 <= *((_DWORD *)this + 44)) {
            unsigned int v15 = "reading ";
          }
          else {
            unsigned int v15 = "skipping ";
          }
          if (v108 <= *((_DWORD *)this + 44)) {
            uint64_t v16 = 8;
          }
          else {
            uint64_t v16 = 9;
          }
LABEL_25:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
          uint64_t v17 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" ", 1);
          __int32 v18 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"-grams\n", 7);
        }
      }
      else
      {
        unsigned int v106 = 0;
        uint64_t v105 = 0;
        if (v12 == 92 && sscanf(v8, "\\%d-grams", &v108) == 1)
        {
          if ((int)v108 < 1 || v108 > v11)
          {
LABEL_128:
            unint64_t v77 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"invalid ngram order ", 20);
            unint64_t v78 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"\n", 1);
            return 0;
          }
          if (!*((unsigned char *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
          {
            float v14 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
            if (v108 <= *((_DWORD *)this + 44)) {
              unsigned int v15 = "reading ";
            }
            else {
              unsigned int v15 = "skipping ";
            }
            if (v108 <= *((_DWORD *)this + 44)) {
              uint64_t v16 = 8;
            }
            else {
              uint64_t v16 = 9;
            }
            goto LABEL_25;
          }
        }
        else
        {
          if (sscanf(v8, "ngram %u=%lld", &v106, &v105) != 2)
          {
            char v72 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"unexpected input\n", 17);
            return 0;
          }
          if (v106 - 101 <= 0xFFFFFF9B)
          {
            long long v73 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"ngram order ", 12);
            char v74 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)" out of range\n", 14);
            return 0;
          }
          if (v105 < 0)
          {
            unint64_t v75 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"ngram number ", 13);
            unint64_t v76 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" out of range\n", 14);
            return 0;
          }
          if (v106 > v11) {
            unsigned int v11 = v106;
          }
          v145[v106] = v105;
        }
      }
LABEL_100:
      unsigned int v8 = File::getline(a2);
    }
    while (v8);
  }
  char v60 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"reached EOF before \\end\\\n", 25);
  return 0;
}

void sub_1B1CA7EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  File::~File((File *)&a71);
  _Unwind_Resume(a1);
}

uint64_t Ngram::readBinary(Ngram *this, File *a2, uint64_t a3)
{
  unint64_t v6 = File::getline(a2);
  if (!v6 || strcmp(v6, (const char *)Ngram_BinaryFormatString))
  {
    char v7 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
    unsigned int v8 = "bad binary format\n";
    uint64_t v9 = 18;
LABEL_4:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    return 0;
  }
  int v12 = File::getline(a2);
  int v23 = 0;
  if (sscanf(v12, "maxorder %u", &v23) != 1)
  {
    char v7 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
    unsigned int v8 = "could not read ngram order\n";
    uint64_t v9 = 27;
    goto LABEL_4;
  }
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  int v22 = 0;
  if ((*(unsigned int (**)(void, File *, uint64_t *, uint64_t))(**((void **)this + 3) + 336))(*((void *)this + 3), a2, &v20, a3))
  {
    off_t v19 = File::ftell(a2);
    if ((v19 & 0x8000000000000000) == 0)
    {
      Ngram::clear(this);
      uint64_t v10 = Ngram::readBinaryNode((uint64_t)this, (uint64_t)this + 152, *((_DWORD *)this + 44), v23, a2, &v19, a3, (int *)&v20);
      goto LABEL_13;
    }
    unsigned int v13 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
    float v14 = __error();
    unsigned int v15 = srilm_ts_strerror(*v14);
    size_t v16 = strlen(v15);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v15, v16);
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
    __int32 v18 = std::locale::use_facet(&v24, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale(&v24);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v10 = 0;
LABEL_13:
  if (v21) {
    MEMORY[0x1B3EA8630](v21, 0x1000C8052888210);
  }
  return v10;
}

void sub_1B1CA8134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::locale::~locale((std::locale *)(v13 - 40));
  if (a13) {
    MEMORY[0x1B3EA8630](a13, 0x1000C8052888210);
  }
  _Unwind_Resume(a1);
}

uint64_t Ngram::readBinaryV1(Ngram *this, File *a2, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = File::getline(a2);
  if (v6
    && sscanf(v6, "index: %1023s", &__s) == 1
    && (char v7 = File::getline(a2)) != 0
    && sscanf(v7, "data: %1023s", &__str) == 1)
  {
    unsigned int v8 = *(const char **)a2;
    if (*(void *)a2 && __s == 42)
    {
      size_t v9 = strlen(*(const char **)a2);
      uint64_t v28 = 0;
      int v29 = 0;
      size_t v10 = strlen(&__s) + v9;
      LODWORD(v27.__locale_) = 0;
      HIDWORD(v27.__locale_) = v10;
      if (v10) {
        Array<char>::alloc();
      }
      snprintf(0, v10, "%s%s", v8, v35);
      snprintf(&__s, 0x400uLL, "%.1023s", (const char *)(v28 - SLODWORD(v27.__locale_)));
      unsigned int v8 = *(const char **)a2;
    }
    if (v8 && __str == 42)
    {
      size_t v16 = strlen(v8);
      uint64_t v28 = 0;
      int v29 = 0;
      size_t v17 = strlen(&__str) + v16;
      LODWORD(v27.__locale_) = 0;
      HIDWORD(v27.__locale_) = v17;
      if (v17) {
        Array<char>::alloc();
      }
      snprintf(0, v17, "%s%s", v8, v37);
      snprintf(&__str, 0x400uLL, "%.1023s", (const char *)(v28 - SLODWORD(v27.__locale_)));
    }
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    int v32 = 0;
    if ((*(unsigned int (**)(void, File *, uint64_t *, uint64_t))(**((void **)this + 3) + 336))(*((void *)this + 3), a2, &v30, a3))
    {
      File::File((File *)&v27, &__s, "r", 1);
      File::File((File *)v26, &__str, "rb", 1);
      uint64_t __ptr = 0;
      float v24 = 0.0;
      size_t v18 = File::fread((File *)&v27, &__ptr, 8uLL, 1uLL);
      off_t v19 = &v27;
      if (v18 == 1
        && __ptr == 0x123456789ABCDEFLL
        && (size_t v20 = File::fread((File *)v26, &v24, 4uLL, 1uLL), v19 = (std::locale *)v26, v20 == 1)
        && v24 == 9.8765e10)
      {
        Ngram::clear(this);
        uint64_t BinaryV1Node = Ngram::readBinaryV1Node(this, (uint64_t)this + 152, (File *)&v27, (File *)v26, a3, (int *)&v30, 1u);
      }
      else
      {
        uint64_t v21 = File::offset((uint64_t)v19, MEMORY[0x1E4FBA240]);
        int v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"incompatible binary format", 26);
        std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
        int v23 = std::locale::use_facet(&v33, MEMORY[0x1E4FBA258]);
        ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
        std::locale::~locale(&v33);
        std::ostream::put();
        std::ostream::flush();
        uint64_t BinaryV1Node = 0;
      }
      File::~File((File *)v26);
      File::~File((File *)&v27);
    }
    else
    {
      uint64_t BinaryV1Node = 0;
    }
    if (v31) {
      MEMORY[0x1B3EA8630](v31, 0x1000C8052888210);
    }
  }
  else
  {
    unsigned int v11 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
    int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"invalid binary LM format!", 25);
    std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
    uint64_t v13 = std::locale::use_facet(&v27, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v27);
    std::ostream::put();
    std::ostream::flush();
    return 0;
  }
  return BinaryV1Node;
}

void sub_1B1CA8660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::locale a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::locale a43)
{
  File::~File((File *)&a27);
  uint64_t v45 = *(void *)(v43 + 8);
  if (v45) {
    MEMORY[0x1B3EA8630](v45, 0x1000C8052888210);
  }
  _Unwind_Resume(a1);
}

uint64_t Ngram::write(Ngram *this, File *a2)
{
  if (*((unsigned char *)this + 148)) {
    return Ngram::writeBinaryNgram(this, a2);
  }
  else {
    return (*(uint64_t (**)(Ngram *, File *, void))(*(void *)this + 336))(this, a2, *((unsigned int *)this + 44));
  }
}

uint64_t Ngram::writeBinaryNgram(Ngram *this, File *a2)
{
  File::fprintf(a2, "%s", (const char *)Ngram_BinaryFormatString);
  File::fprintf(a2, "maxorder %u\n", *((_DWORD *)this + 44));
  (*(void (**)(void))(**((void **)this + 3) + 344))();
  off_t v11 = File::ftell(a2);
  if ((v11 & 0x8000000000000000) == 0) {
    return Ngram::writeBinaryNode((uint64_t)this, (uint64_t)this + 152, 1, a2, &v11);
  }
  char v5 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
  unint64_t v6 = __error();
  char v7 = srilm_ts_strerror(*v6);
  size_t v8 = strlen(v7);
  size_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  size_t v10 = std::locale::use_facet(&v12, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v12);
  std::ostream::put();
  std::ostream::flush();
  return 0;
}

void sub_1B1CA8898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
}

uint64_t Ngram::writeWithOrder(Ngram *this, File *a2, unsigned int a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  memset(&v32[1], 0, 496);
  if (a3 >= 0x64) {
    unint64_t v6 = 100;
  }
  else {
    unint64_t v6 = a3;
  }
  v32[0] = 0uLL;
  File::fprintf(a2, "\n\\data\\\n");
  if (v6)
  {
    uint64_t v7 = a3;
    if (a3 >= 0x64uLL) {
      uint64_t v7 = 100;
    }
    uint64_t v8 = -v7;
    uint64_t v9 = 1;
    do
    {
      uint64_t v10 = (*(uint64_t (**)(Ngram *, uint64_t))(*(void *)this + 456))(this, v9);
      *(void *)&v34[2 * v9 + 101] = v10;
      File::fprintf(a2, "ngram %d=%lld\n", v9++, v10);
    }
    while (v8 + v9 != 1);
    unint64_t v11 = 1;
    do
    {
      File::fprintf(a2, "\n\\%d-grams:\n", v11);
      if (!*((unsigned char *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
      {
        std::locale v12 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"writing ", 8);
        uint64_t v13 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" ", 1);
        float v14 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"-grams\n", 7);
      }
      unsigned int v15 = Vocab::compareIndex(*((Vocab **)this + 3));
      TrieIter2<unsigned int,BOnode>::TrieIter2((uint64_t)v30, (_DWORD **)this + 19, v34, v11 - 1, (uint64_t)v15);
      if (v11 <= 1) {
        size_t v16 = "";
      }
      else {
        size_t v16 = " ";
      }
      while (1)
      {
        uint64_t v17 = TrieIter2<unsigned int,BOnode>::next((uint64_t)v30);
        if (!v17) {
          break;
        }
        (*(void (**)(void, _DWORD *, _OWORD *, uint64_t))(**((void **)this + 3) + 248))(*((void *)this + 3), v34, v32, 101);
        Vocab::reverse((uint64_t)v32, v18);
        off_t v19 = Vocab::compareIndex(*((Vocab **)this + 3));
        LHashIter<unsigned int,float>::LHashIter((uint64_t)v28, (_DWORD **)(v17 + 16), (uint64_t)v19);
        unsigned int v27 = 0;
        while (1)
        {
          size_t v20 = (float *)LHashIter<unsigned int,float>::next((uint64_t)v28, &v27);
          if (!v20) {
            break;
          }
          if (File::error(a2))
          {
            if (v29) {
              MEMORY[0x1B3EA8630](v29, 0x1000C8052888210);
            }
            TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v30);
            return 0;
          }
          float v21 = *v20;
          if (*v20 == -INFINITY) {
            float v21 = -99.0;
          }
          File::fprintf(a2, "%.*lg\t", 7, v21);
          Vocab::write(a2, (const char **)v32, v22);
          int v23 = (const char *)(*(uint64_t (**)(void, void))(**((void **)this + 3) + 32))(*((void *)this + 3), v27);
          File::fprintf(a2, "%s%s", v16, v23);
          if (v11 < v6)
          {
            unsigned int v33 = v27;
            char v31 = 0;
            uint64_t Trie = Trie<unsigned int,BOnode>::findTrie((_DWORD **)this + 19, &v33, &v31);
            if (Trie)
            {
              float v25 = *(float *)(Trie + 8);
              if (v25 == -INFINITY) {
                float v25 = -99.0;
              }
              File::fprintf(a2, "\t%.*lg", 7, v25);
            }
          }
          File::fprintf(a2, "\n");
        }
        if (v29) {
          MEMORY[0x1B3EA8630](v29, 0x1000C8052888210);
        }
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v30);
      ++v11;
    }
    while (v11 != v6 + 1);
  }
  File::fprintf(a2, "\n\\end\\\n");
  return 1;
}

void sub_1B1CA8D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Ngram::writeBinaryNode(uint64_t a1, uint64_t a2, int a3, File *a4, off_t *a5)
{
  int v10 = *(_DWORD *)(a1 + 176);
  if ((v10 - a3) >= 4) {
    int v11 = 8;
  }
  else {
    int v11 = 4;
  }
  if (v10 == a3) {
    unsigned int v12 = 2;
  }
  else {
    unsigned int v12 = v11;
  }
  off_t v47 = *a5;
  uint64_t v13 = (unsigned int **)(a2 + 16);
  uint64_t v14 = (a3 + 1);
  while (1)
  {
    unsigned int v15 = writeBinaryCount(a4, 0, v12);
    if (!v15) {
      return 0;
    }
    *a5 += v15;
    unsigned int v16 = writeBinaryCount(a4, *(float *)(a2 + 8));
    if (!v16) {
      return 0;
    }
    *a5 += v16;
    unint64_t v17 = *v13 ? (unint64_t)**v13 >> 5 : 0;
    unsigned int v18 = writeBinaryCount(a4, v17, 0);
    if (!v18) {
      return 0;
    }
    *a5 += v18;
    v52[0] = 0;
    LHashIter<unsigned int,float>::LHashIter((uint64_t)v50, v13, (uint64_t)SArray_compareKey<unsigned int>);
    while (1)
    {
      off_t v19 = (float *)LHashIter<unsigned int,float>::next((uint64_t)v50, v52);
      if (!v19) {
        break;
      }
      unsigned int v20 = writeBinaryCount(a4, v52[0], 0);
      if (!v20 || (*a5 += v20, (unsigned int v21 = writeBinaryCount(a4, *v19)) == 0))
      {
        unsigned __int8 v5 = 0;
        int v22 = 1;
        goto LABEL_34;
      }
      *a5 += v21;
    }
    LHashIter<unsigned int,Trie<unsigned int,BOnode>>::LHashIter((uint64_t)v48, (_DWORD **)a2, (uint64_t)SArray_compareKey<unsigned int>);
    while (1)
    {
      uint64_t v23 = LHashIter<unsigned int,Trie<unsigned int,BOnode>>::next((uint64_t)v48, v52);
      if (!v23) {
        break;
      }
      unsigned int v24 = writeBinaryCount(a4, v52[0], 0);
      if (v24)
      {
        *a5 += v24;
        if (Ngram::writeBinaryNode(a1, v23, v14, a4, a5)) {
          continue;
        }
      }
      goto LABEL_31;
    }
    off_t v25 = *a5;
    if ((File::fseek(a4, v47, 0) & 0x80000000) != 0)
    {
LABEL_30:
      int v34 = File::offset((uint64_t)a4, MEMORY[0x1E4FBA240]);
      uint64_t v35 = __error();
      uint64_t v36 = srilm_ts_strerror(*v35);
      size_t v37 = strlen(v36);
      uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
      std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(void *)(*v38 - 24)));
      int v39 = std::locale::use_facet((const std::locale *)&v52[1], MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
      std::locale::~locale((std::locale *)&v52[1]);
      std::ostream::put();
      std::ostream::flush();
LABEL_31:
      unsigned __int8 v5 = 0;
      int v22 = 1;
      goto LABEL_32;
    }
    unsigned int v26 = writeBinaryCount(a4, v25 - v47, v12);
    unsigned int v27 = v26;
    if (!v26) {
      goto LABEL_31;
    }
    if (v26 <= v12)
    {
      if ((File::fseek(a4, v25, 0) & 0x80000000) != 0) {
        goto LABEL_30;
      }
      int v22 = 1;
      unsigned __int8 v5 = 1;
    }
    else
    {
      uint64_t v28 = File::offset((uint64_t)a4, MEMORY[0x1E4FBA240]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"increasing offset bytes from ", 29);
      uint64_t v29 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" to ", 4);
      uint64_t v30 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" (order ", 8);
      char v31 = (void *)std::ostream::operator<<();
      int v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)",", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" level ", 7);
      unsigned int v33 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)")\n", 2);
      if ((File::fseek(a4, v47, 0) & 0x80000000) != 0)
      {
        uint64_t v40 = File::offset((uint64_t)a4, MEMORY[0x1E4FBA240]);
        float v41 = __error();
        size_t v42 = srilm_ts_strerror(*v41);
        size_t v43 = strlen(v42);
        uint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v42, v43);
        std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(void *)(*v44 - 24)));
        uint64_t v45 = std::locale::use_facet((const std::locale *)&v52[1], MEMORY[0x1E4FBA258]);
        ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
        std::locale::~locale((std::locale *)&v52[1]);
        std::ostream::put();
        std::ostream::flush();
        unsigned __int8 v5 = 0;
        int v22 = 1;
      }
      else
      {
        *a5 = v47;
        int v22 = 2;
      }
      unsigned int v12 = v27;
    }
LABEL_32:
    if (v49) {
      MEMORY[0x1B3EA8630](v49, 0x1000C8052888210);
    }
LABEL_34:
    if (v51) {
      MEMORY[0x1B3EA8630](v51, 0x1000C8052888210);
    }
    if (v22 != 2) {
      return v5;
    }
  }
}

void sub_1B1CA9250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::locale a20)
{
  if (a14) {
    MEMORY[0x1B3EA8630](a14, 0x1000C8052888210);
  }
  if (a18) {
    MEMORY[0x1B3EA8630](a18, 0x1000C8052888210);
  }
  _Unwind_Resume(a1);
}

uint64_t Ngram::readBinaryNode(uint64_t a1, uint64_t a2, int a3, int a4, File *a5, off_t *a6, uint64_t a7, int *a8)
{
  if (!a4) {
    return 1;
  }
  unint64_t v42 = 0;
  uint64_t result = readBinaryCount(a5, &v42);
  if (!result) {
    return result;
  }
  off_t v17 = v42 + *a6;
  *a6 += result;
  if (!a3)
  {
    if ((File::fseek(a5, v17, 0) & 0x80000000) != 0)
    {
      int v34 = File::offset((uint64_t)a5, MEMORY[0x1E4FBA240]);
      uint64_t v35 = __error();
      uint64_t v36 = srilm_ts_strerror(*v35);
      size_t v37 = strlen(v36);
      uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
      std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(void *)(*v38 - 24)));
      int v39 = std::locale::use_facet(&v44, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
      std::locale::~locale(&v44);
      std::ostream::put();
      std::ostream::flush();
      return 0;
    }
    *a6 = v17;
    return 1;
  }
  uint64_t result = readBinaryCount(a5, (float *)(a2 + 8));
  if (!result) {
    return result;
  }
  *a6 += result;
  v44.__locale_ = 0;
  uint64_t result = readBinaryCount(a5, (unint64_t *)&v44);
  if (!result) {
    return result;
  }
  off_t v41 = v17;
  int locale = (int)v44.__locale_;
  off_t v19 = *a6 + result;
  *a6 = v19;
  if (!locale)
  {
LABEL_14:
    if (v19 < v41)
    {
      uint64_t v23 = (a3 - 1);
      uint64_t v24 = (a4 - 1);
      do
      {
        v44.__locale_ = 0;
        uint64_t result = readBinaryCount(a5, (unint64_t *)&v44);
        if (!result) {
          return result;
        }
        unsigned int v25 = v44.__locale_;
        *a6 += result;
        if (a8[1] <= v25) {
          goto LABEL_32;
        }
        unsigned int v26 = *(_DWORD *)Array<unsigned int>::operator[](a8, v25);
        if (v26 == -1)
        {
          uint64_t v29 = a1;
          uint64_t v28 = (_DWORD *)a2;
          uint64_t v30 = 0;
        }
        else
        {
          LOBYTE(v44.__locale_) = 0;
          unsigned int v27 = (_DWORD *)LHash<unsigned int,Trie<unsigned int,BOnode>>::insert((void *)a2, v26, &v44);
          uint64_t v28 = v27;
          if (!LOBYTE(v44.__locale_)) {
            *unsigned int v27 = 0;
          }
          uint64_t v29 = a1;
          uint64_t v30 = v23;
        }
        uint64_t result = Ngram::readBinaryNode(v29, v28, v30, v24, a5, a6, a7, a8);
        if (!result) {
          return result;
        }
        off_t v19 = *a6;
      }
      while (*a6 < v41);
    }
    if (v19 != v41)
    {
      char v31 = File::offset((uint64_t)a5, MEMORY[0x1E4FBA240]);
      int v32 = "data misaligned\n";
      uint64_t v33 = 16;
LABEL_33:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
      return 0;
    }
    return 1;
  }
  while (1)
  {
    v44.__locale_ = 0;
    uint64_t result = readBinaryCount(a5, (unint64_t *)&v44);
    if (!result) {
      return result;
    }
    unsigned int v20 = v44.__locale_;
    *a6 += result;
    if (a8[1] <= v20)
    {
LABEL_32:
      uint64_t v40 = File::offset((uint64_t)a5, MEMORY[0x1E4FBA240]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"word index ", 11);
      char v31 = (void *)std::ostream::operator<<();
      int v32 = " out of range\n";
      uint64_t v33 = 14;
      goto LABEL_33;
    }
    unsigned int v21 = *(_DWORD *)Array<unsigned int>::operator[](a8, v20);
    LODWORD(v44.__locale_) = 0;
    uint64_t result = readBinaryCount(a5, (float *)&v44);
    if (!result) {
      return result;
    }
    *a6 += result;
    if (v21 != -1)
    {
      int v22 = (int)v44.__locale_;
      char v43 = 0;
      *(_DWORD *)LHash<unsigned int,float>::insert((void *)(a2 + 16), v21, &v43) = v22;
    }
    if (!--locale)
    {
      off_t v19 = *a6;
      goto LABEL_14;
    }
  }
}

void sub_1B1CA962C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14)
{
}

uint64_t Ngram::readBinaryV1Node(Ngram *a1, uint64_t a2, File *a3, File *a4, uint64_t a5, int *a6, unsigned int a7)
{
  if (*((_DWORD *)a1 + 44) >= a7)
  {
    uint64_t v14 = *((void *)a6 + 1);
    unsigned int v15 = a6[1];
    uint64_t v16 = *a6;
    int v39 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    unsigned int __ptr = 0;
    if (File::fread(a4, &__ptr, 4uLL, 1uLL) == 1 && File::fread(a4, &v39, 4uLL, 1uLL) == 1)
    {
      uint64_t v17 = v14 - 4 * v16;
      *(_DWORD *)(a2 + 8) = v39;
      if (!a5) {
        LHash<unsigned int,float>::clear((void *)(a2 + 16), __ptr);
      }
      if (!__ptr)
      {
LABEL_17:
        LODWORD(v41.__locale_) = 0;
        for (uint64_t i = 1; File::fread(a3, &v41, 4uLL, 1uLL) == 1; uint64_t i = 1)
        {
          uint64_t i = 1;
          if (File::fread(a3, &v38, 4uLL, 1uLL) != 1) {
            break;
          }
          uint64_t i = 1;
          if (File::fread(a3, &v37, 8uLL, 1uLL) != 1) {
            break;
          }
          if (v37 == -1 && v38 == -1) {
            return 1;
          }
          if (v38 >= v15) {
            goto LABEL_36;
          }
          unsigned int v22 = *(_DWORD *)(v17 + 4 * v38);
          if (v22 == -1)
          {
            Ngram::skipToNextTrie((Ngram *)1, a3, LODWORD(v41.__locale_) + 1);
          }
          else
          {
            char v40 = 0;
            uint64_t v23 = (_DWORD *)LHash<unsigned int,Trie<unsigned int,BOnode>>::insert((void *)a2, v22, &v40);
            uint64_t v24 = v23;
            if (!v40) {
              _DWORD *v23 = 0;
            }
            if ((File::fseek(a4, v37, 0) & 0x80000000) != 0)
            {
              uint64_t v33 = File::offset((uint64_t)a4, MEMORY[0x1E4FBA240]);
              int v34 = __error();
              uint64_t v35 = srilm_ts_strerror(*v34);
              size_t v31 = strlen(v35);
              uint64_t v29 = v33;
              uint64_t v30 = v35;
              goto LABEL_37;
            }
            if (!Ngram::readBinaryV1Node(a1, v24, a3, a4, a5, a6, (LODWORD(v41.__locale_) + 1)))return 0; {
          }
            }
        }
        return i;
      }
      int v18 = 0;
      while (File::fread(a4, &v38, 4uLL, 1uLL) == 1 && File::fread(a4, (char *)&v38 + 4, 4uLL, 1uLL) == 1)
      {
        if (v38 >= v15)
        {
LABEL_36:
          uint64_t v28 = File::offset((uint64_t)a3, MEMORY[0x1E4FBA240]);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"index (", 7);
          uint64_t v29 = (void *)std::ostream::operator<<();
          uint64_t v30 = ") out of range";
          size_t v31 = 14;
LABEL_37:
          int v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v32);
          return 0;
        }
        unsigned int v19 = *(_DWORD *)(v17 + 4 * v38);
        if (v19 != -1)
        {
          int v20 = HIDWORD(v38);
          LOBYTE(v41.__locale_) = 0;
          *(_DWORD *)LHash<unsigned int,float>::insert((void *)(a2 + 16), v19, &v41) = v20;
        }
        if (++v18 >= __ptr) {
          goto LABEL_17;
        }
      }
    }
    unsigned int v25 = File::offset((uint64_t)a4, MEMORY[0x1E4FBA240]);
    unsigned int v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"failed to read from data file", 29);
    std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
    unsigned int v27 = std::locale::use_facet(&v41, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
    std::locale::~locale(&v41);
    std::ostream::put();
    std::ostream::flush();
    return 0;
  }
  return Ngram::skipToNextTrie(a1, a3, a7);
}

void sub_1B1CA9AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14)
{
}

uint64_t Ngram::skipToNextTrie(Ngram *this, File *a2, unsigned int a3)
{
  uint64_t v9 = 0;
  uint64_t __ptr = 0;
  while (1)
  {
    if (File::fread(a2, (char *)&__ptr + 4, 4uLL, 1uLL) != 1
      || File::fread(a2, &__ptr, 4uLL, 1uLL) != 1
      || File::fread(a2, &v9, 8uLL, 1uLL) != 1)
    {
LABEL_8:
      unsigned __int8 v5 = File::offset((uint64_t)a2, MEMORY[0x1E4FBA240]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"skipToNextTrie failed for order ", 32);
      unint64_t v6 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
      uint64_t v7 = std::locale::use_facet(&v11, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
      std::locale::~locale(&v11);
      std::ostream::put();
      std::ostream::flush();
      return 0;
    }
    if (__ptr == __PAIR64__(a3, -1) && v9 == -1) {
      return 1;
    }
    if (HIDWORD(__ptr) < a3) {
      goto LABEL_8;
    }
  }
}

void sub_1B1CA9C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
}

uint64_t Ngram::numNgrams(Ngram *this, int a2)
{
  if (!a2) {
    return 0;
  }
  *(_DWORD *)&unsigned char v8[8] = 0;
  int v9 = 0;
  int v7 = 0;
  *(void *)uint64_t v8 = (a2 + 1);
  if (a2 != -1) {
    Array<unsigned int>::alloc();
  }
  TrieIter2<unsigned int,BOnode>::TrieIter2((uint64_t)v6, (_DWORD **)this + 19, 0, -2, 0);
  for (uint64_t i = 0; ; i += v4)
  {
    uint64_t v3 = TrieIter2<unsigned int,BOnode>::next((uint64_t)v6);
    if (!v3) {
      break;
    }
    unint64_t v4 = *(void *)(v3 + 16);
    if (v4) {
      unint64_t v4 = (unint64_t)*(unsigned int *)v4 >> 5;
    }
  }
  TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v6);
  if (*(void *)&v8[4]) {
    MEMORY[0x1B3EA8630](*(void *)&v8[4], 0x1000C8052888210);
  }
  return i;
}

void sub_1B1CA9D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = *(void *)(v10 - 32);
  if (v12) {
    MEMORY[0x1B3EA8630](v12, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

void Ngram::estimate(Ngram *this, NgramStats *a2, unint64_t *a3, unint64_t *a4)
{
}

void sub_1B1CAA0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t Ngram::vocabSize(const Vocab **this)
{
  VocabIter::VocabIter((VocabIter *)v5, this[3], 0);
  uint64_t v2 = 0;
  unsigned int v4 = 0;
  while (VocabIter::next((VocabIter *)v5, &v4))
  {
    if (!(*(unsigned int (**)(const Vocab *, void))(*(void *)this[3] + 176))(this[3], v4))
    {
      if ((*(unsigned int (**)(const Vocab *, void))(*(void *)this[3] + 224))(this[3], v4)) {
        uint64_t v2 = v2;
      }
      else {
        uint64_t v2 = (v2 + 1);
      }
    }
  }
  if (v6) {
    MEMORY[0x1B3EA8630](v6, 0x50C80EE9192B6);
  }
  return v2;
}

void sub_1B1CAA1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    MEMORY[0x1B3EA8630](a14, 0x50C80EE9192B6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Ngram::estimate2<unsigned long>(Ngram *this, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  int v6 = *((_DWORD *)this + 44);
  int v101 = 0;
  int v102 = v6;
  uint64_t v103 = 0;
  int v104 = 0;
  if (v6) {
    Array<unsigned int>::alloc();
  }
  unsigned int v7 = Ngram::vocabSize((const Vocab **)this);
  Ngram::clear(this);
  v100[0] = -1;
  LOBYTE(v95[0]) = 0;
  uint64_t Trie = Trie<unsigned int,BOnode>::findTrie((_DWORD **)this + 19, v100, v95);
  unsigned int v9 = (*(uint64_t (**)(void))(**((void **)this + 3) + 72))(*((void *)this + 3));
  uint64_t v10 = Trie + 8;
  if (!Trie) {
    uint64_t v10 = 0;
  }
  LHash<unsigned int,float>::setsize((void *)(v10 + 8), v9);
  if (*(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3)) != -1)
  {
    *(_DWORD *)(v103 - 4 * v101) = -1;
    std::locale v11 = (unsigned int *)(*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
    *(_DWORD *)Ngram::insertProb(this, *v11, (unsigned int *)(v103 - 4 * v101)) = -8388608;
  }
  if (*((_DWORD *)this + 44))
  {
    std::string::size_type v85 = (_DWORD **)(a2 + 160);
    float v12 = log10((double)v7);
    float v88 = -v12;
    unint64_t v86 = v7;
    double v13 = 1.0 - 0.000003;
    uint64_t v14 = 1;
    uint64_t v89 = a3;
    do
    {
      uint64_t v15 = (v14 - 1);
      if (a3
        && (uint64_t v16 = *(void *)(a3 + 8 * v15)) != 0
        && !(*(unsigned int (**)(uint64_t))(*(void *)v16 + 72))(v16))
      {
        uint64_t v79 = *(void *)(a3 + 8 * v15);
        if (v79) {
          (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v79 + 112))(v79, a2, v14, *((unsigned int *)this + 44));
        }
        int v90 = 0;
      }
      else
      {
        int v90 = 1;
      }
      TrieIter2<unsigned int,unsigned long>::TrieIter2((uint64_t)v100, v85, (_DWORD *)(v103 - 4 * v101), v14 - 1, 0);
      int v82 = 0;
      int v83 = 0;
      int v93 = 0;
      unsigned int v87 = v14 - 2;
      while (1)
      {
        uint64_t v17 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v100);
        if (!v17) {
          break;
        }
        if (v14 >= 2
          && (int v18 = *(_DWORD *)(v103 + 4 * (int)(v87 - v101)),
              v18 == *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 120))(*((void *)this + 3)))
          || (uint64_t v19 = *((void *)this + 3),
              int v20 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v19 + 88))(v19),
              (*(unsigned int (**)(uint64_t, void))(*(void *)v19 + 176))(v19, *v20))
          && (uint64_t v21 = v103,
              uint64_t v22 = v101,
              uint64_t v23 = (unsigned int *)(*(uint64_t (**)(void))(**((void **)this + 3) + 88))(*((void *)this + 3)),
              Vocab::contains((Vocab *)(v21 - 4 * v22), (const unsigned int *)*v23)))
        {
          ++v82;
          continue;
        }
        v25 = a3 && (uint64_t v24 = *(void *)(a3 + 8 * v15)) != 0 && *(unsigned char *)(v24 + 24) != 0;
        LOBYTE(v105.__locale_) = 0;
        v95[0] = (_DWORD **)Trie<unsigned int,unsigned long>::insertTrie(v85, (unsigned int *)(v103 - 4 * v101), &v105);
        v95[1] = (_DWORD **)v106;
        int v96 = 1;
        uint64_t v97 = 0;
        LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::LHashIter((uint64_t)v98, v95[0], 0);
        unint64_t v26 = 0;
        unint64_t v27 = 0;
        uint64_t v91 = 0;
        uint64_t v92 = 0;
        v98[4] = 0;
        char v99 = 0;
        v106[1] = -1;
        while (1)
        {
          uint64_t v29 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v95);
          if (!v29) {
            break;
          }
          if (!(*(unsigned int (**)(void, void))(**((void **)this + 3) + 176))(*((void *)this + 3), v106[0])&& (v14 != 1|| !(*(unsigned int (**)(void, void))(**((void **)this + 3) + 224))(*((void *)this + 3), v106[0])))
          {
            if ((*(unsigned int (**)(void, void))(**((void **)this + 3) + 224))(*((void *)this + 3), v106[0]))
            {
              unsigned int v30 = (*(uint64_t (**)(void, void))(**((void **)this + 3) + 232))(*((void *)this + 3), v106[0]);
              if (v30)
              {
                uint64_t v31 = *(void *)(v29 + 8);
                unint64_t v32 = v31 * v30;
                v27 += v31;
                if (v30 == 1) {
                  uint64_t v33 = 0;
                }
                else {
                  uint64_t v33 = *(void *)(v29 + 8);
                }
                if (v30 <= 2) {
                  uint64_t v31 = 0;
                }
                v91 += v31;
                v92 += v33;
              }
              else
              {
                unint64_t v32 = *(void *)(v29 + 8);
                ++v27;
              }
            }
            else
            {
              unint64_t v32 = *(void *)(v29 + 8);
              ++v27;
              if (v32 <= 1) {
                uint64_t v34 = v92;
              }
              else {
                uint64_t v34 = v92 + 1;
              }
              uint64_t v35 = v91;
              if (v32 > 2) {
                uint64_t v35 = v91 + 1;
              }
              uint64_t v91 = v35;
              uint64_t v92 = v34;
            }
            v26 += v32;
          }
        }
        if (v14 >= 2 && *(unsigned char *)(*(uint64_t (**)(Ngram *))(*(void *)this + 352))(this)) {
          unint64_t v26 = *(void *)(v17 + 8);
        }
        if (!v26) {
          goto LABEL_103;
        }
        Vocab::reverse(v103 - 4 * v101, v28);
        uint64_t v36 = v15;
LABEL_49:
        int v37 = v90 ^ 1;
        if (!v26) {
          int v37 = 0;
        }
        double v94 = (double)v26;
        if (v27 < v86) {
          int v38 = v37;
        }
        else {
          int v38 = 0;
        }
        while (2)
        {
          TrieIter2<unsigned int,unsigned long>::init((uint64_t)v95);
          double v39 = 0.0;
          while (1)
          {
            uint64_t v40 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v95);
            uint64_t v42 = v40;
            if (!v40) {
              break;
            }
            if (v14 < 2 || *(void *)(v40 + 8))
            {
              if ((*(unsigned int (**)(void, void))(**((void **)this + 3) + 176))(*((void *)this + 3), v106[0])|| (*(unsigned int (**)(void, void))(**((void **)this + 3) + 224))(*((void *)this + 3), v106[0]))
              {
                if (v14 <= 1)
                {
                  unsigned int v43 = v106[0];
                  if (v43 != *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 88))(*((void *)this + 3))
                    && !(*(unsigned int (**)(void, void))(**((void **)this + 3) + 224))(*((void *)this + 3), v106[0]))
                  {
                    float v44 = -INFINITY;
                    goto LABEL_64;
                  }
                }
                ++v93;
              }
              else
              {
                double v45 = 1.0;
                if ((v90 & 1) == 0) {
                  double v45 = (*(double (**)(void, void, unint64_t, unint64_t))(**(void **)(a3 + 8 * v36) + 40))(*(void *)(a3 + 8 * v36), *(void *)(v42 + 8), v26, v27);
                }
                double v46 = v45 * (double)*(unint64_t *)(v42 + 8) / v94;
                if (v25)
                {
                  double v47 = (*(double (**)(void, unint64_t, unint64_t, uint64_t, uint64_t))(**(void **)(a3 + 8 * v36) + 56))(*(void *)(a3 + 8 * v36), v26, v27, v92, v91);
                  float v48 = v88;
                  if (v14 >= 2) {
                    float v48 = (*(float (**)(Ngram *, void, uint64_t, void))(*(void *)this + 480))(this, v106[0], v103 - 4 * v101, v87);
                  }
                  double v49 = 0.0;
                  if (v48 != -INFINITY) {
                    double v49 = exp(v48 * 2.30258509);
                  }
                  double v46 = v46 + v47 * v49;
                }
                float v44 = log10(v46);
                if (v45 != 0.0)
                {
                  double v39 = v39 + v46;
                  if (!*((unsigned char *)this + 8) && (Debug::debugAll > 3 || *((_DWORD *)this + 3) >= 4u))
                  {
                    uint64_t v50 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
                    uint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"CONTEXT ", 8);
                    (*(void (**)(void))(**((void **)this + 3) + 328))(*((void *)this + 3));
                    unsigned int v52 = operator<<(v51, (_DWORD *)(v103 - 4 * v101));
                    int v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" WORD ", 6);
                    char v54 = (const char *)(*(uint64_t (**)(void, void))(**((void **)this + 3) + 32))(*((void *)this + 3), v106[0]);
                    size_t v55 = strlen(v54);
                    uint64_t v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" NUMER ", 7);
                    char v57 = (void *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)" DENOM ", 7);
                    size_t v58 = (void *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" DISCOUNT ", 10);
                    std::ostream::operator<<();
                    if (v25)
                    {
                      unint64_t v59 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" LOW ", 5);
                      char v60 = (void *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)" LOLPROB ", 9);
                      std::ostream::operator<<();
                    }
                    long long v61 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" LPROB ", 7);
                    char v62 = (void *)std::ostream::operator<<();
                    std::ios_base::getloc((const std::ios_base *)((char *)v62 + *(void *)(*v62 - 24)));
                    std::string v63 = std::locale::use_facet(&v105, MEMORY[0x1E4FBA258]);
                    ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
                    std::locale::~locale(&v105);
                    std::ostream::put();
                    std::ostream::flush();
                  }
                }
                if (v45 == 0.0)
                {
                  ++v83;
                  Ngram::removeProb(this, v106[0], (unsigned int *)(v103 - 4 * v101));
                  a3 = v89;
                }
                else
                {
                  a3 = v89;
LABEL_64:
                  *(float *)Ngram::insertProb(this, v106[0], (unsigned int *)(v103 - 4 * v101)) = v44;
                }
              }
            }
          }
          if (v39 > v13) {
            int v64 = v38;
          }
          else {
            int v64 = 0;
          }
          if (v64 == 1)
          {
            if (!*((unsigned char *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"warning: ", 9);
              char v66 = (void *)std::ostream::operator<<();
              off_t v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" backoff probability mass left for \"", 36);
              (*(void (**)(void))(**((void **)this + 3) + 328))(*((void *)this + 3));
              uint64_t v68 = operator<<(v67, (_DWORD *)(v103 - 4 * v101));
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"\" -- ", 5);
              if (v25)
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"disabling interpolation\n", 24);
                BOOL v25 = 0;
                continue;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"incrementing denominator\n", 25);
            }
            else
            {
              BOOL v65 = !v25;
              BOOL v25 = 0;
              if (!v65) {
                continue;
              }
            }
            if (a4)
            {
              BOOL v25 = 0;
              unint64_t v69 = vcvtpd_u64_f64((v39 - v13) * v94 / v13);
              if (v69 <= 1) {
                unint64_t v69 = 1;
              }
              v26 += v69;
            }
            else
            {
              BOOL v25 = 0;
              ++v26;
            }
            goto LABEL_49;
          }
          break;
        }
        Vocab::reverse(v103 - 4 * v101, v41);
        uint64_t v15 = v36;
LABEL_103:
        TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v95);
      }
      if (!*((unsigned char *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
      {
        if (v82)
        {
          size_t v70 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"discarded ", 10);
          unint64_t v71 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" ", 1);
          char v72 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"-gram contexts containing pseudo-events\n", 40);
        }
        if (v93)
        {
          long long v73 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"discarded ", 10);
          char v74 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)" ", 1);
          unint64_t v75 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"-gram probs predicting pseudo-events\n", 37);
        }
        if (v83)
        {
          unint64_t v76 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"discarded ", 10);
          unint64_t v77 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)" ", 1);
          unint64_t v78 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"-gram probs discounted to zero\n", 31);
        }
      }
      (*(void (**)(Ngram *, uint64_t))(*(void *)this + 512))(this, v15);
      TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v100);
      uint64_t v14 = (v14 + 1);
    }
    while (v14 <= *((_DWORD *)this + 44));
  }
  (*(void (**)(Ngram *))(*(void *)this + 496))(this);
  if (v103) {
    MEMORY[0x1B3EA8630](v103, 0x1000C8052888210);
  }
  return 1;
}

void sub_1B1CAB0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

uint64_t Ngram::estimate2<double>(Ngram *this, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  int v6 = *((_DWORD *)this + 44);
  int v102 = 0;
  int v103 = v6;
  uint64_t v104 = 0;
  int v105 = 0;
  if (v6) {
    Array<unsigned int>::alloc();
  }
  unsigned int v7 = Ngram::vocabSize((const Vocab **)this);
  Ngram::clear(this);
  v101[0] = -1;
  LOBYTE(v96[0]) = 0;
  uint64_t Trie = Trie<unsigned int,BOnode>::findTrie((_DWORD **)this + 19, v101, v96);
  unsigned int v9 = (*(uint64_t (**)(void))(**((void **)this + 3) + 72))(*((void *)this + 3));
  uint64_t v10 = Trie + 8;
  if (!Trie) {
    uint64_t v10 = 0;
  }
  LHash<unsigned int,float>::setsize((void *)(v10 + 8), v9);
  if (*(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3)) != -1)
  {
    *(_DWORD *)(v104 - 4 * v10std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = -1;
    std::locale v11 = (unsigned int *)(*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
    *(_DWORD *)Ngram::insertProb(this, *v11, (unsigned int *)(v104 - 4 * v102)) = -8388608;
  }
  if (*((_DWORD *)this + 44))
  {
    float v88 = (_DWORD **)(a2 + 160);
    float v12 = log10((double)v7);
    unint64_t v87 = v7;
    float v90 = -v12;
    double v13 = 1.0 - 0.000003;
    uint64_t v14 = 1;
    do
    {
      uint64_t v15 = (v14 - 1);
      if (a3
        && (uint64_t v16 = *(void *)(a3 + 8 * v15)) != 0
        && !(*(unsigned int (**)(uint64_t))(*(void *)v16 + 72))(v16))
      {
        uint64_t v81 = *(void *)(a3 + 8 * v15);
        if (v81) {
          (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v81 + 120))(v81, a2, v14, *((unsigned int *)this + 44));
        }
        int v93 = 0;
      }
      else
      {
        int v93 = 1;
      }
      TrieIter2<unsigned int,double>::TrieIter2((uint64_t)v101, v88, (_DWORD *)(v104 - 4 * v102), v14 - 1, 0);
      int v84 = 0;
      int v85 = 0;
      int v94 = 0;
      unsigned int v89 = v14 - 2;
      while (1)
      {
        uint64_t v17 = TrieIter2<unsigned int,double>::next((uint64_t)v101);
        if (!v17) {
          break;
        }
        if (v14 >= 2
          && (int v18 = *(_DWORD *)(v104 + 4 * (int)(v89 - v102)),
              v18 == *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 120))(*((void *)this + 3)))
          || (uint64_t v19 = *((void *)this + 3),
              int v20 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v19 + 88))(v19),
              (*(unsigned int (**)(uint64_t, void))(*(void *)v19 + 176))(v19, *v20))
          && (uint64_t v21 = v104,
              uint64_t v22 = v102,
              uint64_t v23 = (unsigned int *)(*(uint64_t (**)(void))(**((void **)this + 3) + 88))(*((void *)this + 3)),
              Vocab::contains((Vocab *)(v21 - 4 * v22), (const unsigned int *)*v23)))
        {
          ++v84;
          continue;
        }
        v25 = a3 && (uint64_t v24 = *(void *)(a3 + 8 * v15)) != 0 && *(unsigned char *)(v24 + 24) != 0;
        LOBYTE(v106.__locale_) = 0;
        v96[0] = (_DWORD **)Trie<unsigned int,unsigned long>::insertTrie(v88, (unsigned int *)(v104 - 4 * v102), &v106);
        v96[1] = (_DWORD **)v107;
        int v97 = 1;
        uint64_t v98 = 0;
        LHashIter<unsigned int,Trie<unsigned int,double>>::LHashIter((uint64_t)v99, v96[0], 0);
        uint64_t v26 = v15;
        uint64_t v27 = a3;
        unint64_t v28 = 0;
        uint64_t v91 = 0;
        uint64_t v92 = 0;
        v99[4] = 0;
        char v100 = 0;
        double v29 = 0.0;
        v107[1] = -1;
        while (1)
        {
          uint64_t v31 = TrieIter2<unsigned int,double>::next((uint64_t)v96);
          if (!v31) {
            break;
          }
          if (!(*(unsigned int (**)(void, void))(**((void **)this + 3) + 176))(*((void *)this + 3), v107[0])&& (v14 != 1|| !(*(unsigned int (**)(void, void))(**((void **)this + 3) + 224))(*((void *)this + 3), v107[0])))
          {
            if ((*(unsigned int (**)(void, void))(**((void **)this + 3) + 224))(*((void *)this + 3), v107[0]))
            {
              unsigned int v32 = (*(uint64_t (**)(void, void))(**((void **)this + 3) + 232))(*((void *)this + 3), v107[0]);
              if (v32)
              {
                double v35 = *(double *)(v31 + 8);
                double v29 = v29 + (double)v32 * v35;
                unint64_t v36 = (unint64_t)v35;
                v28 += (unint64_t)v35;
                if (v32 == 1) {
                  unint64_t v37 = 0;
                }
                else {
                  unint64_t v37 = (unint64_t)v35;
                }
                if (v32 <= 2) {
                  unint64_t v36 = 0;
                }
                v91 += v36;
                v92 += v37;
              }
              else
              {
                double v29 = v29 + *(double *)(v31 + 8);
                ++v28;
              }
            }
            else
            {
              double v33 = *(double *)(v31 + 8);
              double v29 = v29 + v33;
              ++v28;
              uint64_t v34 = v92;
              if (v33 >= 2.0) {
                uint64_t v34 = v92 + 1;
              }
              uint64_t v92 = v34;
              if (v33 >= 3.0) {
                ++v91;
              }
            }
          }
        }
        if (v14 >= 2 && *(unsigned char *)(*(uint64_t (**)(Ngram *))(*(void *)this + 352))(this)) {
          double v29 = *(double *)(v17 + 8);
        }
        if (v29 == 0.0) {
          goto LABEL_100;
        }
        Vocab::reverse(v104 - 4 * v102, v30);
LABEL_46:
        int v38 = v93 ^ 1;
        if (v29 <= 0.0) {
          int v38 = 0;
        }
        if (v28 < v87) {
          int v39 = v38;
        }
        else {
          int v39 = 0;
        }
        double v95 = v29;
        while (2)
        {
          TrieIter2<unsigned int,double>::init((uint64_t)v96);
          double v40 = 0.0;
          while (1)
          {
            uint64_t v41 = TrieIter2<unsigned int,double>::next((uint64_t)v96);
            uint64_t v43 = v41;
            if (!v41) {
              break;
            }
            if (v14 < 2 || *(double *)(v41 + 8) != 0.0)
            {
              if ((*(unsigned int (**)(void, void))(**((void **)this + 3) + 176))(*((void *)this + 3), v107[0])|| (*(unsigned int (**)(void, void))(**((void **)this + 3) + 224))(*((void *)this + 3), v107[0]))
              {
                if (v14 <= 1)
                {
                  unsigned int v44 = v107[0];
                  if (v44 != *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 88))(*((void *)this + 3))
                    && !(*(unsigned int (**)(void, void))(**((void **)this + 3) + 224))(*((void *)this + 3), v107[0]))
                  {
                    float v45 = -INFINITY;
                    goto LABEL_62;
                  }
                }
                ++v94;
              }
              else
              {
                double v46 = 1.0;
                if ((v93 & 1) == 0) {
                  double v46 = (*(double (**)(void, unint64_t, double, double))(**(void **)(v27 + 8 * v26)
                }
                                                                                           + 48))(*(void *)(v27 + 8 * v26), v28, *(double *)(v43 + 8), v29);
                double v47 = v29;
                double v48 = v46 * *(double *)(v43 + 8) / v29;
                if (v25)
                {
                  double v49 = (*(double (**)(void, unint64_t, uint64_t, uint64_t, double))(**(void **)(v27 + 8 * v26) + 64))(*(void *)(v27 + 8 * v26), v28, v92, v91, v47);
                  float v50 = v90;
                  if (v14 >= 2) {
                    float v50 = (*(float (**)(Ngram *, void, uint64_t, void))(*(void *)this + 480))(this, v107[0], v104 - 4 * v102, v89);
                  }
                  double v51 = 0.0;
                  if (v50 != -INFINITY) {
                    double v51 = exp(v50 * 2.30258509);
                  }
                  double v48 = v48 + v49 * v51;
                }
                float v45 = log10(v48);
                if (v46 != 0.0)
                {
                  double v40 = v40 + v48;
                  if (!*((unsigned char *)this + 8) && (Debug::debugAll > 3 || *((_DWORD *)this + 3) >= 4u))
                  {
                    unsigned int v52 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
                    int v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"CONTEXT ", 8);
                    (*(void (**)(void))(**((void **)this + 3) + 328))(*((void *)this + 3));
                    char v54 = operator<<(v53, (_DWORD *)(v104 - 4 * v102));
                    size_t v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" WORD ", 6);
                    uint64_t v56 = (const char *)(*(uint64_t (**)(void, void))(**((void **)this + 3) + 32))(*((void *)this + 3), v107[0]);
                    size_t v57 = strlen(v56);
                    size_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" NUMER ", 7);
                    unint64_t v59 = (void *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" DENOM ", 7);
                    char v60 = (void *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)" DISCOUNT ", 10);
                    std::ostream::operator<<();
                    if (v25)
                    {
                      long long v61 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" LOW ", 5);
                      char v62 = (void *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)" LOLPROB ", 9);
                      std::ostream::operator<<();
                    }
                    std::string v63 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" LPROB ", 7);
                    int v64 = (void *)std::ostream::operator<<();
                    std::ios_base::getloc((const std::ios_base *)((char *)v64 + *(void *)(*v64 - 24)));
                    BOOL v65 = std::locale::use_facet(&v106, MEMORY[0x1E4FBA258]);
                    ((void (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
                    std::locale::~locale(&v106);
                    std::ostream::put();
                    std::ostream::flush();
                  }
                }
                if (v46 == 0.0)
                {
                  ++v85;
                  Ngram::removeProb(this, v107[0], (unsigned int *)(v104 - 4 * v102));
                  double v29 = v95;
                }
                else
                {
                  double v29 = v95;
LABEL_62:
                  *(float *)Ngram::insertProb(this, v107[0], (unsigned int *)(v104 - 4 * v102)) = v45;
                }
              }
            }
          }
          if (v40 > v13) {
            int v66 = v39;
          }
          else {
            int v66 = 0;
          }
          if (v66 == 1)
          {
            if (!*((unsigned char *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"warning: ", 9);
              uint64_t v68 = (void *)std::ostream::operator<<();
              unint64_t v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" backoff probability mass left for \"", 36);
              (*(void (**)(void))(**((void **)this + 3) + 328))(*((void *)this + 3));
              size_t v70 = operator<<(v69, (_DWORD *)(v104 - 4 * v102));
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"\" -- ", 5);
              if (v25)
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"disabling interpolation\n", 24);
                BOOL v25 = 0;
                continue;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"incrementing denominator\n", 25);
            }
            else
            {
              BOOL v67 = !v25;
              BOOL v25 = 0;
              if (!v67) {
                continue;
              }
            }
            if (a4) {
              double v71 = fmax(ceil(v29 * (v40 - v13) / v13), 1.0);
            }
            else {
              double v71 = 1.0;
            }
            BOOL v25 = 0;
            double v29 = v29 + v71;
            goto LABEL_46;
          }
          break;
        }
        Vocab::reverse(v104 - 4 * v102, v42);
LABEL_100:
        TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v96);
        a3 = v27;
        uint64_t v15 = v26;
      }
      if (!*((unsigned char *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
      {
        if (v84)
        {
          char v72 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"discarded ", 10);
          long long v73 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" ", 1);
          char v74 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"-gram contexts containing pseudo-events\n", 40);
        }
        if (v94)
        {
          unint64_t v75 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"discarded ", 10);
          unint64_t v76 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" ", 1);
          unint64_t v77 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"-gram probs predicting pseudo-events\n", 37);
        }
        if (v85)
        {
          unint64_t v78 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"discarded ", 10);
          uint64_t v79 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)" ", 1);
          long long v80 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"-gram probs discounted to zero\n", 31);
        }
      }
      (*(void (**)(Ngram *, uint64_t))(*(void *)this + 512))(this, v15);
      TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v101);
      uint64_t v14 = (v14 + 1);
    }
    while (v14 <= *((_DWORD *)this + 44));
  }
  (*(void (**)(Ngram *))(*(void *)this + 496))(this);
  if (v104) {
    MEMORY[0x1B3EA8630](v104, 0x1000C8052888210);
  }
  return 1;
}

void sub_1B1CAC01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

uint64_t Ngram::mixProbs(Ngram *this, Ngram *a2, double a3)
{
  int v3 = *((_DWORD *)this + 44);
  *(_DWORD *)&v5[8] = 0;
  *(void *)unsigned __int8 v5 = (v3 + 1);
  if (v3 != -1) {
    Array<unsigned int>::alloc();
  }
  (*(void (**)(Ngram *))(*(void *)this + 416))(this);
  return *(void *)&v5[4];
}

void sub_1B1CAC43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v26 = *(void *)(v24 + 8);
  if (v26) {
    MEMORY[0x1B3EA8630](v26, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

void Ngram::mixProbs(Vocab **this, Ngram *a2, Ngram *a3, double a4)
{
  BayesMix::BayesMix((BayesMix *)v4, this[3], a2, a3, a4, 1.0);
}

void sub_1B1CAC594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BayesMix::~BayesMix((BayesMix *)va);
  _Unwind_Resume(a1);
}

uint64_t Ngram::mixProbs(Ngram *a1, uint64_t a2)
{
  int v4 = *((_DWORD *)a1 + 44);
  *(_DWORD *)&v29[8] = 0;
  int v30 = 0;
  int v28 = 0;
  *(void *)double v29 = (v4 + 1);
  if (v4 != -1) {
    Array<unsigned int>::alloc();
  }
  unsigned int v5 = -1;
  uint64_t v6 = 0;
  uint64_t v7 = *(unsigned int *)(a2 + 152);
  do
  {
    if (v7)
    {
      for (unint64_t i = 0; i != v7; ++i)
      {
        if (i >= *(unsigned int *)(a2 + 152)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = *(void *)Array<LM *>::operator[]((int *)(a2 + 208), i);
        }
        TrieIter2<unsigned int,BOnode>::TrieIter2((uint64_t)v27, (_DWORD **)(v9 + 152), (_DWORD *)(*(void *)&v29[4] - 4 * v28), v6, 0);
        while (1)
        {
          uint64_t v10 = TrieIter2<unsigned int,BOnode>::next((uint64_t)v27);
          if (!v10) {
            break;
          }
          Priors = BayesMix::findPriors((BayesMix *)a2, (Vocab *)(*(void *)&v29[4] - 4 * v28));
          LHashIter<unsigned int,float>::LHashIter((uint64_t)v25, (_DWORD **)(v10 + 16), 0);
          unsigned int v24 = 0;
          while (1)
          {
            float v12 = (float *)LHashIter<unsigned int,float>::next((uint64_t)v25, &v24);
            if (!v12) {
              break;
            }
            if (!i || !Ngram::findProb(a1, v24, (unsigned int *)(*(void *)&v29[4] - 4 * v28)))
            {
              double v13 = *(double *)Array<double>::operator[](Priors, i);
              double v14 = 0.0;
              if (*v12 != -INFINITY) {
                double v14 = exp(*v12 * 2.30258509);
              }
              uint64_t v15 = 0;
              double v16 = v13 * v14;
              do
              {
                if (i != v15)
                {
                  double v17 = *(double *)Array<double>::operator[](Priors, v15);
                  int v18 = (void *)Array<LM *>::operator[]((int *)(a2 + 208), v15);
                  float v19 = (*(float (**)(void, void, uint64_t, uint64_t))(*(void *)*v18 + 480))(*v18, v24, *(void *)&v29[4] - 4 * v28, v6);
                  double v20 = 0.0;
                  if (v19 != -INFINITY) {
                    double v20 = exp(v19 * 2.30258509);
                  }
                  double v16 = v16 + v17 * v20;
                }
                ++v15;
              }
              while (v7 != v15);
              inserted = (float *)Ngram::insertProb(a1, v24, (unsigned int *)(*(void *)&v29[4] - 4 * v28));
              float v22 = log10(v16);
              float *inserted = v22;
            }
          }
          if (v26) {
            MEMORY[0x1B3EA8630](v26, 0x1000C8052888210);
          }
        }
        TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v27);
      }
      unsigned int v5 = *((_DWORD *)a1 + 44);
    }
    uint64_t v6 = (v6 + 1);
  }
  while (v6 < v5);
  (*(void (**)(Ngram *))(*(void *)a1 + 416))(a1);
  uint64_t result = *(void *)&v29[4];
  if (*(void *)&v29[4]) {
    return MEMORY[0x1B3EA8630](*(void *)&v29[4], 0x1000C8052888210);
  }
  return result;
}

void sub_1B1CAC8A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a25) {
    MEMORY[0x1B3EA8630](a25, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Ngram::computeBOW(void **a1, uint64_t a2, _DWORD *a3, int a4, void *a5, void *a6)
{
  LHashIter<unsigned int,float>::LHashIter((uint64_t)v39, (_DWORD **)(a2 + 8), 0);
  unsigned int v38 = 0;
  *a5 = 0x3FF0000000000000;
  *a6 = 0x3FF0000000000000;
  while (1)
  {
    std::locale v11 = (float *)LHashIter<unsigned int,float>::next((uint64_t)v39, &v38);
    if (!v11) {
      break;
    }
    double v12 = 0.0;
    if (*v11 != -INFINITY) {
      double v12 = exp(*v11 * 2.30258509);
    }
    *(double *)a5 = *(double *)a5 - v12;
    if (a4)
    {
      float v13 = ((float (*)(void **, void, _DWORD *, void))(*a1)[60])(a1, v38, a3, (a4 - 1));
      double v14 = 0.0;
      if (v13 != -INFINITY) {
        double v14 = exp(v13 * 2.30258509);
      }
      *(double *)a6 = *(double *)a6 - v14;
    }
  }
  double v15 = *(double *)a5;
  double v16 = -0.000003;
  if (*(double *)a5 < 0.0 && v15 > v16)
  {
    *a5 = 0;
    double v15 = 0.0;
  }
  double v18 = *(double *)a6;
  if (*(double *)a6 < 0.0 && v18 > v16)
  {
    *a6 = 0;
    double v15 = *(double *)a5;
    double v18 = 0.0;
  }
  if (v18 < 0.000003 && v15 > 0.000003)
  {
    BOOL v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"BOW denominator for context \"", 29);
    (*(void (**)(void *))(*a1[3] + 328))(a1[3]);
    uint64_t v26 = operator<<(v25, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\" is zero; scaling probabilities to sum to 1\n",
      45);
    double v27 = log10(1.0 - *(double *)a5);
    LHashIter<unsigned int,float>::init((uint64_t)v39);
    for (float i = v27; ; *v29 = *v29 - i)
    {
      double v29 = (float *)LHashIter<unsigned int,float>::next((uint64_t)v39, &v38);
      if (!v29) {
        break;
      }
    }
    int v30 = a6;
    a6 = a5;
    goto LABEL_30;
  }
  if (v15 < 0.0)
  {
    uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"BOW numerator for context \"", 27);
    (*(void (**)(void *))(*a1[3] + 328))(a1[3]);
    float v22 = operator<<(v21, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"\" is ", 5);
    uint64_t v23 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" < 0\n", 5);
LABEL_26:
    uint64_t v24 = 0;
    goto LABEL_32;
  }
  if (v18 > 0.0) {
    goto LABEL_31;
  }
  if (v15 > 0.000003)
  {
    unsigned int v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"BOW denominator for context \"", 29);
    (*(void (**)(void *))(*a1[3] + 328))(a1[3]);
    double v33 = operator<<(v32, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"\" is ", 5);
    uint64_t v34 = (void *)std::ostream::operator<<();
    double v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" <= 0,", 6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"numerator is ", 13);
    unint64_t v36 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(*v36 - 24)));
    unint64_t v37 = std::locale::use_facet(&v41, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
    std::locale::~locale(&v41);
    std::ostream::put();
    std::ostream::flush();
    goto LABEL_26;
  }
  int v30 = a5;
LABEL_30:
  void *v30 = 0;
  *a6 = 0;
LABEL_31:
  uint64_t v24 = 1;
LABEL_32:
  if (v40) {
    MEMORY[0x1B3EA8630](v40, 0x1000C8052888210);
  }
  return v24;
}

void sub_1B1CACD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14)
{
  if (a13) {
    MEMORY[0x1B3EA8630](a13, 0x1000C8052888210);
  }
  _Unwind_Resume(a1);
}

uint64_t Ngram::computeBOWs(Ngram *this, uint64_t a2)
{
  *(_DWORD *)&v29[8] = 0;
  int v30 = 0;
  int v28 = 0;
  *(void *)double v29 = (a2 + 1);
  if (a2 != -1) {
    Array<unsigned int>::alloc();
  }
  TrieIter2<unsigned int,BOnode>::TrieIter2((uint64_t)v27, (_DWORD **)this + 19, 0, -1, 0);
  unsigned __int8 v4 = 1;
  unsigned int v5 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    uint64_t v6 = TrieIter2<unsigned int,BOnode>::next((uint64_t)v27);
    uint64_t v7 = v6;
    if (!v6) {
      break;
    }
    LHashIter<unsigned int,float>::LHashIter((uint64_t)v25, (_DWORD **)(v6 + 16), 0);
    uint64_t v8 = (float *)(v7 + 8);
    double v23 = 0.0;
    double v24 = 0.0;
    if (!(*(unsigned int (**)(Ngram *, float *, uint64_t, uint64_t, double *, double *))(*(void *)this
                                                                                                 + 464))(this, v8, *(void *)&v29[4] - 4 * v28, a2, &v24, &v23))
    {
      unsigned __int8 v4 = 0;
      float v14 = -INFINITY;
LABEL_17:
      *uint64_t v8 = v14;
      goto LABEL_18;
    }
    v9.n128_f64[0] = v24;
    if (a2)
    {
      long double v10 = v23;
      if (v24 < 0.000003 && v23 < 0.000003)
      {
        float v14 = 0.0;
      }
      else
      {
        float v12 = log10(v24);
        float v13 = log10(v10);
        float v14 = v12 - v13;
      }
      goto LABEL_17;
    }
    if (v24 < 0.000003)
    {
      double v24 = 0.0;
      v9.n128_u64[0] = 0;
    }
    (*(void (**)(Ngram *, uint64_t, __n128))(*(void *)this + 504))(this, *(void *)&v29[4] - 4 * v28, v9);
LABEL_18:
    if (!*((unsigned char *)this + 8) && (Debug::debugAll > 3 || *((_DWORD *)this + 3) >= 4u))
    {
      double v15 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
      double v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"CONTEXT ", 8);
      (*(void (**)(void))(**((void **)this + 3) + 328))(*((void *)this + 3));
      double v17 = operator<<(v16, (_DWORD *)(*(void *)&v29[4] - 4 * v28));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" numerator ", 11);
      double v18 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" denominator ", 13);
      float v19 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" BOW ", 5);
      double v20 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
      uint64_t v21 = std::locale::use_facet(&v31, v5);
      ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
      std::locale::~locale(&v31);
      std::ostream::put();
      std::ostream::flush();
    }
    if (v26) {
      MEMORY[0x1B3EA8630](v26, 0x1000C8052888210);
    }
  }
  TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v27);
  if (*(void *)&v29[4]) {
    MEMORY[0x1B3EA8630](*(void *)&v29[4], 0x1000C8052888210);
  }
  return v4;
}

void sub_1B1CAD120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a27) {
    MEMORY[0x1B3EA8630](a27, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *Ngram::recomputeBOWs(_DWORD *this)
{
  if (this[44])
  {
    uint64_t v1 = this;
    uint64_t v2 = 0;
    do
    {
      this = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v1 + 512))(v1, v2);
      uint64_t v2 = (v2 + 1);
    }
    while (v2 < v1[44]);
  }
  return this;
}

uint64_t Ngram::pruneProbs(uint64_t a1, int a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  uint64_t v67 = a3;
  double v74 = a6;
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  int v8 = *(_DWORD *)(a1 + 176);
  *(_DWORD *)&v90[8] = 0;
  int v91 = 0;
  int v89 = 0;
  *(void *)float v90 = (v8 + 2);
  if (v8 != -2) {
    Array<unsigned int>::alloc();
  }
  uint64_t v9 = 4294967293;
  unsigned int v63 = a2 - 1;
  if ((a2 - 1) <= 0xFFFFFFFD)
  {
    int v64 = -2;
    long double v10 = (unsigned int **)(a1 + 152);
    double v77 = -INFINITY;
    uint64_t v66 = a1 & 0xFFFFFFFFFFFFLL | 0x204C000000000000;
    uint64_t v65 = v67 & 0xFFFFFFFFFFFFLL | 0x204C000000000000;
    double v82 = 2.30258509;
    uint64_t v72 = a1 + 152;
    uint64_t v70 = a1;
    uint64_t v71 = a4;
    uint64_t v73 = 4;
    double v78 = a5;
    do
    {
      uint64_t v11 = v9;
      TrieIter2<unsigned int,BOnode>::TrieIter2((uint64_t)v88, v10, (_DWORD *)4, v9, 0);
      int v69 = 0;
      uint64_t v12 = (v64 - 2);
      unsigned int v68 = v11;
      int v75 = v64 - 2;
      while (1)
      {
        uint64_t v13 = TrieIter2<unsigned int,BOnode>::next((uint64_t)v88);
        uint64_t v14 = v13;
        if (!v13) {
          break;
        }
        float v80 = *(float *)(v13 + 8);
        double v87 = 0.0;
        double v86 = 0.0;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, double *, double *))(*(void *)a1 + 464))(a1, v13 + 8, 4, v11, &v87, &v86))
        {
          if (v67) {
            uint64_t v15 = v67;
          }
          else {
            uint64_t v15 = a1;
          }
          float v76 = (*(float (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 104))(v15, 4, v11);
          LHashIter<unsigned int,float>::LHashIter((uint64_t)v84, (_DWORD **)(v14 + 16), 0);
          unsigned int v83 = 0;
          double v16 = exp(v76 * v82);
          if (v76 == -INFINITY) {
            double v16 = 0.0;
          }
          double v79 = -v16;
          int v17 = 1;
          while (1)
          {
            int v18 = v17;
            float v19 = (float *)LHashIter<unsigned int,float>::next((uint64_t)v84, &v83);
            if (!v19) {
              break;
            }
            float v20 = (*(float (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)a1 + 480))(a1, v83, 4, v12);
            double v21 = v87;
            float v22 = *v19;
            double v23 = *v19;
            double v24 = 0.0;
            double v25 = 0.0;
            if (*v19 != -INFINITY) {
              double v25 = exp(v23 * v82);
            }
            double v81 = v23;
            double v26 = log10(v21 + v25);
            double v27 = v86;
            if (v20 != -INFINITY) {
              double v24 = exp(v20 * v82);
            }
            double v28 = log10(v27 + v24);
            double v29 = 0.0;
            double v30 = 0.0;
            if (v22 != -INFINITY) {
              double v30 = exp(v81 * v82);
            }
            LODWORD(v81) = v18;
            float v31 = v26;
            float v32 = v28;
            double v33 = (v21 * (float)((float)(v31 - v32) - v80) + v30 * (float)((float)(v20 + (float)(v31 - v32)) - v22))
                * v79;
            if (v33 != v77) {
              double v29 = exp(v33 * v82);
            }
            BOOL v34 = 0;
            if (v78 > 0.0 && v29 + -1.0 < v78)
            {
              uint64_t v35 = *(void *)&v90[4];
              *(_DWORD *)(*(void *)&v90[4] - 4 * v89) = v83;
              LOBYTE(v92.__locale_) = 0;
              uint64_t Trie = Trie<unsigned int,BOnode>::findTrie(v10, (unsigned int *)(v35 - 4 * v89), &v92);
              BOOL v34 = Trie == 0;
              if (a4)
              {
                if (!Trie)
                {
                  MEMORY[0x1F4188790](0, v37);
                  uint64_t v40 = (char *)&v62 - v39;
                  if (v38 >= 0x200) {
                    size_t v41 = 512;
                  }
                  else {
                    size_t v41 = v38;
                  }
                  bzero((char *)&v62 - v39, v41);
                  (*(void (**)(void, uint64_t, char *, void))(**(void **)(a1 + 24) + 248))(*(void *)(a1 + 24), *(void *)&v90[4] - 4 * v89, v40, (*(_DWORD *)(a1 + 176) + 2));
                  operator new[]();
                }
              }
            }
            if (!*(unsigned char *)(a1 + 8) && (Debug::debugAll > 3 || *(_DWORD *)(a1 + 12) >= 4u))
            {
              uint64_t v42 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
              uint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"CONTEXT ", 8);
              (*(void (**)(void))(**(void **)(a1 + 24) + 328))(*(void *)(a1 + 24));
              unsigned int v44 = operator<<(v43, (_DWORD *)4);
              float v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" WORD ", 6);
              double v46 = (const char *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v83);
              size_t v47 = strlen(v46);
              double v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, v47);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" CONTEXTPROB ", 13);
              double v49 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" OLDPROB ", 9);
              float v50 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" NEWPROB ", 9);
              double v51 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" DELTA-H ", 9);
              unsigned int v52 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" DELTA-LOGP ", 12);
              int v53 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" PPL-CHANGE ", 12);
              char v54 = (void *)std::ostream::operator<<();
              size_t v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" PRUNED ", 8);
              LOBYTE(v92.__locale_) = v34;
              uint64_t v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)&v92, 1);
              std::ios_base::getloc((const std::ios_base *)((char *)v56 + *(void *)(*v56 - 24)));
              size_t v57 = std::locale::use_facet(&v92, MEMORY[0x1E4FBA258]);
              ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
              std::locale::~locale(&v92);
              std::ostream::put();
              std::ostream::flush();
            }
            int v17 = 0;
            if (v34)
            {
              Ngram::removeProb((Ngram *)a1, v83, (unsigned int *)4);
              ++v69;
              int v17 = LODWORD(v81);
            }
          }
          uint64_t v11 = v68;
          if (v18 && !Trie<unsigned int,BOnode>::numEntries(v10, (unsigned int *)4)) {
            Trie<unsigned int,BOnode>::removeTrie(v10, (unsigned int *)4, 0);
          }
          if (v85) {
            MEMORY[0x1B3EA8630](v85, 0x1000C8052888210);
          }
        }
      }
      if (!*(unsigned char *)(a1 + 8) && (Debug::debugAll || *(_DWORD *)(a1 + 12)) && v69)
      {
        size_t v58 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"pruned ", 7);
        unint64_t v59 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" ", 1);
        char v60 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"-grams\n", 7);
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v88);
      uint64_t v9 = (v11 - 1);
      if (v11 == 1) {
        break;
      }
      int v64 = v11;
    }
    while (v9 >= v63);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 416))(a1);
  uint64_t result = *(void *)&v90[4];
  if (*(void *)&v90[4]) {
    return MEMORY[0x1B3EA8630](*(void *)&v90[4], 0x1000C8052888210);
  }
  return result;
}

void sub_1B1CADD4C(_Unwind_Exception *exception_object)
{
}

uint64_t Ngram::pruneProbs(Ngram *this, int *a2, int a3, LM *a4)
{
  int v5 = *((_DWORD *)this + 44);
  *(_DWORD *)&v95[8] = 0;
  int v96 = 0;
  int v94 = 0;
  *(void *)double v95 = (v5 + 2);
  if (v5 != -2) {
    Array<unsigned int>::alloc();
  }
  uint64_t v6 = 4294967294;
  uint64_t v7 = 4294967293;
  unsigned int v71 = a3 - 1;
  if ((a3 - 1) <= 0xFFFFFFFD)
  {
    int v8 = (_DWORD *)(4 * (-1 - v5));
    do
    {
      int v9 = (*(uint64_t (**)(Ngram *, uint64_t))(*(void *)this + 456))(this, v6);
      int v10 = a2[v6];
      uint64_t v91 = 0;
      unint64_t v92 = 0;
      unint64_t v93 = 0;
      unsigned int v75 = v7;
      TrieIter2<unsigned int,BOnode>::TrieIter2((uint64_t)v90, (_DWORD **)this + 19, v8, v7, 0);
      unint64_t v77 = (v9 - v10) & ~((v9 - v10) >> 31);
      uint64_t v73 = v7;
      uint64_t v11 = (uint64_t)&v8[v7 + 1];
      while (1)
      {
        uint64_t v12 = TrieIter2<unsigned int,BOnode>::next((uint64_t)v90);
        uint64_t v13 = v12;
        if (!v12) {
          break;
        }
        float v79 = *(float *)(v12 + 8);
        double v88 = 0.0;
        double v89 = 0.0;
        if ((*(unsigned int (**)(Ngram *, uint64_t, _DWORD *, void, double *, double *))(*(void *)this + 464))(this, v12 + 8, v8, v75, &v89, &v88))
        {
          if (a4) {
            uint64_t v14 = a4;
          }
          else {
            uint64_t v14 = this;
          }
          float v76 = (*(float (**)(Ngram *, _DWORD *, void))(*(void *)v14 + 104))(v14, v8, v75);
          LHashIter<unsigned int,float>::LHashIter((uint64_t)v86, (_DWORD **)(v13 + 16), 0);
          unsigned int v85 = 0;
          double v15 = exp(v76 * 2.30258509);
          if (v76 == -INFINITY) {
            double v15 = 0.0;
          }
          double v78 = -v15;
          while (1)
          {
            double v16 = (float *)LHashIter<unsigned int,float>::next((uint64_t)v86, &v85);
            if (!v16) {
              break;
            }
            float v17 = (*(float (**)(Ngram *, void, _DWORD *, void))(*(void *)this + 480))(this, v85, v8, (v6 - 2));
            double v18 = v89;
            float v19 = *v16;
            double v20 = *v16;
            double v21 = 0.0;
            double v22 = 0.0;
            if (*v16 != -INFINITY) {
              double v22 = exp(v20 * 2.30258509);
            }
            double v23 = log10(v18 + v22);
            double v24 = v88;
            if (v17 != -INFINITY) {
              double v21 = exp(v17 * 2.30258509);
            }
            double v25 = log10(v24 + v21);
            double v26 = 0.0;
            double v27 = 0.0;
            if (v19 != -INFINITY) {
              double v27 = exp(v20 * 2.30258509);
            }
            float v28 = v23;
            float v29 = v25;
            double v30 = (v18 * (float)((float)(v28 - v29) - v79) + v27 * (float)((float)(v17 + (float)(v28 - v29)) - v19))
                * v78;
            if (v30 != -INFINITY) {
              double v26 = exp(v30 * 2.30258509);
            }
            uint64_t v31 = *(void *)&v95[4];
            *(_DWORD *)(*(void *)&v95[4] - 4 * v94) = v85;
            LOBYTE(v80.__locale_) = 0;
            double v32 = v26 + -1.0;
            if (!Trie<unsigned int,BOnode>::findTrie((_DWORD **)this + 19, (unsigned int *)(v31 - 4 * v94), &v80))
            {
              v80.__locale_ = *(std::locale::__imp **)&v32;
              unsigned int v81 = v85;
              unsigned int v83 = 0;
              uint64_t v84 = 0;
              std::string __p = 0;
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v8, v11, (v11 - (uint64_t)v8) >> 2);
              double v33 = (void *)v92;
              if (v92 >= v93)
              {
                unint64_t v35 = std::vector<PruneProbsRecord>::__push_back_slow_path<PruneProbsRecord const&>(&v91, (uint64_t *)&v80);
              }
              else
              {
                int locale = v80.__locale_;
                *(_DWORD *)(v92 + 8) = v81;
                void *v33 = locale;
                v33[3] = 0;
                v33[4] = 0;
                v33[2] = 0;
                std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v33 + 2, __p, (uint64_t)v83, (v83 - (unsigned char *)__p) >> 2);
                unint64_t v35 = (unint64_t)(v33 + 5);
              }
              unint64_t v92 = v35;
              v97[0] = (uint64_t (*)(uint64_t *, uint64_t *))PruneProbsRecord::compare;
              std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PruneProbsRecord const&,PruneProbsRecord const&),std::__wrap_iter<PruneProbsRecord*>>(v91, v35, v97, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v35 - v91) >> 3));
              unint64_t v36 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v92 - v91) >> 3);
              if (v36 > v77)
              {
                v97[0] = (uint64_t (*)(uint64_t *, uint64_t *))PruneProbsRecord::compare;
                std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(PruneProbsRecord const&,PruneProbsRecord const&),std::__wrap_iter<PruneProbsRecord*>>(v91, v92, (unsigned int (**)(uint64_t, uint64_t))v97, v36);
                unint64_t v37 = v92;
                unint64_t v38 = *(void **)(v92 - 24);
                if (v38)
                {
                  *(void *)(v92 - 16) = v38;
                  operator delete(v38);
                }
                unint64_t v92 = v37 - 40;
              }
              if (__p)
              {
                unsigned int v83 = __p;
                operator delete(__p);
              }
            }
            if (!*((unsigned char *)this + 8) && (Debug::debugAll > 3 || *((_DWORD *)this + 3) >= 4u))
            {
              uint64_t v39 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
              uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"CONTEXT ", 8);
              (*(void (**)(void))(**((void **)this + 3) + 328))(*((void *)this + 3));
              size_t v41 = operator<<(v40, v8);
              uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" WORD ", 6);
              uint64_t v43 = (const char *)(*(uint64_t (**)(void, void))(**((void **)this + 3) + 32))(*((void *)this + 3), v85);
              size_t v44 = strlen(v43);
              float v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" CONTEXTPROB ", 13);
              double v46 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" OLDPROB ", 9);
              size_t v47 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" NEWPROB ", 9);
              double v48 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" DELTA-H ", 9);
              double v49 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" DELTA-LOGP ", 12);
              float v50 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" PPL-CHANGE ", 12);
              double v51 = (void *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(void *)(*v51 - 24)));
              unsigned int v52 = std::locale::use_facet(&v80, MEMORY[0x1E4FBA258]);
              ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
              std::locale::~locale(&v80);
              std::ostream::put();
              std::ostream::flush();
            }
          }
          if (v87) {
            MEMORY[0x1B3EA8630](v87, 0x1000C8052888210);
          }
        }
      }
      uint64_t v53 = v91;
      uint64_t v54 = v91;
      if (v91 != v92)
      {
        do
        {
          uint64_t v55 = *(unsigned int *)(v54 + 8);
          uint64_t v56 = *(unsigned int **)(v54 + 16);
          Ngram::removeProb(this, *(_DWORD *)(v54 + 8), v56);
          if (!*((unsigned char *)this + 8) && (Debug::debugAll > 3 || *((_DWORD *)this + 3) >= 4u))
          {
            size_t v57 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
            size_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"CONTEXT ", 8);
            (*(void (**)(void))(**((void **)this + 3) + 328))(*((void *)this + 3));
            unint64_t v59 = operator<<(v58, v56);
            char v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" WORD ", 6);
            long long v61 = (const char *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 3) + 32))(*((void *)this + 3), v55);
            size_t v62 = strlen(v61);
            unsigned int v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v61, v62);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" PPL-CHANGE ", 12);
            int v64 = (void *)std::ostream::operator<<();
            uint64_t v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)" PRUNED 1", 9);
            std::ios_base::getloc((const std::ios_base *)((char *)v65 + *(void *)(*v65 - 24)));
            uint64_t v66 = std::locale::use_facet(&v80, MEMORY[0x1E4FBA258]);
            ((void (*)(const std::locale::facet *, uint64_t))v66->__vftable[2].~facet_0)(v66, 10);
            std::locale::~locale(&v80);
            std::ostream::put();
            std::ostream::flush();
          }
          if (!Ngram::numProbs(this, v56)
            && !Trie<unsigned int,BOnode>::numEntries((_DWORD **)this + 19, v56))
          {
            Trie<unsigned int,BOnode>::removeTrie((unsigned int **)this + 19, v56, 0);
          }
          v54 += 40;
        }
        while (v54 != v92);
        uint64_t v53 = v91;
      }
      if (!*((unsigned char *)this + 8)
        && (Debug::debugAll || *((_DWORD *)this + 3))
        && -858993459 * ((unint64_t)(v54 - v53) >> 3))
      {
        uint64_t v67 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"pruned ", 7);
        unsigned int v68 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" ", 1);
        int v69 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"-grams\n", 7);
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v90);
      v90[0] = (void **)&v91;
      std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](v90);
      uint64_t v7 = v73 - 1;
      if (v73 == 1) {
        break;
      }
      uint64_t v6 = v75;
    }
    while (v71 <= v7);
  }
  (*(void (**)(Ngram *))(*(void *)this + 416))(this);
  uint64_t result = *(void *)&v95[4];
  if (*(void *)&v95[4]) {
    return MEMORY[0x1B3EA8630](*(void *)&v95[4], 0x1000C8052888210);
  }
  return result;
}

void sub_1B1CAE868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v37 = *(void *)(v35 - 176);
  if (v37) {
    MEMORY[0x1B3EA8630](v37, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

BOOL PruneProbsRecord::compare(double *a1, double *a2)
{
  return *a1 < *a2;
}

uint64_t Ngram::pruneLowProbs(Ngram *this, int a2)
{
  int v3 = *((_DWORD *)this + 44);
  int v31 = 0;
  int v32 = v3;
  uint64_t v33 = 0;
  int v34 = 0;
  if (v3) {
    Array<unsigned int>::alloc();
  }
  unsigned int v4 = a2 - 1;
  unsigned int v25 = a2 - 1;
  do
  {
    if (v4 >= *((_DWORD *)this + 44))
    {
      int v26 = 0;
    }
    else
    {
      int v26 = 0;
      do
      {
        TrieIter2<unsigned int,BOnode>::TrieIter2((uint64_t)v30, (_DWORD **)this + 19, (_DWORD *)(v33 - 4 * v31), v4, 0);
        int v5 = 0;
        while (1)
        {
          uint64_t v6 = TrieIter2<unsigned int,BOnode>::next((uint64_t)v30);
          if (!v6) {
            break;
          }
          float v7 = *(float *)(v6 + 8);
          LHashIter<unsigned int,float>::LHashIter((uint64_t)v28, (_DWORD **)(v6 + 16), 0);
          unsigned int v27 = 0;
          uint64_t v8 = 1;
LABEL_9:
          uint64_t v9 = v8;
          while (1)
          {
            uint64_t v8 = v9;
            int v10 = (float *)LHashIter<unsigned int,float>::next((uint64_t)v28, &v27);
            if (!v10) {
              break;
            }
            float v11 = (*(float (**)(Ngram *, void, uint64_t, void))(*(void *)this + 480))(this, v27, v33 - 4 * v31, v4 - 1);
            uint64_t v9 = 0;
            if ((float)(v7 + v11) > *v10)
            {
              if (!*((unsigned char *)this + 8) && (Debug::debugAll > 3 || *((_DWORD *)this + 3) >= 4u))
              {
                uint64_t v12 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
                uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"CONTEXT ", 8);
                (*(void (**)(void))(**((void **)this + 3) + 328))(*((void *)this + 3));
                uint64_t v14 = operator<<(v13, (_DWORD *)(v33 - 4 * v31));
                double v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" WORD ", 6);
                double v16 = (const char *)(*(uint64_t (**)(void, void))(**((void **)this + 3) + 32))(*((void *)this + 3), v27);
                size_t v17 = strlen(v16);
                double v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" LPROB ", 7);
                float v19 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" BACKOFF-LPROB ", 15);
                double v20 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" PRUNED\n", 8);
              }
              Ngram::removeProb(this, v27, (unsigned int *)(v33 - 4 * v31));
              ++v5;
              goto LABEL_9;
            }
          }
          if (v8
            && !Trie<unsigned int,BOnode>::numEntries((_DWORD **)this + 19, (unsigned int *)(v33 - 4 * v31)))
          {
            Trie<unsigned int,BOnode>::removeTrie((unsigned int **)this + 19, (unsigned int *)(v33 - 4 * v31), 0);
          }
          if (v29) {
            MEMORY[0x1B3EA8630](v29, 0x1000C8052888210);
          }
        }
        if (v5)
        {
          if (!*((unsigned char *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
          {
            double v21 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"pruned ", 7);
            double v22 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" ", 1);
            double v23 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"-grams\n", 7);
          }
          int v26 = 1;
        }
        TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v30);
        ++v4;
      }
      while (v4 < *((_DWORD *)this + 44));
    }
    (*(void (**)(Ngram *))(*(void *)this + 416))(this);
    unsigned int v4 = v25;
  }
  while (v26);
  (*(void (**)(Ngram *))(*(void *)this + 496))(this);
  uint64_t result = v33;
  if (v33) {
    return MEMORY[0x1B3EA8630](v33, 0x1000C8052888210);
  }
  return result;
}

void sub_1B1CAED98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a26) {
    MEMORY[0x1B3EA8630](a26, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Ngram::rescoreProbs(Ngram *this, LM *a2)
{
  int v2 = *((_DWORD *)this + 44);
  *(_DWORD *)&v4[8] = 0;
  *(void *)unsigned int v4 = (v2 + 1);
  if (v2 != -1) {
    Array<unsigned int>::alloc();
  }
  (*(void (**)(Ngram *))(*(void *)this + 416))(this);
  return *(void *)&v4[4];
}

void sub_1B1CAEF98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v16 = *(void *)(v14 - 64);
  if (v16) {
    MEMORY[0x1B3EA8630](v16, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Ngram::fixupProbs(Ngram *this)
{
  int v2 = *((_DWORD *)this + 44);
  *(_DWORD *)&v23[8] = 0;
  int v24 = 0;
  int v22 = 0;
  *(void *)double v23 = (v2 + 1);
  if (v2 != -1) {
    Array<unsigned int>::alloc();
  }
  v21[0] = 0;
  v21[1] = 0;
  unsigned int v3 = 1;
  do
  {
    TrieIter2<unsigned int,BOnode>::TrieIter2((uint64_t)v20, (_DWORD **)this + 19, (_DWORD *)(*(void *)&v23[4] - 4 * v22), v3, 0);
    while (TrieIter2<unsigned int,BOnode>::next((uint64_t)v20))
    {
      int v4 = 0;
      do
      {
        int v5 = v4 + 1;
        if (Ngram::findProb(this, *(_DWORD *)(*(void *)&v23[4] + 4 * (v4 - v22)), (unsigned int *)(*(void *)&v23[4] + 4 * (v4 - v22 + 1))))
        {
          break;
        }
        LOBYTE(v25.__locale_) = 0;
        Trie<unsigned int,unsigned long>::insertTrie(v21, (unsigned int *)(*(void *)&v23[4] + 4 * (v4 - v22)), &v25)[1] = 1;
        ++v4;
      }
      while (v3 != v5);
    }
    TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v20);
    ++v3;
    unsigned int v6 = *((_DWORD *)this + 44);
  }
  while (v3 < v6);
  if (v6 >= 2)
  {
    float v7 = (std::locale::id *)MEMORY[0x1E4FBA258];
    unsigned int v8 = 1;
    do
    {
      TrieIter2<unsigned int,unsigned long>::TrieIter2((uint64_t)v20, v21, (_DWORD *)(*(void *)&v23[4] - 4 * v22), v8, 0);
      int v9 = 0;
      while (1)
      {
        uint64_t v10 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v20);
        if (!v10) {
          break;
        }
        if (*(void *)(v10 + 8))
        {
          float v11 = (*(float (**)(Ngram *, void, uint64_t, void))(*(void *)this + 480))(this, *(unsigned int *)(*(void *)&v23[4] + 4 * -v22), *(void *)&v23[4] + 4 * (1 - v22), v8 - 1);
          ++v9;
          *(float *)Ngram::insertProb(this, *(_DWORD *)(*(void *)&v23[4] + 4 * -v22), (unsigned int *)(*(void *)&v23[4] + 4 * (1 - v22))) = v11;
          if (!*((unsigned char *)this + 8) && (Debug::debugAll > 2 || *((_DWORD *)this + 3) >= 3u))
          {
            uint64_t v12 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
            uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"faking probability for context ", 31);
            (*(void (**)(void))(**((void **)this + 3) + 328))(*((void *)this + 3));
            uint64_t v14 = operator<<(v13, (_DWORD *)(*(void *)&v23[4] - 4 * v22));
            std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
            double v15 = std::locale::use_facet(&v25, v7);
            ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
            std::locale::~locale(&v25);
            std::ostream::put();
            std::ostream::flush();
          }
        }
      }
      if (!*((unsigned char *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)) && v9)
      {
        uint64_t v16 = (void *)(*(uint64_t (**)(Ngram *))(*(void *)this + 24))(this);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"inserted ", 9);
        size_t v17 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" redundant ", 11);
        double v18 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"-gram probs\n", 12);
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v20);
      ++v8;
    }
    while (v8 < *((_DWORD *)this + 44));
  }
  Trie<unsigned int,unsigned long>::~Trie(v21);
  uint64_t result = *(void *)&v23[4];
  if (*(void *)&v23[4]) {
    return MEMORY[0x1B3EA8630](*(void *)&v23[4], 0x1000C8052888210);
  }
  return result;
}

void sub_1B1CAF400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _DWORD *a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  std::locale::~locale((std::locale *)(v22 - 104));
  TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)&a9);
  Trie<unsigned int,unsigned long>::~Trie(&a19);
  if (a22) {
    MEMORY[0x1B3EA8630](a22, 0x1000C8052888210);
  }
  _Unwind_Resume(a1);
}

uint64_t Ngram::distributeProb(const Vocab **this, double a2, unsigned int *a3)
{
  VocabIter::VocabIter((VocabIter *)v25, this[3], 0);
  unsigned int v6 = 0;
  unsigned int v7 = 0;
  unsigned int v24 = 0;
  while (VocabIter::next((VocabIter *)v25, &v24))
  {
    if (!(*(unsigned int (**)(const Vocab *, void))(*(void *)this[3] + 176))(this[3], v24)
      && !(*(unsigned int (**)(const Vocab *, void))(*(void *)this[3] + 224))(this[3], v24))
    {
      double Prob = (float *)Ngram::findProb((Ngram *)this, v24, a3);
      ++v6;
      if (!Prob)
      {
        *(_DWORD *)Ngram::insertProb((Ngram *)this, v24, a3) = -8388608;
        goto LABEL_9;
      }
      if (*Prob == -INFINITY) {
LABEL_9:
      }
        ++v7;
    }
  }
  VocabIter::init((VocabIter *)v25);
  if (v7)
  {
    if (!*((unsigned char *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"warning: distributing ", 22);
      int v9 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" left-over probability mass over ", 33);
      uint64_t v10 = (void *)std::ostream::operator<<();
      float v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" zeroton words", 14);
      std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
      uint64_t v12 = std::locale::use_facet(&v27, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
      std::locale::~locale(&v27);
      std::ostream::put();
      std::ostream::flush();
    }
    float v13 = log10(a2 / (double)v7);
    while (VocabIter::next((VocabIter *)v25, &v24))
    {
      if (!(*(unsigned int (**)(const Vocab *, void))(*(void *)this[3] + 176))(this[3], v24)
        && !(*(unsigned int (**)(const Vocab *, void))(*(void *)this[3] + 224))(this[3], v24))
      {
        inserted = (float *)Ngram::insertProb((Ngram *)this, v24, a3);
        if (*inserted == -INFINITY) {
          float *inserted = v13;
        }
      }
    }
  }
  else
  {
    if (a2 > 0.0 && !*((unsigned char *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"warning: distributing ", 22);
      double v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" left-over probability mass over all ", 37);
      uint64_t v16 = (void *)std::ostream::operator<<();
      size_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" words", 6);
      std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
      double v18 = std::locale::use_facet(&v27, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
      std::locale::~locale(&v27);
      std::ostream::put();
      std::ostream::flush();
    }
    double v19 = a2 / (double)v6;
    while (VocabIter::next((VocabIter *)v25, &v24))
    {
      if (!(*(unsigned int (**)(const Vocab *, void))(*(void *)this[3] + 176))(this[3], v24)
        && !(*(unsigned int (**)(const Vocab *, void))(*(void *)this[3] + 224))(this[3], v24))
      {
        double v20 = (float *)Ngram::insertProb((Ngram *)this, v24, a3);
        double v21 = 0.0;
        if (*v20 != -INFINITY) {
          double v21 = exp(*v20 * 2.30258509);
        }
        float v22 = log10(v19 + v21);
        *double v20 = v22;
      }
    }
  }
  uint64_t result = v26;
  if (v26) {
    return MEMORY[0x1B3EA8630](v26, 0x50C80EE9192B6);
  }
  return result;
}

void sub_1B1CAF8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14)
{
  if (a13) {
    MEMORY[0x1B3EA8630](a13, 0x50C80EE9192B6);
  }
  _Unwind_Resume(exception_object);
}

void Ngram::~Ngram(Ngram *this)
{
  *(void *)this = &unk_1F0A346B0;
  Trie<unsigned int,BOnode>::~Trie((uint64_t)this + 152);
  LM::~LM(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A346B0;
  Trie<unsigned int,BOnode>::~Trie((uint64_t)this + 152);
  LM::~LM(this);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A346B0;
  Trie<unsigned int,BOnode>::~Trie((char *)this + 152);
  LM::~LM(this);
}

float LM::wordProb(LM *this, uint64_t a2, const unsigned int *a3)
{
  uint64_t v5 = 0;
  unsigned int v6 = 0;
  float v3 = (*(float (**)(LM *, uint64_t, const unsigned int *, uint64_t *))(*(void *)this + 40))(this, a2, a3, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3;
}

void sub_1B1CAFA7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

float LM::sentenceProb(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memset(v5, 0, sizeof(v5));
  float v3 = (*(float (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 72))(a1, a2, a3, v5);
  unsigned int v6 = (void **)v5;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v6);
  return v3;
}

{
  float v3;
  void v5[3];
  void **v6;

  memset(v5, 0, sizeof(v5));
  float v3 = (*(float (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 88))(a1, a2, a3, v5);
  unsigned int v6 = (void **)v5;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v6);
  return v3;
}

void sub_1B1CAFB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1B1CAFB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

unint64_t LM::pplCountsFile(uint64_t a1, File *a2, uint64_t a3, uint64_t a4, char *a5, int a6)
{
  return LM::pplCountsFile<unsigned long>(a1, a2, a3, a4, a5, a6, 0);
}

double LM::pplFloatCountsFile(uint64_t a1, File *a2, uint64_t a3, uint64_t a4, char *a5, int a6)
{
  return LM::pplCountsFile<double>(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t LM::contextID(LM *this, const unsigned int *a2)
{
  int v3 = 0;
  return (*(uint64_t (**)(LM *, const unsigned int *, int *))(*(void *)this + 200))(this, a2, &v3);
}

uint64_t Ngram::contextID(Ngram *this, const unsigned int *a2, unsigned int *a3)
{
  return (*(uint64_t (**)(Ngram *, uint64_t, const unsigned int *, unsigned int *))(*(void *)this + 208))(this, 0xFFFFFFFFLL, a2, a3);
}

uint64_t LM::running(LM *this)
{
  return *((unsigned __int8 *)this + 147);
}

uint64_t LM::running(LM *this, char a2)
{
  uint64_t v2 = *((unsigned __int8 *)this + 147);
  *((unsigned char *)this + 147) = a2;
  return v2;
}

void LM::followIter(LM *this, const unsigned int *a2)
{
}

void sub_1B1CAFCAC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F1C4088EBDB0FLL);
  _Unwind_Resume(a1);
}

uint64_t LM::prefetchingNgrams(LM *this)
{
  return 0;
}

uint64_t LM::prefetchNgrams()
{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

uint64_t Ngram::skipOOVs(Ngram *this)
{
  return (uint64_t)this + 180;
}

uint64_t Ngram::trustTotals(Ngram *this)
{
  return (uint64_t)this + 181;
}

uint64_t Ngram::useCodebook(uint64_t result, uint64_t a2)
{
  *(void *)(result + 184) = a2;
  return result;
}

float Ngram::wordProbBO(Ngram *this, uint64_t a2, const unsigned int *a3, uint64_t a4)
{
  uint64_t v6 = 0;
  unsigned int v7 = 0;
  float v4 = (*(float (**)(Ngram *, uint64_t, const unsigned int *, uint64_t, uint64_t *))(*(void *)this + 472))(this, a2, a3, a4, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v4;
}

void sub_1B1CAFD7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void NgramBayesMix::~NgramBayesMix(NgramBayesMix *this)
{
  BayesMix::~BayesMix(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t BayesMix::dout(BayesMix *this)
{
  return *((void *)this + 2);
}

uint64_t LM::contextID(LM *this, const unsigned int *a2, unsigned int *a3)
{
  return (*(uint64_t (**)(LM *, uint64_t, const unsigned int *, unsigned int *))(*(void *)this + 208))(this, 0xFFFFFFFFLL, a2, a3);
}

uint64_t NgramBayesMix::read(BayesMix *this, File *a2)
{
  return BayesMix::readMixLMs(this, a2);
}

uint64_t BayesMix::running(BayesMix *this)
{
  return *((unsigned __int8 *)this + 147);
}

uint64_t Array<LM *>::operator[](int *a1, uint64_t a2)
{
  unint64_t v2 = a2 - *a1;
  if (v2 >= a1[1])
  {
    a1[1] = v2 + 1;
    if (v2 >= a1[4]) {
      Array<LM *>::alloc();
    }
  }
  return *((void *)a1 + 1) + 8 * v2;
}

void Array<LM *>::alloc()
{
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (int *)result;
LABEL_2:
  float v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 2;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 4 + 8 * *(a2 - 1) + 4), *(unsigned int *)(*(void *)a3 + 4 + 8 * *v11 + 4));
          if ((result & 0x80000000) != 0)
          {
            int v22 = *v11;
            *float v11 = *(a2 - 1);
            *(a2 - 1) = v22;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(v11, v11 + 1, (int *)a2 - 1, a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(v11, v11 + 1, v11 + 2, (int *)a2 - 1, a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(v11, v11 + 1, v11 + 2, v11 + 3, (int *)a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (int *)a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *,unsigned int *>((unsigned int *)v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    size_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(v11, &v11[v15 >> 1], (int *)a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(v11 + 1, v17 - 1, (int *)a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(v11 + 2, &v11[v16 + 1], (int *)a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(v17 - 1, v17, &v11[v16 + 1], a3);
      int v18 = *v11;
      *float v11 = *v17;
      int *v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(&v11[v15 >> 1], v11, (int *)a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 4 + 8 * *(v11 - 1) + 4), *(unsigned int *)(*(void *)a3 + 4 + 8 * *v11 + 4)) & 0x80000000) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,float> &>((unsigned int *)v11, a2, a3);
      float v11 = (int *)result;
      goto LABEL_19;
    }
LABEL_14:
    double v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,float> &>(v11, (int *)a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(v11, v19, a3);
    float v11 = v19 + 1;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(v19 + 1, (int *)a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = (unsigned int *)v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *,false>(v10, v19, a3, -v13, a5 & 1);
      float v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>((uint64_t)v11, a2, a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>((uint64_t)v11, a2, a3);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  if ((unsigned int *)result != a2)
  {
    float v4 = (_DWORD *)result;
    char v5 = (unsigned int *)(result + 4);
    if ((unsigned int *)(result + 4) != a2)
    {
      uint64_t v7 = 0;
      unsigned int v8 = (unsigned int *)result;
      do
      {
        uint64_t v10 = *v8;
        uint64_t v9 = v8[1];
        unsigned int v8 = v5;
        uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 4 + 8 * v9 + 4), *(unsigned int *)(*(void *)a3 + 4 + 8 * v10 + 4));
        if ((result & 0x80000000) != 0)
        {
          uint64_t v11 = *v8;
          uint64_t v12 = v7;
          while (1)
          {
            *(_DWORD *)((char *)v4 + v12 + 4) = *(_DWORD *)((char *)v4 + v12);
            if (!v12) {
              break;
            }
            uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 4 + 8 * v11 + 4), *(unsigned int *)(*(void *)a3 + 4 + 8 * *(unsigned int *)((char *)v4 + v12 - 4) + 4));
            v12 -= 4;
            if ((result & 0x80000000) == 0)
            {
              uint64_t v13 = (_DWORD *)((char *)v4 + v12 + 4);
              goto LABEL_10;
            }
          }
          uint64_t v13 = v4;
LABEL_10:
          _DWORD *v13 = v11;
        }
        char v5 = v8 + 1;
        v7 += 4;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  if ((unsigned int *)result != a2)
  {
    float v4 = (unsigned int *)result;
    for (float i = (unsigned int *)(result + 4); v4 + 1 != a2; float i = v4 + 1)
    {
      uint64_t v8 = *v4;
      uint64_t v7 = v4[1];
      float v4 = i;
      uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 4 + 8 * v7 + 4), *(unsigned int *)(*(void *)a3 + 4 + 8 * v8 + 4));
      if ((result & 0x80000000) != 0)
      {
        uint64_t v9 = *v4;
        uint64_t v10 = v4;
        do
        {
          uint64_t v11 = v10;
          int v12 = *--v10;
          *uint64_t v11 = v12;
          uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 4 + 8 * v9 + 4), *(unsigned int *)(*(void *)a3 + 4 + 8 * *(v11 - 2) + 4));
        }
        while ((result & 0x80000000) != 0);
        _DWORD *v10 = v9;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  int v8 = (*(uint64_t (**)(void, void))(a4 + 16))(*(unsigned int *)(*(void *)a4 + 4 + 8 * *a2 + 4), *(unsigned int *)(*(void *)a4 + 4 + 8 * *a1 + 4));
  int v9 = (*(uint64_t (**)(void, void))(a4 + 16))(*(unsigned int *)(*(void *)a4 + 4 + 8 * *a3 + 4), *(unsigned int *)(*(void *)a4 + 4 + 8 * *a2 + 4));
  if (v8 < 0)
  {
    uint64_t v11 = *a1;
    if (v9 < 0)
    {
      *a1 = *a3;
      *a3 = v11;
    }
    else
    {
      *a1 = *a2;
      *a2 = v11;
      if (((*(uint64_t (**)(void, void))(a4 + 16))(*(unsigned int *)(*(void *)a4 + 4 + 8 * *a3 + 4), *(unsigned int *)(*(void *)a4 + 4 + 8 * v11 + 4)) & 0x80000000) != 0)
      {
        int v12 = *a2;
        *a2 = *a3;
        *a3 = v12;
        return 2;
      }
    }
  }
  else
  {
    if ((v9 & 0x80000000) == 0) {
      return 0;
    }
    int v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    if (((*(uint64_t (**)(void, void))(a4 + 16))(*(unsigned int *)(*(void *)a4 + 4 + 8 * *a2 + 4), *(unsigned int *)(*(void *)a4 + 4 + 8 * *a1 + 4)) & 0x80000000) != 0)
    {
      int v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
      return 2;
    }
  }
  return 1;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,float> &>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  float v4 = a2;
  uint64_t v6 = *a1;
  if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 4 + 8 * v6 + 4), *(unsigned int *)(*(void *)a3 + 4 + 8 * *(a2 - 1) + 4)) & 0x80000000) != 0)
  {
    int v8 = a1;
    do
    {
      unsigned int v9 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 4 + 8 * v6 + 4), *(unsigned int *)(*(void *)a3 + 4 + 8 * v9 + 4)) & 0x80000000) == 0);
  }
  else
  {
    uint64_t v7 = a1 + 1;
    do
    {
      int v8 = v7;
      if (v7 >= v4) {
        break;
      }
      ++v7;
    }
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 4 + 8 * v6 + 4), *(unsigned int *)(*(void *)a3 + 4 + 8 * *v8 + 4)) & 0x80000000) == 0);
  }
  if (v8 < v4)
  {
    do
      unsigned int v10 = *--v4;
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 4 + 8 * v6 + 4), *(unsigned int *)(*(void *)a3 + 4 + 8 * v10 + 4)) & 0x80000000) != 0);
  }
  while (v8 < v4)
  {
    unsigned int v11 = *v8;
    *int v8 = *v4;
    *float v4 = v11;
    do
    {
      unsigned int v12 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 4 + 8 * v6 + 4), *(unsigned int *)(*(void *)a3 + 4 + 8 * v12 + 4)) & 0x80000000) == 0);
    do
      unsigned int v13 = *--v4;
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 4 + 8 * v6 + 4), *(unsigned int *)(*(void *)a3 + 4 + 8 * v13 + 4)) & 0x80000000) != 0);
  }
  if (v8 - 1 != a1) {
    *a1 = *(v8 - 1);
  }
  *(v8 - 1) = v6;
  return v8;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,float> &>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  do
    int v8 = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 4 + 8 * a1[++v6] + 4), *(unsigned int *)(*(void *)a3 + 4 + 8 * v7 + 4));
  while (v8 < 0);
  unsigned int v9 = &a1[v6];
  unsigned int v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      unsigned int v12 = *--a2;
    }
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 4 + 8 * v12 + 4), *(unsigned int *)(*(void *)a3 + 4 + 8 * v7 + 4)) & 0x80000000) == 0);
  }
  else
  {
    do
      unsigned int v11 = *--a2;
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 4 + 8 * v11 + 4), *(unsigned int *)(*(void *)a3 + 4 + 8 * v7 + 4)) & 0x80000000) == 0);
  }
  if (v9 < a2)
  {
    unsigned int v13 = &a1[v6];
    int v14 = a2;
    do
    {
      int v15 = *v13;
      int *v13 = *v14;
      int *v14 = v15;
      do
      {
        unsigned int v16 = v13[1];
        ++v13;
      }
      while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 4 + 8 * v16 + 4), *(unsigned int *)(*(void *)a3 + 4 + 8 * v7 + 4)) & 0x80000000) != 0);
      do
        unsigned int v17 = *--v14;
      while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 4 + 8 * v17 + 4), *(unsigned int *)(*(void *)a3 + 4 + 8 * v7 + 4)) & 0x80000000) == 0);
    }
    while (v13 < v14);
    unsigned int v10 = v13 - 1;
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  int *v10 = v7;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 4 + 8 * *(a2 - 1) + 4), *(unsigned int *)(*(void *)a3 + 4 + 8 * *a1 + 4)) & 0x80000000) != 0)
      {
        int v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unsigned int v9 = (unsigned int *)(a1 + 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      unsigned int v10 = (unsigned int *)(a1 + 3);
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 4 + 8 * *v10 + 4), *(unsigned int *)(*(void *)a3 + 4 + 8 * *v9 + 4)) & 0x80000000) != 0)
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(int *)((char *)a1 + v14 + 8);
        if (v14 == -8) {
          break;
        }
        int v15 = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 4 + 8 * v13 + 4), *(unsigned int *)(*(void *)a3 + 4 + 8 * *(unsigned int *)((char *)a1 + v14 + 4) + 4));
        v14 -= 4;
        if ((v15 & 0x80000000) == 0)
        {
          unsigned int v16 = (int *)((char *)a1 + v14 + 12);
          goto LABEL_12;
        }
      }
      unsigned int v16 = a1;
LABEL_12:
      int *v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == (unsigned int *)a2;
      }
    }
    unsigned int v9 = v10;
    v11 += 4;
    if (++v10 == (unsigned int *)a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(a1, a2, a3, a5);
  uint64_t result = (*(uint64_t (**)(void, void))(a5 + 16))(*(unsigned int *)(*(void *)a5 + 4 + 8 * *a4 + 4), *(unsigned int *)(*(void *)a5 + 4 + 8 * *a3 + 4));
  if ((result & 0x80000000) != 0)
  {
    int v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = (*(uint64_t (**)(void, void))(a5 + 16))(*(unsigned int *)(*(void *)a5 + 4 + 8 * *a3 + 4), *(unsigned int *)(*(void *)a5 + 4 + 8 * *a2 + 4));
    if ((result & 0x80000000) != 0)
    {
      int v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = (*(uint64_t (**)(void, void))(a5 + 16))(*(unsigned int *)(*(void *)a5 + 4 + 8 * *a2 + 4), *(unsigned int *)(*(void *)a5 + 4 + 8 * *a1 + 4));
      if ((result & 0x80000000) != 0)
      {
        int v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(a1, a2, a3, a4, a6);
  uint64_t result = (*(uint64_t (**)(void, void))(a6 + 16))(*(unsigned int *)(*(void *)a6 + 4 + 8 * *a5 + 4), *(unsigned int *)(*(void *)a6 + 4 + 8 * *a4 + 4));
  if ((result & 0x80000000) != 0)
  {
    int v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = (*(uint64_t (**)(void, void))(a6 + 16))(*(unsigned int *)(*(void *)a6 + 4 + 8 * *a4 + 4), *(unsigned int *)(*(void *)a6 + 4 + 8 * *a3 + 4));
    if ((result & 0x80000000) != 0)
    {
      int v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = (*(uint64_t (**)(void, void))(a6 + 16))(*(unsigned int *)(*(void *)a6 + 4 + 8 * *a3 + 4), *(unsigned int *)(*(void *)a6 + 4 + 8 * *a2 + 4));
      if ((result & 0x80000000) != 0)
      {
        int v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = (*(uint64_t (**)(void, void))(a6 + 16))(*(unsigned int *)(*(void *)a6 + 4 + 8 * *a2 + 4), *(unsigned int *)(*(void *)a6 + 4 + 8 * *a1 + 4));
        if ((result & 0x80000000) != 0)
        {
          int v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    int v13 = a2;
    if (a2 != a3)
    {
      int v14 = a2;
      do
      {
        if (((*(uint64_t (**)(void, void))(a4 + 16))(*(unsigned int *)(*(void *)a4 + 4 + 8 * *v14 + 4), *(unsigned int *)(*(void *)a4 + 4 + 8 * *a1 + 4)) & 0x80000000) != 0)
        {
          unsigned int v15 = *v14;
          unsigned int *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 5)
    {
      uint64_t v16 = (unint64_t)v8 >> 2;
      unsigned int v17 = a2 - 1;
      do
      {
        unsigned int v18 = *a1;
        double v19 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(a1, a4, v16);
        if (v17 == v19)
        {
          unsigned int *v19 = v18;
        }
        else
        {
          unsigned int *v19 = *v17;
          unsigned int *v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>((uint64_t)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v10 = ((uint64_t)a4 - result) >> 1;
      uint64_t v11 = v10 + 1;
      int v12 = (unsigned int *)(result + 4 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3
        && (*(int (**)(void, void))(a2 + 16))(*(unsigned int *)(*(void *)a2 + 4 + 8 * *v12 + 4), *(unsigned int *)(*(void *)a2 + 4 + 8 * v12[1] + 4)) < 0)
      {
        ++v12;
        uint64_t v11 = v13;
      }
      uint64_t result = (*(uint64_t (**)(void, void))(a2 + 16))(*(unsigned int *)(*(void *)a2 + 4 + 8 * *v12 + 4), *(unsigned int *)(*(void *)a2 + 4 + 8 * *v5 + 4));
      if ((result & 0x80000000) == 0)
      {
        uint64_t v14 = *v5;
        do
        {
          unsigned int v15 = v12;
          *char v5 = *v12;
          if (v7 < v11) {
            break;
          }
          uint64_t v16 = (2 * v11) | 1;
          int v12 = (unsigned int *)(v6 + 4 * v16);
          if (2 * v11 + 2 < a3
            && (*(int (**)(void, void))(a2 + 16))(*(unsigned int *)(*(void *)a2 + 4 + 8 * *v12 + 4), *(unsigned int *)(*(void *)a2 + 4 + 8 * v12[1] + 4)) < 0)
          {
            ++v12;
            uint64_t v16 = 2 * v11 + 2;
          }
          uint64_t result = (*(uint64_t (**)(void, void))(a2 + 16))(*(unsigned int *)(*(void *)a2 + 4 + 8 * *v12 + 4), *(unsigned int *)(*(void *)a2 + 4 + 8 * v14 + 4));
          char v5 = v15;
          uint64_t v11 = v16;
        }
        while ((result & 0x80000000) == 0);
        _DWORD *v15 = v14;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3
      && (*(int (**)(void, void))(a2 + 16))(*(unsigned int *)(*(void *)a2 + 4 + 8 * *v9 + 4), *(unsigned int *)(*(void *)a2 + 4 + 8 * a1[v6 + 2] + 4)) < 0)
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (_DWORD *)(result + 4 * (v4 >> 1));
    uint64_t v9 = (_DWORD *)(a2 - 4);
    uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 4 + 8 * *v8 + 4), *(unsigned int *)(*(void *)a3 + 4 + 8 * *(unsigned int *)(a2 - 4) + 4));
    if ((result & 0x80000000) != 0)
    {
      uint64_t v10 = *v9;
      do
      {
        uint64_t v11 = v8;
        *uint64_t v9 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (_DWORD *)(v6 + 4 * v7);
        uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 4 + 8 * *v8 + 4), *(unsigned int *)(*(void *)a3 + 4 + 8 * v10 + 4));
        uint64_t v9 = v11;
      }
      while ((result & 0x80000000) != 0);
      *uint64_t v11 = v10;
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (int *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 2;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 32 * *(a2 - 1) + 24), *(unsigned int *)(*(void *)a3 + 8 + 32 * *v11 + 24));
          if ((result & 0x80000000) != 0)
          {
            int v22 = *v11;
            *uint64_t v11 = *(a2 - 1);
            *(a2 - 1) = v22;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(v11, v11 + 1, (int *)a2 - 1, a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(v11, v11 + 1, v11 + 2, (int *)a2 - 1, a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(v11, v11 + 1, v11 + 2, v11 + 3, (int *)a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (int *)a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *,unsigned int *>((unsigned int *)v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    unsigned int v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(v11, &v11[v15 >> 1], (int *)a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(v11 + 1, v17 - 1, (int *)a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(v11 + 2, &v11[v16 + 1], (int *)a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(v17 - 1, v17, &v11[v16 + 1], a3);
      int v18 = *v11;
      *uint64_t v11 = *v17;
      int *v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(&v11[v15 >> 1], v11, (int *)a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 32 * *(v11 - 1) + 24), *(unsigned int *)(*(void *)a3 + 8 + 32 * *v11 + 24)) & 0x80000000) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &>((unsigned int *)v11, a2, a3);
      uint64_t v11 = (int *)result;
      goto LABEL_19;
    }
LABEL_14:
    double v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &>(v11, (int *)a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(v11, v19, a3);
    uint64_t v11 = v19 + 1;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(v19 + 1, (int *)a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = (unsigned int *)v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *,false>(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>((uint64_t)v11, a2, a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>((uint64_t)v11, a2, a3);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  if ((unsigned int *)result != a2)
  {
    unint64_t v4 = (_DWORD *)result;
    char v5 = (unsigned int *)(result + 4);
    if ((unsigned int *)(result + 4) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (unsigned int *)result;
      do
      {
        uint64_t v10 = *v8;
        uint64_t v9 = v8[1];
        uint64_t v8 = v5;
        uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 32 * v9 + 24), *(unsigned int *)(*(void *)a3 + 8 + 32 * v10 + 24));
        if ((result & 0x80000000) != 0)
        {
          uint64_t v11 = *v8;
          uint64_t v12 = v7;
          while (1)
          {
            *(_DWORD *)((char *)v4 + v12 + 4) = *(_DWORD *)((char *)v4 + v12);
            if (!v12) {
              break;
            }
            uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 32 * v11 + 24), *(unsigned int *)(*(void *)a3 + 8 + 32 * *(unsigned int *)((char *)v4 + v12 - 4) + 24));
            v12 -= 4;
            if ((result & 0x80000000) == 0)
            {
              uint64_t v13 = (_DWORD *)((char *)v4 + v12 + 4);
              goto LABEL_10;
            }
          }
          uint64_t v13 = v4;
LABEL_10:
          _DWORD *v13 = v11;
        }
        char v5 = v8 + 1;
        v7 += 4;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  if ((unsigned int *)result != a2)
  {
    unint64_t v4 = (unsigned int *)result;
    for (float i = (unsigned int *)(result + 4); v4 + 1 != a2; float i = v4 + 1)
    {
      uint64_t v8 = *v4;
      uint64_t v7 = v4[1];
      unint64_t v4 = i;
      uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 32 * v7 + 24), *(unsigned int *)(*(void *)a3 + 8 + 32 * v8 + 24));
      if ((result & 0x80000000) != 0)
      {
        uint64_t v9 = *v4;
        uint64_t v10 = v4;
        do
        {
          uint64_t v11 = v10;
          int v12 = *--v10;
          *uint64_t v11 = v12;
          uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 32 * v9 + 24), *(unsigned int *)(*(void *)a3 + 8 + 32 * *(v11 - 2) + 24));
        }
        while ((result & 0x80000000) != 0);
        _DWORD *v10 = v9;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  int v8 = (*(uint64_t (**)(void, void))(a4 + 16))(*(unsigned int *)(*(void *)a4 + 8 + 32 * *a2 + 24), *(unsigned int *)(*(void *)a4 + 8 + 32 * *a1 + 24));
  int v9 = (*(uint64_t (**)(void, void))(a4 + 16))(*(unsigned int *)(*(void *)a4 + 8 + 32 * *a3 + 24), *(unsigned int *)(*(void *)a4 + 8 + 32 * *a2 + 24));
  if (v8 < 0)
  {
    uint64_t v11 = *a1;
    if (v9 < 0)
    {
      *a1 = *a3;
      *a3 = v11;
    }
    else
    {
      *a1 = *a2;
      *a2 = v11;
      if (((*(uint64_t (**)(void, void))(a4 + 16))(*(unsigned int *)(*(void *)a4 + 8 + 32 * *a3 + 24), *(unsigned int *)(*(void *)a4 + 8 + 32 * v11 + 24)) & 0x80000000) != 0)
      {
        int v12 = *a2;
        *a2 = *a3;
        *a3 = v12;
        return 2;
      }
    }
  }
  else
  {
    if ((v9 & 0x80000000) == 0) {
      return 0;
    }
    int v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    if (((*(uint64_t (**)(void, void))(a4 + 16))(*(unsigned int *)(*(void *)a4 + 8 + 32 * *a2 + 24), *(unsigned int *)(*(void *)a4 + 8 + 32 * *a1 + 24)) & 0x80000000) != 0)
    {
      int v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
      return 2;
    }
  }
  return 1;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = *a1;
  if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 32 * v6 + 24), *(unsigned int *)(*(void *)a3 + 8 + 32 * *(a2 - 1) + 24)) & 0x80000000) != 0)
  {
    int v8 = a1;
    do
    {
      unsigned int v9 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 32 * v6 + 24), *(unsigned int *)(*(void *)a3 + 8 + 32 * v9 + 24)) & 0x80000000) == 0);
  }
  else
  {
    uint64_t v7 = a1 + 1;
    do
    {
      int v8 = v7;
      if (v7 >= v4) {
        break;
      }
      ++v7;
    }
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 32 * v6 + 24), *(unsigned int *)(*(void *)a3 + 8 + 32 * *v8 + 24)) & 0x80000000) == 0);
  }
  if (v8 < v4)
  {
    do
      unsigned int v10 = *--v4;
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 32 * v6 + 24), *(unsigned int *)(*(void *)a3 + 8 + 32 * v10 + 24)) & 0x80000000) != 0);
  }
  while (v8 < v4)
  {
    unsigned int v11 = *v8;
    *int v8 = *v4;
    *unint64_t v4 = v11;
    do
    {
      unsigned int v12 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 32 * v6 + 24), *(unsigned int *)(*(void *)a3 + 8 + 32 * v12 + 24)) & 0x80000000) == 0);
    do
      unsigned int v13 = *--v4;
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 32 * v6 + 24), *(unsigned int *)(*(void *)a3 + 8 + 32 * v13 + 24)) & 0x80000000) != 0);
  }
  if (v8 - 1 != a1) {
    *a1 = *(v8 - 1);
  }
  *(v8 - 1) = v6;
  return v8;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  do
    int v8 = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 32 * a1[++v6] + 24), *(unsigned int *)(*(void *)a3 + 8 + 32 * v7 + 24));
  while (v8 < 0);
  unsigned int v9 = &a1[v6];
  unsigned int v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      unsigned int v12 = *--a2;
    }
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 32 * v12 + 24), *(unsigned int *)(*(void *)a3 + 8 + 32 * v7 + 24)) & 0x80000000) == 0);
  }
  else
  {
    do
      unsigned int v11 = *--a2;
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 32 * v11 + 24), *(unsigned int *)(*(void *)a3 + 8 + 32 * v7 + 24)) & 0x80000000) == 0);
  }
  if (v9 < a2)
  {
    unsigned int v13 = &a1[v6];
    int v14 = a2;
    do
    {
      int v15 = *v13;
      int *v13 = *v14;
      int *v14 = v15;
      do
      {
        unsigned int v16 = v13[1];
        ++v13;
      }
      while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 32 * v16 + 24), *(unsigned int *)(*(void *)a3 + 8 + 32 * v7 + 24)) & 0x80000000) != 0);
      do
        unsigned int v17 = *--v14;
      while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 32 * v17 + 24), *(unsigned int *)(*(void *)a3 + 8 + 32 * v7 + 24)) & 0x80000000) == 0);
    }
    while (v13 < v14);
    unsigned int v10 = v13 - 1;
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  int *v10 = v7;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 32 * *(a2 - 1) + 24), *(unsigned int *)(*(void *)a3 + 8 + 32 * *a1 + 24)) & 0x80000000) != 0)
      {
        int v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unsigned int v9 = (unsigned int *)(a1 + 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      unsigned int v10 = (unsigned int *)(a1 + 3);
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 32 * *v10 + 24), *(unsigned int *)(*(void *)a3 + 8 + 32 * *v9 + 24)) & 0x80000000) != 0)
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(int *)((char *)a1 + v14 + 8);
        if (v14 == -8) {
          break;
        }
        int v15 = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 32 * v13 + 24), *(unsigned int *)(*(void *)a3 + 8 + 32 * *(unsigned int *)((char *)a1 + v14 + 4) + 24));
        v14 -= 4;
        if ((v15 & 0x80000000) == 0)
        {
          unsigned int v16 = (int *)((char *)a1 + v14 + 12);
          goto LABEL_12;
        }
      }
      unsigned int v16 = a1;
LABEL_12:
      int *v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == (unsigned int *)a2;
      }
    }
    unsigned int v9 = v10;
    v11 += 4;
    if (++v10 == (unsigned int *)a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(a1, a2, a3, a5);
  uint64_t result = (*(uint64_t (**)(void, void))(a5 + 16))(*(unsigned int *)(*(void *)a5 + 8 + 32 * *a4 + 24), *(unsigned int *)(*(void *)a5 + 8 + 32 * *a3 + 24));
  if ((result & 0x80000000) != 0)
  {
    int v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = (*(uint64_t (**)(void, void))(a5 + 16))(*(unsigned int *)(*(void *)a5 + 8 + 32 * *a3 + 24), *(unsigned int *)(*(void *)a5 + 8 + 32 * *a2 + 24));
    if ((result & 0x80000000) != 0)
    {
      int v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = (*(uint64_t (**)(void, void))(a5 + 16))(*(unsigned int *)(*(void *)a5 + 8 + 32 * *a2 + 24), *(unsigned int *)(*(void *)a5 + 8 + 32 * *a1 + 24));
      if ((result & 0x80000000) != 0)
      {
        int v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(a1, a2, a3, a4, a6);
  uint64_t result = (*(uint64_t (**)(void, void))(a6 + 16))(*(unsigned int *)(*(void *)a6 + 8 + 32 * *a5 + 24), *(unsigned int *)(*(void *)a6 + 8 + 32 * *a4 + 24));
  if ((result & 0x80000000) != 0)
  {
    int v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = (*(uint64_t (**)(void, void))(a6 + 16))(*(unsigned int *)(*(void *)a6 + 8 + 32 * *a4 + 24), *(unsigned int *)(*(void *)a6 + 8 + 32 * *a3 + 24));
    if ((result & 0x80000000) != 0)
    {
      int v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = (*(uint64_t (**)(void, void))(a6 + 16))(*(unsigned int *)(*(void *)a6 + 8 + 32 * *a3 + 24), *(unsigned int *)(*(void *)a6 + 8 + 32 * *a2 + 24));
      if ((result & 0x80000000) != 0)
      {
        int v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = (*(uint64_t (**)(void, void))(a6 + 16))(*(unsigned int *)(*(void *)a6 + 8 + 32 * *a2 + 24), *(unsigned int *)(*(void *)a6 + 8 + 32 * *a1 + 24));
        if ((result & 0x80000000) != 0)
        {
          int v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    int v13 = a2;
    if (a2 != a3)
    {
      int v14 = a2;
      do
      {
        if (((*(uint64_t (**)(void, void))(a4 + 16))(*(unsigned int *)(*(void *)a4 + 8 + 32 * *v14 + 24), *(unsigned int *)(*(void *)a4 + 8 + 32 * *a1 + 24)) & 0x80000000) != 0)
        {
          unsigned int v15 = *v14;
          unsigned int *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 5)
    {
      uint64_t v16 = (unint64_t)v8 >> 2;
      unsigned int v17 = a2 - 1;
      do
      {
        unsigned int v18 = *a1;
        double v19 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(a1, a4, v16);
        if (v17 == v19)
        {
          unsigned int *v19 = v18;
        }
        else
        {
          unsigned int *v19 = *v17;
          unsigned int *v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>((uint64_t)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v10 = ((uint64_t)a4 - result) >> 1;
      uint64_t v11 = v10 + 1;
      int v12 = (unsigned int *)(result + 4 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3
        && (*(int (**)(void, void))(a2 + 16))(*(unsigned int *)(*(void *)a2 + 8 + 32 * *v12 + 24), *(unsigned int *)(*(void *)a2 + 8 + 32 * v12[1] + 24)) < 0)
      {
        ++v12;
        uint64_t v11 = v13;
      }
      uint64_t result = (*(uint64_t (**)(void, void))(a2 + 16))(*(unsigned int *)(*(void *)a2 + 8 + 32 * *v12 + 24), *(unsigned int *)(*(void *)a2 + 8 + 32 * *v5 + 24));
      if ((result & 0x80000000) == 0)
      {
        uint64_t v14 = *v5;
        do
        {
          unsigned int v15 = v12;
          *char v5 = *v12;
          if (v7 < v11) {
            break;
          }
          uint64_t v16 = (2 * v11) | 1;
          int v12 = (unsigned int *)(v6 + 4 * v16);
          if (2 * v11 + 2 < a3
            && (*(int (**)(void, void))(a2 + 16))(*(unsigned int *)(*(void *)a2 + 8 + 32 * *v12 + 24), *(unsigned int *)(*(void *)a2 + 8 + 32 * v12[1] + 24)) < 0)
          {
            ++v12;
            uint64_t v16 = 2 * v11 + 2;
          }
          uint64_t result = (*(uint64_t (**)(void, void))(a2 + 16))(*(unsigned int *)(*(void *)a2 + 8 + 32 * *v12 + 24), *(unsigned int *)(*(void *)a2 + 8 + 32 * v14 + 24));
          char v5 = v15;
          uint64_t v11 = v16;
        }
        while ((result & 0x80000000) == 0);
        _DWORD *v15 = v14;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3
      && (*(int (**)(void, void))(a2 + 16))(*(unsigned int *)(*(void *)a2 + 8 + 32 * *v9 + 24), *(unsigned int *)(*(void *)a2 + 8 + 32 * a1[v6 + 2] + 24)) < 0)
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (_DWORD *)(result + 4 * (v4 >> 1));
    uint64_t v9 = (_DWORD *)(a2 - 4);
    uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 32 * *v8 + 24), *(unsigned int *)(*(void *)a3 + 8 + 32 * *(unsigned int *)(a2 - 4) + 24));
    if ((result & 0x80000000) != 0)
    {
      uint64_t v10 = *v9;
      do
      {
        uint64_t v11 = v8;
        *uint64_t v9 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (_DWORD *)(v6 + 4 * v7);
        uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 32 * *v8 + 24), *(unsigned int *)(*(void *)a3 + 8 + 32 * v10 + 24));
        uint64_t v9 = v11;
      }
      while ((result & 0x80000000) != 0);
      *uint64_t v11 = v10;
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,double>> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (unsigned int *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * *(a2 - 1) + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * *v11 + 16));
          if ((result & 0x80000000) != 0)
          {
            unsigned int v22 = *v11;
            *uint64_t v11 = *(a2 - 1);
            *(a2 - 1) = v22;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v11, v11 + 1, a2 - 1, a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v11, v11 + 1, v11 + 2, a2 - 1, a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *,unsigned int *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    unsigned int v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v11, &v11[v15 >> 1], a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v11 + 1, v17 - 1, a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v11 + 2, &v11[v16 + 1], a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v17 - 1, v17, &v11[v16 + 1], a3);
      unsigned int v18 = *v11;
      *uint64_t v11 = *v17;
      unsigned int *v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(&v11[v15 >> 1], v11, a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * *(v11 - 1) + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * *v11 + 16)) & 0x80000000) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &>(v11, a2, a3);
      uint64_t v11 = (unsigned int *)result;
      goto LABEL_19;
    }
LABEL_14:
    double v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &>(v11, a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,double>> &,unsigned int *>(v11, v19, a3);
    uint64_t v11 = v19 + 1;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,double>> &,unsigned int *>(v19 + 1, a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,double>> &,unsigned int *,false>(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>((uint64_t)v11, a2, a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>((uint64_t)v11, a2, a3);
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,double>> &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * *(a2 - 1) + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * *a1 + 16)) & 0x80000000) != 0)
      {
        unsigned int v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * *v10 + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * *v9 + 16)) & 0x80000000) != 0)
    {
      unsigned int v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v14 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(unsigned int *)((char *)a1 + v14 + 8);
        if (v14 == -8) {
          break;
        }
        int v15 = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 24 * v13 + 16), *(unsigned int *)(*(void *)a3 + 8 + 24 * *(unsigned int *)((char *)a1 + v14 + 4) + 16));
        v14 -= 4;
        if ((v15 & 0x80000000) == 0)
        {
          unint64_t v16 = (unsigned int *)((char *)a1 + v14 + 12);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      unsigned int *v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 4;
    if (++v10 == a2) {
      return 1;
    }
  }
}

uint64_t std::vector<PruneProbsRecord>::__push_back_slow_path<PruneProbsRecord const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  unsigned int v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[40 * v4];
  v15[0] = v10;
  v15[1] = v11;
  unint64_t v16 = v11;
  unsigned int v17 = &v10[40 * v9];
  uint64_t v12 = *a2;
  *((_DWORD *)v11 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t v11 = v12;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)v11 + 2, (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 2);
  v16 += 40;
  std::vector<PruneProbsRecord>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B1CB2C10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<PruneProbsRecord>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PruneProbsRecord>,std::reverse_iterator<PruneProbsRecord*>,std::reverse_iterator<PruneProbsRecord*>,std::reverse_iterator<PruneProbsRecord*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PruneProbsRecord>,std::reverse_iterator<PruneProbsRecord*>,std::reverse_iterator<PruneProbsRecord*>,std::reverse_iterator<PruneProbsRecord*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v18 = a6;
  *((void *)&v18 + 1) = a7;
  long long v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  void v15[2] = &v18;
  char v16 = 0;
  if (a3 == a5)
  {
    uint64_t v13 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      uint64_t v10 = *(void *)(v9 - 40);
      v9 -= 40;
      int v11 = *(_DWORD *)(v9 + 8);
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      uint64_t v12 = (void *)(v7 - 24);
      *((_DWORD *)v12 - std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v11;
      *(v12 - std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v10;
      v12[1] = 0;
      void v12[2] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v12, *(const void **)(v9 + 16), *(void *)(v9 + 24), (uint64_t)(*(void *)(v9 + 24) - *(void *)(v9 + 16)) >> 2);
      uint64_t v7 = *((void *)&v18 + 1) - 40;
      *((void *)&v18 + 1) -= 40;
    }
    while (v9 != a5);
    uint64_t v13 = v18;
  }
  char v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PruneProbsRecord>,std::reverse_iterator<PruneProbsRecord*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

void sub_1B1CB2D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PruneProbsRecord>,std::reverse_iterator<PruneProbsRecord*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PruneProbsRecord const&,PruneProbsRecord const&),std::__wrap_iter<PruneProbsRecord*>>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v8 = v4 >> 1;
    uint64_t v9 = (uint64_t *)(a1 + 40 * (v4 >> 1));
    uint64_t v10 = (uint64_t *)(a2 - 40);
    if ((*a3)(v9, (uint64_t *)(a2 - 40)))
    {
      uint64_t v11 = *v10;
      int v16 = *((_DWORD *)v10 + 2);
      uint64_t v15 = v11;
      long long v18 = 0;
      uint64_t v19 = 0;
      std::string __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(a2 - 24), *(void *)(a2 - 16), (uint64_t)(*(void *)(a2 - 16) - *(void *)(a2 - 24)) >> 2);
      do
      {
        uint64_t v12 = v9;
        uint64_t v13 = *v9;
        *((_DWORD *)v10 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = *((_DWORD *)v9 + 2);
        uint64_t *v10 = v13;
        if (v10 != v9) {
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v10 + 16, (char *)v9[2], v9[3], (v9[3] - v9[2]) >> 2);
        }
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (uint64_t *)(a1 + 40 * v8);
        uint64_t v10 = v12;
      }
      while (((*a3)(v9, &v15) & 1) != 0);
      uint64_t v14 = v15;
      *((_DWORD *)v12 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v16;
      *uint64_t v12 = v14;
      if (v12 != &v15) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v12 + 16, (char *)__p, (uint64_t)v18, (v18 - (unsigned char *)__p) >> 2);
      }
      if (__p)
      {
        long long v18 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_1B1CB2EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(PruneProbsRecord const&,PruneProbsRecord const&),std::__wrap_iter<PruneProbsRecord*>>(uint64_t a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v8 = *(void *)a1;
    int v19 = *(_DWORD *)(a1 + 8);
    uint64_t v18 = v8;
    BOOL v21 = 0;
    uint64_t v22 = 0;
    std::string __p = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(a1 + 16), *(void *)(a1 + 24), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
    uint64_t v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PruneProbsRecord const&,PruneProbsRecord const&),std::__wrap_iter<PruneProbsRecord*>>(a1, a3, a4);
    uint64_t v10 = v9;
    uint64_t v11 = (uint64_t *)(a2 - 40);
    if (a2 - 40 == v9)
    {
      uint64_t v17 = v18;
      *(_DWORD *)(v9 + 8) = v19;
      *(void *)uint64_t v9 = v17;
      if (&v18 != (uint64_t *)v9) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v9 + 16), (char *)__p, (uint64_t)v21, (v21 - (unsigned char *)__p) >> 2);
      }
    }
    else
    {
      uint64_t v12 = *v11;
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 - 32);
      *(void *)uint64_t v9 = v12;
      uint64_t v13 = *(char **)(a2 - 24);
      uint64_t v14 = *(void *)(a2 - 16);
      uint64_t v15 = (char *)(a2 - 24);
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v9 + 16), v13, v14, (v14 - (uint64_t)v13) >> 2);
      uint64_t v16 = v18;
      *((_DWORD *)v11 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v19;
      *uint64_t v11 = v16;
      if (v11 != &v18) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v15, (char *)__p, (uint64_t)v21, (v21 - (unsigned char *)__p) >> 2);
      }
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PruneProbsRecord const&,PruneProbsRecord const&),std::__wrap_iter<PruneProbsRecord*>>(a1, v10 + 40, (uint64_t (**)(uint64_t *, uint64_t *))a3, 0xCCCCCCCCCCCCCCCDLL * ((v10 + 40 - a1) >> 3));
    }
    if (__p)
    {
      BOOL v21 = __p;
      operator delete(__p);
    }
  }
}

void sub_1B1CB3064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PruneProbsRecord const&,PruneProbsRecord const&),std::__wrap_iter<PruneProbsRecord*>>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 40 * v6 + 40;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3 && (*a2)(v9, v9 + 40))
    {
      v9 += 40;
      uint64_t v6 = v11;
    }
    uint64_t v12 = *(void *)v9;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v9 + 8);
    *(void *)a1 = v12;
    if (a1 != v9) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 16), *(char **)(v9 + 16), *(void *)(v9 + 24), (uint64_t)(*(void *)(v9 + 24) - *(void *)(v9 + 16)) >> 2);
    }
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

void quasar::corrective_reranking::tokenize(uint64_t a1@<X0>, long long *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "en_US");
  quasar::getWordBoundarySeparatedString((char *)a1, &v24);
  if (SBYTE7(v6) < 0) {
    operator delete(__p[0]);
  }
  long long v22 = 0uLL;
  uint64_t v23 = 0;
  if (v24.__begin_ != v24.__end_) {
    quasar::trimUnicode();
  }
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v4)
  {
    if (quasar::gLogLevel >= 2)
    {
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v10 = 0u;
      long long v11 = 0u;
      long long v8 = 0u;
      long long v9 = 0u;
      long long v6 = 0u;
      long long v7 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Mismatch between tokenizer input and output", 43);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
    }
  }
  else
  {
    *a2 = v22;
    *((void *)a2 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v23;
    a2 = &v22;
  }
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  __p[0] = &v22;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B1CB3388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
  std::string __p = (void *)(v14 - 112);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = (void *)(v14 - 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::corrective_reranking::isPunctuation(char *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v1 = a1[23];
  if (v1 < 0)
  {
    if (*((void *)a1 + 1) != 1) {
      goto LABEL_10;
    }
    unint64_t v2 = *(char **)a1;
  }
  else
  {
    unint64_t v2 = a1;
    if (v1 != 1) {
LABEL_10:
    }
      operator new();
  }
  unsigned int v3 = *v2;
  if ((v3 & 0x80000000) != 0)
  {
    if (!__maskrune(v3, 0x2000uLL)) {
      goto LABEL_10;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v3 + 60) & 0x2000) == 0)
  {
    goto LABEL_10;
  }
  return 1;
}

void sub_1B1CB3680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  __cxa_end_catch();
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert(v9 - 240);
  _Unwind_Resume(a1);
}

void sub_1B1CB36B0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1CB36A8);
}

void quasar::corrective_reranking::getTokenRanges(uint64_t *a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    uint64_t v5 = 0;
    long long v6 = a2 + 2;
    do
    {
      if ((unint64_t)v5 >= *v6)
      {
        uint64_t v7 = (v5 - *a2) >> 3;
        if ((unint64_t)(v7 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v8 = *v6 - (void)*a2;
        uint64_t v9 = v8 >> 2;
        if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
          uint64_t v9 = v7 + 1;
        }
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          long long v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v6, v10);
        }
        else {
          long long v11 = 0;
        }
        long long v12 = &v11[8 * v7];
        *(void *)long long v12 = *(void *)(v2 + 24);
        uint64_t v5 = v12 + 8;
        uint64_t v14 = *a2;
        long long v13 = a2[1];
        if (v13 != *a2)
        {
          do
          {
            uint64_t v15 = *((void *)v13 - 1);
            v13 -= 8;
            *((void *)v12 - 1) = v15;
            v12 -= 8;
          }
          while (v13 != v14);
          long long v13 = *a2;
        }
        *a2 = v12;
        a2[1] = v5;
        a2[2] = &v11[8 * v10];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(void *)uint64_t v5 = *(void *)(v2 + 24);
        v5 += 8;
      }
      a2[1] = v5;
      v2 += 32;
    }
    while (v2 != v3);
  }
}

void sub_1B1CB37DC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::getTokens(long long **a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    unint64_t v5 = 0;
    do
    {
      if (v5 >= a2[2])
      {
        unint64_t v5 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a2, v2);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v2);
        v5 += 24;
      }
      a2[1] = v5;
      v2 += 2;
    }
    while (v2 != v3);
  }
}

void sub_1B1CB3884(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::detokenize(long long **a1@<X0>, std::string *a2@<X8>)
{
  quasar::corrective_reranking::getTokens(a1, (uint64_t *)&v3);
  quasar::joinAndAutoSpace(&v3, a2);
  uint64_t v4 = &v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v4);
}

void sub_1B1CB38E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::isCamelCaseUnicode()
{
}

void sub_1B1CB3A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::findTextMatches(uint64_t a1@<X1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(&__re.__traits_, a1, 0);
}

void sub_1B1CB3D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a68)
  {
    a69 = (uint64_t)a68;
    operator delete(a68);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)(v69 - 200));
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a64);
  _Unwind_Resume(a1);
}

void *std::match_results<std::__wrap_iter<char const*>>::str[abi:ne180100]@<X0>(void *result@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[1] - *result) >> 3) <= a2) {
    uint64_t v3 = (uint64_t)(result + 3);
  }
  else {
    uint64_t v3 = *result + 24 * a2;
  }
  if (*(unsigned char *)(v3 + 16)) {
    return std::string::__init_with_size[abi:ne180100]<char *,char *>(a3, *(char **)v3, *(char **)(v3 + 8), *(void *)(v3 + 8) - *(void *)v3);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

uint64_t quasar::corrective_reranking::classifyCasing(uint64_t a1)
{
  if (quasar::isLowerUnicode(a1)) {
    return 0;
  }
  if (quasar::isUpperUnicode(a1)) {
    return 1;
  }
  if ((quasar::isTitleUnicode(a1) & 1) == 0) {
    quasar::corrective_reranking::isCamelCaseUnicode();
  }
  return 2;
}

void quasar::corrective_reranking::transferLetterCasing()
{
}

void sub_1B1CB4178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
  if (*(char *)(v14 - 121) < 0) {
    operator delete(*(void **)(v14 - 144));
  }
  if (*(char *)(v14 - 97) < 0) {
    operator delete(*(void **)(v14 - 120));
  }
  if (*(char *)(v14 - 73) < 0) {
    operator delete(*(void **)(v14 - 96));
  }
  if (*(char *)(v14 - 49) < 0) {
    operator delete(*(void **)(v14 - 72));
  }
  _Unwind_Resume(a1);
}

unint64_t quasar::corrective_reranking::findAdjacentWordsToTarget(uint64_t a1, uint64_t a2, std::string *a3, uint64_t *a4, int a5)
{
  if (*a4 == a4[1]) {
    return 0;
  }
  uint64_t v7 = (_DWORD *)a1;
  int v8 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(void *)(a1 + 8) != 11) {
      goto LABEL_11;
    }
    uint64_t v9 = *(uint64_t **)a1;
  }
  else
  {
    uint64_t v9 = (uint64_t *)a1;
    if (v8 != 11)
    {
LABEL_11:
      if (*(void *)a2 == *(void *)(a2 + 8)) {
        float v13 = 0.0;
      }
      else {
        float v13 = (float)**(int **)a2;
      }
      goto LABEL_17;
    }
  }
  uint64_t v10 = *v9;
  uint64_t v11 = *(uint64_t *)((char *)v9 + 3);
  if (v10 != 0x6661747265736E69 || v11 != 0x7265746661747265) {
    goto LABEL_11;
  }
  uint64_t v14 = *(void *)(a2 + 8);
  if (*(void *)a2 == v14) {
    float v13 = INFINITY;
  }
  else {
    float v13 = (float)(*(_DWORD *)(v14 - 4) + *(_DWORD *)(v14 - 8));
  }
LABEL_17:
  int v15 = (int)v13;
  if ((v8 & 0x80) != 0)
  {
    if (*(void *)(a1 + 8) != 11) {
      goto LABEL_34;
    }
    long long v16 = *(uint64_t **)a1;
  }
  else
  {
    long long v16 = (uint64_t *)a1;
    if (v8 != 11) {
      goto LABEL_34;
    }
  }
  uint64_t v17 = *v16;
  uint64_t v18 = *(uint64_t *)((char *)v16 + 3);
  if (v17 == 0x6661747265736E69 && v18 == 0x7265746661747265)
  {
    quasar::joinAndAutoSpace(a3, __p);
    int isPunctuation = quasar::corrective_reranking::isPunctuation((char *)__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (v15 <= 1) {
      int v21 = 1;
    }
    else {
      int v21 = v15;
    }
    int v22 = v21 - 1;
    if (isPunctuation) {
      int v15 = v22;
    }
  }
LABEL_34:
  uint64_t TokenIndexFromTextIndex = quasar::corrective_reranking::getTokenIndexFromTextIndex(a4, v15);
  if ((*((unsigned char *)v7 + 23) & 0x80) == 0)
  {
    uint64_t v24 = 0;
    switch(*((unsigned char *)v7 + 23))
    {
      case 6:
        if (*v7 != 1701602660 || *((_WORD *)v7 + 2) != 25972) {
          return 0;
        }
        goto LABEL_73;
      case 7:
        if (*v7 != 1819305330 || *(_DWORD *)((char *)v7 + 3) != 1701011820) {
          return 0;
        }
        goto LABEL_86;
      case 0xB:
        if (*(void *)v7 != 0x6661747265736E69 || *(void *)((char *)v7 + 3) != 0x7265746661747265) {
          return 0;
        }
        goto LABEL_61;
      case 0xC:
        goto LABEL_81;
      default:
        return v24;
    }
  }
  uint64_t v26 = *((void *)v7 + 1);
  if (v26 == 6)
  {
    if (**(_DWORD **)v7 == 1701602660 && *(_WORD *)(*(void *)v7 + 4) == 25972)
    {
LABEL_73:
      if ((TokenIndexFromTextIndex & 0x80000000) == 0)
      {
        if (!TokenIndexFromTextIndex) {
          return 0;
        }
        goto LABEL_75;
      }
      goto LABEL_92;
    }
    return 0;
  }
  if (v26 == 7)
  {
    if (**(_DWORD **)v7 == 1819305330 && *(_DWORD *)(*(void *)v7 + 3) == 1701011820)
    {
LABEL_86:
      if ((TokenIndexFromTextIndex & 0x80000000) == 0) {
        goto LABEL_89;
      }
      goto LABEL_92;
    }
LABEL_79:
    if (v26 != 12) {
      return 0;
    }
    uint64_t v7 = *(_DWORD **)v7;
LABEL_81:
    if (*(void *)v7 != 0x6562747265736E69 || v7[2] != 1701998438) {
      return 0;
    }
    if ((TokenIndexFromTextIndex & 0x80000000) == 0)
    {
LABEL_89:
      if (!TokenIndexFromTextIndex) {
        return 0;
      }
LABEL_75:
      uint64_t v30 = TokenIndexFromTextIndex;
      LODWORD(TokenIndexFromTextIndex) = TokenIndexFromTextIndex - 1;
      goto LABEL_76;
    }
LABEL_92:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "targetTokenIndex >= 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  if (v26 != 11) {
    goto LABEL_79;
  }
  if (**(void **)v7 != 0x6661747265736E69 || *(void *)(*(void *)v7 + 3) != 0x7265746661747265)
  {
    uint64_t v26 = *((void *)v7 + 1);
    goto LABEL_79;
  }
LABEL_61:
  if ((TokenIndexFromTextIndex & 0x80000000) != 0) {
    goto LABEL_92;
  }
  uint64_t v30 = (TokenIndexFromTextIndex + 1);
LABEL_76:
  int v33 = TokenIndexFromTextIndex - a5;
  if ((int)TokenIndexFromTextIndex < a5) {
    int v33 = -1;
  }
  return (v33 + 1) | (unint64_t)(v30 << 32);
}

void sub_1B1CB4638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::corrective_reranking::getTokenIndexFromTextIndex(uint64_t *a1, int a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(v3 + 24) > a2) {
    return 0;
  }
  int v5 = *(_DWORD *)(v2 - 4) + *(_DWORD *)(v2 - 8);
  uint64_t v6 = v2 - v3;
  if (v5 <= a2) {
    return ((unint64_t)v6 >> 5) - 1;
  }
  uint64_t result = 0;
  unint64_t v7 = v6 >> 5;
  if (v7 <= 1) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = v7;
  }
  for (float i = (_DWORD *)(v3 + 28); ; i += 8)
  {
    int v10 = *(i - 1);
    int v11 = *i + v10;
    if (v10 <= a2 && v11 > a2) {
      break;
    }
    uint64_t v13 = result + 1;
    if (v7 > result + 1 && v11 <= a2 && i[7] > a2) {
      return (result + 1);
    }
    ++result;
    if (v8 == v13)
    {
      memset(v14, 0, sizeof(v14));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "Reached end of getTokenIndexFromTextIndex");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v14);
    }
  }
  return result;
}

void sub_1B1CB4780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::corrective_reranking::stripDiacritics(quasar::QsrText *a1@<X0>, void *a2@<X8>)
{
  v22[0] = 0;
  v22[1] = 0;
  uint64_t v23 = 0;
  uint64_t v4 = quasar::QsrText::SingletonInstance(a1);
  if (quasar::QsrText::normalizeUnicode(v4, (uint64_t)a1, (uint64_t)v22)) {
    quasar::toU32String();
  }
  if (quasar::gLogLevel >= 1)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to normalize unicode", 27);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (SHIBYTE(v23) < 0) {
    operator delete(v22[0]);
  }
}

void sub_1B1CB48F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a16);
  if (*(char *)(v21 - 33) < 0) {
    operator delete(*(void **)(v21 - 56));
  }
  _Unwind_Resume(a1);
}

void *quasar::corrective_reranking::operator<<(void *a1, uint64_t **a2)
{
  uint64_t v3 = **a2;
  if ((*a2)[1] != v3)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      if (*((unsigned char *)a2 + 8))
      {
        std::to_string(&v43, *(float *)(v3 + v5 + 144));
        long long v7 = std::string::insert(&v43, 0, " ");
        long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
        int64_t v45 = v7->__r_.__value_.__r.__words[2];
        *(_OWORD *)size_t v44 = v8;
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v44, "");
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"PARSE ", 6);
      long long v9 = (void *)std::ostream::operator<<();
      if (v45 >= 0) {
        long long v10 = v44;
      }
      else {
        long long v10 = (void **)v44[0];
      }
      if (v45 >= 0) {
        uint64_t v11 = HIBYTE(v45);
      }
      else {
        uint64_t v11 = (uint64_t)v44[1];
      }
      long long v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
      long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)":\n  Intent: ", 12);
      quasar::corrective_reranking::Parse::getIntent((quasar::corrective_reranking::Parse *)(v3 + v5), (uint64_t)&v43);
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v14 = &v43;
      }
      else {
        long long v14 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      long long v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n  Target: ", 11);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      quasar::corrective_reranking::Parse::getTarget((quasar::corrective_reranking::Parse *)(v3 + v5), (uint64_t *)&v43);
      if (v43.__r_.__value_.__r.__words[0] == v43.__r_.__value_.__l.__size_
        || (uint64_t v17 = v3 + v5, !*(unsigned char *)(v3 + v5 + 112)))
      {
        v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
      }
      else
      {
        long long v18 = (unsigned int **)(v17 + 88);
        long long v19 = *(int **)(v17 + 88);
        long long v20 = *(int **)(v17 + 96);
        if (v19 == v20)
        {
          v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
LABEL_29:
          int v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\n    Parsed from utterance: ", 28);
          quasar::corrective_reranking::Parse::getTarget((quasar::corrective_reranking::Parse *)(v3 + v5), (uint64_t *)&v42);
          quasar::joinAndAutoSpace(&v42, &v43);
          if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v23 = &v43;
          }
          else {
            uint64_t v23 = (std::string *)v43.__r_.__value_.__r.__words[0];
          }
          if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v24 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v24 = v43.__r_.__value_.__l.__size_;
          }
          std::locale v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
          uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\n    Matched text range: ", 25);
          quasar::corrective_reranking::TargetRange::toCodePoints(v18, a2[2], v41);
          std::locale v27 = quasar::corrective_reranking::operator<<(v26, (uint64_t *)v41);
          float v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" (utf8: ", 8);
          uint64_t v29 = quasar::corrective_reranking::operator<<(v28, (uint64_t *)v18);
          uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)")", 1);
          int v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\n    Matched text: ", 19);
          quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)v18, (uint64_t)a2[2], &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v33 = __p.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)p_p, v33);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v41[0])
          {
            v41[1] = v41[0];
            operator delete(v41[0]);
          }
          if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v43.__r_.__value_.__l.__data_);
          }
          v41[0] = &v42;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v41);
          goto LABEL_48;
        }
        float v21 = (float)(*(v20 - 1) + *(v20 - 2)) - (float)*v19;
        v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
        if (v21 != 0.0) {
          goto LABEL_29;
        }
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"None", 4);
LABEL_48:
      int v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\n  payload: ", 12);
      quasar::corrective_reranking::Parse::getPayload((quasar::corrective_reranking::Parse *)(v3 + v5), &v43);
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v35 = &v43;
      }
      else {
        uint64_t v35 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v43.__r_.__value_.__l.__size_;
      }
      uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"\n  weight: ", 11);
      unint64_t v38 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"\n", 1);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v45) < 0) {
        operator delete(v44[0]);
      }
      ++v6;
      uint64_t v3 = **a2;
      v5 += 232;
    }
    while (0x34F72C234F72C235 * (((*a2)[1] - v3) >> 3) > v6);
  }
  return a1;
}

void sub_1B1CB4D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char *a15, char *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15)
  {
    a16 = a15;
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  a15 = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

char *std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B1CB4E84(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__emplace_back_slow_path<std::string const&,quasar::corrective_reranking::TextRange>(uint64_t *a1, long long *a2, void *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  long long v20 = a1 + 2;
  if (v11) {
    long long v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  }
  else {
    long long v12 = 0;
  }
  long long v13 = (std::string *)&v12[4 * v5];
  v17[0] = v12;
  v17[1] = v13;
  long long v18 = v13;
  long long v19 = (char *)&v12[4 * v11];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    long long v13 = v18;
  }
  else
  {
    long long v14 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  v12[4 * v5 + 3] = *a3;
  long long v18 = (std::string *)((char *)v13 + 32);
  std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1B1CB4FA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TextRange>>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TextRange>*>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TextRange>*>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TextRange>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TextRange>>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TextRange>*>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TextRange>*>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TextRange>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  float32x2_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 32);
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v7 - 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v8;
      *(void *)(a3 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TextRange>>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TextRange>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TextRange>>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TextRange>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<quasar::corrective_reranking::MatchResult>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::corrective_reranking::MatchResult>,std::reverse_iterator<quasar::corrective_reranking::MatchResult*>,std::reverse_iterator<quasar::corrective_reranking::MatchResult*>,std::reverse_iterator<quasar::corrective_reranking::MatchResult*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::corrective_reranking::MatchResult>,std::reverse_iterator<quasar::corrective_reranking::MatchResult*>,std::reverse_iterator<quasar::corrective_reranking::MatchResult*>,std::reverse_iterator<quasar::corrective_reranking::MatchResult*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  float32x2_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 32);
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v7 - 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = v8;
      *(void *)(a3 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::MatchResult>,std::reverse_iterator<quasar::corrective_reranking::MatchResult*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::MatchResult>,std::reverse_iterator<quasar::corrective_reranking::MatchResult*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

double quasar::GeoRegion::GeoRegion(quasar::GeoRegion *this)
{
  *(void *)this = &unk_1F0A594D0;
  *((void *)this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)((char *)this + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *((void *)this + 11) = (char *)this + 96;
  *((void *)this + 15) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = (char *)this + 120;
  *((void *)this + 19) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = (char *)this + 144;
  return result;
}

void quasar::GeoRegion::~GeoRegion(quasar::GeoRegion *this)
{
  *(void *)this = &unk_1F0A594D0;
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 136, *((void **)this + 18));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 112, *((void **)this + 15));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 88, *((void **)this + 12));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  quasar::GeoRegion::~GeoRegion(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::GeoRegion::loadAndEraseFromJson(uint64_t a1, const std::string *a2, uint64_t a3)
{
  std::string::operator=((std::string *)(a1 + 8), a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "long-name");
  quasar::PTree::getChildOptional(a3, (uint64_t)__p);
}

void sub_1B1CB5B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 81) < 0) {
    operator delete(*(void **)(v21 - 104));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1CB5C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

BOOL quasar::GeoRegion::loadModels(quasar::GeoRegion *this, quasar::ModelLoader *a2, quasar::filesystem::Path *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)*((void *)this + 11);
  uint64_t v4 = (char *)this + 96;
  if (v3 == (void *)((char *)this + 96)) {
    return 1;
  }
  uint64_t v7 = (char *)this + 8;
  long long v8 = (uint64_t **)((char *)this + 136);
  uint64_t v9 = (uint64_t **)((char *)this + 112);
  do
  {
    if (*((char *)v3 + 79) < 0) {
      std::string::__init_copy_ctor_external(&v25, (const std::string::value_type *)v3[7], v3[8]);
    }
    else {
      std::string v25 = *(std::string *)(v3 + 7);
    }
    quasar::filesystem::Path::makeAbsolute((uint64_t)a3, (uint64_t)&v25, (std::string *)&v29);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v29;
    v25.__r_.__value_.__r.__words[2] = v30;
    BOOL v10 = quasar::filesystem::exists((char *)&v25);
    if (v10)
    {
      if (quasar::GeoRegion::isFst((uint64_t)&v25))
      {
        *(void *)&long long v29 = &unk_1F0A5C2D8;
        *((void *)&v29 + 1) = a2;
        *((void *)&v30 + 1) = &v29;
        std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__value_func[abi:ne180100]((uint64_t)v28, (uint64_t)&v29);
        quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::createRegionLmPlug((long long *)&v25, (uint64_t)v7, (uint64_t)v28, &v24);
        uint64_t v26 = (long long *)(v3 + 4);
        unint64_t v11 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (const void **)v3 + 4, (uint64_t)&std::piecewise_construct, &v26);
        long long v12 = v24;
        long long v24 = 0uLL;
        long long v13 = (std::__shared_weak_count *)v11[8];
        *(_OWORD *)(v11 + 7) = v12;
        if (v13)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          if (*((void *)&v24 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
          }
        }
        std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::~__value_func[abi:ne180100](v28);
        std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::~__value_func[abi:ne180100](&v29);
      }
      else
      {
        *(void *)&long long v29 = &unk_1F0A5C330;
        *((void *)&v29 + 1) = a2;
        *((void *)&v30 + 1) = &v29;
        std::__function::__value_func<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__value_func[abi:ne180100]((uint64_t)v27, (uint64_t)&v29);
        quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::createRegionLmPlug((long long *)&v25, (uint64_t)v7, (uint64_t)v27, &v24);
        uint64_t v26 = (long long *)(v3 + 4);
        uint64_t v17 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (const void **)v3 + 4, (uint64_t)&std::piecewise_construct, &v26);
        long long v18 = v24;
        long long v24 = 0uLL;
        long long v19 = (std::__shared_weak_count *)v17[8];
        *(_OWORD *)(v17 + 7) = v18;
        if (v19)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
          if (*((void *)&v24 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
          }
        }
        std::__function::__value_func<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__value_func[abi:ne180100](v27);
        std::__function::__value_func<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__value_func[abi:ne180100](&v29);
      }
    }
    else if (quasar::gLogLevel >= 1)
    {
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v29 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
      long long v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"GeoLM: Model cannot be loaded since it does not exist: ", 55);
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v15 = &v25;
      }
      else {
        uint64_t v15 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v25.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, size);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v29);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (!v10) {
      break;
    }
    long long v20 = (char *)v3[1];
    if (v20)
    {
      do
      {
        uint64_t v21 = v20;
        long long v20 = *(char **)v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        uint64_t v21 = (char *)v3[2];
        BOOL v22 = *(void *)v21 == (void)v3;
        uint64_t v3 = v21;
      }
      while (!v22);
    }
    uint64_t v3 = v21;
  }
  while (v21 != v4);
  return v10;
}

void sub_1B1CB5FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__function::__value_func<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__value_func[abi:ne180100](&a20);
  std::__function::__value_func<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__value_func[abi:ne180100](&a28);
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL quasar::GeoRegion::isFst(uint64_t a1)
{
  quasar::toLower(a1, (uint64_t)v5);
  std::string::basic_string[abi:ne180100]<0>(__p, ".fst");
  BOOL v1 = quasar::endsWith((uint64_t *)v5, (uint64_t *)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  return v1;
}

void sub_1B1CB60C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::createRegionLmPlug(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(a3 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(std::string::size_type *__return_ptr))(*(void *)v5 + 48))(&v8);
  std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::string const&,std::string const&,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,void>(a1, a2, &v8, a4);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1B1CB618C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::createRegionLmPlug(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(a3 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(std::string::size_type *__return_ptr))(*(void *)v5 + 48))(&v8);
  std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>,std::string const&,std::string const&,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>,void>(a1, a2, &v8, a4);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1B1CB6238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::GeoRegion::getRegionalFstLmMap(quasar::GeoRegion *this)
{
  return (uint64_t)this + 112;
}

uint64_t quasar::GeoRegion::getPlaceholderToFileMap(quasar::GeoRegion *this)
{
  return (uint64_t)this + 88;
}

uint64_t quasar::GeoRegion::getBitmapRegion(quasar::GeoRegion *this)
{
  return (uint64_t)this + 56;
}

uint64_t quasar::GeoRegion::getCircleRegion(quasar::GeoRegion *this)
{
  return (uint64_t)this + 72;
}

std::string *std::allocate_shared[abi:ne180100]<quasar::BitmapRegion,std::allocator<quasar::BitmapRegion>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  char v4 = (std::string *)operator new(0x38uLL);
  double result = std::__shared_ptr_emplace<quasar::BitmapRegion>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::BitmapRegion>,0>(v4, a1);
  *a2 = v4 + 1;
  a2[1] = v4;
  return result;
}

void sub_1B1CB62B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::BitmapRegion>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::BitmapRegion>,0>(std::string *a1, long long *a2)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A5F990;
  quasar::BitmapRegion::BitmapRegion(a1 + 1, a2);
  return a1;
}

void sub_1B1CB6314(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::BitmapRegion>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F990;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::BitmapRegion>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F990;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::BitmapRegion>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

std::string *std::allocate_shared[abi:ne180100]<quasar::CircleRegion,std::allocator<quasar::CircleRegion>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  char v4 = (std::string *)operator new(0x48uLL);
  double result = std::__shared_ptr_emplace<quasar::CircleRegion>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::CircleRegion>,0>(v4, a1);
  *a2 = v4 + 1;
  a2[1] = v4;
  return result;
}

void sub_1B1CB63FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::CircleRegion>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::CircleRegion>,0>(std::string *a1, long long *a2)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A5F9C8;
  quasar::CircleRegion::CircleRegion(a1 + 1, a2);
  return a1;
}

void sub_1B1CB6458(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::CircleRegion>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F9C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::CircleRegion>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F9C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::CircleRegion>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

std::string *std::allocate_shared[abi:ne180100]<quasar::BitmapRegion,std::allocator<quasar::BitmapRegion>,std::string &,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  char v4 = (std::string *)operator new(0x38uLL);
  double result = std::__shared_ptr_emplace<quasar::BitmapRegion>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<quasar::BitmapRegion>,0>(v4, a1);
  *a2 = v4 + 1;
  a2[1] = v4;
  return result;
}

void sub_1B1CB6540(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::BitmapRegion>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<quasar::BitmapRegion>,0>(std::string *a1, long long *a2)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A5F990;
  quasar::BitmapRegion::BitmapRegion(a1 + 1, a2);
  return a1;
}

void sub_1B1CB659C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_0,std::allocator<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_0,std::allocator<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F0A5C2D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_0,std::allocator<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5C2D8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_0,std::allocator<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::operator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*a2 + 64))(*a2, 0x10000000, 0);
  if (result != 0x10000000)
  {
    memset(v4, 0, sizeof(v4));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"FST: input label is not sorted!", 31);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
  }
  return result;
}

void sub_1B1CB6730(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_0,std::allocator<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_0,std::allocator<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target_type()
{
}

void *std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

std::string *std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::string const&,std::string const&,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,void>@<X0>(long long *a1@<X1>, uint64_t a2@<X2>, std::string::size_type *a3@<X3>, void *a4@<X8>)
{
  std::string::size_type v8 = (std::string *)operator new(0x60uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_1B1CB687C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(std::string *a1, long long *a2, uint64_t a3, std::string::size_type *a4)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A5FE28;
  std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::construct[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::string const&,std::string const&,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((int)&v6, a1 + 1, a2, a3, a4);
  return a1;
}

void sub_1B1CB68F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FE28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FE28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__on_zero_shared(uint64_t a1)
{
  std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::construct[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::string const&,std::string const&,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(int a1, std::string *this, long long *a3, uint64_t a4, std::string::size_type *a5)
{
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  char v9 = 1;
  quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::RegionalLmPlug(this, a3, (long long *)&__p, a5);
  if (v9)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1B1CB6A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

std::string *quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::RegionalLmPlug(std::string *this, long long *a2, long long *a3, std::string::size_type *a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 1, a3);
  std::string::size_type v8 = a4[1];
  this[2].__r_.__value_.__l.__size_ = *a4;
  this[2].__r_.__value_.__r.__words[2] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void sub_1B1CB6AE4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*(unsigned char *)(a2 + 48) && *(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    char v4 = *(void **)a2;
    operator delete(v4);
  }
}

uint64_t std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  }
  return a1;
}

void std::__function::__func<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_1,std::allocator<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_1,std::allocator<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F0A5C330;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_1,std::allocator<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5C330;
  a2[1] = v2;
  return result;
}

void std::__function::__func<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_1,std::allocator<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::operator()(uint64_t a1, uint64_t a2)
{
  memset(v8, 0, sizeof(v8));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"loading NNLM from ", 18);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  long long v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " not implemented");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v8);
}

uint64_t std::__function::__func<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_1,std::allocator<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_1,std::allocator<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target_type()
{
}

void *std::__function::__value_func<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

std::string *std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>,std::string const&,std::string const&,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>,void>@<X0>(long long *a1@<X1>, uint64_t a2@<X2>, std::string::size_type *a3@<X3>, void *a4@<X8>)
{
  std::string::size_type v8 = (std::string *)operator new(0x60uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_1B1CB6E5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>,0>(std::string *a1, long long *a2, uint64_t a3, std::string::size_type *a4)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A5FE60;
  std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::construct[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>,std::string const&,std::string const&,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>((int)&v6, a1 + 1, a2, a3, a4);
  return a1;
}

void sub_1B1CB6ED4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FE60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FE60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::__on_zero_shared(uint64_t a1)
{
  std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::construct[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>,std::string const&,std::string const&,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>(int a1, std::string *this, long long *a3, uint64_t a4, std::string::size_type *a5)
{
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  char v9 = 1;
  quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::RegionalLmPlug(this, a3, (long long *)&__p, a5);
  if (v9)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1B1CB701C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

std::string *quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::RegionalLmPlug(std::string *this, long long *a2, long long *a3, std::string::size_type *a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 1, a3);
  std::string::size_type v8 = a4[1];
  this[2].__r_.__value_.__l.__size_ = *a4;
  this[2].__r_.__value_.__r.__words[2] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void sub_1B1CB70C4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  }
  return a1;
}

void quasar::ContextualData::ContextualData(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_OWORD *)(a1 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(_OWORD *)(a1 + 11std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(_OWORD *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 20std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(_DWORD *)(a1 + 208) = 1065353216;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 23std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_DWORD *)(a1 + 248) = 1065353216;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = a1 + 272;
  *(void *)(a1 + 27std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 28std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 288), "•|\\(|\\)|\"|\\[|\\]|\\{|\\}|®|,|;|\\?|\\!|\\\\"");
  *(unsigned char *)(a1 + 31std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(_OWORD *)(a1 + 32std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 35std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 2) = 1065353216;
  quasar::ContextualData::parseConfig(a1, a2);
}

void sub_1B1CB7264(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v7);
  if (*(char *)(v1 + 311) < 0) {
    operator delete(*v6);
  }
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy(v1 + 264, *(void **)(v1 + 272));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v5);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 176);
  if (*(char *)(v1 + 175) < 0) {
    operator delete(*v8);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4);
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::~__hash_table(v2);
  uint64_t v10 = *(void *)(v1 + 24);
  *(void *)(v1 + ++*(_DWORD *)(result + 24) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void quasar::ContextualData::parseConfig(uint64_t a1, uint64_t a2)
{
  memset(v5, 0, 24);
  *(_OWORD *)std::string __p = 0u;
  long long v3 = 0u;
  LODWORD(v4) = 1065353216;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v6, a2, (uint64_t *)v5, (uint64_t)__p);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  __p[0] = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "contextual-data");
  quasar::SystemConfig::getPtreeOptional((uint64_t)v6, (uint64_t)__p);
}

void sub_1B1CB82B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(a25);
  }
  quasar::PTree::~PTree((quasar::PTree *)v31);
  if (v32 < 0) {
    operator delete(v31[8]);
  }
  if (v34 < 0) {
    operator delete(v33);
  }
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&v35);
  _Unwind_Resume(a1);
}

void sub_1B1CB82DC()
{
}

void sub_1B1CB82E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  if (a67 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1CB8344);
}